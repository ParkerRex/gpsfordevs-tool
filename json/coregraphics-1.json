[
  {
    "title": "kCGWindowSharingReadOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowsharingtype/kcgwindowsharingreadonly",
    "html": "Discussion\n\nThe window is shared and its contents can be read by all processes but modified only by the process that created it."
  },
  {
    "title": "kCGWindowSharingReadWrite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowsharingtype/kcgwindowsharingreadwrite",
    "html": "Discussion\n\nThe window is shared and its contents can be read and modified by any process."
  },
  {
    "title": "CGDisplayBytesPerRow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/1807976-cgdisplaybytesperrow",
    "html": "Deprecated\n\nUse CGDisplayCreateImage or CGDisplayCreateImageForRect instead.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe number of bytes per row in the display. This number also represents the stride between pixels in the same column of the display.\n\nOverview\n\nThis deprecated function required pixel data to be retrieved manually. Starting in OS X v10.6 one of the CGDisplayCreateImage functions should be used to create an image from the display. For more information, see CGImage.\n\nSee Also\nRetrieving Display Parameters\nCGDisplayBounds\nReturns the bounds of a display in the global display coordinate space.\nCGDisplayPixelsHigh\nReturns the display height in pixel units.\nCGDisplayPixelsWide\nReturns the display width in pixel units.\nCGDisplayBitsPerPixel\nReturns the number of bits used to represent a pixel in the framebuffer.\nCGDisplayBitsPerSample\nReturns the number of bits used to represent a pixel component in the framebuffer.\nCGDisplaySamplesPerPixel\nReturns the number of color components used to represent a pixel."
  },
  {
    "title": "CGPDFPageGetDrawingTransform | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454893-cgpdfpagegetdrawingtransform",
    "html": "Parameters\npage\n\nA PDF page.\n\nbox\n\nA constant that specifies the type of box. For possible values, see CGPDFBox.\n\nrect\n\nA Quartz rectangle.\n\nrotate\n\nAn integer, that must be a multiple of 90, that specifies the angle by which the specified rectangle is rotated clockwise.\n\npreserveAspectRatio\n\nA Boolean value that specifies whether or not the aspect ratio should be preserved. A value of YES specifies that the aspect ratio should be preserved.\n\nReturn Value\n\nAn affine transform that maps the box specified by the box parameter to the rectangle specified by the rect parameter.\n\nDiscussion\n\nQuartz constructs the affine transform as follows:\n\nComputes the effective rectangle by intersecting the rectangle associated with box and the /MediaBox entry of the specified page.\n\nRotates the effective rectangle according to the page’s /Rotate entry.\n\nCenters the resulting rectangle on rect.If the value of the rotate parameter is non-zero, then the rectangle is rotated clockwise by rotate degrees. The value of rotate must be a multiple of 90.\n\nScales the rectangle, if necessary, so that it coincides with the edges of rect. If the value of preserveAspectRatio parameter is YES, then the final rectangle coincides with the edges of rect only in the more restrictive dimension.\n\nSee Also\nGetting Page Information\nCGPDFPageGetBoxRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nCGPDFPageGetDictionary\nReturns the dictionary of a PDF page.\nCGPDFPageGetDocument\nReturns the document for a page.\nCGPDFPageGetPageNumber\nReturns the page number of the specified PDF page.\nCGPDFPageGetRotationAngle\nReturns the rotation angle of a PDF page."
  },
  {
    "title": "kCGErrorApplicationCanOnlyBeRunInOneSessionAtATime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_constants/kcgerrorapplicationcanonlyberuninonesessionatatime",
    "html": "Overview\n\nThe application being launched is incompatible with multiple user sessions and is already running in another user session."
  },
  {
    "title": "kCGErrorApplicationNotPermittedToExecute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_constants/kcgerrorapplicationnotpermittedtoexecute",
    "html": "Overview\n\nThe application is not permitted to run."
  },
  {
    "title": "kCGErrorClassicApplicationsMustBeLaunchedByClassic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_constants/kcgerrorclassicapplicationsmustbelaunchedbyclassic",
    "html": "Overview\n\nThe window server could not launch the application. It must be launched by the Classic environment."
  },
  {
    "title": "CGColorSpaceCreateWithPropertyList | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/2962829-cgcolorspacecreatewithpropertyli",
    "html": "Parameters\nplist\n\nThe list of properties to use.\n\nSee Also\nRelated Documentation\nCGColorSpaceCopyPropertyList\nReturns a copy of the color space's properties."
  },
  {
    "title": "CGColorCreateGenericGrayGamma2_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/3042354-cgcolorcreategenericgraygamma2_2",
    "html": "Parameters\ngray\n\nA grayscale value (0.0 - 1.0).\n\nalpha\n\nAn alpha value (0.0 - 1.0)."
  },
  {
    "title": "kCGErrorApplicationIsLaunching | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_constants/kcgerrorapplicationislaunching",
    "html": "Overview\n\nThe application is in the process of launching but has not yet checked in with the window server."
  },
  {
    "title": "kCGErrorApplicationIncorrectExecutableFormatFound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_constants/kcgerrorapplicationincorrectexecutableformatfound",
    "html": "Overview\n\nThe application does not have any executable code for the current system."
  },
  {
    "title": "kCGErrorApplicationAlreadyRunning | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_constants/kcgerrorapplicationalreadyrunning",
    "html": "Overview\n\nThe application being launched was already running and checked in with the window server."
  },
  {
    "title": "kCGErrorApplicationRequiresNewerSystem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_constants/kcgerrorapplicationrequiresnewersystem",
    "html": "Overview\n\nThe application requires a newer version of the operating system to run than is currently available."
  },
  {
    "title": "kCGErrorForkFailed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_constants/kcgerrorforkfailed",
    "html": "Overview\n\nThe system was unable to fork a new process to launch the application."
  },
  {
    "title": "CGGlyphMax | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgglyphdeprecatedenum/cgglyphmax",
    "html": "Deprecated\n\nUse kCGGlyphMax instead."
  },
  {
    "title": "kCGWindowSharingNone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowsharingtype/kcgwindowsharingnone",
    "html": "Discussion\n\nThe window is not shared."
  },
  {
    "title": "CGPDFPageRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1571723-cgpdfpageretain",
    "html": "Parameters\npage\n\nA PDF page.\n\nReturn Value\n\nThe same page you passed in as the page parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the page parameter is NULL.\n\nSee Also\nRetaining and Releasing a PDF Page\nCGPDFPageRelease\nDecrements the retain count of a PDF page."
  },
  {
    "title": "CGColorSpaceCopyPropertyList | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/2962828-cgcolorspacecopypropertylist",
    "html": "See Also\nRelated Documentation\nCGColorSpaceCreateWithPropertyList\nCreates a color space from a property list."
  },
  {
    "title": "CGPDFPageGetDictionary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455125-cgpdfpagegetdictionary",
    "html": "Parameters\npage\n\nA PDF page.\n\nReturn Value\n\nReturns the PDF dictionary for the specified page.\n\nSee Also\nGetting Page Information\nCGPDFPageGetBoxRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nCGPDFPageGetDocument\nReturns the document for a page.\nCGPDFPageGetDrawingTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nCGPDFPageGetPageNumber\nReturns the page number of the specified PDF page.\nCGPDFPageGetRotationAngle\nReturns the rotation angle of a PDF page."
  },
  {
    "title": "CGDisplayBitsPerSample | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/1807973-cgdisplaybitspersample",
    "html": "Deprecated\n\nUse CGDisplayModeCopyPixelEncoding instead.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe number of bits used to represent a pixel component such as a color value in the framebuffer.\n\nOverview\n\nThis deprecated function allows an application to retrieve the number of bits used to represent a pixel component in the framebuffer. Starting in OS X v10.6 the CGDisplayModeCopyPixelEncoding should be used because it returns to the user the I/O Kit Graphics Mode, which can be used to determine the bits per sample, as well as their encoding. This can prevent treating display modes with different encodings, but a similar total number of bits per sample, in the same way.\n\nSee Also\nRetrieving Display Parameters\nCGDisplayBounds\nReturns the bounds of a display in the global display coordinate space.\nCGDisplayPixelsHigh\nReturns the display height in pixel units.\nCGDisplayPixelsWide\nReturns the display width in pixel units.\nCGDisplayBitsPerPixel\nReturns the number of bits used to represent a pixel in the framebuffer.\nCGDisplaySamplesPerPixel\nReturns the number of color components used to represent a pixel.\nCGDisplayBytesPerRow\nReturns the number of bytes per row in a display."
  },
  {
    "title": "CGDisplaySamplesPerPixel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/1807975-cgdisplaysamplesperpixel",
    "html": "Deprecated\n\nUse CGDisplayModeCopyPixelEncoding instead.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe number of color components used to represent a pixel.\n\nOverview\n\nThis deprecated function allows an application to retrieve the number of color components used to represent a pixel in the framebuffer. Starting in OS X v10.6 the CGDisplayModeCopyPixelEncoding should be used because it returns to the user the I/O Kit Graphics Mode, which can be used to determine the samples per pixel, as well as their encoding. This can prevent treating display modes with different encodings, but a similar total number of samples per pixel, in the same way.\n\nSee Also\nRetrieving Display Parameters\nCGDisplayBounds\nReturns the bounds of a display in the global display coordinate space.\nCGDisplayPixelsHigh\nReturns the display height in pixel units.\nCGDisplayPixelsWide\nReturns the display width in pixel units.\nCGDisplayBitsPerPixel\nReturns the number of bits used to represent a pixel in the framebuffer.\nCGDisplayBitsPerSample\nReturns the number of bits used to represent a pixel component in the framebuffer.\nCGDisplayBytesPerRow\nReturns the number of bytes per row in a display."
  },
  {
    "title": "CGDisplayBitsPerPixel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/1807972-cgdisplaybitsperpixel",
    "html": "Deprecated\n\nUse CGDisplayModeCopyPixelEncoding instead.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe number of bits used to represent a pixel in the framebuffer.\n\nOverview\n\nThis deprecated function allows an application to retrieve the number of bits used to represent a pixel in the framebuffer. Starting in OS X v10.6 the CGDisplayModeCopyPixelEncoding should be used because it returns to the user the I/O Kit Graphics Mode, which can be used to determine the bits per pixel, as well as their encoding. This can prevent treating display modes with different encodings, but a similar total number of bits per pixel, in the same way.\n\nSee Also\nRetrieving Display Parameters\nCGDisplayBounds\nReturns the bounds of a display in the global display coordinate space.\nCGDisplayPixelsHigh\nReturns the display height in pixel units.\nCGDisplayPixelsWide\nReturns the display width in pixel units.\nCGDisplayBitsPerSample\nReturns the number of bits used to represent a pixel component in the framebuffer.\nCGDisplaySamplesPerPixel\nReturns the number of color components used to represent a pixel.\nCGDisplayBytesPerRow\nReturns the number of bytes per row in a display."
  },
  {
    "title": "CGPDFPageGetDocument | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456166-cgpdfpagegetdocument",
    "html": "Parameters\npage\n\nA PDF page.\n\nReturn Value\n\nThe PDF document with which the specified page is associated.\n\nSee Also\nGetting Page Information\nCGPDFPageGetBoxRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nCGPDFPageGetDictionary\nReturns the dictionary of a PDF page.\nCGPDFPageGetDrawingTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nCGPDFPageGetPageNumber\nReturns the page number of the specified PDF page.\nCGPDFPageGetRotationAngle\nReturns the rotation angle of a PDF page."
  },
  {
    "title": "CGPDFPageGetPageNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454587-cgpdfpagegetpagenumber",
    "html": "Parameters\npage\n\nA PDF page.\n\nReturn Value\n\nReturns the page number of the specified page.\n\nSee Also\nGetting Page Information\nCGPDFPageGetBoxRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nCGPDFPageGetDictionary\nReturns the dictionary of a PDF page.\nCGPDFPageGetDocument\nReturns the document for a page.\nCGPDFPageGetDrawingTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nCGPDFPageGetRotationAngle\nReturns the rotation angle of a PDF page."
  },
  {
    "title": "kCGErrorRetryRegistration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_constants/kcgerrorretryregistration",
    "html": "Overview\n\nThe application should retry its registration shortly."
  },
  {
    "title": "CGDisplayBaseAddress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/1807908-cgdisplaybaseaddress",
    "html": "Deprecated\n\nThere is no replacement; because direct access to the raw framebuffer is not necessary, there is no need to retrieve its memory address.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe base address in framebuffer memory of the specified display. If the display ID is invalid, the return value is NULL.\n\nOverview\n\nIf the display has not been captured, the returned address may refer to read-only memory.\n\nSpecial Considerations\n\nThis deprecated function returned an address in framebuffer memory. Instead of using the raw framebuffer to draw to the screen, you should instead use a supported drawing engine such as Quartz or OpenGL. While accessing the framebuffer directly has been deprecated, it is possible to copy screen data using CGDisplayCreateImage.\n\nSee Also\nCapturing and Releasing Displays\nCGDisplayCapture\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nCGDisplayCaptureWithOptions\nObtains exclusive use of a display for an application using the options you specify.\nCGDisplayRelease\nReleases a captured display.\nCGDisplayIsCaptured\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nCGCaptureAllDisplays\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nCGCaptureAllDisplaysWithOptions\nCaptures all attached displays, using the specified options.\nCGReleaseAllDisplays\nReleases all captured displays.\nCGShieldingWindowID\nReturns the window ID of the shield window for a captured display.\nCGShieldingWindowLevel\nReturns the window level of the shield window for a captured display.\nCGDisplayAddressForPosition\nReturns the address in framebuffer memory that corresponds to a position on an online display.\nCGDisplayGetDrawingContext\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "CGPDFPageRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1571724-cgpdfpagerelease",
    "html": "Parameters\npage\n\nA PDF page.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the page parameter is NULL.\n\nSee Also\nRetaining and Releasing a PDF Page\nCGPDFPageRetain\nIncrements the retain count of a PDF page."
  },
  {
    "title": "CGAffineTransformIsIdentity(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455754-cgaffinetransformisidentity",
    "html": "Parameters\nt\n\nThe affine transform to check.\n\nReturn Value\n\nReturns true if t is the identity transform, false otherwise.\n\nSee Also\nEvaluating Affine Transforms\nfunc CGAffineTransformEqualToTransform(CGAffineTransform, CGAffineTransform) -> Bool\nChecks whether two affine transforms are equal."
  },
  {
    "title": "CGColorConversionInfoGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/2113681-cgcolorconversioninfogettypeid",
    "html": "Return Value\n\nThe Core Foundation type identifier for CGColorConversionInfoRef."
  },
  {
    "title": "CGGlyphMin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgglyphdeprecatedenum/cgglyphmin",
    "html": "Deprecated\n\nUse kCGGlyphMax instead."
  },
  {
    "title": "CGDisplayStreamRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamref",
    "html": "Overview\n\nThis data type streams the contents of a display to your app. The contents can be scaled or converted to a different color space. You can also choose to capture only a portion of a display. Your update handler can be called either from a traditionalCFRunLoop or on a dispatch queue."
  },
  {
    "title": "CGDisplayStreamUpdateRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamupdateref",
    "html": "Overview\n\nThis data type encapsulates information about how the frame changed since the previous frame delivered by a display stream. The metadata about the frame describes the portions of the screen that were redrawn and the portions of the screen that were moved from one place to another. You can merge multiple updates into a single update."
  },
  {
    "title": "Display ID Defaults | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/display_id_defaults",
    "html": "Topics\nConstants\nkCGDirectMainDisplay\nThe current main display ID.\nkCGNullDirectDisplay\nA value that will never correspond to actual hardware."
  },
  {
    "title": "kCGWindowSharingCFNumberType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowsharingcfnumbertype",
    "html": "Discussion\n\nThe encoding type for window sharing values inside a CFNumberRef opaque type."
  },
  {
    "title": "CGFontGetGlyphWithGlyphName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396340-cgfontgetglyphwithglyphname",
    "html": "Parameters\nfont\n\nA font object.\n\nname\n\nThe name of the desired glyph.\n\nReturn Value\n\nThe named glyph, or 0 if the named glyph isn’t associated with the font.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGPDFPageGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454478-cgpdfpagegettypeid",
    "html": "Return Value\n\nReturns the Core Foundation type for a PDF page."
  },
  {
    "title": "CGFontGetStemV | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396380-cgfontgetstemv",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe thickness of the dominant vertical stems of glyphs in a font.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGFontGetGlyphBBoxes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396342-cgfontgetglyphbboxes",
    "html": "Parameters\nfont\n\nA font object.\n\nglyphs\n\nA array of glyphs.\n\ncount\n\nThe number of items in the glyphs array.\n\nbboxes\n\nOn return, the bounding boxes for each glyph.\n\nReturn Value\n\nfalse if bounding boxes can't be retrieved for any reason; true otherwise.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGFontGetItalicAngle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396404-cgfontgetitalicangle",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe italic angle of the font, measured in degrees counter-clockwise from the vertical.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGColorSpaceCreateWithICCData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/2866135-cgcolorspacecreatewithiccdata",
    "html": "Parameters\ndata\n\nThe data containing the ICC profile to set for the new color space."
  },
  {
    "title": "CGDisplayStreamStop | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455658-cgdisplaystreamstop",
    "html": "Parameters\ndisplayStream\n\nThe display stream that should stop streaming data.\n\nReturn Value\n\nkCGErrorSuccess if the stream started, otherwise an appropriate error code.\n\nDiscussion\n\nAfter this call returns, the stream is stopped. When the stream stops, its callback is called with a status of kCGDisplayStreamFrameStatusStopped. You must wait until this callback is received before releasing the display stream object.\n\nIt is safe to call this function from within the handler block.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreate\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nCGDisplayStreamCreateWithDispatchQueue\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nCGDisplayStreamStart\nTells a stream to start sending updates.\nDeprecated\nCGDisplayStreamGetRunLoopSource\nGets the run loop source for a display stream.\nDeprecated\nCGDisplayStreamUpdateGetRects\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nCGDisplayStreamUpdateCreateMergedUpdate\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nCGDisplayStreamUpdateGetMovedRectsDelta\nReturn the movement delta values for a single update.\nDeprecated\nCGDisplayStreamUpdateGetDropCount\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nCGDisplayStreamGetTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nCGDisplayStreamUpdateGetTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGColorSpaceGetNumberOfComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408848-cgcolorspacegetnumberofcomponent",
    "html": "Parameters\ncs\n\nThe color space to examine.\n\nReturn Value\n\nThe number of color components in the specified color space, not including the alpha value.\n\nDiscussion\n\nA color space defines an n-dimensional space whose dimensions (or components) represent intensity values. Use this function to obtain the number of components in a given color space: for example, in an RGB color space this function returns 3 (for the three intensity values red, green, and blue).\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCProfile\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nCGColorSpaceCopyICCData\nReturns a copy of the ICC profile data of the provided color space.\nCGColorSpaceSupportsOutput\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nCGColorSpaceGetTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nCGColorSpaceGetModel\nReturns the color space model of the provided color space.\nCGColorSpaceIsWideGamutRGB\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nCGColorSpaceGetBaseColorSpace\nReturns the base color space of a pattern or indexed color space.\nCGColorSpaceGetColorTableCount\nReturns the number of entries in the color table of an indexed color space.\nCGColorSpaceGetColorTable\nCopies the entries in the color table of an indexed color space.\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "CGDisplayStreamGetRunLoopSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455403-cgdisplaystreamgetrunloopsource",
    "html": "Parameters\ndisplayStream\n\nA display stream reference created using the CGDisplayStreamCreate function.\n\nReturn Value\n\nAn event source for the display stream. This function returns NULL if you pass in a display stream that was created by calling the CGDisplayStreamCreateWithDispatchQueue function.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreate\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nCGDisplayStreamCreateWithDispatchQueue\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nCGDisplayStreamStart\nTells a stream to start sending updates.\nDeprecated\nCGDisplayStreamStop\nTells a stream to stop sending updates.\nDeprecated\nCGDisplayStreamUpdateGetRects\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nCGDisplayStreamUpdateCreateMergedUpdate\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nCGDisplayStreamUpdateGetMovedRectsDelta\nReturn the movement delta values for a single update.\nDeprecated\nCGDisplayStreamUpdateGetDropCount\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nCGDisplayStreamGetTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nCGDisplayStreamUpdateGetTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGGetLastMouseDelta | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456484-cggetlastmousedelta",
    "html": "Parameters\ndeltaX\n\nA pointer to a int32_t variable. On return, this variable contains the horizontal change in the mouse position since the last mouse movement event.\n\ndeltaY\n\nA pointer to a int32_t variable. On return, this variable contains the vertical change in the mouse position since the last mouse movement event.\n\nDiscussion\n\nThis function is not recommended for general use. Instead, you should use the mouse-tracking functions provided by the NSEvent class.\n\nSee Also\nControlling the Mouse Cursor\nCGDisplayHideCursor\nHides the mouse cursor, and increments the hide cursor count.\nCGDisplayShowCursor\nDecrements the hide cursor count, and shows the mouse cursor if the count is 0.\nCGDisplayMoveCursorToPoint\nMoves the mouse cursor to a specified point relative to the upper-left corner of the display.\nCGCursorIsVisible\nReturns a Boolean value indicating whether the mouse cursor is visible.\nDeprecated\nCGCursorIsDrawnInFramebuffer\nReturns a Boolean value indicating whether the mouse cursor is drawn in framebuffer memory.\nDeprecated\nCGAssociateMouseAndMouseCursorPosition\nConnects or disconnects the mouse and cursor while an application is in the foreground.\nCGWarpMouseCursorPosition\nMoves the mouse cursor without generating events."
  },
  {
    "title": "CGDisplayStreamUpdateCreateMergedUpdate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454341-cgdisplaystreamupdatecreatemerge",
    "html": "Parameters\nfirstUpdate\n\nA CGDisplayStreamUpdateRef reference. This must be the earlier of the two update references.\n\nsecondUpdate\n\nA CGDisplayStreamUpdateRef reference. This must be the later of the two update references.\n\nReturn Value\n\nA new update that contains the union of the information stored in the two source updates.\n\nDiscussion\n\nIf your app needs to drop a frame without processing it, use this function to merge that frame’s update data with the data provided for a later frame update.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreate\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nCGDisplayStreamCreateWithDispatchQueue\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nCGDisplayStreamStart\nTells a stream to start sending updates.\nDeprecated\nCGDisplayStreamStop\nTells a stream to stop sending updates.\nDeprecated\nCGDisplayStreamGetRunLoopSource\nGets the run loop source for a display stream.\nDeprecated\nCGDisplayStreamUpdateGetRects\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nCGDisplayStreamUpdateGetMovedRectsDelta\nReturn the movement delta values for a single update.\nDeprecated\nCGDisplayStreamUpdateGetDropCount\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nCGDisplayStreamGetTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nCGDisplayStreamUpdateGetTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGColorSpaceSupportsOutput | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1690958-cgcolorspacesupportsoutput",
    "html": "Parameters\nspace\n\nThe color space.\n\nReturn Value\n\nYES if the color space can be used as a destination, otherwise NO.\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCProfile\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nCGColorSpaceCopyICCData\nReturns a copy of the ICC profile data of the provided color space.\nCGColorSpaceGetNumberOfComponents\nReturns the number of color components in a color space.\nCGColorSpaceGetTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nCGColorSpaceGetModel\nReturns the color space model of the provided color space.\nCGColorSpaceIsWideGamutRGB\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nCGColorSpaceGetBaseColorSpace\nReturns the base color space of a pattern or indexed color space.\nCGColorSpaceGetColorTableCount\nReturns the number of entries in the color table of an indexed color space.\nCGColorSpaceGetColorTable\nCopies the entries in the color table of an indexed color space.\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "CGDisplayStreamUpdateGetRects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455530-cgdisplaystreamupdategetrects",
    "html": "Parameters\nupdateRef\n\nA CGDisplayStreamUpdateRef reference for a frame update.\n\nrectType\n\nThe rectangles you are interested in. See CGDisplayStreamUpdateRectType.\n\nrectCount\n\nA pointer to a size_t. This value must not be NULL. On return, this location is updated to contain the number of rectangles in the returned array.\n\nReturn Value\n\nAn array of CGRect structures.\n\nDiscussion\n\nDo not free the array. It is managed automatically by the update and disposed of when the update object is destroyed.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreate\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nCGDisplayStreamCreateWithDispatchQueue\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nCGDisplayStreamStart\nTells a stream to start sending updates.\nDeprecated\nCGDisplayStreamStop\nTells a stream to stop sending updates.\nDeprecated\nCGDisplayStreamGetRunLoopSource\nGets the run loop source for a display stream.\nDeprecated\nCGDisplayStreamUpdateCreateMergedUpdate\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nCGDisplayStreamUpdateGetMovedRectsDelta\nReturn the movement delta values for a single update.\nDeprecated\nCGDisplayStreamUpdateGetDropCount\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nCGDisplayStreamGetTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nCGDisplayStreamUpdateGetTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGPathCreateMutable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411209-cgpathcreatemutable",
    "html": "Return Value\n\nA new mutable path. You are responsible for releasing this object.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRelease\nDecrements the retain count of a graphics path.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGColorSpaceCreateCalibratedRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408861-cgcolorspacecreatecalibratedrgb",
    "html": "Parameters\nwhitePoint\n\nAn array of 3 numbers specifying the tristimulus value, in the CIE 1931 XYZ-space, of the diffuse white point.\n\nblackPoint\n\nAn array of 3 numbers specifying the tristimulus value, in CIE 1931 XYZ-space, of the diffuse black point.\n\ngamma\n\nAn array of 3 numbers specifying the gamma for the red, green, and blue components of the color space.\n\nmatrix\n\nAn array of 9 numbers specifying the linear interpretation of the gamma-modified RGB values of the color space with respect to the final XYZ representation.\n\nReturn Value\n\nA new calibrated RGB color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nCreates a device-independent RGB color space that represents colors relative to a reference white point. This white point is based on the whitest light that can be generated by the output device. Colors in a device-independent color space should appear the same when displayed on different devices, to the extent that the capabilities of the device allow.\n\nFor color spaces that require a detailed gamma, such as the piecewise transfer function used in sRGB or ITU-R BT.709, you may want to use the function CGColorSpaceCreateICCBased instead, because it can accurately represent these gamma curves.\n\nSee Also\nCreating Device-Independent Color Spaces\nCGColorSpaceCreateCalibratedGray\nCreates a calibrated grayscale color space.\nCGColorSpaceCreateICCBased\nCreates a device-independent color space that is defined according to the ICC color profile specification.\nCGColorSpaceCreateWithICCProfile\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated\nCGColorSpaceCreateLab\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard."
  },
  {
    "title": "CGDisplayStreamUpdateGetDropCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456212-cgdisplaystreamupdategetdropcoun",
    "html": "Parameters\nupdateRef\n\nA CGDisplayStreamUpdateRef reference.\n\nReturn Value\n\nThe number of dropped frames.\n\nDiscussion\n\nUse this call when measuring your client’s performance to ensure that it is keeping up with window server updates.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreate\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nCGDisplayStreamCreateWithDispatchQueue\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nCGDisplayStreamStart\nTells a stream to start sending updates.\nDeprecated\nCGDisplayStreamStop\nTells a stream to stop sending updates.\nDeprecated\nCGDisplayStreamGetRunLoopSource\nGets the run loop source for a display stream.\nDeprecated\nCGDisplayStreamUpdateGetRects\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nCGDisplayStreamUpdateCreateMergedUpdate\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nCGDisplayStreamUpdateGetMovedRectsDelta\nReturn the movement delta values for a single update.\nDeprecated\nCGDisplayStreamGetTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nCGDisplayStreamUpdateGetTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGDisplayStreamUpdateGetMovedRectsDelta | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455469-cgdisplaystreamupdategetmovedrec",
    "html": "Parameters\nupdateRef\n\nA CGDisplayStreamUpdateRef reference.\n\ndx\n\nA pointer to a CGFloat to store the x component of the movement delta\n\ndy\n\nA pointer to a CGFloat to store the y component of the movement delta\n\nDiscussion\n\nThe delta values describe the offset from the moved rectangles back to the source location.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreate\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nCGDisplayStreamCreateWithDispatchQueue\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nCGDisplayStreamStart\nTells a stream to start sending updates.\nDeprecated\nCGDisplayStreamStop\nTells a stream to stop sending updates.\nDeprecated\nCGDisplayStreamGetRunLoopSource\nGets the run loop source for a display stream.\nDeprecated\nCGDisplayStreamUpdateGetRects\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nCGDisplayStreamUpdateCreateMergedUpdate\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nCGDisplayStreamUpdateGetDropCount\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nCGDisplayStreamGetTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nCGDisplayStreamUpdateGetTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGColorSpaceCreateCalibratedGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408887-cgcolorspacecreatecalibratedgray",
    "html": "Parameters\nwhitePoint\n\nAn array of 3 numbers specifying the tristimulus value, in the CIE 1931 XYZ-space, of the diffuse white point.\n\nblackPoint\n\nAn array of 3 numbers specifying the tristimulus value, in CIE 1931 XYZ-space, of the diffuse black point.\n\ngamma\n\nThe gamma value appropriate for the imaging device.\n\nReturn Value\n\nA new calibrated gray color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nCreates a device-independent grayscale color space that represents colors relative to a reference white point. This white point is based on the whitest light that can be generated by the output device. Colors in a device-independent color space should appear the same when displayed on different devices, to the extent that the capabilities of the device allow.\n\nSee Also\nCreating Device-Independent Color Spaces\nCGColorSpaceCreateCalibratedRGB\nCreates a calibrated RGB color space.\nCGColorSpaceCreateICCBased\nCreates a device-independent color space that is defined according to the ICC color profile specification.\nCGColorSpaceCreateWithICCProfile\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated\nCGColorSpaceCreateLab\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard."
  },
  {
    "title": "kCGAnyInputEventType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcganyinputeventtype",
    "html": "Discussion\n\nA constant that specifies any input event type."
  },
  {
    "title": "kCGEventMaskForAllEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgeventmaskforallevents",
    "html": "Discussion\n\nAn event mask that specifies all event types."
  },
  {
    "title": "CGDisplayAddressForPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/1807904-cgdisplayaddressforposition",
    "html": "Deprecated\n\nThere is no replacement; because direct access to the raw framebuffer is not necessary, there is no need to retrieve its memory address.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nx\n\nThe x-coordinate of a position in the global display coordinate space. The origin is the upper-left corner of the main display.\n\ny\n\nThe y-coordinate of a position in the global display coordinate space. The origin is the upper-left corner of the main display, and the y-axis is oriented down.\n\nReturn Value\n\nThe address in framebuffer memory that corresponds to the specified position. If the display ID is invalid or the point lies outside the bounds of the display, the return value is NULL.\n\nOverview\n\nIf the display has not been captured, the returned address may refer to read-only memory.\n\nSpecial Considerations\n\nThis deprecated function returned an address in framebuffer memory. Instead of using the raw framebuffer to draw to the screen, you should instead use a supported drawing engine such as Quartz or OpenGL. While accessing the framebuffer directly has been deprecated, it is possible to copy screen data using CGDisplayCreateImageForRect.\n\nSee Also\nCapturing and Releasing Displays\nCGDisplayCapture\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nCGDisplayCaptureWithOptions\nObtains exclusive use of a display for an application using the options you specify.\nCGDisplayRelease\nReleases a captured display.\nCGDisplayIsCaptured\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nCGCaptureAllDisplays\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nCGCaptureAllDisplaysWithOptions\nCaptures all attached displays, using the specified options.\nCGReleaseAllDisplays\nReleases all captured displays.\nCGShieldingWindowID\nReturns the window ID of the shield window for a captured display.\nCGShieldingWindowLevel\nReturns the window level of the shield window for a captured display.\nCGDisplayBaseAddress\nReturns the base address in framebuffer memory of an online display.\nCGDisplayGetDrawingContext\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "kCGWindowBackingCFNumberType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowbackingcfnumbertype",
    "html": "Discussion\n\nThe encoding type for window backing values inside a CFNumberRef opaque type."
  },
  {
    "title": "kCGColorConversionBlackPointCompensation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorconversionblackpointcompensation",
    "html": "Discussion\n\nICC profiles specify how to convert the lightest level of white between color spaces, but they do not specify how black should be converted. To account for this, set a value of YES for this key when creating a color conversion with the CGColorConversionInfoCreateFromList function."
  },
  {
    "title": "CGAffineTransformScale(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455882-cgaffinetransformscale",
    "html": "Parameters\nsx\n\nThe value by which to scale x values of the affine transform.\n\nsy\n\nThe value by which to scale y values of the affine transform.\n\nReturn Value\n\nA new affine transformation matrix.\n\nDiscussion\n\nYou use this function to create a new affine transformation matrix by adding scaling values to an existing affine transform. The resulting structure represents a new affine transform, which you can use (and reuse, if you want) to scale a coordinate system.\n\nSee Also\nModifying Affine Transformations\nfunc translatedBy(x: CGFloat, y: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by translating an existing affine transform.\nfunc rotated(by: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by rotating an existing affine transform.\nfunc inverted() -> CGAffineTransform\nReturns an affine transformation matrix constructed by inverting an existing affine transform.\nfunc concatenating(CGAffineTransform) -> CGAffineTransform\nReturns an affine transformation matrix constructed by combining two existing affine transforms."
  },
  {
    "title": "CGAffineTransformTranslate(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455822-cgaffinetransformtranslate",
    "html": "Parameters\ntx\n\nThe value by which to move x values with the affine transform.\n\nty\n\nThe value by which to move y values with the affine transform.\n\nReturn Value\n\nA new affine transformation matrix.\n\nDiscussion\n\nYou use this function to create a new affine transform by adding translation values to an existing affine transform. The resulting structure represents a new affine transform, which you can use (and reuse, if you want) to move a coordinate system.\n\nSee Also\nModifying Affine Transformations\nfunc scaledBy(x: CGFloat, y: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by scaling an existing affine transform.\nfunc rotated(by: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by rotating an existing affine transform.\nfunc inverted() -> CGAffineTransform\nReturns an affine transformation matrix constructed by inverting an existing affine transform.\nfunc concatenating(CGAffineTransform) -> CGAffineTransform\nReturns an affine transformation matrix constructed by combining two existing affine transforms."
  },
  {
    "title": "CGAffineTransformEqualToTransform(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455732-cgaffinetransformequaltotransfor",
    "html": "Parameters\nt2\n\nThe affine transform to compare this affine transform with.\n\nReturn Value\n\nReturns true if t1 and t2 are equal, false otherwise.\n\nSee Also\nEvaluating Affine Transforms\nvar isIdentity: Bool\nChecks whether an affine transform is the identity transform."
  },
  {
    "title": "CGAffineTransformConcat(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455996-cgaffinetransformconcat",
    "html": "Parameters\nt2\n\nThe affine transform to concatenate to this affine transform.\n\nReturn Value\n\nA new affine transformation matrix. That is, t’ = t1*t2.\n\nDiscussion\n\nConcatenation combines two affine transformation matrices by multiplying them together. You might perform several concatenations in order to create a single affine transform that contains the cumulative effects of several transformations.\n\nNote that matrix operations are not commutative—the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.\n\nSee Also\nModifying Affine Transformations\nfunc translatedBy(x: CGFloat, y: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by translating an existing affine transform.\nfunc scaledBy(x: CGFloat, y: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by scaling an existing affine transform.\nfunc rotated(by: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by rotating an existing affine transform.\nfunc inverted() -> CGAffineTransform\nReturns an affine transformation matrix constructed by inverting an existing affine transform."
  },
  {
    "title": "CGPDFPageGetBoxRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456114-cgpdfpagegetboxrect",
    "html": "Parameters\npage\n\nA PDF page.\n\nbox\n\nA constant that specifies the type of box. For possible values, see CGPDFBox.\n\nReturn Value\n\nReturns the rectangle associated with the type of box specified by the box parameter in the specified page.\n\nDiscussion\n\nReturns the rectangle associated with the specified box in the specified page. This is the value of the corresponding entry (such as /MediaBox, /ArtBox, and so on) in the page’s dictionary.\n\nSee Also\nGetting Page Information\nCGPDFPageGetDictionary\nReturns the dictionary of a PDF page.\nCGPDFPageGetDocument\nReturns the document for a page.\nCGPDFPageGetDrawingTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nCGPDFPageGetPageNumber\nReturns the page number of the specified PDF page.\nCGPDFPageGetRotationAngle\nReturns the rotation angle of a PDF page."
  },
  {
    "title": "CGPDFPageGetRotationAngle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455550-cgpdfpagegetrotationangle",
    "html": "Parameters\npage\n\nA PDF page.\n\nReturn Value\n\nThe rotation angle (in degrees) of the specified page. This is the value of the /Rotate entry in the page’s dictionary.\n\nSee Also\nGetting Page Information\nCGPDFPageGetBoxRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nCGPDFPageGetDictionary\nReturns the dictionary of a PDF page.\nCGPDFPageGetDocument\nReturns the document for a page.\nCGPDFPageGetDrawingTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nCGPDFPageGetPageNumber\nReturns the page number of the specified PDF page."
  },
  {
    "title": "CGFontCopyGlyphNameForGlyph | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396349-cgfontcopyglyphnameforglyph",
    "html": "Parameters\nfont\n\nA font object.\n\nglyph\n\nThe glyph whose name is desired.\n\nReturn Value\n\nThe name of the specified glyph, or NULL if the glyph isn’t associated with the font object.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGFontGetNumberOfGlyphs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396371-cgfontgetnumberofglyphs",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe number of glyphs in the provided font.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGFontGetGlyphAdvances | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396332-cgfontgetglyphadvances",
    "html": "Parameters\nfont\n\nThe font object associated with the provided glyphs.\n\nglyphs\n\nAn array of glyphs.\n\ncount\n\nThe number of glyphs in the array.\n\nadvances\n\nOn output, an array of advance widths for the provided glyphs.\n\nReturn Value\n\nYES unless the advance widths can’t be provided for some reason.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGFontGetUnitsPerEm | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396344-cgfontgetunitsperem",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe number of glyph space units per em for the provided font.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array."
  },
  {
    "title": "CGColorSpaceCopyICCProfile | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408889-cgcolorspacecopyiccprofile",
    "html": "Deprecated\n\nUse CGColorSpaceCopyICCData instead.\n\nParameters\nspace\n\nThe color space whose ICC profile you want to obtain.\n\nReturn Value\n\nThe ICC profile or NULL if the color space does not have an ICC profile.\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCData\nReturns a copy of the ICC profile data of the provided color space.\nCGColorSpaceSupportsOutput\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nCGColorSpaceGetNumberOfComponents\nReturns the number of color components in a color space.\nCGColorSpaceGetTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nCGColorSpaceGetModel\nReturns the color space model of the provided color space.\nCGColorSpaceIsWideGamutRGB\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nCGColorSpaceGetBaseColorSpace\nReturns the base color space of a pattern or indexed color space.\nCGColorSpaceGetColorTableCount\nReturns the number of entries in the color table of an indexed color space.\nCGColorSpaceGetColorTable\nCopies the entries in the color table of an indexed color space.\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "CGColorSpaceCreatePattern | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408869-cgcolorspacecreatepattern",
    "html": "Parameters\nbaseSpace\n\nFor masking patterns, the underlying color space that specifies the colors to be painted through the mask. For color patterns, you should pass NULL.\n\nReturn Value\n\nA new pattern color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nFor information on creating and using patterns, see Quartz 2D Programming Guide and CGPattern. Quartz retains the color space you pass in. Upon return, you may safely release it by calling CGColorSpaceRelease.\n\nSee Also\nCreating Special Color Spaces\nCGColorSpaceCreateIndexed\nCreates an indexed color space, consisting of colors specified by a color lookup table.\nCGColorSpaceCreateWithName\nCreates a specified type of Quartz color space."
  },
  {
    "title": "CGColorSpaceCopyICCData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1644732-cgcolorspacecopyiccdata",
    "html": "Parameters\nspace\n\nThe color space whose ICC profile you want to obtain.\n\nReturn Value\n\nThe ICC profile data or NULL if the color space does not have an ICC data profile.\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCProfile\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nCGColorSpaceSupportsOutput\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nCGColorSpaceGetNumberOfComponents\nReturns the number of color components in a color space.\nCGColorSpaceGetTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nCGColorSpaceGetModel\nReturns the color space model of the provided color space.\nCGColorSpaceIsWideGamutRGB\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nCGColorSpaceGetBaseColorSpace\nReturns the base color space of a pattern or indexed color space.\nCGColorSpaceGetColorTableCount\nReturns the number of entries in the color table of an indexed color space.\nCGColorSpaceGetColorTable\nCopies the entries in the color table of an indexed color space.\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "CGColorSpaceCreateIndexed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408899-cgcolorspacecreateindexed",
    "html": "Parameters\nbaseSpace\n\nThe color space on which the color table is based.\n\nlastIndex\n\nThe maximum valid index value for the color table. The value must be less than or equal to 255.\n\ncolorTable\n\nAn array of m*(lastIndex+1) bytes, where m is the number of color components in the base color space. Each byte is an unsigned integer in the range 0 to 255 that is scaled to the range of the corresponding color component in the base color space.\n\nReturn Value\n\nA new indexed color space object. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nAn indexed color space contains a color table with up to 255 entries, and a base color space to which the color table entries are mapped. Each entry in the color table specifies one color in the base color space. A value in an indexed color space is treated as an index into the color table of the color space. The data in the table is in meshed format. (For example, for an RGB color space the values are R, G, B, R, G, B, and so on.)\n\nSee Also\nCreating Special Color Spaces\nCGColorSpaceCreatePattern\nCreates a pattern color space.\nCGColorSpaceCreateWithName\nCreates a specified type of Quartz color space."
  },
  {
    "title": "CGColorSpaceCreateWithPlatformColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408850-cgcolorspacecreatewithplatformco",
    "html": "Parameters\nplatformColorSpace\n\nA generic pointer to a platform-specific color space. In macOS, pass a ColorSyncProfileRef, which is a ColorSync profile. Quartz uses this pointer (and the underlying information) only during the function call.\n\nReturn Value\n\nA new color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nColors in a device-dependent color space are not transformed or otherwise modified when displayed on an output device — that is, there is no attempt to maintain the visual appearance of a color. As a consequence, colors in a device color space often appear different when displayed on different output devices. For this reason, device color spaces are not recommended when color preservation is important.\n\nSee Also\nCreating Generic or Device-Dependent Color Spaces\nCGColorSpaceCreateDeviceCMYK\nCreates a device-dependent CMYK color space.\nCGColorSpaceCreateDeviceGray\nCreates a device-dependent grayscale color space.\nCGColorSpaceCreateDeviceRGB\nCreates a device-dependent RGB color space."
  },
  {
    "title": "CGColorSpaceCreateLab | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408879-cgcolorspacecreatelab",
    "html": "Parameters\nwhitePoint\n\nAn array of 3 numbers that specify the tristimulus value, in the CIE 1931 XYZ-space, of the diffuse white point.\n\nblackPoint\n\nAn array of 3 numbers that specify the tristimulus value, in CIE 1931 XYZ-space, of the diffuse black point.\n\nrange\n\nAn array of 4 numbers that specify the range of valid values for the a* and b* components of the color space. The a* component represents values running from green to red, and the b* component represents values running from blue to yellow.\n\nReturn Value\n\nA new L*a*b* color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nThe CIE L*a*b* space is a nonlinear transformation of the Munsell color notation system (a system which specifies colors by hue, value, and saturation—or “chroma”—values), designed to match perceived color difference with quantitative distance in color space. The L* component represents the lightness value, the a* component represents values running from green to red, and the b* component represents values running from blue to yellow. This roughly corresponds to the way the human brain is thought to decode colors. Colors in a device-independent color space should appear the same when displayed on different devices, to the extent that the capabilities of the device allow.\n\nSee Also\nCreating Device-Independent Color Spaces\nCGColorSpaceCreateCalibratedGray\nCreates a calibrated grayscale color space.\nCGColorSpaceCreateCalibratedRGB\nCreates a calibrated RGB color space.\nCGColorSpaceCreateICCBased\nCreates a device-independent color space that is defined according to the ICC color profile specification.\nCGColorSpaceCreateWithICCProfile\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "CGColorSpaceCreateWithICCProfile | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408895-cgcolorspacecreatewithiccprofile",
    "html": "Deprecated\n\nUse CGColorSpaceCreateWithICCData instead.\n\nParameters\ndata\n\nThe data containing the ICC profile to set for the new color space.\n\nReturn Value\n\nA new color space based on the specified profile.\n\nSee Also\nCreating Device-Independent Color Spaces\nCGColorSpaceCreateCalibratedGray\nCreates a calibrated grayscale color space.\nCGColorSpaceCreateCalibratedRGB\nCreates a calibrated RGB color space.\nCGColorSpaceCreateICCBased\nCreates a device-independent color space that is defined according to the ICC color profile specification.\nCGColorSpaceCreateLab\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard."
  },
  {
    "title": "CGColorSpaceCreateICCBased | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408881-cgcolorspacecreateiccbased",
    "html": "Parameters\nnComponents\n\nThe number of color components in the color space defined by the ICC profile data. This must match the number of components actually in the ICC profile and must equal 1, 3, or 4.\n\nrange\n\nAn array of numbers that specify the minimum and maximum valid values of the corresponding color components. The size of the array is two times the number of components. If c[k] is the kthe color component, the valid range is range[2*k] ≤ c[k] ≤ range[2*k+1].\n\nprofile\n\nA data provider that supplies the ICC profile.\n\nalternateSpace\n\nAn alternate color space to use in case the ICC profile is not supported. The alternate color space must have nComponents color components. You must supply an alternate color space. If this parameter is NULL, then the function returns NULL.\n\nReturn Value\n\nA new ICC-based color space object. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nThis function creates an ICC-based color space from an ICC color profile, as defined by the International Color Consortium. ICC profiles define the reproducible color gamut (the range of colors supported by a device) and other characteristics of a particular output device, providing a way to accurately transform the color space of one device to the color space of another. The ICC profile is usually provided by the manufacturer of the device. Additionally, some color monitors and printers contain electronically embedded ICC profile information, as do some bitmap formats such as TIFF. Colors in a device-independent color space should appear the same when displayed on different devices, to the extent that the capabilities of the device allow.\n\nYou may want to use this function for a color space that requires a detailed gamma, such as the piecewise transfer function used in sRGB or ITU-R BT.709, because this function can accurately represent these gamma curves.\n\nSee Also\nCreating Device-Independent Color Spaces\nCGColorSpaceCreateCalibratedGray\nCreates a calibrated grayscale color space.\nCGColorSpaceCreateCalibratedRGB\nCreates a calibrated RGB color space.\nCGColorSpaceCreateWithICCProfile\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated\nCGColorSpaceCreateLab\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard."
  },
  {
    "title": "CGDisplayStreamStart | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454870-cgdisplaystreamstart",
    "html": "Parameters\ndisplayStream\n\nThe display stream that should start streaming data.\n\nReturn Value\n\nkCGErrorSuccess if the stream started, otherwise an appropriate error code.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreate\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nCGDisplayStreamCreateWithDispatchQueue\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nCGDisplayStreamStop\nTells a stream to stop sending updates.\nDeprecated\nCGDisplayStreamGetRunLoopSource\nGets the run loop source for a display stream.\nDeprecated\nCGDisplayStreamUpdateGetRects\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nCGDisplayStreamUpdateCreateMergedUpdate\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nCGDisplayStreamUpdateGetMovedRectsDelta\nReturn the movement delta values for a single update.\nDeprecated\nCGDisplayStreamUpdateGetDropCount\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nCGDisplayStreamGetTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nCGDisplayStreamUpdateGetTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGDisplayStreamCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455170-cgdisplaystreamcreate",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be streamed.\n\noutputWidth\n\nThe width of the output frames in pixels. The width must not be zero.\n\noutputHeight\n\nThe height of the output frames in pixels. The height must not be zero.\n\npixelFormat\n\nThe desired Core Media pixel format of the output frame data. The value must be one of the following:\n\n'BGRA': Packed Little Endian ARGB8888\n\n'l10r': Packed Little Endian ARGB2101010\n\n'420v': 2-plane \"video\" range YCbCr 4:2:0\n\n'420f': 2-plane \"full\" range YCbCr 4:2:0\n\nproperties\n\nA dictionary of optional properties for the display stream. See Display Stream Optional Property Keys for the possible keys and values that can be provided in the options dictionary.\n\nhandler\n\nA block to be called when new frames are ready.\n\nReturn Value\n\nA new CGDisplayStream object.\n\nDiscussion\n\nBefore the stream can be started, it must be added to a run loop. Use the CGDisplayStreamGetRunLoopSource function to get an event source to add to the run loop.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreateWithDispatchQueue\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nCGDisplayStreamStart\nTells a stream to start sending updates.\nDeprecated\nCGDisplayStreamStop\nTells a stream to stop sending updates.\nDeprecated\nCGDisplayStreamGetRunLoopSource\nGets the run loop source for a display stream.\nDeprecated\nCGDisplayStreamUpdateGetRects\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nCGDisplayStreamUpdateCreateMergedUpdate\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nCGDisplayStreamUpdateGetMovedRectsDelta\nReturn the movement delta values for a single update.\nDeprecated\nCGDisplayStreamUpdateGetDropCount\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nCGDisplayStreamGetTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nCGDisplayStreamUpdateGetTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGDisplayStreamCreateWithDispatchQueue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454968-cgdisplaystreamcreatewithdispatc",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be streamed.\n\noutputWidth\n\nThe width of the output frames in pixels. The width must not be zero.\n\noutputHeight\n\nThe height of the output frames in pixels. The height must not be zero.\n\npixelFormat\n\nThe desired Core Media pixel format of the output frame data. The value must be one of the following:\n\n'BGRA': Packed Little Endian ARGB8888\n\n'l10r': Packed Little Endian ARGB2101010\n\n'420v': 2-plane \"video\" range YCbCr 4:2:0\n\n'420f': 2-plane \"full\" range YCbCr 4:2:0\n\nproperties\n\nA dictionary of optional properties for the display stream. See Display Stream Optional Property Keys for the possible keys and values that can be provided in the options dictionary.\n\nqueue\n\nThe GCD dispatch queue used when calling the update handler.\n\nhandler\n\nA block to be called when new frames are ready.\n\nReturn Value\n\nA new CGDisplayStream object.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreate\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nCGDisplayStreamStart\nTells a stream to start sending updates.\nDeprecated\nCGDisplayStreamStop\nTells a stream to stop sending updates.\nDeprecated\nCGDisplayStreamGetRunLoopSource\nGets the run loop source for a display stream.\nDeprecated\nCGDisplayStreamUpdateGetRects\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nCGDisplayStreamUpdateCreateMergedUpdate\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nCGDisplayStreamUpdateGetMovedRectsDelta\nReturn the movement delta values for a single update.\nDeprecated\nCGDisplayStreamUpdateGetDropCount\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nCGDisplayStreamGetTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nCGDisplayStreamUpdateGetTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGDisplayStreamUpdateGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454989-cgdisplaystreamupdategettypeid",
    "html": "Return Value\n\nThe type identifier of the CGDisplayStreamUpdate opaque type.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreate\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nCGDisplayStreamCreateWithDispatchQueue\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nCGDisplayStreamStart\nTells a stream to start sending updates.\nDeprecated\nCGDisplayStreamStop\nTells a stream to stop sending updates.\nDeprecated\nCGDisplayStreamGetRunLoopSource\nGets the run loop source for a display stream.\nDeprecated\nCGDisplayStreamUpdateGetRects\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nCGDisplayStreamUpdateCreateMergedUpdate\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nCGDisplayStreamUpdateGetMovedRectsDelta\nReturn the movement delta values for a single update.\nDeprecated\nCGDisplayStreamUpdateGetDropCount\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nCGDisplayStreamGetTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated"
  },
  {
    "title": "CGDisplayStreamGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454784-cgdisplaystreamgettypeid",
    "html": "Return Value\n\nThe type identifier of the CGDisplayStream opaque type.\n\nSee Also\nStreaming the Contents of a Display\nCGDisplayStreamCreate\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nCGDisplayStreamCreateWithDispatchQueue\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nCGDisplayStreamStart\nTells a stream to start sending updates.\nDeprecated\nCGDisplayStreamStop\nTells a stream to stop sending updates.\nDeprecated\nCGDisplayStreamGetRunLoopSource\nGets the run loop source for a display stream.\nDeprecated\nCGDisplayStreamUpdateGetRects\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nCGDisplayStreamUpdateCreateMergedUpdate\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nCGDisplayStreamUpdateGetMovedRectsDelta\nReturn the movement delta values for a single update.\nDeprecated\nCGDisplayStreamUpdateGetDropCount\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nCGDisplayStreamUpdateGetTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "customPlaygroundQuickLook | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgsize/1645830-customplaygroundquicklook",
    "html": "See Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the specified size.\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a size from a canonical dictionary representation.\nvar debugDescription: String\nA textual representation of the size’s dimensions.\nvar customMirror: Mirror\nA representation of the size’s structure and display style for use in debugging."
  },
  {
    "title": "CGAffineTransformRotate(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455962-cgaffinetransformrotate",
    "html": "Parameters\nangle\n\nThe angle, in radians, by which to rotate the affine transform. In iOS, a positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation. In macOS, a positive value specifies clockwise rotation and a negative value specifies counterclockwise rotation.\n\nReturn Value\n\nA new affine transformation matrix.\n\nDiscussion\n\nYou use this function to create a new affine transformation matrix by adding a rotation value to an existing affine transform. The resulting structure represents a new affine transform, which you can use (and reuse, if you want) to rotate a coordinate system.\n\nThe actual direction of rotation is dependent on the coordinate system orientation of the target platform, which is different in iOS and macOS.\n\nSee Also\nModifying Affine Transformations\nfunc translatedBy(x: CGFloat, y: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by translating an existing affine transform.\nfunc scaledBy(x: CGFloat, y: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by scaling an existing affine transform.\nfunc inverted() -> CGAffineTransform\nReturns an affine transformation matrix constructed by inverting an existing affine transform.\nfunc concatenating(CGAffineTransform) -> CGAffineTransform\nReturns an affine transformation matrix constructed by combining two existing affine transforms."
  },
  {
    "title": "CGAffineTransformInvert(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455264-cgaffinetransforminvert",
    "html": "Parameters\nt\n\nAn existing affine transform.\n\nReturn Value\n\nA new affine transformation matrix. If the affine transform passed in parameter t cannot be inverted, the affine transform is returned unchanged.\n\nDiscussion\n\nInversion is generally used to provide reverse transformation of points within transformed objects. Given the coordinates (x,y), which have been transformed by a given matrix to new coordinates (x’,y’), transforming the coordinates (x’,y’) by the inverse matrix produces the original coordinates (x,y).\n\nSee Also\nModifying Affine Transformations\nfunc translatedBy(x: CGFloat, y: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by translating an existing affine transform.\nfunc scaledBy(x: CGFloat, y: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by scaling an existing affine transform.\nfunc rotated(by: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by rotating an existing affine transform.\nfunc concatenating(CGAffineTransform) -> CGAffineTransform\nReturns an affine transformation matrix constructed by combining two existing affine transforms."
  },
  {
    "title": "CGSizeEqualToSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgsizeequaltosize",
    "html": "Parameters\nsize1\n\nThe first size to examine.\n\nsize2\n\nThe second size to examine.\n\nReturn Value\n\nYES if the two specified sizes are equal; otherwise, NO.\n\nSee Also\nComparing Values\nCGPointEqualToPoint\nReturns whether two points are equal.\nCGRectEqualToRect\nReturns whether two rectangles are equal in size and position.\nCGRectIntersectsRect\nReturns whether two rectangles intersect."
  },
  {
    "title": "CGImageGetWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456148-cgimagegetwidth",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe width, in pixels, of the specified bitmap image (or image mask).\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "kCGColorSpaceExtendedLinearDisplayP3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceextendedlineardisplayp3",
    "html": "Discussion\n\nThis color space uses the DCI P3 primaries, a D65 white point, and a linear transfer function. You can encode component values below 0.0 and above 1.0."
  },
  {
    "title": "CGImageGetRenderingIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456350-cgimagegetrenderingintent",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nReturns the CGColorRenderingIntent constant that specifies how to handle colors that are not located within the gamut of the destination color space of a graphics context in which the image is drawn. If the image is an image mask, this function returns kCGRenderingIntentDefault.\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "CGPDFContextAddDestinationAtPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455424-cgpdfcontextadddestinationatpoin",
    "html": "Parameters\ncontext\n\nA PDF graphics context.\n\nname\n\nA destination name.\n\npoint\n\nA location in the current page of the PDF graphics context.\n\nSee Also\nWorking with Destinations\nCGPDFContextSetDestinationForRect\nSets a destination to jump to when a rectangle in the current PDF page is clicked.\nCGPDFContextSetURLForRect\nSets the URL associated with a rectangle in a PDF graphics context."
  },
  {
    "title": "kCGColorSpaceSRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspacesrgb",
    "html": "Discussion\n\nThe sRGB colorimetry and non-linear transfer function are specified in IEC 61966-2-1."
  },
  {
    "title": "kCGColorSpaceDisplayP3_HLG | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspacedisplayp3_hlg",
    "html": "Discussion\n\nThis color space was created by Apple Inc. This color space uses the DCI P3 primaries, a D65 white point, and the Hybrid Log-Gamma (HLG) transfer function. For more information on HLG, see https://www.itu.int/rec/R-REC-BT.2100."
  },
  {
    "title": "kCGColorSpaceDisplayP3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspacedisplayp3",
    "html": "Discussion\n\nThis color space uses the DCI P3 primaries, a D65 white point, and the sRGB transfer function."
  },
  {
    "title": "CGRectIntersectsRect(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454747-cgrectintersectsrect",
    "html": "Parameters\nrect2\n\nThe rectangle to test for intersection with this rectangle.\n\nReturn Value\n\ntrue if the two specified rectangles intersect; otherwise, false. The first rectangle intersects the second if the intersection of the rectangles is not equal to the null rectangle.\n\nSee Also\nChecking Characteristics\nfunc CGRectContainsPoint(CGRect, CGPoint) -> Bool\nReturns whether a rectangle contains a specified point.\nfunc CGRectContainsRect(CGRect, CGRect) -> Bool\nReturns whether the first rectangle contains the second rectangle.\nfunc CGRectIsEmpty(CGRect) -> Bool\nReturns whether a rectangle has zero width or height, or is a null rectangle.\nfunc CGRectIsInfinite(CGRect) -> Bool\nReturns whether a rectangle is infinite.\nfunc CGRectIsNull(CGRect) -> Bool\nReturns whether the rectangle is equal to the null rectangle."
  },
  {
    "title": "kCGColorSpaceLinearSRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspacelinearsrgb",
    "html": "Discussion\n\nThis color space has the same colorimetry as kCGColorSpaceSRGB, but uses a linear transfer function."
  },
  {
    "title": "CGRectEqualToRect(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456516-cgrectequaltorect",
    "html": "Deprecated\n\nThe CGRect type adopts the Equatable protocol; use the == operator instead.\n\nParameters\nrect2\n\nThe rectangle to compare this rectangle with.\n\nReturn Value\n\ntrue if the two specified rectangles have equal size and origin values, or if both rectangles are null rectangles. Otherwise, false."
  },
  {
    "title": "kCGColorSpaceExtendedSRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceextendedsrgb",
    "html": "Discussion\n\nThis color space has the same colorimetry as kCGColorSpaceSRGB, but you can encode component values below 0.0 and above 1.0. Negative values are encoded as the signed reflection of the original encoding function, as shown in the formula below:\n\nextendedTransferFunction(x) = sign(x) ✖️ sRGBTransferFunction(abs(x))\n"
  },
  {
    "title": "kCGColorSpaceExtendedLinearSRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceextendedlinearsrgb",
    "html": "Discussion\n\nThis color space has the same colorimetry as kCGColorSpaceLinearSRGB; in addition, you may encode component values below 0.0 and above 1.0."
  },
  {
    "title": "CGBitmapContextCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455939-cgbitmapcontextcreate",
    "html": "Parameters\ndata\n\nA pointer to the destination in memory where the drawing is to be rendered. The size of this memory block should be at least (bytesPerRow*height) bytes.\n\nPass NULL if you want this function to allocate memory for the bitmap. This frees you from managing your own memory, which reduces memory leak issues.\n\nwidth\n\nThe width, in pixels, of the required bitmap.\n\nheight\n\nThe height, in pixels, of the required bitmap.\n\nbitsPerComponent\n\nThe number of bits to use for each component of a pixel in memory. For example, for a 32-bit pixel format and an RGB color space, you would specify a value of 8 bits per component. For the list of supported pixel formats, see “Supported Pixel Formats” in the Graphics Contexts chapter of Quartz 2D Programming Guide.\n\nbytesPerRow\n\nThe number of bytes of memory to use per row of the bitmap. If the data parameter is NULL, passing a value of 0 causes the value to be calculated automatically.\n\ncolorspace\n\nThe color space to use for the bitmap context. Note that indexed color spaces are not supported for bitmap graphics contexts.\n\nbitmapInfo\n\nConstants that specify whether the bitmap should contain an alpha channel, the alpha channel’s relative location in a pixel, and information about whether the pixel components are floating-point or integer values. The constants for specifying the alpha channel information are declared with the CGImageAlphaInfo type but can be passed to this parameter safely. You can also pass the other constants associated with the CGBitmapInfo type.\n\nFor an example of how to specify the color space, bits per pixel, bits per pixel component, and bitmap information, see Graphics Contexts.\n\nReturn Value\n\nA new bitmap context, or NULL if a context could not be created. You are responsible for releasing this object using CGContextRelease.\n\nDiscussion\n\nWhen you draw into this context, Core Graphics renders your drawing as bitmapped data in the specified block of memory.\n\nThe pixel format for a new bitmap context is determined by three parameters—the number of bits per component, the color space, and an alpha option (expressed as a CGBitmapInfo constant). The alpha value determines the opacity of a pixel when it is drawn.\n\nSee Also\nCreating Bitmap Contexts\nCGBitmapContextCreateWithData\nCreates a bitmap graphics context with the specified callback function.\nCGBitmapContextCreateImage\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "CGPathCreateCopy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411211-cgpathcreatecopy",
    "html": "Parameters\npath\n\nThe path to copy.\n\nReturn Value\n\nA new, immutable copy of the specified path. You are responsible for releasing this object.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRelease\nDecrements the retain count of a graphics path.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGColorSpaceCreateWithName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408921-cgcolorspacecreatewithname",
    "html": "Parameters\nname\n\nA color space name. See Color Space Names for a list of the valid Quartz-defined names.\n\nReturn Value\n\nA new generic color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nYou can use this function to create a generic color space. For more information, see Color Space Names.\n\nSee Also\nCreating Special Color Spaces\nCGColorSpaceCreateIndexed\nCreates an indexed color space, consisting of colors specified by a color lookup table.\nCGColorSpaceCreatePattern\nCreates a pattern color space.\nRelated Documentation\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "kCGColorSpaceExtendedGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceextendedgray",
    "html": "Discussion\n\nThis color space has the same colorimetry as kCGColorSpaceGenericGrayGamma2_2; in addition, you may encode component values below 0.0 and above 1.0. Negative values are encoded as the signed reflection of the original encoding function, as shown below\n\nextendedGrayTransferFunction(x) = sign(x) ✖️ gamma22Function(abs(x))\n"
  },
  {
    "title": "kCGColorSpaceExtendedLinearGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceextendedlineargray",
    "html": "Discussion\n\nThis color space has the same colorimetry as kCGColorSpaceLinearGray; in addition, you may encode component values below 0.0 and above 1.0."
  },
  {
    "title": "kCGColorSpaceACESCGLinear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceacescglinear",
    "html": "Discussion\n\nFor more information, see “ACEScg—A Working Space for CGI Render and Compositing”, Version 1.0.1, Academy of Motion Picture Arts and Sciences (http://www.oscars.org/science-technology/sci-tech-projects/aces)."
  },
  {
    "title": "kCGColorSpaceDCIP3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspacedcip3",
    "html": "Discussion\n\nThis color space was created by Digital Cinema Initiatives."
  },
  {
    "title": "kCGColorSpaceITUR_709 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceitur_709",
    "html": "Discussion\n\nSee the current active version of the Recommendation BT.709 document on the ITU website (https://www.itu.int/)."
  },
  {
    "title": "kCGColorSpaceExtendedLinearITUR_2020 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceextendedlinearitur_2020",
    "html": "Discussion\n\nThis color space has the same colorimetry as kCGColorSpaceITUR_2020, but uses a linear transfer function. You may encode component values below 0.0 and above 1.0."
  },
  {
    "title": "CGFunctionRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1390869-cgfunctionretain",
    "html": "Parameters\nfunction\n\nThe function object to retain.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the function parameter is nil.\n\nSee Also\nRetaining and Releasing CGFunction Objects\nCGFunctionRelease\nDecrements the retain count of a function object."
  },
  {
    "title": "CGFunctionCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1390862-cgfunctioncreate",
    "html": "Parameters\ninfo\n\nA pointer to user-defined storage for data that you want to pass to your callbacks. You need to make sure that the data persists for as long as it’s needed, which can be beyond the scope in which the Core Graphics function is used.\n\ndomainDimension\n\nThe number of inputs.\n\ndomain\n\nAn array of (2*domainDimension) floats used to specify the valid intervals of input values. For each k from 0 to (domainDimension - 1), domain[2*k] must be less than or equal to domain[2*k+1], and the kth input value will be clipped to lie in the interval domain[2*k] ≤ input[k] ≤ domain[2*k+1]. If this parameter is NULL, then the input values are not clipped.\n\nrangeDimension\n\nThe number of outputs.\n\nrange\n\nAn array of (2*rangeDimension) floats that specifies the valid intervals of output values. For each k from 0 to (rangeDimension - 1), range[2*k] must be less than or equal to range[2*k+1], and the kth output value will be clipped to lie in the interval range[2*k] ≤ output[k] ≤ range[2*k+1]. If this parameter is NULL, then the output values are not clipped.\n\ncallbacks\n\nA pointer to a callback function table. This table should contain pointers to the callbacks you provide to implement the semantics of this Core Graphics function. Core Graphics makes a copy of your table, so, for example, you could safely pass in a pointer to a structure on the stack.\n\nReturn Value\n\nThe new Core Graphics function. You are responsible for releasing this object using CGFunctionRelease."
  },
  {
    "title": "CGDataConsumerRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1508422-cgdataconsumerretain",
    "html": "Parameters\nconsumer\n\nThe data consumer to retain.\n\nReturn Value\n\nThe same data consumer you passed in as the consumer parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the consumer parameter is NULL.\n\nSee Also\nRetaining and Releasing Data Consumers\nCGDataConsumerRelease\nDecrements the retain count of a data consumer."
  },
  {
    "title": "CGGLContextUpdateViewportSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgglcontext/1805292-cgglcontextupdateviewportsize",
    "html": "Parameters\ncontext\n\nA Quartz graphics context obtained by calling CGGLContextCreate.\n\nsize\n\nThe new dimensions of the OpenGL viewport.\n\nOverview\n\nThe use of this function is not recommended.\n\nYou should call this function whenever the size of the associated OpenGL context changes.\n\nSee Also\nCGGLContext Miscellaneous Functions\nCGGLContextCreate\nCreates a Quartz graphics context from an OpenGL context."
  },
  {
    "title": "CGGLContextCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgglcontext/1805288-cgglcontextcreate",
    "html": "Parameters\nglContext\n\nThe context that the OpenGL system uses to manage OpenGL drawing.\n\nsize\n\nThe dimensions of the OpenGL viewport rectangle.\n\ncolorspace\n\nAn RGB color space that serves as the destination space when rendering device-independent colors. If NULL, Quartz uses the default RGB color space. Quartz retains the color space you pass in; on return, you may safely release it.\n\nReturn Value\n\nA new Quartz graphics context. You are responsible for releasing this object by calling CGContextRelease.\n\nOverview\n\nThe use of this function is not recommended.\n\nCreates a Quartz context from the OpenGL context glContext. The context establishes an OpenGL viewport rectangle with dimensions specified by the size parameter by calling glViewport(3G). If non-NULL, the colorspace parameter should be an RGB profile that specifies the destination space when rendering device-independent colors.\n\nSee Also\nCGGLContext Miscellaneous Functions\nCGGLContextUpdateViewportSize\nUpdates the size of the viewport associated with an OpenGL context."
  },
  {
    "title": "CGDataConsumerRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataconsumerref",
    "html": "See Also\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "Geometrical Null | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggeometry/geometrical_null",
    "html": "Topics\nConstants\nCGRectNull\nThe null rectangle, representing an invalid value."
  },
  {
    "title": "CGFloat Informational Macros | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggeometry/cgfloat_informational_macros",
    "html": "Topics\nConstants\nCGFLOAT_MIN\nCGFLOAT_MAX\nCGFLOAT_IS_DOUBLE"
  },
  {
    "title": "CGDataConsumerCreateWithCFData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456292-cgdataconsumercreatewithcfdata",
    "html": "Parameters\ndata\n\nThe CFData object to write to.\n\nReturn Value\n\nA new data consumer object. You are responsible for releasing this object using CGDataConsumerRelease.\n\nDiscussion\n\nYou can use this function when you need to represent Core Graphics data as a CFDataRef type. For example, you might create a CFDataRef object that you then copy to the pasteboard.\n\nSee Also\nCreating Data Consumers\nCGDataConsumerCreate\nCreates a data consumer that uses callback functions to write data.\nCGDataConsumerCreateWithURL\nCreates a data consumer that writes data to a location specified by a URL."
  },
  {
    "title": "Geometric Zeros | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggeometry/geometric_zeros",
    "html": "Topics\nConstants\nCGPointZero\nA point constant with location (0,0). The zero point is equivalent to CGPointMake(0,0).\nCGRectZero\nA rectangle constant with location (0,0), and width and height of 0. The zero rectangle is equivalent to CGRectMake(0,0,0,0).\nCGSizeZero\nA size constant with width and height of 0. The zero size is equivalent to CGSizeMake(0,0)."
  },
  {
    "title": "Obsolete Font Table Index Values | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/obsolete_font_table_index_values",
    "html": "Deprecated\n\nUse kCGGlyphMax instead.\n\nTopics\nConstants\nCGGlyphMin\nMinimum font index value.\nCGGlyphMax\nMaximum font index value."
  },
  {
    "title": "CGDataConsumerCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456428-cgdataconsumercreate",
    "html": "Parameters\ninfo\n\nA pointer to data of any type or NULL. When the callback is called, Core Graphics passes this pointer as the info parameter.\n\ncallbacks\n\nA pointer to a structure that specifies the callback functions you implement to copy data sent to the consumer and to handle the consumer’s basic memory management. For a complete description, see CGDataConsumerCallbacks.\n\nReturn Value\n\nA new data consumer object. You are responsible for releasing this object using CGDataConsumerRelease.\n\nSee Also\nCreating Data Consumers\nCGDataConsumerCreateWithURL\nCreates a data consumer that writes data to a location specified by a URL.\nCGDataConsumerCreateWithCFData\nCreates a data consumer that writes to a CFData object."
  },
  {
    "title": "kCGLineJoinMiter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cglinejoin/kcglinejoinmiter",
    "html": "Discussion\n\nA join with a sharp (angled) corner. Core Graphics draws the outer sides of the lines beyond the endpoint of the path, until they meet. If the length of the miter divided by the line width is greater than the miter limit, a bevel join is used instead. This is the default. To set the miter limit, see CGContextSetMiterLimit."
  },
  {
    "title": "CGPathCreateWithEllipseInRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411177-cgpathcreatewithellipseinrect",
    "html": "Parameters\nrect\n\nThe rectangle that bounds the ellipse.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the ellipse before it is added to the path.\n\nReturn Value\n\nA new, immutable path. You are responsible for releasing this object.\n\nDiscussion\n\nThis is a convenience function that creates a path of an ellipse. Using this convenience function is more efficient than creating a mutable path and adding an ellipse to it.\n\nThe ellipse is approximated by a sequence of Bézier curves. Its center is the midpoint of the rectangle defined by the rect parameter. If the rectangle is square, then the ellipse is circular with a radius equal to one-half the width (or height) of the rectangle. If the rect parameter specifies a rectangular shape, then the major and minor axes of the ellipse are defined by the width and height of the rectangle.\n\nThe ellipse forms a complete subpath of the path—that is, the ellipse drawing starts with a move-to operation and ends with a close-subpath operation, with all moves oriented in the clockwise direction. If you supply an affine transform, then the constructed Bézier curves that define the ellipse are transformed before they are added to the path.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRelease\nDecrements the retain count of a graphics path.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGPathCreateWithRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411155-cgpathcreatewithrect",
    "html": "Parameters\nrect\n\nThe rectangle to add.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the rectangle before it is added to the path.\n\nReturn Value\n\nA new, immutable path. You are responsible for releasing this object.\n\nDiscussion\n\nThis is a convenience function that creates a path of an rectangle. Using this convenience function is more efficient than creating a mutable path and adding an rectangle to it.\n\nCalling this function is equivalent to using CGRectGetMinX and related functions to find the corners of the rectangle, then using the CGPathMoveToPoint, CGPathAddLineToPoint, and CGPathCloseSubpath functions to draw the rectangle.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRelease\nDecrements the retain count of a graphics path.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGPathCreateWithRoundedRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411218-cgpathcreatewithroundedrect",
    "html": "Parameters\nrect\n\nThe rectangle to add.\n\ncornerWidth\n\nThe width of the rounded corner sections.\n\ncornerHeight\n\nThe height of the rounded corner sections.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the rectangle before it is added to the path.\n\nReturn Value\n\nA new, immutable path. You are responsible for releasing this object.\n\nDiscussion\n\nThis is a convenience function that creates a path of an rounded rectangle. Using this convenience function is more efficient than creating a mutable path and adding an rectangle to it.\n\nEach corner of the rounded rectangle is one-quarter of an ellipse with axes equal to the cornerWidth and cornerHeight parameters. The rounded rectangle forms a complete subpath and is oriented in the clockwise direction.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRelease\nDecrements the retain count of a graphics path.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGRectDivide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455925-cgrectdivide",
    "html": "Parameters\nrect\n\nThe source rectangle.\n\nslice\n\nOn input, a pointer to an uninitialized rectangle. On return, the rectangle is filled in with the specified edge and values that extends the distance beyond the edge specified by the amount parameter. Must not be NULL.\n\nremainder\n\nOn input, a pointer to an uninitialized rectangle. On return, the rectangle contains the portion of the source rectangle that remains after CGRectEdge produces the “slice” rectangle. Must not be NULL.\n\namount\n\nA distance from the rectangle side that is specified in the edge parameter. This distance defines the line, parallel to the specified side, that Core Graphics uses to divide the source rectangle.\n\nedge\n\nAn edge value that specifies the side of the rectangle from which the distance passed in the amount parameter is measured. CGRectDivide produces a “slice” rectangle that contains the specified edge and extends amount distance beyond it.\n\nDiscussion\n\nIf rect is a null rectangle, this function outputs CGRectNull for both the slice and remainder rectangles.\n\nSee Also\nModifying Rectangles\nCGRectInset\nReturns a rectangle that is smaller or larger than the source rectangle, with the same center point.\nCGRectIntegral\nReturns the smallest rectangle that results from converting the source rectangle values to integers.\nCGRectIntersection\nReturns the intersection of two rectangles.\nCGRectOffset\nReturns a rectangle with an origin that is offset from that of the source rectangle.\nCGRectStandardize\nReturns a rectangle with a positive width and height.\nCGRectUnion\nReturns the smallest rectangle that contains the two source rectangles."
  },
  {
    "title": "CGPointEqualToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpointequaltopoint",
    "html": "Parameters\npoint1\n\nThe first point to examine.\n\npoint2\n\nThe second point to examine.\n\nReturn Value\n\nYES if the two specified points are the same; otherwise, NO.\n\nSee Also\nComparing Values\nCGSizeEqualToSize\nReturns whether two sizes are equal.\nCGRectEqualToRect\nReturns whether two rectangles are equal in size and position.\nCGRectIntersectsRect\nReturns whether two rectangles intersect."
  },
  {
    "title": "CGRectInfinite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggeometry/cgrectinfinite",
    "html": "Topics\nConstants\nCGRectInfinite\nA rectangle that has infinite extent."
  },
  {
    "title": "CGRectIsInfinite(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455008-cgrectisinfinite",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\nReturns true if the specified rectangle is infinite; otherwise, false.\n\nDiscussion\n\nAn infinite rectangle is one that has no defined bounds. Infinite rectangles can be created as output from a tiling filter. For example, the Core Image framework perspective tile filter creates an image whose extent is described by an infinite rectangle.\n\nSee Also\nChecking Characteristics\nfunc CGRectIntersectsRect(CGRect, CGRect) -> Bool\nReturns whether two rectangles intersect.\nfunc CGRectContainsPoint(CGRect, CGPoint) -> Bool\nReturns whether a rectangle contains a specified point.\nfunc CGRectContainsRect(CGRect, CGRect) -> Bool\nReturns whether the first rectangle contains the second rectangle.\nfunc CGRectIsEmpty(CGRect) -> Bool\nReturns whether a rectangle has zero width or height, or is a null rectangle.\nfunc CGRectIsNull(CGRect) -> Bool\nReturns whether the rectangle is equal to the null rectangle."
  },
  {
    "title": "CGRectIsNull(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455471-cgrectisnull",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\ntrue if the specified rectangle is null; otherwise, false.\n\nDiscussion\n\nA null rectangle is the equivalent of an empty set. For example, the result of intersecting two disjoint rectangles is a null rectangle. A null rectangle cannot be drawn and interacts with other rectangles in special ways.\n\nSee Also\nChecking Characteristics\nfunc CGRectIntersectsRect(CGRect, CGRect) -> Bool\nReturns whether two rectangles intersect.\nfunc CGRectContainsPoint(CGRect, CGPoint) -> Bool\nReturns whether a rectangle contains a specified point.\nfunc CGRectContainsRect(CGRect, CGRect) -> Bool\nReturns whether the first rectangle contains the second rectangle.\nfunc CGRectIsEmpty(CGRect) -> Bool\nReturns whether a rectangle has zero width or height, or is a null rectangle.\nfunc CGRectIsInfinite(CGRect) -> Bool\nReturns whether a rectangle is infinite."
  },
  {
    "title": "Auxiliary Dictionary Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfcontext/auxiliary_dictionary_keys",
    "html": "Overview\n\nFor more information about using these keys in a PDF context, see CGPDFContextCreate and CGPDFContextCreateWithURL.\n\nTopics\nMetadata Keys\nkCGPDFContextAuthor\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nkCGPDFContextCreator\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nkCGPDFContextTitle\nThe corresponding value is a string that represents the title of the document. This key is optional.\nkCGPDFContextOwnerPassword\nkCGPDFContextUserPassword\nkCGPDFContextAllowsPrinting\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is YES.\nkCGPDFContextAllowsCopying\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is YES.\nkCGPDFContextOutputIntent\nkCGPDFContextOutputIntents\nkCGPDFContextSubject\nkCGPDFContextKeywords\nkCGPDFContextEncryptionKeyLength\nBox Keys\nkCGPDFContextMediaBox\nThe media box for the document or for a given page. This key is optional. If present, the value of this key must be a CFDataRef object that contains a CGRect (stored by value, not by reference).\nkCGPDFContextCropBox\nThe crop box for the document or for a given page. This key is optional. If present, the value of this key must be a CFDataRef object that contains a CGRect (stored by value, not by reference).\nkCGPDFContextBleedBox\nThe bleed box for the document or for a given page. This key is optional. If present, the value of this key must be a CFDataRef object that contains a CGRect (stored by value, not by reference).\nkCGPDFContextTrimBox\nThe trim box for the document or for a given page. This key is optional. If present, the value of this key must be a CFDataRef object that contains a CGRect (stored by value, not by reference).\nkCGPDFContextArtBox\nThe art box for the document or for a given page. This key is optional. If present, the value of this key must be a CFDataRef object that contains a CGRect (stored by value, not by reference).\nOutput Intent Keys\nkCGPDFXOutputIntentSubtype\nThe output intent subtype. This key is required. The value of this key must be a CFStringRef object equal to \"GTS_PDFX\"; otherwise, the dictionary is ignored.\nkCGPDFXOutputConditionIdentifier\nkCGPDFXOutputCondition\nA text string identifying the intended output device or production condition in a human- readable form. This key is optional. If present, the value of this key must be a CFStringRef object.\nkCGPDFXRegistryName\nkCGPDFXInfo\nkCGPDFXDestinationOutputProfile\nSee Also\nCreating PDF Graphics Contexts\nCGPDFContextCreateWithURL\nCreates a URL-based PDF graphics context.\nCGPDFContextCreate\nCreates a PDF graphics context."
  },
  {
    "title": "CGRectIsEmpty(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454917-cgrectisempty",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\ntrue if the specified rectangle is empty; otherwise, false.\n\nDiscussion\n\nAn empty rectangle is either a null rectangle or a valid rectangle with zero height or width.\n\nSee Also\nChecking Characteristics\nfunc CGRectIntersectsRect(CGRect, CGRect) -> Bool\nReturns whether two rectangles intersect.\nfunc CGRectContainsPoint(CGRect, CGPoint) -> Bool\nReturns whether a rectangle contains a specified point.\nfunc CGRectContainsRect(CGRect, CGRect) -> Bool\nReturns whether the first rectangle contains the second rectangle.\nfunc CGRectIsInfinite(CGRect) -> Bool\nReturns whether a rectangle is infinite.\nfunc CGRectIsNull(CGRect) -> Bool\nReturns whether the rectangle is equal to the null rectangle."
  },
  {
    "title": "CGRectContainsRect(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454186-cgrectcontainsrect",
    "html": "Parameters\nrect2\n\nThe rectangle to test for containment within this rectangle.\n\nReturn Value\n\ntrue if the rectangle specified by rect2 is contained in the rectangle passed in rect1; otherwise, false. The first rectangle contains the second if the union of the two rectangles is equal to the first rectangle.\n\nSee Also\nChecking Characteristics\nfunc CGRectIntersectsRect(CGRect, CGRect) -> Bool\nReturns whether two rectangles intersect.\nfunc CGRectContainsPoint(CGRect, CGPoint) -> Bool\nReturns whether a rectangle contains a specified point.\nfunc CGRectIsEmpty(CGRect) -> Bool\nReturns whether a rectangle has zero width or height, or is a null rectangle.\nfunc CGRectIsInfinite(CGRect) -> Bool\nReturns whether a rectangle is infinite.\nfunc CGRectIsNull(CGRect) -> Bool\nReturns whether the rectangle is equal to the null rectangle."
  },
  {
    "title": "CGRectContainsPoint(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456316-cgrectcontainspoint",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\npoint\n\nThe point to examine.\n\nReturn Value\n\ntrue if the rectangle is not null or empty and the point is located within the rectangle; otherwise, false.\n\nDiscussion\n\nA point is considered inside the rectangle if its coordinates lie inside the rectangle or on the minimum X or minimum Y edge.\n\nSee Also\nChecking Characteristics\nfunc CGRectIntersectsRect(CGRect, CGRect) -> Bool\nReturns whether two rectangles intersect.\nfunc CGRectContainsRect(CGRect, CGRect) -> Bool\nReturns whether the first rectangle contains the second rectangle.\nfunc CGRectIsEmpty(CGRect) -> Bool\nReturns whether a rectangle has zero width or height, or is a null rectangle.\nfunc CGRectIsInfinite(CGRect) -> Bool\nReturns whether a rectangle is infinite.\nfunc CGRectIsNull(CGRect) -> Bool\nReturns whether the rectangle is equal to the null rectangle."
  },
  {
    "title": "Host Endian Bitmap Formats | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/host_endian_bitmap_formats",
    "html": "Topics\nConstants\nkCGBitmapByteOrder16Host\n16-bit, host endian format.\nkCGBitmapByteOrder32Host\n32-bit, host endian format."
  },
  {
    "title": "CGImageIsMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454229-cgimageismask",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nA Boolean value that indicates whether the image passed in the image parameter is an image mask (YES indicates that the image is an image mask).\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image."
  },
  {
    "title": "CGPDFContextClose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454306-cgpdfcontextclose",
    "html": "Parameters\ncontext\n\nA PDF graphics context.\n\nDiscussion\n\nAfter closing the context, all pending data is written to the context destination, and the PDF file is completed. No additional data can be written to the destination context after the PDF document is closed."
  },
  {
    "title": "CGPDFContextAddDocumentMetadata | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456026-cgpdfcontextadddocumentmetadata",
    "html": "Parameters\ncontext\n\nA PDF graphics context.\n\nmetadata\n\nA stream of XML data that is formatted according to the Extensible Metadata Platform, as described in section 10.2.2., “Metadata Streams”, of the PDF 1.7 specification."
  },
  {
    "title": "CGPatternGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456445-cgpatterngettypeid",
    "html": "Return Value\n\nThe identifier forthe opaque type CGPatternRef."
  },
  {
    "title": "CGPDFContextSetURLForRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455622-cgpdfcontextseturlforrect",
    "html": "Parameters\ncontext\n\nA PDF graphics context.\n\nurl\n\nA URL that specifies the destination of the contents associated with the rectangle.\n\nrect\n\nA rectangle specified in default user space (not device space).\n\nSee Also\nWorking with Destinations\nCGPDFContextAddDestinationAtPoint\nSets a destination to jump to when a point in the current page of a PDF graphics context is clicked.\nCGPDFContextSetDestinationForRect\nSets a destination to jump to when a rectangle in the current PDF page is clicked."
  },
  {
    "title": "CGPDFContextCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454204-cgpdfcontextcreate",
    "html": "Parameters\nconsumer\n\nThe data consumer to receive the PDF output data.\n\nmediaBox\n\nA pointer to a rectangle that defines the size and location of the PDF page, or NULL. The origin of the rectangle should typically be (0,0). Core Graphics uses this rectangle as the default bounds of the page’s media box. If you pass NULL, Core Graphics uses a default page size of 8.5 by 11 inches (612 by 792 points).\n\nauxiliaryInfo\n\nA dictionary that specifies any additional information to be used by the PDF context when generating the PDF file, or NULL. The dictionary is retained by the new context, so on return you may safely release it. See Auxiliary Dictionary Keys for keys you can include in the dictionary.\n\nReturn Value\n\nA new PDF context, or NULL if the context cannot be created. You are responsible for releasing this object using CGContextRelease.\n\nDiscussion\n\nThis function creates a PDF drawing environment to your specifications. When you draw into the new context, Core Graphics renders your drawing as a sequence of PDF drawing commands that are passed to the data consumer object.\n\nSee Also\nCreating a Context\nCGPDFContextCreateWithURL\nCreates a URL-based PDF graphics context."
  },
  {
    "title": "CGPDFContextSetDestinationForRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456459-cgpdfcontextsetdestinationforrec",
    "html": "Parameters\ncontext\n\nA PDF graphics context.\n\nname\n\nA destination name.\n\nrect\n\nA rectangle that specifies an area of the current page of a PDF graphics context. The rectangle is specified in default user space (not device space).\n\nSee Also\nWorking with Destinations\nCGPDFContextAddDestinationAtPoint\nSets a destination to jump to when a point in the current page of a PDF graphics context is clicked.\nCGPDFContextSetURLForRect\nSets the URL associated with a rectangle in a PDF graphics context."
  },
  {
    "title": "CGPDFContextCreateWithURL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456290-cgpdfcontextcreatewithurl",
    "html": "Parameters\nurl\n\nA Core Foundation URL that specifies where you want to place the resulting PDF file.\n\nmediaBox\n\nA rectangle that specifies the bounds of the PDF. The origin of the rectangle should typically be (0,0). The CGPDFContextCreateWithURL function uses this rectangle as the default page media bounding box. If you pass NULL, CGPDFContextCreateWithURL uses a default page size of 8.5 by 11 inches (612 by 792 points).\n\nauxiliaryInfo\n\nA dictionary that specifies any additional information to be used by the PDF context when generating the PDF file, or NULL. The dictionary is retained by the new context, so on return you may safely release it.\n\nReturn Value\n\nA new PDF context, or NULL if a context could not be created. You are responsible for releasing this object using CGContextRelease.\n\nDiscussion\n\nWhen you call this function, Core Graphics creates a PDF drawing environment—that is, a graphics context—to your specifications. When you draw into the resulting context, Core Graphics renders your drawing as a series of PDF drawing commands stored in the specified location.\n\nSee Also\nCreating a Context\nCGPDFContextCreate\nCreates a PDF graphics context."
  },
  {
    "title": "CGPDFContextEndPage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456122-cgpdfcontextendpage",
    "html": "Parameters\ncontext\n\nA PDF graphics context.\n\nDiscussion\n\nYou can call CGPDFContextEndPage only after you call the function CGPDFContextBeginPage.\n\nSee Also\nBeginning and Ending Pages\nCGPDFContextBeginPage\nBegins a new page in a PDF graphics context."
  },
  {
    "title": "CGPatternCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454997-cgpatterncreate",
    "html": "Parameters\ninfo\n\nA pointer to private storage used by your pattern drawing function, or NULL. For more information, see the discussion below.\n\nbounds\n\nThe bounding box of the pattern cell, specified in pattern space. (Pattern space is an abstract space that maps to the default user space by the transformation matrix you specify with the matrix parameter.)The drawing done in your pattern drawing function is clipped to this rectangle.\n\nmatrix\n\nA matrix that represents a transform from pattern space to the default user space of the context in which the pattern is used. If no transform is needed, pass the identity matrix.\n\nxStep\n\nThe horizontal displacement between cells, specified in pattern space. For no additional horizontal space between cells (so that each pattern cells abuts the previous pattern cell in the horizontal direction), pass the width of the pattern cell.\n\nyStep\n\nThe vertical displacement between cells, specified in pattern space. For no additional vertical space between cells(so that each pattern cells abuts the previous pattern cell in the vertical direction), pass the height of the pattern cell.\n\ntiling\n\nA CGPatternTiling constant that specifies the desired tiling method.\n\nisColored\n\nIf you want to draw your pattern using its own intrinsic color, pass YES. If you want to draw an uncolored (or masking) pattern that uses the fill or stroke color in the graphics state, pass NO.\n\ncallbacks\n\nA pointer to a pattern callback function table—your pattern drawing function is an entry in this table. See CGPatternCallbacks for more information about callback function tables for patterns.\n\nReturn Value\n\nA new Core Graphics pattern.You are responsible for releasing this object using CGPatternRelease.\n\nDiscussion\n\nCore Graphics calls your drawing function at the appropriate timeto draw the pattern cell. A pattern cell must be invariant—thatis, the pattern cell should be drawn exactly the same way each timethe drawing function is called.\n\nThe appearance of a pattern cell is unaffected by changesin the graphics state of the context in which the pattern is used.\n\nSee CGPatternDrawPatternCallback formore information about pattern drawing functions."
  },
  {
    "title": "CGPatternRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1552265-cgpatternretain",
    "html": "Parameters\npattern\n\nThe pattern to retain.\n\nReturn Value\n\nThe same pattern youpassed in as the pattern parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain,except that it does not cause an error if the pattern parameteris NULL.\n\nSee Also\nRetaining and Releasing a Pattern\nCGPatternRelease\nDecrements the retain count of a Core Graphics pattern."
  },
  {
    "title": "kCGColorSpaceDisplayP3_PQ_EOTF | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspacedisplayp3_pq_eotf",
    "html": "Discussion\n\nThis color space was created by Apple Inc. This color space uses the DCI P3 primaries, a D65 white point, and the Perceptual Quantizer (PQ) transfer function. For more information on PQ, see https://www.itu.int/rec/R-REC-BT.2100."
  },
  {
    "title": "kCGColorSpaceGenericRGBLinear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspacegenericrgblinear",
    "html": "Discussion\n\nThis color space has the same colorimetry as kCGColorSpaceGenericRGB, but with a linear transfer function."
  },
  {
    "title": "kCGColorSpaceITUR_2020_PQ_EOTF | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceitur_2020_pq_eotf",
    "html": "Discussion\n\nThis color space has the same colorimetry as kCGColorSpaceITUR_2020, but uses the Perceptual Quantizer (PQ) transfer function. A pixel value of 1.0 is assumed to be 100 nits. See the current active version of the BT.2100 recommendation on the ITU website (https://www.itu.int/)."
  },
  {
    "title": "kCGColorSpaceITUR_2020_HLG | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceitur_2020_hlg",
    "html": "Discussion\n\nThis color space has the same colorimetry as kCGColorSpaceITUR_2020, but uses the Hybrid Log-Gamma (HLG) transfer function. Pixel values should be between 0.0 and 12.0. See the current active version of the BT.2100 recommendation on the ITU website (https://www.itu.int/)."
  },
  {
    "title": "kCGColorSpaceITUR_2020 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspaceitur_2020",
    "html": "Discussion\n\nSee the current active version of the Recommendation BT.2020 document on the ITU website (https://www.itu.int/)."
  },
  {
    "title": "kCGColorSpaceGenericGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspacegenericgray",
    "html": "Deprecated\n\nUse kCGColorSpaceGenericGrayGamma2_2 instead."
  },
  {
    "title": "CGDisplayModeRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaymoderef",
    "html": "Overview\n\nA display mode is a set of properties (such as width, height, pixel depth, and refresh rate), and options (such as stretched LCD panel filling). For more information see Creating and Managing Display Modes or Getting Information About a Display Mode."
  },
  {
    "title": "CGFunctionGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1390879-cgfunctiongettypeid",
    "html": "Return Value\n\nThe identifier for the opaque type CGFunctionRef."
  },
  {
    "title": "CGColorSpaceGetBaseColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408839-cgcolorspacegetbasecolorspace",
    "html": "Parameters\nspace\n\nA color space object for a pattern or indexed color space.\n\nReturn Value\n\nThe base color space if the space parameter is a pattern or indexed color space; otherwise, NULL.\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCProfile\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nCGColorSpaceCopyICCData\nReturns a copy of the ICC profile data of the provided color space.\nCGColorSpaceSupportsOutput\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nCGColorSpaceGetNumberOfComponents\nReturns the number of color components in a color space.\nCGColorSpaceGetTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nCGColorSpaceGetModel\nReturns the color space model of the provided color space.\nCGColorSpaceIsWideGamutRGB\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nCGColorSpaceGetColorTableCount\nReturns the number of entries in the color table of an indexed color space.\nCGColorSpaceGetColorTable\nCopies the entries in the color table of an indexed color space.\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "CGEventGetSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_event_services/1807992-cgeventgetsource",
    "html": "Deprecated\n\nUse CGEventCreateSourceFromEvent instead.\n\nSee Also\nDeprecated Functions\nCGPostKeyboardEvent\nSynthesizes a low-level keyboard event on the local machine.\nDeprecated\nCGPostMouseEvent\nSynthesizes a low-level mouse-button event on the local machine.\nDeprecated\nCGPostScrollWheelEvent\nSynthesizes a low-level scrolling event on the local machine.\nDeprecated\nCGEnableEventStateCombining\nEnables or disables the merging of actual key and mouse state with the application-specified state in a synthetic event.\nDeprecated\nCGInhibitLocalEvents\nTurns off local hardware events in the current session.\nDeprecated\nCGSetLocalEventsFilterDuringSuppressionState\nFilters local hardware events from the keyboard and mouse during the short interval after a synthetic event is posted.\nDeprecated\nCGSetLocalEventsSuppressionInterval\nSets the time interval in seconds that local hardware events are suppressed after posting a synthetic event.\nDeprecated"
  },
  {
    "title": "CGEventSetSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455500-cgeventsetsource",
    "html": "Parameters\nevent\n\nThe event to access.\n\nsource\n\nThe new event source of the specified event.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGDataConsumerCreateWithURL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454474-cgdataconsumercreatewithurl",
    "html": "Parameters\nurl\n\nA CFURL object that specifies the data destination.\n\nReturn Value\n\nA new data consumer object. You are responsible for releasing this object using CGDataConsumerRelease.\n\nSee Also\nCreating Data Consumers\nCGDataConsumerCreate\nCreates a data consumer that uses callback functions to write data.\nCGDataConsumerCreateWithCFData\nCreates a data consumer that writes to a CFData object."
  },
  {
    "title": "CGDataConsumerGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455226-cgdataconsumergettypeid",
    "html": "Return Value\n\nThe Core Foundation identifier for the opaque type CGDataConsumerRef."
  },
  {
    "title": "CGEventCreateMouseEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454356-cgeventcreatemouseevent",
    "html": "Parameters\nsource\n\nAn event source taken from another event, or NULL.\n\nmouseType\n\nA mouse event type. Pass one of the constants listed in CGEventType.\n\nmouseCursorPosition\n\nThe position of the mouse cursor in global coordinates.\n\nmouseButton\n\nThe button that’s changing state. Pass one of the constants listed in CGMouseButton. This parameter is ignored unless the mouseType parameter is kCGEventOtherMouseDown, kCGEventOtherMouseDragged, or kCGEventOtherMouseUp.\n\nReturn Value\n\nA new mouse event, or NULL if the event could not be created. When you no longer need the event, you should release it using the function CFRelease.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "init(dictionaryRepresentation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgrect/2427139-init",
    "html": "Parameters\ndict\n\nA dictionary containing x, y, width, and height values for the rectangle to create, in the format used by the CGRectCreateDictionaryRepresentation(_:) property.\n\nReturn Value\n\nA rect structure with the origin and size specified in the dictionary, or nil if a rectangle value cannot be found in the dictionary.\n\nSee Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the provided rectangle.\nvar debugDescription: String\nvar customMirror: Mirror\nA representation of the rectangle’s structure and display style for use in debugging.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the rectangle for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "CGImageGetShouldInterpolate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455363-cgimagegetshouldinterpolate",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nReturns 1 if interpolation is enabled for the specified bitmap image (or image mask), otherwise, returns 0.\n\nDiscussion\n\nThe interpolation setting specifies whether an edge-smoothing algorithm is applied to the associated image.\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "CGImageGetHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455829-cgimagegetheight",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe height in pixels of the bitmap image (or image mask).\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "kCGRenderingIntentSaturation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorrenderingintent/kcgrenderingintentsaturation",
    "html": "Discussion\n\nPreserve the relative saturation value of the colors when converting into the gamut of the output device. The result is an image with bright, saturated colors. Saturation intent is good for reproducing images with low detail, such as presentation charts and graphs."
  },
  {
    "title": "CGRectGetMaxX(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454334-cgrectgetmaxx",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\nThe largest value of the x-coordinate for the rectangle.\n\nSee Also\nCalculated Geometric Properties\nvar height: CGFloat\nReturns the height of a rectangle.\nvar width: CGFloat\nReturns the width of a rectangle.\nvar minX: CGFloat\nReturns the smallest value for the x-coordinate of the rectangle.\nvar midX: CGFloat\nReturns the x- coordinate that establishes the center of a rectangle.\nvar minY: CGFloat\nReturns the smallest value for the y-coordinate of the rectangle.\nvar midY: CGFloat\nReturns the y-coordinate that establishes the center of the rectangle.\nvar maxY: CGFloat\nReturns the largest value for the y-coordinate of the rectangle."
  },
  {
    "title": "CGRectGetMaxY(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454060-cgrectgetmaxy",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\nThe largest value for the y-coordinate of the rectangle.\n\nSee Also\nCalculated Geometric Properties\nvar height: CGFloat\nReturns the height of a rectangle.\nvar width: CGFloat\nReturns the width of a rectangle.\nvar minX: CGFloat\nReturns the smallest value for the x-coordinate of the rectangle.\nvar midX: CGFloat\nReturns the x- coordinate that establishes the center of a rectangle.\nvar maxX: CGFloat\nReturns the largest value of the x-coordinate for the rectangle.\nvar minY: CGFloat\nReturns the smallest value for the y-coordinate of the rectangle.\nvar midY: CGFloat\nReturns the y-coordinate that establishes the center of the rectangle."
  },
  {
    "title": "CGRectGetMidY(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456550-cgrectgetmidy",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\nThe y-coordinate of the center of the specified rectangle.\n\nSee Also\nCalculated Geometric Properties\nvar height: CGFloat\nReturns the height of a rectangle.\nvar width: CGFloat\nReturns the width of a rectangle.\nvar minX: CGFloat\nReturns the smallest value for the x-coordinate of the rectangle.\nvar midX: CGFloat\nReturns the x- coordinate that establishes the center of a rectangle.\nvar maxX: CGFloat\nReturns the largest value of the x-coordinate for the rectangle.\nvar minY: CGFloat\nReturns the smallest value for the y-coordinate of the rectangle.\nvar maxY: CGFloat\nReturns the largest value for the y-coordinate of the rectangle."
  },
  {
    "title": "CGRectGetMinY(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454832-cgrectgetminy",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\nThe smallest value for the y-coordinate of the rectangle.\n\nSee Also\nCalculated Geometric Properties\nvar height: CGFloat\nReturns the height of a rectangle.\nvar width: CGFloat\nReturns the width of a rectangle.\nvar minX: CGFloat\nReturns the smallest value for the x-coordinate of the rectangle.\nvar midX: CGFloat\nReturns the x- coordinate that establishes the center of a rectangle.\nvar maxX: CGFloat\nReturns the largest value of the x-coordinate for the rectangle.\nvar midY: CGFloat\nReturns the y-coordinate that establishes the center of the rectangle.\nvar maxY: CGFloat\nReturns the largest value for the y-coordinate of the rectangle."
  },
  {
    "title": "CGRectGetHeight(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455645-cgrectgetheight",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\nThe height of the specified rectangle.\n\nDiscussion\n\nRegardless of whether the height is stored in the CGRect data structure as a positive or negative number, this function returns the height as if the rectangle were standardized. That is, the result is never a negative number.\n\nSee Also\nCalculated Geometric Properties\nvar width: CGFloat\nReturns the width of a rectangle.\nvar minX: CGFloat\nReturns the smallest value for the x-coordinate of the rectangle.\nvar midX: CGFloat\nReturns the x- coordinate that establishes the center of a rectangle.\nvar maxX: CGFloat\nReturns the largest value of the x-coordinate for the rectangle.\nvar minY: CGFloat\nReturns the smallest value for the y-coordinate of the rectangle.\nvar midY: CGFloat\nReturns the y-coordinate that establishes the center of the rectangle.\nvar maxY: CGFloat\nReturns the largest value for the y-coordinate of the rectangle."
  },
  {
    "title": "CGRectGetWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454758-cgrectgetwidth",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\nThe width of the specified rectangle.\n\nDiscussion\n\nRegardless of whether the width is stored in the CGRect data structure as a positive or negative number, this function returns the width as if the rectangle were standardized. That is, the result is never a negative number.\n\nSee Also\nCalculated Geometric Properties\nvar height: CGFloat\nReturns the height of a rectangle.\nvar minX: CGFloat\nReturns the smallest value for the x-coordinate of the rectangle.\nvar midX: CGFloat\nReturns the x- coordinate that establishes the center of a rectangle.\nvar maxX: CGFloat\nReturns the largest value of the x-coordinate for the rectangle.\nvar minY: CGFloat\nReturns the smallest value for the y-coordinate of the rectangle.\nvar midY: CGFloat\nReturns the y-coordinate that establishes the center of the rectangle.\nvar maxY: CGFloat\nReturns the largest value for the y-coordinate of the rectangle."
  },
  {
    "title": "kCGRenderingIntentRelativeColorimetric | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorrenderingintent/kcgrenderingintentrelativecolorimetric",
    "html": "Discussion\n\nMap colors outside of the gamut of the output device to the closest possible match inside the gamut of the output device. This can produce a clipping effect, where two different color values in the gamut of the graphics context are mapped to the same color value in the output device’s gamut. The relative colorimetric shifts all colors (including those within the gamut) to account for the difference between the white point of the graphics context and the white point of the output device."
  },
  {
    "title": "CGRectGetMidX(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456175-cgrectgetmidx",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\nThe x-coordinate of the center of the specified rectangle.\n\nSee Also\nCalculated Geometric Properties\nvar height: CGFloat\nReturns the height of a rectangle.\nvar width: CGFloat\nReturns the width of a rectangle.\nvar minX: CGFloat\nReturns the smallest value for the x-coordinate of the rectangle.\nvar maxX: CGFloat\nReturns the largest value of the x-coordinate for the rectangle.\nvar minY: CGFloat\nReturns the smallest value for the y-coordinate of the rectangle.\nvar midY: CGFloat\nReturns the y-coordinate that establishes the center of the rectangle.\nvar maxY: CGFloat\nReturns the largest value for the y-coordinate of the rectangle."
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgsize/1645828-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable\nSee Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the specified size.\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a size from a canonical dictionary representation.\nvar debugDescription: String\nA textual representation of the size’s dimensions.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the size for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "kCGRenderingIntentAbsoluteColorimetric | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorrenderingintent/kcgrenderingintentabsolutecolorimetric",
    "html": "Discussion\n\nMap colors outside of the gamut of the output device to the closest possible match inside the gamut of the output device. This can produce a clipping effect, where two different color values in the gamut of the graphics context are mapped to the same color value in the output device’s gamut. Unlike the relative colorimetric, absolute colorimetric does not modify colors inside the gamut of the output device."
  },
  {
    "title": "CGBitmapContextGetWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455607-cgbitmapcontextgetwidth",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe width in pixels of the specified context, or 0 if the context is not a bitmap context.\n\nSee Also\nGetting Information About Bitmap Contexts\nCGBitmapContextGetBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nCGBitmapContextGetAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nCGBitmapContextGetBitsPerComponent\nReturns the bits per component of a bitmap context.\nCGBitmapContextGetBitsPerPixel\nReturns the bits per pixel of a bitmap context.\nCGBitmapContextGetBytesPerRow\nReturns the bytes per row of a bitmap context.\nCGBitmapContextGetColorSpace\nReturns the color space of a bitmap context.\nCGBitmapContextGetData\nReturns a pointer to the image data associated with a bitmap context.\nCGBitmapContextGetHeight\nReturns the height in pixels of a bitmap context."
  },
  {
    "title": "CGBitmapContextGetData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455517-cgbitmapcontextgetdata",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nA pointer to the specified bitmap context’s image data, or NULL if the context is not a bitmap context.\n\nDiscussion\n\nIf you provided the memory for the bitmap data, you can use this method to get that data pointer. If you passed NULL for the data pointer when creating your bitmap context, it is safe to get the data pointer in iOS 4.0 and later and macOS 10.6 and later only. In earlier versions of the operating system, passing NULL for the data parameter is not supported and may lead to crashes when attempting to access this data using this function.\n\nSee Also\nGetting Information About Bitmap Contexts\nCGBitmapContextGetBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nCGBitmapContextGetAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nCGBitmapContextGetBitsPerComponent\nReturns the bits per component of a bitmap context.\nCGBitmapContextGetBitsPerPixel\nReturns the bits per pixel of a bitmap context.\nCGBitmapContextGetBytesPerRow\nReturns the bytes per row of a bitmap context.\nCGBitmapContextGetColorSpace\nReturns the color space of a bitmap context.\nCGBitmapContextGetHeight\nReturns the height in pixels of a bitmap context.\nCGBitmapContextGetWidth\nReturns the width in pixels of a bitmap context."
  },
  {
    "title": "CGBitmapContextGetHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454681-cgbitmapcontextgetheight",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe height in pixels of the specified context, or 0 if the context is not a bitmap context.\n\nSee Also\nGetting Information About Bitmap Contexts\nCGBitmapContextGetBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nCGBitmapContextGetAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nCGBitmapContextGetBitsPerComponent\nReturns the bits per component of a bitmap context.\nCGBitmapContextGetBitsPerPixel\nReturns the bits per pixel of a bitmap context.\nCGBitmapContextGetBytesPerRow\nReturns the bytes per row of a bitmap context.\nCGBitmapContextGetColorSpace\nReturns the color space of a bitmap context.\nCGBitmapContextGetData\nReturns a pointer to the image data associated with a bitmap context.\nCGBitmapContextGetWidth\nReturns the width in pixels of a bitmap context."
  },
  {
    "title": "CGBitmapContextGetBytesPerRow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456129-cgbitmapcontextgetbytesperrow",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe number of bytes per row of the specified context, or 0 if the context is not a bitmap context.\n\nSee Also\nGetting Information About Bitmap Contexts\nCGBitmapContextGetBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nCGBitmapContextGetAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nCGBitmapContextGetBitsPerComponent\nReturns the bits per component of a bitmap context.\nCGBitmapContextGetBitsPerPixel\nReturns the bits per pixel of a bitmap context.\nCGBitmapContextGetColorSpace\nReturns the color space of a bitmap context.\nCGBitmapContextGetData\nReturns a pointer to the image data associated with a bitmap context.\nCGBitmapContextGetHeight\nReturns the height in pixels of a bitmap context.\nCGBitmapContextGetWidth\nReturns the width in pixels of a bitmap context."
  },
  {
    "title": "CGBitmapContextGetColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454058-cgbitmapcontextgetcolorspace",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe color space of the specified context, or NULL if the context is not a bitmap context. You are responsible for retaining and releasing this object as necessary.\n\nSee Also\nGetting Information About Bitmap Contexts\nCGBitmapContextGetBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nCGBitmapContextGetAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nCGBitmapContextGetBitsPerComponent\nReturns the bits per component of a bitmap context.\nCGBitmapContextGetBitsPerPixel\nReturns the bits per pixel of a bitmap context.\nCGBitmapContextGetBytesPerRow\nReturns the bytes per row of a bitmap context.\nCGBitmapContextGetData\nReturns a pointer to the image data associated with a bitmap context.\nCGBitmapContextGetHeight\nReturns the height in pixels of a bitmap context.\nCGBitmapContextGetWidth\nReturns the width in pixels of a bitmap context."
  },
  {
    "title": "CGBitmapContextGetBitsPerPixel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455946-cgbitmapcontextgetbitsperpixel",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe number of bits per pixel in the specified context, or 0 if the context is not a bitmap context.\n\nSee Also\nGetting Information About Bitmap Contexts\nCGBitmapContextGetBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nCGBitmapContextGetAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nCGBitmapContextGetBitsPerComponent\nReturns the bits per component of a bitmap context.\nCGBitmapContextGetBytesPerRow\nReturns the bytes per row of a bitmap context.\nCGBitmapContextGetColorSpace\nReturns the color space of a bitmap context.\nCGBitmapContextGetData\nReturns a pointer to the image data associated with a bitmap context.\nCGBitmapContextGetHeight\nReturns the height in pixels of a bitmap context.\nCGBitmapContextGetWidth\nReturns the width in pixels of a bitmap context."
  },
  {
    "title": "CGBitmapContextGetBitsPerComponent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455383-cgbitmapcontextgetbitspercompone",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe number of bits per component in the specified context, or 0 if the context is not a bitmap context.\n\nSee Also\nGetting Information About Bitmap Contexts\nCGBitmapContextGetBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nCGBitmapContextGetAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nCGBitmapContextGetBitsPerPixel\nReturns the bits per pixel of a bitmap context.\nCGBitmapContextGetBytesPerRow\nReturns the bytes per row of a bitmap context.\nCGBitmapContextGetColorSpace\nReturns the color space of a bitmap context.\nCGBitmapContextGetData\nReturns a pointer to the image data associated with a bitmap context.\nCGBitmapContextGetHeight\nReturns the height in pixels of a bitmap context.\nCGBitmapContextGetWidth\nReturns the width in pixels of a bitmap context."
  },
  {
    "title": "CGBitmapContextGetAlphaInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454960-cgbitmapcontextgetalphainfo",
    "html": "Parameters\ncontext\n\nA bitmap context.\n\nReturn Value\n\nA bitmap information constant. If the specified context is not a bitmap context, kCGImageAlphaNone is returned.\n\nDiscussion\n\nEvery bitmap context contains an attribute that specifies whether the bitmap contains an alpha component, and how it is generated. The alpha component determines the opacity of a pixel when it is drawn.\n\nSee Also\nGetting Information About Bitmap Contexts\nCGBitmapContextGetBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nCGBitmapContextGetBitsPerComponent\nReturns the bits per component of a bitmap context.\nCGBitmapContextGetBitsPerPixel\nReturns the bits per pixel of a bitmap context.\nCGBitmapContextGetBytesPerRow\nReturns the bytes per row of a bitmap context.\nCGBitmapContextGetColorSpace\nReturns the color space of a bitmap context.\nCGBitmapContextGetData\nReturns a pointer to the image data associated with a bitmap context.\nCGBitmapContextGetHeight\nReturns the height in pixels of a bitmap context.\nCGBitmapContextGetWidth\nReturns the width in pixels of a bitmap context."
  },
  {
    "title": "CGEventSourceButtonState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408781-cgeventsourcebuttonstate",
    "html": "Parameters\nsourceState\n\nThe source state to access. Pass one of the constants listed in CGEventSourceStateID.\n\nbutton\n\nThe mouse button to test. Pass one of the constants listed in CGMouseButton.\n\nReturn Value\n\nIf true, the button is down. If false, the button is up.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGPDFContextBeginPage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456578-cgpdfcontextbeginpage",
    "html": "Parameters\ncontext\n\nA PDF graphics context.\n\npageInfo\n\nA dictionary that contains key-value pairs that define the page properties.\n\nDiscussion\n\nYou must call the function CGPDFContextEndPage to signal the end of the page.\n\nSee Also\nBeginning and Ending Pages\nCGPDFContextEndPage\nEnds the current page in the PDF graphics context."
  },
  {
    "title": "CGEventSourceKeyState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408768-cgeventsourcekeystate",
    "html": "Parameters\nsourceState\n\nThe source state to access. Pass one of the constants listed in CGEventSourceStateID.\n\nkey\n\nThe virtual key code to test.\n\nReturn Value\n\nIf true, the key is down. If false, the key is up.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGBitmapContextCreateWithData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454984-cgbitmapcontextcreatewithdata",
    "html": "Parameters\ndata\n\nA pointer to the destination in memory where the drawing is to be rendered. The size of this memory block should be at least (bytesPerRow*height) bytes.\n\nPass NULL if you want this function to allocate memory for the bitmap. This frees you from managing your own memory, which reduces memory leak issues.\n\nwidth\n\nThe width, in pixels, of the required bitmap.\n\nheight\n\nThe height, in pixels, of the required bitmap.\n\nbitsPerComponent\n\nThe number of bits to use for each component of a pixel in memory. For example, for a 32-bit pixel format and an RGB color space, you would specify a value of 8 bits per component. For the list of supported pixel formats, see “Supported Pixel Formats” in the Graphics Contexts chapter of Quartz 2D Programming Guide.\n\nbytesPerRow\n\nThe number of bytes of memory to use per row of the bitmap. If the data parameter is NULL, passing a value of 0 causes the value to be calculated automatically.\n\ncolorspace\n\nThe color space to use for the bitmap context. Note that indexed color spaces are not supported for bitmap graphics contexts.\n\nbitmapInfo\n\nConstants that specify whether the bitmap should contain an alpha channel, the alpha channel’s relative location in a pixel, and information about whether the pixel components are floating-point or integer values. The constants for specifying the alpha channel information are declared with the CGImageAlphaInfo type but can be passed to this parameter safely. You can also pass the other constants associated with the CGBitmapInfo type.\n\nFor an example of how to specify the color space, bits per pixel, bits per pixel component, and bitmap information, see Graphics Contexts.\n\nreleaseCallback\n\nThe custom release function to call when it is time to release the bitmap data. For the syntax of this function, see the description of the CGBitmapContextReleaseDataCallback data type. You may specify NULL for this parameter.\n\nreleaseInfo\n\nA pointer to any data you want passed to the your custom release callback.\n\nReturn Value\n\nA new bitmap context, or NULL if a context could not be created. You are responsible for releasing this object using CGContextRelease.\n\nDiscussion\n\nWhen you draw into this context, Core Graphics renders your drawing as bitmapped data in the specified block of memory.\n\nThe pixel format for a new bitmap context is determined by three parameters—the number of bits per component, the color space, and an alpha option (expressed as a CGBitmapInfo constant). The alpha value determines the opacity of a pixel when it is drawn.\n\nSee Also\nCreating Bitmap Contexts\nCGBitmapContextCreate\nCreates a bitmap graphics context.\nCGBitmapContextCreateImage\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "CGColorSpaceGetModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408854-cgcolorspacegetmodel",
    "html": "Parameters\nspace\n\nA color space object.\n\nReturn Value\n\nOne of the constants described in CGColorSpaceModel.\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCProfile\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nCGColorSpaceCopyICCData\nReturns a copy of the ICC profile data of the provided color space.\nCGColorSpaceSupportsOutput\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nCGColorSpaceGetNumberOfComponents\nReturns the number of color components in a color space.\nCGColorSpaceGetTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nCGColorSpaceIsWideGamutRGB\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nCGColorSpaceGetBaseColorSpace\nReturns the base color space of a pattern or indexed color space.\nCGColorSpaceGetColorTableCount\nReturns the number of entries in the color table of an indexed color space.\nCGColorSpaceGetColorTable\nCopies the entries in the color table of an indexed color space.\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "CGColorSpaceGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408926-cgcolorspacegettypeid",
    "html": "Return Value\n\nThe identifier for the opaque type CGColorSpaceRef.\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCProfile\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nCGColorSpaceCopyICCData\nReturns a copy of the ICC profile data of the provided color space.\nCGColorSpaceSupportsOutput\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nCGColorSpaceGetNumberOfComponents\nReturns the number of color components in a color space.\nCGColorSpaceGetModel\nReturns the color space model of the provided color space.\nCGColorSpaceIsWideGamutRGB\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nCGColorSpaceGetBaseColorSpace\nReturns the base color space of a pattern or indexed color space.\nCGColorSpaceGetColorTableCount\nReturns the number of entries in the color table of an indexed color space.\nCGColorSpaceGetColorTable\nCopies the entries in the color table of an indexed color space.\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "CGBitmapContextGetBitmapInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455839-cgbitmapcontextgetbitmapinfo",
    "html": "Parameters\nc\n\nA bitmap graphics context.\n\nReturn Value\n\nThe bitmap info of the bitmap graphics context or 0 if c is not a bitmap graphics context. See CGImage for a description of the CGBitmapInfo constants that can be returned.\n\nDiscussion\n\nThe data returned by the function specifies whether the bitmap contains an alpha channel and how the alpha channel is generated, along with whether the components are floating-point or integer.\n\nSee Also\nGetting Information About Bitmap Contexts\nCGBitmapContextGetAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nCGBitmapContextGetBitsPerComponent\nReturns the bits per component of a bitmap context.\nCGBitmapContextGetBitsPerPixel\nReturns the bits per pixel of a bitmap context.\nCGBitmapContextGetBytesPerRow\nReturns the bytes per row of a bitmap context.\nCGBitmapContextGetColorSpace\nReturns the color space of a bitmap context.\nCGBitmapContextGetData\nReturns a pointer to the image data associated with a bitmap context.\nCGBitmapContextGetHeight\nReturns the height in pixels of a bitmap context.\nCGBitmapContextGetWidth\nReturns the width in pixels of a bitmap context."
  },
  {
    "title": "CGColorSpaceIsWideGamutRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1644737-cgcolorspaceiswidegamutrgb",
    "html": "Parameters\nCGColorSpaceRef\n\nA color space object.\n\nReturn Value\n\nYES if the color space is greater than 85% of the NTSC gamut, otherwise NO.\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCProfile\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nCGColorSpaceCopyICCData\nReturns a copy of the ICC profile data of the provided color space.\nCGColorSpaceSupportsOutput\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nCGColorSpaceGetNumberOfComponents\nReturns the number of color components in a color space.\nCGColorSpaceGetTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nCGColorSpaceGetModel\nReturns the color space model of the provided color space.\nCGColorSpaceGetBaseColorSpace\nReturns the base color space of a pattern or indexed color space.\nCGColorSpaceGetColorTableCount\nReturns the number of entries in the color table of an indexed color space.\nCGColorSpaceGetColorTable\nCopies the entries in the color table of an indexed color space.\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "CGBitmapContextCreateImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454225-cgbitmapcontextcreateimage",
    "html": "Parameters\nc\n\nA bitmap graphics context.\n\nReturn Value\n\nA CGImage object that contains a snapshot of the bitmap graphics context or NULL if the image is not created.\n\nDiscussion\n\nThe CGImage object returned by this function is created by a copy operation. Subsequent changes to the bitmap graphics context do not affect the contents of the returned image. In some cases the copy operation actually follows copy-on-write semantics, so that the actual physical copy of the bits occur only if the underlying data in the bitmap graphics context is modified. As a consequence, you may want to use the resulting image and release it before you perform additional drawing into the bitmap graphics context. In this way, you can avoid the actual physical copy of the data.\n\nSee Also\nCreating Bitmap Contexts\nCGBitmapContextCreate\nCreates a bitmap graphics context.\nCGBitmapContextCreateWithData\nCreates a bitmap graphics context with the specified callback function."
  },
  {
    "title": "CGDisplayModeRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1562059-cgdisplaymoderetain",
    "html": "Parameters\nmode\n\nA display mode to be retained.\n\nReturn Value\n\nThe input value mode.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the mode parameter is NULL.\n\nSee Also\nCreating and Managing Display Modes\nCGDisplayAvailableModes\nReturns information about the currently available display modes.\nDeprecated\nCGDisplayBestModeForParameters\nReturns information about the display mode closest to a specified depth and screen size.\nDeprecated\nCGDisplayBestModeForParametersAndRefreshRate\nReturns information about the display mode closest to a specified depth, screen size, and refresh rate.\nDeprecated\nCGDisplayCurrentMode\nReturns information about the current display mode.\nDeprecated\nCGDisplaySwitchToMode\nSwitches a display to a different mode.\nDeprecated\nCGDisplayCopyDisplayMode\nReturns information about a display’s current configuration.\nCGDisplayCopyAllDisplayModes\nReturns information about the currently available display modes.\nCGDisplaySetDisplayMode\nSwitches a display to a different mode.\nCGDisplayModeRelease\nReleases a Core Graphics display mode."
  },
  {
    "title": "CGColorSpaceGetColorTable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408853-cgcolorspacegetcolortable",
    "html": "Parameters\nspace\n\nA color space object for an indexed color space.\n\ntable\n\nThe array pointed to by table should be at least as large as the number of entries in the color table. On output, the array contains the table data in the same format as that passed to CGColorSpaceCreateIndexed.\n\nDiscussion\n\nThis function does nothing if the color space is not an indexed color space. To determine whether a color space is an indexed color space, call the function CGColorSpaceGetModel.\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCProfile\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nCGColorSpaceCopyICCData\nReturns a copy of the ICC profile data of the provided color space.\nCGColorSpaceSupportsOutput\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nCGColorSpaceGetNumberOfComponents\nReturns the number of color components in a color space.\nCGColorSpaceGetTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nCGColorSpaceGetModel\nReturns the color space model of the provided color space.\nCGColorSpaceIsWideGamutRGB\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nCGColorSpaceGetBaseColorSpace\nReturns the base color space of a pattern or indexed color space.\nCGColorSpaceGetColorTableCount\nReturns the number of entries in the color table of an indexed color space.\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "CGWindowID Encoding Type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services/cgwindowid_encoding_type",
    "html": "Topics\nConstants\nkCGWindowIDCFNumberType"
  },
  {
    "title": "CGColorSpaceRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408885-cgcolorspaceretain",
    "html": "Parameters\ncs\n\nThe Quartz color space to retain.\n\nReturn Value\n\nThe same color space you passed in as the cs parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the cs parameter is NULL.\n\nSee Also\nRetaining and Releasing Color Spaces\nCGColorSpaceRelease\nDecrements the retain count of a color space."
  },
  {
    "title": "Null Window | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services/null_window",
    "html": "Topics\nConstants\nkCGNullWindowID"
  },
  {
    "title": "CGWindowListCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1552209-cgwindowlistcreate",
    "html": "Parameters\noption\n\nThe options describing which window IDs to return. Typical options let you obtain IDs for all windows or for windows above or below the window specified in the relativeToWindow parameter. For more information, see Window List Option Constants.\n\nrelativeToWindow\n\nThe ID of the window to use as a reference point when determining which other windows to return. For options that do not require a reference window, this parameter can be kCGNullWindowID.\n\nReturn Value\n\nAn array of CGWindowID values corresponding to the desired windows. If there are no windows matching the desired criteria, the function returns an empty array. If you call this function from outside of a GUI security session or when no window server is running, this function returns NULL.\n\nSee Also\nGetting Window Information\nCGWindowListCopyWindowInfo\nGenerates and returns information about the selected windows in the current user session.\nCGWindowListCreateDescriptionFromArray\nGenerates and returns information about windows with the specified window IDs.\nCGWindowListCreateImage\nReturns a composite image based on a dynamically generated list of windows.\nDeprecated\nCGWindowListCreateImageFromArray\nReturns a composite image of the specified windows.\nDeprecated"
  },
  {
    "title": "Window Sharing Encoding Type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services/window_sharing_encoding_type",
    "html": "Topics\nConstants\nkCGWindowSharingCFNumberType"
  },
  {
    "title": "CGWindowListCreateImageFromArray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455730-cgwindowlistcreateimagefromarray",
    "html": "Parameters\nscreenBounds\n\nThe rectangle that you want to capture. The coordinates of the rectangle must be specified in screen coordinates, where the screen origin is in the upper-left corner of the main display and y-axis values increase downward. Specify CGRectNull to indicate the minimum rectangle that encloses the specified windows. Specify CGRectInfinite to capture the entire desktop area.\n\nwindowArray\n\nAn array of CGWindowID types, each of which corresponds to a window whose information you want to retrieve. The order of the window IDs also affects the compositing order of the windows; see the discussion for more information about this behavior.\n\nimageOption\n\nThe options that determine which parts of the window to capture. If you specified CGRectNull for the screenBounds parameter, these options help determine the resulting bounding box used for the image. For example, if you include a window’s screen effects in the image, the bounding box may need to be slightly larger to accommodate those effects. For a list of possible options, see Window Image Types.\n\nReturn Value\n\nA composite image formed from the contents of the specified set of windows. Invalid window IDs are ignored. If the windows are unreadable (because their sharing setting is set to kCGWindowSharingNone, for example) or if no windows meet the specified criteria, this function returns an image that is either 0 by 0 pixels in size or is of the specified size but is filled with the transparent black color. If you call this function from outside of a GUI security session or when no window server is running, this function returns NULL.\n\nDiscussion\n\nThis function ignores any window IDs in the windowArray parameter that refer to windows that no longer exist. (This can occur if the user closes a window between the time you retrieve its ID and the time you call this function.) If this results in no windows being available in the selected range, this function returns NULL.\n\nThis function ignores the onscreen ordering of the windows and instead composites them using the order specified in the windowArray parameter. In other words, windows at the beginning of the array are composited in front of windows at the end of the array.\n\nSee Also\nGetting Window Information\nCGWindowListCopyWindowInfo\nGenerates and returns information about the selected windows in the current user session.\nCGWindowListCreate\nReturns the list of window IDs associated with the specified windows in the current user session.\nCGWindowListCreateDescriptionFromArray\nGenerates and returns information about windows with the specified window IDs.\nCGWindowListCreateImage\nReturns a composite image based on a dynamically generated list of windows.\nDeprecated"
  },
  {
    "title": "CGDisplayModeGetWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454442-cgdisplaymodegetwidth",
    "html": "Parameters\nmode\n\nA display mode.\n\nReturn Value\n\nThe width, in pixels, of the specified display mode.\n\nSee Also\nGetting Information About a Display Mode\nCGDisplayModeGetHeight\nReturns the height of the specified display mode.\nCGDisplayModeCopyPixelEncoding\nReturns the pixel encoding of the specified display mode.\nDeprecated\nCGDisplayModeGetRefreshRate\nReturns the refresh rate of the specified display mode.\nCGDisplayModeGetIOFlags\nReturns the I/O Kit flags of the specified display mode.\nCGDisplayModeGetIODisplayModeID\nReturns the I/O Kit display mode ID of the specified display mode.\nCGDisplayModeIsUsableForDesktopGUI\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nCGDisplayModeGetTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "customPlaygroundQuickLook | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgrect/1645827-customplaygroundquicklook",
    "html": "See Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the provided rectangle.\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a rectangle from a canonical dictionary representation.\nvar debugDescription: String\nvar customMirror: Mirror\nA representation of the rectangle’s structure and display style for use in debugging."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgrect/1645823-debugdescription",
    "html": "Discussion\n\nA textual representation of the rectangle's origin and size values.\n\nRelationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the provided rectangle.\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a rectangle from a canonical dictionary representation.\nvar customMirror: Mirror\nA representation of the rectangle’s structure and display style for use in debugging.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the rectangle for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgrect/1645833-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable\nSee Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the provided rectangle.\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a rectangle from a canonical dictionary representation.\nvar debugDescription: String\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the rectangle for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "CGDisplayModeGetHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455380-cgdisplaymodegetheight",
    "html": "Parameters\nmode\n\nA display mode.\n\nReturn Value\n\nThe height, in pixels, of the specified display mode.\n\nSee Also\nGetting Information About a Display Mode\nCGDisplayModeGetWidth\nReturns the width of the specified display mode.\nCGDisplayModeCopyPixelEncoding\nReturns the pixel encoding of the specified display mode.\nDeprecated\nCGDisplayModeGetRefreshRate\nReturns the refresh rate of the specified display mode.\nCGDisplayModeGetIOFlags\nReturns the I/O Kit flags of the specified display mode.\nCGDisplayModeGetIODisplayModeID\nReturns the I/O Kit display mode ID of the specified display mode.\nCGDisplayModeIsUsableForDesktopGUI\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nCGDisplayModeGetTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "CGEventCreateSourceFromEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455393-cgeventcreatesourcefromevent",
    "html": "Parameters\nevent\n\nThe event to access.\n\nReturn Value\n\nAn event source created from the specified event, or NULL if the event was generated with a private event source owned by another process. When you no longer need this event source, you should release it using the function CFRelease.\n\nDiscussion\n\nEvent filters may use the event source to generate events that are compatible with an event being filtered.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventCreateCopy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454071-cgeventcreatecopy",
    "html": "Parameters\nevent\n\nThe event being copied.\n\nReturn Value\n\nA copy of the specified event. When you no longer need the copy, you should release it using the function CFRelease.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventCreateFromData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454249-cgeventcreatefromdata",
    "html": "Parameters\nallocator\n\nThe allocator to use to allocate memory for the event object. To use the current default allocator, pass NULL or kCFAllocatorDefault.\n\neventData\n\nThe flattened data representation of the event to reconstruct.\n\nReturn Value\n\nAn event built from the flattened data representation, or NULL if the eventData parameter is invalid.\n\nDiscussion\n\nYou can use this function to reconstruct a Quartz event received by network transport from another system.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventCreateData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454381-cgeventcreatedata",
    "html": "Parameters\nallocator\n\nThe allocator to use to allocate memory for the data object. To use the current default allocator, pass NULL or kCFAllocatorDefault.\n\nevent\n\nThe event to flatten.\n\nReturn Value\n\nThe flattened data representation of the event, or NULL if the event parameter is invalid. When you no longer need the data object, you should release it using the function CFRelease.\n\nDiscussion\n\nYou can use this function to flatten an event for network transport to another system.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454913-cgeventcreate",
    "html": "Parameters\nsource\n\nThe event source, or NULL to use a default source.\n\nReturn Value\n\nA new event to be filled in, or NULL if the event could not be created. When you no longer need the event, you should release it using the function CFRelease.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventGetTimestamp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455481-cgeventgettimestamp",
    "html": "Parameters\nevent\n\nThe event to access.\n\nReturn Value\n\nThe current timestamp of the specified event.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454922-cgeventgettypeid",
    "html": "Return Value\n\nThe Core Foundation type identifier for the opaque type CGEventRef.\n\nSee Also\nWorking With Events\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGPDFDocumentAllowsPrinting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402594-cgpdfdocumentallowsprinting",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nReturn Value\n\nA Boolean that, if YES, indicates that the document allows printing. If the value is NO, the document does not allow printing.\n\nDiscussion\n\nIf the document is encrypted and the current password doesn't grant permission to perform printing, this returns NO.\n\nSee Also\nManaging Encryption\nCGPDFDocumentAllowsCopying\nReturns whether the specified PDF document allows copying.\nCGPDFDocumentIsEncrypted\nReturns whether the specified PDF file is encrypted.\nCGPDFDocumentIsUnlocked\nReturns whether the specified PDF document is currently unlocked.\nCGPDFDocumentUnlockWithPassword\nUnlocks an encrypted PDF document when a valid password is supplied."
  },
  {
    "title": "CGEventGetType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455634-cgeventgettype",
    "html": "Parameters\nevent\n\nThe event to access.\n\nReturn Value\n\nThe current event type of the specified event. The return value is one of the constants listed in CGEventType.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpoint/1645825-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the specified point.\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a point from a canonical dictionary representation.\nvar customMirror: Mirror\nA representation of the point’s structure and display style for use in debugging.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the point for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpoint/1645834-custommirror",
    "html": "Discussion\n\nMirrors are used by playgrounds and the debugger.\n\nRelationships\nFrom Protocol\nCustomReflectable\nSee Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the specified point.\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a point from a canonical dictionary representation.\nvar debugDescription: String\nA textual representation of the point’s coordinate values.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the point for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "init(dictionaryRepresentation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpoint/2427118-init",
    "html": "Parameters\ndict\n\nA dictionary containing x and y values for the point to create, in the format used by the CGPointCreateDictionaryRepresentation(_:) property.\n\nReturn Value\n\nA point structure containing the x and y values specified in the dictionary, or nil if a point value cannot be found in the dictionary.\n\nSee Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the specified point.\nvar debugDescription: String\nA textual representation of the point’s coordinate values.\nvar customMirror: Mirror\nA representation of the point’s structure and display style for use in debugging.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the point for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "customPlaygroundQuickLook | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpoint/1645835-customplaygroundquicklook",
    "html": "See Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the specified point.\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a point from a canonical dictionary representation.\nvar debugDescription: String\nA textual representation of the point’s coordinate values.\nvar customMirror: Mirror\nA representation of the point’s structure and display style for use in debugging."
  },
  {
    "title": "init(dictionaryRepresentation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgsize/2427155-init",
    "html": "Parameters\ndict\n\nA dictionary containing width and height values for the size to create, in the format used by the CGSizeCreateDictionaryRepresentation(_:) property.\n\nReturn Value\n\nA size structure containing the width and height values specified in the dictionary, or nil if a size value cannot be found in the dictionary.\n\nSee Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the specified size.\nvar debugDescription: String\nA textual representation of the size’s dimensions.\nvar customMirror: Mirror\nA representation of the size’s structure and display style for use in debugging.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the size for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgsize/1645822-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nAlternate Representations\nvar dictionaryRepresentation: CFDictionary\nReturns a dictionary representation of the specified size.\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a size from a canonical dictionary representation.\nvar customMirror: Mirror\nA representation of the size’s structure and display style for use in debugging.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the size for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "Constant Colors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/constant_colors",
    "html": "Topics\nConstants\nkCGColorWhite\nThe white color in the Generic gray color space.\nkCGColorBlack\nThe black color in the Generic gray color space.\nkCGColorClear\nThe clear color in the Generic gray color space."
  },
  {
    "title": "CGColorConversionInfoCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/2113677-cgcolorconversioninfocreate",
    "html": "Parameters\nsrc\n\nThe source color space from which color values are to be converted.\n\ndst\n\nThe destination color space to which colors are to be converted.\n\nReturn Value\n\nA color conversion object, or nil if no conversion between the specified color spaces is allowed.\n\nDiscussion\n\nThe source and destination color spaces must be calibrated color spaces (that is, not device-specific or indexed color spaces).\n\nYou can use a color conversion object to create MPSImageConversion filters that perform GPU-accelerated color space conversion.\n\nSee Also\nCreating a Color Conversion\nCGColorConversionInfoCreateFromList\nCreates a conversion between an arbitrary number of specified color spaces.\nCGColorConversionInfoTransformType\nConstants describing how a color conversion uses color spaces."
  },
  {
    "title": "CGEventSetLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456389-cgeventsetlocation",
    "html": "Parameters\nevent\n\nThe mouse event whose location to set.\n\nlocation\n\nThe new location of the specified mouse event in global display coordinates.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventGetUnflippedLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455589-cgeventgetunflippedlocation",
    "html": "Parameters\nevent\n\nThe mouse event whose location you wish to obtain.\n\nReturn Value\n\nThe current location of the specified mouse event relative to the lower-left corner of the main display.\n\nDiscussion\n\nThis function returns the location of the mouse cursor associated with the event. The coordinate system used is relative to the lower-left corner of the main display, and is compatible with the global coordinate system used by the Application Kit.\n\nNote that the y-coordinate of the returned location is off by one from an idealized coordinate system originating at the lower-left corner of the main display. Effectively, the function is defined as follows:\n\nCGPoint p = CGEventGetLocation(event);\np.y = main_display_height - p.y;\n/* not p.y = (main_display_height - 1) - p.y */\nreturn p;\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventGetFlags | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455642-cgeventgetflags",
    "html": "Parameters\nevent\n\nThe event to access.\n\nReturn Value\n\nThe current flags of the specified event. For more information, see CGEventFlags.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventGetDoubleValueField | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455506-cgeventgetdoublevaluefield",
    "html": "Parameters\nevent\n\nThe event to access.\n\nfield\n\nA field in the specified event. Pass one of the constants listed in CGEventField.\n\nReturn Value\n\nA floating point representation of the current value of the specified field.\n\nDiscussion\n\nIn cases where the field value is represented within the event by a fixed point number or an integer, the result is scaled to the appropriate range as part of creating the floating point representation.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventGetLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455788-cgeventgetlocation",
    "html": "Parameters\nevent\n\nThe mouse event to locate.\n\nReturn Value\n\nThe current location of the specified mouse event in global display coordinates.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventSetDoubleValueField | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455526-cgeventsetdoublevaluefield",
    "html": "Parameters\nevent\n\nThe event to access.\n\nfield\n\nA field in the specified event. Pass one of the constants listed in CGEventField.\n\nvalue\n\nThe new value of the specified field.\n\nDiscussion\n\nBefore calling this function, the event type must be set using a typed event creation function such as CGEventCreateMouseEvent, or by calling CGEventSetType.\n\nIn cases where the field’s value is represented within the event by a fixed point number or integer, the value parameter is scaled as needed and converted to the appropriate type.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGShadingCreateRadial | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456399-cgshadingcreateradial",
    "html": "Parameters\ncolorspace\n\nThe color space in which color values are expressed. Core Graphics retains this object; upon return, you may safely release it.\n\nstart\n\nThe center of the starting circle, in the shading's target coordinate space.\n\nstartRadius\n\nThe radius of the starting circle, in the shading's target coordinate space.\n\nend\n\nThe center of the ending circle, in the shading's target coordinate space.\n\nendRadius\n\nThe radius of the ending circle, in the shading's target coordinate space.\n\nfunction\n\nA CGFunction object created by the function CGFunctionCreate. This object refers to your function for creating a radial shading. Core Graphics retains this object; upon return, you may safely release it.\n\nextendStart\n\nA Boolean value that specifies whether to extend the shading beyond the starting circle.\n\nextendEnd\n\nA Boolean value that specifies whether to extend the shading beyond the ending circle.\n\nReturn Value\n\nA new Core Graphics radial shading. You are responsible for releasing this object using CGShadingRelease.\n\nDiscussion\n\nA radial shading is a color blend that varies between two circles. To draw the shading, call the function CGContextDrawShading.\n\nSee Also\nCreating Shading Objects\nCGShadingCreateAxial\nCreates a shading object to use for axial shading."
  },
  {
    "title": "CGEventTapCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454426-cgeventtapcreate",
    "html": "Parameters\ntap\n\nThe location of the new event tap. Pass one of the constants listed in CGEventTapLocation. Only processes running as the root user may locate an event tap at the point where HID events enter the window server; for other users, this function returns NULL.\n\nplace\n\nThe placement of the new event tap in the list of active event taps. Pass one of the constants listed in CGEventTapPlacement.\n\noptions\n\nA constant that specifies whether the new event tap is a passive listener or an active filter.\n\neventsOfInterest\n\nA bit mask that specifies the set of events to be observed. For a list of possible events, see CGEventType. For information on how to specify the mask, see CGEventMask. If the event tap is not permitted to monitor one or more of the events specified in the eventsOfInterest parameter, then the appropriate bits in the mask are cleared. If that action results in an empty mask, this function returns NULL.\n\ncallback\n\nAn event tap callback function that you provide. Your callback function is invoked from the run loop to which the event tap is added as a source. The thread safety of the callback is defined by the run loop’s environment. To learn more about event tap callbacks, see CGEventTapCallBack.\n\nrefcon\n\nA pointer to user-defined data. This pointer is passed into the callback function specified in the callback parameter.\n\nReturn Value\n\nA Core Foundation mach port that represents the new event tap, or NULL if the event tap could not be created. When you are finished using the event tap, you should release the mach port using the function CFRelease. Releasing the mach port also releases the tap.\n\nDiscussion\n\nEvent taps receive key up and key down events if one of the following conditions is true:\n\nThe current process is running as the root user.\n\nAccess for assistive devices is enabled. In OS X v10.4, you can enable this feature using System Preferences, Universal Access panel, Keyboard view.\n\nAfter creating an event tap, you can add it to a run loop as follows:\n\nPass the event tap to the CFMachPortCreateRunLoopSource function to create a run loop event source.\n\nCall the CFRunLoopAddSource function to add the source to the appropriate run loop.\n\nSee Also\nWorking With Event Taps\nCGEventTapCreateForPSN\nCreates an event tap for a specified process.\nCGEventTapEnable\nEnables or disables an event tap.\nCGEventTapIsEnabled\nReturns a Boolean value indicating whether an event tap is enabled.\nCGEventTapPostEvent\nPosts a Quartz event from an event tap into the event stream.\nCGEventPost\nPosts a Quartz event into the event stream at a specified location.\nCGEventPostToPSN\nPosts a Quartz event into the event stream for a specific application.\nCGGetEventTapList\nGets a list of currently installed event taps.\nCGEventMaskBit\nGenerates an event mask for a single type of event."
  },
  {
    "title": "CGEventTapEnable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455445-cgeventtapenable",
    "html": "Parameters\nmyTap\n\nThe event tap to enable or disable.\n\nenable\n\nPass true to enable the event tap. To disable it, pass false.\n\nDiscussion\n\nEvent taps are normally enabled when created. If an event tap becomes unresponsive, or if a user requests that event taps be disabled, then a kCGEventTapDisabled event is passed to the event tap callback function. Event taps may be re-enabled by calling this function.\n\nSee Also\nWorking With Event Taps\nCGEventTapCreate\nCreates an event tap.\nCGEventTapCreateForPSN\nCreates an event tap for a specified process.\nCGEventTapIsEnabled\nReturns a Boolean value indicating whether an event tap is enabled.\nCGEventTapPostEvent\nPosts a Quartz event from an event tap into the event stream.\nCGEventPost\nPosts a Quartz event into the event stream at a specified location.\nCGEventPostToPSN\nPosts a Quartz event into the event stream for a specific application.\nCGGetEventTapList\nGets a list of currently installed event taps.\nCGEventMaskBit\nGenerates an event mask for a single type of event."
  },
  {
    "title": "CGEventPostToPSN | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455313-cgeventposttopsn",
    "html": "Parameters\nprocessSerialNumber\n\nThe process to receive the event.\n\nevent\n\nThe event to post.\n\nDiscussion\n\nThis function makes it possible for an application to establish an event routing policy, for example, by tapping events at the kCGAnnotatedSessionEventTap location and then posting the events to another desired process.\n\nThis function posts the specified event immediately before any event taps instantiated for the specified process, and the event passes through any such taps.\n\nSee Also\nWorking With Event Taps\nCGEventTapCreate\nCreates an event tap.\nCGEventTapCreateForPSN\nCreates an event tap for a specified process.\nCGEventTapEnable\nEnables or disables an event tap.\nCGEventTapIsEnabled\nReturns a Boolean value indicating whether an event tap is enabled.\nCGEventTapPostEvent\nPosts a Quartz event from an event tap into the event stream.\nCGEventPost\nPosts a Quartz event into the event stream at a specified location.\nCGGetEventTapList\nGets a list of currently installed event taps.\nCGEventMaskBit\nGenerates an event mask for a single type of event."
  },
  {
    "title": "CGEventSourceCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408776-cgeventsourcecreate",
    "html": "Parameters\nsourceState\n\nThe event state table to use for this event source. Pass one of the constants listed in CGEventSourceStateID.\n\nReturn Value\n\nA new event source, or NULL if the specified source state is not valid. When you no longer need the event source, you should release it using the function CFRelease.\n\nDiscussion\n\nIf two or more event sources are using the same source state and one of them is released, the remaining event sources will behave as if all keys and buttons on input devices are up in generating new events from this source.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceGetKeyboardType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408787-cgeventsourcegetkeyboardtype",
    "html": "Parameters\nsource\n\nThe event source to access. Pass one of the constants listed in CGEventSourceStateID.\n\nReturn Value\n\nThe keyboard type to be used with the specified event source.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceSetKeyboardType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408795-cgeventsourcesetkeyboardtype",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nkeyboardType\n\nThe keyboard type to be used with the specified event source.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceGetSourceStateID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408772-cgeventsourcegetsourcestateid",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nReturn Value\n\nThe source state associated with the specified event source.\n\nDiscussion\n\nThis function returns the ID of the source state table associated with an event source.\n\nFor event sources created with the kCGEventSourceStatePrivate source state, this function returns the ID of the private source state table created for the event source. This unique ID may be passed to the CGEventSourceCreate function to create a second event source sharing the same state table. This may be useful, for example, in creating separate mouse and keyboard sources which share a common private state.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceFlagsState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408792-cgeventsourceflagsstate",
    "html": "Parameters\nsourceState\n\nThe source state to access. Pass one of the constants listed in CGEventSourceStateID.\n\nReturn Value\n\nThe current flags of the specified event source. For more information, see CGEventFlags.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceSecondsSinceLastEventType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408790-cgeventsourcesecondssincelasteve",
    "html": "Parameters\nsource\n\nThe source state to access. Pass one of the constants listed in CGEventSourceStateID.\n\neventType\n\nThe event type to access. To get the elapsed time since the previous input event—keyboard, mouse, or tablet—specify kCGAnyInputEventType.\n\nReturn Value\n\nThe time in seconds since the previous input event of the specified type.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceGetUserData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408777-cgeventsourcegetuserdata",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nReturn Value\n\nThe user-specified data.\n\nDiscussion\n\nEach input event includes 64 bits of user-specified data. This function gets the user-specified data for all events created by the specified event source. This data may also be obtained per event using the CGEventGetIntegerValueField function.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceGetLocalEventsFilterDuringSuppressionState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408785-cgeventsourcegetlocaleventsfilte",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nstate\n\nThe type of event suppression interval during which the filter is applied. Pass one of the constants listed in CGEventSuppressionState.\n\nReturn Value\n\nA mask that specifies the categories of local hardware events to enable during the event suppression interval. See CGEventFilterMask.\n\nDiscussion\n\nYou can configure the system to suppress local hardware events from the keyboard or mouse during a short interval after a Quartz event is posted or during a synthetic mouse drag (mouse movement with the left or only mouse button down). For information about setting this local events filter, see CGEventSourceSetLocalEventsFilterDuringSuppressionState.\n\nThis function lets you specify an event source and a suppression state (event suppression interval or mouse drag), and returns a filter mask of event categories to be passed through during suppression.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceSetLocalEventsFilterDuringSuppressionState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408770-cgeventsourcesetlocaleventsfilte",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nfilter\n\nA mask that specifies the categories of local hardware events to enable during the event suppression interval. See CGEventFilterMask.\n\nstate\n\nThe type of event suppression interval during which the filter is applied. Pass one of the constants listed in CGEventSuppressionState.\n\nDiscussion\n\nBy default, the system does not suppress local hardware events from the keyboard or mouse during a short interval after a Quartz event is posted—see CGEventSourceSetLocalEventsSuppressionInterval—and during a synthetic mouse drag (mouse movement with the left or only mouse button down).\n\nSome applications may want to disable events from some of the local hardware during this interval. For example, if you post mouse events only, you may wish to suppress local mouse events and permit local keyboard events to pass through. This function lets you specify an event source, a suppression state (event suppression interval or mouse drag), and a filter mask of event classes to be passed through. The new local events filter takes effect with the next Quartz event you post using this event source.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceCounterForEventType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408794-cgeventsourcecounterforeventtype",
    "html": "Parameters\nsourceState\n\nThe source state to access. Pass one of the constants listed in CGEventSourceStateID.\n\neventType\n\nThe event type to access. To get the count of input events—keyboard, mouse, or tablet—specify kCGAnyInputEventType.\n\nReturn Value\n\nThe count of events of the specified type seen since the window server started.\n\nDiscussion\n\nQuartz provides these counters for applications that monitor user activity. For example, an application could prompt a typist to take a break to reduce repetitive stress injuries.\n\nModifier keys produce kCGEventFlagsChanged events, not kCGEventKeyDown events, and do so both on press and release. The volume, brightness, and CD eject keys on some keyboards (both desktop and laptop) do not generate key up or key down events.\n\nFor various reasons, the number of key up and key down events may not be the same when all keyboard keys are up. As a result, a mismatch does not necessarily indicate that some keys are down.\n\nKey autorepeat events are not counted.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceGetLocalEventsSuppressionInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408774-cgeventsourcegetlocaleventssuppr",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nDiscussion\n\nBy default, the system does not suppress local hardware events from the keyboard or mouse during a short interval after a Quartz event is posted. You can use the function CGEventSourceSetLocalEventsFilterDuringSuppressionState to modify this behavior.\n\nThis function gets the period of time in seconds that local hardware events may be suppressed after posting a Quartz event created with the specified event source. You can use the function CGEventSourceSetLocalEventsSuppressionInterval to change this time interval.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceSetUserData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408779-cgeventsourcesetuserdata",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nuserData\n\nThe user-specified data. For example, you could specify a vendor hardware ID.\n\nDiscussion\n\nEach input event includes 64 bits of user-specified data. This function sets the user-specified data for all events created by the specified event source. This data may also be set per event using the CGEventSetIntegerValueField function.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventSourceGetPixelsPerLine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408775-cgeventsourcegetpixelsperline",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nReturn Value\n\nThe scale of pixels per line in a scrolling event.\n\nDiscussion\n\nThis function returns the scale of pixels per line in the specified event source. For example, if the scale in the event source is 10.5 pixels per line, this function would return 10.5. Every scrolling event can be interpreted to be scrolling by pixel or by line. By default, the scale is about ten pixels per line. You can alter the scale with the function CGEventSourceSetPixelsPerLine.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventref",
    "html": "Overview\n\nLow-level hardware events of this type are referred to as Quartz events. A typical event in macOS originates when the user manipulates an input device such as a mouse or a keyboard. The device driver associated with that device, through the I/O Kit, creates a low-level event, puts it in the window server’s event queue, and notifies the window server. The window server creates a Quartz event, annotates the event, and dispatches the event to the appropriate run-loop port of the target process. There the event is picked up by the Carbon Event Manager and forwarded to the event-handling mechanism appropriate to the application environment. You can use event taps to gain access to Quartz events at several different steps in this process.\n\nThis opaque type is derived from CFType and inherits the properties that all Core Foundation types have in common. For more information, see CFType."
  },
  {
    "title": "CGEventSourceRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsourceref",
    "html": "Overview\n\nA Quartz event source is an object that contains accumulated state related to event generation and event posting. Every event source has an associated global event state table called a source state. When you call CGEventSourceCreate to create an event source, you specify which source state to use. For more information about source states, see CGEventSourceStateID.\n\nA typical use of an event source would be to obtain the source from a Quartz event received by an event tap callback function, and then to use that source for any new events created as a result of the received event. This has the effect of marking the events as being related.\n\nThis opaque type is derived from CFType and inherits the properties that all Core Foundation types have in common. For more information, see CFType."
  },
  {
    "title": "CGFontGetDescent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396351-cgfontgetdescent",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe descent of the font .\n\nDiscussion\n\nThe descent is the maximum distance below the baseline of glyphs in a font. The value is specified in glyph space units.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGPDFDocumentGetVersion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402604-cgpdfdocumentgetversion",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nmajorVersion\n\nOn return, contains the major version number of the document.\n\nminorVersion\n\nOn return, contains the minor version number of the document.\n\nReturn Value\n\nOn return, the values of the majorVersion and minorVersion parameters are set to the major and minor version numbers of the document respectively.\n\nSee Also\nGetting Information About Core Graphics PDF Documents\nCGPDFDocumentGetCatalog\nReturns the document catalog of a Core Graphics PDF document.\nCGPDFDocumentGetNumberOfPages\nReturns the number of pages in a PDF document.\nCGPDFDocumentGetPage\nReturns a page from a Core Graphics PDF document.\nCGPDFDocumentGetInfo\nGets the information dictionary for a PDF document.\nCGPDFDocumentGetID\nGets the file identifier for a PDF document."
  },
  {
    "title": "CGPDFDocumentGetPage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402586-cgpdfdocumentgetpage",
    "html": "Parameters\ndocument\n\nA PDF document.\n\npageNumber\n\nThe number of the page requested.\n\nReturn Value\n\nReturn the PDF page corresponding to the specified page number, or NULL if no such page exists in the document. Pages are numbered starting at 1.\n\nSee Also\nGetting Information About Core Graphics PDF Documents\nCGPDFDocumentGetCatalog\nReturns the document catalog of a Core Graphics PDF document.\nCGPDFDocumentGetNumberOfPages\nReturns the number of pages in a PDF document.\nCGPDFDocumentGetVersion\nReturns the major and minor version numbers of a Core Graphics PDF document.\nCGPDFDocumentGetInfo\nGets the information dictionary for a PDF document.\nCGPDFDocumentGetID\nGets the file identifier for a PDF document."
  },
  {
    "title": "CGColorSpaceGetColorTableCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408883-cgcolorspacegetcolortablecount",
    "html": "Parameters\nspace\n\nA color space object for an indexed color space.\n\nReturn Value\n\nThe number of entries in the color table of the space parameter if the color space is an indexed color space; otherwise, returns 0.\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCProfile\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nCGColorSpaceCopyICCData\nReturns a copy of the ICC profile data of the provided color space.\nCGColorSpaceSupportsOutput\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nCGColorSpaceGetNumberOfComponents\nReturns the number of color components in a color space.\nCGColorSpaceGetTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nCGColorSpaceGetModel\nReturns the color space model of the provided color space.\nCGColorSpaceIsWideGamutRGB\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nCGColorSpaceGetBaseColorSpace\nReturns the base color space of a pattern or indexed color space.\nCGColorSpaceGetColorTable\nCopies the entries in the color table of an indexed color space.\nCGColorSpaceCopyName\nReturns the name used to create the specified color space."
  },
  {
    "title": "CGColorSpaceCopyName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408903-cgcolorspacecopyname",
    "html": "Parameters\nspace\n\nThe color space whose name is to be returned.\n\nReturn Value\n\nThe name used to create the specified color space, or NULL if the color space was not created using the CGColorSpaceCreateWithName function.\n\nSee Also\nGetting Information About Color Spaces\nCGColorSpaceCopyICCProfile\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nCGColorSpaceCopyICCData\nReturns a copy of the ICC profile data of the provided color space.\nCGColorSpaceSupportsOutput\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nCGColorSpaceGetNumberOfComponents\nReturns the number of color components in a color space.\nCGColorSpaceGetTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nCGColorSpaceGetModel\nReturns the color space model of the provided color space.\nCGColorSpaceIsWideGamutRGB\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nCGColorSpaceGetBaseColorSpace\nReturns the base color space of a pattern or indexed color space.\nCGColorSpaceGetColorTableCount\nReturns the number of entries in the color table of an indexed color space.\nCGColorSpaceGetColorTable\nCopies the entries in the color table of an indexed color space.\nRelated Documentation\nCGColorSpaceCreateWithName\nCreates a specified type of Quartz color space."
  },
  {
    "title": "CGDisplayModeGetIOFlags | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454092-cgdisplaymodegetioflags",
    "html": "Parameters\nmode\n\nA display mode for which to find the associated flags.\n\nReturn Value\n\nThe I/O Kit flags of the specified display mode. For more information, see the header file IOKit/IOGraphicsTypes.h.\n\nSee Also\nGetting Information About a Display Mode\nCGDisplayModeGetWidth\nReturns the width of the specified display mode.\nCGDisplayModeGetHeight\nReturns the height of the specified display mode.\nCGDisplayModeCopyPixelEncoding\nReturns the pixel encoding of the specified display mode.\nDeprecated\nCGDisplayModeGetRefreshRate\nReturns the refresh rate of the specified display mode.\nCGDisplayModeGetIODisplayModeID\nReturns the I/O Kit display mode ID of the specified display mode.\nCGDisplayModeIsUsableForDesktopGUI\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nCGDisplayModeGetTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "CGDisplayModeGetRefreshRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454661-cgdisplaymodegetrefreshrate",
    "html": "Parameters\nmode\n\nA display mode for which to find the associated refresh rate.\n\nReturn Value\n\nThe refresh rate, in hertz, of the specified display mode for a CRT display. Some displays may not use conventional video vertical and horizontal sweep in painting the screen; for these displays, the return value is 0.\n\nSee Also\nGetting Information About a Display Mode\nCGDisplayModeGetWidth\nReturns the width of the specified display mode.\nCGDisplayModeGetHeight\nReturns the height of the specified display mode.\nCGDisplayModeCopyPixelEncoding\nReturns the pixel encoding of the specified display mode.\nDeprecated\nCGDisplayModeGetIOFlags\nReturns the I/O Kit flags of the specified display mode.\nCGDisplayModeGetIODisplayModeID\nReturns the I/O Kit display mode ID of the specified display mode.\nCGDisplayModeIsUsableForDesktopGUI\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nCGDisplayModeGetTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "CGDisplayModeIsUsableForDesktopGUI | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454928-cgdisplaymodeisusablefordesktopg",
    "html": "Parameters\nmode\n\nA display mode to be checked for usability.\n\nReturn Value\n\nIf true, the specified display mode is usable for a desktop graphical user interface; otherwise, false.\n\nDiscussion\n\nThis function’s criteria include factors such as sufficient width and height and adequate pixel depth.\n\nSee Also\nGetting Information About a Display Mode\nCGDisplayModeGetWidth\nReturns the width of the specified display mode.\nCGDisplayModeGetHeight\nReturns the height of the specified display mode.\nCGDisplayModeCopyPixelEncoding\nReturns the pixel encoding of the specified display mode.\nDeprecated\nCGDisplayModeGetRefreshRate\nReturns the refresh rate of the specified display mode.\nCGDisplayModeGetIOFlags\nReturns the I/O Kit flags of the specified display mode.\nCGDisplayModeGetIODisplayModeID\nReturns the I/O Kit display mode ID of the specified display mode.\nCGDisplayModeGetTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "CGDisplayModeGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456191-cgdisplaymodegettypeid",
    "html": "Return Value\n\nThe type identifier of the CGDisplayMode opaque type.\n\nSee Also\nGetting Information About a Display Mode\nCGDisplayModeGetWidth\nReturns the width of the specified display mode.\nCGDisplayModeGetHeight\nReturns the height of the specified display mode.\nCGDisplayModeCopyPixelEncoding\nReturns the pixel encoding of the specified display mode.\nDeprecated\nCGDisplayModeGetRefreshRate\nReturns the refresh rate of the specified display mode.\nCGDisplayModeGetIOFlags\nReturns the I/O Kit flags of the specified display mode.\nCGDisplayModeGetIODisplayModeID\nReturns the I/O Kit display mode ID of the specified display mode.\nCGDisplayModeIsUsableForDesktopGUI\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface."
  },
  {
    "title": "CGDisplayModeCopyPixelEncoding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455067-cgdisplaymodecopypixelencoding",
    "html": "Parameters\nmode\n\nA display mode for which to find the associated pixel encoding.\n\nReturn Value\n\nA string representing the pixel encoding of the specified display mode. This string is expressed as a CFString type containing an I/O Kit graphics mode. The caller is responsible for releasing the string.\n\nDiscussion\n\nThe returned string can be used to determine various aspects of the pixel encoding, such as bits per pixel and bits per sample. For more information, see the header file IOKit/IOGraphicsTypes.h in IOKit.\n\nSee Also\nGetting Information About a Display Mode\nCGDisplayModeGetWidth\nReturns the width of the specified display mode.\nCGDisplayModeGetHeight\nReturns the height of the specified display mode.\nCGDisplayModeGetRefreshRate\nReturns the refresh rate of the specified display mode.\nCGDisplayModeGetIOFlags\nReturns the I/O Kit flags of the specified display mode.\nCGDisplayModeGetIODisplayModeID\nReturns the I/O Kit display mode ID of the specified display mode.\nCGDisplayModeIsUsableForDesktopGUI\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nCGDisplayModeGetTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "CGDisplayModeGetIODisplayModeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454728-cgdisplaymodegetiodisplaymodeid",
    "html": "Parameters\nmode\n\nA display mode for which to find the associated display mode ID.\n\nReturn Value\n\nThe I/O Kit display mode ID of the specified display mode.\n\nSee Also\nGetting Information About a Display Mode\nCGDisplayModeGetWidth\nReturns the width of the specified display mode.\nCGDisplayModeGetHeight\nReturns the height of the specified display mode.\nCGDisplayModeCopyPixelEncoding\nReturns the pixel encoding of the specified display mode.\nDeprecated\nCGDisplayModeGetRefreshRate\nReturns the refresh rate of the specified display mode.\nCGDisplayModeGetIOFlags\nReturns the I/O Kit flags of the specified display mode.\nCGDisplayModeIsUsableForDesktopGUI\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nCGDisplayModeGetTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "Event Type Mask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_event_services/event_type_mask",
    "html": "Overview\n\nThis constant is typically used with the functions CGEventTapCreate and CGEventTapCreateForPSN to register an event tap that observes all input events.\n\nTopics\nConstants\nkCGEventMaskForAllEvents"
  },
  {
    "title": "Event Source Token | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_event_services/event_source_token",
    "html": "Overview\n\nThis constant is typically used with the function CGEventSourceSecondsSinceLastEventType to specify that you want the elapsed time since the last input event of any type.\n\nTopics\nConstants\nkCGAnyInputEventType"
  },
  {
    "title": "Window Backing Encoding Type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services/window_backing_encoding_type",
    "html": "Topics\nConstants\nkCGWindowBackingCFNumberType"
  },
  {
    "title": "CGEventCreateKeyboardEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456564-cgeventcreatekeyboardevent",
    "html": "Parameters\nsource\n\nAn event source taken from another event, or NULL.\n\nvirtualKey\n\nThe virtual key code for the event.\n\nkeyDown\n\nPass true to specify that the key position is down. To specify that the key position is up, pass false. This value is used to determine the type of the keyboard event—see CGEventType.\n\nReturn Value\n\nA new keyboard event, or NULL if the event could not be created. When you no longer need the event, you should release it using the function CFRelease.\n\nDiscussion\n\nAll keystrokes needed to generate a character must be entered, including modifier keys. For example, to produce a 'Z', the SHIFT key must be down, the 'z' key must go down, and then the SHIFT and 'z' key must be released:\n\nCGEventRef event1, event2, event3, event4;\nevent1 = CGEventCreateKeyboardEvent (NULL, (CGKeyCode)56, true);\nevent2 = CGEventCreateKeyboardEvent (NULL, (CGKeyCode)6, true);\nevent3 = CGEventCreateKeyboardEvent (NULL, (CGKeyCode)6, false);\nevent4 = CGEventCreateKeyboardEvent (NULL, (CGKeyCode)56, false);\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGPDFDocumentGetArtBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402601-cgpdfdocumentgetartbox",
    "html": "Parameters\ndocument\n\nThe PDF document to examine.\n\npage\n\nAn integer that specifies the number of the page to examine.\n\nReturn Value\n\nA rectangle that represents the art box for the specified page, expressed in default PDF user space units (points).\n\nDiscussion\n\nThe replacement function for this one is CGPDFPageGetBoxRect, which gets the rectangle associated with a type of box (art, media, crop, bleed trim) that represents a content region or page dimensions of a PDF page. For more information see CGPDFPage.\n\nThe art box defines the extent of the page’s meaningful content (including potential white space) as intended by the document creator. The default value is the page’s crop box.\n\nSee Also\nGetting Page Information\nCGPDFDocumentGetBleedBox\nReturns the bleed box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetCropBox\nReturns the crop box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetMediaBox\nReturns the media box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetRotationAngle\nReturns the rotation angle of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetTrimBox\nReturns the trim box of a page in a PDF document.\nDeprecated"
  },
  {
    "title": "CGPDFDocumentGetTrimBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402590-cgpdfdocumentgettrimbox",
    "html": "Parameters\ndocument\n\nThe PDF document to examine.\n\npage\n\nA value specifying the number of the page to examine.\n\nReturn Value\n\nReturns a rectangle that represents the trim box for the specified page, expressed in default PDF user space units (points).\n\nDiscussion\n\nThe replacement function for this one is CGPDFPageGetBoxRect, which gets the rectangle associated with a type of box (art, media, crop, bleed trim) that represents a content region or page dimensions of a PDF page. For more information see CGPDFPage.\n\nThe trim box defines the intended dimensions of the finished page after trimming. It may be smaller than the media box, to allow for production-related content such as printing instructions, cut marks, or color bars. The default value is the page’s crop box.\n\nSee Also\nGetting Page Information\nCGPDFDocumentGetArtBox\nReturns the art box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetBleedBox\nReturns the bleed box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetCropBox\nReturns the crop box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetMediaBox\nReturns the media box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetRotationAngle\nReturns the rotation angle of a page in a PDF document.\nDeprecated"
  },
  {
    "title": "CGColorCreateCopyByMatchingToColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455493-cgcolorcreatecopybymatchingtocol",
    "html": "Parameters\nCGColorSpaceRef\n\nThe destination color space.\n\nintent\n\nThe mechanism to use to match the color when the color is outside the gamut of the new color space.\n\ncolor\n\nThe color to convert.\n\noptions\n\nA dictionary of options used to convert the color. Currently, you should pass NULL.\n\nReturn Value\n\nA new color in the destination color space that matches (or closely approximates) the source color.\n\nDiscussion\n\nTo create the new color, this method creates a CFColorConverterRef using the options you specified and applies it to the source color.\n\nSee Also\nCreating Color Objects\nCGColorCreate\nCreates a color using a list of intensity values (including alpha) and an associated color space.\nCGColorCreateCopy\nCreates a copy of an existing color.\nCGColorCreateGenericGray\nCreates a color in the Generic gray color space.\nCGColorCreateGenericRGB\nCreates a color in the Generic RGB color space.\nCGColorCreateSRGB\nCreates a color in the sRGB color space.\nCGColorCreateGenericCMYK\nCreates a color in the Generic CMYK color space.\nCGColorCreateCopyWithAlpha\nCreates a copy of an existing color, substituting a new alpha value.\nCGColorCreateWithPattern\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern."
  },
  {
    "title": "CGFontGetFontBBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396353-cgfontgetfontbbox",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe bounding box of the font.\n\nDiscussion\n\nThe font bounding box is the union of all of the bounding boxes for all the glyphs in a font. The value is specified in glyph space units.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGDataProviderSkipBytesCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataproviderskipbytescallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to CGDataProviderCreate.\n\ncount\n\nThe number of bytes to skip.\n\nOverview\n\nWhen Core Graphcs needs to advance forward in the provider’s data stream, your function is called.\n\nFor information on how to associate your callback function with a data provider, see CGDataProviderCreate and CGDataProviderCallbacks.\n\nSee Also\nCallbacks\nCGDataProviderGetBytesCallback\nA callback function that copies from a provider data stream into a Core Graphics buffer.\nCGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\nCGDataProviderRewindCallback\nA callback function that moves the current position in the data stream back to the beginning.\nCGDataProviderSkipForwardCallback\nA callback function that advances the current position in the data stream supplied by the provider.\nCGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\nCGDataProviderGetBytesAtOffsetCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\nCGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\nCGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function CGDataProviderCreateWithData.\nCGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer."
  },
  {
    "title": "releaseProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataprovidercallbacks/1805277-releaseprovider",
    "html": "See Also\nFields\ngetBytes\nA pointer to a function that copies data from the provider. For more information, see CGDataProviderGetBytesCallback.\nskipBytes\nA pointer to a function that Core Graphics calls to advance the stream of data supplied by the provider. For more information, see CGDataProviderSkipBytesCallback.\nrewind\nA pointer to a function Core Graphics calls to return the provider to the beginning of the data stream. For more information, see CGDataProviderRewindCallback."
  },
  {
    "title": "getBytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataproviderdirectaccesscallbacks/1805287-getbytes",
    "html": "See Also\nFields\ngetBytePointer\nA pointer to a function that returns a pointer to the provider’s data. For more information, see CGDataProviderGetBytePointerCallback.\nreleaseBytePointer\nA pointer to a function that Core Graphics calls to release a pointer to the provider’s data. For more information, see CGDataProviderReleaseBytePointerCallback.\nreleaseProvider\nA pointer to a function that handles clean-up for the data provider, or NULL. For more information, see CGDataProviderReleaseInfoCallback."
  },
  {
    "title": "rewind | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataprovidercallbacks/1805275-rewind",
    "html": "See Also\nFields\ngetBytes\nA pointer to a function that copies data from the provider. For more information, see CGDataProviderGetBytesCallback.\nskipBytes\nA pointer to a function that Core Graphics calls to advance the stream of data supplied by the provider. For more information, see CGDataProviderSkipBytesCallback.\nreleaseProvider\nA pointer to a function that handles clean-up for the data provider, or NULL. For more information, see CGDataProviderReleaseInfoCallback."
  },
  {
    "title": "getBytePointer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataproviderdirectaccesscallbacks/1805282-getbytepointer",
    "html": "See Also\nFields\nreleaseBytePointer\nA pointer to a function that Core Graphics calls to release a pointer to the provider’s data. For more information, see CGDataProviderReleaseBytePointerCallback.\ngetBytes\nA pointer to a function that copies data from the provider. For more information, see CGDataProviderGetBytesAtOffsetCallback.\nreleaseProvider\nA pointer to a function that handles clean-up for the data provider, or NULL. For more information, see CGDataProviderReleaseInfoCallback."
  },
  {
    "title": "releaseBytePointer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataproviderdirectaccesscallbacks/1805285-releasebytepointer",
    "html": "See Also\nFields\ngetBytePointer\nA pointer to a function that returns a pointer to the provider’s data. For more information, see CGDataProviderGetBytePointerCallback.\ngetBytes\nA pointer to a function that copies data from the provider. For more information, see CGDataProviderGetBytesAtOffsetCallback.\nreleaseProvider\nA pointer to a function that handles clean-up for the data provider, or NULL. For more information, see CGDataProviderReleaseInfoCallback."
  },
  {
    "title": "CGShadingGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454302-cgshadinggettypeid",
    "html": "Return Value\n\nThe Core Foundation identifier for the type CGShadingRef."
  },
  {
    "title": "CGDataProviderCreateWithCFData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408284-cgdataprovidercreatewithcfdata",
    "html": "Parameters\ndata\n\nThe CFData object to read from.\n\nReturn Value\n\nA new data provider. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou can use this function when you need to represent Core Graphics data as a CFData type. For example, you might create a CFData object when reading data from the pasteboard.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGAffineTransform | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corefoundation/cgaffinetransform",
    "html": "Overview\n\nAn affine transformation matrix is used to rotate, scale, translate, or skew the objects you draw in a graphics context. The CGAffineTransform type provides functions for creating, concatenating, and applying affine transformations.\n\nAffine transforms are represented by a 3 by 3 matrix:\n\nBecause the third column is always (0,0,1), the CGAffineTransform data structure contains values for only the first two columns.\n\nConceptually, an affine transform multiplies a row vector representing each point (x,y) in your drawing by this matrix, producing a vector that represents the corresponding point (x’,y’):\n\nGiven the 3 by 3 matrix, the following equations are used to transform a point (x, y) in one coordinate system into a resultant point (x’,y’) in another coordinate system.\n\nThe matrix thereby “links” two coordinate systems—it specifies how points in one coordinate system map to points in another.\n\nNote that you do not typically need to create affine transforms directly. If you want only to draw an object that is scaled or rotated, for example, it is not necessary to construct an affine transform to do so. The most direct way to manipulate your drawing—whether by movement, scaling, or rotation—is to call the functions translateBy(x:y:), scaleBy(x:y:), or rotate(by:), respectively. You should generally only create an affine transform if you want to reuse it later.\n\nTopics\nInitializers\ninit(rotationAngle: CGFloat)\nReturns an affine transformation matrix constructed from a rotation value you provide.\ninit(scaleX: CGFloat, y: CGFloat)\nReturns an affine transformation matrix constructed from scaling values you provide.\ninit(translationX: CGFloat, y: CGFloat)\nReturns an affine transformation matrix constructed from translation values you provide.\ninit()\ninit(a: Double, b: Double, c: Double, d: Double, tx: Double, ty: Double)\ninit(a: Float, b: Float, c: Float, d: Float, tx: Float, ty: Float)\nInstance Properties\nvar isIdentity: Bool\nChecks whether an affine transform is the identity transform.\nvar a: Double\nThe entry at position [1,1] in the matrix.\nvar b: Double\nThe entry at position [1,2] in the matrix.\nvar c: Double\nThe entry at position [2,1] in the matrix.\nvar d: Double\nThe entry at position [2,2] in the matrix.\nvar tx: Double\nThe entry at position [3,1] in the matrix.\nvar ty: Double\nThe entry at position [3,2] in the matrix.\nType Properties\nstatic var identity: CGAffineTransform\nThe identity transform.\nInstance Methods\nfunc concatenating(CGAffineTransform) -> CGAffineTransform\nReturns an affine transformation matrix constructed by combining two existing affine transforms.\nfunc CGAffineTransformEqualToTransform(CGAffineTransform, CGAffineTransform) -> Bool\nChecks whether two affine transforms are equal.\nfunc inverted() -> CGAffineTransform\nReturns an affine transformation matrix constructed by inverting an existing affine transform.\nfunc rotated(by: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by rotating an existing affine transform.\nfunc scaledBy(x: CGFloat, y: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by scaling an existing affine transform.\nfunc translatedBy(x: CGFloat, y: CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed by translating an existing affine transform.\nRelationships\nConforms To\nDecodable\nEncodable\nEquatable\nSee Also\nGeometric Data Types\nstruct CGFloat\nThe basic type for floating-point scalar values in Core Graphics and related frameworks.\nstruct CGPoint\nA structure that contains a point in a two-dimensional coordinate system.\nstruct CGSize\nA structure that contains width and height values.\nstruct CGRect\nA structure that contains the location and dimensions of a rectangle.\nstruct CGVector\nA structure that contains a two-dimensional vector."
  },
  {
    "title": "CGShadingRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1573767-cgshadingretain",
    "html": "Parameters\nshading\n\nThe shading object to retain.\n\nReturn Value\n\nThe same shading object you passed in as the shading parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the shading parameter is NULL.\n\nSee Also\nRetaining and Releasing Shading Objects\nCGShadingRelease\nDecrements the retain count of a shading object."
  },
  {
    "title": "CGShadingCreateAxial | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455224-cgshadingcreateaxial",
    "html": "Parameters\ncolorspace\n\nThe color space in which color values are expressed. Core Graphics retains this object; upon return, you may safely release it.\n\nstart\n\nThe starting point of the axis, in the shading's target coordinate space.\n\nend\n\nThe ending point of the axis, in the shading's target coordinate space.\n\nfunction\n\nA CGFunction object created by the function CGFunctionCreate. This object refers to your function for creating an axial shading. Core Graphics retains this object; upon return, you may safely release it.\n\nextendStart\n\nA Boolean value that specifies whether to extend the shading beyond the starting point of the axis.\n\nextendEnd\n\nA Boolean value that specifies whether to extend the shading beyond the ending point of the axis.\n\nReturn Value\n\nA new Core Graphics axial shading. You are responsible for releasing this object using CGShadingRelease.\n\nDiscussion\n\nAn axial shading is a color blend that varies along a linear axis between two endpoints and extends indefinitely perpendicular to that axis. When you are ready to draw the shading, call the function CGContextDrawShading.\n\nSee Also\nCreating Shading Objects\nCGShadingCreateRadial\nCreates a shading object to use for radial shading."
  },
  {
    "title": "CGDataProviderCreateWithData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408288-cgdataprovidercreatewithdata",
    "html": "Parameters\ninfo\n\nA pointer to data of any type, or NULL. When Core Graphics calls the function specified in the releaseData parameter, it sends this pointer as its first argument.\n\ndata\n\nA pointer to the array of data that the provider contains.\n\nsize\n\nA value that specifies the number of bytes that the data provider contains.\n\nreleaseData\n\nA pointer to a release callback for the data provider, or NULL. Your release function is called when Core Graphics frees the data provider. For more information, see CGDataProviderReleaseDataCallback.\n\nReturn Value\n\nA new data provider. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou use this function to create a direct-access data provider that uses callback functions to read data from your program an entire block at one time.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGDataProviderCreateWithFilename | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408294-cgdataprovidercreatewithfilename",
    "html": "Parameters\nfilename\n\nThe full or relative pathname to use for the data provider. When you supply Core Graphics data via the provider, it reads the data from the specified file.\n\nReturn Value\n\nA new data provider or NULL if the file could not be opened. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou use this function to create a direct-access data provider that supplies data from a file. When you supply Core Graphics with a direct-access data provider, Core Graphics obtains data from your program in a single block.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGDataProviderCreateWithURL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408327-cgdataprovidercreatewithurl",
    "html": "Parameters\nurl\n\nA CFURL object for the URL that you want to read the data from.\n\nReturn Value\n\nA new data provider or NULL if the data from the URL could not be accessed. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou use this function to create a direct-access data provider that supplies data from a URL. When you supply Core Graphics with a direct-access data provider, Core Graphics obtains data from your program in a single entire block.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGEventGetIntegerValueField | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455885-cgeventgetintegervaluefield",
    "html": "Parameters\nevent\n\nThe event to access.\n\nfield\n\nA field in the specified event. Pass one of the constants listed in CGEventField.\n\nReturn Value\n\nA 64-bit integer representation of the current value of the specified field.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventSetIntegerValueField | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455556-cgeventsetintegervaluefield",
    "html": "Parameters\nevent\n\nThe event to access.\n\nfield\n\nA field in the specified event. Pass one of the constants listed in CGEventField.\n\nvalue\n\nThe new value of the specified field.\n\nDiscussion\n\nBefore calling this function, the event type must be set using a typed event creation function such as CGEventCreateMouseEvent, or by calling CGEventSetType.\n\nIf you are creating a mouse event generated by a tablet, call this function and specify the field kCGMouseEventSubtype with a value of kCGEventMouseSubtypeTabletPoint or kCGEventMouseSubtypeTabletProximity before setting other parameters.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGDisplayCreateImageForRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454595-cgdisplaycreateimageforrect",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nrect\n\nThe rectangle, specified in display space, for the portion of the display being copied into the image.\n\nReturn Value\n\nAn image containing the contents of the specified rectangle. If the display ID is invalid, the return value is NULL. The caller is responsible for releasing the image created by calling CGImageRelease.\n\nDiscussion\n\nThe actual rectangle used is the rectangle returned by CGRectIntegral with rect as a parameter.\n\nSee Also\nCreating Images from the Display\nCGDisplayCreateImage\nReturns an image containing the contents of the specified display."
  },
  {
    "title": "CGEventKeyboardSetUnicodeString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456028-cgeventkeyboardsetunicodestring",
    "html": "Parameters\nevent\n\nThe keyboard event to access.\n\nstringLength\n\nThe length of the array you provide in the unicodeString parameter.\n\nunicodeString\n\nAn array that contains the new Unicode string associated with the specified event.\n\nDiscussion\n\nBy default, the system translates the virtual key code in a keyboard event into a Unicode string based on the keyboard ID in the event source. This function allows you to manually override this string. Note that application frameworks may ignore the Unicode string in a keyboard event and do their own translation based on the virtual keycode and perceived event state.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventKeyboardGetUnicodeString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456120-cgeventkeyboardgetunicodestring",
    "html": "Parameters\nevent\n\nThe keyboard event to access.\n\nmaxStringLength\n\nThe length of the array you provide in the unicodeString parameter.\n\nactualStringLength\n\nA pointer to a UniCharCount variable. On return, the variable contains the actual count of Unicode characters in the event data.\n\nunicodeString\n\nA pointer to a UniChar array. You are responsible for allocating storage for the array. On return, your array contains the Unicode string associated with the specified event.\n\nDiscussion\n\nWhen you call this function and specify a NULL string or a maximum string length of 0, the function still returns the actual count of Unicode characters in the event data.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGColorSpaceRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspaceref",
    "html": "See Also\nColors and Fonts\nCGColorRef\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfoRef\nAn object that describes how to convert between color spaces for use by other system services.\nCGFontRef\nA set of character glyphs and layout information for drawing text.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGEventSourceGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408789-cgeventsourcegettypeid",
    "html": "Return Value\n\nThe Core Foundation type identifier for the opaque type CGEventSourceRef.\n\nSee Also\nWorking With Event Sources\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGEventTapPostEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455172-cgeventtappostevent",
    "html": "Parameters\nproxy\n\nA proxy that identifies the event tap posting the event. Your event tap callback function is passed this proxy when it is invoked.\n\nevent\n\nThe event to post.\n\nDiscussion\n\nYou can use this function to post a new event at the same point to which an event returned from an event tap callback function would be posted. The new event enters the system before the event returned by the callback enters the system. Events posted into the system will be seen by all taps placed after the tap posting the event.\n\nSee Also\nWorking With Event Taps\nCGEventTapCreate\nCreates an event tap.\nCGEventTapCreateForPSN\nCreates an event tap for a specified process.\nCGEventTapEnable\nEnables or disables an event tap.\nCGEventTapIsEnabled\nReturns a Boolean value indicating whether an event tap is enabled.\nCGEventPost\nPosts a Quartz event into the event stream at a specified location.\nCGEventPostToPSN\nPosts a Quartz event into the event stream for a specific application.\nCGGetEventTapList\nGets a list of currently installed event taps.\nCGEventMaskBit\nGenerates an event mask for a single type of event."
  },
  {
    "title": "CGEventTapCreateForPSN | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454828-cgeventtapcreateforpsn",
    "html": "Parameters\nprocessSerialNumber\n\nThe process to monitor.\n\nplace\n\nThe placement of the new event tap in the list of active event taps. Pass one of the constants listed in CGEventTapPlacement.\n\noptions\n\nA constant that specifies whether the new event tap is a passive listener or an active filter.\n\neventsOfInterest\n\nA bit mask that specifies the set of events to be observed. For a list of possible events, see CGEventType. For information on how to specify the mask, see CGEventMask. If the event tap is not permitted to monitor one or more of the events specified in the eventsOfInterest parameter, then the appropriate bits in the mask are cleared. If that action results in an empty mask, this function returns NULL.\n\ncallback\n\nAn event tap callback function that you provide. Your callback function is invoked from the run loop to which the event tap is added as a source. The thread safety of the callback is defined by the run loop’s environment. To learn more about event tap callbacks, see CGEventTapCallBack.\n\nrefcon\n\nA pointer to user-defined data. This pointer is passed into the callback function specified in the callback parameter.\n\nReturn Value\n\nA Core Foundation mach port that represents the new event tap, or NULL if the event tap could not be created. When you are finished using the event tap, you should release the mach port using the function CFRelease. Releasing the mach port also releases the tap.\n\nDiscussion\n\nThis function creates an event tap that receives events being routed by the window server to the specified process. For more information about creating event taps, see CGEventTapCreate.\n\nSee Also\nWorking With Event Taps\nCGEventTapCreate\nCreates an event tap.\nCGEventTapEnable\nEnables or disables an event tap.\nCGEventTapIsEnabled\nReturns a Boolean value indicating whether an event tap is enabled.\nCGEventTapPostEvent\nPosts a Quartz event from an event tap into the event stream.\nCGEventPost\nPosts a Quartz event into the event stream at a specified location.\nCGEventPostToPSN\nPosts a Quartz event into the event stream for a specific application.\nCGGetEventTapList\nGets a list of currently installed event taps.\nCGEventMaskBit\nGenerates an event mask for a single type of event."
  },
  {
    "title": "CGEventPost | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456527-cgeventpost",
    "html": "Parameters\ntap\n\nThe location at which to post the event. Pass one of the constants listed in CGEventTapLocation.\n\nevent\n\nThe event to post.\n\nDiscussion\n\nThis function posts the specified event immediately before any event taps instantiated for that location, and the event passes through any such taps.\n\nSee Also\nWorking With Event Taps\nCGEventTapCreate\nCreates an event tap.\nCGEventTapCreateForPSN\nCreates an event tap for a specified process.\nCGEventTapEnable\nEnables or disables an event tap.\nCGEventTapIsEnabled\nReturns a Boolean value indicating whether an event tap is enabled.\nCGEventTapPostEvent\nPosts a Quartz event from an event tap into the event stream.\nCGEventPostToPSN\nPosts a Quartz event into the event stream for a specific application.\nCGGetEventTapList\nGets a list of currently installed event taps.\nCGEventMaskBit\nGenerates an event mask for a single type of event."
  },
  {
    "title": "CGEventTapIsEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456102-cgeventtapisenabled",
    "html": "Parameters\nmyTap\n\nThe event tap to test.\n\nReturn Value\n\nIf YES, the specified event tap is enabled; otherwise, NO.\n\nDiscussion\n\nFor more information, see the function CGEventTapEnable.\n\nSee Also\nWorking With Event Taps\nCGEventTapCreate\nCreates an event tap.\nCGEventTapCreateForPSN\nCreates an event tap for a specified process.\nCGEventTapEnable\nEnables or disables an event tap.\nCGEventTapPostEvent\nPosts a Quartz event from an event tap into the event stream.\nCGEventPost\nPosts a Quartz event into the event stream at a specified location.\nCGEventPostToPSN\nPosts a Quartz event into the event stream for a specific application.\nCGGetEventTapList\nGets a list of currently installed event taps.\nCGEventMaskBit\nGenerates an event mask for a single type of event."
  },
  {
    "title": "CGEventMaskBit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventmaskbit",
    "html": "Parameters\neventType\n\nAn event type constant. Pass one of the constants listed in CGEventType.\n\nReturn Value\n\nAn event mask that represents the specified event.\n\nDiscussion\n\nThis macro converts an event type constant into a mask. You can use this mask to specify that an event tap should observe the event. For more information, see CGEventMask.\n\nSee Also\nWorking With Event Taps\nCGEventTapCreate\nCreates an event tap.\nCGEventTapCreateForPSN\nCreates an event tap for a specified process.\nCGEventTapEnable\nEnables or disables an event tap.\nCGEventTapIsEnabled\nReturns a Boolean value indicating whether an event tap is enabled.\nCGEventTapPostEvent\nPosts a Quartz event from an event tap into the event stream.\nCGEventPost\nPosts a Quartz event into the event stream at a specified location.\nCGEventPostToPSN\nPosts a Quartz event into the event stream for a specific application.\nCGGetEventTapList\nGets a list of currently installed event taps."
  },
  {
    "title": "CGDirectDisplayCopyCurrentMetalDevice(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1493900-cgdirectdisplaycopycurrentmetald",
    "html": "Parameters\ndisplay\n\nA unique identifier for a display.\n\nReturn Value\n\nA device that supports Metal framework commands.\n\nDiscussion\n\nNote\n\nThis function can change its return value at any time for the built-in display when the system has automatic graphics switching enabled.\n\nSee Also\nLocating GPUs\nFinding Multiple GPUs on an Intel-based Mac\nLocate, identify, and choose suitable GPUs for your app.\nGetting the GPU that Drives a View’s Display\nKeep up to date with the optimal device for your display.\nfunc MTLCopyAllDevices() -> [MTLDevice]\nReturns an array of all the Metal device instances in the system.\nfunc MTLCopyAllDevicesWithObserver(handler: MTLDeviceNotificationHandler) -> (devices: [MTLDevice], observer: NSObject)\nReturns an array of all the Metal GPU devices in the system and registers a notification handler that Metal calls when the device list changes.\nfunc MTLRemoveDeviceObserver(NSObjectProtocol)\nRemoves a registered observer of device notifications.\ntypealias MTLDeviceNotificationHandler\nA closure that Metal calls when the system adds or removes a GPU device.\nstruct MTLDeviceNotificationName\nA notification that represents a change to a GPU device in the system."
  },
  {
    "title": "CGColorConversionInfoRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorconversioninforef",
    "html": "Overview\n\nA CGColorConversionInfoRef object specifies a conversion between two or more color spaces, including information about the intent of the conversion. You use color conversion objects to specify the work to be done by an MPSImageConversion filter, which can then perform GPU-accelerated image conversion.\n\nSee Also\nColors and Fonts\nCGColorRef\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorSpaceRef\nA profile that specifies how to interpret a color value for display.\nCGFontRef\nA set of character glyphs and layout information for drawing text."
  },
  {
    "title": "CGPDFDocumentCreateWithURL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402585-cgpdfdocumentcreatewithurl",
    "html": "Parameters\nurl\n\nThe URL address at which the PDF document data is located.\n\nReturn Value\n\nA new Core Graphics PDF document, or NULL if a document could not be created. You are responsible for releasing the object using CGPDFDocumentRelease.\n\nDiscussion\n\nDistributing individual pages of a PDF document to separate threads is not supported. If you want to use threads, consider creating a separate document for each thread and operating on a block of pages per thread.\n\nSee Also\nCreating PDF Document Objects\nCGPDFDocumentCreateWithProvider\nCreates a Core Graphics PDF document using a data provider.\nRelated Documentation\nCGContextDrawPDFDocument"
  },
  {
    "title": "CGPDFDocumentRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402587-cgpdfdocumentretain",
    "html": "Parameters\ndocument\n\nThe PDF document to retain.\n\nReturn Value\n\nThe same document you passed in as the document parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the document parameter is NULL.\n\nSee Also\nRetaining and Releasing PDF Documents\nCGPDFDocumentRelease\nDecrements the retain count of a PDF document."
  },
  {
    "title": "CGPDFDocumentGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402597-cgpdfdocumentgettypeid",
    "html": "Return Value\n\nThe identifier for the type CGPDFDocumentRef."
  },
  {
    "title": "CGFontRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfontref",
    "html": "Overview\n\nA glyph can represent a single character (such as ‘b’), more than one character (such as the “ﬁ” ligature), or a special character such as a space. Core Graphics retrieves the glyphs for the font from ATS (Apple Type Services) and paints the glyphs based on the relevant parameters of the current graphics state.\n\nCore Graphics provides a limited, low-level interface for drawing text. For information on text-drawing functions, see CGContext. For full Unicode and text-layout support, use the services provided by TextKit).\n\nSee Also\nColors and Fonts\nCGColorRef\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfoRef\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpaceRef\nA profile that specifies how to interpret a color value for display."
  },
  {
    "title": "CGPDFDocumentGetCatalog | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402606-cgpdfdocumentgetcatalog",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nReturn Value\n\nThe document catalog of the specified document.\n\nDiscussion\n\nThe entries in a PDF document catalog recursively describe the contents of the PDF document. You can access the contents of a PDF document catalog by calling the function CGPDFDocumentGetCatalog. For information on accessing PDF metadata, see Quartz 2D Programming Guide.\n\nSee Also\nGetting Information About Core Graphics PDF Documents\nCGPDFDocumentGetNumberOfPages\nReturns the number of pages in a PDF document.\nCGPDFDocumentGetPage\nReturns a page from a Core Graphics PDF document.\nCGPDFDocumentGetVersion\nReturns the major and minor version numbers of a Core Graphics PDF document.\nCGPDFDocumentGetInfo\nGets the information dictionary for a PDF document.\nCGPDFDocumentGetID\nGets the file identifier for a PDF document."
  },
  {
    "title": "CGPDFDocumentGetNumberOfPages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402595-cgpdfdocumentgetnumberofpages",
    "html": "Parameters\ndocument\n\nThe PDF document to examine.\n\nReturn Value\n\nThe total number of pages in the PDF document.\n\nSee Also\nGetting Information About Core Graphics PDF Documents\nCGPDFDocumentGetCatalog\nReturns the document catalog of a Core Graphics PDF document.\nCGPDFDocumentGetPage\nReturns a page from a Core Graphics PDF document.\nCGPDFDocumentGetVersion\nReturns the major and minor version numbers of a Core Graphics PDF document.\nCGPDFDocumentGetInfo\nGets the information dictionary for a PDF document.\nCGPDFDocumentGetID\nGets the file identifier for a PDF document."
  },
  {
    "title": "CGFontGetAscent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396359-cgfontgetascent",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe ascent of the font.\n\nDiscussion\n\nThe ascent is the maximum distance above the baseline of glyphs in a font. The value is specified in glyph space units.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGLayerGetSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1450890-cglayergetsize",
    "html": "Parameters\nlayer\n\nThe layer whose width and height you want to obtain.\n\nReturn Value\n\nThe width and height of the layer, in default user space coordinates.\n\nSee Also\nGetting Layer Information\nCGLayerGetContext\nReturns the graphics context associated with a layer object."
  },
  {
    "title": "CGPDFDocumentAllowsCopying | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402588-cgpdfdocumentallowscopying",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nReturn Value\n\nA Boolean that, if YES, indicates that the document allows copying. If the value is NO, the document does not allow copying.\n\nDiscussion\n\nIf the document is encrypted and the current password doesn't grant permission to perform copying, this returns NO.\n\nSee Also\nManaging Encryption\nCGPDFDocumentAllowsPrinting\nReturns whether a PDF document allows printing.\nCGPDFDocumentIsEncrypted\nReturns whether the specified PDF file is encrypted.\nCGPDFDocumentIsUnlocked\nReturns whether the specified PDF document is currently unlocked.\nCGPDFDocumentUnlockWithPassword\nUnlocks an encrypted PDF document when a valid password is supplied."
  },
  {
    "title": "CGPDFDocumentGetInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402589-cgpdfdocumentgetinfo",
    "html": "Parameters\ndocument\n\nThe document whose dictionary you want to obtain.\n\nReturn Value\n\nThe information dictionary for the document.\n\nSee Also\nGetting Information About Core Graphics PDF Documents\nCGPDFDocumentGetCatalog\nReturns the document catalog of a Core Graphics PDF document.\nCGPDFDocumentGetNumberOfPages\nReturns the number of pages in a PDF document.\nCGPDFDocumentGetPage\nReturns a page from a Core Graphics PDF document.\nCGPDFDocumentGetVersion\nReturns the major and minor version numbers of a Core Graphics PDF document.\nCGPDFDocumentGetID\nGets the file identifier for a PDF document."
  },
  {
    "title": "CGPDFDocumentIsUnlocked | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402607-cgpdfdocumentisunlocked",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nReturn Value\n\nA Boolean that, if YES, indicates that the document is not locked. If the value is NO, the document is locked.\n\nDiscussion\n\nThere are two possible reasons why a PDF document is unlocked:\n\nThe document is not encrypted.\n\nThe document is encrypted, and a valid password was previously specified using CGPDFDocumentUnlockWithPassword.\n\nSee Also\nManaging Encryption\nCGPDFDocumentAllowsCopying\nReturns whether the specified PDF document allows copying.\nCGPDFDocumentAllowsPrinting\nReturns whether a PDF document allows printing.\nCGPDFDocumentIsEncrypted\nReturns whether the specified PDF file is encrypted.\nCGPDFDocumentUnlockWithPassword\nUnlocks an encrypted PDF document when a valid password is supplied."
  },
  {
    "title": "CGPDFDocumentIsEncrypted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402591-cgpdfdocumentisencrypted",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nReturn Value\n\nA Boolean that, if YES, indicates that the document is encrypted. If the value is NO, the document is not encrypted.\n\nDiscussion\n\nIf the document is encrypted, a password must be supplied before certain operations are enabled. For more information, see CGPDFDocumentUnlockWithPassword.\n\nSee Also\nManaging Encryption\nCGPDFDocumentAllowsCopying\nReturns whether the specified PDF document allows copying.\nCGPDFDocumentAllowsPrinting\nReturns whether a PDF document allows printing.\nCGPDFDocumentIsUnlocked\nReturns whether the specified PDF document is currently unlocked.\nCGPDFDocumentUnlockWithPassword\nUnlocks an encrypted PDF document when a valid password is supplied."
  },
  {
    "title": "CGPDFDocumentUnlockWithPassword | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402599-cgpdfdocumentunlockwithpassword",
    "html": "Parameters\ndocument\n\nA PDF document.\n\npassword\n\nA pointer to a string that contains the password.\n\nReturn Value\n\nA Boolean that, if YES, indicates that the document has been successfully unlocked. If the value is NO, the document has not been unlocked.\n\nDiscussion\n\nGiven an encrypted PDF document and a password, this function does the following:\n\nSets the lock state of the document, based on the validity of the password.\n\nReturns YES if the document is unlocked.\n\nReturns NO if the document cannot be unlocked with the specified password.\n\nUnlocking a PDF document makes it possible to decrypt the document and perform other privileged operations. Different passwords enable different operations.\n\nSee Also\nManaging Encryption\nCGPDFDocumentAllowsCopying\nReturns whether the specified PDF document allows copying.\nCGPDFDocumentAllowsPrinting\nReturns whether a PDF document allows printing.\nCGPDFDocumentIsEncrypted\nReturns whether the specified PDF file is encrypted.\nCGPDFDocumentIsUnlocked\nReturns whether the specified PDF document is currently unlocked."
  },
  {
    "title": "CGPDFDocumentGetBleedBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402596-cgpdfdocumentgetbleedbox",
    "html": "Parameters\ndocument\n\nThe PDF document to examine.\n\npage\n\nAn integer that specifies the number of the page to examine.\n\nReturn Value\n\nA rectangle that represents the bleed box for the specified page, expressed in default PDF user space units (points).\n\nDiscussion\n\nThe replacement function for this one is CGPDFPageGetBoxRect, which gets the rectangle associated with a type of box (art, media, crop, bleed trim) that represents a content region or page dimensions of a PDF page. For more information see CGPDFPage.\n\nThe bleed box defines the bounds to which the contents of the page should be clipped when output in a production environment. The default value is the page’s crop box.\n\nSee Also\nGetting Page Information\nCGPDFDocumentGetArtBox\nReturns the art box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetCropBox\nReturns the crop box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetMediaBox\nReturns the media box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetRotationAngle\nReturns the rotation angle of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetTrimBox\nReturns the trim box of a page in a PDF document.\nDeprecated"
  },
  {
    "title": "CGPDFDocumentGetMediaBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402592-cgpdfdocumentgetmediabox",
    "html": "Parameters\ndocument\n\nThe PDF document to examine.\n\npage\n\nAn integer that specifies the number of the page to examine.\n\nReturn Value\n\nA rectangle that represents the media box for the specified page, expressed in default PDF user space units (points).\n\nDiscussion\n\nThe replacement function for this one is CGPDFPageGetBoxRect, which gets the rectangle associated with a type of box (art, media, crop, bleed trim) that represents a content region or page dimensions of a PDF page. For more information see CGPDFPage.\n\nThe media box defines the location and size of the physical medium on which the page is intended to be displayed or printed. For example, if the page size is 8.5 by 11 inches, this function returns the coordinate pairs (0,0) and (612,792).\n\nSee Also\nGetting Page Information\nCGPDFDocumentGetArtBox\nReturns the art box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetBleedBox\nReturns the bleed box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetCropBox\nReturns the crop box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetRotationAngle\nReturns the rotation angle of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetTrimBox\nReturns the trim box of a page in a PDF document.\nDeprecated"
  },
  {
    "title": "CGPDFDocumentGetCropBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402598-cgpdfdocumentgetcropbox",
    "html": "Parameters\ndocument\n\nThe PDF document to examine.\n\npage\n\nAn integer that specifies the number of the page to examine.\n\nReturn Value\n\nA rectangle that represents the crop box for the specified page, expressed in default PDF user space units (points).\n\nDiscussion\n\nThe replacement function for this one is CGPDFPageGetBoxRect, which gets the rectangle associated with a type of box (art, media, crop, bleed trim) that represents a content region or page dimensions of a PDF page. For more information see CGPDFPage.\n\nThe crop box defines the region to which the contents of the page are to be clipped (or cropped) when displayed or printed. Unlike the other boxes, the crop box has no defined meaning in terms of physical page geometry or intended use—it merely suggests where the page should be clipped.\n\nSee Also\nGetting Page Information\nCGPDFDocumentGetArtBox\nReturns the art box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetBleedBox\nReturns the bleed box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetMediaBox\nReturns the media box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetRotationAngle\nReturns the rotation angle of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetTrimBox\nReturns the trim box of a page in a PDF document.\nDeprecated"
  },
  {
    "title": "CGPDFDocumentGetRotationAngle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402602-cgpdfdocumentgetrotationangle",
    "html": "Parameters\ndocument\n\nThe PDF document to examine.\n\npage\n\nAn integer that specifies the number of the page to examine.\n\nReturn Value\n\nThe rotation angle of the page, expressed in degrees. If the specified page does not exist, returns 0.\n\nDiscussion\n\nThe replacement function for this one is CGPDFPageGetRotationAngle. For more information see CGPDFPage.\n\nSee Also\nGetting Page Information\nCGPDFDocumentGetArtBox\nReturns the art box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetBleedBox\nReturns the bleed box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetCropBox\nReturns the crop box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetMediaBox\nReturns the media box of a page in a PDF document.\nDeprecated\nCGPDFDocumentGetTrimBox\nReturns the trim box of a page in a PDF document.\nDeprecated"
  },
  {
    "title": "CGPDFString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfstring",
    "html": "Overview\n\nA PDF string object is a series of bytes—unsigned integer values in the range 0 to 255.\n\nThe string elements are not integer objects, but are stored in a more compact format. For more information on the representation of strings in PDF, see the latest version of PDF Reference, Adobe Systems Incorporated.\n\nThis object is not derived from CFType and therefore there are no functions for retaining and releasing it. CGPDFString objects exist as constituent parts of a CGPDFDocument object, and are managed by their container.\n\nTopics\nConverting PDF Strings\nCGPDFStringCopyTextString\nReturns a CFString object that represents a PDF string as a text string.\nCGPDFStringCopyDate\nConverts a string to a date.\nGetting PDF String Data\nCGPDFStringGetBytePtr\nReturns a pointer to the bytes of a PDF string.\nCGPDFStringGetLength\nReturns the number of bytes in a PDF string.\nData Types\nCGPDFStringRef\nA data type that represents a string in a PDF document.\nSee Also\nOpaque Types\nCGBitmapContext\nA type of CGContextRef that you can use for drawing bits to memory.\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGLContext\nDeprecated. A type of CGContextRef for drawing OpenGL content.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFContext\nA type of CGContextRef for drawing PDF content.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGColorRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorref",
    "html": "Overview\n\nCGColorRef is the fundamental data type used internally by Core Graphics to represent colors. CGColor objects, and the functions that operate on them, provide a fast and convenient way of managing and setting colors directly, especially colors that are reused (such as black for text).\n\nA color object contains a set of components (such as red, green, and blue) that uniquely define a color, and a color space that specifies how those components should be interpreted.\n\nColor objects provide a fast and convenient way to manage and set colors, especially colors that are used repeatedly. Drawing operations use color objects for setting fill and stroke colors, managing alpha, and setting color with a pattern.\n\nCGColorRef is derived from CFTypeRef and inherits the properties that all Core Foundation types have in common.\n\nSee Also\nColors and Fonts\nCGColorConversionInfoRef\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpaceRef\nA profile that specifies how to interpret a color value for display.\nCGFontRef\nA set of character glyphs and layout information for drawing text."
  },
  {
    "title": "CGColorGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455568-cgcolorgettypeid",
    "html": "Return Value\n\nThe Core Foundation type identifier for CGColorRef.\n\nSee Also\nGetting Information about Core Graphics Colors\nCGColorEqualToColor\nIndicates whether two colors are equal.\nCGColorGetAlpha\nReturns the value of the alpha component associated with a color.\nCGColorGetColorSpace\nReturns the color space associated with a color.\nCGColorGetComponents\nReturns the values of the color components (including alpha) associated with a color.\nCGColorGetNumberOfComponents\nReturns the number of color components (including alpha) associated with a color.\nCGColorGetPattern\nReturns the pattern associated with a color in a pattern color space."
  },
  {
    "title": "CGPathEqualToPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411167-cgpathequaltopath",
    "html": "Parameters\npath1\n\nThe first path being compared.\n\npath2\n\nThe second path being compared.\n\nReturn Value\n\nA Boolean value that indicates whether or not the two specified paths contain the same sequence of path elements. If the paths are not the same, returns NO.\n\nSee Also\nGetting Information about Core Graphics Paths\nCGPathGetBoundingBox\nReturns the bounding box containing all points in a graphics path.\nCGPathGetPathBoundingBox\nReturns the bounding box of a graphics path.\nCGPathGetCurrentPoint\nReturns the current point in a graphics path.\nCGPathGetTypeID\nReturns the Core Foundation type identifier for Core Graphics paths.\nCGPathIsEmpty\nIndicates whether or not a graphics path is empty.\nCGPathIsRect\nIndicates whether or not a graphics path represents a rectangle.\nCGPathContainsPoint\nChecks whether a point is contained in a graphics path."
  },
  {
    "title": "CGColorCreateWithPattern | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455687-cgcolorcreatewithpattern",
    "html": "Parameters\ncolorspace\n\nA pattern color space for the new color. Core Graphics retains the color space you pass in. On return, you may safely release it.\n\npattern\n\nA pattern for the new color object. Core Graphics retains the pattern you pass in. On return, you may safely release it.\n\ncomponents\n\nAn array of intensity values describing the color. The array should contain n + 1 values that correspond to the n color components in the specified color space, followed by the alpha component. Each component value should be in the range appropriate for the color space. Values outside this range will be clamped to the nearest correct value.\n\nReturn Value\n\nA new color. You are responsible for releasing this object using CGColorRelease.\n\nSee Also\nCreating Color Objects\nCGColorCreate\nCreates a color using a list of intensity values (including alpha) and an associated color space.\nCGColorCreateCopy\nCreates a copy of an existing color.\nCGColorCreateGenericGray\nCreates a color in the Generic gray color space.\nCGColorCreateGenericRGB\nCreates a color in the Generic RGB color space.\nCGColorCreateSRGB\nCreates a color in the sRGB color space.\nCGColorCreateGenericCMYK\nCreates a color in the Generic CMYK color space.\nCGColorCreateCopyWithAlpha\nCreates a copy of an existing color, substituting a new alpha value.\nCGColorCreateCopyByMatchingToColorSpace\nCreates a new color in a different color space that matches the provided color."
  },
  {
    "title": "CGColorCreateCopyWithAlpha | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455986-cgcolorcreatecopywithalpha",
    "html": "Parameters\ncolor\n\nThe color to copy.\n\nalpha\n\nA value that specifies the desired opacity of the copy. Values outside the range [0,1] are clamped to 0 or 1.\n\nReturn Value\n\nA copy of the specified color, using the specified alpha value. You are responsible for releasing this object using CGColorRelease.\n\nSee Also\nCreating Color Objects\nCGColorCreate\nCreates a color using a list of intensity values (including alpha) and an associated color space.\nCGColorCreateCopy\nCreates a copy of an existing color.\nCGColorCreateGenericGray\nCreates a color in the Generic gray color space.\nCGColorCreateGenericRGB\nCreates a color in the Generic RGB color space.\nCGColorCreateSRGB\nCreates a color in the sRGB color space.\nCGColorCreateGenericCMYK\nCreates a color in the Generic CMYK color space.\nCGColorCreateWithPattern\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern.\nCGColorCreateCopyByMatchingToColorSpace\nCreates a new color in a different color space that matches the provided color."
  },
  {
    "title": "CGColorCreateGenericCMYK | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454222-cgcolorcreategenericcmyk",
    "html": "Parameters\ncyan\n\nA cyan value (0.0 - 1.0).\n\nmagenta\n\nA magenta value (0.0 - 1.0).\n\nyellow\n\nA yellow value (0.0 - 1.0).\n\nblack\n\nA black value (0.0 - 1.0).\n\nalpha\n\nAn alpha value (0.0 - 1.0).\n\nReturn Value\n\nA color object.\n\nSee Also\nCreating Color Objects\nCGColorCreate\nCreates a color using a list of intensity values (including alpha) and an associated color space.\nCGColorCreateCopy\nCreates a copy of an existing color.\nCGColorCreateGenericGray\nCreates a color in the Generic gray color space.\nCGColorCreateGenericRGB\nCreates a color in the Generic RGB color space.\nCGColorCreateSRGB\nCreates a color in the sRGB color space.\nCGColorCreateCopyWithAlpha\nCreates a copy of an existing color, substituting a new alpha value.\nCGColorCreateWithPattern\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern.\nCGColorCreateCopyByMatchingToColorSpace\nCreates a new color in a different color space that matches the provided color."
  },
  {
    "title": "CGColorCreateSRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/3042355-cgcolorcreatesrgb",
    "html": "Parameters\nred\n\nA red component value (0.0 - 1.0).\n\ngreen\n\nA green component value (0.0 - 1.0).\n\nblue\n\nA blue component value (0.0 - 1.0).\n\nalpha\n\nAn alpha value (0.0 - 1.0).\n\nReturn Value\n\nA color object.\n\nSee Also\nCreating Color Objects\nCGColorCreate\nCreates a color using a list of intensity values (including alpha) and an associated color space.\nCGColorCreateCopy\nCreates a copy of an existing color.\nCGColorCreateGenericGray\nCreates a color in the Generic gray color space.\nCGColorCreateGenericRGB\nCreates a color in the Generic RGB color space.\nCGColorCreateGenericCMYK\nCreates a color in the Generic CMYK color space.\nCGColorCreateCopyWithAlpha\nCreates a copy of an existing color, substituting a new alpha value.\nCGColorCreateWithPattern\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern.\nCGColorCreateCopyByMatchingToColorSpace\nCreates a new color in a different color space that matches the provided color."
  },
  {
    "title": "CGPathAddArcToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411173-cgpathaddarctopoint",
    "html": "Parameters\npath\n\nThe mutable path to change. The path must not be empty.\n\nm\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the arc before it is added to the path.\n\nx1\n\nThe x-coordinate of the user space for the end point of the first tangent line. The first tangent line is drawn from the current point to (x1,y1).\n\ny1\n\nThe y-coordinate of the user space for the end point of the first tangent line. The first tangent line is drawn from the current point to (x1,y1).\n\nx2\n\nThe x-coordinate of the user space for the end point of the second tangent line. The second tangent line is drawn from (x1,y1) to (x2,y2).\n\ny2\n\nThe y-coordinate of the user space for the end point of the second tangent line. The second tangent line is drawn from (x1,y1) to (x2,y2).\n\nradius\n\nThe radius of the arc, in user space coordinates.\n\nDiscussion\n\nThis function uses a sequence of cubic Bézier curves to create an arc that is tangent to the line from the current point to (x1,y1) and to the line from (x1,y1) to (x2,y2). The start and end points of the arc are located on the first and second tangent lines, respectively. The start and end points of the arc are also the “tangent points” of the lines.\n\nIf the current point and the first tangent point of the arc (the starting point) are not equal, Core Graphics appends a straight line segment from the current point to the first tangent point.\n\nThe ending point of the arc becomes the new current point of the path.\n\nFor another way to draw an arc in a path, see CGPathAddArc.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGColorCreateGenericRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455631-cgcolorcreategenericrgb",
    "html": "Parameters\nred\n\nA red component value (0.0 - 1.0).\n\ngreen\n\nA green component value (0.0 - 1.0).\n\nblue\n\nA blue component value (0.0 - 1.0).\n\nalpha\n\nAn alpha value (0.0 - 1.0).\n\nReturn Value\n\nA color object.\n\nSee Also\nCreating Color Objects\nCGColorCreate\nCreates a color using a list of intensity values (including alpha) and an associated color space.\nCGColorCreateCopy\nCreates a copy of an existing color.\nCGColorCreateGenericGray\nCreates a color in the Generic gray color space.\nCGColorCreateSRGB\nCreates a color in the sRGB color space.\nCGColorCreateGenericCMYK\nCreates a color in the Generic CMYK color space.\nCGColorCreateCopyWithAlpha\nCreates a copy of an existing color, substituting a new alpha value.\nCGColorCreateWithPattern\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern.\nCGColorCreateCopyByMatchingToColorSpace\nCreates a new color in a different color space that matches the provided color."
  },
  {
    "title": "CGFontGetCapHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396338-cgfontgetcapheight",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe cap height of the font.\n\nDiscussion\n\nThe cap height is the distance above the baseline of the top of flat capital letters of glyphs in a font. The value is specified in glyph space units.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "getBytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataprovidercallbacks/1805270-getbytes",
    "html": "See Also\nFields\nskipBytes\nA pointer to a function that Core Graphics calls to advance the stream of data supplied by the provider. For more information, see CGDataProviderSkipBytesCallback.\nrewind\nA pointer to a function Core Graphics calls to return the provider to the beginning of the data stream. For more information, see CGDataProviderRewindCallback.\nreleaseProvider\nA pointer to a function that handles clean-up for the data provider, or NULL. For more information, see CGDataProviderReleaseInfoCallback."
  },
  {
    "title": "skipBytes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataprovidercallbacks/1805272-skipbytes",
    "html": "See Also\nFields\ngetBytes\nA pointer to a function that copies data from the provider. For more information, see CGDataProviderGetBytesCallback.\nrewind\nA pointer to a function Core Graphics calls to return the provider to the beginning of the data stream. For more information, see CGDataProviderRewindCallback.\nreleaseProvider\nA pointer to a function that handles clean-up for the data provider, or NULL. For more information, see CGDataProviderReleaseInfoCallback."
  },
  {
    "title": "CGFontGetXHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396410-cgfontgetxheight",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe x-height of the font.\n\nDiscussion\n\nThe x-height is the distance above the baseline of the top of flat, non-ascending lowercase letters (such as x) of glyphs in a font. The value is specified in glyph space units.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "releaseProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataproviderdirectaccesscallbacks/1805290-releaseprovider",
    "html": "See Also\nFields\ngetBytePointer\nA pointer to a function that returns a pointer to the provider’s data. For more information, see CGDataProviderGetBytePointerCallback.\nreleaseBytePointer\nA pointer to a function that Core Graphics calls to release a pointer to the provider’s data. For more information, see CGDataProviderReleaseBytePointerCallback.\ngetBytes\nA pointer to a function that copies data from the provider. For more information, see CGDataProviderGetBytesAtOffsetCallback."
  },
  {
    "title": "CGDataProviderGetBytesAtOffsetCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataprovidergetbytesatoffsetcallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to CGDataProviderCreateDirectAccess.\n\nbuffer\n\nThe Core Graphics buffer into which you copy the specified number of bytes.\n\noffset\n\nSpecifies the relative location in the data provider at which to begin copying data.\n\ncount\n\nThe number of bytes to copy.\n\nReturn Value\n\nThe number of bytes copied. If no more data can be written to the buffer, you should return 0.\n\nOverview\n\nWhen Core Graphics is ready to receive data from the provider, your function is called.\n\nFor information on how to associate your function with a direct-access data provider, see CGDataProviderCreateDirectAccess and CGDataProviderDirectAccessCallbacks.\n\nSee Also\nCallbacks\nCGDataProviderGetBytesCallback\nA callback function that copies from a provider data stream into a Core Graphics buffer.\nCGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\nCGDataProviderRewindCallback\nA callback function that moves the current position in the data stream back to the beginning.\nCGDataProviderSkipBytesCallback\nA callback function that advances the current position in the data stream supplied by the provider.\nCGDataProviderSkipForwardCallback\nA callback function that advances the current position in the data stream supplied by the provider.\nCGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\nCGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\nCGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function CGDataProviderCreateWithData.\nCGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer."
  },
  {
    "title": "CGDataProviderRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataproviderref",
    "html": "Overview\n\nSome Core Graphics routines supply blocks of data to your program. Rather than reading through a raw memory buffer, data provider objects of type CGDataProviderRef allow you to supply Core Graphics functions with data.\n\nCGDataProviderRef is derived from CFTypeRef and inherits the properties that all Core Foundation types have in common."
  },
  {
    "title": "CGDataProviderCreateSequential | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408291-cgdataprovidercreatesequential",
    "html": "Parameters\ninfo\n\nA pointer to data of any type or NULL. When Core Graphics calls the functions specified in the callbacks parameter, it sends each of the functions this pointer.\n\ncallbacks\n\nA pointer to a CGDataProviderSequentialCallbacks structure that specifies the callback functions you implement to handle the data provider’s basic memory management.\n\nReturn Value\n\nA new data provider. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou use this function to create a sequential-access data provider that uses callback functions to read data from your program in a single block.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGDataProviderCreateDirect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408282-cgdataprovidercreatedirect",
    "html": "Parameters\ninfo\n\nA pointer to data of any type or NULL. When Core Graphics calls the functions specified in the callbacks parameter, it sends each of the functions this pointer.\n\nsize\n\nThe number of bytes of data to provide.\n\ncallbacks\n\nA pointer to a CGDataProviderDirectCallbacks structure that specifies the callback functions you implement to handle the data provider’s basic memory management.\n\nReturn Value\n\nA new data provider. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou use this function to create a direct-access data provider that uses callback functions to read data from your program in a single block.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider."
  },
  {
    "title": "CGDataProviderCopyData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408309-cgdataprovidercopydata",
    "html": "Parameters\nprovider\n\nThe data provider whose data you want to copy.\n\nReturn Value\n\nA new data object containing a copy of the provider’s data. You are responsible for releasing this object.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGDataProviderGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408290-cgdataprovidergettypeid",
    "html": "Return Value\n\nThe identifier for the opaque type CGDataProviderRef.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGDataProviderRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408276-cgdataproviderretain",
    "html": "Parameters\nprovider\n\nThe data provider to retain.\n\nReturn Value\n\nThe same data provider you passed in as the provider parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the provider parameter is NULL.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGPDFDocumentCreateWithProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402603-cgpdfdocumentcreatewithprovider",
    "html": "Parameters\nprovider\n\nA data provider that supplies the PDF document data.\n\nReturn Value\n\nA new Core Graphics PDF document, or NULL if a document can not be created. You are responsible for releasing the object using CGPDFDocumentRelease.\n\nDiscussion\n\nDistributing individual pages of a PDF document to separate threads is not supported. If you want to use threads, consider creating a separate document for each thread and operating on a block of pages per thread.\n\nSee Also\nCreating PDF Document Objects\nCGPDFDocumentCreateWithURL\nCreates a Core Graphics PDF document using data specified by a URL.\nRelated Documentation\nQuartz 2D Programming Guide\nCGContextDrawPDFDocument"
  },
  {
    "title": "CGContextDrawLayerInRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1450896-cgcontextdrawlayerinrect",
    "html": "Parameters\ncontext\n\nThe graphics context associated with the layer.\n\nrect\n\nThe rectangle, in current user space coordinates, to draw to.\n\nlayer\n\nThe layer whose contents you want to draw.\n\nDiscussion\n\nThe contents are scaled, if necessary, to fit into the rectangle.\n\nSee Also\nDrawing Layer Content\nCGContextDrawLayerAtPoint\nDraws the contents of a CGLayer object at the specified point."
  },
  {
    "title": "CGContextDrawTiledImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456240-cgcontextdrawtiledimage",
    "html": "Parameters\ncontext\n\nThe graphics context in which to draw the image.\n\nrect\n\nA rectangle that specifies the origin and size of the destination tile. The image is scaled—disproportionately, if necessary—to fit the bounds specified by the rect parameter.\n\nimage\n\nThe image to draw.\n\nDiscussion\n\nCore Graphics draws the scaled image starting at the origin of the rectangle in user space, then moves to a new point (horizontally by the width of the tile and/or vertically by the height of the tile), draws the scaled image, moves again, draws again, and so on, until the current clip region is tiled with copies of the image. Unlike patterns, the image is tiled in user space, so transformations applied to the CTM affect the final result.\n\nSee Also\nDrawing an Image to a Graphics Context\nCGContextDrawImage\nDraws an image into a graphics context."
  },
  {
    "title": "CGFontGetLeading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396390-cgfontgetleading",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe leading of the font.\n\nDiscussion\n\nThe leading is the spacing between consecutive lines of text in a font. The value is specified in glyph space units.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGPathRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411148-cgpathrelease",
    "html": "Parameters\npath\n\nThe graphics path to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the path parameter is NULL.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGFontCopyFullName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396357-cgfontcopyfullname",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe full name associated with the font.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGFontCopyVariations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396355-cgfontcopyvariations",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe variation specification dictionary for the font. Returns NULL if the font doesn't support variations.\n\nDiscussion\n\nThe variation specification dictionary contains keys that correspond to the variation axis names of the font. Each key is a variation axis name. The value for each key is the value specified for that particular variation axis represented as a CFNumber object.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGFontCopyVariationAxes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396376-cgfontcopyvariationaxes",
    "html": "Parameters\nfont\n\nA CGFont object.\n\nReturn Value\n\nAn array of the variation axis dictionaries. Returns NULL if the font doesn't support variations.\n\nDiscussion\n\nA variation axis is a range included in a font by the font designer that allows a font to produce different type styles. Each variation axis dictionary contains key-value pairs that specify the variation axis name and the minimum, maximum, and default values for that variation axis.\n\nSee Also\nGetting Font Information\nCGFontGetTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGFontGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396369-cgfontgettypeid",
    "html": "Return Value\n\nThe Core Foundation identifier for the opaque type CGFontRef.\n\nSee Also\nGetting Font Information\nCGFontCopyVariationAxes\nReturns an array of the variation axis dictionaries for a font.\nCGFontCopyVariations\nReturns the variation specification dictionary for a font.\nCGFontCopyFullName\nReturns the full name associated with a font object.\nCGFontGetAscent\nReturns the ascent of a font.\nCGFontGetDescent\nReturns the descent of a font.\nCGFontGetLeading\nReturns the leading of a font.\nCGFontGetCapHeight\nReturns the cap height of a font.\nCGFontGetXHeight\nReturns the x-height of a font.\nCGFontGetFontBBox\nReturns the bounding box of a font.\nCGFontGetItalicAngle\nReturns the italic angle of a font.\nCGFontGetStemV\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nCGFontGetGlyphBBoxes\nGet the bounding box of each glyph in an array.\nCGFontGetGlyphWithGlyphName\nReturns the glyph for the glyph name associated with the specified font object.\nCGFontCopyGlyphNameForGlyph\nReturns the glyph name of the specified glyph in the specified font.\nCGFontGetNumberOfGlyphs\nReturns the number of glyphs in a font.\nCGFontGetGlyphAdvances\nGets the advance width of each glyph in the provided array.\nCGFontGetUnitsPerEm\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "CGFontCopyTableForTag | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396402-cgfontcopytablefortag",
    "html": "Parameters\nfont\n\nA font object.\n\ntag\n\nThe tag for the table you want to obtain.\n\nReturn Value\n\nThe font table that corresponds to the tag, or NULL if no such table exists.\n\nSee Also\nWorking With Font Tables\nCGFontCopyTableTags\nReturns an array of tags that correspond to the font tables for a font."
  },
  {
    "title": "CGColorCreateGenericGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456453-cgcolorcreategenericgray",
    "html": "Parameters\ngray\n\nA grayscale value (0.0 - 1.0).\n\nalpha\n\nAn alpha value (0.0 - 1.0).\n\nReturn Value\n\nA color object.\n\nSee Also\nCreating Color Objects\nCGColorCreate\nCreates a color using a list of intensity values (including alpha) and an associated color space.\nCGColorCreateCopy\nCreates a copy of an existing color.\nCGColorCreateGenericRGB\nCreates a color in the Generic RGB color space.\nCGColorCreateSRGB\nCreates a color in the sRGB color space.\nCGColorCreateGenericCMYK\nCreates a color in the Generic CMYK color space.\nCGColorCreateCopyWithAlpha\nCreates a copy of an existing color, substituting a new alpha value.\nCGColorCreateWithPattern\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern.\nCGColorCreateCopyByMatchingToColorSpace\nCreates a new color in a different color space that matches the provided color."
  },
  {
    "title": "CGColorCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455927-cgcolorcreate",
    "html": "Parameters\ncolorspace\n\nA color space for the new color. Core Graphics retains this object; upon return, you may safely release it.\n\ncomponents\n\nAn array of intensity values describing the color. The array should contain n+1 values that correspond to the n color components in the specified color space, followed by the alpha component. Each component value should be in the range appropriate for the color space. Values outside this range will be clamped to the nearest correct value.\n\nReturn Value\n\nA new color. You are responsible for releasing this object using CGColorRelease.\n\nSee Also\nCreating Color Objects\nCGColorCreateCopy\nCreates a copy of an existing color.\nCGColorCreateGenericGray\nCreates a color in the Generic gray color space.\nCGColorCreateGenericRGB\nCreates a color in the Generic RGB color space.\nCGColorCreateSRGB\nCreates a color in the sRGB color space.\nCGColorCreateGenericCMYK\nCreates a color in the Generic CMYK color space.\nCGColorCreateCopyWithAlpha\nCreates a copy of an existing color, substituting a new alpha value.\nCGColorCreateWithPattern\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern.\nCGColorCreateCopyByMatchingToColorSpace\nCreates a new color in a different color space that matches the provided color."
  },
  {
    "title": "CGColorCreateCopy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456134-cgcolorcreatecopy",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nA copy of the specified color. You are responsible for releasing this object using CGColorRelease.\n\nSee Also\nCreating Color Objects\nCGColorCreate\nCreates a color using a list of intensity values (including alpha) and an associated color space.\nCGColorCreateGenericGray\nCreates a color in the Generic gray color space.\nCGColorCreateGenericRGB\nCreates a color in the Generic RGB color space.\nCGColorCreateSRGB\nCreates a color in the sRGB color space.\nCGColorCreateGenericCMYK\nCreates a color in the Generic CMYK color space.\nCGColorCreateCopyWithAlpha\nCreates a copy of an existing color, substituting a new alpha value.\nCGColorCreateWithPattern\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern.\nCGColorCreateCopyByMatchingToColorSpace\nCreates a new color in a different color space that matches the provided color."
  },
  {
    "title": "CGColorRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1586339-cgcolorretain",
    "html": "Parameters\ncolor\n\nThe color to retain.\n\nReturn Value\n\nThe same color you passed in as the color parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the color parameter is NULL.\n\nSee Also\nRetaining and Releasing Color Objects\nCGColorRelease\nDecrements the retain count of a color."
  },
  {
    "title": "CGLayerGetContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1450902-cglayergetcontext",
    "html": "Parameters\nlayer\n\nThe layer whose graphics context you want to obtain.\n\nReturn Value\n\nThe graphics context associated with the layer.\n\nDiscussion\n\nThe context that’s returned is the context for the layer itself, not the context that you specified when you created the layer.\n\nSee Also\nGetting Layer Information\nCGLayerGetSize\nReturns the width and height of a layer object."
  },
  {
    "title": "CGLayerRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cglayerref",
    "html": "See Also\n2D Drawing\nCGContextRef\nA Quartz 2D drawing environment.\nCGImageRef\nA bitmap image or image mask.\nCGPathRef\nAn immutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nCGMutablePathRef\nA mutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context."
  },
  {
    "title": "CGImageGetDataProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455260-cgimagegetdataprovider",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe data provider for the specified bitmap image (or image mask). You are responsible for retaining and releasing the data provider as necessary.\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "CGFontCreatePostScriptSubset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396324-cgfontcreatepostscriptsubset",
    "html": "Parameters\nfont\n\nA font object.\n\nsubsetName\n\nThe name of the subset.\n\nformat\n\nThe PostScript format of the font.\n\nglyphs\n\nAn array that contains the glyphs in the subset.\n\ncount\n\nThe number of glyphs specified by the glyphs array.\n\nencoding\n\nThe default encoding for the subset. You can pass NULL if you do not want to specify an encoding.\n\nReturn Value\n\nA subset of the font created from the supplied parameters.\n\nDiscussion\n\nFor more information on PostScript format, see Adobe Type 1 Font Format, which is available from http://partners.adobe.com/.\n\nSee Also\nWorking With PostScript Fonts\nCGFontCopyPostScriptName\nObtains the PostScript name of a font.\nCGFontCanCreatePostScriptSubset\nDetermines whether Core Graphics can create a subset of the font in PostScript format.\nCGFontCreatePostScriptEncoding\nCreates a PostScript encoding of a font."
  },
  {
    "title": "CGPDFDocumentGetID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402600-cgpdfdocumentgetid",
    "html": "Parameters\ndocument\n\nThe document whose file identifier you want to obtain.\n\nReturn Value\n\nReturns the file identifier for the document.\n\nDiscussion\n\nA PDF file identifier is defined in the PDF specification as an array of two strings, the first of which is a permanent identifier that doesn’t change even when the file is updated. The second string changes each time the file is updated. For more information, see PDF Reference: Version 1.3 (Second Edition), Adobe Systems Incorporated.\n\nSee Also\nGetting Information About Core Graphics PDF Documents\nCGPDFDocumentGetCatalog\nReturns the document catalog of a Core Graphics PDF document.\nCGPDFDocumentGetNumberOfPages\nReturns the number of pages in a PDF document.\nCGPDFDocumentGetPage\nReturns a page from a Core Graphics PDF document.\nCGPDFDocumentGetVersion\nReturns the major and minor version numbers of a Core Graphics PDF document.\nCGPDFDocumentGetInfo\nGets the information dictionary for a PDF document."
  },
  {
    "title": "CGRectIntersection(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455346-cgrectintersection",
    "html": "Parameters\nr2\n\nAnother rectangle to intersect with this rectangle.\n\nReturn Value\n\nA rectangle that represents the intersection of the two specified rectangles. If the two rectangles do not intersect, returns the null rectangle. To check for this condition, use CGRectIsNull(_:).\n\nDiscussion\n\nBoth rectangles are standardized prior to calculating the intersection.\n\nSee Also\nCreating Derived Rectangles\nvar standardized: CGRect\nReturns a rectangle with a positive width and height.\nvar integral: CGRect\nReturns the smallest rectangle that results from converting the source rectangle values to integers.\nfunc applying(CGAffineTransform) -> CGRect\nApplies an affine transform to a rectangle.\nfunc insetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle that is smaller or larger than the source rectangle, with the same center point.\nfunc offsetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle with an origin that is offset from that of the source rectangle.\nfunc union(CGRect) -> CGRect\nReturns the smallest rectangle that contains the two source rectangles.\nfunc divided(atDistance: CGFloat, from: CGRectEdge) -> (slice: CGRect, remainder: CGRect)\nCreates two rectangles by dividing the original rectangle.\nenum CGRectEdge\nCoordinates that establish the edges of a rectangle."
  },
  {
    "title": "CGRectOffset(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454841-cgrectoffset",
    "html": "Parameters\ndx\n\nThe offset value for the x-coordinate.\n\ndy\n\nThe offset value for the y-coordinate.\n\nReturn Value\n\nA rectangle that is the same size as the source, but with its origin offset by dx units along the x-axis and dy units along the y-axis with respect to the source. Returns a null rectangle if rect is a null rectangle.\n\nSee Also\nCreating Derived Rectangles\nvar standardized: CGRect\nReturns a rectangle with a positive width and height.\nvar integral: CGRect\nReturns the smallest rectangle that results from converting the source rectangle values to integers.\nfunc applying(CGAffineTransform) -> CGRect\nApplies an affine transform to a rectangle.\nfunc insetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle that is smaller or larger than the source rectangle, with the same center point.\nfunc union(CGRect) -> CGRect\nReturns the smallest rectangle that contains the two source rectangles.\nfunc intersection(CGRect) -> CGRect\nReturns the intersection of two rectangles.\nfunc divided(atDistance: CGFloat, from: CGRectEdge) -> (slice: CGRect, remainder: CGRect)\nCreates two rectangles by dividing the original rectangle.\nenum CGRectEdge\nCoordinates that establish the edges of a rectangle."
  },
  {
    "title": "CGRectInset(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454218-cgrectinset",
    "html": "Parameters\ndx\n\nThe x-coordinate value to use for adjusting the source rectangle. To create an inset rectangle, specify a positive value. To create a larger, encompassing rectangle, specify a negative value.\n\ndy\n\nThe y-coordinate value to use for adjusting the source rectangle. To create an inset rectangle, specify a positive value. To create a larger, encompassing rectangle, specify a negative value.\n\nReturn Value\n\nA rectangle. The origin value is offset in the x-axis by the distance specified by the dx parameter and in the y-axis by the distance specified by the dy parameter, and its size adjusted by (2*dx,2*dy), relative to the source rectangle. If dx and dy are positive values, then the rectangle’s size is decreased. If dx and dy are negative values, the rectangle’s size is increased.\n\nDiscussion\n\nThe rectangle is standardized and then the inset parameters are applied. If the resulting rectangle would have a negative height or width, a null rectangle is returned.\n\nSee Also\nCreating Derived Rectangles\nvar standardized: CGRect\nReturns a rectangle with a positive width and height.\nvar integral: CGRect\nReturns the smallest rectangle that results from converting the source rectangle values to integers.\nfunc applying(CGAffineTransform) -> CGRect\nApplies an affine transform to a rectangle.\nfunc offsetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle with an origin that is offset from that of the source rectangle.\nfunc union(CGRect) -> CGRect\nReturns the smallest rectangle that contains the two source rectangles.\nfunc intersection(CGRect) -> CGRect\nReturns the intersection of two rectangles.\nfunc divided(atDistance: CGFloat, from: CGRectEdge) -> (slice: CGRect, remainder: CGRect)\nCreates two rectangles by dividing the original rectangle.\nenum CGRectEdge\nCoordinates that establish the edges of a rectangle."
  },
  {
    "title": "CGRectUnion(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455837-cgrectunion",
    "html": "Parameters\nr2\n\nAnother rectangle to be combined with this rectangle.\n\nReturn Value\n\nThe smallest rectangle that completely contains both of the source rectangles.\n\nDiscussion\n\nBoth rectangles are standardized prior to calculating the union. If either of the rectangles is a null rectangle, a copy of the other rectangle is returned (resulting in a null rectangle if both rectangles are null). Otherwise a rectangle that completely contains the source rectangles is returned.\n\nSee Also\nCreating Derived Rectangles\nvar standardized: CGRect\nReturns a rectangle with a positive width and height.\nvar integral: CGRect\nReturns the smallest rectangle that results from converting the source rectangle values to integers.\nfunc applying(CGAffineTransform) -> CGRect\nApplies an affine transform to a rectangle.\nfunc insetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle that is smaller or larger than the source rectangle, with the same center point.\nfunc offsetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle with an origin that is offset from that of the source rectangle.\nfunc intersection(CGRect) -> CGRect\nReturns the intersection of two rectangles.\nfunc divided(atDistance: CGFloat, from: CGRectEdge) -> (slice: CGRect, remainder: CGRect)\nCreates two rectangles by dividing the original rectangle.\nenum CGRectEdge\nCoordinates that establish the edges of a rectangle."
  },
  {
    "title": "CGRectApplyAffineTransform(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455875-cgrectapplyaffinetransform",
    "html": "Parameters\nt\n\nThe affine transform to apply to the rect parameter.\n\nReturn Value\n\nThe transformed rectangle.\n\nDiscussion\n\nBecause affine transforms do not preserve rectangles in general, this function returns the smallest rectangle that contains the transformed corner points of the rect parameter. If the affine transform t consists solely of scaling and translation operations, then the returned rectangle coincides with the rectangle constructed from the four transformed corners.\n\nSee Also\nCreating Derived Rectangles\nvar standardized: CGRect\nReturns a rectangle with a positive width and height.\nvar integral: CGRect\nReturns the smallest rectangle that results from converting the source rectangle values to integers.\nfunc insetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle that is smaller or larger than the source rectangle, with the same center point.\nfunc offsetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle with an origin that is offset from that of the source rectangle.\nfunc union(CGRect) -> CGRect\nReturns the smallest rectangle that contains the two source rectangles.\nfunc intersection(CGRect) -> CGRect\nReturns the intersection of two rectangles.\nfunc divided(atDistance: CGFloat, from: CGRectEdge) -> (slice: CGRect, remainder: CGRect)\nCreates two rectangles by dividing the original rectangle.\nenum CGRectEdge\nCoordinates that establish the edges of a rectangle."
  },
  {
    "title": "CGImageCreateWithMaskingColors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454358-cgimagecreatewithmaskingcolors",
    "html": "Parameters\nimage\n\nThe image to mask. This parameter may not be an image mask, may not already have an image mask or masking color associated with it, and cannot have an alpha component.\n\ncomponents\n\nAn array of color components that specify a color or range of colors to mask the image with. The array must contain 2N values { min[1], max[1], ... min[N], max[N] } where N is the number of components in color space of image. Each value in components must be a valid image sample value. If image has integer pixel components, then each value must be in the range [0 .. 2**bitsPerComponent - 1] (where bitsPerComponent is the number of bits/component of image). If image has floating-point pixel components, then each value may be any floating-point number which is a valid color component.\n\nReturn Value\n\nAn image created by masking image with the colors specified in the components array. You are responsible for releasing this object by calling CGImageRelease.\n\nDiscussion\n\nAny image sample with color value {c[1], ... c[N]} where min[i] <= c[i] <= max[i] for 1 <= i <= N is masked out (that is, not painted). This means that anything underneath the unpainted samples, such as the current fill color, shows through.\n\nSee Also\nCreating Bitmap Images\nCGImageCreate\nCreates a bitmap image from data supplied by a data provider.\nCGImageCreateCopy\nCreates a copy of a bitmap image.\nCGImageCreateCopyWithColorSpace\nCreates a copy of a bitmap image, replacing its colorspace.\nCGImageCreateWithJPEGDataProvider\nCreates a bitmap image using JPEG-encoded data supplied by a data provider.\nCGImageCreateWithPNGDataProvider\nCreates a bitmap image using PNG-encoded data supplied by a data provider.\nCGImageCreateWithImageInRect\nCreates a bitmap image using the data contained within a subregion of an existing bitmap image.\nCGImageCreateWithMask\nCreates a bitmap image from an existing image and an image mask."
  },
  {
    "title": "CGFontCopyTableTags | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396392-cgfontcopytabletags",
    "html": "Parameters\nfont\n\nA CGFont object.\n\nReturn Value\n\nAn array of font table tags.\n\nDiscussion\n\nEach entry in the returned array is a four-byte value that represents a single TrueType or OpenType font table tag. To obtain a tag at index k in a manner that is appropriate for 32-bit and 64-bit architectures, you need to use code similar to the following:\n\ntag = (uint32_t)(uintptr_t)CFArrayGetValue(table, k);\n\nSee Also\nWorking With Font Tables\nCGFontCopyTableForTag\nReturns the font table that corresponds to the provided tag."
  },
  {
    "title": "CGFontCreatePostScriptEncoding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396348-cgfontcreatepostscriptencoding",
    "html": "Parameters\nfont\n\nA CGFont object.\n\nencoding\n\nThe encoding to use.\n\nReturn Value\n\nA PostScript encoding of the font that contains glyphs in the specified encoding.\n\nDiscussion\n\nFor more information on PostScript format, see Adobe Type 1 Font Format, which is available from http://partners.adobe.com/.\n\nSee Also\nWorking With PostScript Fonts\nCGFontCopyPostScriptName\nObtains the PostScript name of a font.\nCGFontCanCreatePostScriptSubset\nDetermines whether Core Graphics can create a subset of the font in PostScript format.\nCGFontCreatePostScriptSubset\nCreates a subset of the font in the specified PostScript format."
  },
  {
    "title": "CGFontCanCreatePostScriptSubset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396365-cgfontcancreatepostscriptsubset",
    "html": "Parameters\nfont\n\nA font object.\n\nformat\n\nA PostScript font format.\n\nReturn Value\n\nReturns true if a subset in the PostScript format can be created for the font; false otherwise.\n\nDiscussion\n\nFor more information on PostScript format, see Adobe Type 1 Font Format, which is available from http://partners.adobe.com/.\n\nSee Also\nWorking With PostScript Fonts\nCGFontCopyPostScriptName\nObtains the PostScript name of a font.\nCGFontCreatePostScriptSubset\nCreates a subset of the font in the specified PostScript format.\nCGFontCreatePostScriptEncoding\nCreates a PostScript encoding of a font."
  },
  {
    "title": "CGFontCreateWithDataProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396367-cgfontcreatewithdataprovider",
    "html": "Parameters\nprovider\n\nA data provider.\n\nReturn Value\n\nThe font object or NULL if the font can't be created. You are responsible for releasing this object using CGFontRelease.\n\nDiscussion\n\nBefore drawing text in a Core Graphics context, you must set the font in the current graphics state by calling the function CGContextSetFontSize.\n\nSee Also\nCreating a CGFont Object\nCGFontCreateWithFontName\nCreates a font object corresponding to the font specified by a PostScript or full name.\nCGFontCreateCopyWithVariations\nCreates a copy of a font using a variation specification dictionary.\nCGFontCreateWithPlatformFont\nCreates a font object from an Apple Type Services (ATS) font.\nDeprecated"
  },
  {
    "title": "CGRectStandardize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456432-cgrectstandardize",
    "html": "Parameters\nrect\n\nThe source rectangle.\n\nReturn Value\n\nA rectangle that represents the source rectangle, but with positive width and height values. Returns a null rectangle if rect is a null rectangle.\n\nSee Also\nCreating Derived Rectangles\nvar integral: CGRect\nReturns the smallest rectangle that results from converting the source rectangle values to integers.\nfunc applying(CGAffineTransform) -> CGRect\nApplies an affine transform to a rectangle.\nfunc insetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle that is smaller or larger than the source rectangle, with the same center point.\nfunc offsetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle with an origin that is offset from that of the source rectangle.\nfunc union(CGRect) -> CGRect\nReturns the smallest rectangle that contains the two source rectangles.\nfunc intersection(CGRect) -> CGRect\nReturns the intersection of two rectangles.\nfunc divided(atDistance: CGFloat, from: CGRectEdge) -> (slice: CGRect, remainder: CGRect)\nCreates two rectangles by dividing the original rectangle.\nenum CGRectEdge\nCoordinates that establish the edges of a rectangle."
  },
  {
    "title": "CGPathGetPathBoundingBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411200-cgpathgetpathboundingbox",
    "html": "Parameters\npath\n\nThe graphics path to evaluate.\n\nReturn Value\n\nA rectangle that represents the path bounding box of the specified path. If the path is empty, this function returns CGRectNull.\n\nDiscussion\n\nThe path bounding box is the smallest rectangle completely enclosing all points in the path but not including control points for Bézier and quadratic curves.\n\nSee Also\nGetting Information about Core Graphics Paths\nCGPathEqualToPath\nIndicates whether two graphics paths are equivalent.\nCGPathGetBoundingBox\nReturns the bounding box containing all points in a graphics path.\nCGPathGetCurrentPoint\nReturns the current point in a graphics path.\nCGPathGetTypeID\nReturns the Core Foundation type identifier for Core Graphics paths.\nCGPathIsEmpty\nIndicates whether or not a graphics path is empty.\nCGPathIsRect\nIndicates whether or not a graphics path represents a rectangle.\nCGPathContainsPoint\nChecks whether a point is contained in a graphics path."
  },
  {
    "title": "CGColorGetComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455930-cgcolorgetcomponents",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nAn array of intensity values for the color components (including alpha) associated with the specified color. The size of the array is one more than the number of components of the color space for the color.\n\nSee Also\nGetting Information about Core Graphics Colors\nCGColorEqualToColor\nIndicates whether two colors are equal.\nCGColorGetAlpha\nReturns the value of the alpha component associated with a color.\nCGColorGetColorSpace\nReturns the color space associated with a color.\nCGColorGetNumberOfComponents\nReturns the number of color components (including alpha) associated with a color.\nCGColorGetPattern\nReturns the pattern associated with a color in a pattern color space.\nCGColorGetTypeID\nReturns the Core Foundation type identifier for a color data type."
  },
  {
    "title": "CGColorGetPattern | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455937-cgcolorgetpattern",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nThe pattern for the specified color. You are responsible for retaining and releasing the pattern as needed.\n\nSee Also\nGetting Information about Core Graphics Colors\nCGColorEqualToColor\nIndicates whether two colors are equal.\nCGColorGetAlpha\nReturns the value of the alpha component associated with a color.\nCGColorGetColorSpace\nReturns the color space associated with a color.\nCGColorGetComponents\nReturns the values of the color components (including alpha) associated with a color.\nCGColorGetNumberOfComponents\nReturns the number of color components (including alpha) associated with a color.\nCGColorGetTypeID\nReturns the Core Foundation type identifier for a color data type."
  },
  {
    "title": "CGColorEqualToColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455217-cgcolorequaltocolor",
    "html": "Parameters\ncolor1\n\nThe first color to compare.\n\ncolor2\n\nThe second color to compare.\n\nReturn Value\n\nA Boolean value that, if YES, indicates that the specified colors are equal. If the colors are not equal, the value is NO.\n\nDiscussion\n\nTwo colors are equal if they share the same color space and numerically equal color components.\n\nSee Also\nGetting Information about Core Graphics Colors\nCGColorGetAlpha\nReturns the value of the alpha component associated with a color.\nCGColorGetColorSpace\nReturns the color space associated with a color.\nCGColorGetComponents\nReturns the values of the color components (including alpha) associated with a color.\nCGColorGetNumberOfComponents\nReturns the number of color components (including alpha) associated with a color.\nCGColorGetPattern\nReturns the pattern associated with a color in a pattern color space.\nCGColorGetTypeID\nReturns the Core Foundation type identifier for a color data type."
  },
  {
    "title": "CGColorGetNumberOfComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454130-cgcolorgetnumberofcomponents",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nThe number of color components (including alpha) associated with the specified color. This number is one more than the number of components of the color space for the color.\n\nSee Also\nGetting Information about Core Graphics Colors\nCGColorEqualToColor\nIndicates whether two colors are equal.\nCGColorGetAlpha\nReturns the value of the alpha component associated with a color.\nCGColorGetColorSpace\nReturns the color space associated with a color.\nCGColorGetComponents\nReturns the values of the color components (including alpha) associated with a color.\nCGColorGetPattern\nReturns the pattern associated with a color in a pattern color space.\nCGColorGetTypeID\nReturns the Core Foundation type identifier for a color data type."
  },
  {
    "title": "CGColorGetAlpha | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456637-cgcolorgetalpha",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nAn alpha intensity value in the range [0,1]. The value represents the opacity of the color.\n\nSee Also\nGetting Information about Core Graphics Colors\nCGColorEqualToColor\nIndicates whether two colors are equal.\nCGColorGetColorSpace\nReturns the color space associated with a color.\nCGColorGetComponents\nReturns the values of the color components (including alpha) associated with a color.\nCGColorGetNumberOfComponents\nReturns the number of color components (including alpha) associated with a color.\nCGColorGetPattern\nReturns the pattern associated with a color in a pattern color space.\nCGColorGetTypeID\nReturns the Core Foundation type identifier for a color data type."
  },
  {
    "title": "CGColorGetColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455744-cgcolorgetcolorspace",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nThe color space for the specified color. You are responsible for retaining and releasing it as needed.\n\nSee Also\nGetting Information about Core Graphics Colors\nCGColorEqualToColor\nIndicates whether two colors are equal.\nCGColorGetAlpha\nReturns the value of the alpha component associated with a color.\nCGColorGetComponents\nReturns the values of the color components (including alpha) associated with a color.\nCGColorGetNumberOfComponents\nReturns the number of color components (including alpha) associated with a color.\nCGColorGetPattern\nReturns the pattern associated with a color in a pattern color space.\nCGColorGetTypeID\nReturns the Core Foundation type identifier for a color data type."
  },
  {
    "title": "CGPathContainsPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411175-cgpathcontainspoint",
    "html": "Parameters\npath\n\nThe path to evaluate the point against.\n\nm\n\nAn affine transform. If m is not NULL then the point is transformed by this affine transform prior to determining whether the path contains the point.\n\npoint\n\nThe point to check.\n\neoFill\n\nA Boolean value that, if YES, specifies to use the even-odd fill rule to evaluate the painted region of the path. If NO, the winding fill rule is used.\n\nReturn Value\n\nReturns YES if the point is contained in the path; NO otherwise.\n\nDiscussion\n\nA point is contained in a path if it would be inside the painted region when the path is filled.\n\nSee Also\nGetting Information about Core Graphics Paths\nCGPathEqualToPath\nIndicates whether two graphics paths are equivalent.\nCGPathGetBoundingBox\nReturns the bounding box containing all points in a graphics path.\nCGPathGetPathBoundingBox\nReturns the bounding box of a graphics path.\nCGPathGetCurrentPoint\nReturns the current point in a graphics path.\nCGPathGetTypeID\nReturns the Core Foundation type identifier for Core Graphics paths.\nCGPathIsEmpty\nIndicates whether or not a graphics path is empty.\nCGPathIsRect\nIndicates whether or not a graphics path represents a rectangle."
  },
  {
    "title": "CGContextConvertSizeToDeviceSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456619-cgcontextconvertsizetodevicespac",
    "html": "Parameters\nc\n\nA graphics context.\n\nsize\n\nThe size, in user space coordinates, to transform.\n\nReturn Value\n\nThe size in device space coordinates.\n\nSee Also\nConverting Between Device Space and User Space\nCGContextGetUserSpaceToDeviceSpaceTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nCGContextConvertPointToDeviceSpace\nReturns a point that is transformed from user space coordinates to device space coordinates.\nCGContextConvertPointToUserSpace\nReturns a point that is transformed from device space coordinates to user space coordinates.\nCGContextConvertSizeToUserSpace\nReturns a size that is transformed from device space coordinates to user space coordinates.\nCGContextConvertRectToDeviceSpace\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nCGContextConvertRectToUserSpace\nReturns a rectangle that is transformed from device space coordinate to user space coordinates."
  },
  {
    "title": "CGContextConvertPointToUserSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456451-cgcontextconvertpointtouserspace",
    "html": "Parameters\nc\n\nA graphics context.\n\npoint\n\nThe point, in device space coordinates, to transform.\n\nReturn Value\n\nThe coordinates of the point in user space coordinates.\n\nSee Also\nConverting Between Device Space and User Space\nCGContextGetUserSpaceToDeviceSpaceTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nCGContextConvertPointToDeviceSpace\nReturns a point that is transformed from user space coordinates to device space coordinates.\nCGContextConvertSizeToDeviceSpace\nReturns a size that is transformed from user space coordinates to device space coordinates.\nCGContextConvertSizeToUserSpace\nReturns a size that is transformed from device space coordinates to user space coordinates.\nCGContextConvertRectToDeviceSpace\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nCGContextConvertRectToUserSpace\nReturns a rectangle that is transformed from device space coordinate to user space coordinates."
  },
  {
    "title": "CGContextConvertSizeToUserSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456510-cgcontextconvertsizetouserspace",
    "html": "Parameters\nc\n\nA graphics context.\n\nsize\n\nThe size, in device space coordinates, to transform.\n\nReturn Value\n\nThe size in user space coordinates.\n\nSee Also\nConverting Between Device Space and User Space\nCGContextGetUserSpaceToDeviceSpaceTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nCGContextConvertPointToDeviceSpace\nReturns a point that is transformed from user space coordinates to device space coordinates.\nCGContextConvertPointToUserSpace\nReturns a point that is transformed from device space coordinates to user space coordinates.\nCGContextConvertSizeToDeviceSpace\nReturns a size that is transformed from user space coordinates to device space coordinates.\nCGContextConvertRectToDeviceSpace\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nCGContextConvertRectToUserSpace\nReturns a rectangle that is transformed from device space coordinate to user space coordinates."
  },
  {
    "title": "CGContextConvertRectToUserSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454165-cgcontextconvertrecttouserspace",
    "html": "Parameters\nc\n\nA graphics context.\n\nrect\n\nThe rectangle, in device space coordinates, to transform.\n\nReturn Value\n\nThe rectangle in user space coordinates.\n\nDiscussion\n\nIn general, affine transforms do not preserve rectangles. As a result, this function returns the smallest rectangle that contains the transformed corner points of the rectangle.\n\nSee Also\nConverting Between Device Space and User Space\nCGContextGetUserSpaceToDeviceSpaceTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nCGContextConvertPointToDeviceSpace\nReturns a point that is transformed from user space coordinates to device space coordinates.\nCGContextConvertPointToUserSpace\nReturns a point that is transformed from device space coordinates to user space coordinates.\nCGContextConvertSizeToDeviceSpace\nReturns a size that is transformed from user space coordinates to device space coordinates.\nCGContextConvertSizeToUserSpace\nReturns a size that is transformed from device space coordinates to user space coordinates.\nCGContextConvertRectToDeviceSpace\nReturns a rectangle that is transformed from user space coordinate to device space coordinates."
  },
  {
    "title": "CGContextConvertRectToDeviceSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456017-cgcontextconvertrecttodevicespac",
    "html": "Parameters\nc\n\nA graphics context.\n\nrect\n\nThe rectangle, in user space coordinates, to transform.\n\nReturn Value\n\nThe rectangle in device space coordinates.\n\nDiscussion\n\nIn general affine transforms do not preserve rectangles. As a result, this function returns the smallest rectangle that contains the transformed corner points of the rectangle.\n\nSee Also\nConverting Between Device Space and User Space\nCGContextGetUserSpaceToDeviceSpaceTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nCGContextConvertPointToDeviceSpace\nReturns a point that is transformed from user space coordinates to device space coordinates.\nCGContextConvertPointToUserSpace\nReturns a point that is transformed from device space coordinates to user space coordinates.\nCGContextConvertSizeToDeviceSpace\nReturns a size that is transformed from user space coordinates to device space coordinates.\nCGContextConvertSizeToUserSpace\nReturns a size that is transformed from device space coordinates to user space coordinates.\nCGContextConvertRectToUserSpace\nReturns a rectangle that is transformed from device space coordinate to user space coordinates."
  },
  {
    "title": "CGContextDrawPDFPage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456255-cgcontextdrawpdfpage",
    "html": "Parameters\nc\n\nThe graphics context in which to draw the PDF page.\n\npage\n\nA Core Graphics PDF page.\n\nDiscussion\n\nThis function works in conjunction with the CGPDFPageRef type to draw individual PDF pages into a context."
  },
  {
    "title": "CGPDFOperatorTable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfoperatortable",
    "html": "Overview\n\nYou pass an operator table and a PDF content stream to a CGPDFScanner object. When the scanner parses a PDF operator, Core Graphics invokes your callback for that operator. See also CGPDFScanner and CGPDFContentStream.\n\nNote\n\nThis object is not derived from CFType and therefore you can’t use the Core Foundation base functions on it, such as CFRetain and CFRelease. Memory management is handled by the specific functions CGPDFOperatorTableRetain and CGPDFOperatorTableRelease.\n\nFor more about PDF operators, see the latest version of PDF Reference, Adobe Systems Incorporated.\n\nTopics\nCreating a PDF Operator Table\nCGPDFOperatorTableCreate\nCreates an empty PDF operator table.\nSetting Callback Functions\nCGPDFOperatorTableSetCallback\nSets a callback function for a PDF operator.\nRetaining and Releasing a PDF Operator Table\nCGPDFOperatorTableRetain\nIncrements the retain count of a CGPDFOperatorTable object.\nCGPDFOperatorTableRelease\nDecrements the retain count of a CGPDFOperatorTable object.\nCallbacks\nCGPDFOperatorCallback\nPerforms custom processing for PDF operators.\nData Types\nCGPDFOperatorTableRef\nA type that stores callback functions for PDF operators.\nSee Also\nOpaque Types\nCGBitmapContext\nA type of CGContextRef that you can use for drawing bits to memory.\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGLContext\nDeprecated. A type of CGContextRef for drawing OpenGL content.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFContext\nA type of CGContextRef for drawing PDF content.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills."
  },
  {
    "title": "CGLayerGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1450888-cglayergettypeid",
    "html": "Return Value\n\nThe type identifier for CGLayer objects.\n\nDiscussion\n\nA type identifier is an integer that identifies the opaque type to which a Core Foundation object belongs. You use type IDs in various contexts, such as when you are operating on heterogeneous collections."
  },
  {
    "title": "CGLayerRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1450900-cglayerretain",
    "html": "Parameters\nlayer\n\nThe layer to retain.\n\nReturn Value\n\nThe same layer you passed in as the layer parameter.\n\nDiscussion\n\nThis function is equivalent to calling CFRetain except that it does not crash if the layer parameter is null.\n\nSee Also\nRetaining and Releasing Layers\nCGLayerRelease\nDecrements the retain count of a layer object."
  },
  {
    "title": "CGContextDrawLayerAtPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1450894-cgcontextdrawlayeratpoint",
    "html": "Parameters\ncontext\n\nThe graphics context associated with the layer.\n\npoint\n\nThe location, in current user space coordinates, to use as the origin for the drawing.\n\nlayer\n\nThe layer whose contents you want to draw.\n\nDiscussion\n\nCalling the function CGContextDrawLayerAtPoint is equivalent to calling the function CGContextDrawLayerInRect with a rectangle that has its origin at point and its size equal to the size of the layer.\n\nSee Also\nDrawing Layer Content\nCGContextDrawLayerInRect\nDraws the contents of a layer object into the specified rectangle."
  },
  {
    "title": "CGLayerCreateWithContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1450892-cglayercreatewithcontext",
    "html": "Parameters\ncontext\n\nThe graphics context you want to create the layer relative to. The layer uses this graphics context as a reference for initialization.\n\nsize\n\nThe size, in default user space units, of the layer relative to the graphics context.\n\nauxiliaryInfo\n\nReserved for future use. Pass NULL.\n\nReturn Value\n\nA CGLayer object. You are responsible for releasing this object using the function CGLayerRelease when you no longer need the layer.\n\nDiscussion\n\nAfter you create a CGLayerRef object, you should reuse it whenever you can to facilitate the Core Graphics caching strategy. Core Graphics caches any objects that are reused, including CGLayerRef objects. Objects that are reused frequently remain in the cache. In contrast, objects that are used once in a while may be moved in and out of the cache according to their frequency of use. If you don’t reuse CGLayerRef objects, Core Graphics won’t cache them. This means that you lose an opportunity to improve the performance of your application."
  },
  {
    "title": "CGContextDrawLinearGradient | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454782-cgcontextdrawlineargradient",
    "html": "Parameters\ncontext\n\nA graphics context.\n\ngradient\n\nA gradient object.\n\nstartPoint\n\nThe coordinate that defines the starting point of the gradient.\n\nendPoint\n\nThe coordinate that defines the ending point of the gradient.\n\noptions\n\nOption flags (kCGGradientDrawsBeforeStartLocation or kCGGradientDrawsAfterEndLocation) that control whether the fill is extended beyond the starting or ending point.\n\nDiscussion\n\nThe color at location 0 in the CGGradient object is mapped to the starting point. The color at location 1 in the CGGradient object is mapped to the ending point. Colors are linearly interpolated between these two points based on the location values of the gradient. The option flags control whether the gradient is drawn before the start point or after the end point.\n\nSee Also\nDrawing With a Gradient\nCGContextDrawRadialGradient\nPaints a gradient fill that varies along the area defined by the provided starting and ending circles."
  },
  {
    "title": "CGContextGetTextMatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456154-cgcontextgettextmatrix",
    "html": "Parameters\nc\n\nThe graphics context for which to obtain the text matrix.\n\nReturn Value\n\nThe current text matrix.\n\nSee Also\nDrawing Text\nCGContextGetTextPosition\nReturns the location at which text is drawn.\nCGContextSelectFont\nSets the font and font size in a graphics context.\nCGContextSetCharacterSpacing\nSets the current character spacing.\nCGContextSetFont\nSets the platform font in a graphics context.\nCGContextSetFontSize\nSets the current font size.\nCGContextSetTextDrawingMode\nSets the current text drawing mode.\nCGContextSetTextMatrix\nSets the current text matrix.\nCGContextSetTextPosition\nSets the location at which text is drawn.\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGContextShowGlyphsAtPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1586502-cgcontextshowglyphsatpoint",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nc\n\nThe graphics context in which to display the glyphs.\n\nx\n\nA value for the x-coordinate of the user space at which to display the glyphs.\n\ny\n\nA value for the y-coordinate of the user space at which to display the glyphs.\n\nglyphs\n\nAn array of glyphs to display.\n\ncount\n\nThe total number of glyphs passed in the glyphs parameter.\n\nDiscussion\n\nThis function displays an array of glyphs at the specified position in the user space.\n\nSee Also\nDrawing Glyphs\nCGContextShowGlyphs\nDisplays an array of glyphs at the current text position.\nCGContextShowGlyphsWithAdvances\nDraws an array of glyphs with varying offsets.\nCGContextShowGlyphsAtPositions\nDraws glyphs at the provided position.\nRelated Documentation\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGContextDrawShading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456643-cgcontextdrawshading",
    "html": "Parameters\nc\n\nThe graphics context in which to draw the shading.\n\nshading\n\nA shading object. The shading object is retained; upon return, you may safely release it.\n\nDiscussion\n\nThe preferred way to draw gradients is to use a CGGradient object. See CGGradient.\n\nSee Also\nRelated Documentation\nCGContextDrawRadialGradient\nPaints a gradient fill that varies along the area defined by the provided starting and ending circles.\nCGContextDrawLinearGradient\nPaints a gradient fill that varies along the line defined by the provided starting and ending points."
  },
  {
    "title": "CGContextDrawRadialGradient | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455923-cgcontextdrawradialgradient",
    "html": "Parameters\ncontext\n\nA graphics context.\n\ngradient\n\nA CGGradient object.\n\nstartCenter\n\nThe coordinate that defines the center of the starting circle.\n\nstartRadius\n\nThe radius of the starting circle.\n\nendCenter\n\nThe coordinate that defines the center of the ending circle.\n\nendRadius\n\nThe radius of the ending circle.\n\noptions\n\nOption flags (kCGGradientDrawsBeforeStartLocation or kCGGradientDrawsAfterEndLocation) that control whether the gradient is drawn before the starting circle or after the ending circle.\n\nDiscussion\n\nThe color at location 0 in the CGGradient object is mapped to the circle defined by startCenter and startRadius. The color at location 1 in the CGGradient object is mapped to the circle defined by endCenter and endRadius. Colors are linearly interpolated between the starting and ending circles based on the location values of the gradient. The option flags control whether the gradient is drawn before the start point or after the end point.\n\nSee Also\nDrawing With a Gradient\nCGContextDrawLinearGradient\nPaints a gradient fill that varies along the line defined by the provided starting and ending points."
  },
  {
    "title": "CGContextShowGlyphs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1586500-cgcontextshowglyphs",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nc\n\nThe graphics context in which to display the glyphs.\n\nglyphs\n\nAn array of glyphs to display.\n\ncount\n\nThe total number of glyphs passed in the g parameter.\n\nDiscussion\n\nThis function displays an array of glyphs at the current text position, a point specified by the current text matrix.\n\nSee Also\nDrawing Glyphs\nCGContextShowGlyphsAtPoint\nDisplays an array of glyphs at a position you specify.\nCGContextShowGlyphsWithAdvances\nDraws an array of glyphs with varying offsets.\nCGContextShowGlyphsAtPositions\nDraws glyphs at the provided position.\nRelated Documentation\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGContextGetTextPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454687-cgcontextgettextposition",
    "html": "Parameters\nc\n\nThe graphics context from which to obtain the current text position.\n\nReturn Value\n\nReturns a point that specifies the x and y values at which text is to be drawn, in user space coordinates.\n\nSee Also\nDrawing Text\nCGContextGetTextMatrix\nReturns the current text matrix.\nCGContextSelectFont\nSets the font and font size in a graphics context.\nCGContextSetCharacterSpacing\nSets the current character spacing.\nCGContextSetFont\nSets the platform font in a graphics context.\nCGContextSetFontSize\nSets the current font size.\nCGContextSetTextDrawingMode\nSets the current text drawing mode.\nCGContextSetTextMatrix\nSets the current text matrix.\nCGContextSetTextPosition\nSets the location at which text is drawn.\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGContextBeginPage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454794-cgcontextbeginpage",
    "html": "Parameters\nc\n\nA page-based graphics context such as a PDF context. If you specify a context that does not support multiple pages, this function does nothing.\n\nmediaBox\n\nA rectangle defining the bounds of the new page, expressed in units of the default user space, or NULL. These bounds supersede any supplied for the media box when you created the context. If you pass NULL, Core Graphics uses the rectangle you supplied for the media box when the graphics context was created.\n\nDiscussion\n\nWhen using a graphics context that supports multiple pages, you should call this function together with CGContextEndPage to delineate the page boundaries in the output. In other words, each page should be bracketed by calls to CGContextBeginPage and CGContextEndPage. Core Graphics ignores all drawing operations performed outside a page boundary in a page-based context.\n\nSee Also\nSetting Up a Page-Based Graphics Context\nCGContextEndPage\nEnds the current page in a page-based graphics context."
  },
  {
    "title": "CGContextEndPage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455027-cgcontextendpage",
    "html": "Parameters\nc\n\nA page-based graphics context.\n\nDiscussion\n\nWhen using a graphics context that supports multiple pages, you should call this function to terminate drawing in the current page.\n\nSee Also\nSetting Up a Page-Based Graphics Context\nCGContextBeginPage\nStarts a new page in a page-based graphics context."
  },
  {
    "title": "CGContextSetFont | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454950-cgcontextsetfont",
    "html": "Parameters\nc\n\nThe graphics context for which to set the font.\n\nfont\n\nA font.\n\nSee Also\nDrawing Text\nCGContextGetTextMatrix\nReturns the current text matrix.\nCGContextGetTextPosition\nReturns the location at which text is drawn.\nCGContextSelectFont\nSets the font and font size in a graphics context.\nCGContextSetCharacterSpacing\nSets the current character spacing.\nCGContextSetFontSize\nSets the current font size.\nCGContextSetTextDrawingMode\nSets the current text drawing mode.\nCGContextSetTextMatrix\nSets the current text matrix.\nCGContextSetTextPosition\nSets the location at which text is drawn.\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify.\nRelated Documentation\nCGFontCreateWithPlatformFont\nCreates a font object from an Apple Type Services (ATS) font."
  },
  {
    "title": "CGContextSetCharacterSpacing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454786-cgcontextsetcharacterspacing",
    "html": "Parameters\nc\n\nThe graphics context for which to set the character spacing.\n\nspacing\n\nA value that represents the amount of additional space to place between glyphs, in text space coordinates.\n\nDiscussion\n\nCore Graphics adds the additional space to the advance between the origin of one character and the origin of the next character. For information about the text coordinate system, see CGContextSetTextMatrix.\n\nSee Also\nDrawing Text\nCGContextGetTextMatrix\nReturns the current text matrix.\nCGContextGetTextPosition\nReturns the location at which text is drawn.\nCGContextSelectFont\nSets the font and font size in a graphics context.\nCGContextSetFont\nSets the platform font in a graphics context.\nCGContextSetFontSize\nSets the current font size.\nCGContextSetTextDrawingMode\nSets the current text drawing mode.\nCGContextSetTextMatrix\nSets the current text matrix.\nCGContextSetTextPosition\nSets the location at which text is drawn.\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGContextSelectFont | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1586511-cgcontextselectfont",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nc\n\nThe graphics context for which to set the font and font size.\n\nname\n\nA null-terminated string that contains the PostScript name of the font to set.\n\nsize\n\nA value that specifies the font size to set, in text space units.\n\ntextEncoding\n\nA value that specifies the encoding used for the font. For a description of the available values, see CGTextEncoding.\n\nSee Also\nDrawing Text\nCGContextGetTextMatrix\nReturns the current text matrix.\nCGContextGetTextPosition\nReturns the location at which text is drawn.\nCGContextSetCharacterSpacing\nSets the current character spacing.\nCGContextSetFont\nSets the platform font in a graphics context.\nCGContextSetFontSize\nSets the current font size.\nCGContextSetTextDrawingMode\nSets the current text drawing mode.\nCGContextSetTextMatrix\nSets the current text matrix.\nCGContextSetTextPosition\nSets the location at which text is drawn.\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGContextSetTextDrawingMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454253-cgcontextsettextdrawingmode",
    "html": "Parameters\nc\n\nA graphics context.\n\nmode\n\nA text drawing mode (such as kCGTextFill or kCGTextStroke) that specifies how Core Graphics renders individual glyphs in a graphics context. See CGTextDrawingMode for a complete list.\n\nSee Also\nDrawing Text\nCGContextGetTextMatrix\nReturns the current text matrix.\nCGContextGetTextPosition\nReturns the location at which text is drawn.\nCGContextSelectFont\nSets the font and font size in a graphics context.\nCGContextSetCharacterSpacing\nSets the current character spacing.\nCGContextSetFont\nSets the platform font in a graphics context.\nCGContextSetFontSize\nSets the current font size.\nCGContextSetTextMatrix\nSets the current text matrix.\nCGContextSetTextPosition\nSets the location at which text is drawn.\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGPathCreateMutableCopy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411196-cgpathcreatemutablecopy",
    "html": "Parameters\npath\n\nThe path to copy.\n\nReturn Value\n\nA new, mutable, copy of the specified path. You are responsible for releasing this object.\n\nDiscussion\n\nYou can modify a mutable graphics path by calling the various path geometry functions, such as CGPathAddArc, CGPathAddLineToPoint, and CGPathMoveToPoint.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRelease\nDecrements the retain count of a graphics path.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGPathCreateCopyByDashingPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411134-cgpathcreatecopybydashingpath",
    "html": "Parameters\npath\n\nThe path to copy.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to elements of the converted path before adding them to the new path.\n\nphase\n\nA value that specifies how far into the dash pattern the line starts, in units of the user space. For example, passing a value of 3 means the line is drawn with the dash pattern starting at three units from its beginning. Passing a value of 0 draws a line starting with the beginning of a dash pattern.\n\nlengths\n\nAn array of values that specify the lengths of the painted segments and unpainted segments, respectively, of the dash pattern—or NULL for no dash pattern.\n\nFor example, passing an array with the values [2,3] sets a dash pattern that alternates between a 2-user-space-unit-long painted segment and a 3-user-space-unit-long unpainted segment. Passing the values [1,3,4,2] sets the pattern to a 1-unit painted segment, a 3-unit unpainted segment, a 4-unit painted segment, and a 2-unit unpainted segment.\n\ncount\n\nIf the lengths parameter specifies an array, pass the number of elements in the array. Otherwise, pass 0.\n\nReturn Value\n\nA new, immutable path. You are responsible for releasing this object.\n\nDiscussion\n\nThe new path is created so that filling the new path draws the same pixels as stroking the original path with the specified dash parameters.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRelease\nDecrements the retain count of a graphics path.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGPathRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411181-cgpathretain",
    "html": "Parameters\npath\n\nThe graphics path to retain.\n\nReturn Value\n\nThe same path you passed in as the path parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the path parameter is NULL.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRelease\nDecrements the retain count of a graphics path."
  },
  {
    "title": "CGPathCreateCopyByStrokingPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411128-cgpathcreatecopybystrokingpath",
    "html": "Parameters\npath\n\nThe path to copy.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to elements of the converted path before adding them to the new path.\n\nlineWidth\n\nThe line width to use, in user space units. The value must be greater than 0.\n\nlineCap\n\nA line cap style constant—kCGLineCapButt (the default), kCGLineCapRound, or kCGLineCapSquare.\n\nlineJoin\n\nA line join value—kCGLineJoinMiter (the default), kCGLineJoinRound, or kCGLineJoinBevel.\n\nmiterLimit\n\nThe miter limit to use.\n\nReturn Value\n\nA new, immutable path. You are responsible for releasing this object.\n\nDiscussion\n\nThe new path is created so that filling the new path draws the same pixels as stroking the original path.\n\nIf the line join style is set to kCGLineJoinMiter, Core Graphics uses the miter limit to determine whether the lines should be joined with a bevel instead of a miter. Core Graphics divides the length of the miter by the line width. If the result is greater than the miter limit, Core Graphics converts the style to a bevel.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRelease\nDecrements the retain count of a graphics path.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGPathCreateMutableCopyByTransformingPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411150-cgpathcreatemutablecopybytransfo",
    "html": "Parameters\npath\n\nThe path to copy.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to all elements of the new path.\n\nReturn Value\n\nA new, mutable copy of the specified path transformed by the transform parameter. You are responsible for releasing this object.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByTransformingPath\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathRelease\nDecrements the retain count of a graphics path.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGPathCreateCopyByTransformingPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411161-cgpathcreatecopybytransformingpa",
    "html": "Parameters\npath\n\nThe path to copy.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to all elements of the new path.\n\nReturn Value\n\nA new, immutable copy of the path. You are responsible for releasing this object.\n\nSee Also\nCreating and Managing Paths\nCGPathCreateMutable\nCreates a mutable graphics path.\nCGPathCreateWithEllipseInRect\nCreate an immutable path of an ellipse.\nCGPathCreateWithRect\nCreate an immutable path of a rectangle.\nCGPathCreateWithRoundedRect\nCreate an immutable path of a rounded rectangle.\nCGPathCreateCopy\nCreates an immutable copy of a graphics path.\nCGPathCreateCopyByDashingPath\nCreates a dashed copy of another path.\nCGPathCreateCopyByStrokingPath\nCreates a stroked copy of another path.\nCGPathCreateMutableCopy\nCreates a mutable copy of an existing graphics path.\nCGPathCreateMutableCopyByTransformingPath\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nCGPathRelease\nDecrements the retain count of a graphics path.\nCGPathRetain\nIncrements the retain count of a graphics path."
  },
  {
    "title": "CGColorGetConstantColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454283-cgcolorgetconstantcolor",
    "html": "Parameters\ncolorName\n\nA color name. You can pass any of constants in Constant Colors.\n\nReturn Value\n\nA color object.\n\nDiscussion\n\nAs this function is not a “Copy” or “Create” function, it does not necessarily return a new reference each time it's called. As a consequence, you should not release the returned value. However, colors returned from this function can be retained and released in a properly nested fashion, just as any other Core Foundation type can."
  },
  {
    "title": "divided(atDistance:from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgrect/2299988-divided",
    "html": "Parameters\natDistance\n\nA distance from the rectangle side specified in the fromEdge parameter, defining the line along which to divide the rectangle.\n\nfromEdge\n\nThe side of the rectangle from which to measure the atDistance parameter, defining the line along which to divide the rectangle.\n\nReturn Value\n\nA tuple containing two rectangles:\n\nslice: The component rectangle nearest the edge of the original rectangle specified in the fromEdge parameter, with width equal to the atDistance parameter.\n\nremainder: The component rectangle equal to the remaining area of the original rectangle not included in the slice rectangle.\n\nDiscussion\n\nTogether the fromEdge and atDistance parameters define a line (parallel to the specified edge of the rectangle and at the specified distance from that edge) that divides the rectangle into two component rectangles.\n\nSee Also\nCreating Derived Rectangles\nvar standardized: CGRect\nReturns a rectangle with a positive width and height.\nvar integral: CGRect\nReturns the smallest rectangle that results from converting the source rectangle values to integers.\nfunc applying(CGAffineTransform) -> CGRect\nApplies an affine transform to a rectangle.\nfunc insetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle that is smaller or larger than the source rectangle, with the same center point.\nfunc offsetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle with an origin that is offset from that of the source rectangle.\nfunc union(CGRect) -> CGRect\nReturns the smallest rectangle that contains the two source rectangles.\nfunc intersection(CGRect) -> CGRect\nReturns the intersection of two rectangles.\nenum CGRectEdge\nCoordinates that establish the edges of a rectangle."
  },
  {
    "title": "CGFontCopyPostScriptName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396346-cgfontcopypostscriptname",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe PostScript name of the font.\n\nDiscussion\n\nFor more information on PostScript format, see Adobe Type 1 Font Format, which is available from http://partners.adobe.com/.\n\nSee Also\nWorking With PostScript Fonts\nCGFontCanCreatePostScriptSubset\nDetermines whether Core Graphics can create a subset of the font in PostScript format.\nCGFontCreatePostScriptSubset\nCreates a subset of the font in the specified PostScript format.\nCGFontCreatePostScriptEncoding\nCreates a PostScript encoding of a font."
  },
  {
    "title": "CGFontCreateCopyWithVariations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396373-cgfontcreatecopywithvariations",
    "html": "Parameters\nfont\n\nThe font to copy.\n\nvariations\n\nA variation specification dictionary that contains keys corresponding to the variation axis names of the font. Each key in the dictionary is a variation axis name. The value for each key is the value specified for that particular variation axis represented as a CFNumber object. If a variation axis name is not specified in variations, then the current value from font is used.\n\nReturn Value\n\nThe font object.\n\nSee Also\nCreating a CGFont Object\nCGFontCreateWithDataProvider\nCreates a font object from data supplied from a data provider.\nCGFontCreateWithFontName\nCreates a font object corresponding to the font specified by a PostScript or full name.\nCGFontCreateWithPlatformFont\nCreates a font object from an Apple Type Services (ATS) font.\nDeprecated"
  },
  {
    "title": "CGFontRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396384-cgfontretain",
    "html": "Parameters\nfont\n\nThe font to retain.\n\nReturn Value\n\nThe same font you specified in the font parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the font parameter is NULL.\n\nSee Also\nRetaining and Releasing a CGFont Object\nCGFontRelease\nDecrements the retain count of a font."
  },
  {
    "title": "CGFontCreateWithFontName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396330-cgfontcreatewithfontname",
    "html": "Parameters\nname\n\nThe PostScript or full name of a font.\n\nReturn Value\n\nThe font object or NULL if the font can't be created. You are responsible for releasing this object using CGFontRelease.\n\nDiscussion\n\nBefore drawing text in a Core Graphics context, you must set the font in the current graphics state by calling the function CGContextSetFont.\n\nSee Also\nCreating a CGFont Object\nCGFontCreateWithDataProvider\nCreates a font object from data supplied from a data provider.\nCGFontCreateCopyWithVariations\nCreates a copy of a font using a variation specification dictionary.\nCGFontCreateWithPlatformFont\nCreates a font object from an Apple Type Services (ATS) font.\nDeprecated"
  },
  {
    "title": "CGImageCreateCopy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455615-cgimagecreatecopy",
    "html": "Parameters\nimage\n\nThe image to copy.\n\nReturn Value\n\nAn copy of the image.\n\nSee Also\nCreating Bitmap Images\nCGImageCreate\nCreates a bitmap image from data supplied by a data provider.\nCGImageCreateCopyWithColorSpace\nCreates a copy of a bitmap image, replacing its colorspace.\nCGImageCreateWithJPEGDataProvider\nCreates a bitmap image using JPEG-encoded data supplied by a data provider.\nCGImageCreateWithPNGDataProvider\nCreates a bitmap image using PNG-encoded data supplied by a data provider.\nCGImageCreateWithImageInRect\nCreates a bitmap image using the data contained within a subregion of an existing bitmap image.\nCGImageCreateWithMask\nCreates a bitmap image from an existing image and an image mask.\nCGImageCreateWithMaskingColors\nCreates a bitmap image by masking an existing bitmap image with the provided color values."
  },
  {
    "title": "kCGColorSpaceGenericRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgcolorspacegenericrgb",
    "html": "Deprecated\n\nUse kCGColorSpaceSRGB instead."
  },
  {
    "title": "CGPathAddRelativeArc | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411136-cgpathaddrelativearc",
    "html": "Parameters\npath\n\nThe mutable graphics path to change.\n\nmatrix\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the arc before it is added to the path.\n\nx\n\nThe x-coordinate of the center point of the arc.\n\ny\n\nThe y-coordinate of the center point of the arc.\n\nradius\n\nThe radius of the arc.\n\nstartAngle\n\nThe angle (in radians) that determines the starting point of the arc, measured from the x-axis in the current user space.\n\ndelta\n\nThe distance the arc should travel (in radians). A positive value indicates a counter-clockwise arc in the current user space.\n\nDiscussion\n\nThe angle to the second endpoint of the arc is calculated by adding the delta to the start angle.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGPathAddLines | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411171-cgpathaddlines",
    "html": "Parameters\npath\n\nThe mutable path to change.\n\nm\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the lines before adding them to the path.\n\npoints\n\nAn array of points that specifies the line segments to add.\n\ncount\n\nThe number of elements in the array.\n\nDiscussion\n\nThis is a convenience function that adds a sequence of connected line segments to a path. This function is equivalent to calling the CGPathMoveToPoint function to move to the starting point of the first line segment, then repeatedly calling the CGPathAddLineToPoint to append the sequence of line segments.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGPathAddPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411201-cgpathaddpath",
    "html": "Parameters\npath1\n\nThe mutable path to change.\n\nm\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to path2 before it is added to path1.\n\npath2\n\nThe path to add.\n\nDiscussion\n\nIf the source path is non-empty, then its path elements are appended in order onto the mutable path. After the call completes, the start point and current point of the path are those of the last subpath in path2.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGPathApply | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411203-cgpathapply",
    "html": "Parameters\npath\n\nThe path to which the function will be applied.\n\ninfo\n\nA pointer to the user data that Core Graphics will pass to the function being applied, or NULL.\n\nfunction\n\nA pointer to the function to apply. See CGPathApplierFunction for more information.\n\nDiscussion\n\nFor each element in the specified path, Core Graphics calls the applier function, which can examine (but not modify) the element.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGPathAddRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411144-cgpathaddrect",
    "html": "Parameters\npath\n\nThe mutable path to change.\n\nm\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the rectangle before adding it to the path.\n\nrect\n\nThe rectangle to add.\n\nDiscussion\n\nThis is a convenience function that adds a rectangle to a path. Calling this function is equivalent to using CGRectGetMinX and related functions to find the corners of the rectangle, then using the CGPathMoveToPoint, CGPathAddLineToPoint, and CGPathCloseSubpath functions to add each line segment of the rectangle.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGPathAddRects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411153-cgpathaddrects",
    "html": "Parameters\npath\n\nThe mutable path to change.\n\nm\n\nAn affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the rectangles before adding them to the path.\n\nrects\n\nThe array of new rectangles to add.\n\ncount\n\nThe number of elements in the array.\n\nDiscussion\n\nThis is a convenience function that adds an array of rectangles to a path. This function is equivalent to repeatedly calling the CGPathAddRect function to append the sequence of rectangles.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGPathAddRoundedRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411124-cgpathaddroundedrect",
    "html": "Parameters\npath\n\nThe mutable path to change.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the rectangle before adding it to the path.\n\nrect\n\nThe rectangle to add.\n\ncornerWidth\n\nThe width of the rounded corner sections.\n\ncornerHeight\n\nThe height of the rounded corner sections.\n\nDiscussion\n\nThis is a convenience function that adds a path of an rounded rectangle.\n\nEach corner of the rounded rectangle is one-quarter of an ellipse with axes equal to the cornerWidth and cornerHeight parameters. The rounded rectangle forms a complete subpath and is oriented in the clockwise direction.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGPathCloseSubpath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411188-cgpathclosesubpath",
    "html": "Parameters\npath\n\nThe path to change.\n\nDiscussion\n\nAppends a line from the current point to the starting point of the current subpath and ends the subpath.\n\nAfter closing the subpath, your application can begin a new subpath without first calling CGPathMoveToPoint. In this case, a new subpath is implicitly created with a starting and current point equal to the previous subpath’s starting point.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGPathRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathref",
    "html": "See Also\n2D Drawing\nCGContextRef\nA Quartz 2D drawing environment.\nCGImageRef\nA bitmap image or image mask.\nCGMutablePathRef\nA mutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nCGLayerRef\nAn offscreen context for reusing content drawn with Core Graphics."
  },
  {
    "title": "CGPathAddEllipseInRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411222-cgpathaddellipseinrect",
    "html": "Parameters\npath\n\nThe path to modify.\n\nm\n\nAn affine transform to apply to the ellipse, or NULL if you don’t want to transform the ellipse.\n\nrect\n\nA rectangle to enclose the ellipse.\n\nDiscussion\n\nThe ellipse is approximated by a sequence of Bézier curves. Its center is the midpoint of the rectangle defined by the rect parameter. If the rectangle is square, then the ellipse is circular with a radius equal to one-half the width (or height) of the rectangle. If the rect parameter specifies a rectangular shape, then the major and minor axes of the ellipse are defined by the width and height of the rectangle.\n\nThe ellipse forms a complete subpath of the path—that is, the ellipse drawing starts with a move-to operation and ends with a close-subpath operation, with all moves oriented in the clockwise direction. If you supply an affine transform, then the constructed Bézier curves that define the ellipse are transformed before they are added to the path.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "CGPathGetBoundingBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411165-cgpathgetboundingbox",
    "html": "Parameters\npath\n\nThe graphics path to evaluate.\n\nReturn Value\n\nA rectangle that represents the bounding box of the specified path. If the path is empty, this function returns CGRectNull.\n\nDiscussion\n\nThe bounding box is the smallest rectangle completely enclosing all points in the path, including control points for Bézier and quadratic curves.\n\nSee Also\nGetting Information about Core Graphics Paths\nCGPathEqualToPath\nIndicates whether two graphics paths are equivalent.\nCGPathGetPathBoundingBox\nReturns the bounding box of a graphics path.\nCGPathGetCurrentPoint\nReturns the current point in a graphics path.\nCGPathGetTypeID\nReturns the Core Foundation type identifier for Core Graphics paths.\nCGPathIsEmpty\nIndicates whether or not a graphics path is empty.\nCGPathIsRect\nIndicates whether or not a graphics path represents a rectangle.\nCGPathContainsPoint\nChecks whether a point is contained in a graphics path."
  },
  {
    "title": "CGContextSetStrokeColorWithColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456196-cgcontextsetstrokecolorwithcolor",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\ncolor\n\nThe new stroke color.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context."
  },
  {
    "title": "CGPathGetCurrentPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411132-cgpathgetcurrentpoint",
    "html": "Parameters\npath\n\nThe path to evaluate.\n\nReturn Value\n\nThe current point in the specified path.\n\nDiscussion\n\nIf the path is empty—that is, if it has no elements—this function returns CGPointZero (see CGGeometry). To determine whether a path is empty, use CGPathIsEmpty.\n\nSee Also\nGetting Information about Core Graphics Paths\nCGPathEqualToPath\nIndicates whether two graphics paths are equivalent.\nCGPathGetBoundingBox\nReturns the bounding box containing all points in a graphics path.\nCGPathGetPathBoundingBox\nReturns the bounding box of a graphics path.\nCGPathGetTypeID\nReturns the Core Foundation type identifier for Core Graphics paths.\nCGPathIsEmpty\nIndicates whether or not a graphics path is empty.\nCGPathIsRect\nIndicates whether or not a graphics path represents a rectangle.\nCGPathContainsPoint\nChecks whether a point is contained in a graphics path."
  },
  {
    "title": "CGPathGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411192-cgpathgettypeid",
    "html": "Return Value\n\nThe Core Foundation identifier for the opaque type CGPathRef.\n\nSee Also\nGetting Information about Core Graphics Paths\nCGPathEqualToPath\nIndicates whether two graphics paths are equivalent.\nCGPathGetBoundingBox\nReturns the bounding box containing all points in a graphics path.\nCGPathGetPathBoundingBox\nReturns the bounding box of a graphics path.\nCGPathGetCurrentPoint\nReturns the current point in a graphics path.\nCGPathIsEmpty\nIndicates whether or not a graphics path is empty.\nCGPathIsRect\nIndicates whether or not a graphics path represents a rectangle.\nCGPathContainsPoint\nChecks whether a point is contained in a graphics path."
  },
  {
    "title": "CGPathIsEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411149-cgpathisempty",
    "html": "Parameters\npath\n\nThe path to evaluate.\n\nReturn Value\n\nA Boolean value that indicates whether the specified path is empty.\n\nDiscussion\n\nAn empty path contains no elements.\n\nSee Also\nGetting Information about Core Graphics Paths\nCGPathEqualToPath\nIndicates whether two graphics paths are equivalent.\nCGPathGetBoundingBox\nReturns the bounding box containing all points in a graphics path.\nCGPathGetPathBoundingBox\nReturns the bounding box of a graphics path.\nCGPathGetCurrentPoint\nReturns the current point in a graphics path.\nCGPathGetTypeID\nReturns the Core Foundation type identifier for Core Graphics paths.\nCGPathIsRect\nIndicates whether or not a graphics path represents a rectangle.\nCGPathContainsPoint\nChecks whether a point is contained in a graphics path."
  },
  {
    "title": "CGPathIsRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411163-cgpathisrect",
    "html": "Parameters\npath\n\nThe path to evaluate.\n\nrect\n\nOn input, a pointer to an uninitialized rectangle. If the specified path represents a rectangle, on return contains a copy of the rectangle.\n\nReturn Value\n\nA Boolean value that indicates whether the specified path represents a rectangle. If the path represents a rectangle, returns YES.\n\nSee Also\nGetting Information about Core Graphics Paths\nCGPathEqualToPath\nIndicates whether two graphics paths are equivalent.\nCGPathGetBoundingBox\nReturns the bounding box containing all points in a graphics path.\nCGPathGetPathBoundingBox\nReturns the bounding box of a graphics path.\nCGPathGetCurrentPoint\nReturns the current point in a graphics path.\nCGPathGetTypeID\nReturns the Core Foundation type identifier for Core Graphics paths.\nCGPathIsEmpty\nIndicates whether or not a graphics path is empty.\nCGPathContainsPoint\nChecks whether a point is contained in a graphics path."
  },
  {
    "title": "CGContextSetShadowWithColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455205-cgcontextsetshadowwithcolor",
    "html": "Parameters\ncontext\n\nThe graphics context to modify.\n\noffset\n\nSpecifies a translation in base-space.\n\nblur\n\nA non-negative number specifying the amount of blur.\n\ncolor\n\nSpecifies the color of the shadow, which may contain a non-opaque alpha value. If NULL, then shadowing is disabled.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextSetStrokeColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454396-cgcontextsetstrokecolorspace",
    "html": "Parameters\nc\n\nThe graphics context for the new stroke color space.\n\ncolorspace\n\nThe new stroke color space. The color space is retained; upon return, you may safely release it.\n\nDiscussion\n\nAs a side effect when you call this function, Core Graphics assigns an appropriate initial value to the stroke color, based on the color space you specify. To change this value, call CGContextSetStrokeColor. Note that the preferred API is now CGContextSetStrokeColorWithColor.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextSetStrokeColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456283-cgcontextsetstrokecolor",
    "html": "Parameters\nc\n\nThe graphics context for which to set the current stroke color.\n\ncomponents\n\nAn array of intensity values describing the color to set. The number of array elements must equal the number of components in the current stroke color space, plus an additional component for the alpha value.\n\nDiscussion\n\nThe current stroke color space must not be a pattern color space. For information on setting the stroke color when using a pattern color space, see CGContextSetStrokePattern. Note that the preferred API is now CGContextSetStrokeColorWithColor.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGPDFDictionary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdictionary",
    "html": "Overview\n\nDictionary objects are the main building blocks of a PDF document. A key-value pair within a dictionary is called an entry. In a PDF dictionary, the key must be an array of characters. Within a given dictionary, the keys are unique—that is, no two keys in a single dictionary are equal (as determined by strcmp). The value associated with a key can be any kind of PDF object, including another dictionary. Dictionary objects are the main building blocks of a PDF document.\n\nMany functions that retrieve values from a PDF dictionary take the form:\n\nbool CGPDFDictionaryGet<DataType> (\n CGPDFDictionaryRef dictionary,\n const char *key,\n <DataType>Ref *value\n);\n\n\nThese functions test whether there is an object associated with the specified key. If there is an object associated with the specified key, they test its data type. If there is no associated object, or if there is but it is not of the expected type, the function returns NO. If there is an object associated with the specified key and it is of the expected type, the function returns YES and the object is passed back in the value parameter.\n\nThis object is not derived from CFType and therefore there are no functions for retaining and releasing it. CGPDFDictionary objects exist only as constituent parts of a CGPDFDocument object, and they are managed by their container.\n\nTopics\nApplying a Function to All Entries\nCGPDFDictionaryApplyFunction\nApplies a function to each entry in a dictionary.\nGetting Data from a Dictionary\nCGPDFDictionaryGetArray\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nCGPDFDictionaryGetBoolean\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nCGPDFDictionaryGetCount\nReturns the number of entries in a PDF dictionary.\nCGPDFDictionaryGetDictionary\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nCGPDFDictionaryGetInteger\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nCGPDFDictionaryGetName\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nCGPDFDictionaryGetNumber\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nCGPDFDictionaryGetObject\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nCGPDFDictionaryGetStream\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream.\nCGPDFDictionaryGetString\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string.\nCallbacks\nCGPDFDictionaryApplierFunction\nPerforms custom processing on a key-value pair from a PDF dictionary, using optional contextual information.\nData Types\nCGPDFDictionaryRef\nA type that encapsulates a PDF dictionary.\nSee Also\nOpaque Types\nCGBitmapContext\nA type of CGContextRef that you can use for drawing bits to memory.\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGLContext\nDeprecated. A type of CGContextRef for drawing OpenGL content.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFContext\nA type of CGContextRef for drawing PDF content.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGContextGetClipBoundingBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455387-cgcontextgetclipboundingbox",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nReturn Value\n\nThe bounding box of the clipping path, specified in user space.\n\nDiscussion\n\nThe bounding box is the smallest rectangle completely enclosing all points in the clipping path, including control points for any Bezier curves in the path.\n\nSee Also\nModifying Clipping Paths\nCGContextClip\nModifies the current clipping path, using the nonzero winding number rule.\nCGContextEOClip\nModifies the current clipping path, using the even-odd rule.\nCGContextClipToRect\nSets the clipping path to the intersection of the current clipping path with the area defined by the specified rectangle.\nCGContextClipToRects\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles.\nCGContextClipToMask\nMaps a mask into the specified rectangle and intersects it with the current clipping area of the graphics context."
  },
  {
    "title": "CGContextSetShadow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456082-cgcontextsetshadow",
    "html": "Parameters\ncontext\n\nA graphics context.\n\noffset\n\nSpecifies a translation of the context’s coordinate system, to establish an offset for the shadow ({0,0} specifies a light source immediately above the screen).\n\nblur\n\nA non-negative number specifying the amount of blur.\n\nDiscussion\n\nShadow parameters are part of the graphics state in a context. After shadowing is set, all objects drawn are shadowed using a black color with 1/3 alpha (in effect, RGBA = {0, 0, 0, 1.0/3.0}) in the DeviceRGB color space.\n\nTo turn off shadowing:\n\nUse the standard save/restore mechanism for the graphics state.\n\nUse CGContextSetShadowWithColor to set the shadow color to a fully transparent color (or pass NULL as the color).\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGPDFObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfobject",
    "html": "Overview\n\nPDF supports several basic types of object: Boolean values, integer and real numbers, strings, names, arrays, dictionaries, and streams. Most of these are represented in Core Graphics by corresponding specific types. A CGPDFObject can represent any of these types. You use CGPDFObject functions to determine the type of the object, and retrieve the object value if it is of an expected type.\n\nThis object is not derived from CFType and therefore there are no functions for retaining and releasing it. CGPDFObject objects exist as constituent parts of a CGPDFDocument object, and are managed by their container.\n\nTopics\nGetting Object Types and Values\nCGPDFObjectGetType\nReturns the PDF type identifier of an object.\nCGPDFObjectGetValue\nReturns whether an object is of a given type and if it is, retrieves its value.\nData Types\nCGPDFObjectRef\nA type that contains information about a PDF object.\nCGPDFBoolean\nA PDF Boolean value.\nCGPDFInteger\nA PDF integer value.\nCGPDFReal\nA PDF real value.\nConstants\nCGPDFObjectType\nTypes of PDF object.\nSee Also\nOpaque Types\nCGBitmapContext\nA type of CGContextRef that you can use for drawing bits to memory.\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGLContext\nDeprecated. A type of CGContextRef for drawing OpenGL content.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFContext\nA type of CGContextRef for drawing PDF content.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGPDFScanner | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfscanner",
    "html": "Overview\n\nYou can set up the PDF scanner object to invoke callbacks when it encounters specific PDF operators in the stream.\n\nThis object is not derived from CFType. Use CGPDFScannerRetain and CGPDFScannerRelease to manage the retain count of CGPDFScannerRef instances; do not use CFRetain and CFRelease.\n\nTopics\nCreating a PDF Scanner Object\nCGPDFScannerCreate\nCreates a PDF scanner.\nRetaining and Releasing PDF Scanner Objects\nCGPDFScannerRetain\nIncrements the retain count of a scanner object.\nCGPDFScannerRelease\nDecrements the retain count of a scanner object.\nParsing Content\nCGPDFScannerScan\nParses the content stream of a PDF scanner object.\nCGPDFScannerGetContentStream\nReturns the content stream associated with a PDF scanner object.\nGetting PDF Objects from the Scanner Stack\nCGPDFScannerPopObject\nRetrieves an object from the scanner stack.\nCGPDFScannerPopBoolean\nRetrieves a Boolean object from the scanner stack.\nCGPDFScannerPopInteger\nRetrieves an integer object from the scanner stack.\nCGPDFScannerPopNumber\nRetrieves a real value object from the scanner stack.\nCGPDFScannerPopName\nRetrieves a character string from the scanner stack.\nCGPDFScannerPopString\nRetrieves a string object from the scanner stack.\nCGPDFScannerPopArray\nRetrieves an array object from the scanner stack.\nCGPDFScannerPopDictionary\nRetrieves a PDF dictionary object from the scanner stack.\nCGPDFScannerPopStream\nRetrieves a PDF stream object from the scanner stack.\nData Types\nCGPDFScannerRef\nA type used to parse a PDF content stream.\nSee Also\nOpaque Types\nCGBitmapContext\nA type of CGContextRef that you can use for drawing bits to memory.\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGLContext\nDeprecated. A type of CGContextRef for drawing OpenGL content.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFContext\nA type of CGContextRef for drawing PDF content.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGPDFStream | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfstream",
    "html": "Overview\n\nA PDF stream consists of a dictionary that describes a sequence of bytes. Streams typically represent objects with potentially large amounts of data, such as images and page descriptions.\n\nThis object is not derived from CFType and therefore there are no functions for retaining and releasing it.\n\nTopics\nGetting Data from a PDF Stream\nCGPDFStreamCopyData\nReturns the data associated with a PDF stream.\nCGPDFStreamGetDictionary\nReturns the dictionary associated with a PDF stream.\nData Types\nCGPDFStreamRef\nA type that represents a PDF stream.\nConstants\nCGPDFDataFormat\nThe encoding format of PDF data.\nSee Also\nOpaque Types\nCGBitmapContext\nA type of CGContextRef that you can use for drawing bits to memory.\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGLContext\nDeprecated. A type of CGContextRef for drawing OpenGL content.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFContext\nA type of CGContextRef for drawing PDF content.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFString\nA text string in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGContextEndTransparencyLayer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456554-cgcontextendtransparencylayer",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nSee Also\nUsing Transparency Layers\nCGContextBeginTransparencyLayer\nBegins a transparency layer.\nCGContextBeginTransparencyLayerWithRect\nBegins a transparency layer whose contents are bounded by the specified rectangle."
  },
  {
    "title": "zero | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgrect/1455437-zero",
    "html": "Discussion\n\nThe zero rectangle is equivalent to one created by calling CGRect(x: 0, y: 0, width: 0, height: 0).\n\nSee Also\nSpecial Values\nstatic var infinite: CGRect\nA rectangle that has infinite extent.\nstatic var null: CGRect\nThe null rectangle, representing an invalid value.\ninit()\nCreates a rectangle with origin (0,0) and size (0,0)."
  },
  {
    "title": "CGContextShowGlyphsWithAdvances | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1586503-cgcontextshowglyphswithadvances",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nc\n\nThe graphics context in which to display the glyphs.\n\nglyphs\n\nAn array of glyphs.\n\nadvances\n\nAn array of offset values associated with each glyph in the array. Each value specifies the offset from the previous glyph's origin to the origin of the corresponding glyph. Offsets are specified in user space.\n\ncount\n\nThe number of glyphs in the specified array.\n\nDiscussion\n\nThis function draws an array of glyphs at the current point specified by the text matrix.\n\nSee Also\nDrawing Glyphs\nCGContextShowGlyphs\nDisplays an array of glyphs at the current text position.\nCGContextShowGlyphsAtPoint\nDisplays an array of glyphs at a position you specify.\nCGContextShowGlyphsAtPositions\nDraws glyphs at the provided position.\nRelated Documentation\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGContextShowGlyphsAtPositions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456200-cgcontextshowglyphsatpositions",
    "html": "Parameters\nc\n\nThe graphics context in which to display the glyphs.\n\nglyphs\n\nAn array of glyphs.\n\npositions\n\nThe positions for the glyphs. Each item in this array matches with the glyph at the corresponding index in the glyphs array. The position of each glyph is specified in text space, and, as a consequence, is transformed through the text matrix to user space.\n\ncount\n\nThe number of items in the glyphs array.\n\nSee Also\nDrawing Glyphs\nCGContextShowGlyphs\nDisplays an array of glyphs at the current text position.\nCGContextShowGlyphsAtPoint\nDisplays an array of glyphs at a position you specify.\nCGContextShowGlyphsWithAdvances\nDraws an array of glyphs with varying offsets."
  },
  {
    "title": "CGContextSetFontSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456426-cgcontextsetfontsize",
    "html": "Parameters\nc\n\nA graphics context.\n\nsize\n\nA font size, expressed in text space units.\n\nSee Also\nDrawing Text\nCGContextGetTextMatrix\nReturns the current text matrix.\nCGContextGetTextPosition\nReturns the location at which text is drawn.\nCGContextSelectFont\nSets the font and font size in a graphics context.\nCGContextSetCharacterSpacing\nSets the current character spacing.\nCGContextSetFont\nSets the platform font in a graphics context.\nCGContextSetTextDrawingMode\nSets the current text drawing mode.\nCGContextSetTextMatrix\nSets the current text matrix.\nCGContextSetTextPosition\nSets the location at which text is drawn.\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGContextShowText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1586507-cgcontextshowtext",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nc\n\nA graphics context.\n\nstring\n\nAn array of characters to draw.\n\nlength\n\nThe length of the array specified in the bytes parameter.\n\nDiscussion\n\nCore Graphics uses font data provided by the system to map each byte of the array through the encoding vector of the current font to obtain the glyph to display. Note that the font must have been set using CGContextSelectFont. Don’t use CGContextShowText in conjunction with CGContextSetFont.\n\nSee Also\nDrawing Text\nCGContextGetTextMatrix\nReturns the current text matrix.\nCGContextGetTextPosition\nReturns the location at which text is drawn.\nCGContextSelectFont\nSets the font and font size in a graphics context.\nCGContextSetCharacterSpacing\nSets the current character spacing.\nCGContextSetFont\nSets the platform font in a graphics context.\nCGContextSetFontSize\nSets the current font size.\nCGContextSetTextDrawingMode\nSets the current text drawing mode.\nCGContextSetTextMatrix\nSets the current text matrix.\nCGContextSetTextPosition\nSets the location at which text is drawn.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify.\nRelated Documentation\nCGContextShowGlyphsAtPoint\nDisplays an array of glyphs at a position you specify.\nCGContextShowGlyphs\nDisplays an array of glyphs at the current text position.\nCGContextShowGlyphsWithAdvances\nDraws an array of glyphs with varying offsets."
  },
  {
    "title": "CGContextSetTextPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456069-cgcontextsettextposition",
    "html": "Parameters\nc\n\nA graphics context.\n\nx\n\nA value for the x-coordinate at which to draw the text, in user space coordinates.\n\ny\n\nA value for the y-coordinate at which to draw the text, in user space coordinates.\n\nSee Also\nDrawing Text\nCGContextGetTextMatrix\nReturns the current text matrix.\nCGContextGetTextPosition\nReturns the location at which text is drawn.\nCGContextSelectFont\nSets the font and font size in a graphics context.\nCGContextSetCharacterSpacing\nSets the current character spacing.\nCGContextSetFont\nSets the platform font in a graphics context.\nCGContextSetFontSize\nSets the current font size.\nCGContextSetTextDrawingMode\nSets the current text drawing mode.\nCGContextSetTextMatrix\nSets the current text matrix.\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGContextRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontextref",
    "html": "Overview\n\nThe CGContextRef type represents a Quartz 2D drawing destination. A graphics context contains drawing parameters and all device-specific information needed to render the paint on a page to the destination, whether the destination is a window in an application, a bitmap image, a PDF document, or a printer.\n\nSee Also\n2D Drawing\nCGImageRef\nA bitmap image or image mask.\nCGPathRef\nAn immutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nCGMutablePathRef\nA mutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nCGLayerRef\nAn offscreen context for reusing content drawn with Core Graphics.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "Color Space Names | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/color_space_names",
    "html": "Overview\n\nA color space name constant can be passed as a parameter to the function CGColorSpaceCreateWithName.\n\nTopics\nConstants\nkCGColorSpaceDisplayP3\nThe Display P3 color space, created by Apple.\nkCGColorSpaceDisplayP3_HLG\nThe Display P3 color space, using the HLG transfer function.\nkCGColorSpaceDisplayP3_PQ_EOTF\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nkCGColorSpaceExtendedLinearDisplayP3\nThe Display P3 color space with a linear transfer function and extended-range values.\nkCGColorSpaceSRGB\nThe standard Red Green Blue (sRGB) color space.\nkCGColorSpaceLinearSRGB\nThe sRGB color space with a linear transfer function.\nkCGColorSpaceExtendedSRGB\nThe extended sRGB color space.\nkCGColorSpaceExtendedLinearSRGB\nThe sRGB color space with a linear transfer function and extended-range values.\nkCGColorSpaceGenericGrayGamma2_2\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nkCGColorSpaceLinearGray\nThe gray color space using a linear transfer function.\nkCGColorSpaceExtendedGray\nThe extended gray color space.\nkCGColorSpaceExtendedLinearGray\nThe extended gray color space with a linear transfer function.\nkCGColorSpaceGenericRGBLinear\nThe generic RGB color space with a linear transfer function.\nkCGColorSpaceGenericCMYK\nThe generic CMYK color space.\nkCGColorSpaceGenericXYZ\nThe XYZ color space, as defined by the CIE 1931 standard.\nkCGColorSpaceGenericLab\nThe generic LAB color space.\nkCGColorSpaceACESCGLinear\nThe ACEScg color space.\nkCGColorSpaceAdobeRGB1998\nThe Adobe RGB (1998) color space.\nkCGColorSpaceDCIP3\nThe DCI P3 color space, which is the digital cinema standard.\nkCGColorSpaceITUR_709\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nkCGColorSpaceROMMRGB\nThe Reference Output Medium Metric (ROMM) RGB color space.\nkCGColorSpaceITUR_2020\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nkCGColorSpaceITUR_2020_HLG\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nkCGColorSpaceITUR_2020_PQ_EOTF\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nkCGColorSpaceExtendedLinearITUR_2020\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values.\nkCGColorSpaceGenericRGB\nThe name of the generic RGB color space.\nkCGColorSpaceGenericGray\nThe name of the generic gray color space."
  },
  {
    "title": "CGImageGetBitmapInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454200-cgimagegetbitmapinfo",
    "html": "Parameters\nimage\n\nAn image.\n\nReturn Value\n\nThe bitmap information associated with an image.\n\nDiscussion\n\nThis function returns a constant that specifies:\n\nThe type of bitmap data—floating point or integer. You use the constant kCGBitmapFloatComponents to extract this information.\n\nWhether an alpha channel is in the data, and if so, how the alpha data is stored. You use the constant kCGBitmapAlphaInfoMask to extract the alpha information. Alpha information is specified as one of the constants listed in CGImageAlphaInfo.\n\nYou can extract the alpha information\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "CGFunctionRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1390864-cgfunctionrelease",
    "html": "Parameters\nfunction\n\nThe function object to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the function parameter is nil.\n\nSee Also\nRetaining and Releasing CGFunction Objects\nCGFunctionRetain\nIncrements the retain count of a function object."
  },
  {
    "title": "CGImageGetAlphaInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455401-cgimagegetalphainfo",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nA CGImageAlphaInfo constant that specifies (1) whether the bitmap contains an alpha channel, (2) where the alpha bits are located in the image data, and (3) whether the alpha value is premultiplied. For possible values, see Constants. The function returns kCGImageAlphaNone if the image parameter refers to an image mask.\n\nDiscussion\n\nThe alpha value is what determines the opacity of a pixel when it is drawn.\n\nSee Also\nGetting Information About an Image\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "CGImageCreateWithImageInRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454683-cgimagecreatewithimageinrect",
    "html": "Parameters\nimage\n\nThe image from which to extract the subimage.\n\nrect\n\nA rectangle specifying the portion of the image to keep.\n\nReturn Value\n\nA CGImageRef object that specifies a subimage of the image. If the rect parameter defines an area that is not in the image, returns NULL.\n\nDiscussion\n\nCropping removes content around the designated rectangle; it cuts out the desired area of the input image and returns an image of the cropped size.\n\nFigure 1 Cropping an image\n\nCGImageCreateWithImageInRect performs the following tasks to create the subimage:\n\nIt calls the CGRectIntegral function to adjust the rect parameter to integral bounds.\n\nIt intersects the rect with a rectangle whose origin is (0,0) and size is equal to the size of the image specified by the image parameter.\n\nIt reads the pixels within the resulting rectangle, treating the first pixel within as the origin of the subimage.\n\nIf W and H are the width and height of image, respectively, then the point (0,0) corresponds to the first pixel of the image data. The point (W–1, 0) is the last pixel of the first row of the image data, while (0, H–1) is the first pixel of the last row of the image data and (W–1, H–1) is the last pixel of the last row of the image data.\n\nImportant\n\nBe sure to specify the subrectangle's coordinates relative to the original image's full size, even if the UIImageView shows only a scaled version.\n\nThe resulting image retains a reference to the original image, which means you may release the original image after calling this function. In Swift, you do not need to release the original image reference explicitly.\n\nListing 1 Cropping an image using CGImageCreateWithImageInRect\n- (UIImage*) cropImage:(UIImage*)inputImage\n                toRect:(CGRect)cropRect\n             viewWidth:(CGFloat)viewWidth\n            viewHeight:(CGFloat)viewHeight\n{\n    // viewWidth, viewHeight are dimensions of imageView\n    const CGFloat imageViewScale = MAX(inputImage.size.width/_viewWidth, inputImage.size.height/_viewHeight);\n\n\n    // Scale cropRect to handle images larger than shown-on-screen size\n    cropRect.origin.x *= imageViewScale;\n    cropRect.origin.y *= imageViewScale;\n    cropRect.size.width *= imageViewScale;\n    cropRect.size.height *= imageViewScale;\n    \n    // Perform cropping in Core Graphics\n    CGImageRef cutImageRef = CGImageCreateWithImageInRect(inputImage.CGImage, cropRect);\n    \n    // Convert back to UIImage\n    UIImage* croppedImage = [UIImage imageWithCGImage:cutImageRef];\n    \n    // Clean up reference pointers\n    CGImageRelease(cutImageRef);\n    \n    return croppedImage;\n}\n\n\nIf you already use CIImage, or if you are post-processing images as CIImage data in Core Image, such as chaining together multiple filters to the cropped result, it may be more efficient to crop CIImage directly in the Core Image framework using the CICrop filter; in this case, use the convenience function imageByCroppingToRect:.\n\nSee Also\nCreating Bitmap Images\nCGImageCreate\nCreates a bitmap image from data supplied by a data provider.\nCGImageCreateCopy\nCreates a copy of a bitmap image.\nCGImageCreateCopyWithColorSpace\nCreates a copy of a bitmap image, replacing its colorspace.\nCGImageCreateWithJPEGDataProvider\nCreates a bitmap image using JPEG-encoded data supplied by a data provider.\nCGImageCreateWithPNGDataProvider\nCreates a bitmap image using PNG-encoded data supplied by a data provider.\nCGImageCreateWithMask\nCreates a bitmap image from an existing image and an image mask.\nCGImageCreateWithMaskingColors\nCreates a bitmap image by masking an existing bitmap image with the provided color values."
  },
  {
    "title": "CGImageCreateWithPNGDataProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454993-cgimagecreatewithpngdataprovider",
    "html": "Parameters\nsource\n\nA data provider supplying PNG-encoded data.\n\ndecode\n\nThe decode array for the image. Typically a decode array is unnecessary, and you should pass NULL.\n\nshouldInterpolate\n\nA Boolean value that specifies whether interpolation should occur. The interpolation setting specifies whether a pixel-smoothing algorithm should be applied to the image.\n\nintent\n\nA CGColorRenderingIntent constant that specifies how to handle colors that are not located within the gamut of the destination color space of a graphics context.\n\nReturn Value\n\nA new CGImage. You are responsible for releasing this object by calling CGImageRelease.\n\nSee Also\nCreating Bitmap Images\nCGImageCreate\nCreates a bitmap image from data supplied by a data provider.\nCGImageCreateCopy\nCreates a copy of a bitmap image.\nCGImageCreateCopyWithColorSpace\nCreates a copy of a bitmap image, replacing its colorspace.\nCGImageCreateWithJPEGDataProvider\nCreates a bitmap image using JPEG-encoded data supplied by a data provider.\nCGImageCreateWithImageInRect\nCreates a bitmap image using the data contained within a subregion of an existing bitmap image.\nCGImageCreateWithMask\nCreates a bitmap image from an existing image and an image mask.\nCGImageCreateWithMaskingColors\nCreates a bitmap image by masking an existing bitmap image with the provided color values."
  },
  {
    "title": "CGImageRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1556741-cgimageretain",
    "html": "Parameters\nimage\n\nThe image to retain.\n\nReturn Value\n\nThe same image you passed in as the image parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except that it does not cause an error if the image parameter is NULL.\n\nSee Also\nRetaining and Releasing Images\nCGImageRelease\nDecrements the retain count of a bitmap image."
  },
  {
    "title": "CGImageCreateWithJPEGDataProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454920-cgimagecreatewithjpegdataprovide",
    "html": "Parameters\nsource\n\nA data provider supplying JPEG-encoded data.\n\ndecode\n\nThe decode array for the image. Typically a decode array is unnecessary, and you should pass NULL.\n\nshouldInterpolate\n\nA Boolean value that specifies whether interpolation should occur. The interpolation setting specifies whether a pixel-smoothing algorithm should be applied to the image.\n\nintent\n\nA CGColorRenderingIntent constant that specifies how to handle colors that are not located within the gamut of the destination color space of a graphics context.\n\nReturn Value\n\nA new CGImage. You are responsible for releasing this object by calling CGImageRelease.\n\nSee Also\nCreating Bitmap Images\nCGImageCreate\nCreates a bitmap image from data supplied by a data provider.\nCGImageCreateCopy\nCreates a copy of a bitmap image.\nCGImageCreateCopyWithColorSpace\nCreates a copy of a bitmap image, replacing its colorspace.\nCGImageCreateWithPNGDataProvider\nCreates a bitmap image using PNG-encoded data supplied by a data provider.\nCGImageCreateWithImageInRect\nCreates a bitmap image using the data contained within a subregion of an existing bitmap image.\nCGImageCreateWithMask\nCreates a bitmap image from an existing image and an image mask.\nCGImageCreateWithMaskingColors\nCreates a bitmap image by masking an existing bitmap image with the provided color values."
  },
  {
    "title": "CGImageCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455149-cgimagecreate",
    "html": "Parameters\nwidth\n\nThe width, in pixels, of the required image.\n\nheight\n\nThe height, in pixels, of the required image\n\nbitsPerComponent\n\nThe number of bits for each component in a source pixel. For example, if the source image uses the RGBA-32 format, you would specify 8 bits per component.\n\nbitsPerPixel\n\nThe total number of bits in a source pixel. This value must be at least bitsPerComponent times the number of components per pixel.\n\nbytesPerRow\n\nThe number of bytes of memory for each horizontal row of the bitmap.\n\ncolorspace\n\nThe color space for the image. The color space is retained; on return, you may safely release it.\n\nbitmapInfo\n\nA constant that specifies whether the bitmap should contain an alpha channel and its relative location in a pixel, along with whether the components are floating-point or integer values.\n\nprovider\n\nThe source of data for the bitmap. For information about supported data formats, see the discussion below. The provider is retained; on return, you may safely release it.\n\ndecode\n\nThe decode array for the image. If you do not want to allow remapping of the image’s color values, pass NULL for the decode array. For each color component in the image’s color space (including the alpha component), a decode array provides a pair of values denoting the upper and lower limits of a range. For example, the decode array for a source image in the RGB color space would contain six entries total, consisting of one pair each for red, green, and blue. When the image is rendered, Core Graphics uses a linear transform to map the original component value into a relative number within your designated range that is appropriate for the destination color space.\n\nshouldInterpolate\n\nA Boolean value that specifies whether interpolation should occur. The interpolation setting specifies whether Core Graphics should apply a pixel-smoothing algorithm to the image. Without interpolation, the image may appear jagged or pixelated when drawn on an output device with higher resolution than the image data.\n\nintent\n\nA rendering intent constant that specifies how Core Graphics should handle colors that are not located within the gamut of the destination color space of a graphics context. The rendering intent determines the exact method used to map colors from one color space to another. For descriptions of the defined rendering-intent constants, see CGColorRenderingIntent.\n\nReturn Value\n\nA new bitmap image. You are responsible for releasing this object by calling CGImageRelease.\n\nDiscussion\n\nThe data provider should provide raw data that matches the format specified by the other input parameters. To use encoded data (for example, from a file specified by a URL-based data provider), see CGImageCreateWithJPEGDataProvider and CGImageCreateWithPNGDataProvider.\n\nFor information on supported pixel formats, see Quartz 2D Programming Guide.\n\nSee Also\nCreating Bitmap Images\nCGImageCreateCopy\nCreates a copy of a bitmap image.\nCGImageCreateCopyWithColorSpace\nCreates a copy of a bitmap image, replacing its colorspace.\nCGImageCreateWithJPEGDataProvider\nCreates a bitmap image using JPEG-encoded data supplied by a data provider.\nCGImageCreateWithPNGDataProvider\nCreates a bitmap image using PNG-encoded data supplied by a data provider.\nCGImageCreateWithImageInRect\nCreates a bitmap image using the data contained within a subregion of an existing bitmap image.\nCGImageCreateWithMask\nCreates a bitmap image from an existing image and an image mask.\nCGImageCreateWithMaskingColors\nCreates a bitmap image by masking an existing bitmap image with the provided color values."
  },
  {
    "title": "CGGLContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgglcontext",
    "html": "Overview\n\nThese functions were deprecated in OS X v10.6 and removed in OS X v10.10.\n\nTopics\nCGGLContext Miscellaneous Functions\nCGGLContextCreate\nCreates a Quartz graphics context from an OpenGL context.\nCGGLContextUpdateViewportSize\nUpdates the size of the viewport associated with an OpenGL context.\nSee Also\nOpaque Types\nCGBitmapContext\nA type of CGContextRef that you can use for drawing bits to memory.\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFContext\nA type of CGContextRef for drawing PDF content.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGImageCreateCopyWithColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455355-cgimagecreatecopywithcolorspace",
    "html": "Parameters\nimage\n\nThe graphics image to copy.\n\ncolorspace\n\nThe destination color space. The number of components in this color space must be the same as the number in the specified image.\n\nReturn Value\n\nA new CGImage that is a copy of the image passed as the image parameter but with its color space replaced by that specified by the colorspace parameter. Returns NULL if image is an image mask, or if the number of components of colorspace is not the same as the number of components of the colorspace of image. You are responsible for releasing this object using CGImageRelease.\n\nSee Also\nCreating Bitmap Images\nCGImageCreate\nCreates a bitmap image from data supplied by a data provider.\nCGImageCreateCopy\nCreates a copy of a bitmap image.\nCGImageCreateWithJPEGDataProvider\nCreates a bitmap image using JPEG-encoded data supplied by a data provider.\nCGImageCreateWithPNGDataProvider\nCreates a bitmap image using PNG-encoded data supplied by a data provider.\nCGImageCreateWithImageInRect\nCreates a bitmap image using the data contained within a subregion of an existing bitmap image.\nCGImageCreateWithMask\nCreates a bitmap image from an existing image and an image mask.\nCGImageCreateWithMaskingColors\nCreates a bitmap image by masking an existing bitmap image with the provided color values."
  },
  {
    "title": "CGDataConsumerRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1508424-cgdataconsumerrelease",
    "html": "Parameters\nconsumer\n\nThe data consumer to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the consumer parameter is NULL.\n\nSee Also\nRetaining and Releasing Data Consumers\nCGDataConsumerRetain\nIncrements the retain count of a data consumer."
  },
  {
    "title": "CGContextConvertPointToDeviceSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455916-cgcontextconvertpointtodevicespa",
    "html": "Parameters\nc\n\nA graphics context.\n\npoint\n\nThe point, in user space coordinates, to transform.\n\nReturn Value\n\nThe coordinates of the point in device space coordinates.\n\nSee Also\nConverting Between Device Space and User Space\nCGContextGetUserSpaceToDeviceSpaceTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nCGContextConvertPointToUserSpace\nReturns a point that is transformed from device space coordinates to user space coordinates.\nCGContextConvertSizeToDeviceSpace\nReturns a size that is transformed from user space coordinates to device space coordinates.\nCGContextConvertSizeToUserSpace\nReturns a size that is transformed from device space coordinates to user space coordinates.\nCGContextConvertRectToDeviceSpace\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nCGContextConvertRectToUserSpace\nReturns a rectangle that is transformed from device space coordinate to user space coordinates."
  },
  {
    "title": "CGContextShowTextAtPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1586505-cgcontextshowtextatpoint",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nc\n\nA graphics context .\n\nx\n\nA value for the x-coordinate (in user space) at which to display the text.\n\ny\n\nA value for the y-coordinate (in user space) at which to display the text.\n\nstring\n\nAn array of characters to draw.\n\nlength\n\nThe length of the array specified in the string parameter.\n\nDiscussion\n\nCore Graphics uses font data provided by the system to map each byte of the array through the encoding vector of the current font to obtain the glyph to display. Note that the font must have been set using CGContextSelectFont. Don’t use CGContextShowTextAtPoint in conjunction with CGContextSetFont.\n\nSee Also\nDrawing Text\nCGContextGetTextMatrix\nReturns the current text matrix.\nCGContextGetTextPosition\nReturns the location at which text is drawn.\nCGContextSelectFont\nSets the font and font size in a graphics context.\nCGContextSetCharacterSpacing\nSets the current character spacing.\nCGContextSetFont\nSets the platform font in a graphics context.\nCGContextSetFontSize\nSets the current font size.\nCGContextSetTextDrawingMode\nSets the current text drawing mode.\nCGContextSetTextMatrix\nSets the current text matrix.\nCGContextSetTextPosition\nSets the location at which text is drawn.\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nRelated Documentation\nCGContextShowGlyphsAtPoint\nDisplays an array of glyphs at a position you specify.\nCGContextShowGlyphs\nDisplays an array of glyphs at the current text position.\nCGContextShowGlyphsWithAdvances\nDraws an array of glyphs with varying offsets."
  },
  {
    "title": "CGContextPathContainsPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454778-cgcontextpathcontainspoint",
    "html": "Parameters\ncontext\n\nA graphics context.\n\npoint\n\nThe point to check, specified in user space units.\n\nmode\n\nA path drawing mode. See CGPathDrawingMode.\n\nReturn Value\n\nReturns true if point is inside the current path of the graphics context; false otherwise.\n\nDiscussion\n\nA point is contained within the path of a graphics context if the point is inside the painted region when the path is stroked or filled with opaque colors using the specified path drawing mode. A point can be inside a path only if the path is explicitly closed by calling the function CGContextClosePath for paths drawn directly to the current context, or CGPathCloseSubpath for paths first created as CGPathRef objects and then drawn to the current context.\n\nSee Also\nGetting Information About Paths\nCGContextIsPathEmpty\nIndicates whether the current path contains any subpaths.\nCGContextGetPathCurrentPoint\nReturns the current point in a non-empty path.\nCGContextGetPathBoundingBox\nReturns the smallest rectangle that contains the current path."
  },
  {
    "title": "CGGeometry | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggeometry",
    "html": "Overview\n\nThe data structure CGPoint represents a point in a two-dimensional coordinate system. The data structure CGRect represents the location and dimensions of a rectangle. The data structure CGSize represents the dimensions of width and height.\n\nA CGPoint, CGRect, or CGSize structure does not explicitly define the unit of measure for its member quantities. A point’s x- and y-coordinates or a size’s width and height are unitless quantities—whether such measurements are treated as pixels, scale-factor-independent points, texture elements (texels), or some other unit depends on the API using the measurement, and on the context in which that API is used. For example, a CGRect structure specifying the frame of an NSView or UIView object defines the view’s dimensions in points, not pixels. However, the effects of using a CGPoint structure in a CGContextRef drawing operation depend on the scale factor associated with that context. Where not otherwise specified, you can assume that a CGPoint, CGRect, or CGSize structure is defined in points, not pixels. (For details, see Drawing and Printing Guide for iOS or High Resolution Guidelines for OS X.)\n\nThe height and width stored in a CGRect data structure can be negative. For example, a rectangle with an origin of [0.0, 0.0] and a size of [10.0,10.0] is exactly equivalent to a rectangle with an origin of [10.0, 10.0] and a size of [-10.0,-10.0]. Your application can standardize a rectangle—that is, ensure that the height and width are stored as positive values—by calling the CGRectStandardize function. All functions described in this reference that take CGRect data structures as inputs implicitly standardize those rectangles before calculating their results. For this reason, your applications should avoid directly reading and writing the data stored in the CGRect data structure. Instead, use the functions described here to manipulate rectangles and to retrieve their characteristics.\n\nTopics\nCreating a Dictionary Representation from a Geometric Primitive\nCGPointCreateDictionaryRepresentation\nReturns a dictionary representation of the specified point.\nCGSizeCreateDictionaryRepresentation\nReturns a dictionary representation of the specified size.\nCGRectCreateDictionaryRepresentation\nReturns a dictionary representation of the provided rectangle.\nCreating a Geometric Primitive from a Dictionary Representation\nCGPointMakeWithDictionaryRepresentation\nFills in a point using the contents of the specified dictionary.\nCGSizeMakeWithDictionaryRepresentation\nFills in a size using the contents of the specified dictionary.\nCGRectMakeWithDictionaryRepresentation\nFills in a rectangle using the contents of the specified dictionary.\nCreating a Geometric Primitive from Values\nCGPointMake\nReturns a point with the specified coordinates.\nCGRectMake\nReturns a rectangle with the specified coordinate and size values.\nCGSizeMake\nReturns a size with the specified dimension values.\nCGVectorMake\nReturns a vector with the specified dimension values.\nModifying Rectangles\nCGRectDivide\nDivides a source rectangle into two component rectangles.\nCGRectInset\nReturns a rectangle that is smaller or larger than the source rectangle, with the same center point.\nCGRectIntegral\nReturns the smallest rectangle that results from converting the source rectangle values to integers.\nCGRectIntersection\nReturns the intersection of two rectangles.\nCGRectOffset\nReturns a rectangle with an origin that is offset from that of the source rectangle.\nCGRectStandardize\nReturns a rectangle with a positive width and height.\nCGRectUnion\nReturns the smallest rectangle that contains the two source rectangles.\nComparing Values\nCGPointEqualToPoint\nReturns whether two points are equal.\nCGSizeEqualToSize\nReturns whether two sizes are equal.\nCGRectEqualToRect\nReturns whether two rectangles are equal in size and position.\nCGRectIntersectsRect\nReturns whether two rectangles intersect.\nChecking for Membership\nCGRectContainsPoint\nReturns whether a rectangle contains a specified point.\nCGRectContainsRect\nReturns whether the first rectangle contains the second rectangle.\nGetting Min, Mid, and Max Values\nCGRectGetMinX\nReturns the smallest value for the x-coordinate of the rectangle.\nCGRectGetMinY\nReturns the smallest value for the y-coordinate of the rectangle.\nCGRectGetMidX\nReturns the x- coordinate that establishes the center of a rectangle.\nCGRectGetMidY\nReturns the y-coordinate that establishes the center of the rectangle.\nCGRectGetMaxX\nReturns the largest value of the x-coordinate for the rectangle.\nCGRectGetMaxY\nReturns the largest value for the y-coordinate of the rectangle.\nGetting Height and Width\nCGRectGetHeight\nReturns the height of a rectangle.\nCGRectGetWidth\nReturns the width of a rectangle.\nChecking Rectangle Characteristics\nCGRectIsEmpty\nReturns whether a rectangle has zero width or height, or is a null rectangle.\nCGRectIsNull\nReturns whether the rectangle is equal to the null rectangle.\nCGRectIsInfinite\nReturns whether a rectangle is infinite.\nData Types\nCGFloat\nThe basic type for all floating-point values.\nCGPoint\nA structure that contains a point in a two-dimensional coordinate system.\nCGRect\nA structure that contains the location and dimensions of a rectangle.\nCGSize\nA structure that contains width and height values.\nCGVector\nA structure that contains a two-dimensional vector.\nConstants\nCGRectInfinite\nA rectangle that has infinite extent.\nGeometric Zeros\nA zero point, zero rectangle, or zero size.\nGeometrical Null\nThe null or empty rectangle.\nCGRectEdge\nCoordinates that establish the edges of a rectangle.\nCGFloat Informational Macros\nInformational macros for the CGFloat type.\nSee Also\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGContextGetUserSpaceToDeviceSpaceTransform | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455677-cgcontextgetuserspacetodevicespa",
    "html": "Parameters\nc\n\nA graphics context.\n\nReturn Value\n\nThe affine transforms that maps the user space of the graphics context to the device space.\n\nSee Also\nConverting Between Device Space and User Space\nCGContextConvertPointToDeviceSpace\nReturns a point that is transformed from user space coordinates to device space coordinates.\nCGContextConvertPointToUserSpace\nReturns a point that is transformed from device space coordinates to user space coordinates.\nCGContextConvertSizeToDeviceSpace\nReturns a size that is transformed from user space coordinates to device space coordinates.\nCGContextConvertSizeToUserSpace\nReturns a size that is transformed from device space coordinates to user space coordinates.\nCGContextConvertRectToDeviceSpace\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nCGContextConvertRectToUserSpace\nReturns a rectangle that is transformed from device space coordinate to user space coordinates."
  },
  {
    "title": "releaseConsumer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataconsumercallbacks/1454472-releaseconsumer",
    "html": "Discussion\n\nFor more information, see CGDataConsumerReleaseInfoCallback."
  },
  {
    "title": "CGMutablePathRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepathref",
    "html": "See Also\n2D Drawing\nCGContextRef\nA Quartz 2D drawing environment.\nCGImageRef\nA bitmap image or image mask.\nCGPathRef\nAn immutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nCGLayerRef\nAn offscreen context for reusing content drawn with Core Graphics.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGPDFArray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfarray",
    "html": "Overview\n\nPDF arrays may be heterogeneous—that is, they may contain any other PDF objects, including PDF strings, PDF dictionaries, and other PDF arrays.\n\nMany CGPDFArray functions to retrieve values from a PDF array take the form:\n\nbool CGPDFArrayGet<DataType> (\n CGPDFArrayRef array,\n size_t index,\n <DataType>Ref *value\n);\n\n\nThese functions test the data type of the object at the specified index. If the object is not of the expected type, the function returns NO. If the object is of the expected type, the function returns YES, and the object is passed back in the value parameter.\n\nThis type is not derived from CFTypeRef and therefore there are no functions for retaining and releasing it. CGPDFArrayRef objects exist only as constituent parts of a CGPDFDocumentRef object, and they are managed by their container.\n\nTopics\nGetting Data from a PDF Array\nCGPDFArrayGetArray\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nCGPDFArrayGetBoolean\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nCGPDFArrayGetCount\nReturns the number of items in a PDF array.\nCGPDFArrayGetDictionary\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nCGPDFArrayGetInteger\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nCGPDFArrayGetName\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nCGPDFArrayGetNull\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nCGPDFArrayGetNumber\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nCGPDFArrayGetObject\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nCGPDFArrayGetStream\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nCGPDFArrayGetString\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string.\nData Types\nCGPDFArrayRef\nAn opaque type that encapsulates a PDF array.\nSee Also\nOpaque Types\nCGBitmapContext\nA type of CGContextRef that you can use for drawing bits to memory.\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGLContext\nDeprecated. A type of CGContextRef for drawing OpenGL content.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFContext\nA type of CGContextRef for drawing PDF content.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGPDFContentStream | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfcontentstream",
    "html": "Overview\n\nA CGPDFContentStreamRef object represents one or more PDF content streams for a page and their associated resource dictionaries. A PDF content stream is a sequential set of instructions that specifies how to paint items on a PDF page. A resource dictionary contains information needed by the content stream in order to decode the sequential instructions of the content stream.\n\nCGPDFContentStreamRef functions can retrieve both the content streams and the resource dictionaries associated with a PDF page.\n\nThis type is not derived from CFTypeRef and therefore there are no functions for retaining and releasing it. CGPDFContentStreamRef objects exist only as constituent parts of a CGPDFDocumentRef object, and they are managed by their container.\n\nTopics\nCreating a PDF Content Stream Object\nCGPDFContentStreamCreateWithPage\nCreates a content stream object from a PDF page object.\nCGPDFContentStreamCreateWithStream\nCreates a PDF content stream object from an existing PDF content stream object.\nGetting Data from a PDF Content Stream Object\nCGPDFContentStreamGetStreams\nGets the array of PDF content streams contained in a PDF content stream object.\nCGPDFContentStreamGetResource\nGets the specified resource from a PDF content stream object.\nRetaining and Releasing a PDF Content Stream Object\nCGPDFContentStreamRetain\nIncrements the retain count of a PDF content stream object.\nCGPDFContentStreamRelease\nDecrements the retain count of a PDF content stream object.\nData Types\nCGPDFContentStreamRef\nAn opaque type that provides access to the data that describes the appearance of a PDF page.\nSee Also\nOpaque Types\nCGBitmapContext\nA type of CGContextRef that you can use for drawing bits to memory.\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGLContext\nDeprecated. A type of CGContextRef for drawing OpenGL content.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFContext\nA type of CGContextRef for drawing PDF content.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGPDFContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfcontext",
    "html": "Overview\n\nThe CGPDFContext functions operate only on Core Graphics PDF graphics contexts created using the functions CGPDFContextCreate or CGPDFContextCreateWithURL.\n\nWhen you draw to the PDF context using CGContext functions the drawing operations are recorded in PDF format. The PDF commands that represent the drawing are written to the destination specified when you create the PDF graphics context.\n\nTopics\nCreating a Context\nCGPDFContextCreate\nCreates a PDF graphics context.\nCGPDFContextCreateWithURL\nCreates a URL-based PDF graphics context.\nBeginning and Ending Pages\nCGPDFContextBeginPage\nBegins a new page in a PDF graphics context.\nCGPDFContextEndPage\nEnds the current page in the PDF graphics context.\nWorking with Destinations\nCGPDFContextAddDestinationAtPoint\nSets a destination to jump to when a point in the current page of a PDF graphics context is clicked.\nCGPDFContextSetDestinationForRect\nSets a destination to jump to when a rectangle in the current PDF page is clicked.\nCGPDFContextSetURLForRect\nSets the URL associated with a rectangle in a PDF graphics context.\nWorking with Metadata\nCGPDFContextAddDocumentMetadata\nAssociates custom metadata with the PDF document.\nClosing a PDF Context\nCGPDFContextClose\nCloses a PDF document.\nConstants\nAuxiliary Dictionary Keys\nKeys for the auxiliary info dictionary you specify when creating a PDF context.\nSee Also\nOpaque Types\nCGBitmapContext\nA type of CGContextRef that you can use for drawing bits to memory.\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGLContext\nDeprecated. A type of CGContextRef for drawing OpenGL content.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGContextStrokePath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454490-cgcontextstrokepath",
    "html": "Parameters\nc\n\nA graphics context.\n\nDiscussion\n\nThe line width and stroke color of the context’s graphics state are used to paint the path. The current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGContextEOClip | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455944-cgcontexteoclip",
    "html": "Parameters\nc\n\nA graphics context containing a path. If the context does not have a current path, the function does nothing.\n\nDiscussion\n\nThe function uses the even-odd rule to calculate the intersection of the current path with the current clipping path. The path resulting from the intersection is used as the new current clipping path for subsequent painting operations.\n\nIf the current path includes any open subpaths, the paths are treated as if they were closed by calling CGContextClosePath.\n\nUnlike the current path, the current clipping path is part of the graphics state. Therefore, to re-enlarge the paintable area by restoring the clipping path to a prior state, you must save the graphics state before you clip and restore the graphics state after you’ve completed any clipped drawing.\n\nAfter determining the new clipping path, the function resets the context’s current path to an empty path.\n\nSee Also\nModifying Clipping Paths\nCGContextClip\nModifies the current clipping path, using the nonzero winding number rule.\nCGContextClipToRect\nSets the clipping path to the intersection of the current clipping path with the area defined by the specified rectangle.\nCGContextClipToRects\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles.\nCGContextGetClipBoundingBox\nReturns the bounding box of a clipping path.\nCGContextClipToMask\nMaps a mask into the specified rectangle and intersects it with the current clipping area of the graphics context."
  },
  {
    "title": "CGContextClipToRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454716-cgcontextcliptorect",
    "html": "Parameters\nc\n\nThe graphics context for which to set the clipping path.\n\nrect\n\nThe location and dimensions of the rectangle, in user space, to be used in determining the new clipping path.\n\nDiscussion\n\nThis function sets the specified graphics context’s clipping region to the area which intersects both the current clipping path and the specified rectangle.\n\nAfter determining the new clipping path, the function resets the context’s current path to an empty path.\n\nSee Also\nModifying Clipping Paths\nCGContextClip\nModifies the current clipping path, using the nonzero winding number rule.\nCGContextEOClip\nModifies the current clipping path, using the even-odd rule.\nCGContextClipToRects\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles.\nCGContextGetClipBoundingBox\nReturns the bounding box of a clipping path.\nCGContextClipToMask\nMaps a mask into the specified rectangle and intersects it with the current clipping area of the graphics context."
  },
  {
    "title": "CGContextSetCMYKFillColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454214-cgcontextsetcmykfillcolor",
    "html": "Parameters\nc\n\nThe graphics context for which to set the current fill color.\n\ncyan\n\nThe cyan intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nmagenta\n\nThe magenta intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nyellow\n\nThe yellow intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nblack\n\nThe black intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nCore Graphics provides convenience functions for each of the device color spaces that allow you to set the fill or stroke color space and the fill or stroke color with one function call.\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current fill color space to DeviceCMYK.\n\nCore Graphics sets the current fill color to the value specified by the cyan, magenta, yellow, black, and alpha parameters.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextSetAlpha | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456404-cgcontextsetalpha",
    "html": "Parameters\nc\n\nThe graphics context for which to set the current graphics state’s alpha value parameter.\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nThis function sets the alpha value parameter for the specified graphics context. To clear the contents of the drawing canvas, use CGContextClearRect.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextSetFillColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455296-cgcontextsetfillcolor",
    "html": "Parameters\nc\n\nThe graphics context for which to set the current fill color.\n\ncomponents\n\nAn array of intensity values describing the color to set. The number of array elements must equal the number of components in the current fill color space, plus an additional component for the alpha value.\n\nDiscussion\n\nThe current fill color space must not be a pattern color space. For information on setting the fill color when using a pattern color space, see CGContextSetFillPattern. Note that the preferred API to use is now CGContextSetFillColorWithColor.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextClipToMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456497-cgcontextcliptomask",
    "html": "Parameters\nc\n\nA graphics context.\n\nrect\n\nThe rectangle to map the mask parameter to.\n\nmask\n\nAn image or an image mask. If mask is an image, then it must be in the DeviceGray color space, may not have an alpha component, and may not be masked by an image mask or masking color.\n\nDiscussion\n\nIf the mask parameter is an image mask, then Core Graphics clips in a manner identical to the behavior seen with the CGContextDrawImage function —the mask indicates an area to be left unchanged when drawing. The source samples of the image mask determine which points of the clipping area are changed, acting as an \"inverse alpha\" value. If the value of a source sample in the image mask is S, then the corresponding point in the current clipping area is multiplied by an alpha value of (1–S). For example, if S is 1 then the point in the clipping area becomes transparent. If S is 0, the point in the clipping area is unchanged.\n\nIf the mask parameter is an image, then mask acts like an alpha mask and is blended with the current clipping area. The source samples of mask determine which points of the clipping area are changed. If the value of the source sample in mask is S, then the corresponding point in the current clipping area is multiplied by an alpha of S. For example, if S is 0, then the point in the clipping area becomes transparent. If S is 1, the point in the clipping area is unchanged.\n\nSee Also\nModifying Clipping Paths\nCGContextClip\nModifies the current clipping path, using the nonzero winding number rule.\nCGContextEOClip\nModifies the current clipping path, using the even-odd rule.\nCGContextClipToRect\nSets the clipping path to the intersection of the current clipping path with the area defined by the specified rectangle.\nCGContextClipToRects\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles.\nCGContextGetClipBoundingBox\nReturns the bounding box of a clipping path."
  },
  {
    "title": "CGContextConcatCTM | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454897-cgcontextconcatctm",
    "html": "Parameters\nc\n\nA graphics context.\n\ntransform\n\nThe transformation matrix to apply to the specified context’s current transformation matrix.\n\nDiscussion\n\nWhen you call this function, it concatenates (that is, it combines) two matrices, by multiplying them together. The order in which matrices are concatenated is important, as the operations are not commutative. The resulting CTM in the context is: CTMnew = transform * CTMcontext.\n\nSee Also\nTransforming User Space\nCGContextGetCTM\nReturns the current transformation matrix.\nCGContextRotateCTM\nRotates the user coordinate system in a context.\nCGContextScaleCTM\nChanges the scale of the user coordinate system in a context.\nCGContextTranslateCTM\nChanges the origin of the user coordinate system in a context."
  },
  {
    "title": "CGContextGetCTM | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454691-cgcontextgetctm",
    "html": "Parameters\nc\n\nA graphics context.\n\nReturn Value\n\nThe transformation matrix for the current graphics state of the specified context.\n\nSee Also\nTransforming User Space\nCGContextConcatCTM\nTransforms the user coordinate system in a context using a specified matrix.\nCGContextRotateCTM\nRotates the user coordinate system in a context.\nCGContextScaleCTM\nChanges the scale of the user coordinate system in a context.\nCGContextTranslateCTM\nChanges the origin of the user coordinate system in a context."
  },
  {
    "title": "CGContextRotateCTM | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456228-cgcontextrotatectm",
    "html": "Parameters\nc\n\nA graphics context.\n\nangle\n\nThe angle, in radians, by which to rotate the coordinate space of the specified context. Positive values rotate counterclockwise and negative values rotate clockwise.)\n\nDiscussion\n\nThe direction that the context is rotated may appear to be altered by the state of the current transformation matrix prior to executing this function. For example, on iOS, a UIView applies a transformation to the graphics context that inverts the Y-axis (by multiplying it by -1). Rotating the user coordinate system on coordinate system that was previously flipped results in a rotation in the opposite direction (that is, positive values appear to rotate the coordinate system in the clockwise direction).\n\nSee Also\nTransforming User Space\nCGContextConcatCTM\nTransforms the user coordinate system in a context using a specified matrix.\nCGContextGetCTM\nReturns the current transformation matrix.\nCGContextScaleCTM\nChanges the scale of the user coordinate system in a context.\nCGContextTranslateCTM\nChanges the origin of the user coordinate system in a context."
  },
  {
    "title": "CGContextTranslateCTM | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455286-cgcontexttranslatectm",
    "html": "Parameters\nc\n\nA graphics context.\n\ntx\n\nThe amount to displace the x-axis of the coordinate space, in units of the user space, of the specified context.\n\nty\n\nThe amount to displace the y-axis of the coordinate space, in units of the user space, of the specified context.\n\nSee Also\nTransforming User Space\nCGContextConcatCTM\nTransforms the user coordinate system in a context using a specified matrix.\nCGContextGetCTM\nReturns the current transformation matrix.\nCGContextRotateCTM\nRotates the user coordinate system in a context.\nCGContextScaleCTM\nChanges the scale of the user coordinate system in a context."
  },
  {
    "title": "CGContextBeginTransparencyLayerWithRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454368-cgcontextbegintransparencylayerw",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nrect\n\nThe rectangle, specified in user space, that bounds the transparency layer.\n\nauxiliaryInfo\n\nA dictionary that specifies any additional information, or NULL.\n\nDiscussion\n\nThis function is identical to CGContextBeginTransparencyLayer except that the content of the transparency layer is within the bounds of the provided rectangle.\n\nSee Also\nUsing Transparency Layers\nCGContextBeginTransparencyLayer\nBegins a transparency layer.\nCGContextEndTransparencyLayer\nEnds a transparency layer."
  },
  {
    "title": "CGContextBeginTransparencyLayer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456011-cgcontextbegintransparencylayer",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nauxiliaryInfo\n\nA dictionary that specifies any additional information, or NULL.\n\nDiscussion\n\nUntil a corresponding call to CGContextEndTransparencyLayer, all subsequent drawing operations in the specified context are composited into a fully transparent backdrop (which is treated as a separate destination buffer from the context).\n\nAfter a call to CGContextEndTransparencyLayer, the result is composited into the context using the global alpha and shadow state of the context. This operation respects the clipping region of the context.\n\nAfter a call to this function, all of the parameters in the graphics state remain unchanged with the exception of the following:\n\nThe global alpha is set to 1.\n\nThe shadow is turned off.\n\nEnding the transparency layer restores these parameters to their previous values. Core Graphics maintains a transparency layer stack for each context, and transparency layers may be nested.\n\nTip\n\nFor best performance, make sure that you set the smallest possible clipping area for the objects in the transparency layer prior to calling CGContextBeginTransparencyLayer.\n\nSee Also\nUsing Transparency Layers\nCGContextBeginTransparencyLayerWithRect\nBegins a transparency layer whose contents are bounded by the specified rectangle.\nCGContextEndTransparencyLayer\nEnds a transparency layer."
  },
  {
    "title": "CGContextGetPathBoundingBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454577-cgcontextgetpathboundingbox",
    "html": "Parameters\nc\n\nThe graphics context, containing a path, to examine.\n\nReturn Value\n\nThe dimensions and location, in user space, of the bounding box of the path. If there is no path, the function returns CGRectNull.\n\nDiscussion\n\nThe bounding box is the smallest rectangle completely enclosing all points in a path, including control points for Bézier cubic and quadratic curves.\n\nSee Also\nGetting Information About Paths\nCGContextIsPathEmpty\nIndicates whether the current path contains any subpaths.\nCGContextGetPathCurrentPoint\nReturns the current point in a non-empty path.\nCGContextPathContainsPoint\nChecks to see whether the specified point is contained in the current path."
  },
  {
    "title": "CGContextGetPathCurrentPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454788-cgcontextgetpathcurrentpoint",
    "html": "Parameters\nc\n\nThe graphics context containing the path to examine.\n\nReturn Value\n\nThe location, in user space, of the current point in the context’s path. If there is no path, the function returns CGPointZero.\n\nSee Also\nGetting Information About Paths\nCGContextIsPathEmpty\nIndicates whether the current path contains any subpaths.\nCGContextGetPathBoundingBox\nReturns the smallest rectangle that contains the current path.\nCGContextPathContainsPoint\nChecks to see whether the specified point is contained in the current path."
  },
  {
    "title": "CGContextIsPathEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455772-cgcontextispathempty",
    "html": "Parameters\nc\n\nThe graphics context containing the path to examine.\n\nReturn Value\n\nReturns 1 if the context’s path contains no subpaths, otherwise returns 0.\n\nSee Also\nGetting Information About Paths\nCGContextGetPathCurrentPoint\nReturns the current point in a non-empty path.\nCGContextGetPathBoundingBox\nReturns the smallest rectangle that contains the current path.\nCGContextPathContainsPoint\nChecks to see whether the specified point is contained in the current path."
  },
  {
    "title": "CGContextStrokeLineSegments | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454389-cgcontextstrokelinesegments",
    "html": "Parameters\nc\n\nA graphics context.\n\npoints\n\nAn array of points, organized as pairs—the starting point of a line segment followed by the ending point of a line segment. For example, the first point in the array specifies the starting position of the first line, the second point specifies the ending position of the first line, the third point specifies the starting position of the second line, and so forth.\n\ncount\n\nThe number of points in the points array.\n\nDiscussion\n\nThis function creates a new path, adds the individual line segments to the path, and then strokes the path. The current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGImageRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimageref",
    "html": "See Also\n2D Drawing\nCGContextRef\nA Quartz 2D drawing environment.\nCGPathRef\nAn immutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nCGMutablePathRef\nA mutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nCGLayerRef\nAn offscreen context for reusing content drawn with Core Graphics."
  },
  {
    "title": "CGPatternRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1552266-cgpatternrelease",
    "html": "Parameters\npattern\n\nThe pattern to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease,except that it does not cause an error if the pattern parameteris NULL.\n\nSee Also\nRetaining and Releasing a Pattern\nCGPatternRetain\nIncrements the retain count of a Core Graphics pattern."
  },
  {
    "title": "CGImageGetColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454858-cgimagegetcolorspace",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe source color space for the specified bitmap image, or NULL if the image is an image mask. You are responsible for retaining and releasing the color space as necessary.\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "CGImageGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455014-cgimagegettypeid",
    "html": "Return Value\n\nThe identifier for the type CGImageRef."
  },
  {
    "title": "CGImageGetDecode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454575-cgimagegetdecode",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe decode array for a bitmap image (or image mask). See the discussion for a description of possible return values.\n\nDiscussion\n\nFor a bitmap image or image mask, for each color component in the source color space, the decode array contains a pair of values denoting the upper and lower limits of a range. When the image is rendered, a linear transform maps the original component value into a relative number, within the designated range, that is appropriate for the destination color space. If remapping of the image’s color values is not allowed, the returned value will be NULL.\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "CGImageGetBitsPerPixel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454599-cgimagegetbitsperpixel",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe number of bits used in memory for each pixel of the specified bitmap image (or image mask).\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "CGImageGetBytesPerRow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455425-cgimagegetbytesperrow",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe number of bytes used in memory for each row of the specified bitmap image (or image mask).\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerComponent\nReturns the number of bits allocated for a single color component of a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "CGImageGetBitsPerComponent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454980-cgimagegetbitspercomponent",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe number of bits used in memory for each color component of the specified bitmap image (or image mask). Possible values are 1, 2, 4, or 8. For example, for a 16-bit RGB(A) colorspace, the function would return a value of 4 bits per color component.\n\nSee Also\nGetting Information About an Image\nCGImageGetAlphaInfo\nReturns the alpha channel information for a bitmap image.\nCGImageGetBitmapInfo\nReturns the bitmap information for a bitmap image.\nCGImageGetBitsPerPixel\nReturns the number of bits allocated for a single pixel in a bitmap image.\nCGImageGetBytesPerRow\nReturns the number of bytes allocated for a single row of a bitmap image.\nCGImageGetColorSpace\nReturn the color space for a bitmap image.\nCGImageGetDataProvider\nReturns the data provider for a bitmap image.\nCGImageGetDecode\nReturns the decode array for a bitmap image.\nCGImageGetHeight\nReturns the height of a bitmap image.\nCGImageGetShouldInterpolate\nReturns the interpolation setting for a bitmap image.\nCGImageGetRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nCGImageGetWidth\nReturns the width of a bitmap image.\nCGImageIsMask\nReturns whether a bitmap image is an image mask."
  },
  {
    "title": "CGImageCreateWithMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456337-cgimagecreatewithmask",
    "html": "Parameters\nimage\n\nThe image to apply the mask parameter to. This image must not be an image mask and may not have an image mask or masking color associated with it.\n\nmask\n\nA mask. If the mask is an image, it must be in the DeviceGray color space, must not have an alpha component, and may not itself be masked by an image mask or a masking color. If the mask is not the same size as the image specified by the image parameter, the mask is scaled to fit the image.\n\nReturn Value\n\nAn image created by masking image with mask. You are responsible for releasing this object by calling CGImageRelease.\n\nDiscussion\n\nThe resulting image depends on whether the mask parameter is an image mask or an image. If the mask parameter is an image mask, then the source samples of the image mask act as an inverse alpha value. That is, if the value of a source sample in the image mask is S, then the corresponding region in image is blended with the destination using an alpha value of (1-S). For example, if S is 1, then the region is not painted, while if S is 0, the region is fully painted.\n\nIf the mask parameter is an image, then it serves as an alpha mask for blending the image onto the destination. The source samples of mask' act as an alpha value. If the value of the source sample in mask is S, then the corresponding region in image is blended with the destination with an alpha of S. For example, if S is 0, then the region is not painted, while if S is 1, the region is fully painted.\n\nSee Also\nCreating Bitmap Images\nCGImageCreate\nCreates a bitmap image from data supplied by a data provider.\nCGImageCreateCopy\nCreates a copy of a bitmap image.\nCGImageCreateCopyWithColorSpace\nCreates a copy of a bitmap image, replacing its colorspace.\nCGImageCreateWithJPEGDataProvider\nCreates a bitmap image using JPEG-encoded data supplied by a data provider.\nCGImageCreateWithPNGDataProvider\nCreates a bitmap image using PNG-encoded data supplied by a data provider.\nCGImageCreateWithImageInRect\nCreates a bitmap image using the data contained within a subregion of an existing bitmap image.\nCGImageCreateWithMaskingColors\nCreates a bitmap image by masking an existing bitmap image with the provided color values."
  },
  {
    "title": "CGImageMaskCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455089-cgimagemaskcreate",
    "html": "Parameters\nwidth\n\nThe width, in pixels, of the required image mask.\n\nheight\n\nThe height, in pixels, of the required image mask.\n\nbitsPerComponent\n\nThe number of significant masking bits in a source pixel. For example, if the source image is an 8-bit mask, you specify 8 bits per component. Image masks must be 1, 2, 4, or 8 bits per component.\n\nbitsPerPixel\n\nThe total number of bits in a source pixel.\n\nbytesPerRow\n\nThe number of bytes to use for each horizontal row of the image mask.\n\nprovider\n\nThe data source for the image mask.\n\ndecode\n\nTypically a decode array is unnecessary, and you should pass NULL.\n\nshouldInterpolate\n\nA Boolean value that specifies whether an edge-smoothing algorithm is applied to the image mask.\n\nReturn Value\n\nA bitmap image mask. You are responsible for releasing this object by calling CGImageRelease.\n\nDiscussion\n\nA bitmap image mask is used the same way an artist uses a silkscreen, or a sign painter uses a stencil. The bitmap represents a mask through which a color is transferred. The bitmap itself does not have a color. It gets its color from the fill color currently set in the graphics state.\n\nWhen you draw into a context with a bitmap image mask, the mask determines where and how the current fill color is applied to the image rectangle. Each sample value in the mask specifies how much of the current fill color is masked out at a specific location. Effectively, the sample value specifies the opacity of the mask. Larger values represent greater opacity and hence less color applied to the page.\n\nImage masks must be 1, 2, 4, or 8 bits per component. For a 1-bit mask, a sample value of 1 specifies sections of the mask that are masked out; these sections block the current fill color. A sample value of 0 specifies sections of the mask that are not masked out; these sections show the current fill color of the graphics state when the mask is painted. You can think of the sample values as an inverse alpha. That is, a value of 1 is transparent and 0 is opaque.\n\nFor image masks that are 2, 4, or 8 bits per component, each component is mapped to a range of 0 to 1 by scaling using this formula:\n\n1/(2^bits per component – 1)\n\nFor example, a 4-bit mask has values that range from 0 to 15. These values are scaled by 1/15 so that each component ranges from 0 to 1. Component values that rescale to 0 or 1 behave the same way as they behave for 1-bit image masks. Values that scale to between 0 and 1 act as an inverse alpha. That is, the fill color is painted as if it has an alpha value of (1 – MaskSampleValue). For example, if the sample value of an 8-bit mask scales to 0.8, the current fill color is painted as if it has an alpha value of 0.2, that is (1–0.8)."
  },
  {
    "title": "CGContextSetAllowsFontSubpixelQuantization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456263-cgcontextsetallowsfontsubpixelqu",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nallowsFontSubpixelQuantization\n\nA Boolean value that specifies whether subpixel quantization of glyphs is allowed in the specified context.\n\nDiscussion\n\nSub-pixel quantization is used by the graphics context if it is allowed, enabled, and if glyphs would be drawn at subpixel positions. For information on how to enable subpixel quantization, see the CGContextSetShouldSubpixelQuantizeFonts function.\n\nThis parameter is not part of the graphics state.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetShouldSubpixelPositionFonts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455671-cgcontextsetshouldsubpixelpositi",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nshouldSubpixelPositionFonts\n\nA Boolean value that specifies whether to enable subpixel positioning.\n\nDiscussion\n\nWhen enabled, the graphics context may position glyphs on nonintegral pixel boundaries. When disabled, the position of glyphs are always forced to integral pixel boundaries.\n\nThis parameter is part of the graphics state.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGPointCreateDictionaryRepresentation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455382-cgpointcreatedictionaryrepresent",
    "html": "Parameters\npoint\n\nA point.\n\nReturn Value\n\nThe dictionary representation of the point.\n\nSee Also\nAlternate Representations\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a point from a canonical dictionary representation.\nvar debugDescription: String\nA textual representation of the point’s coordinate values.\nvar customMirror: Mirror\nA representation of the point’s structure and display style for use in debugging.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the point for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "CGContextFlush | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454895-cgcontextflush",
    "html": "Parameters\nc\n\nThe window context to flush. If you pass a PDF context or a bitmap context, this function does nothing.\n\nDiscussion\n\nWhen you call this function, Core Graphics immediately flushes the current drawing to the destination device (for example, a screen). Because the system software flushes a context automatically at the appropriate times, calling this function could have an adverse effect on performance. Under normal conditions, you do not need to call this function.\n\nSee Also\nManaging Graphics Contexts\nCGContextGetTypeID\nReturns the type identifier for a graphics context.\nCGContextRelease\nDecrements the retain count of a graphics context.\nCGContextRetain\nIncrements the retain count of a graphics context.\nCGContextSynchronize\nMarks a window context for update."
  },
  {
    "title": "CGPathAddQuadCurveToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411157-cgpathaddquadcurvetopoint",
    "html": "Parameters\npath\n\nThe mutable path to change. The path must not be empty.\n\nm\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the curve before adding it to the path.\n\ncpx\n\nThe x-coordinate of the control point.\n\ncpy\n\nThe y-coordinate of the control point.\n\nx\n\nThe x-coordinate of the end point of the curve.\n\ny\n\nThe y-coordinate of the end point of the curve.\n\nDiscussion\n\nBefore returning, this function updates the current point to the specified location (x, y).\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGContextStrokeRectWithWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454679-cgcontextstrokerectwithwidth",
    "html": "Parameters\nc\n\nA graphics context.\n\nrect\n\nA rectangle, in user space coordinates.\n\nwidth\n\nA value, in user space units, that is greater than zero. This value does not affect the line width values in the current graphics state.\n\nDiscussion\n\nAside from the line width value, Core Graphics uses the current attributes of the graphics state (such as stroke color) to paint the line. The line straddles the path, with half of the total width on either side.\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGContextReplacePathWithStrokedPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454517-cgcontextreplacepathwithstrokedp",
    "html": "Parameters\nc\n\nA graphics context.\n\nDiscussion\n\nA stroked path is created using the parameters of the current graphics context. The new path is created so that filling it draws the same pixels as stroking the original path.You can use this path in the same way you use the path of any context. For example, you can clip to the stroked version of a path by calling this function followed by a call to the function CGContextClip.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGContextStrokeEllipseInRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455774-cgcontextstrokeellipseinrect",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nrect\n\nA rectangle that defines the area for the ellipse to fit in.\n\nDiscussion\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGContextStrokeRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454675-cgcontextstrokerect",
    "html": "Parameters\nc\n\nA graphics context .\n\nrect\n\nA rectangle, specified in user space coordinates.\n\nDiscussion\n\nThe line width and stroke color of the context’s graphics state are used to paint the path. The current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGContextFillEllipseInRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454371-cgcontextfillellipseinrect",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nrect\n\nA rectangle that defines the area for the ellipse to fit in.\n\nDiscussion\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGContextFillRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454700-cgcontextfillrect",
    "html": "Parameters\nc\n\nA graphics context.\n\nrect\n\nA rectangle, in user space coordinates.\n\nDiscussion\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGContextRetain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1586506-cgcontextretain",
    "html": "Parameters\nc\n\nThe graphics context to retain.\n\nReturn Value\n\nThe same graphics context you passed in as the context parameter.\n\nDiscussion\n\nThis function is equivalent to CFRetain, except it does not cause an error if c is NULL.\n\nSee Also\nManaging Graphics Contexts\nCGContextFlush\nForces all pending drawing operations in a window context to be rendered immediately to the destination device.\nCGContextGetTypeID\nReturns the type identifier for a graphics context.\nCGContextRelease\nDecrements the retain count of a graphics context.\nCGContextSynchronize\nMarks a window context for update."
  },
  {
    "title": "CGContextDrawPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455195-cgcontextdrawpath",
    "html": "Parameters\nc\n\nA graphics context that contains a path to paint.\n\nmode\n\nA path drawing mode constant—kCGPathFill, kCGPathEOFill, kCGPathStroke, kCGPathFillStroke, or kCGPathEOFillStroke. For a discussion of these constants, see CGPath.\n\nDiscussion\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGContextAddRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456617-cgcontextaddrect",
    "html": "Parameters\nc\n\nA graphics context.\n\nrect\n\nA rectangle, specified in user space coordinates.\n\nDiscussion\n\nThis is a convenience function that adds a rectangle to a path, starting by moving to the bottom left corner and then adding lines counter-clockwise to create a rectangle, closing the subpath.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGContextClosePath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454508-cgcontextclosepath",
    "html": "Parameters\nc\n\nA graphics context.\n\nDiscussion\n\nAppends a line from the current point to the starting point of the current subpath and ends the subpath.\n\nAfter closing the subpath, your application can begin a new subpath without first calling CGContextMoveToPoint. In this case, a new subpath is implicitly created with a starting and current point equal to the previous subpath’s starting point.\n\nIf the current path is empty or the current subpath is already closed, this function does nothing.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGContextClearRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456457-cgcontextclearrect",
    "html": "Parameters\nc\n\nThe graphics context in which to paint the rectangle.\n\nrect\n\nThe rectangle, in user space coordinates.\n\nDiscussion\n\nIf the provided context is a window or bitmap context, Core Graphics clears the rectangle. For other context types, Core Graphics fills the rectangle in a device-dependent manner. However, you should not use this function in contexts other than window or bitmap contexts.\n\nSee Also\nPainting Paths\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGContextAddQuadCurveToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454268-cgcontextaddquadcurvetopoint",
    "html": "Parameters\nc\n\nA graphics context whose current path is not empty.\n\ncpx\n\nThe x-coordinate of the user space for the control point of the curve.\n\ncpy\n\nThe y-coordinate of the user space for the control point of the curve.\n\nx\n\nThe x-coordinate of the user space at which to end the curve.\n\ny\n\nThe y-coordinate of the user space at which to end the curve.\n\nDiscussion\n\nThis function appends a quadratic curve to the current subpath. After adding the segment, the current point is set to the end point of the curve.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGContextAddLineToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455213-cgcontextaddlinetopoint",
    "html": "Parameters\nc\n\nA graphics context whose current path is not empty.\n\nx\n\nThe x-value, in user space coordinates, for the end of the line segment.\n\ny\n\nThe y-value, in user space coordinates, for the end of the line segment.\n\nDiscussion\n\nAfter adding the line segment, the current point is set to the endpoint of the line segment.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGContextBeginPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456635-cgcontextbeginpath",
    "html": "Parameters\nc\n\nA graphics context.\n\nDiscussion\n\nA graphics context can have only a single path in use at any time. If the specified context already contains a current path when you call this function, the old path and any data associated with it is discarded.\n\nThe current path is not part of the graphics state. Consequently, saving and restoring the graphics state has no effect on the current path.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGContextCopyPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455397-cgcontextcopypath",
    "html": "Parameters\ncontext\n\nA graphics context whose current path is not empty.\n\nReturn Value\n\nA path object containing the current path data.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGContextAddLines | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455461-cgcontextaddlines",
    "html": "Parameters\nc\n\nA graphics context .\n\npoints\n\nAn array of values that specify the start and end points of the line segments to draw. Each point in the array specifies a position in user space. The first point in the array specifies the initial starting point.\n\ncount\n\nThe number of elements in the points array.\n\nDiscussion\n\nThis is a convenience function that moves to the first point in the sequence and then adds a line to each of the other points, sequentially.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGContextAddCurveToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456393-cgcontextaddcurvetopoint",
    "html": "Parameters\nc\n\nA graphics context whose current path is not empty.\n\ncp1x\n\nThe x-value, in user space coordinates, for the first control point of the curve.\n\ncp1y\n\nThe y-value, in user space coordinates, for the first control point of the curve.\n\ncp2x\n\nThe x-value, in user space coordinates, for the second control point of the curve.\n\ncp2y\n\nThe y-value, in user space coordinates, for the second control point of the curve.\n\nx\n\nThe x-value, in user space coordinates, at which to end the curve.\n\ny\n\nThe y-value, in user space coordinates, at which to end the curve.\n\nDiscussion\n\nThis function appends a cubic curve to the current path. On return, the current point is set to the end point of that segment.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGWindowLevelKey.desktopIconWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/desktopiconwindow",
    "html": "Discussion\n\nThe level for desktop icons."
  },
  {
    "title": "CGContextAddPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456628-cgcontextaddpath",
    "html": "Parameters\ncontext\n\nA graphics context .\n\npath\n\nA previously created path object. See CGPath.\n\nDiscussion\n\nIf the source path is non-empty, then its path elements are appended in order onto the current path. The current transformation matrix (CTM) is applied to the points before adding them to the path.\n\nAfter the call completes, the start point and current point of the path are those of the last subpath in path.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGContextAddArcToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456238-cgcontextaddarctopoint",
    "html": "Parameters\nc\n\nA graphics context whose current path is not empty.\n\nx1\n\nThe x-value, in user space coordinates, for the end point of the first tangent line. The first tangent line is drawn from the current point to (x1,y1).\n\ny1\n\nThe y-value, in user space coordinates, for the end point of the first tangent line. The first tangent line is drawn from the current point to (x1,y1).\n\nx2\n\nThe x-value, in user space coordinates, for the end point of the second tangent line. The second tangent line is drawn from (x1,y1) to (x2,y2).\n\ny2\n\nThe y-value, in user space coordinates, for the end point of the second tangent line. The second tangent line is drawn from (x1,y1) to (x2,y2).\n\nradius\n\nThe radius of the arc, in user space coordinates.\n\nDiscussion\n\nThis method calculates two tangent lines—the first from the current point to the point (x1, y1), and the second from the point (x1, y1) to the point (x2, y2)—then calculates the start and end points for a circular arc of the specified radius such that the arc is tangent to both lines. Finally, this method approximates that arc with a sequence of cubic Bézier curves and appends those curves to the current path.\n\nIf the starting point of the arc (that is, the point where a circle of the specified radius must meet the first tangent line in order to also be tangent to the second line) is not the current point, this method appends a straight line segment from the current point to the starting point of the arc.\n\nThe ending point of the arc (that is, the point where a circle of the specified radius must meet the second tangent line in order to also be tangent to the first line) becomes the new current point of the path.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGContextSetRGBFillColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455624-cgcontextsetrgbfillcolor",
    "html": "Parameters\nc\n\nThe graphics context for which to set the current fill color.\n\nred\n\nThe red intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\ngreen\n\nThe green intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\nblue\n\nThe blue intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current fill color space to DeviceRGB.\n\nCore Graphics sets the current fill color to the value specified by the red, green, blue, and alpha parameters.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextSetCMYKStrokeColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455358-cgcontextsetcmykstrokecolor",
    "html": "Parameters\nc\n\nThe graphics context for which to set the current stroke color.\n\ncyan\n\nThe cyan intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nmagenta\n\nThe magenta intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nyellow\n\nThe yellow intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nblack\n\nThe black intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current stroke color space to DeviceCMYK.\n\nCore Graphics sets the current stroke color to the value specified by the cyan, magenta, yellow, black, and alpha parameters.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextSetGrayFillColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454255-cgcontextsetgrayfillcolor",
    "html": "Parameters\nc\n\nThe graphics context for which to set the current fill color.\n\ngray\n\nA value that specifies the desired gray level. The DeviceGray color space permits the specification of a value ranging from 0.0 (absolute black) to 1.0 (absolute white). Values outside this range are clamped to 0.0 or 1.0.\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current fill color space to DeviceGray.\n\nCore Graphics sets the current fill color to the value you specify in the gray and alpha parameters.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextSetFillColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455151-cgcontextsetfillcolorspace",
    "html": "Parameters\nc\n\nThe graphics context for which to set the fill color space.\n\ncolorspace\n\nThe new fill color space. The color space is retained; upon return, you may safely release it.\n\nDiscussion\n\nAs a side effect of this function, Core Graphics assigns an appropriate initial value to the fill color, based on the specified color space. To change this value, call CGContextSetFillColor. Note that the preferred API to use is now CGContextSetFillColorWithColor.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextSetRGBStrokeColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456378-cgcontextsetrgbstrokecolor",
    "html": "Parameters\nc\n\nThe graphics context for which to set the current stroke color.\n\nred\n\nThe red intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\ngreen\n\nThe green intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\nblue\n\nThe blue intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current stroke color space to DeviceRGB.\n\nCore Graphics sets the current stroke color to the value specified by the red, green, blue, and alpha parameters.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextSetGrayStrokeColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455209-cgcontextsetgraystrokecolor",
    "html": "Parameters\nc\n\nThe graphics context for which to set the current stroke color.\n\ngray\n\nA value that specifies the desired gray level. The DeviceGray color space permits the specification of a value ranging from 0.0 (absolute black) to 1.0 (absolute white). Values outside this range are clamped to 0.0 or 1.0.\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current stroke color space to DeviceGray. The DeviceGray color space is a single-dimension space in which color values are specified solely by the intensity of a gray value (from absolute black to absolute white).\n\nCore Graphics sets the current stroke color to the value you specify in the gray and alpha parameters.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetFillColorWithColor\nSets the current fill color in a graphics context, using a CGColor.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGContextSetFillColorWithColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454079-cgcontextsetfillcolorwithcolor",
    "html": "Parameters\nc\n\nThe graphics context for which to set the fill color.\n\ncolor\n\nThe new fill color.\n\nSee Also\nSetting Color, Color Space, and Shadow Values\nCGContextSetAlpha\nSets the opacity level for objects drawn in a graphics context.\nCGContextSetCMYKFillColor\nSets the current fill color to a value in the DeviceCMYK color space.\nCGContextSetFillColor\nSets the current fill color.\nCGContextSetCMYKStrokeColor\nSets the current stroke color to a value in the DeviceCMYK color space.\nCGContextSetFillColorSpace\nSets the fill color space in a graphics context.\nCGContextSetGrayFillColor\nSets the current fill color to a value in the DeviceGray color space.\nCGContextSetGrayStrokeColor\nSets the current stroke color to a value in the DeviceGray color space.\nCGContextSetRGBFillColor\nSets the current fill color to a value in the DeviceRGB color space.\nCGContextSetRGBStrokeColor\nSets the current stroke color to a value in the DeviceRGB color space.\nCGContextSetShadow\nEnables shadowing in a graphics context.\nCGContextSetShadowWithColor\nEnables shadowing with color a graphics context.\nCGContextSetStrokeColor\nSets the current stroke color.\nCGContextSetStrokeColorSpace\nSets the stroke color space in a graphics context.\nCGContextSetStrokeColorWithColor\nSets the current stroke color in a context, using a CGColor."
  },
  {
    "title": "CGWindowLevelKey.assistiveTechHighWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/assistivetechhighwindow",
    "html": "Discussion\n\nThe level for assistive technology."
  },
  {
    "title": "CGWindowLevelKey.baseWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/basewindow",
    "html": "Discussion\n\nThe base key used to define window levels. Do not use."
  },
  {
    "title": "CGContextSetShouldSubpixelQuantizeFonts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455766-cgcontextsetshouldsubpixelquanti",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nshouldSubpixelQuantizeFonts\n\nA Boolean value that specifies whether to enable subpixel quantization.\n\nDiscussion\n\nWhen enabled, the graphics context may quantize the subpixel positions of glyphs.\n\nThis parameter is part of the graphics state.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context."
  },
  {
    "title": "CGContextAddArc | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455756-cgcontextaddarc",
    "html": "Parameters\nc\n\nA graphics context.\n\nx\n\nThe x-value, in user space coordinates, for the center of the arc.\n\ny\n\nThe y-value, in user space coordinates, for the center of the arc.\n\nradius\n\nThe radius of the arc, in user space coordinates.\n\nstartAngle\n\nThe angle to the starting point of the arc, measured in radians from the positive x-axis.\n\nendAngle\n\nThe angle to the end point of the arc, measured in radians from the positive x-axis.\n\nclockwise\n\nSpecify 1 to create a clockwise arc or 0 to create a counterclockwise arc.\n\nDiscussion\n\nThis method calculates starting and ending points using the radius and angles you specify, uses a sequence of cubic Bézier curves to approximate a segment of a circle between those points, and then appends those curves to the current path.\n\nThe clockwise parameter determines the direction in which the arc is created; the actual direction of the final path is dependent on the current transformation matrix of the graphics context. In a flipped coordinate system (the default for UIView drawing methods in iOS), specifying a clockwise arc results in a counterclockwise arc after the transformation is applied.\n\nIf the current path already contains a subpath, this method adds a line connecting the current point to the starting point of the arc. If the current path is empty, his method creates a new subpath whose starting point is the starting point of the arc. The ending point of the arc becomes the new current point of the path.\n\nSee Also\nConstructing Paths\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGAffineTransformMakeRotation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455666-cgaffinetransformmakerotation",
    "html": "Parameters\nangle\n\nThe angle, in radians, by which this matrix rotates the coordinate system axes. In iOS, a positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation. In macOS, a positive value specifies clockwise rotation and a negative value specifies counterclockwise rotation.\n\nReturn Value\n\nA new affine transformation matrix.\n\nDiscussion\n\nThis function creates a CGAffineTransform structure, which you can use (and reuse, if you want) to rotate a coordinate system. The matrix takes the following form:\n\nThe actual direction of rotation is dependent on the coordinate system orientation of the target platform, which is different in iOS and macOS. Because the third column is always (0,0,1), the CGAffineTransform data structure returned by this function contains values for only the first two columns.\n\nThese are the resulting equations used to apply the rotation to a point (x, y):\n\nIf you want only to rotate an object to be drawn, it is not necessary to construct an affine transform to do so. The most direct way to rotate your drawing is by calling the function rotate(by:).\n\nSee Also\nCreating an Affine Transformation Matrix\nfunc CGAffineTransformMake(CGFloat, CGFloat, CGFloat, CGFloat, CGFloat, CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed from values you provide.\ninit(scaleX: CGFloat, y: CGFloat)\nReturns an affine transformation matrix constructed from scaling values you provide.\ninit(translationX: CGFloat, y: CGFloat)\nReturns an affine transformation matrix constructed from translation values you provide."
  },
  {
    "title": "CGContextSetAllowsFontSubpixelPositioning | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454942-cgcontextsetallowsfontsubpixelpo",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nallowsFontSubpixelPositioning\n\nA Boolean value that specifies whether subpixel positioning of glyphs is allowed in the specified context.\n\nDiscussion\n\nSub-pixel positioning is used by the graphics context if it is allowed, enabled, and if the font itself is antialiased when drawn. For information on how to enable subpixel positioning, see the CGContextSetShouldSubpixelPositionFonts function.\n\nThis parameter is not part of the graphics state.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetAllowsFontSmoothing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454767-cgcontextsetallowsfontsmoothing",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nallowsFontSmoothing\n\nA Boolean value that specifies whether font smoothing is allowed in the specified context.\n\nDiscussion\n\nFont are smoothed if they are antialiased when drawn and if font smoothing is both allowed and enabled. For information on how to enable font smoothing, see the CGContextSetShouldSmoothFonts function. It is not usually necessary to make changes to both parameters at the same time; either can be used to disable font smoothing.\n\nThis parameter is not part of the graphics state.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetShouldSmoothFonts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455816-cgcontextsetshouldsmoothfonts",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nshouldSmoothFonts\n\nA Boolean value that specifies whether to enable font smoothing.\n\nDiscussion\n\nThere are cases, such as rendering to a bitmap, when font smoothing is not appropriate and should be disabled. Note that some contexts (such as PostScript contexts) do not support font smoothing.\n\nThis parameter is part of the graphics state. Because of this, you use this when you want to temporarily override this setting in a drawing method.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetPatternPhase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455334-cgcontextsetpatternphase",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nphase\n\nA pattern phase, specified in user space.\n\nDiscussion\n\nThe pattern phase is a translation that Core Graphics applies prior to drawing a pattern in the context. The pattern phase is part of the graphics state of a context, and the default pattern phase is (0,0). Setting the pattern phase has the effect of temporarily changing the pattern matrix of any pattern you draw. For example, setting the context’s pattern phase to (2,3) has the effect of moving the start of pattern cell tiling to the point (2,3) in default user space.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetLineWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455270-cgcontextsetlinewidth",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nwidth\n\nThe new line width to use, in user space units. The value must be greater than 0.\n\nDiscussion\n\nThe default line width is 1 unit. When stroked, the line straddles the path, with half of the total width on either side.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetMiterLimit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456499-cgcontextsetmiterlimit",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nlimit\n\nThe miter limit to use.\n\nDiscussion\n\nIf the current line join style is set to kCGLineJoinMiter, the miter limit determines whether the lines should be joined with a bevel instead of a miter. The length of the miter is divided by the line width. If the result is greater than the miter limit, the style is converted to a bevel.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetLineJoin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455973-cgcontextsetlinejoin",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\njoin\n\nA line join value—kCGLineJoinMiter (the default), kCGLineJoinRound, or kCGLineJoinBevel. See CGPath.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetLineDash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455911-cgcontextsetlinedash",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nphase\n\nA value that specifies how far into the dash pattern the line starts, in units of the user space. For example, passing a value of 3 means the line is drawn with the dash pattern starting at three units from its beginning. Passing a value of 0 draws a line starting with the beginning of a dash pattern.\n\nlengths\n\nAn array of values that specify the lengths of the painted segments and unpainted segments, respectively, of the dash pattern—or NULL for no dash pattern.\n\nFor example, passing an array with the values [2,3] sets a dash pattern that alternates between a 2-user-space-unit-long painted segment and a 3-user-space-unit-long unpainted segment. Passing the values [1,3,4,2] sets the pattern to a 1-unit painted segment, a 3-unit unpainted segment, a 4-unit painted segment, and a 2-unit unpainted segment.\n\ncount\n\nIf the lengths parameter specifies an array, pass the number of elements in the array. Otherwise, pass 0.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetLineCap | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454326-cgcontextsetlinecap",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\ncap\n\nA line cap style constant—kCGLineCapButt (the default), kCGLineCapRound, or kCGLineCapSquare. See CGPath.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetFlatness | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455798-cgcontextsetflatness",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nflatness\n\nThe largest permissible distance, measured in device pixels, between a point on the true curve and a point on the approximated curve.\n\nDiscussion\n\nThis function controls how accurately curved paths are rendered. Setting the flatness value to less than 1.0 renders highly accurate curves, but lengthens rendering times.\n\nIn most cases, you should not change the flatness value. Customizing the flatness value for the capabilities of a particular output device impairs the ability of your application to render to other devices.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGPathAddCurveToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411212-cgpathaddcurvetopoint",
    "html": "Parameters\npath\n\nThe mutable path to change. The path must not be empty.\n\nm\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the curve before it is added to the path.\n\ncp1x\n\nThe x-coordinate of the first control point.\n\ncp1y\n\nThe y-coordinate of the first control point.\n\ncp2x\n\nThe x-coordinate of the second control point.\n\ncp2y\n\nThe y-coordinate of the second control point.\n\nx\n\nThe x-coordinate of the end point of the curve.\n\ny\n\nThe y-coordinate of the end point of the curve.\n\nDiscussion\n\nAppends a cubic Bézier curve from the current point in a path to the specified location using two control points, after an optional transformation. Before returning, this function updates the current point to the specified location (x,y).\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGContextGetInterpolationQuality | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454940-cgcontextgetinterpolationquality",
    "html": "Parameters\nc\n\nThe graphics context to examine.\n\nReturn Value\n\nThe current level of interpolation quality.\n\nDiscussion\n\nInterpolation quality is a graphics state parameter that provides a hint for the level of quality to use for image interpolation (for example, when scaling the image). Not all contexts support all interpolation quality levels.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextRestoreGState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455391-cgcontextrestoregstate",
    "html": "Parameters\nc\n\nThe graphics context whose state you want to modify.\n\nDiscussion\n\nCore Graphics removes the graphics state at the top of the stack so that the most recently saved state becomes the current graphics state.\n\nSee Also\nSaving and Restoring the Current Graphics State\nCGContextSaveGState\nPushes a copy of the current graphics state onto the graphics state stack for the context."
  },
  {
    "title": "CGContextSaveGState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456156-cgcontextsavegstate",
    "html": "Parameters\nc\n\nThe graphics context whose current graphics state you want to save.\n\nDiscussion\n\nEach graphics context maintains a stack of graphics states. Note that not all aspects of the current drawing environment are elements of the graphics state. For example, the current path is not considered part of the graphics state and is therefore not saved when you call this function. The graphics state parameters that are saved are:\n\nCTM (current transformation matrix)\n\nclip region\n\nimage interpolation quality\n\nline width\n\nline join\n\nmiter limit\n\nline cap\n\nline dash\n\nflatness\n\nshould anti-alias\n\nrendering intent\n\nfill color space\n\nstroke color space\n\nfill color\n\nstroke color\n\nalpha value\n\nfont\n\nfont size\n\ncharacter spacing\n\ntext drawing mode\n\nshadow parameters\n\nthe pattern phase\n\nthe font smoothing parameter\n\nblend mode\n\nTo restore your drawing environment to a previously saved state, you can use CGContextRestoreGState.\n\nSee Also\nSaving and Restoring the Current Graphics State\nCGContextRestoreGState\nSets the current graphics state to the state most recently saved."
  },
  {
    "title": "CGContextAddEllipseInRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456420-cgcontextaddellipseinrect",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nrect\n\nA rectangle that defines the area for the ellipse to fit in.\n\nDiscussion\n\nThe ellipse is approximated by a sequence of Bézier curves. Its center is the midpoint of the rectangle defined by the rect parameter. If the rectangle is square, then the ellipse is circular with a radius equal to one-half the width (or height) of the rectangle. If the rect parameter specifies a rectangular shape, then the major and minor axes of the ellipse are defined by the width and height of the rectangle.\n\nThe ellipse forms a complete subpath of the path—that is, the ellipse drawing starts with a move-to operation and ends with a close-subpath operation, with all moves oriented in the clockwise direction.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify."
  },
  {
    "title": "CGWindowLevelKey.utilityWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/utilitywindow",
    "html": "Discussion\n\nThe level for utility windows."
  },
  {
    "title": "CGContextSynchronize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455450-cgcontextsynchronize",
    "html": "Parameters\nc\n\nThe window context to synchronize. If you pass a PDF context or a bitmap context, this function does nothing.\n\nDiscussion\n\nWhen you call this function, all drawing operations since the last update are flushed at the next regular opportunity. Under normal conditions, you do not need to call this function.\n\nSee Also\nManaging Graphics Contexts\nCGContextFlush\nForces all pending drawing operations in a window context to be rendered immediately to the destination device.\nCGContextGetTypeID\nReturns the type identifier for a graphics context.\nCGContextRelease\nDecrements the retain count of a graphics context.\nCGContextRetain\nIncrements the retain count of a graphics context."
  },
  {
    "title": "CGContextGetTypeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455504-cgcontextgettypeid",
    "html": "Return Value\n\nThe identifier for the type CGContextRef.\n\nSee Also\nManaging Graphics Contexts\nCGContextFlush\nForces all pending drawing operations in a window context to be rendered immediately to the destination device.\nCGContextRelease\nDecrements the retain count of a graphics context.\nCGContextRetain\nIncrements the retain count of a graphics context.\nCGContextSynchronize\nMarks a window context for update."
  },
  {
    "title": "CGRectGetMinX(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455948-cgrectgetminx",
    "html": "Parameters\nrect\n\nThe rectangle to examine.\n\nReturn Value\n\nThe smallest value for the x-coordinate of the rectangle.\n\nSee Also\nCalculated Geometric Properties\nvar height: CGFloat\nReturns the height of a rectangle.\nvar width: CGFloat\nReturns the width of a rectangle.\nvar midX: CGFloat\nReturns the x- coordinate that establishes the center of a rectangle.\nvar maxX: CGFloat\nReturns the largest value of the x-coordinate for the rectangle.\nvar minY: CGFloat\nReturns the smallest value for the y-coordinate of the rectangle.\nvar midY: CGFloat\nReturns the y-coordinate that establishes the center of the rectangle.\nvar maxY: CGFloat\nReturns the largest value for the y-coordinate of the rectangle."
  },
  {
    "title": "CGAffineTransformMakeTranslation(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454909-cgaffinetransformmaketranslation",
    "html": "Parameters\ntx\n\nThe value by which to move the x-axis of the coordinate system.\n\nty\n\nThe value by which to move the y-axis of the coordinate system.\n\nReturn Value\n\nA new affine transform matrix.\n\nDiscussion\n\nThis function creates a CGAffineTransform structure. which you can use (and reuse, if you want) to move a coordinate system. The matrix takes the following form:\n\nBecause the third column is always (0,0,1), the CGAffineTransform data structure returned by this function contains values for only the first two columns.\n\nThese are the resulting equations used to apply the translation to a point (x,y):\n\nIf you want only to move the location where an object is drawn, it is not necessary to construct an affine transform to do so. The most direct way to move your drawing is by calling the function translateBy(x:y:).\n\nSee Also\nCreating an Affine Transformation Matrix\nfunc CGAffineTransformMake(CGFloat, CGFloat, CGFloat, CGFloat, CGFloat, CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed from values you provide.\ninit(rotationAngle: CGFloat)\nReturns an affine transformation matrix constructed from a rotation value you provide.\ninit(scaleX: CGFloat, y: CGFloat)\nReturns an affine transformation matrix constructed from scaling values you provide."
  },
  {
    "title": "CGAffineTransformMakeScale(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455016-cgaffinetransformmakescale",
    "html": "Parameters\nsx\n\nThe factor by which to scale the x-axis of the coordinate system.\n\nsy\n\nThe factor by which to scale the y-axis of the coordinate system.\n\nReturn Value\n\nA new affine transformation matrix.\n\nDiscussion\n\nThis function creates a CGAffineTransform structure, which you can use (and reuse, if you want) to scale a coordinate system. The matrix takes the following form:\n\nBecause the third column is always (0,0,1), the CGAffineTransform data structure returned by this function contains values for only the first two columns.\n\nThese are the resulting equations used to scale the coordinates of a point (x,y):\n\nIf you want only to scale an object to be drawn, it is not necessary to construct an affine transform to do so. The most direct way to scale your drawing is by calling the function scaleBy(x:y:).\n\nSee Also\nCreating an Affine Transformation Matrix\nfunc CGAffineTransformMake(CGFloat, CGFloat, CGFloat, CGFloat, CGFloat, CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed from values you provide.\ninit(rotationAngle: CGFloat)\nReturns an affine transformation matrix constructed from a rotation value you provide.\ninit(translationX: CGFloat, y: CGFloat)\nReturns an affine transformation matrix constructed from translation values you provide."
  },
  {
    "title": "CGSizeCreateDictionaryRepresentation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455274-cgsizecreatedictionaryrepresenta",
    "html": "Parameters\nsize\n\nA size.\n\nReturn Value\n\nThe dictionary representation of the size.\n\nSee Also\nAlternate Representations\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a size from a canonical dictionary representation.\nvar debugDescription: String\nA textual representation of the size’s dimensions.\nvar customMirror: Mirror\nA representation of the size’s structure and display style for use in debugging.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the size for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "CGWindowLevelKey.desktopWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/desktopwindow",
    "html": "Discussion\n\nThe level for the desktop."
  },
  {
    "title": "CGWindowLevelKey.minimumWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/minimumwindow",
    "html": "Discussion\n\nThe lowest available window level."
  },
  {
    "title": "CGWindowLevelKey.backstopMenu | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/backstopmenu",
    "html": "Discussion\n\nThe level of the backstop menu."
  },
  {
    "title": "CGContextSetStrokePattern | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454796-cgcontextsetstrokepattern",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\npattern\n\nA pattern for stroking. the object is retained; upon return, you may safely release it.\n\ncomponents\n\nIf the specified pattern is an uncolored (or masking) pattern, pass an array of intensity values that specify the color to use when the pattern is painted. The number of array elements must equal the number of components in the base space of the stroke pattern color space, plus an additional component for the alpha value.\n\nIf the specified pattern is a color pattern, pass an alpha value.\n\nDiscussion\n\nThe current stroke color space must be a pattern color space. Otherwise, the result of calling this function is undefined. If you want to set a stroke color, not a stroke pattern, use CGContextSetStrokeColorWithColor.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetBlendMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455994-cgcontextsetblendmode",
    "html": "Parameters\ncontext\n\nThe graphics context to modify.\n\nmode\n\nA blend mode. See CGBlendMode for a list of the constants you can supply.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetAllowsAntialiasing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456310-cgcontextsetallowsantialiasing",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nallowsAntialiasing\n\nA Boolean value that specifies whether or not to allow antialiasing. Pass true to allow antialiasing; false otherwise. This parameter is not part of the graphics state.\n\nDiscussion\n\nCore Graphics performs antialiasing for a graphics context if both the allowsAntialiasing parameter and the graphics state parameter shouldAntialias are true.\n\nThis parameter is not part of the graphics state.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetFillPattern | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456334-cgcontextsetfillpattern",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\npattern\n\nA fill pattern. The object is retained; upon return, you may safely release it.\n\ncomponents\n\nIf the pattern is an uncolored (or a masking) pattern, pass an array of intensity values that specify the color to use when the pattern is painted. The number of array elements must equal the number of components in the base space of the fill pattern color space, plus an additional component for the alpha value.\n\nIf the pattern is a colored pattern, pass an alpha value.\n\nDiscussion\n\nThe current fill color space must be a pattern color space. Otherwise, the result of calling this function is undefined. If you want to set a fill color, not a pattern, use CGContextSetFillColorWithColor.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetRenderingIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455544-cgcontextsetrenderingintent",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nintent\n\nA rendering intent constant—kCGRenderingIntentDefault, kCGRenderingIntentAbsoluteColorimetric, kCGRenderingIntentRelativeColorimetric, kCGRenderingIntentPerceptual, or kCGRenderingIntentSaturation. For a discussion of these constants, see CGColorSpace.\n\nDiscussion\n\nThe rendering intent specifies how to handle colors that are not located within the gamut of the destination color space of a graphics context. If you do not explicitly set the rendering intent, Core Graphics uses perceptual rendering intent when drawing sampled images and relative colorimetric rendering intent for all other drawing.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGContextSetShouldAntialias | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455178-cgcontextsetshouldantialias",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nshouldAntialias\n\nA Boolean value that specifies whether antialiasing should be turned on. Antialiasing is turned on by default when a window or bitmap context is created. It is turned off for other types of contexts.\n\nDiscussion\n\nAntialiasing is a graphics state parameter.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetInterpolationQuality\nSets the level of interpolation quality for a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGBitmapContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgbitmapcontext",
    "html": "Overview\n\nThe number of components for each pixel in a bitmap graphics context is specified by a color space, defined by a CGColorSpaceRef. The bitmap graphics context specifies whether the bitmap should contain an alpha channel, and how the bitmap is generated.\n\nTopics\nCreating Bitmap Contexts\nCGBitmapContextCreate\nCreates a bitmap graphics context.\nCGBitmapContextCreateWithData\nCreates a bitmap graphics context with the specified callback function.\nCGBitmapContextCreateImage\nCreates and returns a CGImage from the pixel data in a bitmap graphics context.\nGetting Information About Bitmap Contexts\nThese functions return the values of attributes specified when a bitmap context is created.\nCGBitmapContextGetBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nCGBitmapContextGetAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nCGBitmapContextGetBitsPerComponent\nReturns the bits per component of a bitmap context.\nCGBitmapContextGetBitsPerPixel\nReturns the bits per pixel of a bitmap context.\nCGBitmapContextGetBytesPerRow\nReturns the bytes per row of a bitmap context.\nCGBitmapContextGetColorSpace\nReturns the color space of a bitmap context.\nCGBitmapContextGetData\nReturns a pointer to the image data associated with a bitmap context.\nCGBitmapContextGetHeight\nReturns the height in pixels of a bitmap context.\nCGBitmapContextGetWidth\nReturns the width in pixels of a bitmap context.\nData Types\nCGBitmapContextReleaseDataCallback\nA callback function used to release data associate with the bitmap context.\nSee Also\nOpaque Types\nCGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nCGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nCGColorSpace\nA profile that specifies how to interpret a color value for display.\nCGContext\nA Quartz 2D drawing destination.\nCGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nCGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nCGFont\nA set of character glyphs and layout information for drawing text.\nCGFunction\nA general facility for defining and using callback functions.\nCGGLContext\nDeprecated. A type of CGContextRef for drawing OpenGL content.\nCGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nCGImage\nA bitmap image or image mask.\nCGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nCGPath\nImmutable and mutable types for graphics paths: mathematical descriptions of shapes or lines to be drawn in a graphics context.\nCGPattern\nA 2D pattern to be used for drawing graphics paths.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFContext\nA type of CGContextRef for drawing PDF content.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nCGPDFPage\nA page in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPSConverter\nAn object that converts PostScript data to PDF data.\nCGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills."
  },
  {
    "title": "CGWindowLevelKey.dockWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/dockwindow",
    "html": "Discussion\n\nThe level for the dock."
  },
  {
    "title": "CGWindowLevelKey.floatingWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/floatingwindow",
    "html": "Discussion\n\nThe level for floating windows."
  },
  {
    "title": "CGWindowLevelKey.tornOffMenuWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/tornoffmenuwindow",
    "html": "Discussion\n\nThe level for torn-off menus."
  },
  {
    "title": "CGWindowLevelKey.mainMenuWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/mainmenuwindow",
    "html": "Discussion\n\nThe level for the menus displayed in the menu bar."
  },
  {
    "title": "CGWindowLevelKey.modalPanelWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/modalpanelwindow",
    "html": "Discussion\n\nThe level for modal panels."
  },
  {
    "title": "CGWindowLevelKey.statusWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/statuswindow",
    "html": "Discussion\n\nThe level for status windows."
  },
  {
    "title": "CGWindowLevelKey.helpWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/helpwindow",
    "html": "Discussion\n\nThe level for help windows."
  },
  {
    "title": "CGWindowLevelKey.cursorWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/cursorwindow",
    "html": "Discussion\n\nThe level for the cursor."
  },
  {
    "title": "CGWindowLevelKey.numberOfWindowLevelKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/numberofwindowlevelkeys",
    "html": "Discussion\n\nThe total number of window levels."
  },
  {
    "title": "CGColorSpaceRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408855-cgcolorspacerelease",
    "html": "Parameters\ncs\n\nThe Quartz color space to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the cs parameter is NULL.\n\nSee Also\nRetaining and Releasing Color Spaces\nCGColorSpaceRetain\nIncrements the retain count of a color space."
  },
  {
    "title": "CGGlyphDeprecatedEnum.min | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgglyphdeprecatedenum/min",
    "html": "Deprecated\n\nUse kCGGlyphMax instead."
  },
  {
    "title": "CGGlyphDeprecatedEnum.max | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgglyphdeprecatedenum/max",
    "html": "Deprecated\n\nUse kCGGlyphMax instead."
  },
  {
    "title": "CGWindowLevelKey.normalWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/normalwindow",
    "html": "Discussion\n\nThe level for normal windows."
  },
  {
    "title": "CGWindowLevelKey.draggingWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/draggingwindow",
    "html": "Discussion\n\nThe level for a window being dragged."
  },
  {
    "title": "CGWindowLevelKey.popUpMenuWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/popupmenuwindow",
    "html": "Discussion\n\nThe level for pop-up menus."
  },
  {
    "title": "CGWindowLevelKey.screenSaverWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/screensaverwindow",
    "html": "Discussion\n\nThe level for screen savers."
  },
  {
    "title": "CGWindowLevelKey.overlayWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/overlaywindow",
    "html": "Discussion\n\nThe level for overlay windows."
  },
  {
    "title": "CGWindowLevelKey.maximumWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey/maximumwindow",
    "html": "Discussion\n\nThe highest allowed window level."
  },
  {
    "title": "kCGWindowIDCFNumberType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowidcfnumbertype",
    "html": "Discussion\n\nThe encoding type for window IDs inside a CFNumberRef opaque type."
  },
  {
    "title": "CGRectCreateDictionaryRepresentation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455760-cgrectcreatedictionaryrepresenta",
    "html": "Parameters\nrect\n\nA rectangle.\n\nReturn Value\n\nThe dictionary representation of the rectangle.\n\nSee Also\nAlternate Representations\ninit?(dictionaryRepresentation: CFDictionary)\nCreates a rectangle from a canonical dictionary representation.\nvar debugDescription: String\nvar customMirror: Mirror\nA representation of the rectangle’s structure and display style for use in debugging.\nvar customPlaygroundQuickLook: PlaygroundQuickLook\nA representation of the rectangle for use in Playgrounds.\nDeprecated"
  },
  {
    "title": "CGDisplayModeRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1562069-cgdisplaymoderelease",
    "html": "Parameters\nmode\n\nA display mode to be released.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the mode parameter is NULL.\n\nSee Also\nCreating and Managing Display Modes\nCGDisplayAvailableModes\nReturns information about the currently available display modes.\nDeprecated\nCGDisplayBestModeForParameters\nReturns information about the display mode closest to a specified depth and screen size.\nDeprecated\nCGDisplayBestModeForParametersAndRefreshRate\nReturns information about the display mode closest to a specified depth, screen size, and refresh rate.\nDeprecated\nCGDisplayCurrentMode\nReturns information about the current display mode.\nDeprecated\nCGDisplaySwitchToMode\nSwitches a display to a different mode.\nDeprecated\nCGDisplayCopyDisplayMode\nReturns information about a display’s current configuration.\nCGDisplayCopyAllDisplayModes\nReturns information about the currently available display modes.\nCGDisplaySetDisplayMode\nSwitches a display to a different mode.\nCGDisplayModeRetain\nRetains a Core Graphics display mode."
  },
  {
    "title": "CGMouseButton.right | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmousebutton/right",
    "html": "Discussion\n\nSpecifies the right mouse button on a two-button or three-button mouse."
  },
  {
    "title": "CGMouseButton.center | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmousebutton/center",
    "html": "Discussion\n\nSpecifies the center mouse button on a three-button mouse."
  },
  {
    "title": "CGEventTapOptions.defaultTap | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventtapoptions/defaulttap",
    "html": "Discussion\n\nSpecifies that a new event tap is an active filter. (Applications targeting OS X v10.4 should use the literal value to create an active filter event tap, as this constant was omitted from the header.)"
  },
  {
    "title": "CGEventTapOptions.listenOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventtapoptions/listenonly",
    "html": "Discussion\n\nSpecifies that a new event tap is a passive listener."
  },
  {
    "title": "CGEventCreateScrollWheelEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541327-cgeventcreatescrollwheelevent",
    "html": "Parameters\nsource\n\nAn event source taken from another event, or NULL.\n\nunits\n\nThe unit of measurement for the scrolling event. Pass one of the constants listed in CGScrollEventUnit.\n\nwheelCount\n\nThe number of scrolling devices on the mouse, up to a maximum of 3.\n\nwheel1\n\nA value that reflects the movement of the primary scrolling device on the mouse. Scrolling movement is generally represented by small signed integer values, typically in a range from -10 to +10. Large values may have unexpected results, depending on the application that processes the event.\n\n...\n\nUp to two values that reflect the movements of the other scrolling devices on the mouse, if any.\n\nReturn Value\n\nA new scrolling event, or NULL if the event could not be created. When you no longer need the event, you should release it using the function CFRelease.\n\nDiscussion\n\nThis function allows you to create a scrolling event and customize the event before posting it to the event system.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGMouseButton.left | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmousebutton/left",
    "html": "Discussion\n\nSpecifies the only mouse button on a one-button mouse, or the left mouse button on a two-button or three-button mouse."
  },
  {
    "title": "CGEventMouseSubtype.tabletProximity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventmousesubtype/tabletproximity",
    "html": "Discussion\n\nSpecifies that the mouse event originated from a tablet device with the pen in proximity but not necessarily touching the tablet, and that the various kCGTabletProximity field selectors may be used to obtain tablet-specific data from the mouse event. This is often used with mouse move events originating from a tablet."
  },
  {
    "title": "CGPDFObjectGetType(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455189-cgpdfobjectgettype",
    "html": "Parameters\nobject\n\nA PDF object. If the value if not a PDF object, the behavior is unspecified.\n\nReturn Value\n\nReturns the type of the object parameter. See Data Types.\n\nSee Also\nGetting Object Types and Values\nfunc CGPDFObjectGetValue(CGPDFObjectRef, CGPDFObjectType, UnsafeMutableRawPointer?) -> Bool\nReturns whether an object is of a given type and if it is, retrieves its value."
  },
  {
    "title": "CGPDFOperatorTableRelease(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455277-cgpdfoperatortablerelease",
    "html": "Parameters\ntable\n\nA PDF operator table.\n\nSee Also\nRetaining and Releasing a PDF Operator Table\nfunc CGPDFOperatorTableRetain(CGPDFOperatorTableRef) -> CGPDFOperatorTableRef\nIncrements the retain count of a CGPDFOperatorTable object."
  },
  {
    "title": "CGPostScrollWheelEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541788-cgpostscrollwheelevent",
    "html": "Parameters\nwheelCount\n\nThe number of scrolling devices, up to a maximum of 3.\n\nwheel1\n\nA value that reflects the movement of the primary scrolling device on the mouse.\n\n...\n\nUp to two values that reflect the movements of the other scrolling devices on the mouse (if any).\n\nReturn Value\n\nA result code. See the result codes described in Quartz Display Services.\n\nDiscussion\n\nScrolling movement is generally represented by small signed integer values, typically in a range from -10 to +10. Large values may have unexpected results, depending on the application that processes the event.\n\nThis function is not recommended for general use because of undocumented special cases and undesirable side effects. The recommended replacement for this function is CGEventCreateScrollWheelEvent, which allows you to create a scrolling event and customize the event before posting it to the event system.\n\nSee Also\nDeprecated Functions\nCGEventGetSource\nReturns a Quartz event source created from an existing Quartz event.\nCGPostKeyboardEvent\nSynthesizes a low-level keyboard event on the local machine.\nDeprecated\nCGPostMouseEvent\nSynthesizes a low-level mouse-button event on the local machine.\nDeprecated\nCGEnableEventStateCombining\nEnables or disables the merging of actual key and mouse state with the application-specified state in a synthetic event.\nDeprecated\nCGInhibitLocalEvents\nTurns off local hardware events in the current session.\nDeprecated\nCGSetLocalEventsFilterDuringSuppressionState\nFilters local hardware events from the keyboard and mouse during the short interval after a synthetic event is posted.\nDeprecated\nCGSetLocalEventsSuppressionInterval\nSets the time interval in seconds that local hardware events are suppressed after posting a synthetic event.\nDeprecated"
  },
  {
    "title": "CGEventSetTimestamp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456611-cgeventsettimestamp",
    "html": "Parameters\nevent\n\nThe event to access.\n\ntimestamp\n\nThe new timestamp of the specified event.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGEventSourceSetPixelsPerLine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408766-cgeventsourcesetpixelsperline",
    "html": "Parameters\nsource\n\nThe event source to access.\n\npixelsPerLine\n\nThe scale of pixels per line in the specified event source.\n\nDiscussion\n\nThis function sets the scale of pixels per line in the specified event source. For example, if you pass the value 12.0 in the pixelsPerLine parameter, the scale of pixels per line in the event source would be changed to 12.0. Every scrolling event can be interpreted to be scrolling by pixel or by line. By default, the scale is about ten pixels per line. You can retrieve the scale with the function CGEventSourceGetPixelsPerLine.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceSetLocalEventsSuppressionInterval\nSets the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGPostMouseEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541785-cgpostmouseevent",
    "html": "Parameters\nmouseCursorPosition\n\nThe new coordinates of the mouse in global display space.\n\nupdateMouseCursorPosition\n\nPass true if the on-screen cursor should be moved to the location specified in the mouseCursorPosition parameter; otherwise, pass false.\n\nbuttonCount\n\nThe number of mouse buttons, up to a maximum of 32.\n\nmouseButtonDown\n\nPass true to specify that the primary or left mouse button is down; otherwise, pass false.\n\n...\n\nZero or more Boolean values that specify whether the remaining mouse buttons are down (true) or up (false). The second value, if any, should specify the state of the secondary mouse button (right). A third value would specify the state of the center button, and the remaining buttons would be in USB device order.\n\nReturn Value\n\nA result code. See the result codes described in Quartz Display Services.\n\nDiscussion\n\nBased on the arguments you pass to this function, the function generates the appropriate mouse-down, mouse-up, mouse-move, or mouse-drag events by comparing the new state with the current state.\n\nThis function is not recommended for general use because of undocumented special cases and undesirable side effects. The recommended replacement for this function is CGEventCreateMouseEvent, which allows you to create a mouse event and customize the event before posting it to the event system.\n\nSee Also\nDeprecated Functions\nCGEventGetSource\nReturns a Quartz event source created from an existing Quartz event.\nCGPostKeyboardEvent\nSynthesizes a low-level keyboard event on the local machine.\nDeprecated\nCGPostScrollWheelEvent\nSynthesizes a low-level scrolling event on the local machine.\nDeprecated\nCGEnableEventStateCombining\nEnables or disables the merging of actual key and mouse state with the application-specified state in a synthetic event.\nDeprecated\nCGInhibitLocalEvents\nTurns off local hardware events in the current session.\nDeprecated\nCGSetLocalEventsFilterDuringSuppressionState\nFilters local hardware events from the keyboard and mouse during the short interval after a synthetic event is posted.\nDeprecated\nCGSetLocalEventsSuppressionInterval\nSets the time interval in seconds that local hardware events are suppressed after posting a synthetic event.\nDeprecated"
  },
  {
    "title": "CGEventSourceSetLocalEventsSuppressionInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408783-cgeventsourcesetlocaleventssuppr",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nseconds\n\nThe period of time in seconds that local hardware events (keyboard or mouse) are suppressed after posting a Quartz event created with the specified event source. The value should be a number in the range [0.0, 10.0].\n\nDiscussion\n\nBy default, the system does not suppress local hardware events from the keyboard or mouse during a short interval after a Quartz event is posted. You can use the function CGEventSourceSetLocalEventsFilterDuringSuppressionState to modify this behavior.\n\nThis function sets the period of time in seconds that local hardware events may be suppressed after posting a Quartz event created with the specified event source. The default suppression interval is 0.25 seconds.\n\nSee Also\nWorking With Event Sources\nCGEventSourceGetTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nCGEventSourceCreate\nReturns a Quartz event source created with a specified source state.\nCGEventSourceGetKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nCGEventSourceSetKeyboardType\nSets the keyboard type to be used with a Quartz event source.\nCGEventSourceGetSourceStateID\nReturns the source state associated with a Quartz event source.\nCGEventSourceButtonState\nReturns a Boolean value indicating the current button state of a Quartz event source.\nCGEventSourceKeyState\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nCGEventSourceFlagsState\nReturns the current flags of a Quartz event source.\nCGEventSourceSecondsSinceLastEventType\nReturns the elapsed time since the last event for a Quartz event source.\nCGEventSourceCounterForEventType\nReturns a count of events of a given type seen since the window server started.\nCGEventSourceGetUserData\nReturns the 64-bit user-specified data for a Quartz event source.\nCGEventSourceSetUserData\nSets the 64-bit user-specified data for a Quartz event source.\nCGEventSourceGetLocalEventsFilterDuringSuppressionState\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceSetLocalEventsFilterDuringSuppressionState\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nCGEventSourceGetLocalEventsSuppressionInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nCGEventSourceGetPixelsPerLine\nGets the scale of pixels per line in a scrolling event source.\nCGEventSourceSetPixelsPerLine\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfpage/1454478-typeid",
    "html": "Return Value\n\nReturns the Core Foundation type for a PDF page."
  },
  {
    "title": "CGEventSetType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454300-cgeventsettype",
    "html": "Parameters\nevent\n\nThe event to access.\n\ntype\n\nThe new event type of the specified event. The return value is one of the constants listed in CGEventType.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventSetFlags\nSets the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGWindowBackingType.backingStoreNonretained | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowbackingtype/backingstorenonretained",
    "html": "Discussion\n\nThe window draws directly to the screen without using any buffer.\n\nYou should typically not use this mode. It exists primarily for use in the original Classic Blue Box. It does not support Quartz drawing, alpha blending, or opacity. Moreover, it does not support hardware acceleration, and interferes with system-wide display acceleration. If you use this mode, your application must manage visibility region clipping itself, and manage repainting on visibility changes."
  },
  {
    "title": "CGWindowBackingType.backingStoreBuffered | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowbackingtype/backingstorebuffered",
    "html": "Discussion\n\nThe window draws into a display buffer and then flushes that buffer to the screen.\n\nYou should typically use this mode. It supports hardware acceleration, Quartz drawing, and takes advantage of the GPU when possible. It also supports alpha channel drawing, opacity controls, using the compositor."
  },
  {
    "title": "CGWindowBackingType.backingStoreRetained | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowbackingtype/backingstoreretained",
    "html": "Discussion\n\nThe window uses a buffer, but draws directly to the screen where possible and to the buffer for obscured portions.\n\nYou should typically not use this mode. It combines the limitations of CGWindowBackingType.backingStoreNonretained with the memory use of CGWindowBackingType.backingStoreBuffered. The original NeXTSTEP implementation was an interesting compromise that worked well with fast memory mapped framebuffers on the CPU bus—something that hasn't been in general use since around 1994. These tend to have performance problems.\n\nIn macOS 10.5 and later, requests for retained windows will result in the window system creating a buffered window, as that better matches actual use"
  },
  {
    "title": "CGPDFOperatorTableCreate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455932-cgpdfoperatortablecreate",
    "html": "Return Value\n\nAn empty PDF operator table. You are responsible for releasing this object by calling CGPDFOperatorTableRelease(_:).\n\nDiscussion\n\nCall the function CGPDFOperatorTableSetCallback(_:_:_:) to fill the operator table with callbacks."
  },
  {
    "title": "CGPDFOperatorTableRetain(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454547-cgpdfoperatortableretain",
    "html": "Parameters\ntable\n\nA PDF operator table.\n\nReturn Value\n\nThe same PDF operator table you passed in as the table parameter.\n\nSee Also\nRetaining and Releasing a PDF Operator Table\nfunc CGPDFOperatorTableRelease(CGPDFOperatorTableRef)\nDecrements the retain count of a CGPDFOperatorTable object."
  },
  {
    "title": "CGPDFOperatorTableSetCallback(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454118-cgpdfoperatortablesetcallback",
    "html": "Parameters\ntable\n\nA PDF operator table.\n\nname\n\nThe name of the PDF operator you want to set a callback for.\n\ncallback\n\nThe callback to invoke for the PDF operator specified by the name parameter.\n\nDiscussion\n\nYou call the function CGPDFOperatorTableSetCallback(_:_:_:) for each PDF operator for which you want to provide a callback. See Appendix A in the PDF Reference, Second Edition, version 1.3, Adobe Systems Incorporated for a summary of PDF operators."
  },
  {
    "title": "CGPDFOperatorCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfoperatorcallback",
    "html": "Parameters\nscanner\n\nA CGPDFScanner object. Core Graphics passes the scanner to your callback function. The scanner contains the PDF content stream that has the PDF operator that corresponds to this callback.\n\ninfo\n\nA pointer to data passed to the callback.\n\nDiscussion\n\nYour callback function takes any action that’s appropriate for your application. For example, if you want to count the number of inline images in a PDF but ignore the image data, you would set a callback for the EI operator. In your callback you would increment a counter for each call."
  },
  {
    "title": "CGPDFObjectGetValue(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456508-cgpdfobjectgetvalue",
    "html": "Parameters\nobject\n\nA PDF object.\n\ntype\n\nA PDF object type.\n\nvalue\n\nIf the object parameter is a PDF object of the specified type, then on return contains that object, otherwise the value is unspecified.\n\nReturn Value\n\nReturns true if the specified object is a PDF object of the specified type, otherwise false.\n\nDiscussion\n\nThe function gets the value of the object parameter. If the type of object is equal to the type specified, then:\n\nIf the value parameter is not a null pointer, then the value of object is copied to value, and the function returns true.\n\nIf the value parameter is a null pointer, then the function simply returns true. This allows you to test whether object is of the type specified.\n\nIf the type of object is CGPDFObjectType.integer and type is equal to CGPDFObjectType.real, then the value of object is converted to floating point, the result copied to value, and the function returns true. If none of the preceding conditions is met, returns false.\n\nSee Also\nGetting Object Types and Values\nfunc CGPDFObjectGetType(CGPDFObjectRef) -> CGPDFObjectType\nReturns the PDF type identifier of an object."
  },
  {
    "title": "desktopShapeChangedFlag | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaychangesummaryflags/1454438-desktopshapechangedflag",
    "html": "Discussion\n\nThe shape of the desktop (the union of display areas) has changed."
  },
  {
    "title": "CGWindowSharingType.readOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowsharingtype/readonly",
    "html": "Discussion\n\nThe window is shared and its contents can be read by all processes but modified only by the process that created it."
  },
  {
    "title": "getBoxRect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfpage/1456114-getboxrect",
    "html": "Parameters\nbox\n\nA constant that specifies the type of box. For possible values, see CGPDFBox.\n\nReturn Value\n\nReturns the rectangle associated with the type of box specified by the box parameter in the specified page.\n\nDiscussion\n\nReturns the rectangle associated with the specified box in the specified page. This is the value of the corresponding entry (such as /MediaBox, /ArtBox, and so on) in the page’s dictionary.\n\nSee Also\nGetting Page Information\nvar dictionary: CGPDFDictionaryRef?\nReturns the dictionary of a PDF page.\nvar document: CGPDFDocument?\nReturns the document for a page.\nfunc getDrawingTransform(CGPDFBox, rect: CGRect, rotate: Int32, preserveAspectRatio: Bool) -> CGAffineTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nvar pageNumber: Int\nReturns the page number of the specified PDF page.\nvar rotationAngle: Int32\nReturns the rotation angle of a PDF page."
  },
  {
    "title": "CGEventSetFlags | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455044-cgeventsetflags",
    "html": "Parameters\nevent\n\nThe event to access.\n\nlocation\n\nThe new flags of the specified event. See CGEventFlags.\n\nSee Also\nWorking With Events\nCGEventGetTypeID\nReturns the type identifier for the opaque type CGEventRef.\nCGEventCreate\nReturns a new Quartz event.\nCGEventCreateData\nReturns a flattened data representation of a Quartz event.\nCGEventCreateFromData\nReturns a Quartz event created from a flattened data representation of the event.\nCGEventCreateMouseEvent\nReturns a new Quartz mouse event.\nCGEventCreateKeyboardEvent\nReturns a new Quartz keyboard event.\nCGEventCreateScrollWheelEvent\nReturns a new Quartz scrolling event.\nCGEventCreateCopy\nReturns a copy of an existing Quartz event.\nCGEventCreateSourceFromEvent\nReturns a Quartz event source created from an existing Quartz event.\nCGEventSetSource\nSets the event source of a Quartz event.\nCGEventGetType\nReturns the event type of a Quartz event (left mouse down, for example).\nCGEventSetType\nSets the event type of a Quartz event (left mouse down, for example).\nCGEventGetTimestamp\nReturns the timestamp of a Quartz event.\nCGEventSetTimestamp\nSets the timestamp of a Quartz event.\nCGEventGetLocation\nReturns the location of a Quartz mouse event.\nCGEventGetUnflippedLocation\nReturns the location of a Quartz mouse event.\nCGEventSetLocation\nSets the location of a Quartz mouse event.\nCGEventGetFlags\nReturns the event flags of a Quartz event.\nCGEventKeyboardGetUnicodeString\nReturns the Unicode string associated with a Quartz keyboard event.\nCGEventKeyboardSetUnicodeString\nSets the Unicode string associated with a Quartz keyboard event.\nCGEventGetIntegerValueField\nReturns the integer value of a field in a Quartz event.\nCGEventSetIntegerValueField\nSets the integer value of a field in a Quartz event.\nCGEventGetDoubleValueField\nReturns the floating-point value of a field in a Quartz event.\nCGEventSetDoubleValueField\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "dictionary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfpage/1455125-dictionary",
    "html": "Parameters\npage\n\nA PDF page.\n\nReturn Value\n\nReturns the PDF dictionary for the specified page.\n\nSee Also\nGetting Page Information\nfunc getBoxRect(CGPDFBox) -> CGRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nvar document: CGPDFDocument?\nReturns the document for a page.\nfunc getDrawingTransform(CGPDFBox, rect: CGRect, rotate: Int32, preserveAspectRatio: Bool) -> CGAffineTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nvar pageNumber: Int\nReturns the page number of the specified PDF page.\nvar rotationAngle: Int32\nReturns the rotation angle of a PDF page."
  },
  {
    "title": "permanently | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgconfigureoption/1455394-permanently",
    "html": "Discussion\n\nChanges persist in future login sessions by the same user. If the requested changes cannot be supported by the Aqua UI (resolution and pixel depth constraints apply), the settings for the current login session are used instead, and any changes have session scope."
  },
  {
    "title": "kCGWindowWorkspace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowworkspace",
    "html": "Discussion\n\nThe key that identifies the workspace to which the window belongs. The value for this key is a CFNumber type whose value is encoded using the CFNumberType.intType type."
  },
  {
    "title": "CGPDFScannerPopInteger(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454399-cgpdfscannerpopinteger",
    "html": "Parameters\nscanner\n\nA valid scanner object.\n\nvalue\n\nOn output, points to the PDF integer object popped from the scanner stack.\n\nReturn Value\n\ntrue if the PDF integer is retrieved successfully; otherwise, false.\n\nSee Also\nGetting PDF Objects from the Scanner Stack\nfunc CGPDFScannerPopObject(CGPDFScannerRef, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nRetrieves an object from the scanner stack.\nfunc CGPDFScannerPopBoolean(CGPDFScannerRef, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nRetrieves a Boolean object from the scanner stack.\nfunc CGPDFScannerPopNumber(CGPDFScannerRef, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nRetrieves a real value object from the scanner stack.\nfunc CGPDFScannerPopName(CGPDFScannerRef, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nRetrieves a character string from the scanner stack.\nfunc CGPDFScannerPopString(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nRetrieves a string object from the scanner stack.\nfunc CGPDFScannerPopArray(CGPDFScannerRef, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nRetrieves an array object from the scanner stack.\nfunc CGPDFScannerPopDictionary(CGPDFScannerRef, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nRetrieves a PDF dictionary object from the scanner stack.\nfunc CGPDFScannerPopStream(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nRetrieves a PDF stream object from the scanner stack."
  },
  {
    "title": "CGPDFContentStreamGetStreams(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1410048-cgpdfcontentstreamgetstreams",
    "html": "Parameters\ncs\n\nA PDF content stream object.\n\nReturn Value\n\nThe array of PDF content streams that make up the content stream object represented by the cs parameter.\n\nSee Also\nGetting Data from a PDF Content Stream Object\nfunc CGPDFContentStreamGetResource(CGPDFContentStreamRef, UnsafePointer<CChar>, UnsafePointer<CChar>) -> CGPDFObjectRef?\nGets the specified resource from a PDF content stream object."
  },
  {
    "title": "reducedDirtyRectangleCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgscreenupdateoperation/1456164-reduceddirtyrectanglecount",
    "html": "Discussion\n\nWhen presented as part of the requested operations to the function CGWaitForScreenUpdateRects(_:_:_:_:_:), specifies that the function should try to minimize the number of rectangles returned to represent the changed areas of the display. The function may combine adjacent rectangles within a larger bounding rectangle, which may include unmodified areas of the display."
  },
  {
    "title": "CGWindowSharingType.readWrite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowsharingtype/readwrite",
    "html": "Discussion\n\nThe window is shared and its contents can be read and modified by any process."
  },
  {
    "title": "CGDataProviderCreate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/1805224-cgdataprovidercreate",
    "html": "Parameters\ninfo\n\nA pointer to data of any type or NULL. When Core Graphics calls the functions specified in the callbacks parameter, it sends each of the functions this data.\n\ncallbacks\n\nA pointer to a CGDataProviderCallbacks structure that specifies the callback functions you implement to handle the data provider’s basic memory management. For a complete description, see CGDataProviderCallbacks.\n\nReturn Value\n\nA new data provider. You are responsible for releasing this object using CGDataProviderRelease.\n\nOverview\n\nYou use this function to create a sequential-access data provider that uses callback functions to read data from your program in a stream.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGPDFObjectType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfobjecttype",
    "html": "Topics\nConstants\ncase null\nThe type for a PDF null.\ncase boolean\nThe type for a PDF Boolean.\ncase integer\nThe type for a PDF integer.\ncase real\nThe type for a PDF real.\ncase name\nType for a PDF name.\ncase string\nThe type for a PDF string.\ncase array\nType for a PDF array.\ncase dictionary\nThe type for a PDF dictionary.\ncase stream\nThe type for a PDF stream.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "getDrawingTransform(_:rect:rotate:preserveAspectRatio:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfpage/1454893-getdrawingtransform",
    "html": "Parameters\nbox\n\nA constant that specifies the type of box. For possible values, see CGPDFBox.\n\nrect\n\nA Quartz rectangle.\n\nrotate\n\nAn integer, that must be a multiple of 90, that specifies the angle by which the specified rectangle is rotated clockwise.\n\npreserveAspectRatio\n\nA Boolean value that specifies whether or not the aspect ratio should be preserved. A value of true specifies that the aspect ratio should be preserved.\n\nReturn Value\n\nAn affine transform that maps the box specified by the box parameter to the rectangle specified by the rect parameter.\n\nDiscussion\n\nQuartz constructs the affine transform as follows:\n\nComputes the effective rectangle by intersecting the rectangle associated with box and the /MediaBox entry of the specified page.\n\nRotates the effective rectangle according to the page’s /Rotate entry.\n\nCenters the resulting rectangle on rect.If the value of the rotate parameter is non-zero, then the rectangle is rotated clockwise by rotate degrees. The value of rotate must be a multiple of 90.\n\nScales the rectangle, if necessary, so that it coincides with the edges of rect. If the value of preserveAspectRatio parameter is true, then the final rectangle coincides with the edges of rect only in the more restrictive dimension.\n\nSee Also\nGetting Page Information\nfunc getBoxRect(CGPDFBox) -> CGRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nvar dictionary: CGPDFDictionaryRef?\nReturns the dictionary of a PDF page.\nvar document: CGPDFDocument?\nReturns the document for a page.\nvar pageNumber: Int\nReturns the page number of the specified PDF page.\nvar rotationAngle: Int32\nReturns the rotation angle of a PDF page."
  },
  {
    "title": "document | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfpage/1456166-document",
    "html": "Parameters\npage\n\nA PDF page.\n\nReturn Value\n\nThe PDF document with which the specified page is associated.\n\nSee Also\nGetting Page Information\nfunc getBoxRect(CGPDFBox) -> CGRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nvar dictionary: CGPDFDictionaryRef?\nReturns the dictionary of a PDF page.\nfunc getDrawingTransform(CGPDFBox, rect: CGRect, rotate: Int32, preserveAspectRatio: Bool) -> CGAffineTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nvar pageNumber: Int\nReturns the page number of the specified PDF page.\nvar rotationAngle: Int32\nReturns the rotation angle of a PDF page."
  },
  {
    "title": "pageNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfpage/1454587-pagenumber",
    "html": "Parameters\npage\n\nA PDF page.\n\nReturn Value\n\nReturns the page number of the specified page.\n\nSee Also\nGetting Page Information\nfunc getBoxRect(CGPDFBox) -> CGRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nvar dictionary: CGPDFDictionaryRef?\nReturns the dictionary of a PDF page.\nvar document: CGPDFDocument?\nReturns the document for a page.\nfunc getDrawingTransform(CGPDFBox, rect: CGRect, rotate: Int32, preserveAspectRatio: Bool) -> CGAffineTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nvar rotationAngle: Int32\nReturns the rotation angle of a PDF page."
  },
  {
    "title": "rotationAngle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfpage/1455550-rotationangle",
    "html": "Parameters\npage\n\nA PDF page.\n\nReturn Value\n\nThe rotation angle (in degrees) of the specified page. This is the value of the /Rotate entry in the page’s dictionary.\n\nSee Also\nGetting Page Information\nfunc getBoxRect(CGPDFBox) -> CGRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nvar dictionary: CGPDFDictionaryRef?\nReturns the dictionary of a PDF page.\nvar document: CGPDFDocument?\nReturns the document for a page.\nfunc getDrawingTransform(CGPDFBox, rect: CGRect, rotate: Int32, preserveAspectRatio: Bool) -> CGAffineTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nvar pageNumber: Int\nReturns the page number of the specified PDF page."
  },
  {
    "title": "CGPDFBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfbox",
    "html": "Topics\nConstants\ncase mediaBox\nThe page media box—a rectangle, expressed in default user space units, that defines the boundaries of the physical medium on which the page is intended to be displayed or printed\ncase cropBox\nThe page crop box—a rectangle, expressed in default user space units, that defines the visible region of default user space. When the page is displayed or printed, its contents are to be clipped to this rectangle.\ncase bleedBox\nThe page bleed box—a rectangle, expressed in default user space units, that defines the region to which the contents of the page should be clipped when output in a production environment.\ncase trimBox\nThe page trim box—a rectangle, expressed in default user space units, that defines the intended dimensions of the finished page after trimming.\ncase artBox\nThe page art box—a rectangle, expressed in default user space units, defining the extent of the page’s meaningful content (including potential white space) as intended by the page’s creator.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGPDFScannerPopObject(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455971-cgpdfscannerpopobject",
    "html": "Parameters\nscanner\n\nA valid scanner object.\n\nvalue\n\nOn output, points to the object popped from the scanner stack.\n\nReturn Value\n\ntrue if the object is retrieved successfully; otherwise, false.\n\nSee Also\nGetting PDF Objects from the Scanner Stack\nfunc CGPDFScannerPopBoolean(CGPDFScannerRef, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nRetrieves a Boolean object from the scanner stack.\nfunc CGPDFScannerPopInteger(CGPDFScannerRef, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nRetrieves an integer object from the scanner stack.\nfunc CGPDFScannerPopNumber(CGPDFScannerRef, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nRetrieves a real value object from the scanner stack.\nfunc CGPDFScannerPopName(CGPDFScannerRef, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nRetrieves a character string from the scanner stack.\nfunc CGPDFScannerPopString(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nRetrieves a string object from the scanner stack.\nfunc CGPDFScannerPopArray(CGPDFScannerRef, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nRetrieves an array object from the scanner stack.\nfunc CGPDFScannerPopDictionary(CGPDFScannerRef, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nRetrieves a PDF dictionary object from the scanner stack.\nfunc CGPDFScannerPopStream(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nRetrieves a PDF stream object from the scanner stack."
  },
  {
    "title": "CGPDFScannerPopBoolean(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454663-cgpdfscannerpopboolean",
    "html": "Parameters\nscanner\n\nA valid scanner object.\n\nvalue\n\nOn output, points to the PDF Boolean object popped from the scanner stack.\n\nReturn Value\n\ntrue if the boolean object is retrieved successfully; otherwise, false.\n\nSee Also\nGetting PDF Objects from the Scanner Stack\nfunc CGPDFScannerPopObject(CGPDFScannerRef, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nRetrieves an object from the scanner stack.\nfunc CGPDFScannerPopInteger(CGPDFScannerRef, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nRetrieves an integer object from the scanner stack.\nfunc CGPDFScannerPopNumber(CGPDFScannerRef, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nRetrieves a real value object from the scanner stack.\nfunc CGPDFScannerPopName(CGPDFScannerRef, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nRetrieves a character string from the scanner stack.\nfunc CGPDFScannerPopString(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nRetrieves a string object from the scanner stack.\nfunc CGPDFScannerPopArray(CGPDFScannerRef, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nRetrieves an array object from the scanner stack.\nfunc CGPDFScannerPopDictionary(CGPDFScannerRef, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nRetrieves a PDF dictionary object from the scanner stack.\nfunc CGPDFScannerPopStream(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nRetrieves a PDF stream object from the scanner stack."
  },
  {
    "title": "CGPDFScannerPopDictionary(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456538-cgpdfscannerpopdictionary",
    "html": "Parameters\nscanner\n\nA valid scanner object.\n\nvalue\n\nOn output, points to the PDF dictionary object popped from the scanner stack.\n\nReturn Value\n\ntrue if the PDF dictionary object is retrieved successfully; otherwise, false.\n\nSee Also\nGetting PDF Objects from the Scanner Stack\nfunc CGPDFScannerPopObject(CGPDFScannerRef, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nRetrieves an object from the scanner stack.\nfunc CGPDFScannerPopBoolean(CGPDFScannerRef, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nRetrieves a Boolean object from the scanner stack.\nfunc CGPDFScannerPopInteger(CGPDFScannerRef, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nRetrieves an integer object from the scanner stack.\nfunc CGPDFScannerPopNumber(CGPDFScannerRef, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nRetrieves a real value object from the scanner stack.\nfunc CGPDFScannerPopName(CGPDFScannerRef, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nRetrieves a character string from the scanner stack.\nfunc CGPDFScannerPopString(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nRetrieves a string object from the scanner stack.\nfunc CGPDFScannerPopArray(CGPDFScannerRef, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nRetrieves an array object from the scanner stack.\nfunc CGPDFScannerPopStream(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nRetrieves a PDF stream object from the scanner stack."
  },
  {
    "title": "CGPDFScannerPopNumber(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456297-cgpdfscannerpopnumber",
    "html": "Parameters\nscanner\n\nA valid scanner object.\n\nvalue\n\nOn output, points to the real value object popped from the scanner stack.\n\nReturn Value\n\ntrue if the real value is retrieved successfully; otherwise, false.\n\nDiscussion\n\nThe number retrieved from the scanner can be a real value or an integer value. However, the result is always converted to a value of type CGPDFReal.\n\nSee Also\nGetting PDF Objects from the Scanner Stack\nfunc CGPDFScannerPopObject(CGPDFScannerRef, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nRetrieves an object from the scanner stack.\nfunc CGPDFScannerPopBoolean(CGPDFScannerRef, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nRetrieves a Boolean object from the scanner stack.\nfunc CGPDFScannerPopInteger(CGPDFScannerRef, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nRetrieves an integer object from the scanner stack.\nfunc CGPDFScannerPopName(CGPDFScannerRef, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nRetrieves a character string from the scanner stack.\nfunc CGPDFScannerPopString(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nRetrieves a string object from the scanner stack.\nfunc CGPDFScannerPopArray(CGPDFScannerRef, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nRetrieves an array object from the scanner stack.\nfunc CGPDFScannerPopDictionary(CGPDFScannerRef, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nRetrieves a PDF dictionary object from the scanner stack.\nfunc CGPDFScannerPopStream(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nRetrieves a PDF stream object from the scanner stack."
  },
  {
    "title": "CGPDFScannerPopName(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454584-cgpdfscannerpopname",
    "html": "Parameters\nscanner\n\nA valid scanner object.\n\nvalue\n\nOn output, points to the character string popped from the scanner stack.\n\nReturn Value\n\ntrue if the string is retrieved successfully; otherwise, false.\n\nSee Also\nGetting PDF Objects from the Scanner Stack\nfunc CGPDFScannerPopObject(CGPDFScannerRef, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nRetrieves an object from the scanner stack.\nfunc CGPDFScannerPopBoolean(CGPDFScannerRef, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nRetrieves a Boolean object from the scanner stack.\nfunc CGPDFScannerPopInteger(CGPDFScannerRef, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nRetrieves an integer object from the scanner stack.\nfunc CGPDFScannerPopNumber(CGPDFScannerRef, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nRetrieves a real value object from the scanner stack.\nfunc CGPDFScannerPopString(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nRetrieves a string object from the scanner stack.\nfunc CGPDFScannerPopArray(CGPDFScannerRef, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nRetrieves an array object from the scanner stack.\nfunc CGPDFScannerPopDictionary(CGPDFScannerRef, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nRetrieves a PDF dictionary object from the scanner stack.\nfunc CGPDFScannerPopStream(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nRetrieves a PDF stream object from the scanner stack."
  },
  {
    "title": "CGPDFScannerPopString(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455018-cgpdfscannerpopstring",
    "html": "Parameters\nscanner\n\nA valid scanner object.\n\nvalue\n\nOn output, points to the string object popped from the scanner stack.\n\nReturn Value\n\ntrue if the string is retrieved successfully; otherwise, false.\n\nSee Also\nGetting PDF Objects from the Scanner Stack\nfunc CGPDFScannerPopObject(CGPDFScannerRef, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nRetrieves an object from the scanner stack.\nfunc CGPDFScannerPopBoolean(CGPDFScannerRef, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nRetrieves a Boolean object from the scanner stack.\nfunc CGPDFScannerPopInteger(CGPDFScannerRef, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nRetrieves an integer object from the scanner stack.\nfunc CGPDFScannerPopNumber(CGPDFScannerRef, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nRetrieves a real value object from the scanner stack.\nfunc CGPDFScannerPopName(CGPDFScannerRef, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nRetrieves a character string from the scanner stack.\nfunc CGPDFScannerPopArray(CGPDFScannerRef, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nRetrieves an array object from the scanner stack.\nfunc CGPDFScannerPopDictionary(CGPDFScannerRef, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nRetrieves a PDF dictionary object from the scanner stack.\nfunc CGPDFScannerPopStream(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nRetrieves a PDF stream object from the scanner stack."
  },
  {
    "title": "CGPDFScannerPopArray(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454360-cgpdfscannerpoparray",
    "html": "Parameters\nscanner\n\nA valid scanner object.\n\nvalue\n\nOn output, points to the PDF array object popped from the scanner stack.\n\nReturn Value\n\ntrue if the array object is retrieved successfully; otherwise, false.\n\nSee Also\nGetting PDF Objects from the Scanner Stack\nfunc CGPDFScannerPopObject(CGPDFScannerRef, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nRetrieves an object from the scanner stack.\nfunc CGPDFScannerPopBoolean(CGPDFScannerRef, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nRetrieves a Boolean object from the scanner stack.\nfunc CGPDFScannerPopInteger(CGPDFScannerRef, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nRetrieves an integer object from the scanner stack.\nfunc CGPDFScannerPopNumber(CGPDFScannerRef, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nRetrieves a real value object from the scanner stack.\nfunc CGPDFScannerPopName(CGPDFScannerRef, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nRetrieves a character string from the scanner stack.\nfunc CGPDFScannerPopString(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nRetrieves a string object from the scanner stack.\nfunc CGPDFScannerPopDictionary(CGPDFScannerRef, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nRetrieves a PDF dictionary object from the scanner stack.\nfunc CGPDFScannerPopStream(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nRetrieves a PDF stream object from the scanner stack."
  },
  {
    "title": "CGPDFScannerPopStream(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454561-cgpdfscannerpopstream",
    "html": "Parameters\nscanner\n\nA valid scanner object.\n\nvalue\n\nOn output, points to the PDF stream object popped from the scanner stack.\n\nReturn Value\n\ntrue if the stream object is retrieved successfully; otherwise, false.\n\nSee Also\nGetting PDF Objects from the Scanner Stack\nfunc CGPDFScannerPopObject(CGPDFScannerRef, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nRetrieves an object from the scanner stack.\nfunc CGPDFScannerPopBoolean(CGPDFScannerRef, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nRetrieves a Boolean object from the scanner stack.\nfunc CGPDFScannerPopInteger(CGPDFScannerRef, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nRetrieves an integer object from the scanner stack.\nfunc CGPDFScannerPopNumber(CGPDFScannerRef, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nRetrieves a real value object from the scanner stack.\nfunc CGPDFScannerPopName(CGPDFScannerRef, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nRetrieves a character string from the scanner stack.\nfunc CGPDFScannerPopString(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nRetrieves a string object from the scanner stack.\nfunc CGPDFScannerPopArray(CGPDFScannerRef, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nRetrieves an array object from the scanner stack.\nfunc CGPDFScannerPopDictionary(CGPDFScannerRef, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nRetrieves a PDF dictionary object from the scanner stack."
  },
  {
    "title": "CGPDFDictionaryGetStream(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430213-cgpdfdictionarygetstream",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nkey\n\nThe key for the value to be retrieved.\n\nvalue\n\nOn input, a pointer to a PDF stream. If the value associated with the specified key is a PDF stream, then on return contains that stream; otherwise, the value is unspecified.\n\nReturn Value\n\nReturns true if there is a PDF stream associated with the specified key; otherwise, false.\n\nSee Also\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetArray(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nfunc CGPDFDictionaryGetBoolean(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nfunc CGPDFDictionaryGetCount(CGPDFDictionaryRef) -> Int\nReturns the number of entries in a PDF dictionary.\nfunc CGPDFDictionaryGetDictionary(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFDictionaryGetInteger(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nfunc CGPDFDictionaryGetName(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFDictionaryGetNumber(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nfunc CGPDFDictionaryGetObject(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nfunc CGPDFDictionaryGetString(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string."
  },
  {
    "title": "CGPDFDictionaryGetString(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430224-cgpdfdictionarygetstring",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nkey\n\nThe key for the value to retrieve.\n\nvalue\n\nOn input, a pointer to a PDF string. If the value associated with the specified key is a PDF string, then on return contains that string; otherwise the value is unspecified.\n\nReturn Value\n\nReturns true if there is a PDF string associated with the specified key; otherwise, false.\n\nSee Also\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetArray(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nfunc CGPDFDictionaryGetBoolean(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nfunc CGPDFDictionaryGetCount(CGPDFDictionaryRef) -> Int\nReturns the number of entries in a PDF dictionary.\nfunc CGPDFDictionaryGetDictionary(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFDictionaryGetInteger(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nfunc CGPDFDictionaryGetName(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFDictionaryGetNumber(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nfunc CGPDFDictionaryGetObject(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nfunc CGPDFDictionaryGetStream(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream."
  },
  {
    "title": "CGPDFDictionaryApplyFunction(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430216-cgpdfdictionaryapplyfunction",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nfunction\n\nThe function to apply to each entry in the dictionary.\n\ninfo\n\nA pointer to contextual information to pass to the function.\n\nDiscussion\n\nThis function enumerates all of the entries in the dictionary, calling the function once for each. The current key, its associated value, and the contextual information are passed to the function (see also CGPDFDictionaryApplierFunction)."
  },
  {
    "title": "CGPDFContentStreamCreateWithPage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1410047-cgpdfcontentstreamcreatewithpage",
    "html": "Parameters\npage\n\nA PDF page object.\n\nReturn Value\n\nA new CGPDFContentStreamRef object. You are responsible for releasing this object by calling the CGPDFContentStreamRelease(_:) function.\n\nDiscussion\n\nA CGPDFContentStreamRef object can contain more than one PDF content stream. To retrieve an array of the PDF content streams in the object, call the function CGPDFContentStreamGetStreams(_:). To obtain the resources associated with a CGPDFContentStreamRef object, call the function CGPDFContentStreamGetResource(_:_:_:).\n\nSee Also\nCreating a PDF Content Stream Object\nfunc CGPDFContentStreamCreateWithStream(CGPDFStreamRef, CGPDFDictionaryRef, CGPDFContentStreamRef) -> CGPDFContentStreamRef\nCreates a PDF content stream object from an existing PDF content stream object."
  },
  {
    "title": "CGPDFDictionaryApplierFunction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdictionaryapplierfunction",
    "html": "Parameters\nkey\n\nThe current key in the dictionary.\n\nobject\n\nThe value in the dictionary associated with the key.\n\ninfo\n\nThe contextual information that your provided in the info parameter in CGPDFDictionaryApplyFunction(_:_:_:).\n\nDiscussion\n\nCGPDFDictionaryApplierFunction defines the callback for CGPDFDictionaryApplyFunction(_:_:_:), that enumerates all of the entries in the dictionary, calling your custom applier function once for each entry. The current key, its associated value, and the contextual information are passed to your applier function using the key, value, and info parameters respectively."
  },
  {
    "title": "CGPDFContentStreamRetain(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1410049-cgpdfcontentstreamretain",
    "html": "Parameters\ncs\n\nA PDF content stream object.\n\nReturn Value\n\nThe same PDF content stream you passed in as the cs parameter.\n\nSee Also\nRetaining and Releasing a PDF Content Stream Object\nfunc CGPDFContentStreamRelease(CGPDFContentStreamRef)\nDecrements the retain count of a PDF content stream object."
  },
  {
    "title": "CGFontRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396363-cgfontrelease",
    "html": "Parameters\nfont\n\nThe font to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the font parameter is NULL.\n\nSee Also\nRetaining and Releasing a CGFont Object\nCGFontRetain\nIncrements the retain count of a font."
  },
  {
    "title": "CGDataProviderCallbacks | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataprovidercallbacks",
    "html": "Overview\n\nThe functions specified by the CGDataProviderCallbacks structure are responsible for sequentially copying data to a memory buffer for Core Graphics to use. The functions are also responsible for handling the data provider’s basic memory management. You supply a CGDataProviderCallbacks structure to the function CGDataProviderCreate to create a sequential-access data provider.\n\nTopics\nFields\ngetBytes\nA pointer to a function that copies data from the provider. For more information, see CGDataProviderGetBytesCallback.\nskipBytes\nA pointer to a function that Core Graphics calls to advance the stream of data supplied by the provider. For more information, see CGDataProviderSkipBytesCallback.\nrewind\nA pointer to a function Core Graphics calls to return the provider to the beginning of the data stream. For more information, see CGDataProviderRewindCallback.\nreleaseProvider\nA pointer to a function that handles clean-up for the data provider, or NULL. For more information, see CGDataProviderReleaseInfoCallback."
  },
  {
    "title": "CGPDFScannerRelease(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454962-cgpdfscannerrelease",
    "html": "Parameters\nscanner\n\nThe scanner object to release.\n\nSee Also\nRetaining and Releasing PDF Scanner Objects\nfunc CGPDFScannerRetain(CGPDFScannerRef) -> CGPDFScannerRef\nIncrements the retain count of a scanner object."
  },
  {
    "title": "CGPDFScannerRetain(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455810-cgpdfscannerretain",
    "html": "Parameters\nscanner\n\nThe scanner object to retain.\n\nReturn Value\n\nThe same scanner object passed to the function in the scanner parameter.\n\nSee Also\nRetaining and Releasing PDF Scanner Objects\nfunc CGPDFScannerRelease(CGPDFScannerRef)\nDecrements the retain count of a scanner object."
  },
  {
    "title": "CGPDFScannerScan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454698-cgpdfscannerscan",
    "html": "Parameters\nscanner\n\nThe scanner object whose content stream you want to parse.\n\nReturn Value\n\ntrue if the entire stream is parsed successfully; false if parsing fails (for example, if the stream data is corrupted).\n\nDiscussion\n\nThe function CGPDFScannerScan(_:) parses the PDF content stream associated with the scanner. Each time Core Graphics parses a PDF operator for which you register a callback, Core Graphics invokes your callback.\n\nSee Also\nParsing Content\nfunc CGPDFScannerGetContentStream(CGPDFScannerRef) -> CGPDFContentStreamRef\nReturns the content stream associated with a PDF scanner object."
  },
  {
    "title": "CGPDFScannerCreate(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454410-cgpdfscannercreate",
    "html": "Parameters\ncs\n\nA PDF content stream object. (See CGPDFContentStream.)\n\ntable\n\nA table of callbacks for the PDF operators you want to handle.\n\ninfo\n\nA pointer to data you want passed to your callback function. (See CGPDFOperatorTable.)\n\nReturn Value\n\nA PDF scanner object. You are responsible for releasing this object by calling the function CGPDFScannerRelease(_:).\n\nDiscussion\n\nWhen you want to parse the contents of the PDF stream, call the function CGPDFScannerScan(_:)."
  },
  {
    "title": "CGPDFArrayGetArray(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454834-cgpdfarraygetarray",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nindex\n\nThe index of the value to retrieve. If the index is outside the index space of the array (0 to N-1, where N is the count of the array), the behavior is undefined.\n\nvalue\n\nOn input, a pointer to a PDF array. If the value at the specified index is a PDF array, then on return that array, otherwise the value is unspecified.\n\nReturn Value\n\nReturns true if there is a PDF array at the specified index, otherwise false.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string."
  },
  {
    "title": "optionAll | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlistoption/1455377-optionall",
    "html": "Discussion\n\nList all windows, including both onscreen and offscreen windows. When retrieving a list with this option, the relativeToWindow parameter should be set to kCGNullWindowID."
  },
  {
    "title": "optionIncludingWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlistoption/1454408-optionincludingwindow",
    "html": "Discussion\n\nInclude the specified window (from the relativeToWindow parameter) in the returned list. You must combine this option with the optionOnScreenAboveWindow or optionOnScreenBelowWindow option to retrieve meaningful results."
  },
  {
    "title": "optionOnScreenBelowWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlistoption/1455142-optiononscreenbelowwindow",
    "html": "Discussion\n\nList all windows that are currently onscreen and in behind the window specified in the relativeToWindow parameter. Windows are returned in order from front to back."
  },
  {
    "title": "optionOnScreenAboveWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlistoption/1455651-optiononscreenabovewindow",
    "html": "Discussion\n\nList all windows that are currently onscreen and in front of the window specified in the relativeToWindow parameter. Windows are returned in order from front to back."
  },
  {
    "title": "excludeDesktopElements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlistoption/1455528-excludedesktopelements",
    "html": "Discussion\n\nExclude any windows from the list that are elements of the desktop, including the background picture and desktop icons. You may combine this option with the other options."
  },
  {
    "title": "optionOnScreenOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlistoption/1454105-optiononscreenonly",
    "html": "Discussion\n\nList all windows that are currently onscreen. Windows are returned in order from front to back. When retrieving a list with this option, the relativeToWindow parameter should be set to kCGNullWindowID."
  },
  {
    "title": "CGPDFScannerGetContentStream(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454724-cgpdfscannergetcontentstream",
    "html": "Parameters\nscanner\n\nThe scanner object whose content stream you want to obtain.\n\nReturn Value\n\nThe content stream associated with scanner.\n\nSee Also\nParsing Content\nfunc CGPDFScannerScan(CGPDFScannerRef) -> Bool\nParses the content stream of a PDF scanner object."
  },
  {
    "title": "CGPDFDictionaryGetNumber(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430228-cgpdfdictionarygetnumber",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nkey\n\nThe key for the value to retrieve.\n\nvalue\n\nOn input, a pointer to a PDF number. If the value associated with the specified key is a PDF number (real or integer), then on return contains that value; otherwise the value is unspecified.\n\nReturn Value\n\nReturns true if there is a PDF number associated with the specified key; otherwise, false.\n\nSee Also\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetArray(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nfunc CGPDFDictionaryGetBoolean(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nfunc CGPDFDictionaryGetCount(CGPDFDictionaryRef) -> Int\nReturns the number of entries in a PDF dictionary.\nfunc CGPDFDictionaryGetDictionary(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFDictionaryGetInteger(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nfunc CGPDFDictionaryGetName(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFDictionaryGetObject(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nfunc CGPDFDictionaryGetStream(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream.\nfunc CGPDFDictionaryGetString(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string."
  },
  {
    "title": "CGPDFDictionaryGetInteger(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430231-cgpdfdictionarygetinteger",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nkey\n\nThe key for the value to retrieve.\n\nvalue\n\nOn input, a pointer to a PDF integer. If the value associated with the specified key is a PDF integer, then on return contains that value; otherwise the value is unspecified.\n\nReturn Value\n\nReturns true if there is a PDF integer associated with the specified key; otherwise, false.\n\nSee Also\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetArray(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nfunc CGPDFDictionaryGetBoolean(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nfunc CGPDFDictionaryGetCount(CGPDFDictionaryRef) -> Int\nReturns the number of entries in a PDF dictionary.\nfunc CGPDFDictionaryGetDictionary(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFDictionaryGetName(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFDictionaryGetNumber(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nfunc CGPDFDictionaryGetObject(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nfunc CGPDFDictionaryGetStream(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream.\nfunc CGPDFDictionaryGetString(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string."
  },
  {
    "title": "CGPDFDictionaryGetDictionary(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430220-cgpdfdictionarygetdictionary",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nkey\n\nThe key for the value to retrieve.\n\nvalue\n\nOn input, a pointer to a PDF dictionary. If the value associated with the specified key is a PDF dictionary, then on return contains that dictionary; otherwise the value is unspecified.\n\nReturn Value\n\nReturns true if there is a PDF dictionary associated with the specified key; otherwise, false.\n\nSee Also\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetArray(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nfunc CGPDFDictionaryGetBoolean(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nfunc CGPDFDictionaryGetCount(CGPDFDictionaryRef) -> Int\nReturns the number of entries in a PDF dictionary.\nfunc CGPDFDictionaryGetInteger(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nfunc CGPDFDictionaryGetName(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFDictionaryGetNumber(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nfunc CGPDFDictionaryGetObject(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nfunc CGPDFDictionaryGetStream(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream.\nfunc CGPDFDictionaryGetString(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string."
  },
  {
    "title": "CGPDFDictionaryGetArray(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430229-cgpdfdictionarygetarray",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nkey\n\nThe key for the value to retrieve.\n\nvalue\n\nOn input, an uninitialized pointer to a PDF array. If the value associated with the specified key is a PDF array, then on return contains that array; otherwise the value is unspecified.\n\nReturn Value\n\nReturns true if there is a PDF array associated with the specified key; otherwise, false.\n\nSee Also\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetBoolean(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nfunc CGPDFDictionaryGetCount(CGPDFDictionaryRef) -> Int\nReturns the number of entries in a PDF dictionary.\nfunc CGPDFDictionaryGetDictionary(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFDictionaryGetInteger(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nfunc CGPDFDictionaryGetName(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFDictionaryGetNumber(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nfunc CGPDFDictionaryGetObject(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nfunc CGPDFDictionaryGetStream(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream.\nfunc CGPDFDictionaryGetString(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string."
  },
  {
    "title": "CGPDFDictionaryGetBoolean(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430226-cgpdfdictionarygetboolean",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nkey\n\nThe key for the value to retrieve.\n\nvalue\n\nOn input, a pointer to a PDF Boolean value. If the value associated with the specified key is a PDF Boolean value, then on return contains that value; otherwise the value is unspecified.\n\nReturn Value\n\nReturns true if there is a PDF Boolean value associated with the specified key; otherwise, false.\n\nSee Also\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetArray(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nfunc CGPDFDictionaryGetCount(CGPDFDictionaryRef) -> Int\nReturns the number of entries in a PDF dictionary.\nfunc CGPDFDictionaryGetDictionary(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFDictionaryGetInteger(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nfunc CGPDFDictionaryGetName(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFDictionaryGetNumber(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nfunc CGPDFDictionaryGetObject(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nfunc CGPDFDictionaryGetStream(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream.\nfunc CGPDFDictionaryGetString(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string."
  },
  {
    "title": "CGPDFDictionaryGetObject(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430214-cgpdfdictionarygetobject",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nkey\n\nThe key for the value to retrieve.\n\nvalue\n\nOn input, a pointer to a PDF object. If the value associated with the specified key is a PDF object, then on return contains that object; otherwise the value is unspecified.\n\nReturn Value\n\nReturns true if there is a PDF object associated with the specified key; otherwise, false.\n\nSee Also\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetArray(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nfunc CGPDFDictionaryGetBoolean(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nfunc CGPDFDictionaryGetCount(CGPDFDictionaryRef) -> Int\nReturns the number of entries in a PDF dictionary.\nfunc CGPDFDictionaryGetDictionary(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFDictionaryGetInteger(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nfunc CGPDFDictionaryGetName(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFDictionaryGetNumber(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nfunc CGPDFDictionaryGetStream(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream.\nfunc CGPDFDictionaryGetString(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string."
  },
  {
    "title": "CGPDFDictionaryGetName(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430230-cgpdfdictionarygetname",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nkey\n\nThe key for the value to retrieve.\n\nvalue\n\nOn input, a pointer to a PDF name reference, represented as a constant C string. If the value associated with the specified key is a reference to a PDF name, then on return, the variable points to the name; otherwise, the value is undefined.\n\nReturn Value\n\nReturns true if there is a character array associated with the specified key; otherwise, false.\n\nSee Also\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetArray(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nfunc CGPDFDictionaryGetBoolean(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nfunc CGPDFDictionaryGetCount(CGPDFDictionaryRef) -> Int\nReturns the number of entries in a PDF dictionary.\nfunc CGPDFDictionaryGetDictionary(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFDictionaryGetInteger(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nfunc CGPDFDictionaryGetNumber(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nfunc CGPDFDictionaryGetObject(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nfunc CGPDFDictionaryGetStream(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream.\nfunc CGPDFDictionaryGetString(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string."
  },
  {
    "title": "CGPDFDictionaryGetCount(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1430218-cgpdfdictionarygetcount",
    "html": "Parameters\ndictionary\n\nA PDF dictionary. If this parameter is not a valid PDF dictionary, the behavior is undefined.\n\nReturn Value\n\nReturns the number of entries in the dictionary.\n\nSee Also\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetArray(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nfunc CGPDFDictionaryGetBoolean(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nfunc CGPDFDictionaryGetDictionary(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFDictionaryGetInteger(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nfunc CGPDFDictionaryGetName(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFDictionaryGetNumber(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nfunc CGPDFDictionaryGetObject(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nfunc CGPDFDictionaryGetStream(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream.\nfunc CGPDFDictionaryGetString(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string."
  },
  {
    "title": "CGPDFContentStreamCreateWithStream(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1410041-cgpdfcontentstreamcreatewithstre",
    "html": "Parameters\nstream\n\nThe PDF stream you want to create a content stream from.\n\nstreamResources\n\nA PDF dictionary that contains the resources associated with the stream you want to retrieve.\n\nparent\n\nThe content stream of the page on which stream appears. Supply the parent parameter when you create a content stream that’s used within a page.\n\nReturn Value\n\nA PDF content stream object created from the stream parameter. You are responsible for releasing this object by calling the CGPDFContentStreamRelease(_:) function.\n\nDiscussion\n\nYou can use this function to get access to the contents of a form, pattern, Type3 font, or any PDF stream.\n\nSee Also\nCreating a PDF Content Stream Object\nfunc CGPDFContentStreamCreateWithPage(CGPDFPage) -> CGPDFContentStreamRef\nCreates a content stream object from a PDF page object."
  },
  {
    "title": "CGPDFContentStreamGetResource(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1410044-cgpdfcontentstreamgetresource",
    "html": "Parameters\ncs\n\nA PDF content stream object.\n\ncategory\n\nA string that specifies the category of the resource you want to obtain.\n\nname\n\nA string that specifies the name of the resource you want to obtain.\n\nReturn Value\n\nThe resource dictionary.\n\nDiscussion\n\nYou can use this function to obtain resources used by the content stream, such as forms, patterns, color spaces, and fonts.\n\nSee Also\nGetting Data from a PDF Content Stream Object\nfunc CGPDFContentStreamGetStreams(CGPDFContentStreamRef) -> CFArray?\nGets the array of PDF content streams contained in a PDF content stream object."
  },
  {
    "title": "CGPDFContentStreamRelease(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1410046-cgpdfcontentstreamrelease",
    "html": "Parameters\ncs\n\nA PDF content stream.\n\nSee Also\nRetaining and Releasing a PDF Content Stream Object\nfunc CGPDFContentStreamRetain(CGPDFContentStreamRef) -> CGPDFContentStreamRef\nIncrements the retain count of a PDF content stream object."
  },
  {
    "title": "CGPDFArrayGetName(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455034-cgpdfarraygetname",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nindex\n\nThe index of the value to retrieve. If the index is outside the index space of the array (0 to N-1, where N is the count of the array), the behavior is undefined.\n\nvalue\n\nAn uninitialized pointer to a constant C string. If the value at the specified index is a reference to a PDF name (represented by a constant C string) then upon return, contains that value; otherwise the value is undefined.\n\nReturn Value\n\nReturns true if there is an array of characters at the specified index, otherwise false.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string."
  },
  {
    "title": "shouldBeOpaque | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowimageoption/1456222-shouldbeopaque",
    "html": "Discussion\n\nWhen capturing the window, partially transparent areas are backed by a solid white color so that the resulting image is fully opaque. You can combine this option with other options."
  },
  {
    "title": "CGDataProviderRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408304-cgdataproviderrelease",
    "html": "Parameters\nprovider\n\nThe data provider to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the provider parameter is NULL.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateDirectAccess\nCreates a direct-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGDataProviderCreateDirectAccess | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/1805228-cgdataprovidercreatedirectaccess",
    "html": "Parameters\ninfo\n\nA pointer to data of any type or NULL. When Core Graphics calls the functions specified in the callbacks parameter, it sends each of the functions this pointer.\n\nsize\n\nA value that specifies the number of bytes that the data provider contains.\n\ncallbacks\n\nA pointer to a CGDataProviderDirectAccessCallbacks structure that specifies the callback functions you implement to handle the data provider’s basic memory management. For a complete description, see CGDataProviderDirectAccessCallbacks.\n\nReturn Value\n\nA new data provider. You are responsible for releasing this object using CGDataProviderRelease.\n\nOverview\n\nYou use this function to create a direct-access data provider that uses callback functions to read data from your program in a single block.\n\nSee Also\nCGDataProvider Miscellaneous Functions\nCGDataProviderCreate\nCreates a sequential-access data provider.\nCGDataProviderCreateWithData\nCreates a direct-access data provider that uses data your program supplies.\nCGDataProviderCreateWithURL\nCreates a direct-access data provider that uses a URL to supply data.\nCGDataProviderCreateWithFilename\nCreates a direct-access data provider that uses a file to supply data.\nCGDataProviderCreateWithCFData\nCreates a data provider that reads from a CFData object.\nCGDataProviderGetTypeID\nReturns the Core Foundation type identifier for data providers.\nCGDataProviderCopyData\nReturns a copy of the provider’s data.\nCGDataProviderRelease\nDecrements the retain count of a data provider.\nCGDataProviderRetain\nIncrements the retain count of a data provider.\nCGDataProviderCreateSequential\nCreates a sequential-access data provider.\nCGDataProviderCreateDirect\nCreates a direct-access data provider."
  },
  {
    "title": "CGDataProviderDirectAccessCallbacks | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/cgdataproviderdirectaccesscallbacks",
    "html": "Overview\n\nYou supply a CGDataProviderDirectAccessCallbacks structure to the function CGDataProviderCreateDirectAccess to create a data provider for direct access. The functions specified by the CGDataProviderDirectAccessCallbacks structure are responsible for copying data a block at a time to a memory buffer for Core Graphics to use. The functions are also responsible for handling the data provider’s basic memory management. For the callback to work, one of the getBytePointer and getBytes parameters must be non-NULL. If both are non-NULL, then getBytePointer is used to access the data.\n\nTopics\nFields\ngetBytePointer\nA pointer to a function that returns a pointer to the provider’s data. For more information, see CGDataProviderGetBytePointerCallback.\nreleaseBytePointer\nA pointer to a function that Core Graphics calls to release a pointer to the provider’s data. For more information, see CGDataProviderReleaseBytePointerCallback.\ngetBytes\nA pointer to a function that copies data from the provider. For more information, see CGDataProviderGetBytesAtOffsetCallback.\nreleaseProvider\nA pointer to a function that handles clean-up for the data provider, or NULL. For more information, see CGDataProviderReleaseInfoCallback."
  },
  {
    "title": "CGShadingRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1573766-cgshadingrelease",
    "html": "Parameters\nshading\n\nThe shading object to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the shading parameter is NULL.\n\nSee Also\nRetaining and Releasing Shading Objects\nCGShadingRetain\nIncrements the retain count of a shading object."
  },
  {
    "title": "CGPDFArrayGetBoolean(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454504-cgpdfarraygetboolean",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nindex\n\nThe index of the value to retrieve. If the index is outside the index space of array (0 to N-1, where N is the count of array), the behavior is undefined.\n\nvalue\n\nOn input, a pointer to a PDF Boolean. If the value at the specified index is a PDF Boolean, then on return that Boolean, otherwise the value is undefined.\n\nReturn Value\n\nReturns true if there is a PDF Boolean at the specified index, otherwise false.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string."
  },
  {
    "title": "CGPDFArrayGetDictionary(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454139-cgpdfarraygetdictionary",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nindex\n\nThe index of the value to retrieve. If the index is outside the index space of the array (0 to N-1, where N is the count of the array), the behavior is undefined.\n\nvalue\n\nOn input, a pointer to a PDF dictionary. If the value at the specified index is a PDF dictionary, then on return that dictionary, otherwise the value is undefined.\n\nReturn Value\n\nReturns true if there is a PDF dictionary at the specified index, otherwise false.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string."
  },
  {
    "title": "CGPDFArrayGetInteger(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456053-cgpdfarraygetinteger",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nindex\n\nThe index of the value to retrieve. If the index is outside the index space of the array (0 to N-1, where N is the count of the array), the behavior is undefined.\n\nvalue\n\nOn input, a pointer to a PDF integer. If the value at the specified index is a PDF integer value, then on return contains that value, otherwise the value is undefined.\n\nReturn Value\n\nReturns true if there is a PDF integer at the specified index, otherwise false.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string."
  },
  {
    "title": "CGBlendMode.overlay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgblendmode/overlay",
    "html": "Discussion\n\nEither multiplies or screens the source image samples with the background image samples, depending on the background color. The result is to overlay the existing image samples while preserving the highlights and shadows of the background. The background color mixes with the source image to reflect the lightness or darkness of the background."
  },
  {
    "title": "CGPDFArrayGetNull(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456173-cgpdfarraygetnull",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nindex\n\nThe index of the value to retrieve. If the index is outside the index space of the array (0 to N-1, where N is the count of the array), the behavior is undefined.\n\nReturn Value\n\nReturns true if there is a PDF null at the specified index, otherwise false.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string."
  },
  {
    "title": "CGPDFArrayGetStream(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454424-cgpdfarraygetstream",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nindex\n\nThe index of the value to retrieve. If the index is outside the index space of the array (0 to N-1, where N is the count of the array), the behavior is undefined.\n\nvalue\n\nOn input, a pointer to a PDF stream. If the value at the specified index is a PDF stream, then on return that stream, otherwise the value is undefined.\n\nReturn Value\n\nReturns true if there is a PDF stream at the specified index, otherwise false.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string."
  },
  {
    "title": "CGPDFArrayGetNumber(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455374-cgpdfarraygetnumber",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nindex\n\nThe index of the value to retrieve. If the index is outside the index space of the array (0 to N-1, where N is the count of the array), the behavior is undefined.\n\nvalue\n\nOn input, a pointer to a PDF number. If the value at the specified index is a PDF number, then on return contains that value, otherwise the value is undefined.\n\nReturn Value\n\nReturns true if there is a PDF number at the specified index, otherwise false.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string."
  },
  {
    "title": "CGPDFArrayGetString(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456104-cgpdfarraygetstring",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nindex\n\nThe index of the value to retrieve. If the index is outside the index space of the array (0 to N-1, where N is the count of the array), the behavior is undefined.\n\nvalue\n\nOn input, a pointer to a PDF string. If the value at the specified index is a PDF string, then on return that string, otherwise the value is undefined.\n\nReturn Value\n\nReturns true if there is a PDF stream at the specified index, otherwise false.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream."
  },
  {
    "title": "CGPDFStringCopyDate(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454295-cgpdfstringcopydate",
    "html": "Parameters\nstring\n\nThe string to convert to a date.\n\nReturn Value\n\nA CFDate object.\n\nDiscussion\n\nThe PDF specification defines a specific format for strings that represent dates. This function converts strings in that form to CFDate objects.\n\nSee Also\nConverting PDF Strings\nfunc CGPDFStringCopyTextString(CGPDFStringRef) -> CFString?\nReturns a CFString object that represents a PDF string as a text string."
  },
  {
    "title": "CGPDFStringGetLength(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454095-cgpdfstringgetlength",
    "html": "Parameters\nstring\n\nA PDF string.\n\nReturn Value\n\nReturns the number of bytes referenced by the string, or 0 if the string is NULL.\n\nSee Also\nGetting PDF String Data\nfunc CGPDFStringGetBytePtr(CGPDFStringRef) -> UnsafePointer<UInt8>?\nReturns a pointer to the bytes of a PDF string."
  },
  {
    "title": "CGColorRenderingIntent.saturation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorrenderingintent/saturation",
    "html": "Discussion\n\nPreserve the relative saturation value of the colors when converting into the gamut of the output device. The result is an image with bright, saturated colors. Saturation intent is good for reproducing images with low detail, such as presentation charts and graphs."
  },
  {
    "title": "boundsIgnoreFraming | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowimageoption/1456645-boundsignoreframing",
    "html": "Discussion\n\nWhen the requested capture rectangle is CGRectNull, using this option captures the window area only and does not capture the area occupied by any window framing effects."
  },
  {
    "title": "onlyShadows | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowimageoption/1455734-onlyshadows",
    "html": "Discussion\n\nWhen capturing the window, only the shadow effects are captured."
  },
  {
    "title": "CGPDFArrayGetCount(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455207-cgpdfarraygetcount",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nReturn Value\n\nReturns the number of items in the array.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string."
  },
  {
    "title": "CGContextFillRects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454132-cgcontextfillrects",
    "html": "Parameters\nc\n\nA graphics context .\n\nrects\n\nAn array of rectangles, in user space coordinates.\n\ncount\n\nThe number rectangles in the rects array.\n\nDiscussion\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGBlendMode.darken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgblendmode/darken",
    "html": "Discussion\n\nCreates the composite image samples by choosing the darker samples (either from the source image or the background). The result is that the background image samples are replaced by any source image samples that are darker. Otherwise, the background image samples are left unchanged."
  },
  {
    "title": "CGColorRenderingIntent.relativeColorimetric | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorrenderingintent/relativecolorimetric",
    "html": "Discussion\n\nMap colors outside of the gamut of the output device to the closest possible match inside the gamut of the output device. This can produce a clipping effect, where two different color values in the gamut of the graphics context are mapped to the same color value in the output device’s gamut. The relative colorimetric shifts all colors (including those within the gamut) to account for the difference between the white point of the graphics context and the white point of the output device."
  },
  {
    "title": "CGBlendMode.lighten | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgblendmode/lighten",
    "html": "Discussion\n\nCreates the composite image samples by choosing the lighter samples (either from the source image or the background). The result is that the background image samples are replaced by any source image samples that are lighter. Otherwise, the background image samples are left unchanged."
  },
  {
    "title": "CGColorRenderingIntent.absoluteColorimetric | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorrenderingintent/absolutecolorimetric",
    "html": "Discussion\n\nMap colors outside of the gamut of the output device to the closest possible match inside the gamut of the output device. This can produce a clipping effect, where two different color values in the gamut of the graphics context are mapped to the same color value in the output device’s gamut. Unlike the relative colorimetric, absolute colorimetric does not modify colors inside the gamut of the output device."
  },
  {
    "title": "CGBlendMode.hardLight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgblendmode/hardlight",
    "html": "Discussion\n\nEither multiplies or screens colors, depending on the source image sample color. If the source image sample color is lighter than 50% gray, the background is lightened, similar to screening. If the source image sample color is darker than 50% gray, the background is darkened, similar to multiplying. If the source image sample color is equal to 50% gray, the source image is not changed. Image samples that are equal to pure black or pure white result in pure black or white. The overall effect is similar to what you’d achieve by shining a harsh spotlight on the source image. Use this to add highlights to a scene."
  },
  {
    "title": "CGPDFArrayGetObject(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456631-cgpdfarraygetobject",
    "html": "Parameters\narray\n\nA PDF array. If this parameter is not a valid PDF array, the behavior is undefined.\n\nindex\n\nThe index of the value to retrieve. If the index is outside the index space of the array (0 to N-1, where N is the count of the array), the behavior is undefined.\n\nvalue\n\nOn input, a pointer to a PDF object. If the value at the specified index is a PDF object, then on return contains that object, otherwise the value is undefined.\n\nReturn Value\n\nReturns true if there is a PDF object at the specified index, otherwise false.\n\nSee Also\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string."
  },
  {
    "title": "CGPDFDataFormat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdataformat",
    "html": "Topics\nConstants\ncase raw\nThe data stream is not encoded.\ncase jpegEncoded\nThe data stream is encoded in JPEG format.\ncase JPEG2000\nThe data stream is encoded in JPEG-2000 format.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGPDFStringGetBytePtr(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455978-cgpdfstringgetbyteptr",
    "html": "Parameters\nstring\n\nA PDF string.\n\nReturn Value\n\nReturns a pointer to the bytes of the specified string. If the string is NULL, the function returns NULL.\n\nSee Also\nGetting PDF String Data\nfunc CGPDFStringGetLength(CGPDFStringRef) -> Int\nReturns the number of bytes in a PDF string."
  },
  {
    "title": "CGPDFStringCopyTextString(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456234-cgpdfstringcopytextstring",
    "html": "Parameters\nstring\n\nA PDF string. If this value is NULL, it will cause an error.\n\nReturn Value\n\nReturns a CFString object that represents the specified PDF string as a text string. You are responsible for releasing this object.\n\nSee Also\nConverting PDF Strings\nfunc CGPDFStringCopyDate(CGPDFStringRef) -> CFDate?\nConverts a string to a date."
  },
  {
    "title": "CGPDFStreamGetDictionary(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456118-cgpdfstreamgetdictionary",
    "html": "Parameters\nstream\n\nA PDF stream.\n\nReturn Value\n\nThe PDF dictionary for the specified stream.\n\nSee Also\nGetting Data from a PDF Stream\nfunc CGPDFStreamCopyData(CGPDFStreamRef, UnsafeMutablePointer<CGPDFDataFormat>) -> CFData?\nReturns the data associated with a PDF stream."
  },
  {
    "title": "CGPDFStreamCopyData(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454657-cgpdfstreamcopydata",
    "html": "Parameters\nstream\n\nA PDF stream.\n\nformat\n\nOn return, contains a constant that specifies the format of the data returned—CGPDFDataFormat.raw, CGPDFDataFormat.jpegEncoded, or CGPDFDataFormat.JPEG2000.\n\nReturn Value\n\nA CFData object that contains a copy of the stream data. You are responsible for releasing this object.\n\nSee Also\nGetting Data from a PDF Stream\nfunc CGPDFStreamGetDictionary(CGPDFStreamRef) -> CGPDFDictionaryRef?\nReturns the dictionary associated with a PDF stream."
  },
  {
    "title": "CGContextClipToRects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454626-cgcontextcliptorects",
    "html": "Parameters\nc\n\nThe graphics context for which to set the clipping path.\n\nrects\n\nAn array of rectangles. The locations and dimensions of the rectangles are specified in the user space coordinate system.\n\ncount\n\nThe total number of array entries in the rects parameter.\n\nDiscussion\n\nThis function sets the clipping path to the intersection of the current clipping path and the region within the specified rectangles.\n\nAfter determining the new clipping path, the function resets the context’s current path to an empty path.\n\nSee Also\nModifying Clipping Paths\nCGContextClip\nModifies the current clipping path, using the nonzero winding number rule.\nCGContextEOClip\nModifies the current clipping path, using the even-odd rule.\nCGContextClipToRect\nSets the clipping path to the intersection of the current clipping path with the area defined by the specified rectangle.\nCGContextGetClipBoundingBox\nReturns the bounding box of a clipping path.\nCGContextClipToMask\nMaps a mask into the specified rectangle and intersects it with the current clipping area of the graphics context."
  },
  {
    "title": "CGColorConversionInfoCreateFromList | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/2118077-cgcolorconversioninfocreatefroml",
    "html": "Parameters\noptions\n\nA dictionary containing options for color space conversion. See Color Conversion Options.\n\ncolorSpace\n\nThe first color space in the conversion.\n\ntransformType\n\nThe role of the first color space to the conversion process. See CGColorConversionInfoTransformType.\n\nrenderingIntent\n\nThe rendering intent to use with the first color space. See CGColorRenderingIntent.\n\n...\n\nA NULL-terminated list of additional colorSpace, transformType, renderingIntent triplets.\n\nReturn Value\n\nA color conversion object, or nil if no conversion between the specified color spaces is allowed.\n\nDiscussion\n\nTo call this function you must pass a triplet of color space, transform type, and rendering intent for each color space in the chain of conversions. For example, the following code is equivalent to calling CGColorConversionInfoCreate:\n\n// convert from `src` to `dst` space with default intent\nCGColorConversionInfoCreateFromList(NULL,\n    src, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault,\n    dst, kCGColorConversionTransformToSpace,   kCGRenderingIntentDefault,\n    NULL);\n\n\nTo extend this example to convert through an intermediate color space, insert another space/type/intent triplet between the src and dst lines, using the kCGColorConversionTransformApplySpace type.\n\nThe listed color spaces must be calibrated color spaces (that is, not device-specific or indexed color spaces), and the list must contain at least two color spaces (that is, two triplets of space, type, and intent).\n\nYou can use a color conversion object to create MPSImageConversion filters that perform GPU-accelerated color space conversion.\n\nSee Also\nCreating a Color Conversion\nCGColorConversionInfoCreate\nCreates a conversion between two specified color spaces.\nCGColorConversionInfoTransformType\nConstants describing how a color conversion uses color spaces."
  },
  {
    "title": "CGContextFillPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456306-cgcontextfillpath",
    "html": "Parameters\nc\n\nA graphics context that contains a path to fill.\n\nDiscussion\n\nEach subpath is treated as if it were closed by calling CGContextClosePath. The nonzero winding number rule is described in Filling a Path in Quartz 2D Programming Guide. The current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextEOFillPath\nPaints the area within the current path, using the even-odd fill rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGPDFDocumentRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1402593-cgpdfdocumentrelease",
    "html": "Parameters\ndocument\n\nThe PDF document to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the document parameter is NULL.\n\nSee Also\nRetaining and Releasing PDF Documents\nCGPDFDocumentRetain\nIncrements the retain count of a Core Graphics PDF document."
  },
  {
    "title": "CGColorRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1586340-cgcolorrelease",
    "html": "Parameters\ncolor\n\nThe color to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the color parameter is NULL.\n\nSee Also\nRetaining and Releasing Color Objects\nCGColorRetain\nIncrements the retain count of a color."
  },
  {
    "title": "CGContextEOFillPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454865-cgcontexteofillpath",
    "html": "Parameters\nc\n\nA graphics context that contains a path to fill.\n\nDiscussion\n\nEach subpath is treated as if it were closed by calling CGContextClosePath. The even-odd rule is described in Filling a Path in Quartz 2D Programming Guide. The current path is cleared as a side effect of calling this function.\n\nSee Also\nPainting Paths\nCGContextClearRect\nPaints a transparent rectangle.\nCGContextDrawPath\nDraws the current path using the provided drawing mode.\nCGContextFillPath\nPaints the area within the current path, using the nonzero winding number rule.\nCGContextFillRect\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nCGContextFillRects\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nCGContextFillEllipseInRect\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nCGContextStrokePath\nPaints a line along the current path.\nCGContextStrokeRect\nPaints a rectangular path.\nCGContextStrokeRectWithWidth\nPaints a rectangular path, using the specified line width.\nCGContextReplacePathWithStrokedPath\nReplaces the path in the graphics context with the stroked version of the path.\nCGContextStrokeEllipseInRect\nStrokes an ellipse that fits inside the specified rectangle.\nCGContextStrokeLineSegments\nStrokes a sequence of line segments."
  },
  {
    "title": "CGContextMoveToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454738-cgcontextmovetopoint",
    "html": "Parameters\nc\n\nA graphics context.\n\nx\n\nThe x-value, in user space coordinates, for the point.\n\ny\n\nThe y-value, in user space coordinates, for the point.\n\nDiscussion\n\nThis point you specify becomes the start point of a new subpath. The current point is set to this start point.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextAddRects\nAdds a set of rectangular paths to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "CGPathAddLineToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411138-cgpathaddlinetopoint",
    "html": "Parameters\npath\n\nThe mutable path to change. The path must not be empty.\n\nm\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the line before it is added to the path.\n\nx\n\nThe x-coordinate of the end point of the line.\n\ny\n\nThe y-coordinate of the end point of the line.\n\nDiscussion\n\nBefore returning, this function updates the current point to the specified location (x,y).\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGPathAddArc | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411147-cgpathaddarc",
    "html": "Parameters\npath\n\nThe mutable graphics path to change.\n\nm\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the arc before it is added to the path.\n\nx\n\nThe x-coordinate of the center point of the arc.\n\ny\n\nThe y-coordinate of the center point of the arc.\n\nr\n\nThe radius of the arc.\n\nstartAngle\n\nThe angle (in radians) that determines the starting point of the arc, measured from the x-axis in the current user space.\n\nendAngle\n\nThe angle (in radians) that determines the ending point of the arc, measured from the x-axis in the current user space.\n\nclockwise\n\nA Boolean value that specifies whether or not to draw the arc in the clockwise direction, before applying the transformation matrix.\n\nDiscussion\n\nAn arc is a segment of a circle with radius r centered at a point (x,y). When you call this function, you provide the center point, radius, and two angles in radians. Core Graphics uses this information to determine the end points of the arc, and then approximates the new arc using a sequence of cubic Bézier curves. The clockwise parameter determines the direction in which the arc is created. The actual direction may change depending on the coordinate system transformation applied to the path.\n\nA transformation may be applied to the Bézier curves before they are added to the path. If no transform is needed, the second argument should be NULL.\n\nIf the specified path already contains a subpath, Core Graphics implicitly adds a line connecting the subpath’s current point to the beginning of the arc. If the path is empty, Core Graphics creates a new subpath with a starting point set to the starting point of the arc.\n\nThe ending point of the arc becomes the new current point of the path.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathMoveToPoint\nStarts a new subpath at a specified location in a mutable graphics path.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "CGLineJoin.miter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cglinejoin/miter",
    "html": "Discussion\n\nA join with a sharp (angled) corner. Core Graphics draws the outer sides of the lines beyond the endpoint of the path, until they meet. If the length of the miter divided by the line width is greater than the miter limit, a bevel join is used instead. This is the default. To set the miter limit, see setMiterLimit(_:)."
  },
  {
    "title": "CGFontCreateWithPlatformFont | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1396334-cgfontcreatewithplatformfont",
    "html": "Deprecated\n\nUse Core Text, documented in Core Text, instead.\n\nParameters\nplatformFontReference\n\nA generic pointer to a font object. The font should be of a type appropriate to the platform on which your program is running. For macOS, you should pass a pointer to an ATS font.\n\nReturn Value\n\nThe font object, or NULL if the platform font could not be located. You are responsible for releasing this object using CGFontRelease.\n\nDiscussion\n\nBefore drawing text in a Core Graphics context, you must set the font in the current graphics state. For ATS Fonts, call this function to create a font, and pass it to CGContextSetFont.\n\nSpecial Considerations\n\nThis function is deprecated because it takes a pointer to an ATSFontRef object—itself deprecated—and is used almost solely by QuickDraw-based applications. There's no direct one-to-one replacement for the function. Clients using ATSUI and QuickDraw should move to Core Text and Core Graphics instead.\n\nSee Also\nCreating a CGFont Object\nCGFontCreateWithDataProvider\nCreates a font object from data supplied from a data provider.\nCGFontCreateWithFontName\nCreates a font object corresponding to the font specified by a PostScript or full name.\nCGFontCreateCopyWithVariations\nCreates a copy of a font using a variation specification dictionary."
  },
  {
    "title": "CGContextSetInterpolationQuality | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455656-cgcontextsetinterpolationquality",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nquality\n\nA constant that specifies the required level of interpolation quality. For possible values, see CGInterpolationQuality.\n\nDiscussion\n\nInterpolation quality is merely a hint to the context—not all contexts support all interpolation quality levels.\n\nSee Also\nGetting and Setting Graphics State Parameters\nCGContextGetInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nCGContextSetFlatness\nSets the accuracy of curved paths in a graphics context.\nCGContextSetLineCap\nSets the style for the endpoints of lines drawn in a graphics context.\nCGContextSetLineDash\nSets the pattern for dashed lines in a graphics context.\nCGContextSetLineJoin\nSets the style for the joins of connected lines in a graphics context.\nCGContextSetLineWidth\nSets the line width for a graphics context.\nCGContextSetMiterLimit\nSets the miter limit for the joins of connected lines in a graphics context.\nCGContextSetPatternPhase\nSets the pattern phase of a context.\nCGContextSetFillPattern\nSets the fill pattern in the specified graphics context.\nCGContextSetRenderingIntent\nSets the rendering intent in the current graphics state.\nCGContextSetShouldAntialias\nSets antialiasing on or off for a graphics context.\nCGContextSetStrokePattern\nSets the stroke pattern in the specified graphics context.\nCGContextSetBlendMode\nSets how sample values are composited by a graphics context.\nCGContextSetAllowsAntialiasing\nSets whether or not to allow antialiasing for a graphics context.\nCGContextSetAllowsFontSmoothing\nSets whether or not to allow font smoothing for a graphics context.\nCGContextSetShouldSmoothFonts\nEnables or disables font smoothing in a graphics context.\nCGContextSetAllowsFontSubpixelPositioning\nSets whether or not to allow subpixel positioning for a graphics context.\nCGContextSetShouldSubpixelPositionFonts\nEnables or disables subpixel positioning in a graphics context.\nCGContextSetAllowsFontSubpixelQuantization\nSets whether or not to allow subpixel quantization for a graphics context.\nCGContextSetShouldSubpixelQuantizeFonts\nEnables or disables subpixel quantization in a graphics context."
  },
  {
    "title": "CGBlendMode.softLight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgblendmode/softlight",
    "html": "Discussion\n\nEither darkens or lightens colors, depending on the source image sample color. If the source image sample color is lighter than 50% gray, the background is lightened, similar to dodging. If the source image sample color is darker than 50% gray, the background is darkened, similar to burning. If the source image sample color is equal to 50% gray, the background is not changed. Image samples that are equal to pure black or pure white produce darker or lighter areas, but do not result in pure black or white. The overall effect is similar to what you’d achieve by shining a diffuse spotlight on the source image. Use this to add highlights to a scene."
  },
  {
    "title": "CGBlendMode.difference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgblendmode/difference",
    "html": "Discussion\n\nSubtracts either the source image sample color from the background image sample color, or the reverse, depending on which sample has the greater brightness value. Source image sample values that are black produce no change; white inverts the background color values."
  },
  {
    "title": "linearGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1644733-lineargray",
    "html": "See Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "extendedLinearGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1690959-extendedlineargray",
    "html": "Discussion\n\nThis color space has the same colorimetry as linearGray; in addition, you may encode component values below 0.0 and above 1.0.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "sRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408871-srgb",
    "html": "Discussion\n\nThe sRGB colorimetry and non-linear transfer function are specified in IEC 61966-2-1.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "CGRectIntegral(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456348-cgrectintegral",
    "html": "Parameters\nrect\n\nThe source rectangle.\n\nReturn Value\n\nA rectangle with the smallest integer values for its origin and size that contains the source rectangle. That is, given a rectangle with fractional origin or size values, CGRectIntegral(_:) rounds the rectangle’s origin downward and its size upward to the nearest whole integers, such that the result contains the original rectangle. Returns a null rectangle if rect is a null rectangle.\n\nSee Also\nCreating Derived Rectangles\nvar standardized: CGRect\nReturns a rectangle with a positive width and height.\nfunc applying(CGAffineTransform) -> CGRect\nApplies an affine transform to a rectangle.\nfunc insetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle that is smaller or larger than the source rectangle, with the same center point.\nfunc offsetBy(dx: CGFloat, dy: CGFloat) -> CGRect\nReturns a rectangle with an origin that is offset from that of the source rectangle.\nfunc union(CGRect) -> CGRect\nReturns the smallest rectangle that contains the two source rectangles.\nfunc intersection(CGRect) -> CGRect\nReturns the intersection of two rectangles.\nfunc divided(atDistance: CGFloat, from: CGRectEdge) -> (slice: CGRect, remainder: CGRect)\nCreates two rectangles by dividing the original rectangle.\nenum CGRectEdge\nCoordinates that establish the edges of a rectangle."
  },
  {
    "title": "CGRectNull | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgrectnull",
    "html": "Discussion\n\nThis is the rectangle returned when, for example, you intersect two disjoint rectangles. Note that the null rectangle is not the same as the zero rectangle. For example, the union of a rectangle with the null rectangle is the original rectangle (that is, the null rectangle contributes nothing).\n\nSee Also\nSpecial Values\nstatic var infinite: CGRect\nA rectangle that has infinite extent.\nstatic var zero: CGRect\nThe rectangle whose origin and size are both zero.\ninit()\nCreates a rectangle with origin (0,0) and size (0,0)."
  },
  {
    "title": "CGLayerRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1450898-cglayerrelease",
    "html": "Parameters\nlayer\n\nThe layer to release.\n\nDiscussion\n\nThis function is equivalent to calling CFRelease except that it does not crash if the layer parameter is null.\n\nSee Also\nRetaining and Releasing Layers\nCGLayerRetain\nIncrements the retain count of a layer object."
  },
  {
    "title": "CGContextSetTextMatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455611-cgcontextsettextmatrix",
    "html": "Parameters\nc\n\nA graphics context.\n\ntransform\n\nThe text matrix to set.\n\nDiscussion\n\nThe text matrix specifies the transform from text space to user space. To produce the final text rendering matrix that is used to actually draw the text on the page, Core Graphics concatenates the text matrix with the current transformation matrix and other parameters from the graphics state.\n\nNote that the text matrix is not a part of the graphics state—saving or restoring the graphics state has no effect on the text matrix. The text matrix is an attribute of the graphics context, not of the current font.\n\nSee Also\nDrawing Text\nCGContextGetTextMatrix\nReturns the current text matrix.\nCGContextGetTextPosition\nReturns the location at which text is drawn.\nCGContextSelectFont\nSets the font and font size in a graphics context.\nCGContextSetCharacterSpacing\nSets the current character spacing.\nCGContextSetFont\nSets the platform font in a graphics context.\nCGContextSetFontSize\nSets the current font size.\nCGContextSetTextDrawingMode\nSets the current text drawing mode.\nCGContextSetTextPosition\nSets the location at which text is drawn.\nCGContextShowText\nDisplays a character array at the current text position, a point specified by the current text matrix.\nCGContextShowTextAtPoint\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGContextDrawImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454845-cgcontextdrawimage",
    "html": "Parameters\nc\n\nThe graphics context in which to draw the image.\n\nrect\n\nThe location and dimensions in user space of the bounding box in which to draw the image.\n\nimage\n\nThe image to draw.\n\nDiscussion\n\nThe image is scaled—disproportionately, if necessary—to fit the bounds specified by the rect parameter.\n\nSee Also\nDrawing an Image to a Graphics Context\nCGContextDrawTiledImage\nRepeatedly draws an image, scaled to the provided rectangle, to fill the current clip region."
  },
  {
    "title": "CGDataConsumerCallbacks | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataconsumercallbacks",
    "html": "Overview\n\nThe functions specified by the CGDataConsumerCallbacks structure are responsible for copying data that Core Graphics sends to your consumer and for handling the consumer’s basic memory management. You supply this structure to the function init(info:cbks:) to create a data consumer.\n\nTopics\nInitializers\ninit()\ninit(putBytes: CGDataConsumerPutBytesCallback?, releaseConsumer: CGDataConsumerReleaseInfoCallback?)\nInstance Properties\nvar putBytes: CGDataConsumerPutBytesCallback?\nA pointer to a function that copies data to the data consumer. For more information, see CGDataConsumerPutBytesCallback.\nvar releaseConsumer: CGDataConsumerReleaseInfoCallback?\nA pointer to a function that handles clean-up for the data consumer, or NULL.\nSee Also\nCreating Data Consumers\ninit?(info: UnsafeMutableRawPointer?, cbks: UnsafePointer<CGDataConsumerCallbacks>)\nCreates a data consumer that uses callback functions to write data.\ninit?(url: CFURL)\nCreates a data consumer that writes data to a location specified by a URL.\ninit?(data: CFMutableData)\nCreates a data consumer that writes to a CFData object.\ntypealias CGDataConsumerPutBytesCallback\nCopies data from a Core Graphics-supplied buffer into a data consumer.\ntypealias CGDataConsumerReleaseInfoCallback\nReleases any private data or resources associated with the data consumer."
  },
  {
    "title": "init(url:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataconsumer/1454474-init",
    "html": "Parameters\nurl\n\nA CFURL object that specifies the data destination.\n\nReturn Value\n\nA new data consumer object. You are responsible for releasing this object using CGDataConsumerRelease.\n\nSee Also\nCreating Data Consumers\ninit?(info: UnsafeMutableRawPointer?, cbks: UnsafePointer<CGDataConsumerCallbacks>)\nCreates a data consumer that uses callback functions to write data.\ninit?(data: CFMutableData)\nCreates a data consumer that writes to a CFData object.\nstruct CGDataConsumerCallbacks\nA structure that contains pointers to callback functions that manage the copying of data for a data consumer.\ntypealias CGDataConsumerPutBytesCallback\nCopies data from a Core Graphics-supplied buffer into a data consumer.\ntypealias CGDataConsumerReleaseInfoCallback\nReleases any private data or resources associated with the data consumer."
  },
  {
    "title": "extendedLinearITUR_2020 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/3191860-extendedlinearitur_2020",
    "html": "Discussion\n\nThis color space has the same colorimetry as itur_2020, but uses a linear transfer function. You may encode component values below 0.0 and above 1.0.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated"
  },
  {
    "title": "itur_2020_PQ_EOTF | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/3191862-itur_2020_pq_eotf",
    "html": "Discussion\n\nThis color space has the same colorimetry as itur_2020, but uses the Perceptual Quantizer (PQ) transfer function. A pixel value of 1.0 is assumed to be 100 nits. See the current active version of the BT.2100 recommendation on the ITU website (https://www.itu.int/).\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "itur_2020_HLG | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/3191861-itur_2020_hlg",
    "html": "Discussion\n\nThis color space has the same colorimetry as itur_2020, but uses the Hybrid Log-Gamma (HLG) transfer function. Pixel values should be between 0.0 and 12.0. See the current active version of the BT.2100 recommendation on the ITU website (https://www.itu.int/).\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "itur_2020 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408901-itur_2020",
    "html": "Discussion\n\nSee the current active version of the Recommendation BT.2020 document on the ITU website (https://www.itu.int/).\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "rommrgb | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408912-rommrgb",
    "html": "See Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "genericXYZ | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408844-genericxyz",
    "html": "See Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "acescgLinear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408841-acescglinear",
    "html": "Discussion\n\nFor more information, see “ACEScg—A Working Space for CGI Render and Compositing”, Version 1.0.1, Academy of Motion Picture Arts and Sciences (http://www.oscars.org/science-technology/sci-tech-projects/aces).\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "itur_709 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408906-itur_709",
    "html": "Discussion\n\nSee the current active version of the Recommendation BT.709 document on the ITU website (https://www.itu.int/).\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "dcip3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408859-dcip3",
    "html": "Discussion\n\nThis color space was created by Digital Cinema Initiatives.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "genericRGBLinear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408893-genericrgblinear",
    "html": "Discussion\n\nThis color space has the same colorimetry as kCGColorSpaceGenericRGB, but with a linear transfer function.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "genericLab | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/2923325-genericlab",
    "html": "See Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "extendedGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1644736-extendedgray",
    "html": "Discussion\n\nThis color space has the same colorimetry as genericGrayGamma2_2; in addition, you may encode component values below 0.0 and above 1.0. Negative values are encoded as the signed reflection of the original encoding function, as shown below\n\nextendedGrayTransferFunction(x) = sign(x) ✖️ gamma22Function(abs(x))\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "genericGrayGamma2_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408857-genericgraygamma2_2",
    "html": "See Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "extendedLinearSRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1690961-extendedlinearsrgb",
    "html": "Discussion\n\nThis color space has the same colorimetry as linearSRGB; in addition, you may encode component values below 0.0 and above 1.0.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "extendedSRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1644735-extendedsrgb",
    "html": "Discussion\n\nThis color space has the same colorimetry as sRGB, but you can encode component values below 0.0 and above 1.0. Negative values are encoded as the signed reflection of the original encoding function, as shown in the formula below:\n\nextendedTransferFunction(x) = sign(x) ✖️ sRGBTransferFunction(abs(x))\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "extendedLinearDisplayP3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/3191859-extendedlineardisplayp3",
    "html": "Discussion\n\nThis color space uses the DCI P3 primaries, a D65 white point, and a linear transfer function. You can encode component values below 0.0 and above 1.0.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "linearSRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1644734-linearsrgb",
    "html": "Discussion\n\nThis color space has the same colorimetry as sRGB, but uses a linear transfer function.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "displayP3_PQ_EOTF | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/3191858-displayp3_pq_eotf",
    "html": "Discussion\n\nThis color space was created by Apple Inc. This color space uses the DCI P3 primaries, a D65 white point, and the Perceptual Quantizer (PQ) transfer function. For more information on PQ, see https://www.itu.int/rec/R-REC-BT.2100.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "displayP3_HLG | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/3191857-displayp3_hlg",
    "html": "Discussion\n\nThis color space was created by Apple Inc. This color space uses the DCI P3 primaries, a D65 white point, and the Hybrid Log-Gamma (HLG) transfer function. For more information on HLG, see https://www.itu.int/rec/R-REC-BT.2100.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "isWideGamutRGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1644737-iswidegamutrgb",
    "html": "Parameters\nCGColorSpaceRef\n\nA color space object.\n\nReturn Value\n\ntrue if the color space is greater than 85% of the NTSC gamut, otherwise false.\n\nSee Also\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nenum CGColorSpaceModel\nModels for color spaces.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space."
  },
  {
    "title": "displayP3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408916-displayp3",
    "html": "Discussion\n\nThis color space uses the DCI P3 primaries, a D65 white point, and the sRGB transfer function.\n\nSee Also\nAccessing System-Defined Color Spaces\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "CGContextAddRects | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454734-cgcontextaddrects",
    "html": "Parameters\nc\n\nA graphics context.\n\nrects\n\nAn array of rectangles, specified in user space coordinates.\n\ncount\n\nThe number of rectangles in the rects array.\n\nDiscussion\n\nThis is a convenience function that adds an array of rectangles to a path, as if it called CGContextAddRect for each rectangle.\n\nSee Also\nConstructing Paths\nCGContextAddArc\nAdds an arc of a circle to the current path, possibly preceded by a straight line segment\nCGContextAddArcToPoint\nAdds an arc of a circle to the current path, using a radius and tangent points.\nCGContextAddCurveToPoint\nAppends a cubic Bézier curve from the current point, using the provided control points and end point .\nCGContextAddLines\nAdds a sequence of connected straight-line segments to the current path.\nCGContextAddLineToPoint\nAppends a straight line segment from the current point to the provided point .\nCGContextAddPath\nAdds a previously created path object to the current path in a graphics context.\nCGContextCopyPath\nReturns a path object built from the current path information in a graphics context.\nCGContextAddQuadCurveToPoint\nAppends a quadratic Bézier curve from the current point, using a control point and an end point you specify.\nCGContextAddRect\nAdds a rectangular path to the current path.\nCGContextBeginPath\nCreates a new empty path in a graphics context.\nCGContextClosePath\nCloses and terminates the current path’s subpath.\nCGContextMoveToPoint\nBegins a new subpath at the point you specify.\nCGContextAddEllipseInRect\nAdds an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "iccData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408889-iccdata",
    "html": "Deprecated\n\nUse copyICCData() instead.\n\nParameters\nspace\n\nThe color space whose ICC profile you want to obtain.\n\nReturn Value\n\nThe ICC profile or NULL if the color space does not have an ICC profile.\n\nSee Also\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nenum CGColorSpaceModel\nModels for color spaces.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut."
  },
  {
    "title": "CGPDFPage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfpage",
    "html": "Topics\nInstance Properties\nfunc getBoxRect(CGPDFBox) -> CGRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nvar dictionary: CGPDFDictionaryRef?\nReturns the dictionary of a PDF page.\nvar document: CGPDFDocument?\nReturns the document for a page.\nvar pageNumber: Int\nReturns the page number of the specified PDF page.\nvar rotationAngle: Int32\nReturns the rotation angle of a PDF page.\nType Properties\nclass var typeID: CFTypeID\nReturns the CFType ID for PDF page objects.\nInstance Methods\nfunc getDrawingTransform(CGPDFBox, rect: CGRect, rotate: Int32, preserveAspectRatio: Bool) -> CGAffineTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page."
  },
  {
    "title": "supportsOutput | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1690958-supportsoutput",
    "html": "Parameters\nspace\n\nThe color space.\n\nReturn Value\n\ntrue if the color space can be used as a destination, otherwise false.\n\nSee Also\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nenum CGColorSpaceModel\nModels for color spaces.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut."
  },
  {
    "title": "CGPathMoveToPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1411146-cgpathmovetopoint",
    "html": "Parameters\npath\n\nThe mutable path to change.\n\nm\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the point before changing the path.\n\nx\n\nThe x-coordinate of the new location.\n\ny\n\nThe y-coordinate of the new location.\n\nDiscussion\n\nThis function ends the subpath already in progress (if any) and starts a new subpath, initializing the starting point and the current point to the specified location (x,y) after an optional transformation.\n\nSee Also\nModifying Core Graphics Paths\nCGPathAddArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddRelativeArc\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddArcToPoint\nAppends an arc to a mutable graphics path, possibly preceded by a straight line segment.\nCGPathAddCurveToPoint\nAppends a cubic Bézier curve to a mutable graphics path.\nCGPathAddLines\nAppends an array of new line segments to a mutable graphics path.\nCGPathAddLineToPoint\nAppends a line segment to a mutable graphics path.\nCGPathAddPath\nAppends a path to onto a mutable graphics path.\nCGPathAddQuadCurveToPoint\nAppends a quadratic Bézier curve to a mutable graphics path.\nCGPathAddRect\nAppends a rectangle to a mutable graphics path.\nCGPathAddRects\nAppends an array of rectangles to a mutable graphics path.\nCGPathAddRoundedRect\nAppends a rounded rectangle to a mutable graphics path.\nCGPathApply\nFor each element in a graphics path, calls a custom applier function.\nCGPathCloseSubpath\nCloses and completes a subpath in a mutable graphics path.\nCGPathAddEllipseInRect\nAdds to a path an ellipse that fits inside a rectangle."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408903-name",
    "html": "Parameters\nspace\n\nThe color space whose name is to be returned.\n\nReturn Value\n\nThe name used to create the specified color space, or NULL if the color space was not created using the init(name:) function.\n\nSee Also\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nenum CGColorSpaceModel\nModels for color spaces.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nRelated Documentation\ninit?(name: CFString)\nCreates a specified type of Quartz color space."
  },
  {
    "title": "copyPropertyList() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/2962828-copypropertylist",
    "html": "See Also\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nenum CGColorSpaceModel\nModels for color spaces.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nRelated Documentation\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list."
  },
  {
    "title": "colorTable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/2427153-colortable",
    "html": "Discussion\n\nIf the color space is an indexed color space, this array contains color component values for the colors in the color space, in the same format you use when creating an indexed color space with the init(indexedBaseSpace:last:colorTable:) initializer.\n\nIf the color space is not an indexed color space, this property's value is nil. To determine whether a color space is an indexed color space, read the model property.\n\nSee Also\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nenum CGColorSpaceModel\nModels for color spaces.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut."
  },
  {
    "title": "CGWindowSharingType.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowsharingtype/none",
    "html": "Discussion\n\nThe window is not shared."
  },
  {
    "title": "CGRectInfinite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgrectinfinite",
    "html": "See Also\nSpecial Values\nstatic var null: CGRect\nThe null rectangle, representing an invalid value.\nstatic var zero: CGRect\nThe rectangle whose origin and size are both zero.\ninit()\nCreates a rectangle with origin (0,0) and size (0,0)."
  },
  {
    "title": "kCGPDFXDestinationOutputProfile | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfxdestinationoutputprofile",
    "html": "Discussion\n\nAn ICC profile stream defining the transformation from the PDF document's source colors to output device colorants. This key is required if the value of kCGPDFXOutputConditionIdentifier does not specify a standard production condition. It is optional otherwise. If present, the value of this key must be an ICC-based color space specified as a CGColorSpace object.\n\nSee Also\nOutput Intent Keys\nlet kCGPDFXOutputIntentSubtype: CFString\nThe output intent subtype. This key is required. The value of this key must be a CFString object equal to \"GTS_PDFX\"; otherwise, the dictionary is ignored.\nlet kCGPDFXOutputConditionIdentifier: CFString\nlet kCGPDFXOutputCondition: CFString\nA text string identifying the intended output device or production condition in a human- readable form. This key is optional. If present, the value of this key must be a CFString object.\nlet kCGPDFXRegistryName: CFString\nlet kCGPDFXInfo: CFString"
  },
  {
    "title": "kCGPDFXOutputCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfxoutputcondition",
    "html": "See Also\nOutput Intent Keys\nlet kCGPDFXOutputIntentSubtype: CFString\nThe output intent subtype. This key is required. The value of this key must be a CFString object equal to \"GTS_PDFX\"; otherwise, the dictionary is ignored.\nlet kCGPDFXOutputConditionIdentifier: CFString\nlet kCGPDFXRegistryName: CFString\nlet kCGPDFXInfo: CFString\nlet kCGPDFXDestinationOutputProfile: CFString"
  },
  {
    "title": "kCGPDFContextCropBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextcropbox",
    "html": "See Also\nBox Keys\nlet kCGPDFContextMediaBox: CFString\nThe media box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextBleedBox: CFString\nThe bleed box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextTrimBox: CFString\nThe trim box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextArtBox: CFString\nThe art box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference)."
  },
  {
    "title": "kCGPDFContextArtBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextartbox",
    "html": "See Also\nBox Keys\nlet kCGPDFContextMediaBox: CFString\nThe media box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextCropBox: CFString\nThe crop box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextBleedBox: CFString\nThe bleed box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextTrimBox: CFString\nThe trim box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference)."
  },
  {
    "title": "kCGPDFContextMediaBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextmediabox",
    "html": "See Also\nBox Keys\nlet kCGPDFContextCropBox: CFString\nThe crop box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextBleedBox: CFString\nThe bleed box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextTrimBox: CFString\nThe trim box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextArtBox: CFString\nThe art box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference)."
  },
  {
    "title": "CGPatternTiling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpatterntiling",
    "html": "Topics\nConstants\ncase noDistortion\nThe pattern cell is not distorted when painted.The spacing between pattern cells may vary by as much as 1 devicepixel.\ncase constantSpacingMinimalDistortion\nPattern cells are spaced consistently. Thepattern cell may be distorted by as much as 1 device pixel whenthe pattern is painted.\ncase constantSpacing\nPattern cells are spaced consistently, as with CGPatternTiling.constantSpacingMinimalDistortion.The pattern cell may be distorted additionally to permit a moreefficient implementation.\nRelationships\nConforms To\nSendable\nSee Also\nCreating Pattern Objects\ninit?(info: UnsafeMutableRawPointer?, bounds: CGRect, matrix: CGAffineTransform, xStep: CGFloat, yStep: CGFloat, tiling: CGPatternTiling, isColored: Bool, callbacks: UnsafePointer<CGPatternCallbacks>)\nCreates a pattern object.\nstruct CGPatternCallbacks\nA structure that holds a version and two callback functions for drawing a custom pattern.\ntypealias CGPatternDrawPatternCallback\nDraws a pattern cell.\ntypealias CGPatternReleaseInfoCallback\nRelease private data or resources associated with the pattern."
  },
  {
    "title": "CGPatternCallbacks | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpatterncallbacks",
    "html": "Overview\n\nYou supply a CGPatternCallbacks structure to the function init(info:bounds:matrix:xStep:yStep:tiling:isColored:callbacks:) to create a data provider for direct access. The functions specified by the CGPatternCallbacks structure are responsible for drawing the pattern and for handling the pattern’s memory management.\n\nTopics\nInitializers\ninit()\ninit(version: UInt32, drawPattern: CGPatternDrawPatternCallback?, releaseInfo: CGPatternReleaseInfoCallback?)\nInstance Properties\nvar drawPattern: CGPatternDrawPatternCallback?\nA pointer to a custom function that draws thepattern. For information about this callback function, see CGPatternDrawPatternCallback.\nvar releaseInfo: CGPatternReleaseInfoCallback?\nAn optional pointer to a custom function that’sinvoked when the pattern is released. CGPatternReleaseInfoCallback.\nvar version: UInt32\nThe version of the structure passed in as a parameterto the init(info:bounds:matrix:xStep:yStep:tiling:isColored:callbacks:). Forthis version of the structure, you should set this value to zero.\nSee Also\nCreating Pattern Objects\ninit?(info: UnsafeMutableRawPointer?, bounds: CGRect, matrix: CGAffineTransform, xStep: CGFloat, yStep: CGFloat, tiling: CGPatternTiling, isColored: Bool, callbacks: UnsafePointer<CGPatternCallbacks>)\nCreates a pattern object.\nenum CGPatternTiling\nDifferent methods for rendering a tiled pattern.\ntypealias CGPatternDrawPatternCallback\nDraws a pattern cell.\ntypealias CGPatternReleaseInfoCallback\nRelease private data or resources associated with the pattern."
  },
  {
    "title": "init(iccBasedNComponents:range:profile:alternate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408881-init",
    "html": "Parameters\nnComponents\n\nThe number of color components in the color space defined by the ICC profile data. This must match the number of components actually in the ICC profile and must equal 1, 3, or 4.\n\nrange\n\nAn array of numbers that specify the minimum and maximum valid values of the corresponding color components. The size of the array is two times the number of components. If c[k] is the kthe color component, the valid range is range[2*k] ≤ c[k] ≤ range[2*k+1].\n\nprofile\n\nA data provider that supplies the ICC profile.\n\nalternateSpace\n\nAn alternate color space to use in case the ICC profile is not supported. The alternate color space must have nComponents color components. You must supply an alternate color space. If this parameter is NULL, then the function returns NULL.\n\nReturn Value\n\nA new ICC-based color space object. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nThis function creates an ICC-based color space from an ICC color profile, as defined by the International Color Consortium. ICC profiles define the reproducible color gamut (the range of colors supported by a device) and other characteristics of a particular output device, providing a way to accurately transform the color space of one device to the color space of another. The ICC profile is usually provided by the manufacturer of the device. Additionally, some color monitors and printers contain electronically embedded ICC profile information, as do some bitmap formats such as TIFF. Colors in a device-independent color space should appear the same when displayed on different devices, to the extent that the capabilities of the device allow.\n\nYou may want to use this function for a color space that requires a detailed gamma, such as the piecewise transfer function used in sRGB or ITU-R BT.709, because this function can accurately represent these gamma curves.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "init(info:bounds:matrix:xStep:yStep:tiling:isColored:callbacks:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpattern/1454997-init",
    "html": "Parameters\ninfo\n\nA pointer to private storage used by your pattern drawing function, or NULL. For more information, see the discussion below.\n\nbounds\n\nThe bounding box of the pattern cell, specified in pattern space. (Pattern space is an abstract space that maps to the default user space by the transformation matrix you specify with the matrix parameter.)The drawing done in your pattern drawing function is clipped to this rectangle.\n\nmatrix\n\nA matrix that represents a transform from pattern space to the default user space of the context in which the pattern is used. If no transform is needed, pass the identity matrix.\n\nxStep\n\nThe horizontal displacement between cells, specified in pattern space. For no additional horizontal space between cells (so that each pattern cells abuts the previous pattern cell in the horizontal direction), pass the width of the pattern cell.\n\nyStep\n\nThe vertical displacement between cells, specified in pattern space. For no additional vertical space between cells(so that each pattern cells abuts the previous pattern cell in the vertical direction), pass the height of the pattern cell.\n\ntiling\n\nA CGPatternTiling constant that specifies the desired tiling method.\n\nisColored\n\nIf you want to draw your pattern using its own intrinsic color, pass true. If you want to draw an uncolored (or masking) pattern that uses the fill or stroke color in the graphics state, pass false.\n\ncallbacks\n\nA pointer to a pattern callback function table—your pattern drawing function is an entry in this table. See CGPatternCallbacks for more information about callback function tables for patterns.\n\nReturn Value\n\nA new Core Graphics pattern.You are responsible for releasing this object using CGPatternRelease.\n\nDiscussion\n\nCore Graphics calls your drawing function at the appropriate timeto draw the pattern cell. A pattern cell must be invariant—thatis, the pattern cell should be drawn exactly the same way each timethe drawing function is called.\n\nThe appearance of a pattern cell is unaffected by changesin the graphics state of the context in which the pattern is used.\n\nSee CGPatternDrawPatternCallback formore information about pattern drawing functions.\n\nSee Also\nCreating Pattern Objects\nenum CGPatternTiling\nDifferent methods for rendering a tiled pattern.\nstruct CGPatternCallbacks\nA structure that holds a version and two callback functions for drawing a custom pattern.\ntypealias CGPatternDrawPatternCallback\nDraws a pattern cell.\ntypealias CGPatternReleaseInfoCallback\nRelease private data or resources associated with the pattern."
  },
  {
    "title": "kCGPDFContextSubject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextsubject",
    "html": "Discussion\n\nThe subject of a document. Optional; if present, the value of this key must be a CFString object.\n\nSee Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "CGPatternReleaseInfoCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpatternreleaseinfocallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(info:bounds:matrix:xStep:yStep:tiling:isColored:callbacks:).\n\nDiscussion\n\nQuartz calls your release function when it frees your pattern object.\n\nTo learn how to associate your release function with a Quartz pattern, see init(info:bounds:matrix:xStep:yStep:tiling:isColored:callbacks:) and CGPatternCallbacks.\n\nSee Also\nCreating Pattern Objects\ninit?(info: UnsafeMutableRawPointer?, bounds: CGRect, matrix: CGAffineTransform, xStep: CGFloat, yStep: CGFloat, tiling: CGPatternTiling, isColored: Bool, callbacks: UnsafePointer<CGPatternCallbacks>)\nCreates a pattern object.\nenum CGPatternTiling\nDifferent methods for rendering a tiled pattern.\nstruct CGPatternCallbacks\nA structure that holds a version and two callback functions for drawing a custom pattern.\ntypealias CGPatternDrawPatternCallback\nDraws a pattern cell."
  },
  {
    "title": "CGPatternDrawPatternCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpatterndrawpatterncallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data associated with the pattern. This is the same pointer you supplied to init(info:bounds:matrix:xStep:yStep:tiling:isColored:callbacks:).\n\ncontext\n\nThe graphics context for drawing the pattern cell.\n\nDiscussion\n\nWhen a pattern is used to stroke or fill a graphics path,Quartz calls your custom drawing function at the appropriatetime to draw the pattern cell. The cell should be drawn exactly thesame way each time the drawing function is called.\n\nIn a drawing function associated with an uncolored pattern,you should not attempt to set a stroke or fill color or color space—ifyou do so, the result is undefined.\n\nTo learn how to associate your drawing function with a Quartzpattern, see init(info:bounds:matrix:xStep:yStep:tiling:isColored:callbacks:) and CGPatternCallbacks.\n\nSee Also\nCreating Pattern Objects\ninit?(info: UnsafeMutableRawPointer?, bounds: CGRect, matrix: CGAffineTransform, xStep: CGFloat, yStep: CGFloat, tiling: CGPatternTiling, isColored: Bool, callbacks: UnsafePointer<CGPatternCallbacks>)\nCreates a pattern object.\nenum CGPatternTiling\nDifferent methods for rendering a tiled pattern.\nstruct CGPatternCallbacks\nA structure that holds a version and two callback functions for drawing a custom pattern.\ntypealias CGPatternReleaseInfoCallback\nRelease private data or resources associated with the pattern."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpattern/1456445-typeid",
    "html": "Return Value\n\nThe identifier forthe opaque type CGPattern."
  },
  {
    "title": "CGFunctionEvaluateCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfunctionevaluatecallback",
    "html": "Parameters\ninfo\n\nThe info parameter passed to init(info:domainDimension:domain:rangeDimension:range:callbacks:).\n\ninData\n\nAn array of floats. The size of the array is that specified by the domainDimension parameter passed to the init(info:domainDimension:domain:rangeDimension:range:callbacks:) function.\n\noutData\n\nAn array of floats. The size of the array is that specified by the rangeDimension parameter passed to the init(info:domainDimension:domain:rangeDimension:range:callbacks:) function.\n\nDiscussion\n\nThe callback you write is responsible for implementing thecalculation of output values from the supplied input values. Forexample, if you want to implement a simple \"squaring\" functionof one input argument to one output argument, your evaluation functionmight be:\n\nvoid evaluateSquare(void *info, const float *inData, float *outData)\n{\n    outData[0] = inData[0] * inData[0];\n}\n\nSee Also\nCreating Function Objects\ninit?(info: UnsafeMutableRawPointer?, domainDimension: Int, domain: UnsafePointer<CGFloat>?, rangeDimension: Int, range: UnsafePointer<CGFloat>?, callbacks: UnsafePointer<CGFunctionCallbacks>)\nCreates a Core Graphics function.\nstruct CGFunctionCallbacks\nA structure that contains callbacks needed by a CGFunctionRef object.\ntypealias CGFunctionReleaseInfoCallback\nPerforms custom clean-up tasks when Core Graphics deallocates a CGFunctionRef object."
  },
  {
    "title": "init(info:domainDimension:domain:rangeDimension:range:callbacks:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfunction/1390862-init",
    "html": "Parameters\ninfo\n\nA pointer to user-defined storage for data that you want to pass to your callbacks. You need to make sure that the data persists for as long as it’s needed, which can be beyond the scope in which the Core Graphics function is used.\n\ndomainDimension\n\nThe number of inputs.\n\ndomain\n\nAn array of (2*domainDimension) floats used to specify the valid intervals of input values. For each k from 0 to (domainDimension - 1), domain[2*k] must be less than or equal to domain[2*k+1], and the kth input value will be clipped to lie in the interval domain[2*k] ≤ input[k] ≤ domain[2*k+1]. If this parameter is NULL, then the input values are not clipped.\n\nrangeDimension\n\nThe number of outputs.\n\nrange\n\nAn array of (2*rangeDimension) floats that specifies the valid intervals of output values. For each k from 0 to (rangeDimension - 1), range[2*k] must be less than or equal to range[2*k+1], and the kth output value will be clipped to lie in the interval range[2*k] ≤ output[k] ≤ range[2*k+1]. If this parameter is NULL, then the output values are not clipped.\n\ncallbacks\n\nA pointer to a callback function table. This table should contain pointers to the callbacks you provide to implement the semantics of this Core Graphics function. Core Graphics makes a copy of your table, so, for example, you could safely pass in a pointer to a structure on the stack.\n\nReturn Value\n\nThe new Core Graphics function. You are responsible for releasing this object using CGFunctionRelease.\n\nSee Also\nCreating Function Objects\nstruct CGFunctionCallbacks\nA structure that contains callbacks needed by a CGFunctionRef object.\ntypealias CGFunctionEvaluateCallback\nPerforms custom operations on the supplied input data to produce output data.\ntypealias CGFunctionReleaseInfoCallback\nPerforms custom clean-up tasks when Core Graphics deallocates a CGFunctionRef object."
  },
  {
    "title": "CGFunctionCallbacks | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfunctioncallbacks",
    "html": "Topics\nInitializers\ninit()\ninit(version: UInt32, evaluate: CGFunctionEvaluateCallback?, releaseInfo: CGFunctionReleaseInfoCallback?)\nInstance Properties\nvar evaluate: CGFunctionEvaluateCallback?\nThe callback that evaluates the function.\nvar releaseInfo: CGFunctionReleaseInfoCallback?\nIf non-NULL,the callback used to release the info parameterpassed to init(info:domainDimension:domain:rangeDimension:range:callbacks:).\nvar version: UInt32\nThe structure version number. For this structure,the version should be 0.\nSee Also\nCreating Function Objects\ninit?(info: UnsafeMutableRawPointer?, domainDimension: Int, domain: UnsafePointer<CGFloat>?, rangeDimension: Int, range: UnsafePointer<CGFloat>?, callbacks: UnsafePointer<CGFunctionCallbacks>)\nCreates a Core Graphics function.\ntypealias CGFunctionEvaluateCallback\nPerforms custom operations on the supplied input data to produce output data.\ntypealias CGFunctionReleaseInfoCallback\nPerforms custom clean-up tasks when Core Graphics deallocates a CGFunctionRef object."
  },
  {
    "title": "CGFunctionReleaseInfoCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfunctionreleaseinfocallback",
    "html": "Parameters\ninfo\n\nThe info parameter passed to init(info:domainDimension:domain:rangeDimension:range:callbacks:).\n\nSee Also\nCreating Function Objects\ninit?(info: UnsafeMutableRawPointer?, domainDimension: Int, domain: UnsafePointer<CGFloat>?, rangeDimension: Int, range: UnsafePointer<CGFloat>?, callbacks: UnsafePointer<CGFunctionCallbacks>)\nCreates a Core Graphics function.\nstruct CGFunctionCallbacks\nA structure that contains callbacks needed by a CGFunctionRef object.\ntypealias CGFunctionEvaluateCallback\nPerforms custom operations on the supplied input data to produce output data."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfunction/1390879-typeid",
    "html": "Return Value\n\nThe identifier for the opaque type CGFunction."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataconsumer/1455226-typeid",
    "html": "Return Value\n\nThe Core Foundation identifier for the opaque type CGDataConsumer."
  },
  {
    "title": "CGImageRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1556742-cgimagerelease",
    "html": "Parameters\nimage\n\nThe image to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except that it does not cause an error if the image parameter is NULL.\n\nSee Also\nRetaining and Releasing Images\nCGImageRetain\nIncrements the retain count of a bitmap image."
  },
  {
    "title": "CGDataConsumerPutBytesCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataconsumerputbytescallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the pointer supplied to init(info:cbks:).\n\nbuffer\n\nThe buffer from which you copy the specified number of bytes.\n\ncount\n\nThe number of bytes to copy.\n\nReturn Value\n\nThe number of bytes copied. If no more data can be written to the consumer, you should return 0.\n\nDiscussion\n\nWhen Core Graphics is ready to send data to the consumer, your function is called. It should copy the specified number of bytes from buffer into some resource under your control—for example, a file.\n\nFor information on how to associate your callback function with a data consumer, see init(info:cbks:) and CGDataConsumerCallbacks.\n\nSee Also\nCreating Data Consumers\ninit?(info: UnsafeMutableRawPointer?, cbks: UnsafePointer<CGDataConsumerCallbacks>)\nCreates a data consumer that uses callback functions to write data.\ninit?(url: CFURL)\nCreates a data consumer that writes data to a location specified by a URL.\ninit?(data: CFMutableData)\nCreates a data consumer that writes to a CFData object.\nstruct CGDataConsumerCallbacks\nA structure that contains pointers to callback functions that manage the copying of data for a data consumer.\ntypealias CGDataConsumerReleaseInfoCallback\nReleases any private data or resources associated with the data consumer."
  },
  {
    "title": "CGDataConsumerReleaseInfoCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataconsumerreleaseinfocallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(info:cbks:).\n\nDiscussion\n\nWhen Core Graphics frees a data consumer that has an associated release function, the release function is called.\n\nFor information on how to associate your callback function with a data consumer, see init(info:cbks:) and CGDataConsumerCallbacks.\n\nSee Also\nCreating Data Consumers\ninit?(info: UnsafeMutableRawPointer?, cbks: UnsafePointer<CGDataConsumerCallbacks>)\nCreates a data consumer that uses callback functions to write data.\ninit?(url: CFURL)\nCreates a data consumer that writes data to a location specified by a URL.\ninit?(data: CFMutableData)\nCreates a data consumer that writes to a CFData object.\nstruct CGDataConsumerCallbacks\nA structure that contains pointers to callback functions that manage the copying of data for a data consumer.\ntypealias CGDataConsumerPutBytesCallback\nCopies data from a Core Graphics-supplied buffer into a data consumer."
  },
  {
    "title": "init(data:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataconsumer/1456292-init",
    "html": "Parameters\ndata\n\nThe CFData object to write to.\n\nReturn Value\n\nA new data consumer object. You are responsible for releasing this object using CGDataConsumerRelease.\n\nDiscussion\n\nYou can use this function when you need to represent Core Graphics data as a CFData type. For example, you might create a CFData object that you then copy to the pasteboard.\n\nSee Also\nCreating Data Consumers\ninit?(info: UnsafeMutableRawPointer?, cbks: UnsafePointer<CGDataConsumerCallbacks>)\nCreates a data consumer that uses callback functions to write data.\ninit?(url: CFURL)\nCreates a data consumer that writes data to a location specified by a URL.\nstruct CGDataConsumerCallbacks\nA structure that contains pointers to callback functions that manage the copying of data for a data consumer.\ntypealias CGDataConsumerPutBytesCallback\nCopies data from a Core Graphics-supplied buffer into a data consumer.\ntypealias CGDataConsumerReleaseInfoCallback\nReleases any private data or resources associated with the data consumer."
  },
  {
    "title": "init(info:cbks:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataconsumer/1456428-init",
    "html": "Parameters\ninfo\n\nA pointer to data of any type or NULL. When the callback is called, Core Graphics passes this pointer as the info parameter.\n\ncallbacks\n\nA pointer to a structure that specifies the callback functions you implement to copy data sent to the consumer and to handle the consumer’s basic memory management. For a complete description, see CGDataConsumerCallbacks.\n\nReturn Value\n\nA new data consumer object. You are responsible for releasing this object using CGDataConsumerRelease.\n\nSee Also\nCreating Data Consumers\ninit?(url: CFURL)\nCreates a data consumer that writes data to a location specified by a URL.\ninit?(data: CFMutableData)\nCreates a data consumer that writes to a CFData object.\nstruct CGDataConsumerCallbacks\nA structure that contains pointers to callback functions that manage the copying of data for a data consumer.\ntypealias CGDataConsumerPutBytesCallback\nCopies data from a Core Graphics-supplied buffer into a data consumer.\ntypealias CGDataConsumerReleaseInfoCallback\nReleases any private data or resources associated with the data consumer."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408926-typeid",
    "html": "Return Value\n\nThe identifier for the opaque type CGColorSpace."
  },
  {
    "title": "adobeRGB1998 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408865-adobergb1998",
    "html": "See Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "genericCMYK | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408904-genericcmyk",
    "html": "See Also\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values."
  },
  {
    "title": "CGColorSpaceModel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspacemodel",
    "html": "Topics\nConstants\ncase unknown\nAn unknown color space model.\ncase monochrome\nA monochrome color space model.\ncase rgb\nAn RGB color space model.\ncase cmyk\nA CMYK color space model.\ncase lab\nA Lab color space model.\ncase deviceN\nA DeviceN color space model.\ncase indexed\nAn indexed color space model.\ncase pattern\nA pattern color space model.\ncase XYZ\nAn XYZ color space model.\nRelationships\nConforms To\nSendable\nSee Also\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut."
  },
  {
    "title": "numberOfComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408848-numberofcomponents",
    "html": "Parameters\ncs\n\nThe color space to examine.\n\nReturn Value\n\nThe number of color components in the specified color space, not including the alpha value.\n\nDiscussion\n\nA color space defines an n-dimensional space whose dimensions (or components) represent intensity values. Use this property to obtain the number of components in a given color space: for example, in an RGB color space this value is 3 (for the three intensity values red, green, and blue).\n\nSee Also\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nenum CGColorSpaceModel\nModels for color spaces.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut."
  },
  {
    "title": "copyICCData() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1644732-copyiccdata",
    "html": "Parameters\nspace\n\nThe color space whose ICC profile you want to obtain.\n\nReturn Value\n\nThe ICC profile data or NULL if the color space does not have an ICC data profile.\n\nSee Also\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nenum CGColorSpaceModel\nModels for color spaces.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut."
  },
  {
    "title": "model | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408854-model",
    "html": "Parameters\nspace\n\nA color space object.\n\nReturn Value\n\nOne of the constants described in CGColorSpaceModel.\n\nSee Also\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nenum CGColorSpaceModel\nModels for color spaces.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut."
  },
  {
    "title": "baseColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408839-basecolorspace",
    "html": "Parameters\nspace\n\nA color space object for a pattern or indexed color space.\n\nReturn Value\n\nThe base color space if the space parameter is a pattern or indexed color space; otherwise, NULL.\n\nSee Also\nExamining a Color Space\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nenum CGColorSpaceModel\nModels for color spaces.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut."
  },
  {
    "title": "currentPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411132-currentpoint",
    "html": "Parameters\npath\n\nThe path to evaluate.\n\nReturn Value\n\nThe current point in the specified path.\n\nDiscussion\n\nIf the path is empty—that is, if it has no elements—this function returns CGPointZero (see CGGeometry). To determine whether a path is empty, use isEmpty.\n\nSee Also\nExamining a Graphics Path\nvar boundingBox: CGRect\nReturns the bounding box containing all points in a graphics path.\nvar boundingBoxOfPath: CGRect\nReturns the bounding box of a graphics path.\nfunc contains(CGPoint, using: CGPathFillRule, transform: CGAffineTransform) -> Bool\nReturns whether the specified point is interior to the path.\nvar isEmpty: Bool\nIndicates whether or not a graphics path is empty.\nfunc isRect(UnsafeMutablePointer<CGRect>?) -> Bool\nIndicates whether or not a graphics path represents a rectangle."
  },
  {
    "title": "kCGPDFXInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfxinfo",
    "html": "Discussion\n\nA human-readable text string containing additional information or comments about the intended target device or production condition. This key is required if the value of kCGPDFXOutputConditionIdentifier does not specify a standard production condition. It is optional otherwise. If present, the value of this key must be a CFString object.\n\nSee Also\nOutput Intent Keys\nlet kCGPDFXOutputIntentSubtype: CFString\nThe output intent subtype. This key is required. The value of this key must be a CFString object equal to \"GTS_PDFX\"; otherwise, the dictionary is ignored.\nlet kCGPDFXOutputConditionIdentifier: CFString\nlet kCGPDFXOutputCondition: CFString\nA text string identifying the intended output device or production condition in a human- readable form. This key is optional. If present, the value of this key must be a CFString object.\nlet kCGPDFXRegistryName: CFString\nlet kCGPDFXDestinationOutputProfile: CFString"
  },
  {
    "title": "CGContextClip | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455262-cgcontextclip",
    "html": "Parameters\nc\n\nA graphics context that contains a path. If the context does not have a current path, the function does nothing.\n\nDiscussion\n\nThe function uses the nonzero winding number rule to calculate the intersection of the current path with the current clipping path. The path resulting from the intersection is used as the new current clipping path for subsequent painting operations.\n\nIf the current path includes any open subpaths, the paths are treated as if they were closed by calling CGContextClosePath.\n\nUnlike the current path, the current clipping path is part of the graphics state. Therefore, to re-enlarge the paintable area by restoring the clipping path to a prior state, you must save the graphics state before you clip and restore the graphics state after you’ve completed any clipped drawing.\n\nAfter determining the new clipping path, the function resets the context’s current path to an empty path.\n\nSee Also\nModifying Clipping Paths\nCGContextEOClip\nModifies the current clipping path, using the even-odd rule.\nCGContextClipToRect\nSets the clipping path to the intersection of the current clipping path with the area defined by the specified rectangle.\nCGContextClipToRects\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles.\nCGContextGetClipBoundingBox\nReturns the bounding box of a clipping path.\nCGContextClipToMask\nMaps a mask into the specified rectangle and intersects it with the current clipping area of the graphics context."
  },
  {
    "title": "kCGPDFXRegistryName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfxregistryname",
    "html": "Discussion\n\nA string identifying the registry in which the condition designated by kCGPDFXOutputConditionIdentifier is defined. This key is optional. If present, the value of this key must be a CFString object. For best results, the string should be lossless in ASCII encoding.\n\nSee Also\nOutput Intent Keys\nlet kCGPDFXOutputIntentSubtype: CFString\nThe output intent subtype. This key is required. The value of this key must be a CFString object equal to \"GTS_PDFX\"; otherwise, the dictionary is ignored.\nlet kCGPDFXOutputConditionIdentifier: CFString\nlet kCGPDFXOutputCondition: CFString\nA text string identifying the intended output device or production condition in a human- readable form. This key is optional. If present, the value of this key must be a CFString object.\nlet kCGPDFXInfo: CFString\nlet kCGPDFXDestinationOutputProfile: CFString"
  },
  {
    "title": "kCGPDFXOutputConditionIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfxoutputconditionidentifier",
    "html": "Discussion\n\nA string identifying the intended output device or production condition in a human- or machine-readable form. This key is required. The value of this key must be a CFString object. For best results, the string should be restricted to characters in the ASCII character set.\n\nSee Also\nOutput Intent Keys\nlet kCGPDFXOutputIntentSubtype: CFString\nThe output intent subtype. This key is required. The value of this key must be a CFString object equal to \"GTS_PDFX\"; otherwise, the dictionary is ignored.\nlet kCGPDFXOutputCondition: CFString\nA text string identifying the intended output device or production condition in a human- readable form. This key is optional. If present, the value of this key must be a CFString object.\nlet kCGPDFXRegistryName: CFString\nlet kCGPDFXInfo: CFString\nlet kCGPDFXDestinationOutputProfile: CFString"
  },
  {
    "title": "kCGPDFXOutputIntentSubtype | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfxoutputintentsubtype",
    "html": "See Also\nOutput Intent Keys\nlet kCGPDFXOutputConditionIdentifier: CFString\nlet kCGPDFXOutputCondition: CFString\nA text string identifying the intended output device or production condition in a human- readable form. This key is optional. If present, the value of this key must be a CFString object.\nlet kCGPDFXRegistryName: CFString\nlet kCGPDFXInfo: CFString\nlet kCGPDFXDestinationOutputProfile: CFString"
  },
  {
    "title": "kCGPDFContextTrimBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontexttrimbox",
    "html": "See Also\nBox Keys\nlet kCGPDFContextMediaBox: CFString\nThe media box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextCropBox: CFString\nThe crop box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextBleedBox: CFString\nThe bleed box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextArtBox: CFString\nThe art box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference)."
  },
  {
    "title": "kCGPDFContextBleedBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextbleedbox",
    "html": "See Also\nBox Keys\nlet kCGPDFContextMediaBox: CFString\nThe media box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextCropBox: CFString\nThe crop box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextTrimBox: CFString\nThe trim box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextArtBox: CFString\nThe art box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference)."
  },
  {
    "title": "kCGPDFContextEncryptionKeyLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextencryptionkeylength",
    "html": "Discussion\n\nThe encryption key length in bits; see Table 3.18 \"Entries common to all encryption dictionaries\", PDF Reference: Adobe PDF version 1.5 (4th ed.) for more information. Optional; if present, the value of this key must be a CFNumber object with value which is a multiple of 8 between 40 and 128, inclusive. If this key is absent or invalid, the encryption key length defaults to 40 bits.\n\nSee Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString"
  },
  {
    "title": "kCGPDFContextKeywords | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextkeywords",
    "html": "Discussion\n\nThe keywords for this document. This key is optional. If the value of this key is a CFString object, the /Keywords entry will be the specified string. If the value of this key is a CFArray object, then it must be an array of CFString objects. The /Keywords entry will, in this case, be the concatenation of the specified strings separated by commas (\",\"). In addition, an entry with the key \"/AAPL:Keywords\" is stored in the document information dictionary; its value is an array consisting of each of the specified strings. The value of this key must be in one of the above forms; otherwise, this key is ignored.\n\nSee Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "kCGPDFContextOutputIntents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextoutputintents",
    "html": "Discussion\n\nOutput intent dictionaries. This key is optional. If present, the value must be an array of one or more kCGPDFContextOutputIntent dictionaries. The array is added to the PDF document in the /OutputIntents entry in the PDF file's document catalog. Each dictionary in the array must be of form specified for the kCGPDFContextOutputIntent key, except that only the first dictionary in the array is required to contain the \"S\" key with a value of GTS_PDFX. If both the kCGPDFContextOutputIntent and kCGPDFContextOutputIntents keys are specified, the former is ignored.\n\nSee Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "kCGPDFContextAllowsCopying | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextallowscopying",
    "html": "See Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "kCGPDFContextOutputIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextoutputintent",
    "html": "Discussion\n\nThe output intent PDF/X. This key is optional. If present, the value of this key must be a CFDictionary object. The dictionary is added to the /OutputIntents entry in the PDF file document catalog. The keys and values contained in the dictionary must match those specified in section 9.10.4 of the PDF 1.4 specification, ISO/DIS 15930-3 document published by ISO/TC 130, and Adobe Technical Note #5413.\n\nSee Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "kCGPDFContextAllowsPrinting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextallowsprinting",
    "html": "See Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "kCGPDFContextUserPassword | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextuserpassword",
    "html": "Discussion\n\nThe user password of the PDF document. If the document is encrypted, then the value of this key will be the user password for the document. If not specified, the user password is the empty string. The value of this key must be a CFString object that can be represented in ASCII encoding; only the first 32 bytes will be used for the password. If the value of this key cannot be represented in ASCII, the document is not created and the creation function returns NULL.\n\nSee Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "kCGPDFContextOwnerPassword | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextownerpassword",
    "html": "Discussion\n\nThe owner password of the PDF document. If this key is specified, the document is encrypted using the value as the owner password; otherwise, the document will not be encrypted. The value of this key must be a CFString object that can be represented in ASCII encoding. Only the first 32 bytes are used for the password. There is no default value for this key. If the value of this key cannot be represented in ASCII, the document is not created and the creation function returns NULL.\n\nSee Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "kCGPDFContextTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontexttitle",
    "html": "See Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "kCGPDFContextCreator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextcreator",
    "html": "See Also\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "init(propertyListPlist:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/2962829-init",
    "html": "Parameters\nplist\n\nThe list of properties to use.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated\nRelated Documentation\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties."
  },
  {
    "title": "CGColorSpaceCreateDeviceCMYK() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408897-cgcolorspacecreatedevicecmyk",
    "html": "Return Value\n\nA device-dependent CMYK color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nColors in a device-dependent color space are not transformed or otherwise modified when displayed on an output device—that is, there is no attempt to maintain the visual appearance of a color. As a consequence, colors in a device color space often appear different when displayed on different output devices. For this reason, device color spaces are not recommended when color preservation is important.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "init(iccData:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/2866135-init",
    "html": "Parameters\ndata\n\nThe data containing the ICC profile to set for the new color space.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "init(iccProfileData:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408895-init",
    "html": "Deprecated\n\nUse init(iccData:) instead.\n\nParameters\ndata\n\nThe data containing the ICC profile to set for the new color space.\n\nReturn Value\n\nA new color space based on the specified profile.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space."
  },
  {
    "title": "init(platformColorSpaceRef:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408850-init",
    "html": "Parameters\nplatformColorSpace\n\nA generic pointer to a platform-specific color space. In macOS, pass a ColorSyncProfileRef, which is a ColorSync profile. Quartz uses this pointer (and the underlying information) only during the function call.\n\nReturn Value\n\nA new color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nColors in a device-dependent color space are not transformed or otherwise modified when displayed on an output device — that is, there is no attempt to maintain the visual appearance of a color. As a consequence, colors in a device color space often appear different when displayed on different output devices. For this reason, device color spaces are not recommended when color preservation is important.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "CGColorSpaceCreateDeviceGray() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408908-cgcolorspacecreatedevicegray",
    "html": "Return Value\n\nA device-dependent gray color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nColors in a device-dependent color space are not transformed or otherwise modified when displayed on an output device—that is, there is no attempt to maintain the visual appearance of a color. As a consequence, colors in a device color space often appear different when displayed on different output devices. For this reason, device color spaces are not recommended when color preservation is important.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "CGColorSpaceCreateDeviceRGB() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1408837-cgcolorspacecreatedevicergb",
    "html": "Return Value\n\nA device-dependent RGB color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nColors in a device-dependent color space are not transformed or otherwise modified when displayed on an output device—that is, there is no attempt to maintain the visual appearance of a color. As a consequence, colors in a device color space often appear different when displayed on different output devices. For this reason, device color spaces are not recommended when color preservation is important.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "init(name:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408921-init",
    "html": "Parameters\nname\n\nA color space name. See Color Space Names for a list of the valid Quartz-defined names.\n\nReturn Value\n\nA new generic color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nYou can use this function to create a generic color space. For more information, see Color Space Names.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated\nRelated Documentation\nvar name: CFString?\nReturns the name used to create the specified color space."
  },
  {
    "title": "init(calibratedRGBWhitePoint:blackPoint:gamma:matrix:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408861-init",
    "html": "Parameters\nwhitePoint\n\nAn array of 3 numbers specifying the tristimulus value, in the CIE 1931 XYZ-space, of the diffuse white point.\n\nblackPoint\n\nAn array of 3 numbers specifying the tristimulus value, in CIE 1931 XYZ-space, of the diffuse black point.\n\ngamma\n\nAn array of 3 numbers specifying the gamma for the red, green, and blue components of the color space.\n\nmatrix\n\nAn array of 9 numbers specifying the linear interpretation of the gamma-modified RGB values of the color space with respect to the final XYZ representation.\n\nReturn Value\n\nA new calibrated RGB color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nCreates a device-independent RGB color space that represents colors relative to a reference white point. This white point is based on the whitest light that can be generated by the output device. Colors in a device-independent color space should appear the same when displayed on different devices, to the extent that the capabilities of the device allow.\n\nFor color spaces that require a detailed gamma, such as the piecewise transfer function used in sRGB or ITU-R BT.709, you may want to use the function init(iccBasedNComponents:range:profile:alternate:) instead, because it can accurately represent these gamma curves.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "init(labWhitePoint:blackPoint:range:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408879-init",
    "html": "Parameters\nwhitePoint\n\nAn array of 3 numbers that specify the tristimulus value, in the CIE 1931 XYZ-space, of the diffuse white point.\n\nblackPoint\n\nAn array of 3 numbers that specify the tristimulus value, in CIE 1931 XYZ-space, of the diffuse black point.\n\nrange\n\nAn array of 4 numbers that specify the range of valid values for the a* and b* components of the color space. The a* component represents values running from green to red, and the b* component represents values running from blue to yellow.\n\nReturn Value\n\nA new L*a*b* color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nThe CIE L*a*b* space is a nonlinear transformation of the Munsell color notation system (a system which specifies colors by hue, value, and saturation—or “chroma”—values), designed to match perceived color difference with quantitative distance in color space. The L* component represents the lightness value, the a* component represents values running from green to red, and the b* component represents values running from blue to yellow. This roughly corresponds to the way the human brain is thought to decode colors. Colors in a device-independent color space should appear the same when displayed on different devices, to the extent that the capabilities of the device allow.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "init(indexedBaseSpace:last:colorTable:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408899-init",
    "html": "Parameters\nbaseSpace\n\nThe color space on which the color table is based.\n\nlastIndex\n\nThe maximum valid index value for the color table. The value must be less than or equal to 255.\n\ncolorTable\n\nAn array of m*(lastIndex+1) bytes, where m is the number of color components in the base color space. Each byte is an unsigned integer in the range 0 to 255 that is scaled to the range of the corresponding color component in the base color space.\n\nReturn Value\n\nA new indexed color space object. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nAn indexed color space contains a color table with up to 255 entries, and a base color space to which the color table entries are mapped. Each entry in the color table specifies one color in the base color space. A value in an indexed color space is treated as an index into the color table of the color space. The data in the table is in meshed format. (For example, for an RGB color space the values are R, G, B, R, G, B, and so on.)\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "init(calibratedGrayWhitePoint:blackPoint:gamma:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408887-init",
    "html": "Parameters\nwhitePoint\n\nAn array of 3 numbers specifying the tristimulus value, in the CIE 1931 XYZ-space, of the diffuse white point.\n\nblackPoint\n\nAn array of 3 numbers specifying the tristimulus value, in CIE 1931 XYZ-space, of the diffuse black point.\n\ngamma\n\nThe gamma value appropriate for the imaging device.\n\nReturn Value\n\nA new calibrated gray color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nCreates a device-independent grayscale color space that represents colors relative to a reference white point. This white point is based on the whitest light that can be generated by the output device. Colors in a device-independent color space should appear the same when displayed on different devices, to the extent that the capabilities of the device allow.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "init(patternBaseSpace:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace/1408869-init",
    "html": "Parameters\nbaseSpace\n\nFor masking patterns, the underlying color space that specifies the colors to be painted through the mask. For color patterns, you should pass NULL.\n\nReturn Value\n\nA new pattern color space. You are responsible for releasing this object by calling CGColorSpaceRelease. If unsuccessful, returns NULL.\n\nDiscussion\n\nFor information on creating and using patterns, see Quartz 2D Programming Guide and CGPattern. Quartz retains the color space you pass in. Upon return, you may safely release it by calling CGColorSpaceRelease.\n\nSee Also\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated"
  },
  {
    "title": "CGInhibitLocalEvents(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541773-cginhibitlocalevents",
    "html": "Parameters\ndoInhibit\n\nPass true to specify that local hardware events on the remote system should be inhibited; otherwise, pass false.\n\nReturn Value\n\nA result code. See the result codes described in Quartz Display Services.\n\nDiscussion\n\nThis function is typically used during remote operation of a system to disconnect the keyboard and mouse for a short period of time, as in automated system testing or telecommuting applications.\n\nThe CGInhibitLocalEvents function is not recommended for general use because of undocumented special cases and undesirable side effects. For example, this function can permanently disable the keyboard and mouse, rendering the system unusable. The recommended replacement for this function is setLocalEventsFilterDuringSuppressionState(_:state:).\n\nSpecial Considerations\n\nIn OS X v10.2 and earlier, this function inhibits local events only after a synthetic keyboard or mouse event is posted by the calling application. In macOS 10.3 and later, event inhibition takes effect immediately. If your application terminates for any reason, event inhibition on the remote system is immediately turned off."
  },
  {
    "title": "kCGPDFContextAuthor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgpdfcontextauthor",
    "html": "See Also\nMetadata Keys\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString"
  },
  {
    "title": "CGPathApplierFunction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathapplierfunction",
    "html": "Discussion\n\nSee also apply(info:function:).\n\nSee Also\nApplying a Function to the Elements of a Path\nfunc apply(info: UnsafeMutableRawPointer?, function: CGPathApplierFunction)\nFor each element in a graphics path, calls a custom applier function.\nstruct CGPathElement\nA data structure that provides information about a path element.\nenum CGPathElementType\nThe type of element found in a path."
  },
  {
    "title": "isRect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411163-isrect",
    "html": "Parameters\nrect\n\nOn input, a pointer to an uninitialized rectangle. If the specified path represents a rectangle, on return contains a copy of the rectangle.\n\nReturn Value\n\nA Boolean value that indicates whether the specified path represents a rectangle. If the path represents a rectangle, returns true.\n\nSee Also\nExamining a Graphics Path\nvar boundingBox: CGRect\nReturns the bounding box containing all points in a graphics path.\nvar boundingBoxOfPath: CGRect\nReturns the bounding box of a graphics path.\nvar currentPoint: CGPoint\nReturns the current point in a graphics path.\nfunc contains(CGPoint, using: CGPathFillRule, transform: CGAffineTransform) -> Bool\nReturns whether the specified point is interior to the path.\nvar isEmpty: Bool\nIndicates whether or not a graphics path is empty."
  },
  {
    "title": "contains(_:using:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/2427117-contains",
    "html": "Parameters\npoint\n\nThe point to check.\n\nrule\n\nThe rule for determining which areas to treat as the interior of the path. Defaults to the CGPathFillRule.winding rule if not specified.\n\ntransform\n\nAn affine transform to apply to the point before checking for containment in the path. Defaults to the CGAffineTransformIdentity transform if not specified.\n\nReturn Value\n\ntrue if the point is interior to the path; otherwise, false.\n\nDiscussion\n\nA point is contained in a path if it would be inside the painted region when the path is filled.\n\nSee Also\nExamining a Graphics Path\nvar boundingBox: CGRect\nReturns the bounding box containing all points in a graphics path.\nvar boundingBoxOfPath: CGRect\nReturns the bounding box of a graphics path.\nvar currentPoint: CGPoint\nReturns the current point in a graphics path.\nvar isEmpty: Bool\nIndicates whether or not a graphics path is empty.\nfunc isRect(UnsafeMutablePointer<CGRect>?) -> Bool\nIndicates whether or not a graphics path represents a rectangle.\nRelated Documentation\nenum CGPathFillRule\nRules for determining which regions are interior to a path, used by the and methods."
  },
  {
    "title": "isConverting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverter/1454582-isconverting",
    "html": "Parameters\nconverter\n\nA PostScript converter.\n\nReturn Value\n\nReturns true that indicates if the conversion is in progress.\n\nSee Also\nCGPSConverter Miscellaneous Functions\nfunc abort() -> Bool\nTells a PostScript converter to abort a conversion at the next available opportunity.\ninit?(info: UnsafeMutableRawPointer?, callbacks: UnsafePointer<CGPSConverterCallbacks>, options: CFDictionary?)\nCreates a new PostScript converter.\nfunc convert(CGDataProvider, consumer: CGDataConsumer, options: CFDictionary?) -> Bool\nUses a PostScript converter to convert PostScript data to PDF data.\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for PostScript converters."
  },
  {
    "title": "apply(info:function:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411203-apply",
    "html": "Parameters\ninfo\n\nA pointer to the user data that Core Graphics will pass to the function being applied, or NULL.\n\nfunction\n\nA pointer to the function to apply. See CGPathApplierFunction for more information.\n\nDiscussion\n\nFor each element in the specified path, Core Graphics calls the applier function, which can examine (but not modify) the element.\n\nSee Also\nApplying a Function to the Elements of a Path\ntypealias CGPathApplierFunction\nDefines a callback function that can view an element in a graphics path.\nstruct CGPathElement\nA data structure that provides information about a path element.\nenum CGPathElementType\nThe type of element found in a path."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411149-isempty",
    "html": "Parameters\npath\n\nThe path to evaluate.\n\nReturn Value\n\nA Boolean value that indicates whether the specified path is empty.\n\nDiscussion\n\nAn empty path contains no elements.\n\nSee Also\nExamining a Graphics Path\nvar boundingBox: CGRect\nReturns the bounding box containing all points in a graphics path.\nvar boundingBoxOfPath: CGRect\nReturns the bounding box of a graphics path.\nvar currentPoint: CGPoint\nReturns the current point in a graphics path.\nfunc contains(CGPoint, using: CGPathFillRule, transform: CGAffineTransform) -> Bool\nReturns whether the specified point is interior to the path.\nfunc isRect(UnsafeMutablePointer<CGRect>?) -> Bool\nIndicates whether or not a graphics path represents a rectangle."
  },
  {
    "title": "boundingBoxOfPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411200-boundingboxofpath",
    "html": "Parameters\npath\n\nThe graphics path to evaluate.\n\nReturn Value\n\nA rectangle that represents the path bounding box of the specified path. If the path is empty, this function returns CGRectNull.\n\nDiscussion\n\nThe path bounding box is the smallest rectangle completely enclosing all points in the path but not including control points for Bézier and quadratic curves.\n\nSee Also\nExamining a Graphics Path\nvar boundingBox: CGRect\nReturns the bounding box containing all points in a graphics path.\nvar currentPoint: CGPoint\nReturns the current point in a graphics path.\nfunc contains(CGPoint, using: CGPathFillRule, transform: CGAffineTransform) -> Bool\nReturns whether the specified point is interior to the path.\nvar isEmpty: Bool\nIndicates whether or not a graphics path is empty.\nfunc isRect(UnsafeMutablePointer<CGRect>?) -> Bool\nIndicates whether or not a graphics path represents a rectangle."
  },
  {
    "title": "boundingBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411165-boundingbox",
    "html": "Parameters\npath\n\nThe graphics path to evaluate.\n\nReturn Value\n\nA rectangle that represents the bounding box of the specified path. If the path is empty, this function returns CGRectNull.\n\nDiscussion\n\nThe bounding box is the smallest rectangle completely enclosing all points in the path, including control points for Bézier and quadratic curves.\n\nSee Also\nExamining a Graphics Path\nvar boundingBoxOfPath: CGRect\nReturns the bounding box of a graphics path.\nvar currentPoint: CGPoint\nReturns the current point in a graphics path.\nfunc contains(CGPoint, using: CGPathFillRule, transform: CGAffineTransform) -> Bool\nReturns whether the specified point is interior to the path.\nvar isEmpty: Bool\nIndicates whether or not a graphics path is empty.\nfunc isRect(UnsafeMutablePointer<CGRect>?) -> Bool\nIndicates whether or not a graphics path represents a rectangle."
  },
  {
    "title": "copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/2427133-copy",
    "html": "Parameters\nlineWidth\n\nThe line width to use, in user space units. The value must be greater than 0.\n\nlineCap\n\nThe line cap style to render. (For equivalent CGContext drawing methods, the default style is CGLineCap.butt.)\n\nlineJoin\n\nThe line join style to render. (For equivalent CGContext drawing methods, the default style is CGLineJoin.miter.)\n\nmiterLimit\n\nA value that limits how sharp individual corners in the path can be when using the CGLineJoin.miter line join style. When the ratio of a the length required for a mitered corner to the line width exceeds this value, that corner uses the CGLineJoin.bevel style instead.\n\ntransform\n\nAn affine transform to apply to the path before dashing. Defaults to the CGAffineTransformIdentity transform if not specified.\n\nReturn Value\n\nA new path.\n\nDiscussion\n\nThe new path is created so that filling the new path draws the same pixels as stroking the original path with the specified line style.\n\nSee Also\nCopying a Graphics Path\nfunc copy() -> CGPath?\nCreates an immutable copy of a graphics path.\nfunc copy(using: UnsafePointer<CGAffineTransform>?) -> CGPath?\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nfunc copy(dashingWithPhase: CGFloat, lengths: [CGFloat], transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a dashed stroke.\nfunc mutableCopy() -> CGMutablePath?\nCreates a mutable copy of an existing graphics path.\nfunc mutableCopy(using: UnsafePointer<CGAffineTransform>?) -> CGMutablePath?\nCreates a mutable copy of a graphics path transformed by a transformation matrix."
  },
  {
    "title": "copy(dashingWithPhase:lengths:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/2427137-copy",
    "html": "Parameters\nphase\n\nA value that specifies how far into the dash pattern the line starts, in units of the user space. For example, a value of 0 draws a line starting with the beginning of a dash pattern, and a value of 3 means the line is drawn with the dash pattern starting at three units from its beginning.\n\nlengths\n\nAn array of values that specify the lengths, in user space coordinates, of the painted and unpainted segments of the dash pattern.\n\nFor example, the array [2,3] sets a dash pattern that alternates between a 2-unit-long painted segment and a 3-unit-long unpainted segment. The array [1,3,4,2] sets the pattern to a 1-unit painted segment, a 3-unit unpainted segment, a 4-unit painted segment, and a 2-unit unpainted segment.Pass an empty array to clear the dash pattern so that all stroke drawing in the context uses solid lines.\n\ntransform\n\nAn affine transform to apply to the path before dashing. Defaults to the CGAffineTransformIdentity transform if not specified.\n\nReturn Value\n\nA new path.\n\nDiscussion\n\nThe new path is created so that filling the new path draws the same pixels as stroking the original path with the specified dash parameters.\n\nSee Also\nCopying a Graphics Path\nfunc copy() -> CGPath?\nCreates an immutable copy of a graphics path.\nfunc copy(using: UnsafePointer<CGAffineTransform>?) -> CGPath?\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nfunc copy(strokingWithWidth: CGFloat, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: CGFloat, transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a solid stroke.\nfunc mutableCopy() -> CGMutablePath?\nCreates a mutable copy of an existing graphics path.\nfunc mutableCopy(using: UnsafePointer<CGAffineTransform>?) -> CGMutablePath?\nCreates a mutable copy of a graphics path transformed by a transformation matrix."
  },
  {
    "title": "copy(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411161-copy",
    "html": "Parameters\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to all elements of the new path.\n\nReturn Value\n\nA new, immutable copy of the path. You are responsible for releasing this object.\n\nSee Also\nCopying a Graphics Path\nfunc copy() -> CGPath?\nCreates an immutable copy of a graphics path.\nfunc copy(dashingWithPhase: CGFloat, lengths: [CGFloat], transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a dashed stroke.\nfunc copy(strokingWithWidth: CGFloat, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: CGFloat, transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a solid stroke.\nfunc mutableCopy() -> CGMutablePath?\nCreates a mutable copy of an existing graphics path.\nfunc mutableCopy(using: UnsafePointer<CGAffineTransform>?) -> CGMutablePath?\nCreates a mutable copy of a graphics path transformed by a transformation matrix."
  },
  {
    "title": "init(roundedRect:cornerWidth:cornerHeight:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411218-init",
    "html": "Parameters\nrect\n\nThe rectangle to add.\n\ncornerWidth\n\nThe width of the rounded corner sections.\n\ncornerHeight\n\nThe height of the rounded corner sections.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the rectangle before it is added to the path.\n\nReturn Value\n\nA new, immutable path. You are responsible for releasing this object.\n\nDiscussion\n\nThis is a convenience function that creates a path of an rounded rectangle. Using this convenience function is more efficient than creating a mutable path and adding an rectangle to it.\n\nEach corner of the rounded rectangle is one-quarter of an ellipse with axes equal to the cornerWidth and cornerHeight parameters. The rounded rectangle forms a complete subpath and is oriented in the clockwise direction.\n\nSee Also\nCreating Graphics Paths\ninit(rect: CGRect, transform: UnsafePointer<CGAffineTransform>?)\nCreate an immutable path of a rectangle.\ninit(ellipseIn: CGRect, transform: UnsafePointer<CGAffineTransform>?)\nCreate an immutable path of an ellipse."
  },
  {
    "title": "copy() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411211-copy",
    "html": "Parameters\npath\n\nThe path to copy.\n\nReturn Value\n\nA new, immutable copy of the specified path. You are responsible for releasing this object.\n\nSee Also\nCopying a Graphics Path\nfunc copy(using: UnsafePointer<CGAffineTransform>?) -> CGPath?\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nfunc copy(dashingWithPhase: CGFloat, lengths: [CGFloat], transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a dashed stroke.\nfunc copy(strokingWithWidth: CGFloat, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: CGFloat, transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a solid stroke.\nfunc mutableCopy() -> CGMutablePath?\nCreates a mutable copy of an existing graphics path.\nfunc mutableCopy(using: UnsafePointer<CGAffineTransform>?) -> CGMutablePath?\nCreates a mutable copy of a graphics path transformed by a transformation matrix."
  },
  {
    "title": "CGPostKeyboardEvent(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541792-cgpostkeyboardevent",
    "html": "Parameters\nkeyChar\n\nThe value of the character to generate, or 0 to specify that the system should guess an appropriate value based on the default key mapping.\n\nvirtualKey\n\nThe virtual key code for the event. See CGKeyCode.\n\nkeyDown\n\nPass true to specify that the key position is down; otherwise, pass false.\n\nReturn Value\n\nA result code. See the result codes described in Quartz Display Services.\n\nDiscussion\n\nThis function is not recommended for general use because of undocumented special cases and undesirable side effects. The recommended replacement for this function is init(keyboardEventSource:virtualKey:keyDown:), which allows you to create a keyboard event and customize the event before posting it to the event system."
  },
  {
    "title": "CGRectMakeWithDictionaryRepresentation(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456558-cgrectmakewithdictionaryrepresen",
    "html": "Parameters\ndict\n\nA dictionary that was previously returned from the function CGRectCreateDictionaryRepresentation(_:).\n\nrect\n\nOn return, the rectangle created from the specified dictionary.\n\nReturn Value\n\ntrue if successful; otherwise false.\n\nSee Also\nCreating a Geometric Primitive from a Dictionary Representation\nfunc CGPointMakeWithDictionaryRepresentation(CFDictionary, UnsafeMutablePointer<CGPoint>) -> Bool\nFills in a point using the contents of the specified dictionary.\nfunc CGSizeMakeWithDictionaryRepresentation(CFDictionary, UnsafeMutablePointer<CGSize>) -> Bool\nFills in a size using the contents of the specified dictionary."
  },
  {
    "title": "CGEnableEventStateCombining(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541787-cgenableeventstatecombining",
    "html": "Parameters\ndoCombineState\n\nPass true to specify that the actual key and mouse state are merged with the application-specified state in a synthetic event; otherwise, pass false.\n\nReturn Value\n\nA result code. See the result codes described in Quartz Display Services.\n\nDiscussion\n\nBy default, the flags that indicate modifier key state (Command, Option, Shift, Control, and so on) from the system's keyboard and from other event sources are ORed together as an event is posted into the system, and current key and mouse button state is considered in generating new events. This function allows your application to enable or disable the merging of event state. When combining is turned off, the event state propagated in the events posted by your application reflect state built up only by your application. The state within your application’s generated event will not be combined with the system's current state, so the system-wide state reflecting key and mouse button state will remain unchanged. When called with doCombineState equal to false, this function initializes local (per application) state tracking information to a state of all keys, modifiers, and mouse buttons up. When called with doCombineState equal to true, the current global state of keys, modifiers, and mouse buttons are used in generating events.\n\nThis function is not recommended for general use because of undocumented special cases and undesirable side effects. The recommended replacement for this function is to use Quartz events and Quartz event sources. This allows you to control exactly which, if any, external event sources will contribute to the state used to create an event."
  },
  {
    "title": "CGSetLocalEventsFilterDuringSuppressionState(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541776-cgsetlocaleventsfilterduringsupp",
    "html": "Parameters\nfilter\n\nThe class of local hardware events to enable after a synthetic event is posted. Pass one of the constants listed in CGEventFilterMask.\n\nstate\n\nThe type of interval during which the filter is applied. Pass one of the constants listed in CGEventSuppressionState.\n\nReturn Value\n\nA result code. See the result codes described in Quartz Display Services.\n\nDiscussion\n\nBy default, the system suppresses local hardware events from the keyboard and mouse during a short interval after a synthetic event is posted and during a synthetic mouse drag (mouse movement with the left or only mouse button down).\n\nSome applications may want to enable events from some of the local hardware. For example, if you post mouse events only, you may wish to permit local keyboard hardware events to pass through.\n\nThis function lets you specify a state (event suppression interval or mouse drag), and a mask of event categories to be passed through. The new filter state takes effect with the next synthetic event you post.\n\nThis function is not recommended for general use because of undocumented special cases and undesirable side effects. The recommended replacement for this function is setLocalEventsFilterDuringSuppressionState(_:state:), which allows the filter behavior to be associated only with events created from a specific event source."
  },
  {
    "title": "CGSetLocalEventsSuppressionInterval(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541800-cgsetlocaleventssuppressioninter",
    "html": "Parameters\nseconds\n\nThe desired time interval in seconds. The value should be a number in the range [0.0, 10.0].\n\nReturn Value\n\nA result code. If the seconds parameter is outside the allowed range, returns kCGErrorRangeCheck.\n\nDiscussion\n\nThis function determines how long local events matching an event filter are to be suppressed following the posting of a synthetic event. The default time interval for event suppression is 0.25 seconds.\n\nThis function is not recommended for general use because of undocumented special cases and undesirable side effects. The recommended replacement for this function is CGEventSourceSetLocalEventsSuppressionInterval(_:_:), which allows the suppression interval to be adjusted for a specific event source, affecting only events posted using that event source."
  },
  {
    "title": "CGScreenUnregisterMoveCallback(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541795-cgscreenunregistermovecallback",
    "html": "Deprecated\n\nUse display streaming instead. See Streaming the Contents of a Display.\n\nParameters\nfunction\n\nA pointer to the callback function to be unregistered.\n\nuserParameter\n\nA pointer to user-defined data, or NULL. You should pass the same value you used when you registered the callback function.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nWhen you call this function, the two arguments must match the registered entry to be removed."
  },
  {
    "title": "CGContextRelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1586509-cgcontextrelease",
    "html": "Parameters\nc\n\nThe graphics context to release.\n\nDiscussion\n\nThis function is equivalent to CFRelease, except it does not cause an error if c is NULL.\n\nSee Also\nManaging Graphics Contexts\nCGContextFlush\nForces all pending drawing operations in a window context to be rendered immediately to the destination device.\nCGContextGetTypeID\nReturns the type identifier for a graphics context.\nCGContextRetain\nIncrements the retain count of a graphics context.\nCGContextSynchronize\nMarks a window context for update."
  },
  {
    "title": "CGPathElementType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathelementtype",
    "html": "Overview\n\nFor more information about paths, see CGPath.\n\nTopics\nConstants\ncase moveToPoint\nThe path element that starts a new subpath. The element holds a single point for the destination. See the function moveTo(_:x:y:).\ncase addLineToPoint\nThe path element that adds a line from the current point to a new point. The element holds a single point for the destination. See the function addLineTo(_:x:y:).\ncase addQuadCurveToPoint\nThe path element that adds a quadratic curve from the current point to the specified point. The element holds a control point and a destination point. See the function addQuadCurve(_:cpx:cpy:endingAtX:y:).\ncase addCurveToPoint\nThe path element that adds a cubic curve from the current point to the specified point. The element holds two control points and a destination point. See the function addCurve(_:cp1x:cp1y:cp2x:cp2y:endingAtX:y:).\ncase closeSubpath\nThe path element that closes and completes a subpath. The element does not contain any points. See the function closeSubpath().\nRelationships\nConforms To\nSendable\nSee Also\nApplying a Function to the Elements of a Path\nfunc apply(info: UnsafeMutableRawPointer?, function: CGPathApplierFunction)\nFor each element in a graphics path, calls a custom applier function.\ntypealias CGPathApplierFunction\nDefines a callback function that can view an element in a graphics path.\nstruct CGPathElement\nA data structure that provides information about a path element."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411192-typeid",
    "html": "Return Value\n\nThe Core Foundation identifier for the opaque type CGPath."
  },
  {
    "title": "CGPathElement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathelement",
    "html": "Topics\nInitializers\ninit(type: CGPathElementType, points: UnsafeMutablePointer<CGPoint>)\nInstance Properties\nvar points: UnsafeMutablePointer<CGPoint>\nAn array of one or more points that serve as arguments.\nvar type: CGPathElementType\nAn element type (or operation).\nSee Also\nApplying a Function to the Elements of a Path\nfunc apply(info: UnsafeMutableRawPointer?, function: CGPathApplierFunction)\nFor each element in a graphics path, calls a custom applier function.\ntypealias CGPathApplierFunction\nDefines a callback function that can view an element in a graphics path.\nenum CGPathElementType\nThe type of element found in a path."
  },
  {
    "title": "init(info:callbacks:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverter/1454773-init",
    "html": "Parameters\ninfo\n\nA pointer to the data that will be passed to the callbacks.\n\ncallbacks\n\nA pointer to a PostScript converter callbacks structure that specifies the callbacks to be used during a conversion process.\n\noptions\n\nThis parameter should be NULL; it is reserved for future expansion of the API.\n\nReturn Value\n\nA new PostScript converter, or NULL if a converter could not be created. You are responsible for releasing this object.\n\nSee Also\nCGPSConverter Miscellaneous Functions\nfunc abort() -> Bool\nTells a PostScript converter to abort a conversion at the next available opportunity.\nfunc convert(CGDataProvider, consumer: CGDataConsumer, options: CFDictionary?) -> Bool\nUses a PostScript converter to convert PostScript data to PDF data.\nvar isConverting: Bool\nChecks whether the converter is currently converting data.\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for PostScript converters."
  },
  {
    "title": "init(rect:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411155-init",
    "html": "Parameters\nrect\n\nThe rectangle to add.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the rectangle before it is added to the path.\n\nReturn Value\n\nA new, immutable path. You are responsible for releasing this object.\n\nDiscussion\n\nThis is a convenience function that creates a path of an rectangle. Using this convenience function is more efficient than creating a mutable path and adding an rectangle to it.\n\nCalling this function is equivalent to using CGRectGetMinX(_:) and related functions to find the corners of the rectangle, then using the moveTo(_:x:y:), addLineTo(_:x:y:), and closeSubpath() functions to draw the rectangle.\n\nSee Also\nCreating Graphics Paths\ninit(ellipseIn: CGRect, transform: UnsafePointer<CGAffineTransform>?)\nCreate an immutable path of an ellipse.\ninit(roundedRect: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: UnsafePointer<CGAffineTransform>?)\nCreate an immutable path of a rounded rectangle."
  },
  {
    "title": "init(ellipseIn:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411177-init",
    "html": "Parameters\nrect\n\nThe rectangle that bounds the ellipse.\n\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to the ellipse before it is added to the path.\n\nReturn Value\n\nA new, immutable path. You are responsible for releasing this object.\n\nDiscussion\n\nThis is a convenience function that creates a path of an ellipse. Using this convenience function is more efficient than creating a mutable path and adding an ellipse to it.\n\nThe ellipse is approximated by a sequence of Bézier curves. Its center is the midpoint of the rectangle defined by the rect parameter. If the rectangle is square, then the ellipse is circular with a radius equal to one-half the width (or height) of the rectangle. If the rect parameter specifies a rectangular shape, then the major and minor axes of the ellipse are defined by the width and height of the rectangle.\n\nThe ellipse forms a complete subpath of the path—that is, the ellipse drawing starts with a move-to operation and ends with a close-subpath operation, with all moves oriented in the clockwise direction. If you supply an affine transform, then the constructed Bézier curves that define the ellipse are transformed before they are added to the path.\n\nSee Also\nCreating Graphics Paths\ninit(rect: CGRect, transform: UnsafePointer<CGAffineTransform>?)\nCreate an immutable path of a rectangle.\ninit(roundedRect: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: UnsafePointer<CGAffineTransform>?)\nCreate an immutable path of a rounded rectangle."
  },
  {
    "title": "init(src:dst:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorconversioninfo/2113677-init",
    "html": "Parameters\nsrc\n\nThe source color space from which color values are to be converted.\n\ndst\n\nThe destination color space to which colors are to be converted.\n\nReturn Value\n\nA color conversion object, or nil if no conversion between the specified color spaces is allowed.\n\nDiscussion\n\nThe source and destination color spaces must be calibrated color spaces (that is, not device-specific or indexed color spaces).\n\nYou can use a color conversion object to create MPSImageConversion filters that perform GPU-accelerated color space conversion.\n\nSee Also\nCreating a Color Conversion\nenum CGColorConversionInfoTransformType\nConstants describing how a color conversion uses color spaces."
  },
  {
    "title": "CGRectMake(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455245-cgrectmake",
    "html": "Parameters\nx\n\nThe x-coordinate of the rectangle’s origin point.\n\ny\n\nThe y-coordinate of the rectangle’s origin point.\n\nwidth\n\nThe width of the rectangle.\n\nheight\n\nThe height of the rectangle.\n\nReturn Value\n\nA rectangle with the specified location and dimensions.\n\nSee Also\nCreating a Geometric Primitive from Values\nfunc CGPointMake(CGFloat, CGFloat) -> CGPoint\nReturns a point with the specified coordinates.\nfunc CGSizeMake(CGFloat, CGFloat) -> CGSize\nReturns a size with the specified dimension values.\nfunc CGVectorMake(CGFloat, CGFloat) -> CGVector\nReturns a vector with the specified dimension values."
  },
  {
    "title": "CGPointMakeWithDictionaryRepresentation(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455338-cgpointmakewithdictionaryreprese",
    "html": "Parameters\ndict\n\nA dictionary that was previously returned from the function CGPointCreateDictionaryRepresentation(_:).\n\npoint\n\nOn return, the point created from the provided dictionary.\n\nReturn Value\n\ntrue if successful; otherwise false.\n\nSee Also\nCreating a Geometric Primitive from a Dictionary Representation\nfunc CGSizeMakeWithDictionaryRepresentation(CFDictionary, UnsafeMutablePointer<CGSize>) -> Bool\nFills in a size using the contents of the specified dictionary.\nfunc CGRectMakeWithDictionaryRepresentation(CFDictionary, UnsafeMutablePointer<CGRect>) -> Bool\nFills in a rectangle using the contents of the specified dictionary."
  },
  {
    "title": "CGPointMake(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455746-cgpointmake",
    "html": "Parameters\nx\n\nThe x-coordinate of the point to construct.\n\ny\n\nThe y-coordinate of the point to construct.\n\nReturn Value\n\nA point.\n\nSee Also\nCreating a Geometric Primitive from Values\nfunc CGRectMake(CGFloat, CGFloat, CGFloat, CGFloat) -> CGRect\nReturns a rectangle with the specified coordinate and size values.\nfunc CGSizeMake(CGFloat, CGFloat) -> CGSize\nReturns a size with the specified dimension values.\nfunc CGVectorMake(CGFloat, CGFloat) -> CGVector\nReturns a vector with the specified dimension values."
  },
  {
    "title": "CGAffineTransformMake(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455865-cgaffinetransformmake",
    "html": "Parameters\na\n\nThe value at position [1,1] in the matrix.\n\nb\n\nThe value at position [1,2] in the matrix.\n\nc\n\nThe value at position [2,1] in the matrix.\n\nd\n\nThe value at position [2,2] in the matrix.\n\ntx\n\nThe value at position [3,1] in the matrix.\n\nty\n\nThe value at position [3,2] in the matrix.\n\nReturn Value\n\nA new affine transform matrix constructed from the values you specify.\n\nDiscussion\n\nThis function creates a CGAffineTransform structure that represents a new affine transformation matrix, which you can use (and reuse, if you want) to transform a coordinate system. The matrix takes the following form:\n\nBecause the third column is always (0,0,1), the CGAffineTransform data structure returned by this function contains values for only the first two columns.\n\nIf you want only to transform an object to be drawn, it is not necessary to construct an affine transform to do so. The most direct way to transform your drawing is by calling the appropriate CGContext function to adjust the current transformation matrix. For a list of functions, see CGContext.\n\nSee Also\nCreating an Affine Transformation Matrix\ninit(rotationAngle: CGFloat)\nReturns an affine transformation matrix constructed from a rotation value you provide.\ninit(scaleX: CGFloat, y: CGFloat)\nReturns an affine transformation matrix constructed from scaling values you provide.\ninit(translationX: CGFloat, y: CGFloat)\nReturns an affine transformation matrix constructed from translation values you provide."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorconversioninfo/2113681-typeid",
    "html": "Return Value\n\nThe Core Foundation type identifier for CGColorConversionInfo."
  },
  {
    "title": "CGWaitForScreenRefreshRects(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541809-cgwaitforscreenrefreshrects",
    "html": "Deprecated\n\nUse display streaming instead. See Streaming the Contents of a Display.\n\nParameters\npRectArray\n\nA pointer to a CGRect* variable. On return, the variable contains an array of rectangles that bound the refreshed areas, specified in the global display coordinate space. When you no longer need the array, you should deallocate it by calling CGReleaseScreenRefreshRects(_:).\n\npCount\n\nA pointer to a CGRectCount variable. On return, the variable contains the number of entries in the returned array of rectangles.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nIn some applications it may be preferable to wait for screen-refresh data synchronously, using this function. You should call this function in a thread other than the main event-processing thread.\n\nAs an alternative, Quartz also supports asynchronous notification—see CGRegisterScreenRefreshCallback(_:_:). If refresh callback functions are registered, this function should not be used."
  },
  {
    "title": "CGSizeMakeWithDictionaryRepresentation(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454318-cgsizemakewithdictionaryrepresen",
    "html": "Parameters\ndict\n\nA dictionary that was previously returned from the function CGSizeCreateDictionaryRepresentation(_:).\n\nsize\n\nOn return, the size created from the specified dictionary.\n\nReturn Value\n\ntrue if successful; otherwise false.\n\nSee Also\nCreating a Geometric Primitive from a Dictionary Representation\nfunc CGPointMakeWithDictionaryRepresentation(CFDictionary, UnsafeMutablePointer<CGPoint>) -> Bool\nFills in a point using the contents of the specified dictionary.\nfunc CGRectMakeWithDictionaryRepresentation(CFDictionary, UnsafeMutablePointer<CGRect>) -> Bool\nFills in a rectangle using the contents of the specified dictionary."
  },
  {
    "title": "CGWaitForScreenUpdateRects(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541790-cgwaitforscreenupdaterects",
    "html": "Deprecated\n\nUse display streaming instead. See Streaming the Contents of a Display.\n\nParameters\nrequestedOperations\n\nThe desired types of screen update operations. There are several possible choices:\n\nSpecify kCGScreenUpdateOperationRefresh if you want all move operations to be returned as refresh operations.\n\nSpecify (kCGScreenUpdateOperationRefresh | kCGScreenUpdateOperationMove) if you want to distinguish between move and refresh operations.\n\nAdd kCGScreenUpdateOperationReducedDirtyRectangleCount to the screen operations if you want to minimize the number of rectangles returned to represent changed areas of the display.\n\ncurrentOperation\n\nA pointer to a CGScreenUpdateOperation variable. On return, the variable indicates the type of update operation (refresh or move).\n\npRectArray\n\nA pointer to a CGRect* variable. On return, the variable contains an array of rectangles that bound the updated areas, specified in the global display coordinate space. When you no longer need the array, you should deallocate it by calling CGReleaseScreenRefreshRects(_:).\n\npCount\n\nA pointer to a size_t variable. On return, the variable contains the number of entries in the returned array of rectangles.\n\npDelta\n\nA pointer to a CGScreenUpdateMoveDelta variable. On return, if the value of the currentOperation parameter is kCGScreenUpdateOperationMove, the variable contains the distance moved.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nIn some applications it may be preferable to wait for screen-update data synchronously, using this function. You should call this function in a thread other than the main event-processing thread.\n\nAs an alternative, Quartz also supports asynchronous notification—see CGRegisterScreenRefreshCallback(_:_:) and CGScreenRegisterMoveCallback(_:_:). If refresh or move callback functions are registered, this function should not be used.\n\nSpecial Considerations\n\nThis function is implemented in macOS 10.4.3 and later."
  },
  {
    "title": "CGUnregisterScreenRefreshCallback(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541807-cgunregisterscreenrefreshcallbac",
    "html": "Deprecated\n\nUse display streaming instead. See Streaming the Contents of a Display.\n\nParameters\nfunction\n\nA pointer to the callback function to be unregistered.\n\nuserParameter\n\nA pointer to user-defined data, or NULL. You should pass the same value you used when you registered the callback function.\n\nDiscussion\n\nWhen you call this function, the two arguments must match the registered entry to be removed."
  },
  {
    "title": "CGVectorMake(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454811-cgvectormake",
    "html": "Parameters\ndx\n\nThe x-coordinate of the vector to construct.\n\ndy\n\nThe y-coordinate of the vector to construct.\n\nReturn Value\n\nReturns a CGVector structure with the specified coordinates.\n\nSee Also\nCreating a Geometric Primitive from Values\nfunc CGPointMake(CGFloat, CGFloat) -> CGPoint\nReturns a point with the specified coordinates.\nfunc CGRectMake(CGFloat, CGFloat, CGFloat, CGFloat) -> CGRect\nReturns a rectangle with the specified coordinate and size values.\nfunc CGSizeMake(CGFloat, CGFloat) -> CGSize\nReturns a size with the specified dimension values."
  },
  {
    "title": "CGSizeMake(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455082-cgsizemake",
    "html": "Parameters\nwidth\n\nA width value.\n\nheight\n\nA height value.\n\nReturn Value\n\nReturns a CGSize structure with the specified width and height.\n\nSee Also\nCreating a Geometric Primitive from Values\nfunc CGPointMake(CGFloat, CGFloat) -> CGPoint\nReturns a point with the specified coordinates.\nfunc CGRectMake(CGFloat, CGFloat, CGFloat, CGFloat) -> CGRect\nReturns a rectangle with the specified coordinate and size values.\nfunc CGVectorMake(CGFloat, CGFloat) -> CGVector\nReturns a vector with the specified dimension values."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverter/1454188-typeid",
    "html": "Return Value\n\nThe Core Foundation identifier for the opaque type CGPSConverter.\n\nSee Also\nCGPSConverter Miscellaneous Functions\nfunc abort() -> Bool\nTells a PostScript converter to abort a conversion at the next available opportunity.\ninit?(info: UnsafeMutableRawPointer?, callbacks: UnsafePointer<CGPSConverterCallbacks>, options: CFDictionary?)\nCreates a new PostScript converter.\nfunc convert(CGDataProvider, consumer: CGDataConsumer, options: CFDictionary?) -> Bool\nUses a PostScript converter to convert PostScript data to PDF data.\nvar isConverting: Bool\nChecks whether the converter is currently converting data."
  },
  {
    "title": "abort() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverter/1455046-abort",
    "html": "Parameters\nconverter\n\nA PostScript converter.\n\nReturn Value\n\nA Boolean value that indicates whether the converter is currently converting data (true if it is).\n\nSee Also\nCGPSConverter Miscellaneous Functions\ninit?(info: UnsafeMutableRawPointer?, callbacks: UnsafePointer<CGPSConverterCallbacks>, options: CFDictionary?)\nCreates a new PostScript converter.\nfunc convert(CGDataProvider, consumer: CGDataConsumer, options: CFDictionary?) -> Bool\nUses a PostScript converter to convert PostScript data to PDF data.\nvar isConverting: Bool\nChecks whether the converter is currently converting data.\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for PostScript converters."
  },
  {
    "title": "convert(_:consumer:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverter/1455368-convert",
    "html": "Parameters\nprovider\n\nA Quartz data provider that supplies PostScript data.\n\nconsumer\n\nA Quartz data provider that will receive the resulting PDF data.\n\noptions\n\nThis parameter should be NULL; it is reserved for future expansion of the API.\n\nReturn Value\n\nA Boolean value that indicates whether the PostScript conversion completed successfully (true if it did).\n\nDiscussion\n\nThe conversion is thread safe, however it is not possible to have more than one conversion job in process within a given address space or process. If a given thread is running a conversion and another thread starts a new conversion, the second conversion will block until the first conversion is complete.\n\nImportant\n\nAlthough CGPSConverterConvert is thread safe (it uses locks to prevent more than one conversion at a time in the same process), it is not thread safe with respect to the Resource Manager. If your application uses the Resource Manager on a separate thread, you should either use locks to prevent CGPSConverterConvert from executing during your usage of the Resource Manager or you should perform your conversions using the Post Script converter in a separate process.\n\nIn general, you can avoid this issue by using nib files instead of Resource Manager resources.\n\nSee Also\nCGPSConverter Miscellaneous Functions\nfunc abort() -> Bool\nTells a PostScript converter to abort a conversion at the next available opportunity.\ninit?(info: UnsafeMutableRawPointer?, callbacks: UnsafePointer<CGPSConverterCallbacks>, options: CFDictionary?)\nCreates a new PostScript converter.\nvar isConverting: Bool\nChecks whether the converter is currently converting data.\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for PostScript converters."
  },
  {
    "title": "CGReleaseScreenRefreshRects(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541780-cgreleasescreenrefreshrects",
    "html": "Deprecated\n\nThere is no replacement.\n\nParameters\nrectArray\n\nA list of rectangles obtained by calling CGWaitForScreenRefreshRects(_:_:) or CGWaitForScreenUpdateRects(_:_:_:_:_:)."
  },
  {
    "title": "CGScreenRegisterMoveCallback(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541791-cgscreenregistermovecallback",
    "html": "Deprecated\n\nUse display streaming instead. See Streaming the Contents of a Display.\n\nParameters\nfunction\n\nA pointer to the callback function to be registered.\n\nuserParameter\n\nA pointer to user-defined data, or NULL. The userParameter argument is passed back to the callback function each time it’s invoked.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nA callback function may be registered multiple times with different user-defined data pointers, resulting in multiple registration entries. For each registration, when notification is no longer needed, you should remove the registration by calling the function CGScreenUnregisterMoveCallback(_:_:).\n\nThe callback function you register is invoked only if your application has an active event loop. The callback is invoked in the same thread of execution that is processing events within your application.\n\nSpecial Considerations\n\nThis function is implemented in macOS 10.4.3 and later."
  },
  {
    "title": "CGImageByteOrderInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimagebyteorderinfo",
    "html": "Topics\nEnumeration Cases\ncase order16Big\ncase order16Little\ncase order32Big\ncase order32Little\ncase orderMask\ncase orderDefault\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGPathFillRule.evenOdd | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathfillrule/evenodd",
    "html": "Discussion\n\nThis rule plots a ray from any region to be evaluated toward the bounds of the drawing, then counts the closed path elements that the ray crosses. The rule defines interior regions as those where the sum of crossings is an odd number, and exterior regions as those where the sum of crossings is an even number."
  },
  {
    "title": "CGTextEncoding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgtextencoding",
    "html": "Overview\n\nFor more information on setting the font in a graphics context, see selectFont(name:size:textEncoding:).\n\nTopics\nConstants\ncase encodingFontSpecific\nThe built-in encoding of the font.\ncase encodingMacRoman\nThe MacRoman encoding. MacRoman is an ASCII variant originally created for use in the Mac OS, in which characters 127 and lower are ASCII, and characters 128 and higher are non-English characters and symbols.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGPSConverterMessageCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconvertermessagecallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(info:callbacks:options:).\n\nmessage\n\nA string containing the message from the PostScript conversion process.\n\nDiscussion\n\nThere are several kinds of message that might be sent during a conversion process. The most likely are font substitution messages, and any messages that the PostScript code itself generates. Any PostScript messages written to stdout are routed through this callback—typically these are debugging or status messages and, although uncommon, can be useful in debugging. In addition, there may be error messages if the document is malformed.\n\nSee Also\nCallbacks\ntypealias CGPSConverterBeginDocumentCallback\nPerforms custom tasks at the beginning of a PostScript conversion process.\ntypealias CGPSConverterEndDocumentCallback\nPerforms custom tasks at the end of a PostScript conversion process.\ntypealias CGPSConverterBeginPageCallback\nPerforms custom tasks at the beginning of each page in a PostScript conversion process.\ntypealias CGPSConverterEndPageCallback\nPerforms custom tasks at the end of each page of a PostScript conversion process.\ntypealias CGPSConverterProgressCallback\nReports progress periodically during a PostScript conversion process.\ntypealias CGPSConverterReleaseInfoCallback\nPerforms custom tasks when a PostScript converter is released."
  },
  {
    "title": "CGGlyphDeprecatedEnum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgglyphdeprecatedenum",
    "html": "Topics\nEnumeration Cases\ncase max\nMaximum font index value.\nDeprecated\ncase min\nMinimum font index value.\nDeprecated\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGPathFillRule.winding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathfillrule/winding",
    "html": "Discussion\n\nThis rule plots a ray from any region to be evaluated toward the bounds of the drawing, then counts the closed path elements that the ray crosses: +1 for counterclockwise paths, -1 for clockwise. The rule defines interior regions as those where the sum of crossings is nonzero, and exterior regions as those where the sum of crossings is zero.\n\nfillPath(using:)clip(using:)"
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathfillrule/3236641-rawvalue",
    "html": "Relationships\nFrom Protocol\nRawRepresentable"
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathfillrule/2943698",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathfillrule/3236640-init",
    "html": "Relationships\nFrom Protocol\nRawRepresentable"
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystream/1454784-typeid",
    "html": "Return Value\n\nThe type identifier of the CGDisplayStream opaque type.\n\nSee Also\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGScreenUpdateMoveCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgscreenupdatemovecallback",
    "html": "Parameters\ndelta\n\nThe distance, in pixel unites, that the display area has moved.\n\ncount\n\nThe number of rectangles in the rectArray parameter.\n\nrectArray\n\nA list of the rectangles in the moved areas, specified in the global display coordinate space. The origin is the upper-left corner of the main display. The rectangles describe the area prior to the move operation. You should not modify or deallocate memory pointed to by rectArray.\n\nuserParameter\n\nThe user data you specify when you register this callback.\n\nDiscussion\n\nTo register a screen-move callback function, you call the function CGScreenRegisterMoveCallback(_:_:). Quartz invokes your callback function when operations such as window movement or scrolling occur on local displays. When you finish using a callback registration, you should call the function CGScreenUnregisterMoveCallback(_:_:) to remove it.\n\nNote that a single rectangle may occupy multiple displays, either by overlapping the displays or by residing on coincident displays when mirroring is active. You can use the function CGGetDisplaysWithRect(_:_:_:_:) to determine the displays a rectangle occupies.\n\nSee Also\nCallbacks\ntypealias CGDisplayReconfigurationCallBack\nA client-supplied callback function that’s invoked whenever the configuration of a local display is changed.\ntypealias CGScreenRefreshCallback\nA client-supplied callback function that’s invoked when an area of the display is modified or refreshed."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamupdate/1454989-typeid",
    "html": "Return Value\n\nThe type identifier of the CGDisplayStreamUpdate opaque type.\n\nSee Also\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated"
  },
  {
    "title": "start() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystream/1454870-start",
    "html": "Parameters\ndisplayStream\n\nThe display stream that should start streaming data.\n\nReturn Value\n\nkCGErrorSuccess if the stream started, otherwise an appropriate error code.\n\nSee Also\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGSessionCopyCurrentDictionary() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454780-cgsessioncopycurrentdictionary",
    "html": "Return Value\n\nA window server session dictionary, or NULL if the caller is not running within a Quartz GUI session or the window server is disabled. You should release the dictionary when you are finished using it. For information about the key-value pairs in this dictionary, see Window Server Session Properties.\n\nSee Also\nGetting Window Server Information\nfunc CGWindowServerCFMachPort() -> CFMachPort?\nReturns a Core Foundation Mach port (CFMachPort) that corresponds to the macOS window server.\nDeprecated\nfunc CGWindowLevelForKey(CGWindowLevelKey) -> CGWindowLevel\nReturns the window level that corresponds to one of the standard window types."
  },
  {
    "title": "getRects(_:rectCount:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamupdate/1455530-getrects",
    "html": "Parameters\nupdateRef\n\nA CGDisplayStreamUpdate reference for a frame update.\n\nrectType\n\nThe rectangles you are interested in. See CGDisplayStreamUpdateRectType.\n\nrectCount\n\nA pointer to a size_t. This value must not be NULL. On return, this location is updated to contain the number of rectangles in the returned array.\n\nReturn Value\n\nAn array of CGRect structures.\n\nDiscussion\n\nDo not free the array. It is managed automatically by the update and disposed of when the update object is destroyed.\n\nSee Also\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGPSConverterBeginPageCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverterbeginpagecallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(info:callbacks:options:).\n\npageNumber\n\nThe current page number. Page numbers start at 1.\n\npageInfo\n\nA dictionary that contains contextual information about the page. This parameter is reserved for future API expansion, and is currently unused.\n\nSee Also\nCallbacks\ntypealias CGPSConverterBeginDocumentCallback\nPerforms custom tasks at the beginning of a PostScript conversion process.\ntypealias CGPSConverterEndDocumentCallback\nPerforms custom tasks at the end of a PostScript conversion process.\ntypealias CGPSConverterEndPageCallback\nPerforms custom tasks at the end of each page of a PostScript conversion process.\ntypealias CGPSConverterProgressCallback\nReports progress periodically during a PostScript conversion process.\ntypealias CGPSConverterMessageCallback\nPasses messages generated during a PostScript conversion process.\ntypealias CGPSConverterReleaseInfoCallback\nPerforms custom tasks when a PostScript converter is released."
  },
  {
    "title": "CGPSConverterEndPageCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverterendpagecallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(info:callbacks:options:).\n\npageNumber\n\nThe current page number. Page numbers start at 1.\n\npageInfo\n\nA dictionary that contains contextual information about the page. This parameter is reserved for future API expansion, and is currently unused.\n\nSee Also\nCallbacks\ntypealias CGPSConverterBeginDocumentCallback\nPerforms custom tasks at the beginning of a PostScript conversion process.\ntypealias CGPSConverterEndDocumentCallback\nPerforms custom tasks at the end of a PostScript conversion process.\ntypealias CGPSConverterBeginPageCallback\nPerforms custom tasks at the beginning of each page in a PostScript conversion process.\ntypealias CGPSConverterProgressCallback\nReports progress periodically during a PostScript conversion process.\ntypealias CGPSConverterMessageCallback\nPasses messages generated during a PostScript conversion process.\ntypealias CGPSConverterReleaseInfoCallback\nPerforms custom tasks when a PostScript converter is released."
  },
  {
    "title": "CGPSConverterReleaseInfoCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverterreleaseinfocallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(info:callbacks:options:).\n\nSee Also\nCallbacks\ntypealias CGPSConverterBeginDocumentCallback\nPerforms custom tasks at the beginning of a PostScript conversion process.\ntypealias CGPSConverterEndDocumentCallback\nPerforms custom tasks at the end of a PostScript conversion process.\ntypealias CGPSConverterBeginPageCallback\nPerforms custom tasks at the beginning of each page in a PostScript conversion process.\ntypealias CGPSConverterEndPageCallback\nPerforms custom tasks at the end of each page of a PostScript conversion process.\ntypealias CGPSConverterProgressCallback\nReports progress periodically during a PostScript conversion process.\ntypealias CGPSConverterMessageCallback\nPasses messages generated during a PostScript conversion process."
  },
  {
    "title": "kCGWindowBackingLocationVideoMemory | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowbackinglocationvideomemory",
    "html": "Discussion\n\nThe key that identifies whether the window’s backing store is located in video memory. The value for this key is a CFBoolean type."
  },
  {
    "title": "kCGDisplayFadeReservationInvalidToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgdisplayfadereservationinvalidtoken",
    "html": "Discussion\n\nAn invalid fade reservation token. For general information about fade reservation tokens, see the data type CGDisplayFadeReservationToken."
  },
  {
    "title": "CGDisplayStreamFrameStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamframestatus",
    "html": "Topics\nConstants\ncase frameComplete\nA new frame was generated.\ncase frameIdle\nA new frame was not generated because the display did not change.\ncase frameBlank\nA new frame was not generated because the display has gone blank.\ncase stopped\nThe display stream was stopped.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGWindowLevelKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevelkey",
    "html": "Topics\nConstants\ncase baseWindow\ncase minimumWindow\ncase desktopWindow\ncase backstopMenu\ncase normalWindow\ncase floatingWindow\ncase tornOffMenuWindow\ncase dockWindow\ncase mainMenuWindow\ncase statusWindow\ncase modalPanelWindow\ncase popUpMenuWindow\ncase draggingWindow\ncase screenSaverWindow\ncase maximumWindow\ncase overlayWindow\ncase helpWindow\ncase utilityWindow\ncase desktopIconWindow\ncase cursorWindow\ncase assistiveTechHighWindow\ncase numberOfWindowLevelKeys\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGImagePixelFormatInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimagepixelformatinfo",
    "html": "Topics\nEnumeration Cases\ncase RGB101010\ncase RGB555\ncase RGB565\ncase RGBCIF10\ncase mask\ncase packed\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGGesturePhase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggesturephase",
    "html": "Topics\nEnumeration Cases\ncase began\ncase cancelled\ncase changed\ncase ended\ncase mayBegin\ncase none\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGScrollPhase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgscrollphase",
    "html": "Topics\nEnumeration Cases\ncase began\ncase cancelled\ncase changed\ncase ended\ncase mayBegin\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGLineCap | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cglinecap",
    "html": "Overview\n\nA line cap specifies the method used by strokePath() to draw the endpoint of the line. To change the line cap style in a graphics context, you use the function setLineCap(_:).\n\nTopics\nConstants\ncase butt\nA line with a squared-off end. Core Graphics draws the line to extend only to the exact endpoint of the path. This is the default.\ncase round\nA line with a rounded end. Core Graphics draws the line to extend beyond the endpoint of the path. The line ends with a semicircular arc with a radius of 1/2 the line’s width, centered on the endpoint.\ncase square\nA line with a squared-off end. Core Graphics extends the line beyond the endpoint of the path for a distance equal to half the line width.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGMomentumScrollPhase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmomentumscrollphase",
    "html": "Topics\nEnumeration Cases\ncase begin\ncase continuous\ncase end\ncase none\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGDisplayCopyColorSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454190-cgdisplaycopycolorspace",
    "html": "Parameters\ndisplay\n\nThe identifier of the display whose color space you want to obtain.\n\nReturn Value\n\nThe current color space for the specified display. The caller is responsible for releasing the color space with the CGColorSpaceRelease function.\n\nDiscussion\n\nThis function returns a display-dependent ICC-based color space. You can use this function when rendering content for a specific display in order to produce color-matched output for that display.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgerror",
    "html": "Topics\nEnumeration Cases\ncase cannotComplete\nThe requested operation is inappropriate for the parameters passed in, or the current system state.\ncase failure\nA general failure occurred.\ncase illegalArgument\nOne or more of the parameters passed to a function are invalid. Check for NULL pointers.\ncase invalidConnection\nThe parameter representing a connection to the window server is invalid.\ncase invalidContext\nThe CPSProcessSerNum or context identifier parameter is not valid.\ncase invalidOperation\nThe requested operation is not valid for the parameters passed in, or the current system state.\ncase noneAvailable\nThe requested operation could not be completed as the indicated resources were not found.\ncase notImplemented\nReturn value from obsolete function stubs present for binary compatibility, but not typically called.\ncase rangeCheck\nA parameter passed in has a value that is inappropriate, or which does not map to a useful operation or value.\ncase success\nThe requested operation was completed successfully.\ncase typeCheck\nA data type or token was encountered that did not match the expected type or token.\nRelationships\nConforms To\nSendable\nSee Also\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "kCGNullWindowID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgnullwindowid",
    "html": "Discussion\n\nA guaranteed invalid window ID."
  },
  {
    "title": "CGColorConversionInfoTransformType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorconversioninfotransformtype",
    "html": "Topics\nEnumeration Cases\ncase transformApplySpace\nSpecifies a color conversion between one color profile and another.\ncase transformFromSpace\nSpecifies a color conversion from a device color space to a color profile.\ncase transformToSpace\nSpecifies a color conversion from a color profile to a device color space.\nRelationships\nConforms To\nSendable\nSee Also\nCreating a Color Conversion\ninit?(src: CGColorSpace, dst: CGColorSpace)\nCreates a conversion between two specified color spaces."
  },
  {
    "title": "Display Fade Constants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/display_fade_constants",
    "html": "Topics\nConstants\nvar kCGDisplayFadeReservationInvalidToken: Int32"
  },
  {
    "title": "CGPSConverterEndDocumentCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverterenddocumentcallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(info:callbacks:options:).\n\nsuccess\n\nA Boolean value that indicates whether the PostScript conversion completed successfully (true if it did).\n\nSee Also\nCallbacks\ntypealias CGPSConverterBeginDocumentCallback\nPerforms custom tasks at the beginning of a PostScript conversion process.\ntypealias CGPSConverterBeginPageCallback\nPerforms custom tasks at the beginning of each page in a PostScript conversion process.\ntypealias CGPSConverterEndPageCallback\nPerforms custom tasks at the end of each page of a PostScript conversion process.\ntypealias CGPSConverterProgressCallback\nReports progress periodically during a PostScript conversion process.\ntypealias CGPSConverterMessageCallback\nPasses messages generated during a PostScript conversion process.\ntypealias CGPSConverterReleaseInfoCallback\nPerforms custom tasks when a PostScript converter is released."
  },
  {
    "title": "CGPDFTagProperty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdftagproperty",
    "html": "Topics\nInitializers\ninit(rawValue: CFString)\nType Properties\nstatic let actualText: CGPDFTagProperty\nstatic let alternativeText: CGPDFTagProperty\nstatic let languageText: CGPDFTagProperty\nstatic let titleText: CGPDFTagProperty\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "CGPSConverterBeginDocumentCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverterbegindocumentcallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(info:callbacks:options:).\n\nSee Also\nCallbacks\ntypealias CGPSConverterEndDocumentCallback\nPerforms custom tasks at the end of a PostScript conversion process.\ntypealias CGPSConverterBeginPageCallback\nPerforms custom tasks at the beginning of each page in a PostScript conversion process.\ntypealias CGPSConverterEndPageCallback\nPerforms custom tasks at the end of each page of a PostScript conversion process.\ntypealias CGPSConverterProgressCallback\nReports progress periodically during a PostScript conversion process.\ntypealias CGPSConverterMessageCallback\nPasses messages generated during a PostScript conversion process.\ntypealias CGPSConverterReleaseInfoCallback\nPerforms custom tasks when a PostScript converter is released."
  },
  {
    "title": "CGPSConverterProgressCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverterprogresscallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(info:callbacks:options:).\n\nSee Also\nCallbacks\ntypealias CGPSConverterBeginDocumentCallback\nPerforms custom tasks at the beginning of a PostScript conversion process.\ntypealias CGPSConverterEndDocumentCallback\nPerforms custom tasks at the end of a PostScript conversion process.\ntypealias CGPSConverterBeginPageCallback\nPerforms custom tasks at the beginning of each page in a PostScript conversion process.\ntypealias CGPSConverterEndPageCallback\nPerforms custom tasks at the end of each page of a PostScript conversion process.\ntypealias CGPSConverterMessageCallback\nPasses messages generated during a PostScript conversion process.\ntypealias CGPSConverterReleaseInfoCallback\nPerforms custom tasks when a PostScript converter is released."
  },
  {
    "title": "CGOpenGLDisplayMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgopengldisplaymask",
    "html": "Discussion\n\nIn macOS, OpenGL can provide information about the capabilities of the hardware renderers driving a specified set of displays. A 32-bit mask is used to specify the displays—each bit in the mask represents a single display.\n\nTo learn how to find the mask bit that corresponds to a given display, see the function CGDisplayIDToOpenGLDisplayMask(_:)."
  },
  {
    "title": "CGGetLastMouseDelta() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/2437197-cggetlastmousedelta",
    "html": "Return Value\n\nA tuple whose x and y members represent the horizontal and vertical change in the mouse position since the last mouse movement event.\n\nDiscussion\n\nThis function is not recommended for general use. Instead, you should use the mouse-tracking functions provided by the NSEvent class.\n\nSee Also\nControlling the Mouse Cursor\nfunc CGDisplayHideCursor(CGDirectDisplayID) -> CGError\nHides the mouse cursor, and increments the hide cursor count.\nfunc CGDisplayShowCursor(CGDirectDisplayID) -> CGError\nDecrements the hide cursor count, and shows the mouse cursor if the count is 0.\nfunc CGDisplayMoveCursorToPoint(CGDirectDisplayID, CGPoint) -> CGError\nMoves the mouse cursor to a specified point relative to the upper-left corner of the display.\nfunc CGCursorIsVisible() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is visible.\nDeprecated\nfunc CGCursorIsDrawnInFramebuffer() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is drawn in framebuffer memory.\nDeprecated\nfunc CGAssociateMouseAndMouseCursorPosition(boolean_t) -> CGError\nConnects or disconnects the mouse and cursor while an application is in the foreground.\nfunc CGWarpMouseCursorPosition(CGPoint) -> CGError\nMoves the mouse cursor without generating events."
  },
  {
    "title": "kCGWindowNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindownumber",
    "html": "Discussion\n\nThe value for this key is a CFNumber type (encoded as kCGWindowIDCFNumberType) that contains the window ID. The window ID is unique within the current user session."
  },
  {
    "title": "kCGWindowName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowname",
    "html": "Discussion\n\nThe key that identifies the name of the window, as configured in Quartz. The value for this key is a CFString type. (Note that few applications set the Quartz window name.)"
  },
  {
    "title": "kCGWindowIsOnscreen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowisonscreen",
    "html": "Discussion\n\nThe key that identifies whether the window is currently onscreen. The value for this key is a CFBoolean type."
  },
  {
    "title": "kCGWindowMemoryUsage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowmemoryusage",
    "html": "Discussion\n\nThe value for this key is a CFNumber type (encoded as CFNumberType.longLongType) that contains an estimate of the amount of memory (measured in bytes) used by the window and its supporting data structures."
  },
  {
    "title": "kCGWindowLayer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowlayer",
    "html": "Discussion\n\nThe value for this key is a CFNumber type (encoded as CFNumberType.intType) that contains the window layer number."
  },
  {
    "title": "kCGWindowBounds | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowbounds",
    "html": "Discussion\n\nThe value for this key is a CFDictionary type that must be decoded to a CGRect type using the CGRectMakeWithDictionaryRepresentation(_:_:) function. The coordinates of the rectangle are specified in screen space, where the origin is in the upper-left corner of the main display."
  },
  {
    "title": "kCGWindowAlpha | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowalpha",
    "html": "Discussion\n\nThe value for this key is a CFNumber type (encoded as CFNumberType.floatType) that contains the window’s alpha fade level. This number is in the range 0.0 to 1.0, where 0.0 is fully transparent and 1.0 is fully opaque."
  },
  {
    "title": "kCGDisplayModeIsSafeForHardware | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgdisplaymodeissafeforhardware",
    "html": "Deprecated\n\nThere is no replacement; as display mode dictionaries are deprecated in macOS 10.6, these properties are not needed."
  },
  {
    "title": "kCGNumReservedWindowLevels | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgnumreservedwindowlevels",
    "html": "Discussion\n\nThe number of window levels reserved by Apple for internal use. Cocoa uses this constant during compilation."
  },
  {
    "title": "CGPDFTagType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdftagtype",
    "html": "Topics\nEnumeration Cases\ncase TOC\ncase TOCI\ncase annotation\ncase art\ncase bibliography\ncase blockQuote\ncase caption\ncase code\ncase div\ncase document\ncase figure\ncase form\ncase formula\ncase header\ncase header1\ncase header2\ncase header3\ncase header4\ncase header5\ncase header6\ncase index\ncase label\ncase link\ncase list\ncase listBody\ncase listItem\ncase nonStructure\ncase note\ncase paragraph\ncase part\ncase `private`\ncase quote\ncase reference\ncase ruby\ncase rubyAnnotationText\ncase rubyBaseText\ncase rubyPunctuation\ncase section\ncase span\ncase table\ncase tableBody\ncase tableDataCell\ncase tableFooter\ncase tableHeader\ncase tableHeaderCell\ncase tableRow\ncase warichu\ncase warichuPunctiation\ncase warichuText\nInstance Properties\nvar name: UnsafePointer<CChar>\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "Display Stream Optional Property Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/display_stream_optional_property_keys",
    "html": "Topics\nConstants\nclass let sourceRect: CFString\nThis key specifies that the display stream only samples a subset of the display’s framebuffer. If this key is not included in the dictionary, then the entire display is streamed. The value must be created using the CGRectCreateDictionaryRepresentation(_:) function. The rectangle is specified in points in the display’s logical coordinate system.\nDeprecated\nclass let destinationRect: CFString\nThis key specifies that the display stream outputs the frame data into a subset of the output IOSurface object. If this key is not included in the dictionary, then the entire output surface is used. The value must be created using the CGRectCreateDictionaryRepresentation(_:) function. The rectangle is specified in pixels in the surface’s coordinate system\nDeprecated\nclass let preserveAspectRatio: CFString\nThis key specifies whether the display stream preserves the aspect ratio of the source pixel data. If this key is not included in the dictionary, then the aspect ratio is preserved. If the aspect ratio is preserved, then the display stream adds black bars to the output data. If the aspect ratio is not preserved, then the pixel data is stretched to fit the output buffer’s dimensions. The value associated with the key must be a CFBoolean.\nDeprecated\nclass let colorSpace: CFString\nThis key specifies the color space of the output buffer. If this key is not included in the dictionary, the output buffer uses the same color space as the display. The value associated with this key must be a CGColorSpace for the desired color space.\nDeprecated\nclass let minimumFrameTime: CFString\nThis key specifies the desired minimum time between frame updates, allowing you to throttle the rate at which updates are received. If this key is not included in the dictionary, the default value is 0, meaning that updates are not throttled. The value must be specified as a CFNumber.\nDeprecated\nclass let showCursor: CFString\nThis key specifies whether the cursor should appear in the stream. If this key is not included in the dictionary, the cursor is visible. The value must be specified as a CFBoolean.\nDeprecated\nclass let queueDepth: CFString\nThis key specifies the number of frames to keep in the queue. If this key is not included in the dictionary, the default value is 3 frames. Specifying more frames uses more memory, but may allow you to process frame data without stalling the display stream. The value associated with this key should be specified as a CFNumber, and should not exceed 8 frames.\nDeprecated\nclass let yCbCrMatrix: CFString\nThis key should only be included if you the display stream is creating output frames in either the 420v or 420f formats. It is used to specify the YCbCr matrix applied to the output surface. The value associated with this key must be one of the strings specified in Display Stream YCbCr to RGB conversion Matrix Options.\nDeprecated"
  },
  {
    "title": "CGCursorIsDrawnInFramebuffer() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541804-cgcursorisdrawninframebuffer",
    "html": "Deprecated\n\nThere is no replacement.\n\nReturn Value\n\nIf true, the cursor is drawn in framebuffer memory; otherwise, false.\n\nDiscussion\n\nThis function returns a Boolean value that indicates whether or not the cursor is drawn in the framebuffer. (The cursor could exist in an overlay plane or a similar mechanism that puts pixels on-screen without altering framebuffer content.) If the cursor is drawn in the framebuffer, it is read back along with window data.\n\nThe reported Boolean value is based on the union of the state of the cursor on all displays. If the cursor is drawn in the framebuffer on any display, the function returns true.\n\nSee Also\nControlling the Mouse Cursor\nfunc CGDisplayHideCursor(CGDirectDisplayID) -> CGError\nHides the mouse cursor, and increments the hide cursor count.\nfunc CGDisplayShowCursor(CGDirectDisplayID) -> CGError\nDecrements the hide cursor count, and shows the mouse cursor if the count is 0.\nfunc CGDisplayMoveCursorToPoint(CGDirectDisplayID, CGPoint) -> CGError\nMoves the mouse cursor to a specified point relative to the upper-left corner of the display.\nfunc CGCursorIsVisible() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is visible.\nDeprecated\nfunc CGAssociateMouseAndMouseCursorPosition(boolean_t) -> CGError\nConnects or disconnects the mouse and cursor while an application is in the foreground.\nfunc CGWarpMouseCursorPosition(CGPoint) -> CGError\nMoves the mouse cursor without generating events.\nfunc CGGetLastMouseDelta() -> (x: Int32, y: Int32)\nReports the change in mouse position since the last mouse movement event received by the application."
  },
  {
    "title": "Display Stream YCbCr to RGB conversion Matrix Options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/display_stream_ycbcr_to_rgb_conversion_matrix_options",
    "html": "Topics\nConstants\nclass let yCbCrMatrix_ITU_R_709_2: CFString\nSpecifies the YCbCr to RGB conversion matrix for HDTV digital television (ITU R 709) images.\nclass let yCbCrMatrix_ITU_R_601_4: CFString\nSpecifies the YCbCr to RGB conversion matrix for standard digital television (ITU R 601) images.\nclass let yCbCrMatrix_SMPTE_240M_1995: CFString\nSpecifies the YCbCR to RGB conversion matrix for 1920 x 1135 HDTV (SMPTE 240M 1995)."
  },
  {
    "title": "Window Server Session Properties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/window_server_session_properties",
    "html": "Overview\n\nTo learn how to use these keys to access the values in a session dictionary, see CFDictionary.\n\nTopics\nConstants\nvar kCGSessionUserIDKey: String\nA CFNumber 32-bit unsigned integer value that encodes a user ID for the session’s current user.\nvar kCGSessionUserNameKey: String\nA CFString value that encodes the session’s short user name as set by the login operation.\nvar kCGSessionConsoleSetKey: String\nA CFNumber 32-bit unsigned integer value that represents a set of hardware composing a console.\nvar kCGSessionOnConsoleKey: String\nA CFBoolean value indicating whether the session is on a console.\nvar kCGSessionLoginDoneKey: String\nA CFBoolean value indicating whether the login operation has been done."
  },
  {
    "title": "CGDisplayStreamUpdateRectType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamupdaterecttype",
    "html": "Topics\nConstants\ncase refreshedRects\nThe rectangles for the portions of the display that were redrawn.\ncase movedRects\nThe rectangles for the portions of the display that were simply moved from one part of the display to another.\ncase dirtyRects\nThe union of both rectangles that were redrawn and rectangles that were moved.\ncase reducedDirtyRects\nThe union is calculated and then simplified. This reduces the number of rectangles returned to your app, but it may report some pixels that were not actually changed.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGLineJoin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cglinejoin",
    "html": "Overview\n\nA line join specifies how strokePath() draws the junction between connected line segments. To set the line join style in a graphics context, you use the function setLineJoin(_:).\n\nTopics\nConstants\ncase miter\ncase round\nA join with a rounded end. Core Graphics draws the line to extend beyond the endpoint of the path. The line ends with a semicircular arc with a radius of 1/2 the line’s width, centered on the endpoint.\ncase bevel\nA join with a squared-off end. Core Graphics draws the line to extend beyond the endpoint of the path, for a distance of 1/2 the line’s width.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "Reserved Window Levels | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/reserved_window_levels",
    "html": "Topics\nConstants\nvar kCGNumReservedWindowLevels: Int32"
  },
  {
    "title": "CGSetDisplayTransferByTable(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456604-cgsetdisplaytransferbytable",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\ntableSize\n\nThe number of entries in each table.\n\nredTable\n\nAn array of size tableSize containing the values of the red channel in the display’s gamma table. The values should be in the range 0.0 to 1.0.\n\ngreenTable\n\nAn array of size tableSize containing the values of the green channel in the display’s gamma table. The values should be in the range 0.0 to 1.0.\n\nblueTable\n\nAn array of size tableSize containing the values of the blue channel in the display’s gamma table. The values should be in the range 0.0 to 1.0.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nThe same table may be passed in for the red, green, and blue channels. The tables are interpolated as needed to generate the number of samples required by the graphics hardware.\n\nSee Also\nAdjusting the Display Gamma\nfunc CGSetDisplayTransferByFormula(CGDirectDisplayID, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue) -> CGError\nSets the gamma function for a display by specifying the coefficients of the gamma transfer formula.\nfunc CGGetDisplayTransferByFormula(CGDirectDisplayID, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?) -> CGError\nGets the coefficients of the gamma transfer formula for a display.\nfunc CGGetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets the values in the RGB gamma tables for a display.\nfunc CGSetDisplayTransferByByteTable(CGDirectDisplayID, UInt32, UnsafePointer<UInt8>, UnsafePointer<UInt8>, UnsafePointer<UInt8>) -> CGError\nSets the byte values in the 8-bit RGB gamma tables for a display.\nfunc CGDisplayRestoreColorSyncSettings()\nRestores the gamma tables to the values in the user’s ColorSync display profile.\nfunc CGDisplayGammaTableCapacity(CGDirectDisplayID) -> UInt32\nReturns the capacity, or number of entries, in the gamma table for a display."
  },
  {
    "title": "CGDisplayRestoreColorSyncSettings() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454702-cgdisplayrestorecolorsyncsetting",
    "html": "See Also\nAdjusting the Display Gamma\nfunc CGSetDisplayTransferByFormula(CGDirectDisplayID, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue) -> CGError\nSets the gamma function for a display by specifying the coefficients of the gamma transfer formula.\nfunc CGGetDisplayTransferByFormula(CGDirectDisplayID, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?) -> CGError\nGets the coefficients of the gamma transfer formula for a display.\nfunc CGSetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?) -> CGError\nSets the color gamma function for a display by specifying the values in the RGB gamma tables.\nfunc CGGetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets the values in the RGB gamma tables for a display.\nfunc CGSetDisplayTransferByByteTable(CGDirectDisplayID, UInt32, UnsafePointer<UInt8>, UnsafePointer<UInt8>, UnsafePointer<UInt8>) -> CGError\nSets the byte values in the 8-bit RGB gamma tables for a display.\nfunc CGDisplayGammaTableCapacity(CGDirectDisplayID) -> UInt32\nReturns the capacity, or number of entries, in the gamma table for a display."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaymode/1456191-typeid",
    "html": "Return Value\n\nThe type identifier of the CGDisplayMode opaque type.\n\nSee Also\nGetting Information About a Display Mode\nvar width: Int\nReturns the width of the specified display mode.\nvar height: Int\nReturns the height of the specified display mode.\nvar pixelEncoding: CFString?\nReturns the pixel encoding of the specified display mode.\nDeprecated\nvar refreshRate: Double\nReturns the refresh rate of the specified display mode.\nvar ioFlags: UInt32\nReturns the I/O Kit flags of the specified display mode.\nvar ioDisplayModeID: Int32\nReturns the I/O Kit display mode ID of the specified display mode.\nfunc isUsableForDesktopGUI() -> Bool\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface."
  },
  {
    "title": "Display Mode Optional Properties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/display_mode_optional_properties",
    "html": "Overview\n\nA given key is present in a display mode dictionary only if the property applies, and is always associated with a value of kCFBooleanTrue. Keys not relevant to a particular display mode will not appear in the mode dictionary.\n\nSpecial Considerations\n\nStarting in OS X v10.6, display mode dictionaries have been made obsolete by the display mode opaque type. For more information on display modes, seeChanging Display Modes (OS X v10.6 or later).\n\nTopics\nConstants\nvar kCGDisplayModeIsSafeForHardware: String\nSpecifies a CFBoolean value indicating that the display mode doesn’t need a confirmation dialog to be set.\nvar kCGDisplayModeIsInterlaced: String\nSpecifies a CFBoolean value indicating that the I/O Kit interlace mode flag is set.\nvar kCGDisplayModeIsStretched: String\nSpecifies a CFBoolean value indicating that the I/O Kit stretched mode flag is set.\nvar kCGDisplayModeIsTelevisionOutput: String\nSpecifies a CFBoolean value indicating that the I/O Kit television output mode flag is set."
  },
  {
    "title": "CGDisplayStream | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystream",
    "html": "Overview\n\nThis data type streams the contents of a display to your app. The contents can be scaled or converted to a different color space. You can also choose to capture only a portion of a display. Your update handler can be called either from a traditionalCFRunLoop or on a dispatch queue.\n\nTopics\nInitializers\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nInstance Properties\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nType Properties\nclass let colorSpace: CFString\nThis key specifies the color space of the output buffer. If this key is not included in the dictionary, the output buffer uses the same color space as the display. The value associated with this key must be a CGColorSpace for the desired color space.\nDeprecated\nclass let destinationRect: CFString\nThis key specifies that the display stream outputs the frame data into a subset of the output IOSurface object. If this key is not included in the dictionary, then the entire output surface is used. The value must be created using the CGRectCreateDictionaryRepresentation(_:) function. The rectangle is specified in pixels in the surface’s coordinate system\nDeprecated\nclass let minimumFrameTime: CFString\nThis key specifies the desired minimum time between frame updates, allowing you to throttle the rate at which updates are received. If this key is not included in the dictionary, the default value is 0, meaning that updates are not throttled. The value must be specified as a CFNumber.\nDeprecated\nclass let preserveAspectRatio: CFString\nThis key specifies whether the display stream preserves the aspect ratio of the source pixel data. If this key is not included in the dictionary, then the aspect ratio is preserved. If the aspect ratio is preserved, then the display stream adds black bars to the output data. If the aspect ratio is not preserved, then the pixel data is stretched to fit the output buffer’s dimensions. The value associated with the key must be a CFBoolean.\nDeprecated\nclass let queueDepth: CFString\nThis key specifies the number of frames to keep in the queue. If this key is not included in the dictionary, the default value is 3 frames. Specifying more frames uses more memory, but may allow you to process frame data without stalling the display stream. The value associated with this key should be specified as a CFNumber, and should not exceed 8 frames.\nDeprecated\nclass let showCursor: CFString\nThis key specifies whether the cursor should appear in the stream. If this key is not included in the dictionary, the cursor is visible. The value must be specified as a CFBoolean.\nDeprecated\nclass let sourceRect: CFString\nThis key specifies that the display stream only samples a subset of the display’s framebuffer. If this key is not included in the dictionary, then the entire display is streamed. The value must be created using the CGRectCreateDictionaryRepresentation(_:) function. The rectangle is specified in points in the display’s logical coordinate system.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass let yCbCrMatrix: CFString\nThis key should only be included if you the display stream is creating output frames in either the 420v or 420f formats. It is used to specify the YCbCr matrix applied to the output surface. The value associated with this key must be one of the strings specified in Display Stream YCbCr to RGB conversion Matrix Options.\nDeprecated\nclass let yCbCrMatrix_ITU_R_601_4: CFString\nSpecifies the YCbCr to RGB conversion matrix for standard digital television (ITU R 601) images.\nclass let yCbCrMatrix_ITU_R_709_2: CFString\nSpecifies the YCbCr to RGB conversion matrix for HDTV digital television (ITU R 709) images.\nclass let yCbCrMatrix_SMPTE_240M_1995: CFString\nSpecifies the YCbCR to RGB conversion matrix for 1920 x 1135 HDTV (SMPTE 240M 1995).\nInstance Methods\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated"
  },
  {
    "title": "CGDisplayStreamFrameAvailableHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamframeavailablehandler",
    "html": "Discussion\n\nThe handler is called whenever the display stream has updated content to process as well as when other events occur. Each time a new frame is generated, the block receives an IOSurface object that contains the pixel data as well as an update object that describes the frame update.\n\nThe handler receives the following parameters:\n\nstatus\n\nDescribes the kind of update being passed to the handler. See CGDisplayStreamFrameStatus.\n\ndisplayTime\n\nThe mach absolute time when the event occurred. For a frame event, this is when the frame was displayed by the window server.\n\nframeSurface\n\nAn IOSurface object that contains the pixel data. May be NULL in some cases.\n\nIf you need to maintain a reference to the surface beyond the lifetime of the handler call, you must call the CFRetain function to retain the surface and the IOSurfaceIncrementUseCount(_:) function to let the display stream know that the frame is not ready for re-use. Once you are finished using the surface you must call the IOSurfaceDecrementUseCount(_:) function and then call the CFRelease function. If you are maintaining a cache of information about the surface (such as a GL texture object created from the surface’s contents), you must not call release it until after you remove it from your cache.\n\nYou can not depend on the set of surfaces being used by the display stream as being static, so you should remove surfaces from the cache when they haven’t been re-used in a while.\n\nupdateRef\n\nA CGDisplayStreamUpdate reference that holds the update metadata for the current frame.\n\nIf you need to hold onto the metadata beyond the lifetime of the handler call, you must call the CFRetain function on the update reference before the end of the handler. When you are finished with the update, call the call the CFRelease function.\n\nThis parameter holds NULL when the status parameter’s has any value other than CGDisplayStreamFrameStatus.frameComplete."
  },
  {
    "title": "Display Mode Standard Properties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/display_mode_standard_properties",
    "html": "Overview\n\nTo learn how to use these keys to access the values in a display mode dictionary, see CFDictionary.\n\nSpecial Considerations\n\nStarting in OS X v10.6, display mode dictionaries have been made obsolete by the display mode opaque type. For more information on display modes, seeChanging Display Modes (OS X v10.6 or later).\n\nTopics\nConstants\nvar kCGDisplayWidth: String\nSpecifies a CFNumber integer value that represents the width of the display in pixels.\nvar kCGDisplayHeight: String\nSpecifies a CFNumber integer value that represents the height of the display in pixels.\nvar kCGDisplayMode: String\nSpecifies a CFNumber integer value that represents the I/O Kit display mode number.\nvar kCGDisplayBitsPerPixel: String\nSpecifies a CFNumber integer value that represents the number of bits in a pixel.\nvar kCGDisplayBitsPerSample: String\nSpecifies a CFNumber integer value that represents the number of bits in an individual sample (for example, a color value in an RGB pixel).\nvar kCGDisplaySamplesPerPixel: String\nSpecifies a CFNumber integer value that represents the number of samples in a pixel.\nvar kCGDisplayRefreshRate: String\nSpecifies a CFNumber double-precision floating point value that represents the refresh rate of a CRT display. Some displays may not use conventional video vertical and horizontal sweep in painting the screen; these displays report a refresh rate of 0.\nvar kCGDisplayModeUsableForDesktopGUI: String\nSpecifies a CFBoolean value that indicates whether the display is suitable for use with the macOS graphical user interface. The criteria include factors such as sufficient width and height and adequate pixel depth.\nvar kCGDisplayIOFlags: String\nSpecifies a CFNumber integer value that contains the I/O Kit display mode flags. For more information, see the header file IOKit/IOGraphicsTypes.h.\nvar kCGDisplayBytesPerRow: String\nSpecifies a CFNumber integer value that represents the number of bytes in a row on the display."
  },
  {
    "title": "Display Fade Blend Fractions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services/display_fade_blend_fractions",
    "html": "Overview\n\nFor general information about blend fractions, see the data type CGDisplayBlendFraction. For information about how these constants are used, see the function CGDisplayFade(_:_:_:_:_:_:_:_:).\n\nTopics\nConstants\nvar kCGDisplayBlendNormal: Double\nThe blend color is not applied at the start or end of a fade operation.\nvar kCGDisplayBlendSolidColor: Double\nThe user sees only the blend color at the start or end of a fade operation."
  },
  {
    "title": "CGDisplayStreamUpdate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamupdate",
    "html": "Overview\n\nThis data type encapsulates information about how the frame changed since the previous frame delivered by a display stream. The metadata about the frame describes the portions of the screen that were redrawn and the portions of the screen that were moved from one place to another. You can merge multiple updates into a single update.\n\nTopics\nInitializers\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nInstance Properties\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nType Properties\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated\nInstance Methods\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated"
  },
  {
    "title": "CGGetDisplaysWithPoint(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454385-cggetdisplayswithpoint",
    "html": "Parameters\npoint\n\nThe coordinates of a point in the global display coordinate space. The origin is the upper-left corner of the main display.\n\nmaxDisplays\n\nThe size of the dspys array. This value determines the maximum number of displays the list includes.\n\ndspys\n\nA pointer to storage you provide for an array of display IDs. On return, the array contains a list of displays with bounds that include the point. If you pass NULL, on return the display count contains the total number of displays with bounds that include the point.\n\ndspyCnt\n\nA pointer to a display count variable you provide. On return, the display count contains the actual number of displays the list includes in the dspys array. This value is at most maxDisplays.\n\nReturn Value\n\nA result code. To interpret the result code, see CGError.\n\nDiscussion\n\nIf the dspys array is NULL, this function ignores the maxDisplays parameter. If the maxDisplays parameter is 0, this function ignores the dspys array. In any case, this function fills in the dspyCnt pointer with the number of displays that contain the specified point.\n\nSee Also\nFinding Displays\nfunc CGMainDisplayID() -> CGDirectDisplayID\nReturns the display ID of the main display.\nfunc CGGetOnlineDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are online (active, mirrored, or sleeping).\nfunc CGGetActiveDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are active for drawing.\nfunc CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that corresponds to the bits set in an OpenGL display mask.\nfunc CGGetDisplaysWithRect(CGRect, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of online displays with bounds that intersect the specified rectangle.\nfunc CGOpenGLDisplayMaskToDisplayID(CGOpenGLDisplayMask) -> CGDirectDisplayID\nMaps an OpenGL display mask to a display ID.\nfunc CGDisplayIDToOpenGLDisplayMask(CGDirectDisplayID) -> CGOpenGLDisplayMask\nMaps a display ID to an OpenGL display mask."
  },
  {
    "title": "CGWindowLevel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlevel",
    "html": "Discussion\n\nIn macOS, application frameworks support the concept of multiple window levels (or layers). Window levels are assigned and managed by each individual framework.\n\nNote that in an Aqua-compliant application, each document window exists in its own layer. As a result, windows created by different applications can be interleaved."
  },
  {
    "title": "CGRefreshRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgrefreshrate",
    "html": "Discussion\n\nWhen requesting a new display mode, you can specify a desired refresh rate as a hint to Quartz. For example, see the function CGDisplayBestModeForParametersAndRefreshRate(_:_:_:_:_:_:).\n\nSpecial Considerations\n\nMost applications should never need this data type. Starting in OS X v10.6, the CGDisplayBestMode functions are deprecated and the new display mode API does not use this type."
  },
  {
    "title": "CGGammaValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggammavalue",
    "html": "Discussion\n\nIn macOS, the Display panel in System Preferences is used to set the default gamma for a display. Quartz also allows an application to provide its own custom gamma information, using functions such as CGSetDisplayTransferByTable(_:_:_:_:_:) and CGSetDisplayTransferByFormula(_:_:_:_:_:_:_:_:_:_:).\n\nThese functions take CGGammaValue arguments that specify:\n\nA set of gamma table entries ranging from 0 to 1\n\nThe positive real coefficients in a gamma equation"
  },
  {
    "title": "CGRectCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgrectcount",
    "html": "Discussion\n\nFor example, see the function CGWaitForScreenRefreshRects(_:_:)."
  },
  {
    "title": "CGScreenRefreshCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgscreenrefreshcallback",
    "html": "Parameters\ncount\n\nThe number of rectangles in the rectArray parameter.\n\nrectArray\n\nA list of the rectangles in the refreshed areas, specified in the global display coordinate space. The origin is the upper-left corner of the main display. You should not modify or deallocate memory pointed to by rectArray.\n\nuserParameter\n\nThe user data you specify when you register this callback.\n\nDiscussion\n\nTo register a screen-refresh callback function, you call the function CGRegisterScreenRefreshCallback(_:_:). Quartz invokes your callback function when operations such as drawing, window movement, scrolling, or display reconfiguration occur on local displays. When you finish using a callback registration, you should call the function CGUnregisterScreenRefreshCallback(_:_:) to remove it.\n\nNote that a single rectangle may occupy multiple displays, either by overlapping the displays or by residing on coincident displays when mirroring is active. You can use the function CGGetDisplaysWithRect(_:_:_:_:) to determine the displays a rectangle occupies.\n\nSee Also\nCallbacks\ntypealias CGDisplayReconfigurationCallBack\nA client-supplied callback function that’s invoked whenever the configuration of a local display is changed.\ntypealias CGScreenUpdateMoveCallback\nA client-supplied callback function invoked when an area of the display is moved."
  },
  {
    "title": "CGDisplayReconfigurationCallBack | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplayreconfigurationcallback",
    "html": "Parameters\ndisplay\n\nThe display being reconfigured.\n\nflags\n\nFlags that indicate which display configuration parameters are changing.\n\nuserInfo\n\nThe userInfo argument passed to the function CGDisplayRegisterReconfigurationCallback(_:_:) when the callback function is registered.\n\nDiscussion\n\nIf you named your function MyDisplayReconfigurationCallBack, you would declare it like this:\n\nDiscussion\n\nTo register a display reconfiguration callback function, you call the function CGDisplayRegisterReconfigurationCallback(_:_:). Quartz invokes your callback function when:\n\nYour application calls a function to reconfigure a local display.\n\nYour application is listening for events in the event-processing thread, and another application calls a function to reconfigure a local display.\n\nThe user changes the display hardware configuration—for example, by disconnecting a display or changing a system preferences setting.\n\nBefore display reconfiguration, Quartz invokes your callback function once for each online display to indicate a pending configuration change. The flags argument is always set to kCGDisplayBeginConfigurationFlag. The only display-specific information contained by this callback is the display ID number.The reason is that details of how a reconfiguration affects a particular device rely on device-specific behaviors which may not be available to a device driver.\n\nAfter display reconfiguration, Quartz invokes your callback function once for each added, removed, and online display. At this time, all display state reported by Core Graphics and QuickDraw will be up to date. The flags argument indicates how the display configuration has changed. Note that in the case of removed displays, calls into Quartz with the removed display ID will fail.\n\nThe following code example illustrates how to test for specific conditions:\n\nvoid MyDisplayReconfigurationCallBack (\n   CGDirectDisplayID display,\n   CGDisplayChangeSummaryFlags flags,\n   void *userInfo)\n{\n    if (flags & kCGDisplayAddFlag) {\n        // display has been added\n    }\n    else if (flags & kCGDisplayRemoveFlag) {\n        // display has been removed\n    }\n}\n\n\nYour callback function should avoid attempting to change display configurations and should not raise exceptions or perform a nonlocal return such as calling longjmp. When you are finished using a callback registration, you should call the function CGDisplayRemoveReconfigurationCallback(_:_:) to remove it.\n\nSee Also\nCallbacks\ntypealias CGScreenRefreshCallback\nA client-supplied callback function that’s invoked when an area of the display is modified or refreshed.\ntypealias CGScreenUpdateMoveCallback\nA client-supplied callback function invoked when an area of the display is moved."
  },
  {
    "title": "getMovedRectsDelta(dx:dy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamupdate/1455469-getmovedrectsdelta",
    "html": "Parameters\nupdateRef\n\nA CGDisplayStreamUpdate reference.\n\ndx\n\nA pointer to a CGFloat to store the x component of the movement delta\n\ndy\n\nA pointer to a CGFloat to store the y component of the movement delta\n\nDiscussion\n\nThe delta values describe the offset from the moved rectangles back to the source location.\n\nSee Also\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "runLoopSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystream/1455403-runloopsource",
    "html": "Parameters\ndisplayStream\n\nA display stream reference created using the init(display:outputWidth:outputHeight:pixelFormat:properties:handler:) function.\n\nReturn Value\n\nAn event source for the display stream. This function returns NULL if you pass in a display stream that was created by calling the init(dispatchQueueDisplay:outputWidth:outputHeight:pixelFormat:properties:queue:handler:) function.\n\nSee Also\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "init(mergedUpdateFirstUpdate:secondUpdate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamupdate/1454341-init",
    "html": "Parameters\nfirstUpdate\n\nA CGDisplayStreamUpdate reference. This must be the earlier of the two update references.\n\nsecondUpdate\n\nA CGDisplayStreamUpdate reference. This must be the later of the two update references.\n\nReturn Value\n\nA new update that contains the union of the information stored in the two source updates.\n\nDiscussion\n\nIf your app needs to drop a frame without processing it, use this function to merge that frame’s update data with the data provided for a later frame update.\n\nSee Also\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "dropCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystreamupdate/1456212-dropcount",
    "html": "Parameters\nupdateRef\n\nA CGDisplayStreamUpdate reference.\n\nReturn Value\n\nThe number of dropped frames.\n\nDiscussion\n\nUse this call when measuring your client’s performance to ensure that it is keeping up with window server updates.\n\nSee Also\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "init(display:outputWidth:outputHeight:pixelFormat:properties:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystream/1455170-init",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be streamed.\n\noutputWidth\n\nThe width of the output frames in pixels. The width must not be zero.\n\noutputHeight\n\nThe height of the output frames in pixels. The height must not be zero.\n\npixelFormat\n\nThe desired Core Media pixel format of the output frame data. The value must be one of the following:\n\n'BGRA': Packed Little Endian ARGB8888\n\n'l10r': Packed Little Endian ARGB2101010\n\n'420v': 2-plane \"video\" range YCbCr 4:2:0\n\n'420f': 2-plane \"full\" range YCbCr 4:2:0\n\nproperties\n\nA dictionary of optional properties for the display stream. See Display Stream Optional Property Keys for the possible keys and values that can be provided in the options dictionary.\n\nhandler\n\nA block to be called when new frames are ready.\n\nReturn Value\n\nA new CGDisplayStream object.\n\nDiscussion\n\nBefore the stream can be started, it must be added to a run loop. Use the runLoopSource function to get an event source to add to the run loop.\n\nSee Also\nStreaming the Contents of a Display\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "init(dispatchQueueDisplay:outputWidth:outputHeight:pixelFormat:properties:queue:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystream/1454968-init",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be streamed.\n\noutputWidth\n\nThe width of the output frames in pixels. The width must not be zero.\n\noutputHeight\n\nThe height of the output frames in pixels. The height must not be zero.\n\npixelFormat\n\nThe desired Core Media pixel format of the output frame data. The value must be one of the following:\n\n'BGRA': Packed Little Endian ARGB8888\n\n'l10r': Packed Little Endian ARGB2101010\n\n'420v': 2-plane \"video\" range YCbCr 4:2:0\n\n'420f': 2-plane \"full\" range YCbCr 4:2:0\n\nproperties\n\nA dictionary of optional properties for the display stream. See Display Stream Optional Property Keys for the possible keys and values that can be provided in the options dictionary.\n\nqueue\n\nThe GCD dispatch queue used when calling the update handler.\n\nhandler\n\nA block to be called when new frames are ready.\n\nReturn Value\n\nA new CGDisplayStream object.\n\nSee Also\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "stop() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaystream/1455658-stop",
    "html": "Parameters\ndisplayStream\n\nThe display stream that should stop streaming data.\n\nReturn Value\n\nkCGErrorSuccess if the stream started, otherwise an appropriate error code.\n\nDiscussion\n\nAfter this call returns, the stream is stopped. When the stream stops, its callback is called with a status of CGDisplayStreamFrameStatus.stopped. You must wait until this callback is received before releasing the display stream object.\n\nIt is safe to call this function from within the handler block.\n\nSee Also\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated"
  },
  {
    "title": "CGWindowServerCFMachPort() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541813-cgwindowservercfmachport",
    "html": "Deprecated\n\nThere is no replacement.\n\nReturn Value\n\nA Core Foundation Mach port, or NULL if the window server is not running. When you no longer need the port, you should release it using the function CFRelease.\n\nDiscussion\n\nYou can use this function to detect whether the window server process exits or is not running. If this function returns NULL, the window server is not running. This code example shows how to register a callback function to detect when the window server exits:\n\nstatic void handleWindowServerDeath( CFMachPortRef port, void *info  )\n{\n    printf( \"Window Server port death detected!\\n\" );\n    CFRelease(port);\n    exit(1);\n}\n \nstatic void watchForWindowServerDeath()\n{\n    CFMachPortRef port = CGWindowServerCFMachPort();\n    CFMachPortSetInvalidationCallBack(port, handleWindowServerDeath);\n}\n\n\nNote that this callback only works if your program has an active run loop.\n\nSee Also\nGetting Window Server Information\nfunc CGSessionCopyCurrentDictionary() -> CFDictionary?\nReturns information about the caller’s window server session.\nfunc CGWindowLevelForKey(CGWindowLevelKey) -> CGWindowLevel\nReturns the window level that corresponds to one of the standard window types."
  },
  {
    "title": "CGWindowLevelForKey(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454084-cgwindowlevelforkey",
    "html": "Parameters\nkey\n\nA window level key constant that represents one of the standard window types. See CGWindowLevelKey.\n\nReturn Value\n\nThe window level that corresponds to the specified key.\n\nDiscussion\n\nThis function is not recommended for use in applications. (This function is provided for application frameworks that create and manage windows, like Cocoa.)\n\nSee Also\nGetting Window Server Information\nfunc CGSessionCopyCurrentDictionary() -> CFDictionary?\nReturns information about the caller’s window server session.\nfunc CGWindowServerCFMachPort() -> CFMachPort?\nReturns a Core Foundation Mach port (CFMachPort) that corresponds to the macOS window server.\nDeprecated"
  },
  {
    "title": "CGWarpMouseCursorPosition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456387-cgwarpmousecursorposition",
    "html": "Parameters\nnewCursorPosition\n\nThe new mouse cursor position in the global display coordinate space.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nYou can use this function to “warp” or alter the cursor position without generating or posting an event. For example, this function is often used to move the cursor position back to the center of the screen by games that do not want the cursor pinned by display edges.\n\nSee Also\nControlling the Mouse Cursor\nfunc CGDisplayHideCursor(CGDirectDisplayID) -> CGError\nHides the mouse cursor, and increments the hide cursor count.\nfunc CGDisplayShowCursor(CGDirectDisplayID) -> CGError\nDecrements the hide cursor count, and shows the mouse cursor if the count is 0.\nfunc CGDisplayMoveCursorToPoint(CGDirectDisplayID, CGPoint) -> CGError\nMoves the mouse cursor to a specified point relative to the upper-left corner of the display.\nfunc CGCursorIsVisible() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is visible.\nDeprecated\nfunc CGCursorIsDrawnInFramebuffer() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is drawn in framebuffer memory.\nDeprecated\nfunc CGAssociateMouseAndMouseCursorPosition(boolean_t) -> CGError\nConnects or disconnects the mouse and cursor while an application is in the foreground.\nfunc CGGetLastMouseDelta() -> (x: Int32, y: Int32)\nReports the change in mouse position since the last mouse movement event received by the application."
  },
  {
    "title": "post(tap:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1456527-post",
    "html": "Parameters\ntap\n\nThe location at which to post the event. Pass one of the constants listed in CGEventTapLocation.\n\nevent\n\nThe event to post.\n\nDiscussion\n\nThis function posts the specified event immediately before any event taps instantiated for that location, and the event passes through any such taps.\n\nSee Also\nWorking With Event Taps\nclass func tapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap.\nclass func tapCreateForPSN(processSerialNumber: UnsafeMutableRawPointer, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap for a specified process.\nclass func tapEnable(tap: CFMachPort, enable: Bool)\nEnables or disables an event tap.\nclass func tapIsEnabled(tap: CFMachPort) -> Bool\nReturns a Boolean value indicating whether an event tap is enabled.\nfunc tapPostEvent(CGEventTapProxy?)\nPosts a Quartz event from an event tap into the event stream.\nfunc postToPSN(processSerialNumber: UnsafeMutableRawPointer?)\nPosts a Quartz event into the event stream for a specific application.\nfunc CGGetEventTapList(UInt32, UnsafeMutablePointer<CGEventTapInformation>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of currently installed event taps."
  },
  {
    "title": "kCGWindowOwnerName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowownername",
    "html": "Discussion\n\nThe key that identifies the name of the application that owns the window. The value for this key is a CFString type."
  },
  {
    "title": "kCGWindowSharingState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowsharingstate",
    "html": "Discussion\n\nThe value for this key is a CFNumber type (encoded as CFNumberType.intType) that contains one of the constants defined in Window Sharing Constants."
  },
  {
    "title": "kCGWindowStoreType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowstoretype",
    "html": "Discussion\n\nThe value for this key is a CFNumber type (encoded as CFNumberType.intType) that contains one of the constants defined in Backing Store Types."
  },
  {
    "title": "kCGWindowOwnerPID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgwindowownerpid",
    "html": "Discussion\n\nThe value for this key is a CFNumber type (encoded as CFNumberType.intType) that contains the process ID of the application that owns the window."
  },
  {
    "title": "kCGDisplayWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgdisplaywidth",
    "html": "Deprecated\n\nThere is no replacement; as display mode dictionaries are deprecated in OS X v10.6, these properties are not needed."
  },
  {
    "title": "CGAssociateMouseAndMouseCursorPosition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454486-cgassociatemouseandmousecursorpo",
    "html": "Parameters\nconnected\n\nPass true to connect the mouse and cursor; otherwise, pass false.\n\nReturn Value\n\nA result code. To interpret the result code, see CGError.\n\nDiscussion\n\nCall this function to disconnect the mouse from the cursor. When you call this function, the events your application receives from the system have a constant absolute location but contain delta updates to the X and Y coordinates of the mouse. You can hide the cursor or change it into something appropriate for your application. You can reposition the cursor by using the function CGDisplayMoveCursorToPoint(_:_:) or the function CGWarpMouseCursorPosition(_:).\n\nSee Also\nControlling the Mouse Cursor\nfunc CGDisplayHideCursor(CGDirectDisplayID) -> CGError\nHides the mouse cursor, and increments the hide cursor count.\nfunc CGDisplayShowCursor(CGDirectDisplayID) -> CGError\nDecrements the hide cursor count, and shows the mouse cursor if the count is 0.\nfunc CGDisplayMoveCursorToPoint(CGDirectDisplayID, CGPoint) -> CGError\nMoves the mouse cursor to a specified point relative to the upper-left corner of the display.\nfunc CGCursorIsVisible() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is visible.\nDeprecated\nfunc CGCursorIsDrawnInFramebuffer() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is drawn in framebuffer memory.\nDeprecated\nfunc CGWarpMouseCursorPosition(CGPoint) -> CGError\nMoves the mouse cursor without generating events.\nfunc CGGetLastMouseDelta() -> (x: Int32, y: Int32)\nReports the change in mouse position since the last mouse movement event received by the application."
  },
  {
    "title": "CGDisplayMoveCursorToPoint(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455258-cgdisplaymovecursortopoint",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to access.\n\npoint\n\nThe coordinates of a point in local display space. The origin is the upper-left corner of the specified display.\n\nReturn Value\n\nA result code. To interpret the result code, see CGError.\n\nDiscussion\n\nThe function doesn’t generate events as a result of this move. The action clips points that lie outside the desktop to its bounds.\n\nSee Also\nControlling the Mouse Cursor\nfunc CGDisplayHideCursor(CGDirectDisplayID) -> CGError\nHides the mouse cursor, and increments the hide cursor count.\nfunc CGDisplayShowCursor(CGDirectDisplayID) -> CGError\nDecrements the hide cursor count, and shows the mouse cursor if the count is 0.\nfunc CGCursorIsVisible() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is visible.\nDeprecated\nfunc CGCursorIsDrawnInFramebuffer() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is drawn in framebuffer memory.\nDeprecated\nfunc CGAssociateMouseAndMouseCursorPosition(boolean_t) -> CGError\nConnects or disconnects the mouse and cursor while an application is in the foreground.\nfunc CGWarpMouseCursorPosition(CGPoint) -> CGError\nMoves the mouse cursor without generating events.\nfunc CGGetLastMouseDelta() -> (x: Int32, y: Int32)\nReports the change in mouse position since the last mouse movement event received by the application."
  },
  {
    "title": "CGSetDisplayTransferByByteTable(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455896-cgsetdisplaytransferbybytetable",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\ntableSize\n\nThe number of entries in each table.\n\nredTable\n\nAn array of size tableSize containing the byte values of the red channel in the display’s gamma table.\n\ngreenTable\n\nAn array of size tableSize containing the byte values of the green channel in the display’s gamma table.\n\nblueTable\n\nAn array of size tableSize containing the byte values of the blue channel in the display’s gamma table.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nThe same table may be passed in for the red, green, and blue channels. The tables are interpolated as needed to generate the number of samples required by the graphics hardware.\n\nSee Also\nAdjusting the Display Gamma\nfunc CGSetDisplayTransferByFormula(CGDirectDisplayID, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue) -> CGError\nSets the gamma function for a display by specifying the coefficients of the gamma transfer formula.\nfunc CGGetDisplayTransferByFormula(CGDirectDisplayID, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?) -> CGError\nGets the coefficients of the gamma transfer formula for a display.\nfunc CGSetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?) -> CGError\nSets the color gamma function for a display by specifying the values in the RGB gamma tables.\nfunc CGGetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets the values in the RGB gamma tables for a display.\nfunc CGDisplayRestoreColorSyncSettings()\nRestores the gamma tables to the values in the user’s ColorSync display profile.\nfunc CGDisplayGammaTableCapacity(CGDirectDisplayID) -> UInt32\nReturns the capacity, or number of entries, in the gamma table for a display."
  },
  {
    "title": "CGDisplayGammaTableCapacity(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454310-cgdisplaygammatablecapacity",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe number of entries in the gamma table for a display.\n\nSee Also\nAdjusting the Display Gamma\nfunc CGSetDisplayTransferByFormula(CGDirectDisplayID, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue) -> CGError\nSets the gamma function for a display by specifying the coefficients of the gamma transfer formula.\nfunc CGGetDisplayTransferByFormula(CGDirectDisplayID, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?) -> CGError\nGets the coefficients of the gamma transfer formula for a display.\nfunc CGSetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?) -> CGError\nSets the color gamma function for a display by specifying the values in the RGB gamma tables.\nfunc CGGetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets the values in the RGB gamma tables for a display.\nfunc CGSetDisplayTransferByByteTable(CGDirectDisplayID, UInt32, UnsafePointer<UInt8>, UnsafePointer<UInt8>, UnsafePointer<UInt8>) -> CGError\nSets the byte values in the 8-bit RGB gamma tables for a display.\nfunc CGDisplayRestoreColorSyncSettings()\nRestores the gamma tables to the values in the user’s ColorSync display profile."
  },
  {
    "title": "CGGetDisplayTransferByTable(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454974-cggetdisplaytransferbytable",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\ncapacity\n\nThe number of entries each table can hold.\n\nredTable\n\nA pointer to an array of type CGGammaValue with size capacity. On return, the array contains the values of the red channel in the display’s gamma table.\n\ngreenTable\n\nA pointer to an array of type CGGammaValue with size capacity. On return, the array contains the values of the green channel in the display’s gamma table.\n\nblueTable\n\nA pointer to an array of type CGGammaValue with size capacity. On return, the array contains the values of the blue channel in the display’s gamma table.\n\nsampleCount\n\nThe number of samples actually copied into each array.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nSee Also\nAdjusting the Display Gamma\nfunc CGSetDisplayTransferByFormula(CGDirectDisplayID, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue) -> CGError\nSets the gamma function for a display by specifying the coefficients of the gamma transfer formula.\nfunc CGGetDisplayTransferByFormula(CGDirectDisplayID, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?) -> CGError\nGets the coefficients of the gamma transfer formula for a display.\nfunc CGSetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?) -> CGError\nSets the color gamma function for a display by specifying the values in the RGB gamma tables.\nfunc CGSetDisplayTransferByByteTable(CGDirectDisplayID, UInt32, UnsafePointer<UInt8>, UnsafePointer<UInt8>, UnsafePointer<UInt8>) -> CGError\nSets the byte values in the 8-bit RGB gamma tables for a display.\nfunc CGDisplayRestoreColorSyncSettings()\nRestores the gamma tables to the values in the user’s ColorSync display profile.\nfunc CGDisplayGammaTableCapacity(CGDirectDisplayID) -> UInt32\nReturns the capacity, or number of entries, in the gamma table for a display."
  },
  {
    "title": "CGGetDisplayTransferByFormula(_:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456330-cggetdisplaytransferbyformula",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to access.\n\nredMin\n\nThe minimum value of the red channel in the gamma table. The value is a number in the interval [0, redMax].\n\nredMax\n\nThe maximum value of the red channel in the gamma table. The value is a number in the interval [redMin, 1].\n\nredGamma\n\nA positive value used to compute the red channel in the gamma table.\n\ngreenMin\n\nThe minimum value of the green channel in the gamma table. The value is a number in the interval [0, greenMax].\n\ngreenMax\n\nThe maximum value of the green channel in the gamma table. The value is a number in the interval [greenMin, 1].\n\ngreenGamma\n\nA positive value used to compute the green channel in the gamma table.\n\nblueMin\n\nThe minimum value of the blue channel in the gamma table. The value is a number in the interval [0, blueMax].\n\nblueMax\n\nThe maximum value of the blue channel in the gamma table. The value is a number in the interval [blueMin, 1].\n\nblueGamma\n\nA positive value used to compute the blue channel in the gamma table.\n\nReturn Value\n\nA result code. To interpret the result code, see CGError.\n\nDiscussion\n\nFor information about the gamma transfer formula, see the description of the function CGSetDisplayTransferByFormula(_:_:_:_:_:_:_:_:_:_:).\n\nSee Also\nAdjusting the Display Gamma\nfunc CGSetDisplayTransferByFormula(CGDirectDisplayID, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue) -> CGError\nSets the gamma function for a display by specifying the coefficients of the gamma transfer formula.\nfunc CGSetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?) -> CGError\nSets the color gamma function for a display by specifying the values in the RGB gamma tables.\nfunc CGGetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets the values in the RGB gamma tables for a display.\nfunc CGSetDisplayTransferByByteTable(CGDirectDisplayID, UInt32, UnsafePointer<UInt8>, UnsafePointer<UInt8>, UnsafePointer<UInt8>) -> CGError\nSets the byte values in the 8-bit RGB gamma tables for a display.\nfunc CGDisplayRestoreColorSyncSettings()\nRestores the gamma tables to the values in the user’s ColorSync display profile.\nfunc CGDisplayGammaTableCapacity(CGDirectDisplayID) -> UInt32\nReturns the capacity, or number of entries, in the gamma table for a display."
  },
  {
    "title": "CGSetDisplayTransferByFormula(_:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454126-cgsetdisplaytransferbyformula",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nredMin\n\nThe minimum value of the red channel in the gamma table. The value should be a number in the interval [0, redMax).\n\nredMax\n\nThe maximum value of the red channel in the gamma table. The value should be a number in the interval (redMin, 1].\n\nredGamma\n\nA positive value used to compute the red channel in the gamma table.\n\ngreenMin\n\nThe minimum value of the green channel in the gamma table. The value should be a number in the interval [0, greenMax).\n\ngreenMax\n\nThe maximum value of the green channel in the gamma table. The value should be a number in the interval (greenMin, 1].\n\ngreenGamma\n\nA positive value used to compute the green channel in the gamma table.\n\nblueMin\n\nThe minimum value of the blue channel in the gamma table. The value should be a number in the interval [0, blueMax).\n\nblueMax\n\nThe maximum value of the blue channel in the gamma table. The value should be a number in the interval (blueMin, 1].\n\nblueGamma\n\nA positive value used to compute the blue channel in the gamma table.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nThis function uses the specified parameter values to compute a gamma correction table for the specified display. The values in the table are computed by sampling the following gamma transfer formula for a range of indices from 0 to 1:\n\nvalue = Min + ((Max - Min) * pow(index, Gamma))\n\n\nThe resulting values are converted to a machine-specific format and loaded into display hardware.\n\nSee Also\nAdjusting the Display Gamma\nfunc CGGetDisplayTransferByFormula(CGDirectDisplayID, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?) -> CGError\nGets the coefficients of the gamma transfer formula for a display.\nfunc CGSetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?) -> CGError\nSets the color gamma function for a display by specifying the values in the RGB gamma tables.\nfunc CGGetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets the values in the RGB gamma tables for a display.\nfunc CGSetDisplayTransferByByteTable(CGDirectDisplayID, UInt32, UnsafePointer<UInt8>, UnsafePointer<UInt8>, UnsafePointer<UInt8>) -> CGError\nSets the byte values in the 8-bit RGB gamma tables for a display.\nfunc CGDisplayRestoreColorSyncSettings()\nRestores the gamma tables to the values in the user’s ColorSync display profile.\nfunc CGDisplayGammaTableCapacity(CGDirectDisplayID) -> UInt32\nReturns the capacity, or number of entries, in the gamma table for a display."
  },
  {
    "title": "ioDisplayModeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaymode/1454728-iodisplaymodeid",
    "html": "Parameters\nmode\n\nA display mode for which to find the associated display mode ID.\n\nReturn Value\n\nThe I/O Kit display mode ID of the specified display mode.\n\nSee Also\nGetting Information About a Display Mode\nvar width: Int\nReturns the width of the specified display mode.\nvar height: Int\nReturns the height of the specified display mode.\nvar pixelEncoding: CFString?\nReturns the pixel encoding of the specified display mode.\nDeprecated\nvar refreshRate: Double\nReturns the refresh rate of the specified display mode.\nvar ioFlags: UInt32\nReturns the I/O Kit flags of the specified display mode.\nfunc isUsableForDesktopGUI() -> Bool\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nclass var typeID: CFTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "ioFlags | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaymode/1454092-ioflags",
    "html": "Parameters\nmode\n\nA display mode for which to find the associated flags.\n\nReturn Value\n\nThe I/O Kit flags of the specified display mode. For more information, see the header file IOKit/IOGraphicsTypes.h.\n\nSee Also\nGetting Information About a Display Mode\nvar width: Int\nReturns the width of the specified display mode.\nvar height: Int\nReturns the height of the specified display mode.\nvar pixelEncoding: CFString?\nReturns the pixel encoding of the specified display mode.\nDeprecated\nvar refreshRate: Double\nReturns the refresh rate of the specified display mode.\nvar ioDisplayModeID: Int32\nReturns the I/O Kit display mode ID of the specified display mode.\nfunc isUsableForDesktopGUI() -> Bool\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nclass var typeID: CFTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "refreshRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaymode/1454661-refreshrate",
    "html": "Parameters\nmode\n\nA display mode for which to find the associated refresh rate.\n\nReturn Value\n\nThe refresh rate, in hertz, of the specified display mode for a CRT display. Some displays may not use conventional video vertical and horizontal sweep in painting the screen; for these displays, the return value is 0.\n\nSee Also\nGetting Information About a Display Mode\nvar width: Int\nReturns the width of the specified display mode.\nvar height: Int\nReturns the height of the specified display mode.\nvar pixelEncoding: CFString?\nReturns the pixel encoding of the specified display mode.\nDeprecated\nvar ioFlags: UInt32\nReturns the I/O Kit flags of the specified display mode.\nvar ioDisplayModeID: Int32\nReturns the I/O Kit display mode ID of the specified display mode.\nfunc isUsableForDesktopGUI() -> Bool\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nclass var typeID: CFTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "pixelEncoding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaymode/1455067-pixelencoding",
    "html": "Parameters\nmode\n\nA display mode for which to find the associated pixel encoding.\n\nReturn Value\n\nA string representing the pixel encoding of the specified display mode. This string is expressed as a CFString type containing an I/O Kit graphics mode. The caller is responsible for releasing the string.\n\nDiscussion\n\nThe returned string can be used to determine various aspects of the pixel encoding, such as bits per pixel and bits per sample. For more information, see the header file IOKit/IOGraphicsTypes.h in IOKit.\n\nSee Also\nGetting Information About a Display Mode\nvar width: Int\nReturns the width of the specified display mode.\nvar height: Int\nReturns the height of the specified display mode.\nvar refreshRate: Double\nReturns the refresh rate of the specified display mode.\nvar ioFlags: UInt32\nReturns the I/O Kit flags of the specified display mode.\nvar ioDisplayModeID: Int32\nReturns the I/O Kit display mode ID of the specified display mode.\nfunc isUsableForDesktopGUI() -> Bool\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nclass var typeID: CFTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "height | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaymode/1455380-height",
    "html": "Parameters\nmode\n\nA display mode.\n\nReturn Value\n\nThe height, in pixels, of the specified display mode.\n\nSee Also\nGetting Information About a Display Mode\nvar width: Int\nReturns the width of the specified display mode.\nvar pixelEncoding: CFString?\nReturns the pixel encoding of the specified display mode.\nDeprecated\nvar refreshRate: Double\nReturns the refresh rate of the specified display mode.\nvar ioFlags: UInt32\nReturns the I/O Kit flags of the specified display mode.\nvar ioDisplayModeID: Int32\nReturns the I/O Kit display mode ID of the specified display mode.\nfunc isUsableForDesktopGUI() -> Bool\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nclass var typeID: CFTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "width | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaymode/1454442-width",
    "html": "Parameters\nmode\n\nA display mode.\n\nReturn Value\n\nThe width, in pixels, of the specified display mode.\n\nSee Also\nGetting Information About a Display Mode\nvar height: Int\nReturns the height of the specified display mode.\nvar pixelEncoding: CFString?\nReturns the pixel encoding of the specified display mode.\nDeprecated\nvar refreshRate: Double\nReturns the refresh rate of the specified display mode.\nvar ioFlags: UInt32\nReturns the I/O Kit flags of the specified display mode.\nvar ioDisplayModeID: Int32\nReturns the I/O Kit display mode ID of the specified display mode.\nfunc isUsableForDesktopGUI() -> Bool\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nclass var typeID: CFTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "CGDisplayCopyAllDisplayModes(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455537-cgdisplaycopyalldisplaymodes",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\noptions\n\nReserved for future expansion. Pass NULL for now.\n\nReturn Value\n\nAn array of display modes that the display supports, or NULL if the display is invalid. The caller is responsible for releasing the array. For more information on accessing the properties of a display mode, see Getting Information About a Display Mode.\n\nSee Also\nCreating and Managing Display Modes\nfunc CGDisplayAvailableModes(CGDirectDisplayID) -> CFArray?\nReturns information about the currently available display modes.\nDeprecated\nfunc CGDisplayBestModeForParameters(CGDirectDisplayID, Int, Int, Int, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth and screen size.\nDeprecated\nfunc CGDisplayBestModeForParametersAndRefreshRate(CGDirectDisplayID, Int, Int, Int, CGRefreshRate, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth, screen size, and refresh rate.\nDeprecated\nfunc CGDisplayCurrentMode(CGDirectDisplayID) -> CFDictionary?\nReturns information about the current display mode.\nDeprecated\nfunc CGDisplaySwitchToMode(CGDirectDisplayID, CFDictionary?) -> CGError\nSwitches a display to a different mode.\nDeprecated\nfunc CGDisplayCopyDisplayMode(CGDirectDisplayID) -> CGDisplayMode?\nReturns information about a display’s current configuration.\nfunc CGDisplaySetDisplayMode(CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nSwitches a display to a different mode."
  },
  {
    "title": "CGDisplayCopyDisplayMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454099-cgdisplaycopydisplaymode",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nA display-mode opaque-type reference, or NULL if the display is invalid. The caller is responsible for releasing the display mode using CGDisplayModeRelease.\n\nSee Also\nCreating and Managing Display Modes\nfunc CGDisplayAvailableModes(CGDirectDisplayID) -> CFArray?\nReturns information about the currently available display modes.\nDeprecated\nfunc CGDisplayBestModeForParameters(CGDirectDisplayID, Int, Int, Int, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth and screen size.\nDeprecated\nfunc CGDisplayBestModeForParametersAndRefreshRate(CGDirectDisplayID, Int, Int, Int, CGRefreshRate, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth, screen size, and refresh rate.\nDeprecated\nfunc CGDisplayCurrentMode(CGDirectDisplayID) -> CFDictionary?\nReturns information about the current display mode.\nDeprecated\nfunc CGDisplaySwitchToMode(CGDirectDisplayID, CFDictionary?) -> CGError\nSwitches a display to a different mode.\nDeprecated\nfunc CGDisplayCopyAllDisplayModes(CGDirectDisplayID, CFDictionary?) -> CFArray?\nReturns information about the currently available display modes.\nfunc CGDisplaySetDisplayMode(CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nSwitches a display to a different mode."
  },
  {
    "title": "CGDisplayUsesOpenGLAcceleration(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455721-cgdisplayusesopenglacceleration",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, Quartz Extreme is used to render in the specified display; otherwise, false.\n\nDiscussion\n\nQuartz Extreme is an OpenGL-based, hardware-accelerated window compositor available in macOS 10.2 and later. Quartz Extreme requires a minimum hardware configuration to operate.\n\nThe information this function provides is typically used to adjust the demands of drawing operations to the capabilities of the display hardware. For example, an application running on an unaccelerated system could disable live window-resizing.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplaySerialNumber(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455409-cgdisplayserialnumber",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nA serial number for the monitor associated with the specified display, or a constant to indicate an exception—see the discussion below.\n\nDiscussion\n\nThis function uses I/O Kit to identify the monitor associated with the specified display.\n\nIf I/O Kit can identify the monitor:\n\nIf the manufacturer has encoded a serial number for the monitor, the number is returned.\n\nIf there is no encoded serial number, 0x00000000 is returned.\n\nIf I/O Kit cannot identify the monitor:\n\nIf a monitor is connected to the display, 0x00000000 is returned.\n\nIf no monitor is connected to the display hardware, 0xFFFFFFFF is returned.\n\nNote that a serial number is meaningful only in conjunction with a specific vendor and product or model.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayRotation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455299-cgdisplayrotation",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe rotation angle of the display in degrees, or 0 if the display is not valid.\n\nDiscussion\n\nThis function returns the rotation angle of a display in a clockwise direction. For example, if the specified display is rotated clockwise 90 degrees, then this function returns 90.0. After a 90-degree clockwise rotation, the physical bottom of the display is on the left side and the physical top is on the right side.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayScreenSize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456599-cgdisplayscreensize",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe size of the specified display in millimeters, or 0 if the display is not valid.\n\nDiscussion\n\nIf Extended Display Identification Data (EDID) for the display device is not available, the size is estimated based on the device width and height in pixels from CGDisplayBounds(_:), with an assumed resolution of 2.835 pixels/mm or 72 dpi, a reasonable guess for displays predating EDID support.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayMirrorsDisplay(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454556-cgdisplaymirrorsdisplay",
    "html": "Parameters\ndisplay\n\nThe identifier of a secondary display in a mirroring set.\n\nReturn Value\n\nReturns the primary display in the mirroring set. Returns kCGNullDirectDisplay if the specified display is actually the primary display or is not in a mirroring set.\n\nDiscussion\n\nFor more information about display mirroring, see CGConfigureDisplayMirrorOfDisplay(_:_:_:).\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayModelNumber(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454149-cgdisplaymodelnumber",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nA model number for the monitor associated with the specified display, or a constant to indicate an exception—see the discussion below.\n\nDiscussion\n\nThis function uses I/O Kit to identify the monitor associated with the specified display. The return value depends on the following:\n\nIf I/O Kit can identify the monitor, the product ID code for the monitor is returned.\n\nIf I/O Kit can’t identify the monitor, kDisplayProductIDGeneric is returned.\n\nIf no monitor is connected, a value of 0xFFFFFFFF is returned.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayPrimaryDisplay(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454403-cgdisplayprimarydisplay",
    "html": "Parameters\ndisplay\n\nThe identifier of a display in a hardware mirror set.\n\nReturn Value\n\nThe primary display in the mirror set. If display is not hardware-mirrored, this function simply returns display.\n\nDiscussion\n\nIn hardware mirroring, the contents of a single framebuffer are rendered in two or more displays simultaneously. The mirrored displays are said to be in a hardware mirroring set.\n\nAt the discretion of the device driver, one of the displays in a hardware mirroring set is designated as the primary display. The device driver binds the drawing engine, hardware accelerator, and 3D engine to the primary display and directs all drawing operations to this display.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayIsStereo(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455025-cgdisplayisstereo",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, the specified display is running in a stereo graphics mode; otherwise, false.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayIsMain(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455448-cgdisplayismain",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, the specified display is currently the main display; otherwise, false.\n\nDiscussion\n\nFor information about the characteristics of a main display, see CGMainDisplayID().\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayIsAsleep(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454260-cgdisplayisasleep",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, the specified display is in sleep mode; otherwise, false.\n\nDiscussion\n\nA display is sleeping when its framebuffer and the attached monitor are in reduced power mode. A sleeping display is still considered to be a part of global display (desktop) space, but it is not drawable.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayIsInHWMirrorSet(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454506-cgdisplayisinhwmirrorset",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, the specified display is a member of a hardware mirroring set; otherwise, false.\n\nDiscussion\n\nWhen hardware mirroring is enabled, the contents of a single framebuffer are rendered in all displays in the hardware mirroring set. All drawing operations are directed to the primary display in the set—see CGDisplayPrimaryDisplay(_:).\n\nFor more information about display mirroring, see CGConfigureDisplayMirrorOfDisplay(_:_:_:).\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayIsOnline(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454476-cgdisplayisonline",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, the specified display is connected; otherwise, false.\n\nDiscussion\n\nA display is considered connected or online when the framebuffer hardware is connected to a monitor.\n\nYou can use this function to determine whether someone has plugged a display into the system while the main power was on. This hardware feature, called hot-plugging, may not be present on all displays.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayIsInMirrorSet(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455558-cgdisplayisinmirrorset",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, the specified display is a member of a software or hardware mirroring set; otherwise, false.\n\nDiscussion\n\nFor more information about display mirroring, see CGConfigureDisplayMirrorOfDisplay(_:_:_:).\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayIsBuiltin(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454566-cgdisplayisbuiltin",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, the specified display is considered to be a built-in display; otherwise, false.\n\nDiscussion\n\nPortable systems typically identify the internal LCD panel as a built-in display.\n\nNote that it is possible and reasonable for a system to have no displays marked as built-in. For example, a portable system running with the lid closed may report no built-in displays.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayIsAlwaysInMirrorSet(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456110-cgdisplayisalwaysinmirrorset",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, the specified display is in a mirroring set and cannot be removed from this set.\n\nDiscussion\n\nSome hardware configurations support the connection of auxiliary displays that always mirror the main display and therefore cannot be removed from the mirroring set to which they belong.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplaySetStereoOperation(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454316-cgdisplaysetstereooperation",
    "html": "Parameters\ndisplay\n\nThe identifier of the display being configured.\n\nstereo\n\nPass true if you want to enable stereo operation. To disable it, pass false.\n\nforceBlueLine\n\nWhen in stereo operation, a display may need to generate a special stereo sync signal as part of the video output. The sync signal consists of a blue line that occupies the first 25% of the last scan line (for the left eye view), and the first 75% of the last scan line (for the right eye view). The remainder of the scan line is black. To force the display to generate this sync signal, pass true; otherwise pass false.\n\noption\n\nA constant that specifies the scope of the display configuration changes. For more information, see Display Configuration Scopes.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nThe system normally detects the presence of a stereo window and automatically switches a display containing a stereo window to stereo operation. This function forces a display to stereo operation immediately, and sets options (blue line sync signal) when in stereo operation.\n\nOn success, the display resolution, mirroring mode, and available display modes may change due to hardware-specific capabilities and limitations. You should check these settings to verify that they are appropriate for your application.\n\nSee Also\nConfiguring Displays\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nDeprecated\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display."
  },
  {
    "title": "CGConfigureDisplayWithDisplayMode(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454273-cgconfiguredisplaywithdisplaymod",
    "html": "Parameters\nconfig\n\nA display configuration you aquire by calling CGBeginDisplayConfiguration(_:).\n\ndisplay\n\nThe identifier of the display to configure.\n\nmode\n\nA display mode to configure.\n\noptions\n\nReserved for future expansion. Pass NULL for now.\n\nReturn Value\n\nA result code. If the request to change modes is successful, the result is kCGErrorSuccess. For other possible values, see CGError.\n\nDiscussion\n\nThis function allows you to specify a display mode with which to configure the display using a transaction. Before using this function, call CGBeginDisplayConfiguration(_:) to acquire the display configuration token for the desired display. Call CGCompleteDisplayConfiguration(_:_:) to execute the transaction.\n\nUsing this function to change the mode of a display in a mirroring set might cause Quartz to adjust settings of the other displays in the set. When necessary, Quartz adjusts the bounds, resolutions, and depth of the displays to a safe mode with matching depth and the smallest enclosing size.\n\nSee Also\nConfiguring Displays\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nDeprecated\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display."
  },
  {
    "title": "CGDisplayIsActive(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455222-cgdisplayisactive",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, the specified display is active; otherwise, false.\n\nDiscussion\n\nAn active display is connected, awake, and available for drawing. In a hardware mirroring set, only the primary display is active.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGGetActiveDisplayList(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454603-cggetactivedisplaylist",
    "html": "Parameters\nmaxDisplays\n\nThe size of the activeDspys array. This value determines the maximum number of displays the list includes.\n\nactiveDspys\n\nA pointer to storage you provide for an array of display IDs. On return, the array contains a list of active displays. If you pass NULL, on return the display count contains the total number of active displays.\n\ndspyCnt\n\nA pointer to a display count variable you provide. On return, the display count contains the actual number of displays the function added to the activeDspys array. This value is at most maxDisplays.\n\nReturn Value\n\nA result code. To interpret the result code, see CGError.\n\nDiscussion\n\nThe first entry in the list of active displays is the main display. In case of mirroring, the first entry is the largest drawable display or, if all are the same size, the display with the greatest pixel depth.\n\nNote that when using hardware mirroring between displays, only the primary display is active and appears in the list. When using software mirroring, all the mirrored displays are active and appear in the list. For more information about mirroring, see CGConfigureDisplayMirrorOfDisplay(_:_:_:).\n\nSee Also\nFinding Displays\nfunc CGMainDisplayID() -> CGDirectDisplayID\nReturns the display ID of the main display.\nfunc CGGetOnlineDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are online (active, mirrored, or sleeping).\nfunc CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that corresponds to the bits set in an OpenGL display mask.\nfunc CGGetDisplaysWithPoint(CGPoint, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of online displays with bounds that include the specified point.\nfunc CGGetDisplaysWithRect(CGRect, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of online displays with bounds that intersect the specified rectangle.\nfunc CGOpenGLDisplayMaskToDisplayID(CGOpenGLDisplayMask) -> CGDirectDisplayID\nMaps an OpenGL display mask to a display ID.\nfunc CGDisplayIDToOpenGLDisplayMask(CGDirectDisplayID) -> CGOpenGLDisplayMask\nMaps a display ID to an OpenGL display mask."
  },
  {
    "title": "CGGetOnlineDisplayList(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454964-cggetonlinedisplaylist",
    "html": "Parameters\nmaxDisplays\n\nThe size of the onlineDspys array. This value determines the maximum number of display IDs that can be returned.\n\nonlineDspys\n\nA pointer to storage provided by the caller for an array of display IDs. On return, the array contains a list of the online displays. If you pass NULL, on return the display count contains the total number of online displays.\n\ndspyCnt\n\nA pointer to a display count variable provided by the caller. On return, the display count contains the actual number of displays returned in the onlineDspys array. This value is at most maxDisplays.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nIf the framebuffer hardware is connected, a display is considered connected or online.\n\nWhen hardware mirroring is used, a display can be online but not active or drawable. Programs that manipulate display settings (such as gamma tables) need access to all displays, including hardware mirrors, which are not drawable.\n\nSee Also\nFinding Displays\nfunc CGMainDisplayID() -> CGDirectDisplayID\nReturns the display ID of the main display.\nfunc CGGetActiveDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are active for drawing.\nfunc CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that corresponds to the bits set in an OpenGL display mask.\nfunc CGGetDisplaysWithPoint(CGPoint, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of online displays with bounds that include the specified point.\nfunc CGGetDisplaysWithRect(CGRect, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of online displays with bounds that intersect the specified rectangle.\nfunc CGOpenGLDisplayMaskToDisplayID(CGOpenGLDisplayMask) -> CGDirectDisplayID\nMaps an OpenGL display mask to a display ID.\nfunc CGDisplayIDToOpenGLDisplayMask(CGDirectDisplayID) -> CGOpenGLDisplayMask\nMaps a display ID to an OpenGL display mask."
  },
  {
    "title": "CGGetDisplaysWithOpenGLDisplayMask(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454234-cggetdisplayswithopengldisplayma",
    "html": "Parameters\nmask\n\nAn OpenGL display mask that identifies one or more displays.\n\nmaxDisplays\n\nThe size of the dspys array. This value determines the maximum number of displays the list includes.\n\ndspys\n\nA pointer to storage you provide for an array of display IDs. On return, the array contains a list of displays that corresponds to the bits set in the mask. If you pass NULL, on return the display count contains the total number of displays specified in the mask.\n\ndspyCnt\n\nA pointer to a display count variable you provide. On return, the display count contains the actual number of displays the function added to the dspys array. This value is at most maxDisplays.\n\nReturn Value\n\nA result code. To interpret the result code, see CGError.\n\nSee Also\nFinding Displays\nfunc CGMainDisplayID() -> CGDirectDisplayID\nReturns the display ID of the main display.\nfunc CGGetOnlineDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are online (active, mirrored, or sleeping).\nfunc CGGetActiveDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are active for drawing.\nfunc CGGetDisplaysWithPoint(CGPoint, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of online displays with bounds that include the specified point.\nfunc CGGetDisplaysWithRect(CGRect, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of online displays with bounds that intersect the specified rectangle.\nfunc CGOpenGLDisplayMaskToDisplayID(CGOpenGLDisplayMask) -> CGDirectDisplayID\nMaps an OpenGL display mask to a display ID.\nfunc CGDisplayIDToOpenGLDisplayMask(CGDirectDisplayID) -> CGOpenGLDisplayMask\nMaps a display ID to an OpenGL display mask."
  },
  {
    "title": "CGGetDisplaysWithRect(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456071-cggetdisplayswithrect",
    "html": "Parameters\nrect\n\nThe location and size of a rectangle in the global display coordinate space. The origin is the upper-left corner of the main display.\n\nmaxDisplays\n\nThe size of the dspys array. This value determines the maximum number of displays that can be returned in the dspys parameter. Generally, you should specify a number greater than 0 for this parameter. If you specify 0, the value returned in dspyCnt is undefined and this function sets the dspys parameter to NULL.\n\ndspys\n\nA pointer to storage provided by the caller for an array of display IDs. On return, the array contains a list of displays whose bounds intersect the specified rectangle.\n\ndspyCnt\n\nA pointer to a display count variable provided by the caller. On return, this variable contains the number of displays that were returned in the dspys parameter. You must provide a non-NULL value for this parameter.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nIf the dspys array is NULL, this function ignores the maxDisplays parameter. If the maxDisplays parameter is 0, this function ignores the dspys array. In any case, this function fills in the dspyCnt pointer with the number of displays that intersect the specified rectangle.\n\nSee Also\nFinding Displays\nfunc CGMainDisplayID() -> CGDirectDisplayID\nReturns the display ID of the main display.\nfunc CGGetOnlineDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are online (active, mirrored, or sleeping).\nfunc CGGetActiveDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are active for drawing.\nfunc CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that corresponds to the bits set in an OpenGL display mask.\nfunc CGGetDisplaysWithPoint(CGPoint, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of online displays with bounds that include the specified point.\nfunc CGOpenGLDisplayMaskToDisplayID(CGOpenGLDisplayMask) -> CGDirectDisplayID\nMaps an OpenGL display mask to a display ID.\nfunc CGDisplayIDToOpenGLDisplayMask(CGDirectDisplayID) -> CGOpenGLDisplayMask\nMaps a display ID to an OpenGL display mask."
  },
  {
    "title": "CGOpenGLDisplayMaskToDisplayID(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455386-cgopengldisplaymasktodisplayid",
    "html": "Parameters\nmask\n\nThe OpenGL display mask to be converted.\n\nReturn Value\n\nThe display ID assigned to the specified display mask, or kCGNullDirectDisplay if no display matches the mask.\n\nDiscussion\n\nOpenGL sometimes identifies a display using a bitmask with one bit set. This function maps such a display mask to the corresponding display ID. If you pass in a mask with multiple bits set, this function returns a display ID matching one of these bits.\n\nSee Also\nFinding Displays\nfunc CGMainDisplayID() -> CGDirectDisplayID\nReturns the display ID of the main display.\nfunc CGGetOnlineDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are online (active, mirrored, or sleeping).\nfunc CGGetActiveDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are active for drawing.\nfunc CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that corresponds to the bits set in an OpenGL display mask.\nfunc CGGetDisplaysWithPoint(CGPoint, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of online displays with bounds that include the specified point.\nfunc CGGetDisplaysWithRect(CGRect, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of online displays with bounds that intersect the specified rectangle.\nfunc CGDisplayIDToOpenGLDisplayMask(CGDirectDisplayID) -> CGOpenGLDisplayMask\nMaps a display ID to an OpenGL display mask."
  },
  {
    "title": "CGDisplayMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaymode",
    "html": "Overview\n\nA display mode is a set of properties (such as width, height, pixel depth, and refresh rate), and options (such as stretched LCD panel filling). For more information see Creating and Managing Display Modes or Getting Information About a Display Mode.\n\nTopics\nInstance Properties\nvar height: Int\nReturns the height of the specified display mode.\nvar ioDisplayModeID: Int32\nReturns the I/O Kit display mode ID of the specified display mode.\nvar ioFlags: UInt32\nReturns the I/O Kit flags of the specified display mode.\nvar pixelHeight: Int\nvar pixelWidth: Int\nvar refreshRate: Double\nReturns the refresh rate of the specified display mode.\nvar width: Int\nReturns the width of the specified display mode.\nType Properties\nclass var typeID: CFTypeID\nReturns the type identifier of Quartz display modes.\nInstance Methods\nvar pixelEncoding: CFString?\nReturns the pixel encoding of the specified display mode.\nDeprecated\nfunc isUsableForDesktopGUI() -> Bool\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface."
  },
  {
    "title": "CGDisplayBlendFraction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplayblendfraction",
    "html": "Discussion\n\nThe blend fraction ranges from 0 (no color) to 1 (full intensity). If you specify 0, the blend color is not applied. If you specify 1, the user sees only the blend color on the screen.\n\nIn a fade operation, Quartz blends a color specified by the application with the current contents of the framebuffer. The blend color can be applied both at the beginning and at the end of a fade operation.\n\nColor blending during a fade operation is analogous to alpha blending in Quartz 2D, and the appearance is similar. However, the implementation is quite different. In a fade operation, the blend color is applied at the very end of the graphics pipeline, when the framebuffer is transferred to video output.\n\nFor example, the Universal Access preference panel in macOS allows you to select a flashing screen effect (sometimes called a visual bell) to accompany the system alert sound. When you select this option, the system uses a Quartz fade operation to produce the flash. The blend color is applied using a blend fraction of 0.5 or 50%."
  },
  {
    "title": "CGDisplayFadeReservationToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplayfadereservationtoken",
    "html": "Discussion\n\nQuartz lets you reserve the display hardware to perform a fade operation. Fade reservations are valid for up to 15 seconds. Only one token is needed for both fade-out and fade-in.\n\nYou should release a fade reservation immediately when you no longer need it. If the reservation expires, releasing it is safe but not necessary."
  },
  {
    "title": "CGDisplayFadeInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplayfadeinterval",
    "html": "Discussion\n\nQuartz uses this data type to specify the duration of both fade-out and fade-in operations. Values may range from 0 to kCGMaxDisplayReservationInterval seconds. A 0 value means fade immediately—see CGDisplayFade(_:_:_:_:_:_:_:_:)."
  },
  {
    "title": "CGDisplayErr | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplayerr",
    "html": "Deprecated\n\nUse CGError instead."
  },
  {
    "title": "CGDisplayCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaycount",
    "html": "Deprecated\n\nUse uint32_t instead.\n\nDiscussion\n\nQuartz uses CGDisplayCount to represent a count of either the current or the maximum number of displays in a display list. For example, see the function CGGetActiveDisplayList(_:_:_:)."
  },
  {
    "title": "CGDirectDisplayID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdirectdisplayid",
    "html": "Discussion\n\nIn Quartz, the term display refers to a graphics hardware system consisting of a framebuffer, a color correction (gamma) table, and possibly an attached monitor. If no monitor is attached, a display is characterized as offline.\n\nWhen a monitor is attached, Quartz assigns a unique display identifier (ID). A display ID can persist across processes and typically remains constant until the machine is restarted.\n\nWhen assigning a display ID, Quartz considers the following parameters:\n\nVendor\n\nModel\n\nSerial number\n\nPosition in the I/O Kit registry\n\nFor information about how to obtain a display ID, see Finding Displays."
  },
  {
    "title": "CGDisplayConfigRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplayconfigref",
    "html": "Discussion\n\nThis data type makes it possible to:\n\nCreate a new display configuration transaction using the function CGBeginDisplayConfiguration(_:)\n\nRecord a set of configuration changes, each bound to one or more displays\n\nApply the changes in a single transaction using the function CGCompleteDisplayConfiguration(_:_:), or discard the changes using the function CGCancelDisplayConfiguration(_:)\n\nThere are no restrictions on the order in which you accumulate configuration changes in a transaction.\n\nConfiguration changes sometimes conflict with each other. For example, a new origin might be rendered invalid by a subsequent configuration change.\n\nIf possible, Quartz uses a “best fit” strategy to resolve conflicts between configuration changes. For example, when you change the resolution of a single display in a two-display system, Quartz automatically retiles the displays to prevent separation or overlap of the adjoining edges."
  },
  {
    "title": "init(keyboardEventSource:virtualKey:keyDown:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1456564-init",
    "html": "Parameters\nsource\n\nAn event source taken from another event, or NULL.\n\nvirtualKey\n\nThe virtual key code for the event.\n\nkeyDown\n\nPass true to specify that the key position is down. To specify that the key position is up, pass false. This value is used to determine the type of the keyboard event—see CGEventType.\n\nReturn Value\n\nA new keyboard event, or NULL if the event could not be created. When you no longer need the event, you should release it using the function CFRelease.\n\nDiscussion\n\nAll keystrokes needed to generate a character must be entered, including modifier keys. For example, to produce a 'Z', the SHIFT key must be down, the 'z' key must go down, and then the SHIFT and 'z' key must be released:\n\nCGEventRef event1, event2, event3, event4;\nevent1 = CGEventCreateKeyboardEvent (NULL, (CGKeyCode)56, true);\nevent2 = CGEventCreateKeyboardEvent (NULL, (CGKeyCode)6, true);\nevent3 = CGEventCreateKeyboardEvent (NULL, (CGKeyCode)6, false);\nevent4 = CGEventCreateKeyboardEvent (NULL, (CGKeyCode)56, false);\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "keyboardGetUnicodeString(maxStringLength:actualStringLength:unicodeString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1456120-keyboardgetunicodestring",
    "html": "Parameters\nevent\n\nThe keyboard event to access.\n\nmaxStringLength\n\nThe length of the array you provide in the unicodeString parameter.\n\nactualStringLength\n\nA pointer to a UniCharCount variable. On return, the variable contains the actual count of Unicode characters in the event data.\n\nunicodeString\n\nA pointer to a UniChar array. You are responsible for allocating storage for the array. On return, your array contains the Unicode string associated with the specified event.\n\nDiscussion\n\nWhen you call this function and specify a NULL string or a maximum string length of 0, the function still returns the actual count of Unicode characters in the event data.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "setSource(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455500-setsource",
    "html": "Parameters\nevent\n\nThe event to access.\n\nsource\n\nThe new event source of the specified event.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "location | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455788-location",
    "html": "Parameters\nevent\n\nThe mouse event to locate.\n\nReturn Value\n\nThe current location of the specified mouse event in global display coordinates.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "CGConfigureDisplayMirrorOfDisplay(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454531-cgconfiguredisplaymirrorofdispla",
    "html": "Parameters\nconfigRef\n\nA display configuration, acquired by calling CGBeginDisplayConfiguration(_:).\n\ndisplay\n\nThe identifier of the display to add to a mirroring set.\n\nmasterDisplay\n\nA display in a mirroring set, or kCGNullDirectDisplay to disable mirroring. To specify the main display, use CGMainDisplayID().\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nDisplay mirroring and display matte generation are implemented either in hardware (preferred) or software, at the discretion of the device driver.\n\nHardware mirroring\n\nWith hardware mirroring enabled, all drawing is directed to the primary display—see CGDisplayPrimaryDisplay(_:).\n\nIf the device driver selects hardware matte generation, the display bounds and row-bytes values are adjusted to reflect the active drawable area.\n\nSoftware mirroring\n\nIn this form of mirroring, identical content is drawn into each display in the mirroring set. Applications that use the window system need not be concerned about mirroring, as the window system takes care of all flushing of window content to the appropriate displays.\n\nApplications that draw directly to the display, as with display capture, must make sure to draw the same content to all mirrored displays in a software mirror set. When drawing to software mirrored displays using a full screen OpenGL context (not drawing through a window), you should create shared OpenGL contexts for each display and rerender for each display.\n\nYou can use the function CGGetActiveDisplayList(_:_:_:) to determine which displays are active, or drawable. This automatically gives your application the correct view of the current displays.\n\nSee Also\nConfiguring Displays\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nDeprecated\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display."
  },
  {
    "title": "CGDisplayCapture(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456259-cgdisplaycapture",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to capture.\n\nReturn Value\n\nA Core Graphics result code. To interpret the result code, see CGError.\n\nDiscussion\n\nWhen an application captures a display, Quartz doesn’t allow other applications and system services to use the display or change its configuration.\n\nIf hardware or software mirroring is in effect, the easiest way to capture the primary display and all mirrored displays is to use the function CGCaptureAllDisplays(). In case of software mirroring, applications that draw directly to the display must make sure to draw the same content to all displays in the mirror set.\n\nSee Also\nCapturing and Releasing Displays\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGDisplayIsCaptured(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "CGDisplayCaptureWithOptions(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454934-cgdisplaycapturewithoptions",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to capture.\n\noptions\n\nThe options to use. See CGCaptureOptions.\n\nReturn Value\n\nA result code. To interpret the result code, see CGError.\n\nDiscussion\n\nThis function allows you to specify one or more options to use during capture of a display.\n\nSee Also\nCapturing and Releasing Displays\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGDisplayIsCaptured(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "CGDisplayRelease(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455685-cgdisplayrelease",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be released.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nSee Also\nCapturing and Releasing Displays\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayIsCaptured(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "CGDisplayIsCaptured(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1562061-cgdisplayiscaptured",
    "html": "Deprecated\n\nThere is no replacement.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nIf true, the specified display is captured; otherwise, false.\n\nSee Also\nCapturing and Releasing Displays\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "CGCaptureAllDisplays() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455221-cgcapturealldisplays",
    "html": "Return Value\n\nA result code. To interpret the result code, see CGError.\n\nDiscussion\n\nThis function captures all attached displays in a single operation. When an application captures a display, Quartz doesn’t allow other applications and system services to use the display or change its configuration. This can provide a more immersive environment for your application.\n\nSee Also\nCapturing and Releasing Displays\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGDisplayIsCaptured(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "CGShieldingWindowID(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454279-cgshieldingwindowid",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe window ID of the shield window for the specified display, or NULL if the display is not shielded.\n\nDiscussion\n\nTo prevent updates by direct-to-screen programs, Quartz draws a shield window that fills the entire screen of a captured display.\n\nThis function is not recommended for use in applications. Note that the graphics context associated with this window is not a full-featured drawing context. To get a full-featured drawing context for a captured display, you should use the function CGDisplayGetDrawingContext(_:).\n\nSee Also\nCapturing and Releasing Displays\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGDisplayIsCaptured(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "CGReleaseAllDisplays() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454901-cgreleasealldisplays",
    "html": "Return Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nThis function releases all captured displays and restores the display modes to the user's preferences. It may be used in conjunction with any of the functions that capture displays, such as CGCaptureAllDisplays().\n\nSee Also\nCapturing and Releasing Displays\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGDisplayIsCaptured(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "CGRestorePermanentDisplayConfiguration() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456402-cgrestorepermanentdisplayconfigu",
    "html": "Discussion\n\nThis function provides a convenient way to restore the permanent display configuration.\n\nApplications that temporarily change the display configuration—such as applications and games that switch to full-screen display mode—can use this function to undo the changes.\n\nSee Also\nConfiguring Displays\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nDeprecated\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display."
  },
  {
    "title": "CGConfigureDisplayMode(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1543535-cgconfiguredisplaymode",
    "html": "Deprecated\n\nUse CGConfigureDisplayWithDisplayMode(_:_:_:_:) instead.\n\nParameters\nconfigRef\n\nA display configuration, acquired by calling CGBeginDisplayConfiguration(_:).\n\ndisplay\n\nThe identifier of the display being configured.\n\nmode\n\nA display mode dictionary (see the discussion below).\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nA display mode is a set of properties such as width, height, pixel depth, and refresh rate, and options such as stretched LCD panel filling.\n\nThe display mode you provide must be one of the following:\n\nA dictionary returned by one of the CGDisplayBestMode functions, such as CGDisplayBestModeForParameters(_:_:_:_:_:).\n\nA dictionary in the array returned by CGDisplayAvailableModes(_:).\n\nIf you use this function to change the mode of a display in a mirroring set, Quartz may adjust the bounds, resolutions, and depth of the other displays in the set to a safe mode, with matching depth and the smallest enclosing size.\n\nSpecial Considerations\n\nThis deprecated function takes as a parameter a display mode dictionary. Starting in OS X v10.6, display mode dictionaries have been replaced by the CGDisplayMode opaque type. For information on the CGDisplayMode opaque type, see Getting Information About a Display Mode.\n\nSee Also\nConfiguring Displays\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display."
  },
  {
    "title": "CGConfigureDisplayOrigin(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454090-cgconfiguredisplayorigin",
    "html": "Parameters\nconfigRef\n\nA display configuration that you acquire by calling CGBeginDisplayConfiguration(_:).\n\ndisplay\n\nThe identifier of the display to configure.\n\nx\n\nThe desired x-coordinate for the upper-left corner of the display.\n\ny\n\nThe desired y-coordinate for the upper-left corner of the display.\n\nReturn Value\n\nA result code. If the request to configure the origin of the display is successful, the result is kCGErrorSuccess. For other possible values, see CGError.\n\nDiscussion\n\nIn Quartz, the upper-left corner of a display is the origin. You specify the origin of a display in the global display coordinate space. The origin of the main or primary display is (0,0).\n\nThe placement of the new origin is as close as possible to the requested location, without overlapping or leaving a gap between displays.\n\nIf you use this function to change the origin of a mirrored display, the mirrored set might not include the display.\n\nSee Also\nConfiguring Displays\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nDeprecated\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display."
  },
  {
    "title": "CGEventType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventtype",
    "html": "Overview\n\nThese constants are used:\n\nIn the functions tapCreate(tap:place:options:eventsOfInterest:callback:userInfo:) and tapCreateForPSN(processSerialNumber:place:options:eventsOfInterest:callback:userInfo:) to specify the events of interest for the new event tap.\n\nTo indicate the event type passed to your event tap callback function.\n\nIn the function init(mouseEventSource:mouseType:mouseCursorPosition:mouseButton:) to specify the type of mouse event.\n\nIn the functions type and CGEventSetType(_:_:) to identify the event type.\n\nIn the functions counterForEventType(_:eventType:) and secondsSinceLastEventType(_:eventType:) to indicate the event type.\n\nNote that tablet devices may generate mouse events with embedded tablet data, or tablet pointer and proximity events. Tablet mouse events allow tablets to be used with applications that are not tablet-aware.\n\nTopics\nConstants\ncase null\nSpecifies a null event.\ncase leftMouseDown\nSpecifies a mouse down event with the left button.\ncase leftMouseUp\nSpecifies a mouse up event with the left button.\ncase rightMouseDown\nSpecifies a mouse down event with the right button.\ncase rightMouseUp\nSpecifies a mouse up event with the right button.\ncase mouseMoved\nSpecifies a mouse moved event.\ncase leftMouseDragged\nSpecifies a mouse drag event with the left button down.\ncase rightMouseDragged\nSpecifies a mouse drag event with the right button down.\ncase keyDown\nSpecifies a key down event.\ncase keyUp\nSpecifies a key up event.\ncase flagsChanged\nSpecifies a key changed event for a modifier or status key.\ncase scrollWheel\nSpecifies a scroll wheel moved event.\ncase tabletPointer\nSpecifies a tablet pointer event.\ncase tabletProximity\nSpecifies a tablet proximity event.\ncase otherMouseDown\nSpecifies a mouse down event with one of buttons 2-31.\ncase otherMouseUp\nSpecifies a mouse up event with one of buttons 2-31.\ncase otherMouseDragged\nSpecifies a mouse drag event with one of buttons 2-31 down.\ncase tapDisabledByTimeout\nSpecifies an event indicating the event tap is disabled because of timeout.\ncase tapDisabledByUserInput\nSpecifies an event indicating the event tap is disabled because of user input.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGScrollEventUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgscrolleventunit",
    "html": "Overview\n\nYou may pass one of these constants to the function CGEventCreateScrollWheelEvent to specify the unit of measurement for the event. The constant kCGScrollEventUnitPixel produces an event that most applications interpret as a smooth scrolling event. By default, the scale is about ten pixels per line. You can alter the scale with the function CGEventSourceSetPixelsPerLine(_:_:).\n\nTopics\nConstants\ncase pixel\nSpecifies that the unit of measurement is pixels.\ncase line\nSpecifies that the unit of measurement is lines.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGConfigureDisplayStereoOperation(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456308-cgconfiguredisplaystereooperatio",
    "html": "Parameters\nconfigRef\n\nA display configuration, acquired by calling CGBeginDisplayConfiguration(_:).\n\ndisplay\n\nThe identifier of the display being configured.\n\nstereo\n\nPass true if you want to enable stereo operation. To disable it, pass false.\n\nforceBlueLine\n\nWhen in stereo operation, a display may need to generate a special stereo sync signal as part of the video output. The sync signal consists of a blue line which occupies the first 25% of the last scan line for the left eye view, and the first 75% of the last scan line for the right eye view. The remainder of the scan line is black. To force the display to generate this sync signal, pass true; otherwise, pass false.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nThe system normally detects the presence of a stereo window and automatically switches a display containing a stereo window to stereo operation. This function provides a mechanism to force a display to stereo operation, and to set options (blue line sync signal) when in stereo operation.\n\nOn success, the display resolution, mirroring mode, and available display modes may change due to hardware-specific capabilities and limitations. You should check these settings to verify that they are appropriate for your application.\n\nSee Also\nConfiguring Displays\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nDeprecated\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display."
  },
  {
    "title": "CGMouseButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmousebutton",
    "html": "Overview\n\nQuartz supports up to 32 mouse buttons. The first three buttons are specified using these three constants. Additional buttons are specified in USB order using the integers 3 to 31.\n\nThese constants are used:\n\nIn the function init(mouseEventSource:mouseType:mouseCursorPosition:mouseButton:) to specify the button that’s changing state.\n\nIn the function buttonState(_:button:) to specify the button that’s being tested.\n\nTo specify the value of the kCGMouseEventButtonNumber event field when modifying an event.\n\nTopics\nConstants\ncase left\ncase right\ncase center\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGEventMouseSubtype | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventmousesubtype",
    "html": "Overview\n\nTablets may generate specially annotated mouse events that contain values associated with the CGEventField.mouseEventSubtype event field. To learn how to set these values, see the function setIntegerValueField(_:value:).\n\nTopics\nConstants\ncase defaultType\nSpecifies that the event is an ordinary mouse event, and does not contain additional tablet device information.\ncase tabletPoint\nSpecifies that the mouse event originated from a tablet device, and that the various kCGTabletEvent field selectors may be used to obtain tablet-specific data from the mouse event.\ncase tabletProximity\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGEventTapPlacement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventtapplacement",
    "html": "Overview\n\nEvent taps may be inserted at a specified location at the head of pre-existing filters, or appended after any pre-existing filters.\n\nTopics\nConstants\ncase headInsertEventTap\nSpecifies that a new event tap should be inserted before any pre-existing event taps at the same location.\ncase tailAppendEventTap\nSpecifies that a new event tap should be inserted after any pre-existing event taps at the same location.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGEventTapOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventtapoptions",
    "html": "Overview\n\nWhen you create an event tap, you indicate whether it is a passive listener or active event filter. A passive listener receives events but cannot modify or divert them. An active filter may pass an event through unmodified, modify an event, or discard an event.\n\nTopics\nConstants\ncase defaultTap\ncase listenOnly\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGEventTapLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventtaplocation",
    "html": "Overview\n\nIn addition to the three tapping points described above, an event tap may also be placed where annotated events are delivered to a specific application. For more information, see the function tapCreateForPSN(processSerialNumber:place:options:eventsOfInterest:callback:userInfo:).\n\nTopics\nConstants\ncase cghidEventTap\nSpecifies that an event tap is placed at the point where HID system events enter the window server.\ncase cgSessionEventTap\nSpecifies that an event tap is placed at the point where HID system and remote control events enter a login session.\ncase cgAnnotatedSessionEventTap\nSpecifies that an event tap is placed at the point where session events have been annotated to flow to an application.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGEventField | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventfield",
    "html": "Overview\n\nThese constants are used as keys to access certain specialized event fields when using low-level accessor functions such as getIntegerValueField(_:), setIntegerValueField(_:value:), getDoubleValueField(_:), and setDoubleValueField(_:value:).\n\nTopics\nConstants\ncase mouseEventNumber\nKey to access an integer field that contains the mouse button event number. Matching mouse-down and mouse-up events will have the same event number.\ncase mouseEventClickState\nKey to access an integer field that contains the mouse button click state. A click state of 1 represents a single click. A click state of 2 represents a double-click. A click state of 3 represents a triple-click.\ncase mouseEventPressure\nKey to access a double field that contains the mouse button pressure. The pressure value may range from 0 to 1, with 0 representing the mouse being up. This value is commonly set by tablet pens mimicking a mouse.\ncase mouseEventButtonNumber\nKey to access an integer field that contains the mouse button number. For information about the possible values, see CGMouseButton.\ncase mouseEventDeltaX\nKey to access an integer field that contains the horizontal mouse delta since the last mouse movement event.\ncase mouseEventDeltaY\nKey to access an integer field that contains the vertical mouse delta since the last mouse movement event.\ncase mouseEventInstantMouser\nKey to access an integer field. The value is non-zero if the event should be ignored by the Inkwell subsystem.\ncase mouseEventSubtype\nKey to access an integer field that encodes the mouse event subtype as a kCFNumberIntType.\ncase keyboardEventAutorepeat\nKey to access an integer field, non-zero when this is an autorepeat of a key-down, and zero otherwise.\ncase keyboardEventKeycode\nKey to access an integer field that contains the virtual keycode of the key-down or key-up event.\ncase keyboardEventKeyboardType\nKey to access an integer field that contains the keyboard type identifier.\ncase scrollWheelEventDeltaAxis1\nKey to access an integer field that contains scrolling data. This field typically contains the change in vertical position since the last scrolling event from a Mighty Mouse scroller or a single-wheel mouse scroller.\ncase scrollWheelEventDeltaAxis2\nKey to access an integer field that contains scrolling data. This field typically contains the change in horizontal position since the last scrolling event from a Mighty Mouse scroller.\ncase scrollWheelEventDeltaAxis3\nThis field is not used.\ncase scrollWheelEventFixedPtDeltaAxis1\nKey to access a field that contains scrolling data. The scrolling data represents a line-based or pixel-based change in vertical position since the last scrolling event from a Mighty Mouse scroller or a single-wheel mouse scroller. The scrolling data uses a fixed-point 16.16 signed integer format. For example, if the field contains a value of 1.0, the integer 0x00010000 is returned by CGEventGetIntegerValueField. If this key is passed to CGEventGetDoubleValueField, the fixed-point value is converted to a double value.\ncase scrollWheelEventFixedPtDeltaAxis2\nKey to access a field that contains scrolling data. The scrolling data represents a line-based or pixel-based change in horizontal position since the last scrolling event from a Mighty Mouse scroller. The scrolling data uses a fixed-point 16.16 signed integer format. For example, if the field contains a value of 1.0, the integer 0x00010000 is returned by CGEventGetIntegerValueField. If this key is passed to CGEventGetDoubleValueField, the fixed-point value is converted to a double value.\ncase scrollWheelEventFixedPtDeltaAxis3\nThis field is not used.\ncase scrollWheelEventPointDeltaAxis1\nKey to access an integer field that contains pixel-based scrolling data. The scrolling data represents the change in vertical position since the last scrolling event from a Mighty Mouse scroller or a single-wheel mouse scroller.\ncase scrollWheelEventPointDeltaAxis2\nKey to access an integer field that contains pixel-based scrolling data. The scrolling data represents the change in horizontal position since the last scrolling event from a Mighty Mouse scroller.\ncase scrollWheelEventPointDeltaAxis3\nThis field is not used.\ncase scrollWheelEventInstantMouser\nKey to access an integer field that indicates whether the event should be ignored by the Inkwell subsystem. If the value is non-zero, the event should be ignored.\ncase tabletEventPointX\nKey to access an integer field that contains the absolute X coordinate in tablet space at full tablet resolution.\ncase tabletEventPointY\nKey to access an integer field that contains the absolute Y coordinate in tablet space at full tablet resolution.\ncase tabletEventPointZ\nKey to access an integer field that contains the absolute Z coordinate in tablet space at full tablet resolution.\ncase tabletEventPointButtons\nKey to access an integer field that contains the tablet button state. Bit 0 is the first button, and a set bit represents a closed or pressed button. Up to 16 buttons are supported.\ncase tabletEventPointPressure\nKey to access a double field that contains the tablet pen pressure. A value of 0.0 represents no pressure, and 1.0 represents maximum pressure.\ncase tabletEventTiltX\nKey to access a double field that contains the horizontal tablet pen tilt. A value of 0.0 represents no tilt, and 1.0 represents maximum tilt.\ncase tabletEventTiltY\nKey to access a double field that contains the vertical tablet pen tilt. A value of 0.0 represents no tilt, and 1.0 represents maximum tilt.\ncase tabletEventRotation\nKey to access a double field that contains the tablet pen rotation.\ncase tabletEventTangentialPressure\nKey to access a double field that contains the tangential pressure on the device. A value of 0.0 represents no pressure, and 1.0 represents maximum pressure.\ncase tabletEventDeviceID\nKey to access an integer field that contains the system-assigned unique device ID.\ncase tabletEventVendor1\nKey to access an integer field that contains a vendor-specified value.\ncase tabletEventVendor2\nKey to access an integer field that contains a vendor-specified value.\ncase tabletEventVendor3\nKey to access an integer field that contains a vendor-specified value.\ncase tabletProximityEventVendorID\nKey to access an integer field that contains the vendor-defined ID, typically the USB vendor ID.\ncase tabletProximityEventTabletID\nKey to access an integer field that contains the vendor-defined tablet ID, typically the USB product ID.\ncase tabletProximityEventPointerID\nKey to access an integer field that contains the vendor-defined ID of the pointing device.\ncase tabletProximityEventDeviceID\nKey to access an integer field that contains the system-assigned device ID.\ncase tabletProximityEventSystemTabletID\nKey to access an integer field that contains the system-assigned unique tablet ID.\ncase tabletProximityEventVendorPointerType\nKey to access an integer field that contains the vendor-assigned pointer type.\ncase tabletProximityEventVendorPointerSerialNumber\nKey to access an integer field that contains the vendor-defined pointer serial number.\ncase tabletProximityEventVendorUniqueID\nKey to access an integer field that contains the vendor-defined unique ID.\ncase tabletProximityEventCapabilityMask\nKey to access an integer field that contains the device capabilities mask.\ncase tabletProximityEventPointerType\nKey to access an integer field that contains the pointer type.\ncase tabletProximityEventEnterProximity\nKey to access an integer field that indicates whether the pen is in proximity to the tablet. The value is non-zero if the pen is in proximity to the tablet and zero when leaving the tablet.\ncase eventTargetProcessSerialNumber\nKey to access a field that contains the event target process serial number. The value is a 64-bit long word.\ncase eventTargetUnixProcessID\nKey to access a field that contains the event target Unix process ID.\ncase eventSourceUnixProcessID\nKey to access a field that contains the event source Unix process ID.\ncase eventSourceUserData\nKey to access a field that contains the event source user-supplied data, up to 64 bits.\ncase eventSourceUserID\nKey to access a field that contains the event source Unix effective UID.\ncase eventSourceGroupID\nKey to access a field that contains the event source Unix effective GID.\ncase eventSourceStateID\nKey to access a field that contains the event source state ID used to create this event.\ncase scrollWheelEventIsContinuous\nKey to access an integer field that indicates whether a scrolling event contains continuous, pixel-based scrolling data. The value is non-zero when the scrolling data is pixel-based and zero when the scrolling data is line-based.\ncase mouseEventWindowUnderMousePointer\ncase mouseEventWindowUnderMousePointerThatCanHandleThisEvent\ncase scrollWheelEventMomentumPhase\ncase scrollWheelEventScrollCount\ncase scrollWheelEventScrollPhase\nEnumeration Cases\ncase mouseEventWindowUnderMousePointer\ncase mouseEventWindowUnderMousePointerThatCanHandleThisEvent\ncase scrollWheelEventMomentumPhase\ncase scrollWheelEventScrollCount\ncase scrollWheelEventScrollPhase\ncase eventUnacceleratedPointerMovementX\ncase eventUnacceleratedPointerMovementY\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGEventSuppressionState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsuppressionstate",
    "html": "Overview\n\nThese constants specify the types of event suppression intervals during which an event filter is applied after posting an event.\n\nTopics\nConstants\ncase eventSuppressionStateSuppressionInterval\nSpecifies that certain local hardware events may be suppressed for a short interval after posting an event.\ncase eventSuppressionStateRemoteMouseDrag\nSpecifies that certain local hardware events may be suppressed during a mouse drag operation (mouse movement with the left or only mouse button down).\ncase numberOfEventSuppressionStates\nEnumeration Cases\ncase numberOfEventSuppressionStates\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGEventSourceStateID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsourcestateid",
    "html": "Overview\n\nA source state refers to a global event state table. These tables contain accumulated information on modifier flag state, keyboard key state, mouse button state, and related internal parameters placed in effect by posting events with associated sources.\n\nTwo pre-existing event state tables are defined:\n\nThe kCGEventSourceStateCombinedSessionState table reflects the combined state of all event sources posting to the current user login session. If your program is posting events from within a login session, you should use this source state when you create an event source.\n\nThe kCGEventSourceStateHIDSystemState table reflects the combined state of all hardware event sources posting from the HID system. If your program is a daemon or a user space device driver interpreting hardware state and generating events, you should use this source state when you create an event source.\n\nSpecialized applications such as remote control programs may want to generate and track event source state independent of other processes. These programs should use the kCGEventSourceStatePrivate value in creating their event source. An independent state table and unique source state ID (CGEventSourceStateID) are created to track the event source's state. This independent state table is owned by the creating event source and released with it.\n\nTopics\nConstants\ncase privateState\nSpecifies that an event source should use a private event state table.\ncase combinedSessionState\nSpecifies that an event source should use the event state table that reflects the combined state of all event sources posting to the current user login session.\ncase hidSystemState\nSpecifies that an event source should use the event state table that reflects the combined state of all hardware event sources posting from the HID system.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CGDisplayFade(_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456189-cgdisplayfade",
    "html": "Parameters\nmyToken\n\nA reservation token for the fade hardware you acquire by calling CGAcquireDisplayFadeReservation(_:_:).\n\nseconds\n\nThe desired number of seconds for the fade operation. You should use a value in the interval [0, kCGMaxDisplayReservationInterval]. If the value is 0, Quartz applies the ending blend color immediately.\n\nstartBlend\n\nAn intensity value in the interval [0, 1] that specifies the alpha component of the desired blend color at the beginning of the fade operation. For more information, see Display Fade Blend Fractions.\n\nendBlend\n\nAn intensity value in the interval [0, 1] that specifies the alpha component of the desired blend color at the end of the fade operation. For more information, see Display Fade Blend Fractions.\n\nredBlend\n\nAn intensity value in the interval [0, 1] that specifies the red component of the desired blend color.\n\ngreenBlend\n\nAn intensity value in the interval [0, 1] that specifies the green component of the desired blend color.\n\nblueBlend\n\nAn intensity value in the interval [0, 1] that specifies the blue component of the desired blend color.\n\nsynchronous\n\nPass true if you want the fade operation to be synchronous; otherwise, pass false. If a fade operation is synchronous, the function doesn’t return until the operation is complete.\n\nReturn Value\n\nA result code. To interpret the result code, see CGError.\n\nDiscussion\n\nOver the fade operation time interval, Quartz interpolates a blending coefficient between the starting and ending values given, applying a nonlinear (sine-based) bias term. Using this coefficient, Quartz blends the video output with the specified color.\n\nThe following example shows how to perform a 2-second synchronous fade-out to black:\n\nCGDisplayFade (\n    myToken,\n    2.0,                        // 2 seconds\n    kCGDisplayBlendNormal,      // starting state\n    kCGDisplayBlendSolidColor,  // ending state\n    0.0, 0.0, 0.0,              // black\n    true                        // wait for completion\n);\n\n\nTo perform a 2-second asynchronous fade-in from black:\n\nCGDisplayFade (\n    myToken,\n    2.0,                        // 2 seconds\n    kCGDisplayBlendSolidColor,  // starting state\n    kCGDisplayBlendNormal,      // ending state\n    0.0, 0.0, 0.0,              // black\n    false                       // don't wait for completion\n);\n\n\nIf you specify an asynchronous fade operation, it’s safe to call CGReleaseDisplayFadeReservation(_:) immediately after this function returns.\n\nSee Also\nDisplay Fade Effects\nfunc CGConfigureDisplayFadeEffect(CGDisplayConfigRef?, CGDisplayFadeInterval, CGDisplayFadeInterval, Float, Float, Float) -> CGError\nModifies the settings of the built-in fade effect that occurs during a display configuration.\nfunc CGAcquireDisplayFadeReservation(CGDisplayReservationInterval, UnsafeMutablePointer<CGDisplayFadeReservationToken>?) -> CGError\nReserves the fade hardware for a specified time interval.\nfunc CGDisplayFadeOperationInProgress() -> boolean_t\nReturns a Boolean value indicating whether a fade operation is currently in progress.\nDeprecated\nfunc CGReleaseDisplayFadeReservation(CGDisplayFadeReservationToken) -> CGError\nReleases a display fade reservation, and unfades the display if needed."
  },
  {
    "title": "CGWheelCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwheelcount",
    "html": "Discussion\n\nSee the function CGPostScrollWheelEvent."
  },
  {
    "title": "CGConfigureDisplayFadeEffect(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454103-cgconfiguredisplayfadeeffect",
    "html": "Parameters\nconfigRef\n\nA display configuration, acquired by calling CGBeginDisplayConfiguration(_:).\n\nfadeOutSeconds\n\nThe time, in seconds, to fade from the normal display to the specified fade color. The fade out is completed before the display configuration is changed. If the interval is 0, Quartz applies the color immediately.\n\nfadeInSeconds\n\nThe time, in seconds, to return from the specified fade color to the normal display. The fade-in is run asynchronously after the display configuration is changed.\n\nfadeRed\n\nAn intensity value in the interval [0, 1] that represents the red component of the desired blend color.\n\nfadeGreen\n\nAn intensity value in the interval [0, 1] that represents the green component of the desired blend color.\n\nfadeBlue\n\nAn intensity value in the interval [0, 1] that represents the blue component of the desired blend color.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nThis function provides a way to customize the built-in fade effect that Quartz performs when displays are reconfigured. The default time settings for this fade effect are 0.3 seconds to fade out, and 0.5 seconds to fade back in. The default fade color is French Blue for a normal desktop, and black for a captured display.\n\nBefore using this function, you need to call CGBeginDisplayConfiguration(_:) to acquire the display configuration token for the desired display. No fade reservation is needed—when you call CGCompleteDisplayConfiguration(_:_:), Quartz reserves the fade hardware (assuming it is available) and performs the fade.\n\nCalling this function modifies the fade behavior for a single display configuration and has no permanent effect.\n\nSee Also\nDisplay Fade Effects\nfunc CGAcquireDisplayFadeReservation(CGDisplayReservationInterval, UnsafeMutablePointer<CGDisplayFadeReservationToken>?) -> CGError\nReserves the fade hardware for a specified time interval.\nfunc CGDisplayFade(CGDisplayFadeReservationToken, CGDisplayFadeInterval, CGDisplayBlendFraction, CGDisplayBlendFraction, Float, Float, Float, boolean_t) -> CGError\nPerforms a single fade operation.\nfunc CGDisplayFadeOperationInProgress() -> boolean_t\nReturns a Boolean value indicating whether a fade operation is currently in progress.\nDeprecated\nfunc CGReleaseDisplayFadeReservation(CGDisplayFadeReservationToken) -> CGError\nReleases a display fade reservation, and unfades the display if needed."
  },
  {
    "title": "CGDisplayHideCursor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456534-cgdisplayhidecursor",
    "html": "Parameters\ndisplay\n\nThis parameter has no effect. By default, you can pass kCGDirectMainDisplay.\n\nReturn Value\n\nA result code. To interpret the result code, see CGError.\n\nDiscussion\n\nThis function hides the cursor regardless of its current location. The display parameter has no effect. In most cases, the caller must be the foreground application to affect the cursor.\n\nSee Also\nControlling the Mouse Cursor\nfunc CGDisplayShowCursor(CGDirectDisplayID) -> CGError\nDecrements the hide cursor count, and shows the mouse cursor if the count is 0.\nfunc CGDisplayMoveCursorToPoint(CGDirectDisplayID, CGPoint) -> CGError\nMoves the mouse cursor to a specified point relative to the upper-left corner of the display.\nfunc CGCursorIsVisible() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is visible.\nDeprecated\nfunc CGCursorIsDrawnInFramebuffer() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is drawn in framebuffer memory.\nDeprecated\nfunc CGAssociateMouseAndMouseCursorPosition(boolean_t) -> CGError\nConnects or disconnects the mouse and cursor while an application is in the foreground.\nfunc CGWarpMouseCursorPosition(CGPoint) -> CGError\nMoves the mouse cursor without generating events.\nfunc CGGetLastMouseDelta() -> (x: Int32, y: Int32)\nReports the change in mouse position since the last mouse movement event received by the application."
  },
  {
    "title": "CGCursorIsVisible() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1541812-cgcursorisvisible",
    "html": "Deprecated\n\nThere is no replacement.\n\nReturn Value\n\nIf true, the cursor is visible on any display; otherwise, false.\n\nDiscussion\n\nTo hide or show the cursor, you can use the functions CGDisplayHideCursor(_:) and CGDisplayShowCursor(_:).\n\nSee Also\nControlling the Mouse Cursor\nfunc CGDisplayHideCursor(CGDirectDisplayID) -> CGError\nHides the mouse cursor, and increments the hide cursor count.\nfunc CGDisplayShowCursor(CGDirectDisplayID) -> CGError\nDecrements the hide cursor count, and shows the mouse cursor if the count is 0.\nfunc CGDisplayMoveCursorToPoint(CGDirectDisplayID, CGPoint) -> CGError\nMoves the mouse cursor to a specified point relative to the upper-left corner of the display.\nfunc CGCursorIsDrawnInFramebuffer() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is drawn in framebuffer memory.\nDeprecated\nfunc CGAssociateMouseAndMouseCursorPosition(boolean_t) -> CGError\nConnects or disconnects the mouse and cursor while an application is in the foreground.\nfunc CGWarpMouseCursorPosition(CGPoint) -> CGError\nMoves the mouse cursor without generating events.\nfunc CGGetLastMouseDelta() -> (x: Int32, y: Int32)\nReports the change in mouse position since the last mouse movement event received by the application."
  },
  {
    "title": "CGAcquireDisplayFadeReservation(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456391-cgacquiredisplayfadereservation",
    "html": "Parameters\nseconds\n\nThe desired number of seconds to reserve the fade hardware. An application can specify any value in the interval (0, kCGMaxDisplayReservationInterval].\n\npNewToken\n\nA pointer to storage (provided by the caller) for a fade reservation token. On return, the storage contains a new token.\n\nReturn Value\n\nReturns CGError.noneAvailable if another fade reservation is in effect. Otherwise, returns CGError.success.\n\nDiscussion\n\nBefore performing a fade operation, an application must reserve the fade hardware for a specified period of time. Quartz returns a token that represents a new fade reservation. The application uses this token as an argument in subsequent calls to other display fade functions.\n\nDuring the fade reservation interval, the application has exclusive rights to use the fade hardware. At the end of the interval, the token becomes invalid and the hardware automatically returns to a normal state. Typically, the application calls CGReleaseDisplayFadeReservation(_:) to release the fade reservation before it expires.\n\nSee Also\nDisplay Fade Effects\nfunc CGConfigureDisplayFadeEffect(CGDisplayConfigRef?, CGDisplayFadeInterval, CGDisplayFadeInterval, Float, Float, Float) -> CGError\nModifies the settings of the built-in fade effect that occurs during a display configuration.\nfunc CGDisplayFade(CGDisplayFadeReservationToken, CGDisplayFadeInterval, CGDisplayBlendFraction, CGDisplayBlendFraction, Float, Float, Float, boolean_t) -> CGError\nPerforms a single fade operation.\nfunc CGDisplayFadeOperationInProgress() -> boolean_t\nReturns a Boolean value indicating whether a fade operation is currently in progress.\nDeprecated\nfunc CGReleaseDisplayFadeReservation(CGDisplayFadeReservationToken) -> CGError\nReleases a display fade reservation, and unfades the display if needed."
  },
  {
    "title": "CGDisplayShowCursor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455867-cgdisplayshowcursor",
    "html": "Parameters\ndisplay\n\nThis parameter has no effect. By default, you can pass kCGDirectMainDisplay.\n\nReturn Value\n\nA result code. To interpret the result code, see CGError.\n\nDiscussion\n\nIf the hide cursor count is 0, this function shows the cursor regardless of its current location. The display parameter has no effect. In most cases, the caller must be the foreground application to affect the cursor.\n\nSee Also\nControlling the Mouse Cursor\nfunc CGDisplayHideCursor(CGDirectDisplayID) -> CGError\nHides the mouse cursor, and increments the hide cursor count.\nfunc CGDisplayMoveCursorToPoint(CGDirectDisplayID, CGPoint) -> CGError\nMoves the mouse cursor to a specified point relative to the upper-left corner of the display.\nfunc CGCursorIsVisible() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is visible.\nDeprecated\nfunc CGCursorIsDrawnInFramebuffer() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is drawn in framebuffer memory.\nDeprecated\nfunc CGAssociateMouseAndMouseCursorPosition(boolean_t) -> CGError\nConnects or disconnects the mouse and cursor while an application is in the foreground.\nfunc CGWarpMouseCursorPosition(CGPoint) -> CGError\nMoves the mouse cursor without generating events.\nfunc CGGetLastMouseDelta() -> (x: Int32, y: Int32)\nReports the change in mouse position since the last mouse movement event received by the application."
  },
  {
    "title": "CGReleaseDisplayFadeReservation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455230-cgreleasedisplayfadereservation",
    "html": "Parameters\nmyToken\n\nThe current fade reservation token to be released. On return, the reservation token is no longer valid and should be discarded.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nIf you call this function while an asynchronous fade operation is running, there are two possible outcomes:\n\nIf the ending blend value is kCGDisplayBlendNormal, the fade operation is allowed to run to completion.\n\nIf the ending blend value is not kCGDisplayBlendNormal, the fade operation is terminated immediately and the display is returned to normal.\n\nIn both cases, the reservation is actually released when the fade operation completes.\n\nSee Also\nDisplay Fade Effects\nfunc CGConfigureDisplayFadeEffect(CGDisplayConfigRef?, CGDisplayFadeInterval, CGDisplayFadeInterval, Float, Float, Float) -> CGError\nModifies the settings of the built-in fade effect that occurs during a display configuration.\nfunc CGAcquireDisplayFadeReservation(CGDisplayReservationInterval, UnsafeMutablePointer<CGDisplayFadeReservationToken>?) -> CGError\nReserves the fade hardware for a specified time interval.\nfunc CGDisplayFade(CGDisplayFadeReservationToken, CGDisplayFadeInterval, CGDisplayBlendFraction, CGDisplayBlendFraction, Float, Float, Float, boolean_t) -> CGError\nPerforms a single fade operation.\nfunc CGDisplayFadeOperationInProgress() -> boolean_t\nReturns a Boolean value indicating whether a fade operation is currently in progress.\nDeprecated"
  },
  {
    "title": "CGDisplayFadeOperationInProgress() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1571962-cgdisplayfadeoperationinprogress",
    "html": "Deprecated\n\nThere is no replacement.\n\nReturn Value\n\nIf true, a fade operation is currently in progress; otherwise, false.\n\nDiscussion\n\nYou may call this function from any task running in the system. The calling task need not have a valid fade reservation.\n\nSee Also\nDisplay Fade Effects\nfunc CGConfigureDisplayFadeEffect(CGDisplayConfigRef?, CGDisplayFadeInterval, CGDisplayFadeInterval, Float, Float, Float) -> CGError\nModifies the settings of the built-in fade effect that occurs during a display configuration.\nfunc CGAcquireDisplayFadeReservation(CGDisplayReservationInterval, UnsafeMutablePointer<CGDisplayFadeReservationToken>?) -> CGError\nReserves the fade hardware for a specified time interval.\nfunc CGDisplayFade(CGDisplayFadeReservationToken, CGDisplayFadeInterval, CGDisplayBlendFraction, CGDisplayBlendFraction, Float, Float, Float, boolean_t) -> CGError\nPerforms a single fade operation.\nfunc CGReleaseDisplayFadeReservation(CGDisplayFadeReservationToken) -> CGError\nReleases a display fade reservation, and unfades the display if needed."
  },
  {
    "title": "isUsableForDesktopGUI() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaymode/1454928-isusablefordesktopgui",
    "html": "Parameters\nmode\n\nA display mode to be checked for usability.\n\nReturn Value\n\nIf true, the specified display mode is usable for a desktop graphical user interface; otherwise, false.\n\nDiscussion\n\nThis function’s criteria include factors such as sufficient width and height and adequate pixel depth.\n\nSee Also\nGetting Information About a Display Mode\nvar width: Int\nReturns the width of the specified display mode.\nvar height: Int\nReturns the height of the specified display mode.\nvar pixelEncoding: CFString?\nReturns the pixel encoding of the specified display mode.\nDeprecated\nvar refreshRate: Double\nReturns the refresh rate of the specified display mode.\nvar ioFlags: UInt32\nReturns the I/O Kit flags of the specified display mode.\nvar ioDisplayModeID: Int32\nReturns the I/O Kit display mode ID of the specified display mode.\nclass var typeID: CFTypeID\nReturns the type identifier of Quartz display modes."
  },
  {
    "title": "CGDisplaySetDisplayMode(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454760-cgdisplaysetdisplaymode",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to configure.\n\nmode\n\nA display mode that contains information about the display mode to set.\n\noptions\n\nReserved for future expansion. Pass NULL for now.\n\nReturn Value\n\nA Core Graphics result code. To interpret the result code, see CGError.\n\nDiscussion\n\nThis function switches the display mode of the specified display. The operation is always synchronous; the function doesn’t return until the mode switch is complete. Note that after switching, display parameters and addresses may change.\n\nThe selected display mode persists for the life of the calling program. When the program terminates, the display mode automatically reverts to the permanent setting in the Displays panel of System Preferences.\n\nWhen you change the display mode of a display in a mirroring set, your change switches other displays in the mirroring set to a mode capable of mirroring the bounds of the adjusted display. To avoid this automatic behavior, you can use the following procedure: call CGBeginDisplayConfiguration(_:), call CGConfigureDisplayWithDisplayMode(_:_:_:_:) for each display to explicitly set the mode, and finally call CGCompleteDisplayConfiguration(_:_:).\n\nSee Also\nCreating and Managing Display Modes\nfunc CGDisplayAvailableModes(CGDirectDisplayID) -> CFArray?\nReturns information about the currently available display modes.\nDeprecated\nfunc CGDisplayBestModeForParameters(CGDirectDisplayID, Int, Int, Int, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth and screen size.\nDeprecated\nfunc CGDisplayBestModeForParametersAndRefreshRate(CGDirectDisplayID, Int, Int, Int, CGRefreshRate, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth, screen size, and refresh rate.\nDeprecated\nfunc CGDisplayCurrentMode(CGDirectDisplayID) -> CFDictionary?\nReturns information about the current display mode.\nDeprecated\nfunc CGDisplaySwitchToMode(CGDirectDisplayID, CFDictionary?) -> CGError\nSwitches a display to a different mode.\nDeprecated\nfunc CGDisplayCopyDisplayMode(CGDirectDisplayID) -> CGDisplayMode?\nReturns information about a display’s current configuration.\nfunc CGDisplayCopyAllDisplayModes(CGDirectDisplayID, CFDictionary?) -> CFArray?\nReturns information about the currently available display modes."
  },
  {
    "title": "CGDisplayPixelsHigh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454247-cgdisplaypixelshigh",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe display height in pixel units.\n\nSee Also\nRetrieving Display Parameters\nfunc CGDisplayBounds(CGDirectDisplayID) -> CGRect\nReturns the bounds of a display in the global display coordinate space.\nfunc CGDisplayPixelsWide(CGDirectDisplayID) -> Int\nReturns the display width in pixel units."
  },
  {
    "title": "CGDisplaySwitchToMode(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1562065-cgdisplayswitchtomode",
    "html": "Deprecated\n\nUse CGDisplaySetDisplayMode(_:_:_:) instead.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nmode\n\nA display mode dictionary that contains information about the display mode to set. The dictionary passed in must be a dictionary returned by another Quartz display function such as CGDisplayAvailableModes(_:) or CGDisplayBestModeForParameters(_:_:_:_:_:). For a list of the properties in a display mode dictionary, see Display Mode Standard Properties and Display Mode Optional Properties. For general information about using dictionaries, see CFDictionary.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nThis function switches the display mode of the specified display. The operation is always synchronous; the function does not return until the mode switch is complete. Note that after switching, display parameters and addresses may change.\n\nThe selected display mode persists for the life of the calling program. When the program terminates, the display mode automatically reverts to the permanent setting in the Displays panel of System Preferences.\n\nWhen changing the display mode of a display in a mirroring set, other displays in the mirroring set will be assigned a mode that's capable of mirroring the bounds of the display being adjusted. To avoid this automatic behavior, you can use the following procedure: callCGBeginDisplayConfiguration(_:), call CGConfigureDisplayMode(_:_:_:) for each display to explicitly set the mode, and finally call CGCompleteDisplayConfiguration(_:_:)\n\nSpecial Considerations\n\nThis deprecated function takes as a parameter a display mode dictionary. Starting in OS X v10.6, display mode dictionaries have been replaced by the CGDisplayMode opaque type.\n\nSee Also\nCreating and Managing Display Modes\nfunc CGDisplayAvailableModes(CGDirectDisplayID) -> CFArray?\nReturns information about the currently available display modes.\nDeprecated\nfunc CGDisplayBestModeForParameters(CGDirectDisplayID, Int, Int, Int, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth and screen size.\nDeprecated\nfunc CGDisplayBestModeForParametersAndRefreshRate(CGDirectDisplayID, Int, Int, Int, CGRefreshRate, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth, screen size, and refresh rate.\nDeprecated\nfunc CGDisplayCurrentMode(CGDirectDisplayID) -> CFDictionary?\nReturns information about the current display mode.\nDeprecated\nfunc CGDisplayCopyDisplayMode(CGDirectDisplayID) -> CGDisplayMode?\nReturns information about a display’s current configuration.\nfunc CGDisplayCopyAllDisplayModes(CGDirectDisplayID, CFDictionary?) -> CFArray?\nReturns information about the currently available display modes.\nfunc CGDisplaySetDisplayMode(CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nSwitches a display to a different mode."
  },
  {
    "title": "CGDisplayBestModeForParametersAndRefreshRate(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1562066-cgdisplaybestmodeforparametersan",
    "html": "Deprecated\n\nUse the display mode query functions instead; see Getting Information About a Display Mode.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nbitsPerPixel\n\nOptimal display depth, in bits per pixel. Note that this value is not the same as pixel depth, which is the number of bits per channel or component.\n\nwidth\n\nOptimal display width, in pixel units.\n\nheight\n\nOptimal display height, in pixel units.\n\nrefresh\n\nOptimal display refresh rate, in frames per second.\n\nexactMatch\n\nA pointer to a Boolean variable. On return, its value is true if an exact match in display depth, width, height, and refresh rate is found; otherwise, false. If this information is not needed, pass NULL.\n\nReturn Value\n\nA display mode dictionary, or NULL if the display is invalid. The dictionary is owned by the system and you should not release it. The dictionary contains information about the display mode closest to the specified depth, screen size, and refresh rate. For a list of the properties in a display mode dictionary, see Display Mode Standard Properties and Display Mode Optional Properties. For general information about using dictionaries, see CFDictionary.\n\nDiscussion\n\nThis function searches the list of available display modes for a mode that comes closest to satisfying these criteria:\n\nHas a pixel depth equal to or greater than the specified depth\n\nHas dimensions equal to or greater than the specified height and width\n\nUses a refresh rate equal to or near the specified rate\n\nIf a suitable display mode is not found, this function simply returns the current display mode.\n\nSpecial Considerations\n\nThis deprecated function selects a display mode closest to the specified parameters. Starting in OS X v10.6 new display mode APIs should be used to query display modes so that an app can tailor its definition of “best” to its graphics and memory needs.\n\nSee Also\nCreating and Managing Display Modes\nfunc CGDisplayAvailableModes(CGDirectDisplayID) -> CFArray?\nReturns information about the currently available display modes.\nDeprecated\nfunc CGDisplayBestModeForParameters(CGDirectDisplayID, Int, Int, Int, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth and screen size.\nDeprecated\nfunc CGDisplayCurrentMode(CGDirectDisplayID) -> CFDictionary?\nReturns information about the current display mode.\nDeprecated\nfunc CGDisplaySwitchToMode(CGDirectDisplayID, CFDictionary?) -> CGError\nSwitches a display to a different mode.\nDeprecated\nfunc CGDisplayCopyDisplayMode(CGDirectDisplayID) -> CGDisplayMode?\nReturns information about a display’s current configuration.\nfunc CGDisplayCopyAllDisplayModes(CGDirectDisplayID, CFDictionary?) -> CFArray?\nReturns information about the currently available display modes.\nfunc CGDisplaySetDisplayMode(CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nSwitches a display to a different mode."
  },
  {
    "title": "CGDisplayBestModeForParameters(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1562060-cgdisplaybestmodeforparameters",
    "html": "Deprecated\n\nUse the display mode query functions instead; see Getting Information About a Display Mode.\n\nParameters\ndisplay\n\nThe identifier of the display to optimize.\n\nbitsPerPixel\n\nOptimal display depth in bits per pixel. Note that this value is not the same as pixel depth, which is the number of bits per channel or component.\n\nwidth\n\nOptimal display width in pixel units.\n\nheight\n\nOptimal display height in pixel units.\n\nexactMatch\n\nA pointer to a Boolean variable. On return, its value is true if an exact match in display depth, width, and height is found; otherwise, false. If this information is not needed, pass NULL.\n\nReturn Value\n\nA display mode dictionary, or NULL if the display is invalid. The dictionary is owned by the system and you should not release it. The dictionary contains information about the display mode closest to the specified depth and screen size. For a list of the properties in a display mode dictionary, see Display Mode Standard Properties and Display Mode Optional Properties. For general information about using dictionaries, see CFDictionary.\n\nDiscussion\n\nThis function tries to find an optimal display mode for the specified display. The function first tries to find a mode with the specified pixel depth and dimensions equal to or greater than the specified width and height. If no depth match is found, it tries to find a mode with greater depth and the same or greater dimensions. If a suitable display mode is not found, this function simply returns the current display mode.\n\nSpecial Considerations\n\nThis deprecated function selects a display mode closest to the specified parameters. Starting in OS X v10.6 new display mode APIs should be used to query display modes so that an application can tailor its definition of “best” to its graphics and memory needs.\n\nSee Also\nCreating and Managing Display Modes\nfunc CGDisplayAvailableModes(CGDirectDisplayID) -> CFArray?\nReturns information about the currently available display modes.\nDeprecated\nfunc CGDisplayBestModeForParametersAndRefreshRate(CGDirectDisplayID, Int, Int, Int, CGRefreshRate, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth, screen size, and refresh rate.\nDeprecated\nfunc CGDisplayCurrentMode(CGDirectDisplayID) -> CFDictionary?\nReturns information about the current display mode.\nDeprecated\nfunc CGDisplaySwitchToMode(CGDirectDisplayID, CFDictionary?) -> CGError\nSwitches a display to a different mode.\nDeprecated\nfunc CGDisplayCopyDisplayMode(CGDirectDisplayID) -> CGDisplayMode?\nReturns information about a display’s current configuration.\nfunc CGDisplayCopyAllDisplayModes(CGDirectDisplayID, CFDictionary?) -> CFArray?\nReturns information about the currently available display modes.\nfunc CGDisplaySetDisplayMode(CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nSwitches a display to a different mode."
  },
  {
    "title": "CGDisplayCurrentMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1562062-cgdisplaycurrentmode",
    "html": "Deprecated\n\nUse CGDisplayCopyDisplayMode(_:) instead.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nA display mode dictionary, or NULL if the display is invalid. The dictionary is owned by the system and you should not release it. The dictionary contains information about the current display mode. For a list of the properties in a display mode dictionary, see Display Mode Standard Properties and Display Mode Optional Properties. For general information about using dictionaries, see CFDictionary.\n\nDiscussion\n\nThis deprecated function returns a display mode dictionary. Starting in OS X v10.6, display mode dictionaries have been replaced by the CGDisplayMode opaque type. Whereas display mode dictionaries returned by CGDisplayCurrentModes are owned by the system and are not to be released, display mode opaque type references returned by CGDisplayCopyDisplayMode are owned by the caller and you must release them.\n\nSee Also\nCreating and Managing Display Modes\nfunc CGDisplayAvailableModes(CGDirectDisplayID) -> CFArray?\nReturns information about the currently available display modes.\nDeprecated\nfunc CGDisplayBestModeForParameters(CGDirectDisplayID, Int, Int, Int, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth and screen size.\nDeprecated\nfunc CGDisplayBestModeForParametersAndRefreshRate(CGDirectDisplayID, Int, Int, Int, CGRefreshRate, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth, screen size, and refresh rate.\nDeprecated\nfunc CGDisplaySwitchToMode(CGDirectDisplayID, CFDictionary?) -> CGError\nSwitches a display to a different mode.\nDeprecated\nfunc CGDisplayCopyDisplayMode(CGDirectDisplayID) -> CGDisplayMode?\nReturns information about a display’s current configuration.\nfunc CGDisplayCopyAllDisplayModes(CGDirectDisplayID, CFDictionary?) -> CFArray?\nReturns information about the currently available display modes.\nfunc CGDisplaySetDisplayMode(CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nSwitches a display to a different mode."
  },
  {
    "title": "CGDisplayVendorNumber(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455233-cgdisplayvendornumber",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nA vendor number for the monitor associated with the specified display, or a constant to indicate an exception—see the discussion below.\n\nDiscussion\n\nThis function uses I/O Kit to identify the monitor associated with the specified display.\n\nThere are three cases:\n\nIf I/O Kit can identify the monitor, the vendor ID is returned.\n\nIf I/O Kit cannot identify the monitor, kDisplayVendorIDUnknown is returned.\n\nIf there is no monitor associated with the display, 0xFFFFFFFF is returned.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display."
  },
  {
    "title": "CGDisplayUnitNumber(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456489-cgdisplayunitnumber",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nA logical unit number for the specified display.\n\nDiscussion\n\nThe logical unit number represents a particular node in the I/O Kit device tree associated with the display’s framebuffer.\n\nFor a particular hardware configuration, this value will not change when the attached monitor is changed. The number will change, though, if the I/O Kit device tree changes, for example, when hardware is reconfigured, drivers are replaced, or significant changes occur to I/O Kit. Therefore keep in mind that this number may vary across login sessions.\n\nFor more information about I/O Kit, see IOKit Fundamentals.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGDisplayRemoveReconfigurationCallback(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455407-cgdisplayremovereconfigurationca",
    "html": "Parameters\nproc\n\nA pointer to the callback function associated with the registration to be removed.\n\nuserInfo\n\nA pointer to user-defined data associated with the registration to be removed, or NULL. This is the same pointer that’s passed to the function CGDisplayRegisterReconfigurationCallback(_:_:) when registering the callback.\n\nDiscussion\n\nWhen you call this function, the two arguments must match the registered entry to be removed.\n\nSee Also\nRegistering for Notification of Display Configuration Changes\nfunc CGDisplayRegisterReconfigurationCallback(CGDisplayReconfigurationCallBack?, UnsafeMutableRawPointer?) -> CGError\nRegisters a callback function to be invoked whenever a local display is reconfigured."
  },
  {
    "title": "CGDisplayPixelsWide(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456361-cgdisplaypixelswide",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe display width in pixel units.\n\nSee Also\nRetrieving Display Parameters\nfunc CGDisplayBounds(CGDirectDisplayID) -> CGRect\nReturns the bounds of a display in the global display coordinate space.\nfunc CGDisplayPixelsHigh(CGDirectDisplayID) -> Int\nReturns the display height in pixel units."
  },
  {
    "title": "CGDisplayAvailableModes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1562068-cgdisplayavailablemodes",
    "html": "Deprecated\n\nUse CGDisplayCopyAllDisplayModes(_:_:) instead.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nAn array of dictionaries with display mode information, or NULL if the display is invalid. The array is owned by the system and you should not release it. Each dictionary in the array contains information about a mode that the display supports. For a list of the properties in a display mode dictionary, see Display Mode Standard Properties and Display Mode Optional Properties. For general information about using dictionaries, see CFDictionary.\n\nDiscussion\n\nThis deprecated function returns an array of display mode dictionary. Starting in OS X v10.6, display mode dictionaries have been replaced by the CGDisplayMode opaque type. Whereas display mode dictionaries returned by CGDisplayAvailableModes are owned by the system and are not to be released, display mode opaque type references returned by CGDisplayCopyAllDisplayModes are owned by the caller and you must release them.\n\nSee Also\nCreating and Managing Display Modes\nfunc CGDisplayBestModeForParameters(CGDirectDisplayID, Int, Int, Int, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth and screen size.\nDeprecated\nfunc CGDisplayBestModeForParametersAndRefreshRate(CGDirectDisplayID, Int, Int, Int, CGRefreshRate, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth, screen size, and refresh rate.\nDeprecated\nfunc CGDisplayCurrentMode(CGDirectDisplayID) -> CFDictionary?\nReturns information about the current display mode.\nDeprecated\nfunc CGDisplaySwitchToMode(CGDirectDisplayID, CFDictionary?) -> CGError\nSwitches a display to a different mode.\nDeprecated\nfunc CGDisplayCopyDisplayMode(CGDirectDisplayID) -> CGDisplayMode?\nReturns information about a display’s current configuration.\nfunc CGDisplayCopyAllDisplayModes(CGDirectDisplayID, CFDictionary?) -> CFArray?\nReturns information about the currently available display modes.\nfunc CGDisplaySetDisplayMode(CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nSwitches a display to a different mode."
  },
  {
    "title": "CGDisplayRegisterReconfigurationCallback(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455336-cgdisplayregisterreconfiguration",
    "html": "Parameters\nproc\n\nA pointer to the callback function to be registered.\n\nuserInfo\n\nA pointer to user-defined data, or NULL. The userInfo argument is passed back to the callback function each time it’s invoked.\n\nDiscussion\n\nWhenever local displays are reconfigured, the callback function you register is invoked twice for each display that’s added, removed, or currently online—once before the reconfiguration, and once after the reconfiguration. For more information, see the callback type CGDisplayReconfigurationCallBack.\n\nA callback function may be registered multiple times with different user-defined data pointers, resulting in multiple registration entries. For each registration, when notification is no longer needed you should remove the registration by calling the function CGDisplayRemoveReconfigurationCallback(_:_:).\n\nSee Also\nRegistering for Notification of Display Configuration Changes\nfunc CGDisplayRemoveReconfigurationCallback(CGDisplayReconfigurationCallBack?, UnsafeMutableRawPointer?) -> CGError\nRemoves the registration of a callback function that’s invoked whenever a local display is reconfigured."
  },
  {
    "title": "CGDisplayBounds(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456395-cgdisplaybounds",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe bounds of the display, expressed as a rectangle in the global display coordinate space (relative to the upper-left corner of the main display).\n\nSee Also\nRetrieving Display Parameters\nfunc CGDisplayPixelsHigh(CGDirectDisplayID) -> Int\nReturns the display height in pixel units.\nfunc CGDisplayPixelsWide(CGDirectDisplayID) -> Int\nReturns the display width in pixel units."
  },
  {
    "title": "CGDisplayIOServicePort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1543516-cgdisplayioserviceport",
    "html": "Deprecated\n\nThere is no replacement.\n\nParameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nThe I/O Kit service port for the specified display.\n\nDiscussion\n\nAn I/O Kit service port can be passed to I/O Kit to obtain additional information about the display.\n\nThe port is owned by the graphics system and should not be destroyed.\n\nSee Also\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor."
  },
  {
    "title": "CGMainDisplayID() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455620-cgmaindisplayid",
    "html": "Return Value\n\nThe display ID assigned to the main display.\n\nDiscussion\n\nThe main display is the display with its screen location at (0,0) in the global display coordinate space. In a system without display mirroring, the display with the menu bar is typically the main display.\n\nIf mirroring is enabled and the menu bar appears on more than one display, this function provides a reliable way to find the main display.\n\nIn case of hardware mirroring, the drawable display becomes the main display. In case of software mirroring, the display with the highest resolution and deepest pixel depth typically becomes the main display.\n\nSee Also\nFinding Displays\nfunc CGGetOnlineDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are online (active, mirrored, or sleeping).\nfunc CGGetActiveDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are active for drawing.\nfunc CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that corresponds to the bits set in an OpenGL display mask.\nfunc CGGetDisplaysWithPoint(CGPoint, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of online displays with bounds that include the specified point.\nfunc CGGetDisplaysWithRect(CGRect, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of online displays with bounds that intersect the specified rectangle.\nfunc CGOpenGLDisplayMaskToDisplayID(CGOpenGLDisplayMask) -> CGDirectDisplayID\nMaps an OpenGL display mask to a display ID.\nfunc CGDisplayIDToOpenGLDisplayMask(CGDirectDisplayID) -> CGOpenGLDisplayMask\nMaps a display ID to an OpenGL display mask."
  },
  {
    "title": "CGDisplayChangeSummaryFlags | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdisplaychangesummaryflags",
    "html": "Overview\n\nFor information about how these constants are used, see the callback CGDisplayReconfigurationCallBack.\n\nTopics\nConstants\nstatic var beginConfigurationFlag: CGDisplayChangeSummaryFlags\nThe display configuration is about to change.\nstatic var movedFlag: CGDisplayChangeSummaryFlags\nThe location of the upper-left corner of the display in the global display coordinate space has changed.\nstatic var setMainFlag: CGDisplayChangeSummaryFlags\nThe display is now the main display.\nstatic var setModeFlag: CGDisplayChangeSummaryFlags\nThe display mode has changed.\nstatic var addFlag: CGDisplayChangeSummaryFlags\nThe display has been added to the active display list.\nstatic var removeFlag: CGDisplayChangeSummaryFlags\nThe display has been removed from the active display list.\nstatic var enabledFlag: CGDisplayChangeSummaryFlags\nThe display has been enabled.\nstatic var disabledFlag: CGDisplayChangeSummaryFlags\nThe display has been disabled.\nstatic var mirrorFlag: CGDisplayChangeSummaryFlags\nThe display is now mirroring another display.\nstatic var unMirrorFlag: CGDisplayChangeSummaryFlags\nThe display is no longer mirroring another display.\nstatic var desktopShapeChangedFlag: CGDisplayChangeSummaryFlags\nInitializers\ninit(rawValue: UInt32)\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "CGColorDataFormat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolordataformat",
    "html": "Topics\nInitializers\ninit()\ninit(version: UInt32, colorspace_info: Unmanaged<CFTypeRef>!, bitmap_info: CGBitmapInfo, bits_per_component: Int, bytes_per_row: Int, intent: CGColorRenderingIntent, decode: UnsafeMutablePointer<CGFloat>!)\nInstance Properties\nvar bitmap_info: CGBitmapInfo\nvar bits_per_component: Int\nvar bytes_per_row: Int\nvar colorspace_info: Unmanaged<CFTypeRef>!\nvar decode: UnsafeMutablePointer<CGFloat>!\nvar intent: CGColorRenderingIntent\nvar version: UInt32"
  },
  {
    "title": "CGKeyCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgkeycode",
    "html": "Discussion\n\nIn macOS, the hardware scan codes generated by keyboards are mapped to a set of virtual key codes that are hardware-independent. Pressing a given key always generates the same virtual key code on any supported keyboard.\n\nAs keys are pressed, the system uses the virtual key codes to create low-level keyboard events. For information on how to simulate a keyboard event, see the function init(keyboardEventSource:virtualKey:keyDown:)."
  },
  {
    "title": "CGEventTimestamp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventtimestamp",
    "html": "Discussion\n\nYou set an event's timestamp with CGEventSetTimestamp(_:_:), and access it later with CGEvent's timestamp property."
  },
  {
    "title": "CGEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent",
    "html": "Overview\n\nLow-level hardware events of this type are referred to as Quartz events. A typical event in macOS originates when the user manipulates an input device such as a mouse or a keyboard. The device driver associated with that device, through the I/O Kit, creates a low-level event, puts it in the window server’s event queue, and notifies the window server. The window server creates a Quartz event, annotates the event, and dispatches the event to the appropriate run-loop port of the target process. There the event is picked up by the Carbon Event Manager and forwarded to the event-handling mechanism appropriate to the application environment. You can use event taps to gain access to Quartz events at several different steps in this process.\n\nThis opaque type is derived from CFType and inherits the properties that all Core Foundation types have in common. For more information, see CFType.\n\nTopics\nInitializers\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(scrollWheelEvent2Source: CGEventSource?, units: CGScrollEventUnit, wheelCount: UInt32, wheel1: Int32, wheel2: Int32, wheel3: Int32)\nInstance Properties\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar data: CFData?\nType Properties\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\nInstance Methods\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc post(tap: CGEventTapLocation)\nPosts a Quartz event into the event stream at a specified location.\nfunc postToPSN(processSerialNumber: UnsafeMutableRawPointer?)\nPosts a Quartz event into the event stream for a specific application.\nfunc postToPid(pid_t)\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nfunc tapPostEvent(CGEventTapProxy?)\nPosts a Quartz event from an event tap into the event stream.\nType Methods\nclass func tapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap.\nclass func tapCreateForPSN(processSerialNumber: UnsafeMutableRawPointer, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap for a specified process.\nclass func tapCreateForPid(pid: pid_t, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nclass func tapEnable(tap: CFMachPort, enable: Bool)\nEnables or disables an event tap.\nclass func tapIsEnabled(tap: CFMachPort) -> Bool\nReturns a Boolean value indicating whether an event tap is enabled."
  },
  {
    "title": "CGEventSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource",
    "html": "Overview\n\nA Quartz event source is an object that contains accumulated state related to event generation and event posting. Every event source has an associated global event state table called a source state. When you call init(stateID:) to create an event source, you specify which source state to use. For more information about source states, see CGEventSourceStateID.\n\nA typical use of an event source would be to obtain the source from a Quartz event received by an event tap callback function, and then to use that source for any new events created as a result of the received event. This has the effect of marking the events as being related.\n\nThis opaque type is derived from CFType and inherits the properties that all Core Foundation types have in common. For more information, see CFType.\n\nTopics\nInitializers\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nInstance Properties\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nType Properties\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nInstance Methods\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nType Methods\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source."
  },
  {
    "title": "CGEventMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventmask",
    "html": "Discussion\n\nWhen you call either tapCreate(tap:place:options:eventsOfInterest:callback:userInfo:) or tapCreateForPSN(processSerialNumber:place:options:eventsOfInterest:callback:userInfo:) to register an event tap, you supply a bit mask that identifies the set of events to be observed. You specify each event using one of the event type constants listed in CGEventType. To form the bit mask, use the CGEventMaskBit macro to convert each constant into an event mask and then OR the individual masks together. For example:\n\nCGEventMask mask = CGEventMaskBit(kCGEventLeftMouseDown) |\n                   CGEventMaskBit(kCGEventLeftMouseUp);\n\n\nYou can also supply a mask to observe all events:\n\nCGEventMask mask = kCGEventMaskForAllEvents;\n"
  },
  {
    "title": "CGEventTapProxy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventtapproxy",
    "html": "Discussion\n\nAn event tap proxy object is passed to your event tap callback function when it receives a new Quartz event. Your callback function needs the proxy to post Quartz events using the function tapPostEvent(_:)."
  },
  {
    "title": "CGEventSourceKeyboardType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsourcekeyboardtype",
    "html": "Discussion\n\nThis code is the same keyboard type identifier used with the UCKeyTranslate(_:_:_:_:_:_:_:_:_:_:) function to drive keyboard translation."
  },
  {
    "title": "CGEventTapInformation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventtapinformation",
    "html": "Discussion\n\nTo learn how to obtain information about event taps, see the function CGGetEventTapList(_:_:_:)."
  },
  {
    "title": "CGButtonCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgbuttoncount",
    "html": "Discussion\n\nIn mouse events, the button count parameter ranges from 0 to 31. See the function CGPostMouseEvent."
  },
  {
    "title": "pixelsPerLine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408775-pixelsperline",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nReturn Value\n\nThe scale of pixels per line in a scrolling event.\n\nDiscussion\n\nThis function returns the scale of pixels per line in the specified event source. For example, if the scale in the event source is 10.5 pixels per line, this function would return 10.5. Every scrolling event can be interpreted to be scrolling by pixel or by line. By default, the scale is about ten pixels per line. You can alter the scale with the function CGEventSourceSetPixelsPerLine.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nRelated Documentation\nCGEventSourceSetPixelsPerLine(_:_:)\nSets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "localEventsSuppressionInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408774-localeventssuppressioninterval",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nDiscussion\n\nBy default, the system does not suppress local hardware events from the keyboard or mouse during a short interval after a Quartz event is posted. You can use the function setLocalEventsFilterDuringSuppressionState(_:state:) to modify this behavior.\n\nThis function gets the period of time in seconds that local hardware events may be suppressed after posting a Quartz event created with the specified event source. You can use the function CGEventSourceSetLocalEventsSuppressionInterval(_:_:) to change this time interval.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "counterForEventType(_:eventType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408794-counterforeventtype",
    "html": "Parameters\nsourceState\n\nThe source state to access. Pass one of the constants listed in CGEventSourceStateID.\n\neventType\n\nThe event type to access. To get the count of input events—keyboard, mouse, or tablet—specify kCGAnyInputEventType.\n\nReturn Value\n\nThe count of events of the specified type seen since the window server started.\n\nDiscussion\n\nQuartz provides these counters for applications that monitor user activity. For example, an application could prompt a typist to take a break to reduce repetitive stress injuries.\n\nModifier keys produce kCGEventFlagsChanged events, not kCGEventKeyDown events, and do so both on press and release. The volume, brightness, and CD eject keys on some keyboards (both desktop and laptop) do not generate key up or key down events.\n\nFor various reasons, the number of key up and key down events may not be the same when all keyboard keys are up. As a result, a mismatch does not necessarily indicate that some keys are down.\n\nKey autorepeat events are not counted.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "setLocalEventsFilterDuringSuppressionState(_:state:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408770-setlocaleventsfilterduringsuppre",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nfilter\n\nA mask that specifies the categories of local hardware events to enable during the event suppression interval. See CGEventFilterMask.\n\nstate\n\nThe type of event suppression interval during which the filter is applied. Pass one of the constants listed in CGEventSuppressionState.\n\nDiscussion\n\nBy default, the system does not suppress local hardware events from the keyboard or mouse during a short interval after a Quartz event is posted—see CGEventSourceSetLocalEventsSuppressionInterval(_:_:)—and during a synthetic mouse drag (mouse movement with the left or only mouse button down).\n\nSome applications may want to disable events from some of the local hardware during this interval. For example, if you post mouse events only, you may wish to suppress local mouse events and permit local keyboard events to pass through. This function lets you specify an event source, a suppression state (event suppression interval or mouse drag), and a filter mask of event classes to be passed through. The new local events filter takes effect with the next Quartz event you post using this event source.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "CGCharCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcharcode",
    "html": "Discussion\n\nThis data type represents a 16-bit character code. Values of this type may or may not correspond to UTF-16 character codes. See the function CGPostKeyboardEvent(_:_:_:)."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455634-type",
    "html": "Parameters\nevent\n\nThe event to access.\n\nReturn Value\n\nThe current event type of the specified event. The return value is one of the constants listed in CGEventType.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event.\nRelated Documentation\nCGEventSetType(_:_:)\nSets the event type of a Quartz event (left mouse down, for example)."
  },
  {
    "title": "init(event:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1455393-init",
    "html": "Parameters\nevent\n\nThe event to access.\n\nReturn Value\n\nAn event source created from the specified event, or NULL if the event was generated with a private event source owned by another process. When you no longer need this event source, you should release it using the function CFRelease.\n\nDiscussion\n\nEvent filters may use the event source to generate events that are compatible with an event being filtered.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "copy() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1454071-copy",
    "html": "Parameters\nevent\n\nThe event being copied.\n\nReturn Value\n\nA copy of the specified event. When you no longer need the copy, you should release it using the function CFRelease.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "timestamp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455481-timestamp",
    "html": "Parameters\nevent\n\nThe event to access.\n\nReturn Value\n\nThe current timestamp of the specified event.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "keyboardSetUnicodeString(stringLength:unicodeString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1456028-keyboardsetunicodestring",
    "html": "Parameters\nevent\n\nThe keyboard event to access.\n\nstringLength\n\nThe length of the array you provide in the unicodeString parameter.\n\nunicodeString\n\nAn array that contains the new Unicode string associated with the specified event.\n\nDiscussion\n\nBy default, the system translates the virtual key code in a keyboard event into a Unicode string based on the keyboard ID in the event source. This function allows you to manually override this string. Note that application frameworks may ignore the Unicode string in a keyboard event and do their own translation based on the virtual keycode and perceived event state.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "unflippedLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455589-unflippedlocation",
    "html": "Parameters\nevent\n\nThe mouse event whose location you wish to obtain.\n\nReturn Value\n\nThe current location of the specified mouse event relative to the lower-left corner of the main display.\n\nDiscussion\n\nThis function returns the location of the mouse cursor associated with the event. The coordinate system used is relative to the lower-left corner of the main display, and is compatible with the global coordinate system used by the Application Kit.\n\nNote that the y-coordinate of the returned location is off by one from an idealized coordinate system originating at the lower-left corner of the main display. Effectively, the function is defined as follows:\n\nCGPoint p = CGEventGetLocation(event);\np.y = main_display_height - p.y;\n/* not p.y = (main_display_height - 1) - p.y */\nreturn p;\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "setIntegerValueField(_:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455556-setintegervaluefield",
    "html": "Parameters\nevent\n\nThe event to access.\n\nfield\n\nA field in the specified event. Pass one of the constants listed in CGEventField.\n\nvalue\n\nThe new value of the specified field.\n\nDiscussion\n\nBefore calling this function, the event type must be set using a typed event creation function such as init(mouseEventSource:mouseType:mouseCursorPosition:mouseButton:), or by calling CGEventSetType(_:_:).\n\nIf you are creating a mouse event generated by a tablet, call this function and specify the field kCGMouseEventSubtype with a value of kCGEventMouseSubtypeTabletPoint or kCGEventMouseSubtypeTabletProximity before setting other parameters.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "getIntegerValueField(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455885-getintegervaluefield",
    "html": "Parameters\nevent\n\nThe event to access.\n\nfield\n\nA field in the specified event. Pass one of the constants listed in CGEventField.\n\nReturn Value\n\nA 64-bit integer representation of the current value of the specified field.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "flags | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455642-flags",
    "html": "Parameters\nevent\n\nThe event to access.\n\nReturn Value\n\nThe current flags of the specified event. For more information, see CGEventFlags.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "getDoubleValueField(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455506-getdoublevaluefield",
    "html": "Parameters\nevent\n\nThe event to access.\n\nfield\n\nA field in the specified event. Pass one of the constants listed in CGEventField.\n\nReturn Value\n\nA floating point representation of the current value of the specified field.\n\nDiscussion\n\nIn cases where the field value is represented within the event by a fixed point number or an integer, the result is scaled to the appropriate range as part of creating the floating point representation.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "setDoubleValueField(_:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455526-setdoublevaluefield",
    "html": "Parameters\nevent\n\nThe event to access.\n\nfield\n\nA field in the specified event. Pass one of the constants listed in CGEventField.\n\nvalue\n\nThe new value of the specified field.\n\nDiscussion\n\nBefore calling this function, the event type must be set using a typed event creation function such as init(mouseEventSource:mouseType:mouseCursorPosition:mouseButton:), or by calling CGEventSetType(_:_:).\n\nIn cases where the field’s value is represented within the event by a fixed point number or integer, the value parameter is scaled as needed and converted to the appropriate type.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event."
  },
  {
    "title": "tapCreateForPSN(processSerialNumber:place:options:eventsOfInterest:callback:userInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1454828-tapcreateforpsn",
    "html": "Parameters\nprocessSerialNumber\n\nThe process to monitor.\n\nplace\n\nThe placement of the new event tap in the list of active event taps. Pass one of the constants listed in CGEventTapPlacement.\n\noptions\n\nA constant that specifies whether the new event tap is a passive listener or an active filter.\n\neventsOfInterest\n\nA bit mask that specifies the set of events to be observed. For a list of possible events, see CGEventType. For information on how to specify the mask, see CGEventMask. If the event tap is not permitted to monitor one or more of the events specified in the eventsOfInterest parameter, then the appropriate bits in the mask are cleared. If that action results in an empty mask, this function returns NULL.\n\ncallback\n\nAn event tap callback function that you provide. Your callback function is invoked from the run loop to which the event tap is added as a source. The thread safety of the callback is defined by the run loop’s environment. To learn more about event tap callbacks, see CGEventTapCallBack.\n\nrefcon\n\nA pointer to user-defined data. This pointer is passed into the callback function specified in the callback parameter.\n\nReturn Value\n\nA Core Foundation mach port that represents the new event tap, or NULL if the event tap could not be created. When you are finished using the event tap, you should release the mach port using the function CFRelease. Releasing the mach port also releases the tap.\n\nDiscussion\n\nThis function creates an event tap that receives events being routed by the window server to the specified process. For more information about creating event taps, see tapCreate(tap:place:options:eventsOfInterest:callback:userInfo:).\n\nSee Also\nWorking With Event Taps\nclass func tapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap.\nclass func tapEnable(tap: CFMachPort, enable: Bool)\nEnables or disables an event tap.\nclass func tapIsEnabled(tap: CFMachPort) -> Bool\nReturns a Boolean value indicating whether an event tap is enabled.\nfunc tapPostEvent(CGEventTapProxy?)\nPosts a Quartz event from an event tap into the event stream.\nfunc post(tap: CGEventTapLocation)\nPosts a Quartz event into the event stream at a specified location.\nfunc postToPSN(processSerialNumber: UnsafeMutableRawPointer?)\nPosts a Quartz event into the event stream for a specific application.\nfunc CGGetEventTapList(UInt32, UnsafeMutablePointer<CGEventTapInformation>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of currently installed event taps."
  },
  {
    "title": "CGGetEventTapList(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455395-cggeteventtaplist",
    "html": "Parameters\nmaxNumberOfTaps\n\nThe length of the array you provide in the tapList parameter.\n\ntapList\n\nAn array of event tap information structures. You are responsible for allocating storage for the array. On return, your array contains a list of currently installed event taps. If you pass NULL in this parameter, the maxNumberOfTaps parameter is ignored, and the eventTapCount variable is filled in with the number of event taps that are currently installed.\n\neventTapCount\n\nA pointer to a CGTableCount variable. On return, the variable contains actual number of array elements filled in.\n\nReturn Value\n\nA result code. See the result codes described in Quartz Display Services.\n\nDiscussion\n\nEach call to this function has the side effect of resetting the minimum and maximum latency values in the tapList parameter to the corresponding average values. Values reported in these fields reflect the minimum and maximum values seen since the preceding call, or the instantiation of the tap. This allows a monitoring tool to evaluate the best and worst case latency over time and under various operating conditions.\n\nSee Also\nWorking With Event Taps\nclass func tapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap.\nclass func tapCreateForPSN(processSerialNumber: UnsafeMutableRawPointer, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap for a specified process.\nclass func tapEnable(tap: CFMachPort, enable: Bool)\nEnables or disables an event tap.\nclass func tapIsEnabled(tap: CFMachPort) -> Bool\nReturns a Boolean value indicating whether an event tap is enabled.\nfunc tapPostEvent(CGEventTapProxy?)\nPosts a Quartz event from an event tap into the event stream.\nfunc post(tap: CGEventTapLocation)\nPosts a Quartz event into the event stream at a specified location.\nfunc postToPSN(processSerialNumber: UnsafeMutableRawPointer?)\nPosts a Quartz event into the event stream for a specific application."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408789-typeid",
    "html": "Return Value\n\nThe Core Foundation type identifier for the opaque type CGEventSource.\n\nSee Also\nWorking With Event Sources\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "tapEnable(tap:enable:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455445-tapenable",
    "html": "Parameters\nmyTap\n\nThe event tap to enable or disable.\n\nenable\n\nPass true to enable the event tap. To disable it, pass false.\n\nDiscussion\n\nEvent taps are normally enabled when created. If an event tap becomes unresponsive, or if a user requests that event taps be disabled, then a kCGEventTapDisabled event is passed to the event tap callback function. Event taps may be re-enabled by calling this function.\n\nSee Also\nWorking With Event Taps\nclass func tapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap.\nclass func tapCreateForPSN(processSerialNumber: UnsafeMutableRawPointer, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap for a specified process.\nclass func tapIsEnabled(tap: CFMachPort) -> Bool\nReturns a Boolean value indicating whether an event tap is enabled.\nfunc tapPostEvent(CGEventTapProxy?)\nPosts a Quartz event from an event tap into the event stream.\nfunc post(tap: CGEventTapLocation)\nPosts a Quartz event into the event stream at a specified location.\nfunc postToPSN(processSerialNumber: UnsafeMutableRawPointer?)\nPosts a Quartz event into the event stream for a specific application.\nfunc CGGetEventTapList(UInt32, UnsafeMutablePointer<CGEventTapInformation>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of currently installed event taps."
  },
  {
    "title": "init(stateID:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408776-init",
    "html": "Parameters\nsourceState\n\nThe event state table to use for this event source. Pass one of the constants listed in CGEventSourceStateID.\n\nReturn Value\n\nA new event source, or NULL if the specified source state is not valid. When you no longer need the event source, you should release it using the function CFRelease.\n\nDiscussion\n\nIf two or more event sources are using the same source state and one of them is released, the remaining event sources will behave as if all keys and buttons on input devices are up in generating new events from this source.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "postToPSN(processSerialNumber:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455313-posttopsn",
    "html": "Parameters\nprocessSerialNumber\n\nThe process to receive the event.\n\nevent\n\nThe event to post.\n\nDiscussion\n\nThis function makes it possible for an application to establish an event routing policy, for example, by tapping events at the kCGAnnotatedSessionEventTap location and then posting the events to another desired process.\n\nThis function posts the specified event immediately before any event taps instantiated for the specified process, and the event passes through any such taps.\n\nSee Also\nWorking With Event Taps\nclass func tapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap.\nclass func tapCreateForPSN(processSerialNumber: UnsafeMutableRawPointer, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap for a specified process.\nclass func tapEnable(tap: CFMachPort, enable: Bool)\nEnables or disables an event tap.\nclass func tapIsEnabled(tap: CFMachPort) -> Bool\nReturns a Boolean value indicating whether an event tap is enabled.\nfunc tapPostEvent(CGEventTapProxy?)\nPosts a Quartz event from an event tap into the event stream.\nfunc post(tap: CGEventTapLocation)\nPosts a Quartz event into the event stream at a specified location.\nfunc CGGetEventTapList(UInt32, UnsafeMutablePointer<CGEventTapInformation>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of currently installed event taps."
  },
  {
    "title": "tapIsEnabled(tap:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1456102-tapisenabled",
    "html": "Parameters\nmyTap\n\nThe event tap to test.\n\nReturn Value\n\nIf true, the specified event tap is enabled; otherwise, false.\n\nDiscussion\n\nFor more information, see the function tapEnable(tap:enable:).\n\nSee Also\nWorking With Event Taps\nclass func tapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap.\nclass func tapCreateForPSN(processSerialNumber: UnsafeMutableRawPointer, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap for a specified process.\nclass func tapEnable(tap: CFMachPort, enable: Bool)\nEnables or disables an event tap.\nfunc tapPostEvent(CGEventTapProxy?)\nPosts a Quartz event from an event tap into the event stream.\nfunc post(tap: CGEventTapLocation)\nPosts a Quartz event into the event stream at a specified location.\nfunc postToPSN(processSerialNumber: UnsafeMutableRawPointer?)\nPosts a Quartz event into the event stream for a specific application.\nfunc CGGetEventTapList(UInt32, UnsafeMutablePointer<CGEventTapInformation>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of currently installed event taps."
  },
  {
    "title": "CGWindowListCreateImage(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454852-cgwindowlistcreateimage",
    "html": "Parameters\nscreenBounds\n\nThe rectangle that you want to capture. The coordinates of the rectangle must be specified in screen coordinates, where the screen origin is in the upper-left corner of the main display and y-axis values increase downward. Specify CGRectNull to indicate the minimum rectangle that encloses the specified windows. Specify CGRectInfinite to capture the entire desktop area.\n\nwindowOption\n\nThe options describing which windows to include in the image. Typical options let you choose all windows or windows above or below the window specified in the windowID parameter. For more information, see Window List Option Constants.\n\nwindowID\n\nThe ID of the window to use as a reference point when determining which other windows to include in the image. For options that do not require a reference window, this parameter can be kCGNullWindowID.\n\nimageOption\n\nThe options that determine which parts of the window to capture. If you specified CGRectNull for the screenBounds parameter, these options affect the resulting bounding box used for the image. For example, if you include a window’s screen effects in the image, the bounding box may need to be slightly larger to accommodate those effects. For a list of possible options, see Window Image Types.\n\nReturn Value\n\nA composite image formed from the contents of the specified set of windows. If the windows are unreadable or no windows meet the specified criteria, this function returns an image that is either 0 by 0 pixels in size or is of the specified size but is filled with the transparent black color. If you call this function from outside of a GUI security session or when no window server is running, this function returns NULL.\n\nDiscussion\n\nAny windows that are onscreen but whose sharing setting is set to CGWindowSharingType.none are skipped and not included in the resulting image. If this results in no windows being available in the selected range, this function returns NULL.\n\nSee Also\nGetting Window Information\nfunc CGWindowListCopyWindowInfo(CGWindowListOption, CGWindowID) -> CFArray?\nGenerates and returns information about the selected windows in the current user session.\nfunc CGWindowListCreateDescriptionFromArray(CFArray?) -> CFArray?\nGenerates and returns information about windows with the specified window IDs.\ninit?(windowListFromArrayScreenBounds: CGRect, windowArray: CFArray, imageOption: CGWindowImageOption)\nReturns a composite image of the specified windows.\nDeprecated"
  },
  {
    "title": "CGWindowListCopyWindowInfo(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455137-cgwindowlistcopywindowinfo",
    "html": "Parameters\noption\n\nThe options describing which window dictionaries to return. Typical options let you return dictionaries for all windows or for windows above or below the window specified in the relativeToWindow parameter. For more information, see Window List Option Constants.\n\nrelativeToWindow\n\nThe ID of the window to use as a reference point when determining which other window dictionaries to return. For options that do not require a reference window, this parameter can be kCGNullWindowID.\n\nReturn Value\n\nAn array of CFDictionary types, each of which contains information about one of the windows in the current user session. If there are no windows matching the desired criteria, the function returns an empty array. If you call this function from outside of a GUI security session or when no window server is running, this function returns NULL.\n\nDiscussion\n\nYou can use this function to get detailed information about the configuration of one or more windows in the current user session. For example, you can use this function to get the bounds of the window, its window ID, and information about how it is managed by the window server. For the list of keys and values that may be present in the dictionary, see Required Window List Keys and Optional Window List Keys.\n\nGenerating the dictionaries for system windows is a relatively expensive operation. As always, you should profile your code and adjust your usage of this function appropriately for your needs.\n\nSee Also\nGetting Window Information\nfunc CGWindowListCreateDescriptionFromArray(CFArray?) -> CFArray?\nGenerates and returns information about windows with the specified window IDs.\nfunc CGWindowListCreateImage(CGRect, CGWindowListOption, CGWindowID, CGWindowImageOption) -> CGImage?\nReturns a composite image based on a dynamically generated list of windows.\nDeprecated\ninit?(windowListFromArrayScreenBounds: CGRect, windowArray: CFArray, imageOption: CGWindowImageOption)\nReturns a composite image of the specified windows.\nDeprecated"
  },
  {
    "title": "CGWindowListCreateDescriptionFromArray(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455215-cgwindowlistcreatedescriptionfro",
    "html": "Parameters\nwindowArray\n\nAn array of CGWindowID types, each of which corresponds to a window whose information you want to retrieve.\n\nReturn Value\n\nAn array of CFDictionary types, each of which contains information about one of the windows in the current user session. If there are no windows matching the desired criteria, the function returns an empty array. If you call this function from outside of a GUI security session or when no window server is running, this function returns NULL.\n\nDiscussion\n\nThis function ignores any window IDs in the windowArray parameter that refer to windows that no longer exist. (This can occur if the user closes a window between the time you retrieve its ID and the time you call this function.) You should therefore not assume that the returned array of dictionaries contains the same number of entries as this parameter. To make it easier to associate window IDs with the correct information, however, each dictionary does contain a kCGWindowNumber key whose value is the corresponding window ID. For the list of keys and values that may be present in the dictionary, see Required Window List Keys and Optional Window List Keys.\n\nSee Also\nGetting Window Information\nfunc CGWindowListCopyWindowInfo(CGWindowListOption, CGWindowID) -> CFArray?\nGenerates and returns information about the selected windows in the current user session.\nfunc CGWindowListCreateImage(CGRect, CGWindowListOption, CGWindowID, CGWindowImageOption) -> CGImage?\nReturns a composite image based on a dynamically generated list of windows.\nDeprecated\ninit?(windowListFromArrayScreenBounds: CGRect, windowArray: CFArray, imageOption: CGWindowImageOption)\nReturns a composite image of the specified windows.\nDeprecated"
  },
  {
    "title": "CGWindowBackingType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowbackingtype",
    "html": "Overview\n\nThis type is used in conjunction with the constants described in Backing Store Types.\n\nTopics\nEnumeration Cases\ncase backingStoreBuffered\ncase backingStoreNonretained\ncase backingStoreRetained\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "Window Sharing Constants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services/window_sharing_constants",
    "html": "Topics\nConstants\ncase none\ncase readOnly\ncase readWrite"
  },
  {
    "title": "Backing Store Types | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services/backing_store_types",
    "html": "Topics\nConstants\ncase backingStoreRetained\ncase backingStoreNonretained\ncase backingStoreBuffered"
  },
  {
    "title": "CGConfigureOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgconfigureoption",
    "html": "Overview\n\nFor information about how these constants are used, see the function CGCompleteDisplayConfiguration(_:_:).\n\nTopics\nInitializers\ninit(rawValue: UInt32)\nType Properties\nstatic var forAppOnly: CGConfigureOption\nChanges persist for the lifetime of the current application. After the application terminates, the display configuration settings revert to the current login session.\nstatic var forSession: CGConfigureOption\nChanges persist for the lifetime of the current login session. After the current session terminates, the displays revert to the last saved permanent configuration.\nstatic var permanently: CGConfigureOption\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "CGCaptureOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcaptureoptions",
    "html": "Overview\n\nFor information about how these constants are used, see the functions CGDisplayCaptureWithOptions(_:_:) and CGCaptureAllDisplaysWithOptions(_:).\n\nTopics\nConstants\nstatic var noFill: CGCaptureOptions\nDisables fill with black.\nDeprecated\nInitializers\ninit(rawValue: UInt32)\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "numberOfComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1454130-numberofcomponents",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nThe number of color components (including alpha) associated with the specified color. This number is one more than the number of components of the color space for the color.\n\nSee Also\nExamining a Color\nvar alpha: CGFloat\nReturns the value of the alpha component associated with a color.\nvar colorSpace: CGColorSpace?\nReturns the color space associated with a color.\nvar components: [CGFloat]?\nReturns the values of the color components (including alpha) associated with a color.\nvar pattern: CGPattern?\nReturns the pattern associated with a color in a pattern color space."
  },
  {
    "title": "Window Image Types | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services/window_image_types",
    "html": "Topics\nConstants\nstatic var boundsIgnoreFraming: CGWindowImageOption\nstatic var shouldBeOpaque: CGWindowImageOption\nstatic var onlyShadows: CGWindowImageOption\nstatic var bestResolution: CGWindowImageOption\nWhen capturing the window, return the best image resolution. The returned image size may be different than the screen size.\nstatic var nominalResolution: CGWindowImageOption\nWhen capturing the window, return the nominal image resolution. The returned image size is the same as the screen size."
  },
  {
    "title": "CGDisplayGetDrawingContext(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456576-cgdisplaygetdrawingcontext",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nReturn Value\n\nA Quartz graphics context suitable for drawing to a captured display, or NULL if the display has not been captured. The context is owned by the system and you should not release it.\n\nDiscussion\n\nAfter capturing a display or changing the configuration of a captured display, you can use this function to obtain the current graphics context for the display. The graphics context remains valid while the display is captured and the display configuration is unchanged. Releasing the captured display or reconfiguring the display invalidates the context. To determine when the display configuration is changing, you can use the function CGDisplayRegisterReconfigurationCallback(_:_:) to register a display reconfiguration callback.\n\nSee Also\nCapturing and Releasing Displays\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGDisplayIsCaptured(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display."
  },
  {
    "title": "Optional Window List Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services/optional_window_list_keys",
    "html": "Topics\nConstants\nlet kCGWindowWorkspace: CFString\nDeprecated\nlet kCGWindowOwnerName: CFString\nlet kCGWindowName: CFString\nlet kCGWindowIsOnscreen: CFString\nlet kCGWindowBackingLocationVideoMemory: CFString"
  },
  {
    "title": "CGBeginDisplayConfiguration(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455235-cgbegindisplayconfiguration",
    "html": "Parameters\npConfigRef\n\nA pointer to storage you provide for a display configuration. On return, your storage contains a new display configuration.\n\nReturn Value\n\nA result code. If the request to create a new display configuration is successful, the result is kCGErrorSuccess. For other possible values, see CGError.\n\nDiscussion\n\nThis function creates a display configuration object that provides a context for a set of display configuration changes. After you specify the desired changes, you use CGCompleteDisplayConfiguration(_:_:) to apply them in a single transaction.\n\nSee Also\nConfiguring Displays\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nDeprecated\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display."
  },
  {
    "title": "CGCompleteDisplayConfiguration(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454488-cgcompletedisplayconfiguration",
    "html": "Parameters\nconfigRef\n\nThe display configuration that contains the desired changes. On return, this configuration is no longer valid.\n\noption\n\nThe scope of the display configuration changes. Pass one of the constants listed in CGConfigureOption.\n\nReturn Value\n\nA result code. If the request to apply changes is successful, the result is kCGErrorSuccess. For other possible values, see CGError.\n\nDiscussion\n\nThis function applies a set of display configuration changes as a single atomic transaction. The duration or scope of the changes depends on the value of the option parameter. For more information about possible scopes, see CGConfigureOption.\n\nA configuration change can fail if you request an unsupported display mode or if another application is running in full-screen mode.\n\nSee Also\nConfiguring Displays\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nDeprecated\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display."
  },
  {
    "title": "Required Window List Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services/required_window_list_keys",
    "html": "Topics\nConstants\nlet kCGWindowNumber: CFString\nlet kCGWindowStoreType: CFString\nlet kCGWindowLayer: CFString\nlet kCGWindowBounds: CFString\nlet kCGWindowSharingState: CFString\nlet kCGWindowAlpha: CFString\nlet kCGWindowOwnerPID: CFString\nlet kCGWindowMemoryUsage: CFString"
  },
  {
    "title": "CGDisplayIDToOpenGLDisplayMask(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455554-cgdisplayidtoopengldisplaymask",
    "html": "Parameters\ndisplay\n\nThe display ID to be converted.\n\nReturn Value\n\nThe OpenGL display mask that corresponds to the specified display.\n\nDiscussion\n\nOpenGL sometimes identifies a display using a bitmask with one bit set. This function maps a display ID to the corresponding OpenGL display mask.\n\nSee Also\nFinding Displays\nfunc CGMainDisplayID() -> CGDirectDisplayID\nReturns the display ID of the main display.\nfunc CGGetOnlineDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are online (active, mirrored, or sleeping).\nfunc CGGetActiveDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are active for drawing.\nfunc CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that corresponds to the bits set in an OpenGL display mask.\nfunc CGGetDisplaysWithPoint(CGPoint, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of online displays with bounds that include the specified point.\nfunc CGGetDisplaysWithRect(CGRect, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of online displays with bounds that intersect the specified rectangle.\nfunc CGOpenGLDisplayMaskToDisplayID(CGOpenGLDisplayMask) -> CGDirectDisplayID\nMaps an OpenGL display mask to a display ID."
  },
  {
    "title": "CGDisplayCreateImage(_:rect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1454595-cgdisplaycreateimage",
    "html": "Parameters\ndisplay\n\nThe identifier of the display to be accessed.\n\nrect\n\nThe rectangle, specified in display space, for the portion of the display being copied into the image.\n\nReturn Value\n\nAn image containing the contents of the specified rectangle. If the display ID is invalid, the return value is NULL. The caller is responsible for releasing the image created by calling CGImageRelease.\n\nDiscussion\n\nThe actual rectangle used is the rectangle returned by CGRectIntegral(_:) with rect as a parameter.\n\nSee Also\nCreating Images from the Display\nfunc CGDisplayCreateImage(CGDirectDisplayID) -> CGImage?\nReturns an image containing the contents of the specified display."
  },
  {
    "title": "CGCaptureAllDisplaysWithOptions(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456514-cgcapturealldisplayswithoptions",
    "html": "Parameters\noptions\n\nThe options to use. See CGCaptureOptions.\n\nReturn Value\n\nA result code. See Core Graphics Data Types and Constants.\n\nDiscussion\n\nThis function allows you to specify one or more options to use during capture of all attached displays.\n\nSee Also\nCapturing and Releasing Displays\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGDisplayIsCaptured(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "CGShieldingWindowLevel() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1456352-cgshieldingwindowlevel",
    "html": "Return Value\n\nThe window level of the shield window for a captured display.\n\nDiscussion\n\nThis function returns a value that is sometimes used to position a window over the shield window for a captured display. Attempting to position a window over a captured display may be unsuccessful—or it may present undesirable results such as illegible or invisible content—because of interactions between full-screen graphics (such as OpenGL full-screen drawing contexts) and the graphics hardware. Because of these limitations, this technique is not recommended.\n\nSee Also\nCapturing and Releasing Displays\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGDisplayIsCaptured(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display."
  },
  {
    "title": "CGCancelDisplayConfiguration(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455522-cgcanceldisplayconfiguration",
    "html": "Parameters\nconfigRef\n\nThe display configuration to cancel. On return, the configuration is no longer valid.\n\nReturn Value\n\nA result code. If the request to cancel a display configuration is successful, the result is kCGErrorSuccess. For other possible values, see CGError.\n\nDiscussion\n\nThis function abandons a display configuration, causing the object to release.\n\nSee Also\nConfiguring Displays\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nDeprecated\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display."
  },
  {
    "title": "CGDisplayCreateImage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/1455691-cgdisplaycreateimage",
    "html": "Parameters\ndisplay\n\nThe identifier of the display for which an image is being created.\n\nReturn Value\n\nAn image containing the contents of the specified display. If the display ID is invalid, the return value is NULL. The caller is responsible for releasing the image created by calling CGImageRelease.\n\nSee Also\nCreating Images from the Display\nfunc CGDisplayCreateImage(CGDirectDisplayID, rect: CGRect) -> CGImage?\nReturns an image containing the contents of a portion of the specified display."
  },
  {
    "title": "addDestination(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455424-adddestination",
    "html": "Parameters\nname\n\nA destination name.\n\npoint\n\nA location in the current page of the PDF graphics context.\n\nSee Also\nManaging a PDF Graphics Context\nfunc beginPDFPage(CFDictionary?)\nBegins a new page in a PDF graphics context.\nfunc endPDFPage()\nEnds the current page in the PDF graphics context.\nfunc setDestination(CFString, for: CGRect)\nSets a destination to jump to when a rectangle in the current PDF page is clicked.\nfunc setURL(CFURL, for: CGRect)\nSets the URL associated with a rectangle in a PDF graphics context.\nfunc addDocumentMetadata(CFData?)\nAssociates custom metadata with the PDF document.\nfunc closePDF()\nCloses a PDF document."
  },
  {
    "title": "CGDataProviderSequentialCallbacks | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovidersequentialcallbacks",
    "html": "Overview\n\nThe functions specified by the CGDataProviderSequentialCallbacks structure are responsible for sequentially copying data to a memory buffer for Core Graphics to use. The functions are also responsible for handling the data provider’s basic memory management. You supply a CGDataProviderCallbacks structure to the function init(sequentialInfo:callbacks:) to create a sequential-access data provider.\n\nTopics\nInitializers\ninit()\ninit(version: UInt32, getBytes: CGDataProviderGetBytesCallback?, skipForward: CGDataProviderSkipForwardCallback?, rewind: CGDataProviderRewindCallback?, releaseInfo: CGDataProviderReleaseInfoCallback?)\nInstance Properties\nvar getBytes: CGDataProviderGetBytesCallback?\nA pointer to a function that copies data from the provider. For more information, see CGDataProviderGetBytesCallback.\nvar releaseInfo: CGDataProviderReleaseInfoCallback?\nA pointer to a function that handles clean-up for the data provider, or NULL. For more information, see CGDataProviderReleaseInfoCallback.\nvar rewind: CGDataProviderRewindCallback?\nA pointer to a function Core Graphics calls to return the provider to the beginning of the data stream. For more information, see CGDataProviderRewindCallback.\nvar skipForward: CGDataProviderSkipForwardCallback?\nA pointer to a function that Core Graphics calls to advance the stream of data supplied by the provider.\nvar version: UInt32\nThe version of this structure. It should be set to 0.\nSee Also\nCreating Sequential-Access Data Providers\ninit?(sequentialInfo: UnsafeMutableRawPointer?, callbacks: UnsafePointer<CGDataProviderSequentialCallbacks>)\nCreates a sequential-access data provider.\ntypealias CGDataProviderRewindCallback\nA callback function that moves the current position in the data stream back to the beginning.\ntypealias CGDataProviderGetBytesCallback\nA callback function that copies from a provider data stream into a Core Graphics buffer.\ntypealias CGDataProviderSkipForwardCallback\nA callback function that advances the current position in the data stream supplied by the provider.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider."
  },
  {
    "title": "getGlyphBBoxes(glyphs:count:bboxes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396342-getglyphbboxes",
    "html": "Parameters\nglyphs\n\nA array of glyphs.\n\ncount\n\nThe number of items in the glyphs array.\n\nbboxes\n\nOn return, the bounding boxes for each glyph.\n\nReturn Value\n\nfalse if bounding boxes can't be retrieved for any reason; true otherwise.\n\nSee Also\nWorking with Glyphs\nvar numberOfGlyphs: Int\nReturns the number of glyphs in a font.\nfunc name(for: CGGlyph) -> CFString?\nReturns the glyph name of the specified glyph in the specified font.\nfunc getGlyphWithGlyphName(name: CFString) -> CGGlyph\nReturns the glyph for the glyph name associated with the specified font object.\nfunc getGlyphAdvances(glyphs: UnsafePointer<CGGlyph>, count: Int, advances: UnsafeMutablePointer<Int32>) -> Bool\nGets the advance width of each glyph in the provided array.\ntypealias CGGlyph\nAn index into the internal glyph table of a font.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\ntypealias CGFontIndex\nAn index into a font table.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex."
  },
  {
    "title": "kCGGlyphMax | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgglyphmax",
    "html": "See Also\nWorking with Glyphs\nvar numberOfGlyphs: Int\nReturns the number of glyphs in a font.\nfunc name(for: CGGlyph) -> CFString?\nReturns the glyph name of the specified glyph in the specified font.\nfunc getGlyphWithGlyphName(name: CFString) -> CGGlyph\nReturns the glyph for the glyph name associated with the specified font object.\nfunc getGlyphBBoxes(glyphs: UnsafePointer<CGGlyph>, count: Int, bboxes: UnsafeMutablePointer<CGRect>) -> Bool\nGet the bounding box of each glyph in an array.\nfunc getGlyphAdvances(glyphs: UnsafePointer<CGGlyph>, count: Int, advances: UnsafeMutablePointer<Int32>) -> Bool\nGets the advance width of each glyph in the provided array.\ntypealias CGGlyph\nAn index into the internal glyph table of a font.\ntypealias CGFontIndex\nAn index into a font table.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex."
  },
  {
    "title": "CGPDFOperatorTable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/cgpdfoperatortable",
    "html": "Overview\n\nYou pass an operator table and a PDF content stream to a CGPDFScanner object. When the scanner parses a PDF operator, Core Graphics invokes your callback for that operator. See also CGPDFScanner and CGPDFContentStream.\n\nNote\n\nThis object is not derived from CFType and therefore you can’t use the Core Foundation base functions on it, such as CFRetain and CFRelease. Memory management is handled by the specific functions CGPDFOperatorTableRetain(_:) and CGPDFOperatorTableRelease(_:).\n\nFor more about PDF operators, see the latest version of PDF Reference, Adobe Systems Incorporated.\n\nTopics\nCreating a PDF Operator Table\nfunc CGPDFOperatorTableCreate() -> CGPDFOperatorTableRef?\nCreates an empty PDF operator table.\nSetting Callback Functions\nfunc CGPDFOperatorTableSetCallback(CGPDFOperatorTableRef, UnsafePointer<CChar>, CGPDFOperatorCallback)\nSets a callback function for a PDF operator.\nRetaining and Releasing a PDF Operator Table\nfunc CGPDFOperatorTableRetain(CGPDFOperatorTableRef) -> CGPDFOperatorTableRef\nIncrements the retain count of a CGPDFOperatorTable object.\nfunc CGPDFOperatorTableRelease(CGPDFOperatorTableRef)\nDecrements the retain count of a CGPDFOperatorTable object.\nCallbacks\ntypealias CGPDFOperatorCallback\nPerforms custom processing for PDF operators.\nData Types\ntypealias CGPDFOperatorTableRef\nA type that stores callback functions for PDF operators.\nSee Also\nAbstract Types for PDF Document Content\nCGPDFPage\nA page in a PDF document.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page."
  },
  {
    "title": "tableTags | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396392-tabletags",
    "html": "Parameters\nfont\n\nA CGFont object.\n\nReturn Value\n\nAn array of font table tags.\n\nDiscussion\n\nEach entry in the returned array is a four-byte value that represents a single TrueType or OpenType font table tag. To obtain a tag at index k in a manner that is appropriate for 32-bit and 64-bit architectures, you need to use code similar to the following:\n\ntag = (uint32_t)(uintptr_t)CFArrayGetValue(table, k);\n\nSee Also\nWorking with Font Tables\nfunc table(for: UInt32) -> CFData?\nReturns the font table that corresponds to the provided tag.\nFont Table Index Values\nPossible values for an index into a font table."
  },
  {
    "title": "CGPDFObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/cgpdfobject",
    "html": "Overview\n\nPDF supports several basic types of object: Boolean values, integer and real numbers, strings, names, arrays, dictionaries, and streams. Most of these are represented in Core Graphics by corresponding specific types. A CGPDFObject can represent any of these types. You use CGPDFObject functions to determine the type of the object, and retrieve the object value if it is of an expected type.\n\nThis object is not derived from CFType and therefore there are no functions for retaining and releasing it. CGPDFObject objects exist as constituent parts of a CGPDFDocument object, and are managed by their container.\n\nTopics\nGetting Object Types and Values\nfunc CGPDFObjectGetType(CGPDFObjectRef) -> CGPDFObjectType\nReturns the PDF type identifier of an object.\nfunc CGPDFObjectGetValue(CGPDFObjectRef, CGPDFObjectType, UnsafeMutableRawPointer?) -> Bool\nReturns whether an object is of a given type and if it is, retrieves its value.\nData Types\ntypealias CGPDFObjectRef\nA type that contains information about a PDF object.\ntypealias CGPDFBoolean\nA PDF Boolean value.\ntypealias CGPDFInteger\nA PDF integer value.\ntypealias CGPDFReal\nA PDF real value.\nConstants\nenum CGPDFObjectType\nTypes of PDF object.\nSee Also\nAbstract Types for PDF Document Content\nCGPDFPage\nA page in a PDF document.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "createPostScriptSubset(subsetName:format:glyphs:count:encoding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396324-createpostscriptsubset",
    "html": "Parameters\nsubsetName\n\nThe name of the subset.\n\nformat\n\nThe PostScript format of the font.\n\nglyphs\n\nAn array that contains the glyphs in the subset.\n\ncount\n\nThe number of glyphs specified by the glyphs array.\n\nencoding\n\nThe default encoding for the subset. You can pass NULL if you do not want to specify an encoding.\n\nReturn Value\n\nA subset of the font created from the supplied parameters.\n\nDiscussion\n\nFor more information on PostScript format, see Adobe Type 1 Font Format, which is available from http://partners.adobe.com/.\n\nSee Also\nWorking with PostScript Fonts\nvar postScriptName: CFString?\nObtains the PostScript name of a font.\nfunc canCreatePostScriptSubset(CGFontPostScriptFormat) -> Bool\nDetermines whether Core Graphics can create a subset of the font in PostScript format.\nenum CGFontPostScriptFormat\nPossible formats for a PostScript font subset.\nfunc createPostScriptEncoding(encoding: UnsafePointer<CGGlyph>?) -> CFData?\nCreates a PostScript encoding of a font."
  },
  {
    "title": "CGPDFPage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/cgpdfpage",
    "html": "Overview\n\nThe CGPDFPage opaque type represents a page in a PDF document.\n\nTopics\nGetting the CFType ID\nclass var typeID: CFTypeID\nReturns the CFType ID for PDF page objects.\nGetting Page Information\nfunc getBoxRect(CGPDFBox) -> CGRect\nReturns the rectangle that represents a type of box for a content region or page dimensions of a PDF page.\nvar dictionary: CGPDFDictionaryRef?\nReturns the dictionary of a PDF page.\nvar document: CGPDFDocument?\nReturns the document for a page.\nfunc getDrawingTransform(CGPDFBox, rect: CGRect, rotate: Int32, preserveAspectRatio: Bool) -> CGAffineTransform\nReturns the affine transform that maps a box to a given rectangle on a PDF page.\nvar pageNumber: Int\nReturns the page number of the specified PDF page.\nvar rotationAngle: Int32\nReturns the rotation angle of a PDF page.\nData Types\nclass CGPDFPage\nA type that represents a page in a PDF document.\nConstants\nenum CGPDFBox\nBox types for a PDF page.\nSee Also\nAbstract Types for PDF Document Content\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document."
  },
  {
    "title": "unitsPerEm | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396344-unitsperem",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe number of glyph space units per em for the provided font.\n\nSee Also\nExamining Font Metrics\nvar ascent: Int32\nReturns the ascent of a font.\nvar capHeight: Int32\nReturns the cap height of a font.\nvar descent: Int32\nReturns the descent of a font.\nvar fontBBox: CGRect\nReturns the bounding box of a font.\nvar italicAngle: CGFloat\nReturns the italic angle of a font.\nvar leading: Int32\nReturns the leading of a font.\nvar stemV: CGFloat\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nvar xHeight: Int32\nReturns the x-height of a font."
  },
  {
    "title": "isUnlocked | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402607-isunlocked",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nReturn Value\n\nA Boolean that, if true, indicates that the document is not locked. If the value is false, the document is locked.\n\nDiscussion\n\nThere are two possible reasons why a PDF document is unlocked:\n\nThe document is not encrypted.\n\nThe document is encrypted, and a valid password was previously specified using unlockWithPassword(_:).\n\nSee Also\nWorking with an Encrypted PDF Document\nvar isEncrypted: Bool\nReturns whether the specified PDF file is encrypted.\nvar allowsCopying: Bool\nReturns whether the specified PDF document allows copying.\nvar allowsPrinting: Bool\nReturns whether a PDF document allows printing.\nfunc unlockWithPassword(UnsafePointer<CChar>) -> Bool\nUnlocks an encrypted PDF document when a valid password is supplied."
  },
  {
    "title": "CGEventFlags | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventflags",
    "html": "Overview\n\nThese constants specify masks for the bits in an event flags bit mask. Event flags indicate the modifier key state at the time an event is created, as well as other event-related states. Event flags are used in accessor functions such as flags, CGEventSetFlags(_:_:), and flagsState(_:).\n\nTopics\nConstants\nstatic var maskAlphaShift: CGEventFlags\nIndicates that the Caps Lock key is down for a keyboard, mouse, or flag-changed event.\nstatic var maskShift: CGEventFlags\nIndicates that the Shift key is down for a keyboard, mouse, or flag-changed event.\nstatic var maskControl: CGEventFlags\nIndicates that the Control key is down for a keyboard, mouse, or flag-changed event.\nstatic var maskAlternate: CGEventFlags\nIndicates that the Alt or Option key is down for a keyboard, mouse, or flag-changed event.\nstatic var maskCommand: CGEventFlags\nIndicates that the Command key is down for a keyboard, mouse, or flag-changed event.\nstatic var maskHelp: CGEventFlags\nIndicates that the Help modifier key is down for a keyboard, mouse, or flag-changed event. This key is not present on most keyboards, and is different than the Help key found in the same row as Home and Page Up.\nstatic var maskSecondaryFn: CGEventFlags\nIndicates that the Fn (Function) key is down for a keyboard, mouse, or flag-changed event. This key is found primarily on laptop keyboards.\nstatic var maskNumericPad: CGEventFlags\nIdentifies key events from the numeric keypad area on extended keyboards.\nstatic var maskNonCoalesced: CGEventFlags\nIndicates that mouse and pen movement events are not being coalesced.\nInitializers\ninit(rawValue: UInt64)\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "CGScreenUpdateOperation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgscreenupdateoperation",
    "html": "Overview\n\nFor information about how these constants are used, see the function CGWaitForScreenUpdateRects(_:_:_:_:_:).\n\nTopics\nConstants\nstatic var refresh: CGScreenUpdateOperation\nA screen-refresh operation.\nstatic var move: CGScreenUpdateOperation\nA screen-move operation.\nstatic var reducedDirtyRectangleCount: CGScreenUpdateOperation\nInitializers\ninit(rawValue: UInt32)\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "CGDeviceColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdevicecolor",
    "html": "Topics\nInitializers\ninit()\ninit(red: Float, green: Float, blue: Float)\nInstance Properties\nvar blue: Float\nvar green: Float\nvar red: Float"
  },
  {
    "title": "init(colorsSpace:colors:locations:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggradient/1398458-init",
    "html": "Parameters\nspace\n\nThe color space to use for the gradient. You cannot use a pattern or indexed color space.\n\ncolors\n\nA non-empty array of CGColor objects that should be in the color space specified by space. If space is not NULL, each color will be converted (if necessary) to that color space and the gradient will drawn in that color space. Otherwise, each color will be converted to and drawn in the GenericRGB color space.\n\nlocations\n\nThe location for each color provided in colors; each location must be a CGFloat value in the range of 0 to 1, inclusive. If 0 and 1 are not in the locations array, Quartz uses the colors provided that are closest to 0 and 1 for those locations.\n\nIf locations is NULL, the first color in colors is assigned to location 0, the last color in colors is assigned to location 1, and intervening colors are assigned locations that are at equal intervals in between.\n\nThe locations array should contain the same number of items as the colors array.\n\nReturn Value\n\nA CGGradient object.\n\nSee Also\nCreating Gradient Objects\ninit?(colorSpace: CGColorSpace, colorComponents: UnsafePointer<CGFloat>, locations: UnsafePointer<CGFloat>?, count: Int)\nCreates a CGGradient object from a color space and the provided color components and locations.\nRelated Documentation\nfunc drawRadialGradient(CGGradient, startCenter: CGPoint, startRadius: CGFloat, endCenter: CGPoint, endRadius: CGFloat, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the area defined by the provided starting and ending circles.\nfunc drawLinearGradient(CGGradient, start: CGPoint, end: CGPoint, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the line defined by the provided starting and ending points."
  },
  {
    "title": "rotate(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456228-rotate",
    "html": "Parameters\nangle\n\nThe angle, in radians, by which to rotate the coordinate space of the specified context. Positive values rotate counterclockwise and negative values rotate clockwise.)\n\nDiscussion\n\nThe direction that the context is rotated may appear to be altered by the state of the current transformation matrix prior to executing this function. For example, on iOS, a UIView applies a transformation to the graphics context that inverts the Y-axis (by multiplying it by -1). Rotating the user coordinate system on coordinate system that was previously flipped results in a rotation in the opposite direction (that is, positive values appear to rotate the coordinate system in the clockwise direction).\n\nSee Also\nWorking with the Current Transformation Matrix\nvar ctm: CGAffineTransform\nReturns the current transformation matrix.\nfunc scaleBy(x: CGFloat, y: CGFloat)\nChanges the scale of the user coordinate system in a context.\nfunc translateBy(x: CGFloat, y: CGFloat)\nChanges the origin of the user coordinate system in a context.\nfunc concatenate(CGAffineTransform)\nTransforms the user coordinate system in a context using a specified matrix."
  },
  {
    "title": "CGDataProviderReleaseDataCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataproviderreleasedatacallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(dataInfo:data:size:releaseData:).\n\ndata\n\nA pointer to your provider data.\n\nsize\n\nThe size of the data.\n\nDiscussion\n\nWhen Core Graphics no longer needs direct access to your provider data, your function is called. You may safely modify, move, or release your provider data at this time.\n\nSee Also\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider."
  },
  {
    "title": "CGDataProviderReleaseInfoCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataproviderreleaseinfocallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private information shared among your callback functions. This is the same pointer you supplied to CGDataProviderCreate.\n\nDiscussion\n\nWhen Core Graphics frees a data provider that has an associated release function, the release function is called.\n\nFor information on how to associate your callback function with a data provider, see CGDataProviderCreate and CGDataProviderCallbacks.\n\nSee Also\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:)."
  },
  {
    "title": "init(data:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/1408284-init",
    "html": "Parameters\ndata\n\nThe CFData object to read from.\n\nReturn Value\n\nA new data provider. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou can use this function when you need to represent Core Graphics data as a CFData type. For example, you might create a CFData object when reading data from the pasteboard.\n\nSee Also\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:)."
  },
  {
    "title": "data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/1408309-data",
    "html": "Parameters\nprovider\n\nThe data provider whose data you want to copy.\n\nReturn Value\n\nA new data object containing a copy of the provider’s data. You are responsible for releasing this object."
  },
  {
    "title": "CGDataProviderSkipForwardCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataproviderskipforwardcallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to CGDataProviderCreate.\n\ncount\n\nThe number of bytes to skip.\n\nReturn Value\n\nThe number of bytes that were actually skipped.\n\nDiscussion\n\nWhen Core Graphics needs to advance forward in the provider’s data stream, your function is called.\n\nSee Also\nCreating Sequential-Access Data Providers\ninit?(sequentialInfo: UnsafeMutableRawPointer?, callbacks: UnsafePointer<CGDataProviderSequentialCallbacks>)\nCreates a sequential-access data provider.\nstruct CGDataProviderSequentialCallbacks\nDefines a structure containing pointers to client-defined callback functions that manage the sending of data for a sequential-access data provider.\ntypealias CGDataProviderRewindCallback\nA callback function that moves the current position in the data stream back to the beginning.\ntypealias CGDataProviderGetBytesCallback\nA callback function that copies from a provider data stream into a Core Graphics buffer.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/1408290-typeid",
    "html": "Return Value\n\nThe identifier for the opaque type CGDataProvider."
  },
  {
    "title": "CGDataProviderGetBytesCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovidergetbytescallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to CGDataProviderCreate.\n\nbuffer\n\nThe Core Graphics buffer into which you copy the specified number of bytes.\n\ncount\n\nThe number of bytes to copy.\n\nReturn Value\n\nThe number of bytes copied. If no more data can be written to the buffer, you should return 0.\n\nDiscussion\n\nWhen Core Graphics is ready to receive data from the provider data stream, your function is called. It should copy the specified number of bytes into buffer.\n\nFor information on how to associate your callback function with a data provider, see CGDataProviderCreate and CGDataProviderCallbacks.\n\nSee Also\nCreating Sequential-Access Data Providers\ninit?(sequentialInfo: UnsafeMutableRawPointer?, callbacks: UnsafePointer<CGDataProviderSequentialCallbacks>)\nCreates a sequential-access data provider.\nstruct CGDataProviderSequentialCallbacks\nDefines a structure containing pointers to client-defined callback functions that manage the sending of data for a sequential-access data provider.\ntypealias CGDataProviderRewindCallback\nA callback function that moves the current position in the data stream back to the beginning.\ntypealias CGDataProviderSkipForwardCallback\nA callback function that advances the current position in the data stream supplied by the provider.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider."
  },
  {
    "title": "init(directInfo:size:callbacks:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/1408282-init",
    "html": "Parameters\ninfo\n\nA pointer to data of any type or NULL. When Core Graphics calls the functions specified in the callbacks parameter, it sends each of the functions this pointer.\n\nsize\n\nThe number of bytes of data to provide.\n\ncallbacks\n\nA pointer to a CGDataProviderDirectCallbacks structure that specifies the callback functions you implement to handle the data provider’s basic memory management.\n\nReturn Value\n\nA new data provider. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou use this function to create a direct-access data provider that uses callback functions to read data from your program in a single block.\n\nSee Also\nCreating Direct-Access Data Providers\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:)."
  },
  {
    "title": "endTransparencyLayer() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456554-endtransparencylayer",
    "html": "Parameters\ncontext\n\nA graphics context.\n\nSee Also\nWorking with Transparency Layers\nfunc beginTransparencyLayer(in: CGRect, auxiliaryInfo: CFDictionary?)\nBegins a transparency layer whose contents are bounded by the specified rectangle.\nfunc beginTransparencyLayer(auxiliaryInfo: CFDictionary?)\nBegins a transparency layer."
  },
  {
    "title": "conversionTRCSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/2873219-conversiontrcsize",
    "html": "See Also\nConverting Between Color Spaces\nfunc converted(to: CGColorSpace, intent: CGColorRenderingIntent, options: CFDictionary?) -> CGColor?\nCreates a new color in a different color space that matches the provided color."
  },
  {
    "title": "CGEventTapCallBack | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventtapcallback",
    "html": "Parameters\nproxy\n\nA proxy for the event tap. See CGEventTapProxy. This callback function may pass this proxy to other functions such as the event-posting routines.\n\ntype\n\nThe event type of this event. See CGEventType.\n\nevent\n\nThe incoming event. This event is owned by the caller, and you do not need to release it.\n\nrefcon\n\nA pointer to user-defined data. You specify this pointer when you create the event tap. Several different event taps could use the same callback function, each tap with its own user-defined data.\n\nDiscussion\n\nIf the event tap is an active filter, your callback function should return one of the following:\n\nThe (possibly modified) event that is passed in. This event is passed back to the event system.\n\nA newly-constructed event. After the new event has been passed back to the event system, the new event will be released along with the original event.\n\nNULL if the event passed in is to be deleted.\n\nIf the event tap is an passive listener, your callback function may return the event that is passed in, or NULL. In either case, the event stream is not affected."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402585-init",
    "html": "Parameters\nurl\n\nThe URL address at which the PDF document data is located.\n\nReturn Value\n\nA new Core Graphics PDF document, or NULL if a document could not be created. You are responsible for releasing the object using CGPDFDocumentRelease.\n\nDiscussion\n\nDistributing individual pages of a PDF document to separate threads is not supported. If you want to use threads, consider creating a separate document for each thread and operating on a block of pages per thread.\n\nSee Also\nCreating PDF Documents\ninit?(CGDataProvider)\nCreates a Core Graphics PDF document using a data provider.\nRelated Documentation\nCGContextDrawPDFDocument"
  },
  {
    "title": "keyState(_:key:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408768-keystate",
    "html": "Parameters\nsourceState\n\nThe source state to access. Pass one of the constants listed in CGEventSourceStateID.\n\nkey\n\nThe virtual key code to test.\n\nReturn Value\n\nIf true, the key is down. If false, the key is up.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "getLocalEventsFilterDuringSuppressionState(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408785-getlocaleventsfilterduringsuppre",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nstate\n\nThe type of event suppression interval during which the filter is applied. Pass one of the constants listed in CGEventSuppressionState.\n\nReturn Value\n\nA mask that specifies the categories of local hardware events to enable during the event suppression interval. See CGEventFilterMask.\n\nDiscussion\n\nYou can configure the system to suppress local hardware events from the keyboard or mouse during a short interval after a Quartz event is posted or during a synthetic mouse drag (mouse movement with the left or only mouse button down). For information about setting this local events filter, see setLocalEventsFilterDuringSuppressionState(_:state:).\n\nThis function lets you specify an event source and a suppression state (event suppression interval or mouse drag), and returns a filter mask of event categories to be passed through during suppression.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "userData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408777-userdata",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nReturn Value\n\nThe user-specified data.\n\nDiscussion\n\nEach input event includes 64 bits of user-specified data. This function gets the user-specified data for all events created by the specified event source. This data may also be obtained per event using the getIntegerValueField(_:) function.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "sourceStateID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408772-sourcestateid",
    "html": "Parameters\nsource\n\nThe event source to access.\n\nReturn Value\n\nThe source state associated with the specified event source.\n\nDiscussion\n\nThis function returns the ID of the source state table associated with an event source.\n\nFor event sources created with the kCGEventSourceStatePrivate source state, this function returns the ID of the private source state table created for the event source. This unique ID may be passed to the CGEventSourceCreate function to create a second event source sharing the same state table. This may be useful, for example, in creating separate mouse and keyboard sources which share a common private state.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "init(source:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1454913-init",
    "html": "Parameters\nsource\n\nThe event source, or NULL to use a default source.\n\nReturn Value\n\nA new event to be filled in, or NULL if the event could not be created. When you no longer need the event, you should release it using the function CFRelease.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "init(mouseEventSource:mouseType:mouseCursorPosition:mouseButton:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1454356-init",
    "html": "Parameters\nsource\n\nAn event source taken from another event, or NULL.\n\nmouseType\n\nA mouse event type. Pass one of the constants listed in CGEventType.\n\nmouseCursorPosition\n\nThe position of the mouse cursor in global coordinates.\n\nmouseButton\n\nThe button that’s changing state. Pass one of the constants listed in CGMouseButton. This parameter is ignored unless the mouseType parameter is kCGEventOtherMouseDown, kCGEventOtherMouseDragged, or kCGEventOtherMouseUp.\n\nReturn Value\n\nA new mouse event, or NULL if the event could not be created. When you no longer need the event, you should release it using the function CFRelease.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1454922-typeid",
    "html": "Return Value\n\nThe Core Foundation type identifier for the opaque type CGEvent.\n\nSee Also\nWorking With Events\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "flagsState(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408792-flagsstate",
    "html": "Parameters\nsourceState\n\nThe source state to access. Pass one of the constants listed in CGEventSourceStateID.\n\nReturn Value\n\nThe current flags of the specified event source. For more information, see CGEventFlags.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "buttonState(_:button:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408781-buttonstate",
    "html": "Parameters\nsourceState\n\nThe source state to access. Pass one of the constants listed in CGEventSourceStateID.\n\nbutton\n\nThe mouse button to test. Pass one of the constants listed in CGMouseButton.\n\nReturn Value\n\nIf true, the button is down. If false, the button is up.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "init(withDataAllocator:data:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1454249-init",
    "html": "Parameters\nallocator\n\nThe allocator to use to allocate memory for the event object. To use the current default allocator, pass NULL or kCFAllocatorDefault.\n\neventData\n\nThe flattened data representation of the event to reconstruct.\n\nReturn Value\n\nAn event built from the flattened data representation, or NULL if the eventData parameter is invalid.\n\nDiscussion\n\nYou can use this function to reconstruct a Quartz event received by network transport from another system.\n\nSee Also\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event."
  },
  {
    "title": "keyboardType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408787-keyboardtype",
    "html": "Parameters\nsource\n\nThe event source to access. Pass one of the constants listed in CGEventSourceStateID.\n\nReturn Value\n\nThe keyboard type to be used with the specified event source.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "secondsSinceLastEventType(_:eventType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventsource/1408790-secondssincelasteventtype",
    "html": "Parameters\nsource\n\nThe source state to access. Pass one of the constants listed in CGEventSourceStateID.\n\neventType\n\nThe event type to access. To get the elapsed time since the previous input event—keyboard, mouse, or tablet—specify kCGAnyInputEventType.\n\nReturn Value\n\nThe time in seconds since the previous input event of the specified type.\n\nSee Also\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source."
  },
  {
    "title": "tapCreate(tap:place:options:eventsOfInterest:callback:userInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1454426-tapcreate",
    "html": "Parameters\ntap\n\nThe location of the new event tap. Pass one of the constants listed in CGEventTapLocation. Only processes running as the root user may locate an event tap at the point where HID events enter the window server; for other users, this function returns NULL.\n\nplace\n\nThe placement of the new event tap in the list of active event taps. Pass one of the constants listed in CGEventTapPlacement.\n\noptions\n\nA constant that specifies whether the new event tap is a passive listener or an active filter.\n\neventsOfInterest\n\nA bit mask that specifies the set of events to be observed. For a list of possible events, see CGEventType. For information on how to specify the mask, see CGEventMask. If the event tap is not permitted to monitor one or more of the events specified in the eventsOfInterest parameter, then the appropriate bits in the mask are cleared. If that action results in an empty mask, this function returns NULL.\n\ncallback\n\nAn event tap callback function that you provide. Your callback function is invoked from the run loop to which the event tap is added as a source. The thread safety of the callback is defined by the run loop’s environment. To learn more about event tap callbacks, see CGEventTapCallBack.\n\nrefcon\n\nA pointer to user-defined data. This pointer is passed into the callback function specified in the callback parameter.\n\nReturn Value\n\nA Core Foundation mach port that represents the new event tap, or NULL if the event tap could not be created. When you are finished using the event tap, you should release the mach port using the function CFRelease. Releasing the mach port also releases the tap.\n\nDiscussion\n\nEvent taps receive key up and key down events if one of the following conditions is true:\n\nThe current process is running as the root user.\n\nAccess for assistive devices is enabled. In OS X v10.4, you can enable this feature using System Preferences, Universal Access panel, Keyboard view.\n\nAfter creating an event tap, you can add it to a run loop as follows:\n\nPass the event tap to the CFMachPortCreateRunLoopSource(_:_:_:) function to create a run loop event source.\n\nCall the CFRunLoopAddSource(_:_:_:) function to add the source to the appropriate run loop.\n\nSee Also\nWorking With Event Taps\nclass func tapCreateForPSN(processSerialNumber: UnsafeMutableRawPointer, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap for a specified process.\nclass func tapEnable(tap: CFMachPort, enable: Bool)\nEnables or disables an event tap.\nclass func tapIsEnabled(tap: CFMachPort) -> Bool\nReturns a Boolean value indicating whether an event tap is enabled.\nfunc tapPostEvent(CGEventTapProxy?)\nPosts a Quartz event from an event tap into the event stream.\nfunc post(tap: CGEventTapLocation)\nPosts a Quartz event into the event stream at a specified location.\nfunc postToPSN(processSerialNumber: UnsafeMutableRawPointer?)\nPosts a Quartz event into the event stream for a specific application.\nfunc CGGetEventTapList(UInt32, UnsafeMutablePointer<CGEventTapInformation>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of currently installed event taps."
  },
  {
    "title": "tapPostEvent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgevent/1455172-tappostevent",
    "html": "Parameters\nproxy\n\nA proxy that identifies the event tap posting the event. Your event tap callback function is passed this proxy when it is invoked.\n\nevent\n\nThe event to post.\n\nDiscussion\n\nYou can use this function to post a new event at the same point to which an event returned from an event tap callback function would be posted. The new event enters the system before the event returned by the callback enters the system. Events posted into the system will be seen by all taps placed after the tap posting the event.\n\nSee Also\nWorking With Event Taps\nclass func tapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap.\nclass func tapCreateForPSN(processSerialNumber: UnsafeMutableRawPointer, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap for a specified process.\nclass func tapEnable(tap: CFMachPort, enable: Bool)\nEnables or disables an event tap.\nclass func tapIsEnabled(tap: CFMachPort) -> Bool\nReturns a Boolean value indicating whether an event tap is enabled.\nfunc post(tap: CGEventTapLocation)\nPosts a Quartz event into the event stream at a specified location.\nfunc postToPSN(processSerialNumber: UnsafeMutableRawPointer?)\nPosts a Quartz event into the event stream for a specific application.\nfunc CGGetEventTapList(UInt32, UnsafeMutablePointer<CGEventTapInformation>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of currently installed event taps."
  },
  {
    "title": "CGWindowSharingType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowsharingtype",
    "html": "Overview\n\nThis type is used in conjunction with the constants described in Window Sharing Constants.\n\nTopics\nEnumeration Cases\ncase none\ncase readOnly\ncase readWrite\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "Window List Option Constants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services/window_list_option_constants",
    "html": "Overview\n\nThe optionIncludingWindow and excludeDesktopElements constants may be combined with the other constants by adding (or ORing) them together and passing the resulting value to the appropriate function.\n\nThese constants let you retrieve windows in the current user session only. You cannot use them to retrieve windows from other active user sessions running on the system.\n\nTopics\nConstants\nstatic var optionAll: CGWindowListOption\nstatic var optionOnScreenOnly: CGWindowListOption\nstatic var optionOnScreenAboveWindow: CGWindowListOption\nstatic var optionOnScreenBelowWindow: CGWindowListOption\nstatic var optionIncludingWindow: CGWindowListOption\nstatic var excludeDesktopElements: CGWindowListOption"
  },
  {
    "title": "variations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396355-variations",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe variation specification dictionary for the font. Returns NULL if the font doesn't support variations.\n\nDiscussion\n\nThe variation specification dictionary contains keys that correspond to the variation axis names of the font. Each key is a variation axis name. The value for each key is the value specified for that particular variation axis represented as a CFNumber object.\n\nSee Also\nWorking with Variations\nfunc copy(withVariations: CFDictionary?) -> CGFont?\nCreates a copy of a font using a variation specification dictionary.\nvar variationAxes: CFArray?\nReturns an array of the variation axis dictionaries for a font.\nFont Variation Axis Keys\nKeys used for a font variation axis dictionary."
  },
  {
    "title": "kCGFontIndexMax | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgfontindexmax",
    "html": "See Also\nWorking with Glyphs\nvar numberOfGlyphs: Int\nReturns the number of glyphs in a font.\nfunc name(for: CGGlyph) -> CFString?\nReturns the glyph name of the specified glyph in the specified font.\nfunc getGlyphWithGlyphName(name: CFString) -> CGGlyph\nReturns the glyph for the glyph name associated with the specified font object.\nfunc getGlyphBBoxes(glyphs: UnsafePointer<CGGlyph>, count: Int, bboxes: UnsafeMutablePointer<CGRect>) -> Bool\nGet the bounding box of each glyph in an array.\nfunc getGlyphAdvances(glyphs: UnsafePointer<CGGlyph>, count: Int, advances: UnsafeMutablePointer<Int32>) -> Bool\nGets the advance width of each glyph in the provided array.\ntypealias CGGlyph\nAn index into the internal glyph table of a font.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\ntypealias CGFontIndex\nAn index into a font table.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex."
  },
  {
    "title": "addDocumentMetadata(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456026-adddocumentmetadata",
    "html": "Parameters\nmetadata\n\nA stream of XML data that is formatted according to the Extensible Metadata Platform, as described in section 10.2.2., “Metadata Streams”, of the PDF 1.7 specification.\n\nSee Also\nManaging a PDF Graphics Context\nfunc beginPDFPage(CFDictionary?)\nBegins a new page in a PDF graphics context.\nfunc endPDFPage()\nEnds the current page in the PDF graphics context.\nfunc addDestination(CFString, at: CGPoint)\nSets a destination to jump to when a point in the current page of a PDF graphics context is clicked.\nfunc setDestination(CFString, for: CGRect)\nSets a destination to jump to when a rectangle in the current PDF page is clicked.\nfunc setURL(CFURL, for: CGRect)\nSets the URL associated with a rectangle in a PDF graphics context.\nfunc closePDF()\nCloses a PDF document."
  },
  {
    "title": "init(colorSpace:components:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1455927-init",
    "html": "Parameters\ncolorspace\n\nA color space for the new color. Core Graphics retains this object; upon return, you may safely release it.\n\ncomponents\n\nAn array of intensity values describing the color. The array should contain n+1 values that correspond to the n color components in the specified color space, followed by the alpha component. Each component value should be in the range appropriate for the color space. Values outside this range will be clamped to the nearest correct value.\n\nReturn Value\n\nA new color. You are responsible for releasing this object using CGColorRelease.\n\nSee Also\nCreating Colors\nfunc copy() -> CGColor?\nCreates a copy of an existing color.\nfunc copy(alpha: CGFloat) -> CGColor?\nCreates a copy of an existing color, substituting a new alpha value.\ninit(genericCMYKCyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nCreates a color in the Generic CMYK color space.\ninit(gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space.\ninit(genericGrayGamma2_2Gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space with a gamma ramp of 2.2.\ninit(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the Generic RGB color space.\ninit(srgbRed: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the sRGB color space.\ninit?(patternSpace: CGColorSpace, pattern: CGPattern, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern."
  },
  {
    "title": "components | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/2427146-components",
    "html": "Discussion\n\nAn array of intensity values for the color components (including alpha) associated with the specified color. The size of the array is equal to the color’s numberOfComponents value.\n\nSee Also\nExamining a Color\nvar alpha: CGFloat\nReturns the value of the alpha component associated with a color.\nvar colorSpace: CGColorSpace?\nReturns the color space associated with a color.\nvar numberOfComponents: Int\nReturns the number of color components (including alpha) associated with a color.\nvar pattern: CGPattern?\nReturns the pattern associated with a color in a pattern color space."
  },
  {
    "title": "white | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1455202-white",
    "html": "See Also\nGetting System Colors\nclass var black: CGColor\nThe black color in the Generic gray color space.\nclass var clear: CGColor\nThe clear color in the Generic gray color space."
  },
  {
    "title": "CGFontIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfontindex",
    "html": "Discussion\n\nThis integer type provides an additional way to specify a glyph identifier. CGFontIndex is equivalent to CGGlyph, and you can use constants of either type interchangeably.\n\nSee Also\nWorking with Glyphs\nvar numberOfGlyphs: Int\nReturns the number of glyphs in a font.\nfunc name(for: CGGlyph) -> CFString?\nReturns the glyph name of the specified glyph in the specified font.\nfunc getGlyphWithGlyphName(name: CFString) -> CGGlyph\nReturns the glyph for the glyph name associated with the specified font object.\nfunc getGlyphBBoxes(glyphs: UnsafePointer<CGGlyph>, count: Int, bboxes: UnsafeMutablePointer<CGRect>) -> Bool\nGet the bounding box of each glyph in an array.\nfunc getGlyphAdvances(glyphs: UnsafePointer<CGGlyph>, count: Int, advances: UnsafeMutablePointer<Int32>) -> Bool\nGets the advance width of each glyph in the provided array.\ntypealias CGGlyph\nAn index into the internal glyph table of a font.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex."
  },
  {
    "title": "getGlyphAdvances(glyphs:count:advances:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396332-getglyphadvances",
    "html": "Parameters\nglyphs\n\nAn array of glyphs.\n\ncount\n\nThe number of glyphs in the array.\n\nadvances\n\nOn output, an array of of advance widths for the provided glyphs.\n\nReturn Value\n\ntrue unless the advance widths can’t be provided for some reason.\n\nSee Also\nWorking with Glyphs\nvar numberOfGlyphs: Int\nReturns the number of glyphs in a font.\nfunc name(for: CGGlyph) -> CFString?\nReturns the glyph name of the specified glyph in the specified font.\nfunc getGlyphWithGlyphName(name: CFString) -> CGGlyph\nReturns the glyph for the glyph name associated with the specified font object.\nfunc getGlyphBBoxes(glyphs: UnsafePointer<CGGlyph>, count: Int, bboxes: UnsafeMutablePointer<CGRect>) -> Bool\nGet the bounding box of each glyph in an array.\ntypealias CGGlyph\nAn index into the internal glyph table of a font.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\ntypealias CGFontIndex\nAn index into a font table.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex."
  },
  {
    "title": "CGDataProviderRewindCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataproviderrewindcallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to CGDataProviderCreate.\n\nDiscussion\n\nWhen Core Graphics needs to read from the beginning of the provider’s data stream, your function is called.\n\nFor information on how to associate your callback function with a data provider, see CGDataProviderCreate and CGDataProviderCallbacks.\n\nSee Also\nCreating Sequential-Access Data Providers\ninit?(sequentialInfo: UnsafeMutableRawPointer?, callbacks: UnsafePointer<CGDataProviderSequentialCallbacks>)\nCreates a sequential-access data provider.\nstruct CGDataProviderSequentialCallbacks\nDefines a structure containing pointers to client-defined callback functions that manage the sending of data for a sequential-access data provider.\ntypealias CGDataProviderGetBytesCallback\nA callback function that copies from a provider data stream into a Core Graphics buffer.\ntypealias CGDataProviderSkipForwardCallback\nA callback function that advances the current position in the data stream supplied by the provider.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider."
  },
  {
    "title": "name(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396349-name",
    "html": "Parameters\nglyph\n\nThe glyph whose name is desired.\n\nReturn Value\n\nThe name of the specified glyph, or NULL if the glyph isn’t associated with the font object.\n\nSee Also\nWorking with Glyphs\nvar numberOfGlyphs: Int\nReturns the number of glyphs in a font.\nfunc getGlyphWithGlyphName(name: CFString) -> CGGlyph\nReturns the glyph for the glyph name associated with the specified font object.\nfunc getGlyphBBoxes(glyphs: UnsafePointer<CGGlyph>, count: Int, bboxes: UnsafeMutablePointer<CGRect>) -> Bool\nGet the bounding box of each glyph in an array.\nfunc getGlyphAdvances(glyphs: UnsafePointer<CGGlyph>, count: Int, advances: UnsafeMutablePointer<Int32>) -> Bool\nGets the advance width of each glyph in the provided array.\ntypealias CGGlyph\nAn index into the internal glyph table of a font.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\ntypealias CGFontIndex\nAn index into a font table.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex."
  },
  {
    "title": "init(sequentialInfo:callbacks:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/1408291-init",
    "html": "Parameters\ninfo\n\nA pointer to data of any type or NULL. When Core Graphics calls the functions specified in the callbacks parameter, it sends each of the functions this pointer.\n\ncallbacks\n\nA pointer to a CGDataProviderSequentialCallbacks structure that specifies the callback functions you implement to handle the data provider’s basic memory management.\n\nReturn Value\n\nA new data provider. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou use this function to create a sequential-access data provider that uses callback functions to read data from your program in a single block.\n\nSee Also\nCreating Sequential-Access Data Providers\nstruct CGDataProviderSequentialCallbacks\nDefines a structure containing pointers to client-defined callback functions that manage the sending of data for a sequential-access data provider.\ntypealias CGDataProviderRewindCallback\nA callback function that moves the current position in the data stream back to the beginning.\ntypealias CGDataProviderGetBytesCallback\nA callback function that copies from a provider data stream into a Core Graphics buffer.\ntypealias CGDataProviderSkipForwardCallback\nA callback function that advances the current position in the data stream supplied by the provider.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider."
  },
  {
    "title": "numberOfGlyphs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396371-numberofglyphs",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe number of glyphs in the provided font.\n\nSee Also\nWorking with Glyphs\nfunc name(for: CGGlyph) -> CFString?\nReturns the glyph name of the specified glyph in the specified font.\nfunc getGlyphWithGlyphName(name: CFString) -> CGGlyph\nReturns the glyph for the glyph name associated with the specified font object.\nfunc getGlyphBBoxes(glyphs: UnsafePointer<CGGlyph>, count: Int, bboxes: UnsafeMutablePointer<CGRect>) -> Bool\nGet the bounding box of each glyph in an array.\nfunc getGlyphAdvances(glyphs: UnsafePointer<CGGlyph>, count: Int, advances: UnsafeMutablePointer<Int32>) -> Bool\nGets the advance width of each glyph in the provided array.\ntypealias CGGlyph\nAn index into the internal glyph table of a font.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\ntypealias CGFontIndex\nAn index into a font table.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgshading/1454302-typeid",
    "html": "Return Value\n\nThe Core Foundation identifier for the type CGShading."
  },
  {
    "title": "Font Variation Axis Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/font_variation_axis_keys",
    "html": "Topics\nConstants\nclass let variationAxisName: CFString\nThe key used to obtain the variation axis name from a variation axis dictionary. The value obtained with this key is a CFString that specifies the name of the variation axis.\nclass let variationAxisMinValue: CFString\nThe key used to obtain the minimum variation axis value from a variation axis dictionary. The value obtained with this key is a CFNumber that specifies the minimum value of the variation axis.\nclass let variationAxisMaxValue: CFString\nThe key used to obtain the maximum variation axis value from a variation axis dictionary. The value obtained with this key is a CFNumber that specifies the maximum value of the variation axis.\nclass let variationAxisDefaultValue: CFString\nThe key used to obtain the default variation axis value from a variation axis dictionary. The value obtained with this key is a CFNumber that specifies the default value of the variation axis.\nSee Also\nWorking with Variations\nfunc copy(withVariations: CFDictionary?) -> CGFont?\nCreates a copy of a font using a variation specification dictionary.\nvar variations: CFDictionary?\nReturns the variation specification dictionary for a font.\nvar variationAxes: CFArray?\nReturns an array of the variation axis dictionaries for a font."
  },
  {
    "title": "Font Table Index Values | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/font_table_index_values",
    "html": "Overview\n\nSee CGFontIndex.\n\nTopics\nConstants\nkCGFontIndexMax\nThe maximum allowed value for CGFontIndex.\nkCGFontIndexInvalid\nAn invalid font index (a value which never represents a valid glyph).\nkCGGlyphMax\nThe same as kCGFontIndexMax.\nSee Also\nWorking with Font Tables\nvar tableTags: CFArray?\nReturns an array of tags that correspond to the font tables for a font.\nfunc table(for: UInt32) -> CFData?\nReturns the font table that corresponds to the provided tag."
  },
  {
    "title": "table(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396402-table",
    "html": "Parameters\ntag\n\nThe tag for the table you want to obtain.\n\nReturn Value\n\nThe font table that corresponds to the tag, or NULL if no such table exists.\n\nSee Also\nWorking with Font Tables\nvar tableTags: CFArray?\nReturns an array of tags that correspond to the font tables for a font.\nFont Table Index Values\nPossible values for an index into a font table."
  },
  {
    "title": "copy(withVariations:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396373-copy",
    "html": "Parameters\nfont\n\nThe font to copy.\n\nvariations\n\nA variation specification dictionary that contains keys corresponding to the variation axis names of the font. Each key in the dictionary is a variation axis name. The value for each key is the value specified for that particular variation axis represented as a CFNumber object. If a variation axis name is not specified in variations, then the current value from font is used.\n\nReturn Value\n\nThe font object.\n\nSee Also\nWorking with Variations\nvar variations: CFDictionary?\nReturns the variation specification dictionary for a font.\nvar variationAxes: CFArray?\nReturns an array of the variation axis dictionaries for a font.\nFont Variation Axis Keys\nKeys used for a font variation axis dictionary."
  },
  {
    "title": "variationAxes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396376-variationaxes",
    "html": "Parameters\nfont\n\nA CGFont object.\n\nReturn Value\n\nAn array of the variation axis dictionaries. Returns NULL if the font doesn't support variations.\n\nDiscussion\n\nA variation axis is a range included in a font by the font designer that allows a font to produce different type styles. Each variation axis dictionary contains key-value pairs that specify the variation axis name and the minimum, maximum, and default values for that variation axis.\n\nSee Also\nWorking with Variations\nfunc copy(withVariations: CFDictionary?) -> CGFont?\nCreates a copy of a font using a variation specification dictionary.\nvar variations: CFDictionary?\nReturns the variation specification dictionary for a font.\nFont Variation Axis Keys\nKeys used for a font variation axis dictionary."
  },
  {
    "title": "createPostScriptEncoding(encoding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396348-createpostscriptencoding",
    "html": "Parameters\nencoding\n\nThe encoding to use.\n\nReturn Value\n\nA PostScript encoding of the font that contains glyphs in the specified encoding.\n\nDiscussion\n\nFor more information on PostScript format, see Adobe Type 1 Font Format, which is available from http://partners.adobe.com/.\n\nSee Also\nWorking with PostScript Fonts\nvar postScriptName: CFString?\nObtains the PostScript name of a font.\nfunc canCreatePostScriptSubset(CGFontPostScriptFormat) -> Bool\nDetermines whether Core Graphics can create a subset of the font in PostScript format.\nfunc createPostScriptSubset(subsetName: CFString, format: CGFontPostScriptFormat, glyphs: UnsafePointer<CGGlyph>?, count: Int, encoding: UnsafePointer<CGGlyph>?) -> CFData?\nCreates a subset of the font in the specified PostScript format.\nenum CGFontPostScriptFormat\nPossible formats for a PostScript font subset."
  },
  {
    "title": "CGFontPostScriptFormat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfontpostscriptformat",
    "html": "Topics\nConstants\ncase type1\nThis is documented in Adobe Type 1 Font Format, which is available from http://partners.adobe.com/.\ncase type3\nThis is documented in PostScript Language Reference, 3rd edition, which is available from http://partners.adobe.com/.\ncase type42\nThis is documented in Adobe Technical Note 5012, The Type 42 Font Format Specification, which is available from http://partners.adobe.com/.\nRelationships\nConforms To\nSendable\nSee Also\nWorking with PostScript Fonts\nvar postScriptName: CFString?\nObtains the PostScript name of a font.\nfunc canCreatePostScriptSubset(CGFontPostScriptFormat) -> Bool\nDetermines whether Core Graphics can create a subset of the font in PostScript format.\nfunc createPostScriptSubset(subsetName: CFString, format: CGFontPostScriptFormat, glyphs: UnsafePointer<CGGlyph>?, count: Int, encoding: UnsafePointer<CGGlyph>?) -> CFData?\nCreates a subset of the font in the specified PostScript format.\nfunc createPostScriptEncoding(encoding: UnsafePointer<CGGlyph>?) -> CFData?\nCreates a PostScript encoding of a font."
  },
  {
    "title": "xHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396410-xheight",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe x-height of the font.\n\nDiscussion\n\nThe x-height is the distance above the baseline of the top of flat, non-ascending lowercase letters (such as x) of glyphs in a font. The value is specified in glyph space units.\n\nSee Also\nExamining Font Metrics\nvar ascent: Int32\nReturns the ascent of a font.\nvar capHeight: Int32\nReturns the cap height of a font.\nvar descent: Int32\nReturns the descent of a font.\nvar fontBBox: CGRect\nReturns the bounding box of a font.\nvar italicAngle: CGFloat\nReturns the italic angle of a font.\nvar leading: Int32\nReturns the leading of a font.\nvar stemV: CGFloat\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nvar unitsPerEm: Int32\nReturns the number of glyph space units per em for the provided font."
  },
  {
    "title": "canCreatePostScriptSubset(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396365-cancreatepostscriptsubset",
    "html": "Parameters\nformat\n\nA PostScript font format.\n\nReturn Value\n\nReturns true if a subset in the PostScript format can be created for the font; false otherwise.\n\nDiscussion\n\nFor more information on PostScript format, see Adobe Type 1 Font Format, which is available from http://partners.adobe.com/.\n\nSee Also\nWorking with PostScript Fonts\nvar postScriptName: CFString?\nObtains the PostScript name of a font.\nfunc createPostScriptSubset(subsetName: CFString, format: CGFontPostScriptFormat, glyphs: UnsafePointer<CGGlyph>?, count: Int, encoding: UnsafePointer<CGGlyph>?) -> CFData?\nCreates a subset of the font in the specified PostScript format.\nenum CGFontPostScriptFormat\nPossible formats for a PostScript font subset.\nfunc createPostScriptEncoding(encoding: UnsafePointer<CGGlyph>?) -> CFData?\nCreates a PostScript encoding of a font."
  },
  {
    "title": "postScriptName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396346-postscriptname",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe PostScript name of the font.\n\nDiscussion\n\nFor more information on PostScript format, see Adobe Type 1 Font Format, which is available from http://partners.adobe.com/.\n\nSee Also\nWorking with PostScript Fonts\nfunc canCreatePostScriptSubset(CGFontPostScriptFormat) -> Bool\nDetermines whether Core Graphics can create a subset of the font in PostScript format.\nfunc createPostScriptSubset(subsetName: CFString, format: CGFontPostScriptFormat, glyphs: UnsafePointer<CGGlyph>?, count: Int, encoding: UnsafePointer<CGGlyph>?) -> CFData?\nCreates a subset of the font in the specified PostScript format.\nenum CGFontPostScriptFormat\nPossible formats for a PostScript font subset.\nfunc createPostScriptEncoding(encoding: UnsafePointer<CGGlyph>?) -> CFData?\nCreates a PostScript encoding of a font."
  },
  {
    "title": "stemV | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396380-stemv",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe thickness of the dominant vertical stems of glyphs in a font.\n\nSee Also\nExamining Font Metrics\nvar ascent: Int32\nReturns the ascent of a font.\nvar capHeight: Int32\nReturns the cap height of a font.\nvar descent: Int32\nReturns the descent of a font.\nvar fontBBox: CGRect\nReturns the bounding box of a font.\nvar italicAngle: CGFloat\nReturns the italic angle of a font.\nvar leading: Int32\nReturns the leading of a font.\nvar unitsPerEm: Int32\nReturns the number of glyph space units per em for the provided font.\nvar xHeight: Int32\nReturns the x-height of a font."
  },
  {
    "title": "fontBBox | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396353-fontbbox",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe bounding box of the font.\n\nDiscussion\n\nThe font bounding box is the union of all of the bounding boxes for all the glyphs in a font. The value is specified in glyph space units.\n\nSee Also\nExamining Font Metrics\nvar ascent: Int32\nReturns the ascent of a font.\nvar capHeight: Int32\nReturns the cap height of a font.\nvar descent: Int32\nReturns the descent of a font.\nvar italicAngle: CGFloat\nReturns the italic angle of a font.\nvar leading: Int32\nReturns the leading of a font.\nvar stemV: CGFloat\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nvar unitsPerEm: Int32\nReturns the number of glyph space units per em for the provided font.\nvar xHeight: Int32\nReturns the x-height of a font."
  },
  {
    "title": "CGPDFScanner | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/cgpdfscanner",
    "html": "Overview\n\nYou can set up the PDF scanner object to invoke callbacks when it encounters specific PDF operators in the stream.\n\nThis object is not derived from CFType. Use CGPDFScannerRetain(_:) and CGPDFScannerRelease(_:) to manage the retain count of CGPDFScannerRef instances; do not use CFRetain and CFRelease.\n\nTopics\nCreating a PDF Scanner Object\nfunc CGPDFScannerCreate(CGPDFContentStreamRef, CGPDFOperatorTableRef?, UnsafeMutableRawPointer?) -> CGPDFScannerRef\nCreates a PDF scanner.\nRetaining and Releasing PDF Scanner Objects\nfunc CGPDFScannerRetain(CGPDFScannerRef) -> CGPDFScannerRef\nIncrements the retain count of a scanner object.\nfunc CGPDFScannerRelease(CGPDFScannerRef)\nDecrements the retain count of a scanner object.\nParsing Content\nfunc CGPDFScannerScan(CGPDFScannerRef) -> Bool\nParses the content stream of a PDF scanner object.\nfunc CGPDFScannerGetContentStream(CGPDFScannerRef) -> CGPDFContentStreamRef\nReturns the content stream associated with a PDF scanner object.\nGetting PDF Objects from the Scanner Stack\nfunc CGPDFScannerPopObject(CGPDFScannerRef, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nRetrieves an object from the scanner stack.\nfunc CGPDFScannerPopBoolean(CGPDFScannerRef, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nRetrieves a Boolean object from the scanner stack.\nfunc CGPDFScannerPopInteger(CGPDFScannerRef, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nRetrieves an integer object from the scanner stack.\nfunc CGPDFScannerPopNumber(CGPDFScannerRef, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nRetrieves a real value object from the scanner stack.\nfunc CGPDFScannerPopName(CGPDFScannerRef, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nRetrieves a character string from the scanner stack.\nfunc CGPDFScannerPopString(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nRetrieves a string object from the scanner stack.\nfunc CGPDFScannerPopArray(CGPDFScannerRef, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nRetrieves an array object from the scanner stack.\nfunc CGPDFScannerPopDictionary(CGPDFScannerRef, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nRetrieves a PDF dictionary object from the scanner stack.\nfunc CGPDFScannerPopStream(CGPDFScannerRef, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nRetrieves a PDF stream object from the scanner stack.\nData Types\ntypealias CGPDFScannerRef\nA type used to parse a PDF content stream.\nSee Also\nAbstract Types for PDF Document Content\nCGPDFPage\nA page in a PDF document.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGPDFDictionary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/cgpdfdictionary",
    "html": "Overview\n\nDictionary objects are the main building blocks of a PDF document. A key-value pair within a dictionary is called an entry. In a PDF dictionary, the key must be an array of characters. Within a given dictionary, the keys are unique—that is, no two keys in a single dictionary are equal (as determined by strcmp). The value associated with a key can be any kind of PDF object, including another dictionary. Dictionary objects are the main building blocks of a PDF document.\n\nMany functions that retrieve values from a PDF dictionary take the form:\n\nbool CGPDFDictionaryGet<DataType> (\n CGPDFDictionaryRef dictionary,\n const char *key,\n <DataType>Ref *value\n);\n\n\nThese functions test whether there is an object associated with the specified key. If there is an object associated with the specified key, they test its data type. If there is no associated object, or if there is but it is not of the expected type, the function returns false. If there is an object associated with the specified key and it is of the expected type, the function returns true and the object is passed back in the value parameter.\n\nThis object is not derived from CFType and therefore there are no functions for retaining and releasing it. CGPDFDictionary objects exist only as constituent parts of a CGPDFDocument object, and they are managed by their container.\n\nTopics\nApplying a Function to All Entries\nfunc CGPDFDictionaryApplyFunction(CGPDFDictionaryRef, CGPDFDictionaryApplierFunction, UnsafeMutableRawPointer?)\nApplies a function to each entry in a dictionary.\nGetting Data from a Dictionary\nfunc CGPDFDictionaryGetArray(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether there is a PDF array associated with a specified key in a PDF dictionary and, if so, retrieves that array.\nfunc CGPDFDictionaryGetBoolean(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether there is a PDF Boolean value associated with a specified key in a PDF dictionary and, if so, retrieves the Boolean value.\nfunc CGPDFDictionaryGetCount(CGPDFDictionaryRef) -> Int\nReturns the number of entries in a PDF dictionary.\nfunc CGPDFDictionaryGetDictionary(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether there is another PDF dictionary associated with a specified key in a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFDictionaryGetInteger(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether there is a PDF integer associated with a specified key in a PDF dictionary and, if so, retrieves that integer.\nfunc CGPDFDictionaryGetName(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object with a specified key in a PDF dictionary is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFDictionaryGetNumber(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether there is a PDF number associated with a specified key in a PDF dictionary and, if so, retrieves that number.\nfunc CGPDFDictionaryGetObject(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether there is a PDF object associated with a specified key in a PDF dictionary and, if so, retrieves that object.\nfunc CGPDFDictionaryGetStream(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether there is a PDF stream associated with a specified key in a PDF dictionary and, if so, retrieves that stream.\nfunc CGPDFDictionaryGetString(CGPDFDictionaryRef, UnsafePointer<CChar>, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether there is a PDF string associated with a specified key in a PDF dictionary and, if so, retrieves that string.\nCallbacks\ntypealias CGPDFDictionaryApplierFunction\nPerforms custom processing on a key-value pair from a PDF dictionary, using optional contextual information.\nData Types\ntypealias CGPDFDictionaryRef\nA type that encapsulates a PDF dictionary.\nSee Also\nAbstract Types for PDF Document Content\nCGPDFPage\nA page in a PDF document.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396330-init",
    "html": "Parameters\nname\n\nThe PostScript or full name of a font.\n\nReturn Value\n\nThe font object or NULL if the font can't be created. You are responsible for releasing this object using CGFontRelease.\n\nDiscussion\n\nBefore drawing text in a Core Graphics context, you must set the font in the current graphics state by calling the function setFont(_:).\n\nSee Also\nCreating Font Objects\ninit?(CGDataProvider)\nCreates a font object from data supplied from a data provider."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396367-init",
    "html": "Parameters\nprovider\n\nA data provider.\n\nReturn Value\n\nThe font object or NULL if the font can't be created. You are responsible for releasing this object using CGFontRelease.\n\nDiscussion\n\nBefore drawing text in a Core Graphics context, you must set the font in the current graphics state by calling the function setFontSize(_:).\n\nSee Also\nCreating Font Objects\ninit?(CFString)\nCreates a font object corresponding to the font specified by a PostScript or full name."
  },
  {
    "title": "CGPDFContentStream | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/cgpdfcontentstream",
    "html": "Overview\n\nA CGPDFContentStreamRef object represents one or more PDF content streams for a page and their associated resource dictionaries. A PDF content stream is a sequential set of instructions that specifies how to paint items on a PDF page. A resource dictionary contains information needed by the content stream in order to decode the sequential instructions of the content stream.\n\nCGPDFContentStreamRef functions can retrieve both the content streams and the resource dictionaries associated with a PDF page.\n\nThis type is not derived from CFTypeRef and therefore there are no functions for retaining and releasing it. CGPDFContentStreamRef objects exist only as constituent parts of a CGPDFDocument object, and they are managed by their container.\n\nTopics\nCreating a PDF Content Stream Object\nfunc CGPDFContentStreamCreateWithPage(CGPDFPage) -> CGPDFContentStreamRef\nCreates a content stream object from a PDF page object.\nfunc CGPDFContentStreamCreateWithStream(CGPDFStreamRef, CGPDFDictionaryRef, CGPDFContentStreamRef) -> CGPDFContentStreamRef\nCreates a PDF content stream object from an existing PDF content stream object.\nGetting Data from a PDF Content Stream Object\nfunc CGPDFContentStreamGetStreams(CGPDFContentStreamRef) -> CFArray?\nGets the array of PDF content streams contained in a PDF content stream object.\nfunc CGPDFContentStreamGetResource(CGPDFContentStreamRef, UnsafePointer<CChar>, UnsafePointer<CChar>) -> CGPDFObjectRef?\nGets the specified resource from a PDF content stream object.\nRetaining and Releasing a PDF Content Stream Object\nfunc CGPDFContentStreamRetain(CGPDFContentStreamRef) -> CGPDFContentStreamRef\nIncrements the retain count of a PDF content stream object.\nfunc CGPDFContentStreamRelease(CGPDFContentStreamRef)\nDecrements the retain count of a PDF content stream object.\nData Types\ntypealias CGPDFContentStreamRef\nAn opaque type that provides access to the data that describes the appearance of a PDF page.\nSee Also\nAbstract Types for PDF Document Content\nCGPDFPage\nA page in a PDF document.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGEventFilterMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgeventfiltermask",
    "html": "Topics\nInitializers\ninit(rawValue: UInt32)\nType Properties\nstatic var permitLocalKeyboardEvents: CGEventFilterMask\nstatic var permitLocalMouseEvents: CGEventFilterMask\nstatic var permitSystemDefinedEvents: CGEventFilterMask\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "CGScreenUpdateMoveDelta | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgscreenupdatemovedelta",
    "html": "Overview\n\nMove operation notifications are restricted to changes that move a region by an integer number of pixels. The fields dX and dY describe the direction of movement:\n\nPositive values of dX indicate movement to the right.\n\nNegative values of dX indicate movement to the left.\n\nPositive values of dY indicate movement downward.\n\nNegative values of dY indicate movement upward.\n\nTopics\nInitializers\ninit()\ninit(dX: Int32, dY: Int32)\nInstance Properties\nvar dX: Int32\nvar dY: Int32"
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402597-typeid",
    "html": "Return Value\n\nThe identifier for the type CGPDFDocument."
  },
  {
    "title": "allowsCopying | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402588-allowscopying",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nReturn Value\n\nA Boolean that, if true, indicates that the document allows copying. If the value is false, the document does not allow copying.\n\nDiscussion\n\nIf the document is encrypted and the current password doesn't grant permission to perform copying, this returns false.\n\nSee Also\nWorking with an Encrypted PDF Document\nvar isEncrypted: Bool\nReturns whether the specified PDF file is encrypted.\nvar allowsPrinting: Bool\nReturns whether a PDF document allows printing.\nvar isUnlocked: Bool\nReturns whether the specified PDF document is currently unlocked.\nfunc unlockWithPassword(UnsafePointer<CChar>) -> Bool\nUnlocks an encrypted PDF document when a valid password is supplied."
  },
  {
    "title": "unlockWithPassword(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402599-unlockwithpassword",
    "html": "Parameters\npassword\n\nA pointer to a string that contains the password.\n\nReturn Value\n\nA Boolean that, if true, indicates that the document has been successfully unlocked. If the value is false, the document has not been unlocked.\n\nDiscussion\n\nGiven an encrypted PDF document and a password, this function does the following:\n\nSets the lock state of the document, based on the validity of the password.\n\nReturns true if the document is unlocked.\n\nReturns false if the document cannot be unlocked with the specified password.\n\nUnlocking a PDF document makes it possible to decrypt the document and perform other privileged operations. Different passwords enable different operations.\n\nSee Also\nWorking with an Encrypted PDF Document\nvar isEncrypted: Bool\nReturns whether the specified PDF file is encrypted.\nvar allowsCopying: Bool\nReturns whether the specified PDF document allows copying.\nvar allowsPrinting: Bool\nReturns whether a PDF document allows printing.\nvar isUnlocked: Bool\nReturns whether the specified PDF document is currently unlocked."
  },
  {
    "title": "allowsPrinting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402594-allowsprinting",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nReturn Value\n\nA Boolean that, if true, indicates that the document allows printing. If the value is false, the document does not allow printing.\n\nDiscussion\n\nIf the document is encrypted and the current password doesn't grant permission to perform printing, this returns false.\n\nSee Also\nWorking with an Encrypted PDF Document\nvar isEncrypted: Bool\nReturns whether the specified PDF file is encrypted.\nvar allowsCopying: Bool\nReturns whether the specified PDF document allows copying.\nvar isUnlocked: Bool\nReturns whether the specified PDF document is currently unlocked.\nfunc unlockWithPassword(UnsafePointer<CChar>) -> Bool\nUnlocks an encrypted PDF document when a valid password is supplied."
  },
  {
    "title": "isEncrypted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402591-isencrypted",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nReturn Value\n\nA Boolean that, if true, indicates that the document is encrypted. If the value is false, the document is not encrypted.\n\nDiscussion\n\nIf the document is encrypted, a password must be supplied before certain operations are enabled. For more information, see unlockWithPassword(_:).\n\nSee Also\nWorking with an Encrypted PDF Document\nvar allowsCopying: Bool\nReturns whether the specified PDF document allows copying.\nvar allowsPrinting: Bool\nReturns whether a PDF document allows printing.\nvar isUnlocked: Bool\nReturns whether the specified PDF document is currently unlocked.\nfunc unlockWithPassword(UnsafePointer<CChar>) -> Bool\nUnlocks an encrypted PDF document when a valid password is supplied."
  },
  {
    "title": "getVersion(majorVersion:minorVersion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402604-getversion",
    "html": "Parameters\nmajorVersion\n\nOn return, contains the major version number of the document.\n\nminorVersion\n\nOn return, contains the minor version number of the document.\n\nReturn Value\n\nOn return, the values of the majorVersion and minorVersion parameters are set to the major and minor version numbers of the document respectively.\n\nSee Also\nExamining a PDF Document\nvar catalog: CGPDFDictionaryRef?\nReturns the document catalog of a Core Graphics PDF document.\nvar fileIdentifier: CGPDFArrayRef?\nGets the file identifier for a PDF document.\nvar info: CGPDFDictionaryRef?\nGets the information dictionary for a PDF document.\nvar numberOfPages: Int\nReturns the number of pages in a PDF document.\nfunc page(at: Int) -> CGPDFPage?\nReturns a page from a Core Graphics PDF document."
  },
  {
    "title": "fileIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402600-fileidentifier",
    "html": "Parameters\ndocument\n\nThe document whose file identifier you want to obtain.\n\nReturn Value\n\nReturns the file identifier for the document.\n\nDiscussion\n\nA PDF file identifier is defined in the PDF specification as an array of two strings, the first of which is a permanent identifier that doesn’t change even when the file is updated. The second string changes each time the file is updated. For more information, see PDF Reference: Version 1.3 (Second Edition), Adobe Systems Incorporated.\n\nSee Also\nExamining a PDF Document\nvar catalog: CGPDFDictionaryRef?\nReturns the document catalog of a Core Graphics PDF document.\nvar info: CGPDFDictionaryRef?\nGets the information dictionary for a PDF document.\nvar numberOfPages: Int\nReturns the number of pages in a PDF document.\nfunc getVersion(majorVersion: UnsafeMutablePointer<Int32>, minorVersion: UnsafeMutablePointer<Int32>)\nReturns the major and minor version numbers of a Core Graphics PDF document.\nfunc page(at: Int) -> CGPDFPage?\nReturns a page from a Core Graphics PDF document."
  },
  {
    "title": "page(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402586-page",
    "html": "Parameters\npageNumber\n\nThe number of the page requested.\n\nReturn Value\n\nReturn the PDF page corresponding to the specified page number, or NULL if no such page exists in the document. Pages are numbered starting at 1.\n\nSee Also\nExamining a PDF Document\nvar catalog: CGPDFDictionaryRef?\nReturns the document catalog of a Core Graphics PDF document.\nvar fileIdentifier: CGPDFArrayRef?\nGets the file identifier for a PDF document.\nvar info: CGPDFDictionaryRef?\nGets the information dictionary for a PDF document.\nvar numberOfPages: Int\nReturns the number of pages in a PDF document.\nfunc getVersion(majorVersion: UnsafeMutablePointer<Int32>, minorVersion: UnsafeMutablePointer<Int32>)\nReturns the major and minor version numbers of a Core Graphics PDF document."
  },
  {
    "title": "numberOfPages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402595-numberofpages",
    "html": "Parameters\ndocument\n\nThe PDF document to examine.\n\nReturn Value\n\nThe total number of pages in the PDF document.\n\nSee Also\nExamining a PDF Document\nvar catalog: CGPDFDictionaryRef?\nReturns the document catalog of a Core Graphics PDF document.\nvar fileIdentifier: CGPDFArrayRef?\nGets the file identifier for a PDF document.\nvar info: CGPDFDictionaryRef?\nGets the information dictionary for a PDF document.\nfunc getVersion(majorVersion: UnsafeMutablePointer<Int32>, minorVersion: UnsafeMutablePointer<Int32>)\nReturns the major and minor version numbers of a Core Graphics PDF document.\nfunc page(at: Int) -> CGPDFPage?\nReturns a page from a Core Graphics PDF document."
  },
  {
    "title": "info | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402589-info",
    "html": "Parameters\ndocument\n\nThe document whose dictionary you want to obtain.\n\nReturn Value\n\nThe information dictionary for the document.\n\nSee Also\nExamining a PDF Document\nvar catalog: CGPDFDictionaryRef?\nReturns the document catalog of a Core Graphics PDF document.\nvar fileIdentifier: CGPDFArrayRef?\nGets the file identifier for a PDF document.\nvar numberOfPages: Int\nReturns the number of pages in a PDF document.\nfunc getVersion(majorVersion: UnsafeMutablePointer<Int32>, minorVersion: UnsafeMutablePointer<Int32>)\nReturns the major and minor version numbers of a Core Graphics PDF document.\nfunc page(at: Int) -> CGPDFPage?\nReturns a page from a Core Graphics PDF document."
  },
  {
    "title": "CGPSConverterCallbacks | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconvertercallbacks",
    "html": "Topics\nInitializers\ninit()\ninit(version: UInt32, beginDocument: CGPSConverterBeginDocumentCallback?, endDocument: CGPSConverterEndDocumentCallback?, beginPage: CGPSConverterBeginPageCallback?, endPage: CGPSConverterEndPageCallback?, noteProgress: CGPSConverterProgressCallback?, noteMessage: CGPSConverterMessageCallback?, releaseInfo: CGPSConverterReleaseInfoCallback?)\nInstance Properties\nvar beginDocument: CGPSConverterBeginDocumentCallback?\nThe callback called at the beginning of the conversion of the PostScript document, or NULL.\nvar beginPage: CGPSConverterBeginPageCallback?\nThe callback called at the start of the conversion of each page in the PostScript document, or NULL.\nvar endDocument: CGPSConverterEndDocumentCallback?\nThe callback called at the end of conversion of the PostScript document, or NULL.\nvar endPage: CGPSConverterEndPageCallback?\nThe callback called at the end of the conversion of each page in the PostScript document, or NULL.\nvar noteMessage: CGPSConverterMessageCallback?\nThe callback called to pass any messages that might result during the conversion, or NULL.\nvar noteProgress: CGPSConverterProgressCallback?\nThe callback called periodically during the conversion to indicate that conversion is proceeding, or NULL.\nvar releaseInfo: CGPSConverterReleaseInfoCallback?\nThe callback called when the converter is deallocated, or NULL.\nvar version: UInt32\nThe version number of the structure passed in as a parameter to the converter creation functions. The structure defined below is version 0."
  },
  {
    "title": "CGWindowListOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowlistoption",
    "html": "Overview\n\nThis type is used in conjunction with the constants described in Window List Option Constants.\n\nTopics\nInitializers\ninit(rawValue: UInt32)\nType Properties\nstatic var excludeDesktopElements: CGWindowListOption\nstatic var optionAll: CGWindowListOption\nstatic var optionIncludingWindow: CGWindowListOption\nstatic var optionOnScreenAboveWindow: CGWindowListOption\nstatic var optionOnScreenBelowWindow: CGWindowListOption\nstatic var optionOnScreenOnly: CGWindowListOption\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "CGPDFAccessPermissions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfaccesspermissions",
    "html": "Topics\nInitializers\ninit(rawValue: UInt32)\nType Properties\nstatic var allowsCommenting: CGPDFAccessPermissions\nstatic var allowsContentAccessibility: CGPDFAccessPermissions\nstatic var allowsContentCopying: CGPDFAccessPermissions\nstatic var allowsDocumentAssembly: CGPDFAccessPermissions\nstatic var allowsDocumentChanges: CGPDFAccessPermissions\nstatic var allowsFormFieldEntry: CGPDFAccessPermissions\nstatic var allowsHighQualityPrinting: CGPDFAccessPermissions\nstatic var allowsLowQualityPrinting: CGPDFAccessPermissions\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "CGWindowImageOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgwindowimageoption",
    "html": "Overview\n\nThis type is used in conjunction with the constants described in Window Image Types.\n\nTopics\nInitializers\ninit(rawValue: UInt32)\nType Properties\nstatic var bestResolution: CGWindowImageOption\nWhen capturing the window, return the best image resolution. The returned image size may be different than the screen size.\nstatic var boundsIgnoreFraming: CGWindowImageOption\nstatic var nominalResolution: CGWindowImageOption\nWhen capturing the window, return the nominal image resolution. The returned image size is the same as the screen size.\nstatic var onlyShadows: CGWindowImageOption\nstatic var shouldBeOpaque: CGWindowImageOption\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "init(colorSpace:colorComponents:locations:count:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggradient/1398454-init",
    "html": "Parameters\nspace\n\nThe color space to use for the gradient. You cannot use a pattern or indexed color space.\n\ncomponents\n\nThe color components for each color that defines the gradient. The components should be in the color space specified by space. If you are unsure of the number of components, you can call the function numberOfComponents.\n\nThe number of items in this array should be the product of count and the number of components in the color space. For example, if the color space is an RGBA color space and you want to use two colors in the gradient (one for a starting location and another for an ending location), then you need to provide 8 values in components—red, green, blue, and alpha values for the first color, followed by red, green, blue, and alpha values for the second color.\n\nlocations\n\nThe location for each color provided in components. Each location must be a CGFloat value in the range of 0 to 1, inclusive. If 0 and 1 are not in the locations array, Quartz uses the colors provided that are closest to 0 and 1 for those locations.\n\nIf locations is NULL, the first color in colors is assigned to location 0, the last color incolors is assigned to location 1, and intervening colors are assigned locations that are at equal intervals in between.\n\ncount\n\nThe number of locations provided in the locations parameters.\n\nReturn Value\n\nA CGGradient object.\n\nSee Also\nCreating Gradient Objects\ninit?(colorsSpace: CGColorSpace?, colors: CFArray, locations: UnsafePointer<CGFloat>?)\nCreates a gradient object from a color space and the provided color objects and locations.\nRelated Documentation\nfunc drawRadialGradient(CGGradient, startCenter: CGPoint, startRadius: CGFloat, endCenter: CGPoint, endRadius: CGFloat, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the area defined by the provided starting and ending circles.\nQuartz 2D Programming Guide\nfunc drawLinearGradient(CGGradient, start: CGPoint, end: CGPoint, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the line defined by the provided starting and ending points."
  },
  {
    "title": "CGDataProviderGetBytePointerCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovidergetbytepointercallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to CGDataProviderCreateDirectAccess.\n\nReturn Value\n\nA generic pointer to your provider data. By suppling this pointer, you are giving Core Graphics read-only access to both the pointer and the underlying provider data. You must not move or modify the provider data until Core Graphics calls your CGDataProviderReleaseBytePointerCallback function.\n\nDiscussion\n\nWhen Core Graphics needs direct access to your provider data, this function is called.\n\nFor information on how to associate your function with a direct-access data provider, see CGDataProviderCreateDirectAccess and CGDataProviderDirectAccessCallbacks.\n\nSee Also\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:)."
  },
  {
    "title": "init(filename:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/1408294-init",
    "html": "Parameters\nfilename\n\nThe full or relative pathname to use for the data provider. When you supply Core Graphics data via the provider, it reads the data from the specified file.\n\nReturn Value\n\nA new data provider or NULL if the file could not be opened. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou use this function to create a direct-access data provider that supplies data from a file. When you supply Core Graphics with a direct-access data provider, Core Graphics obtains data from your program in a single block.\n\nSee Also\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:)."
  },
  {
    "title": "init(url:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/1408327-init",
    "html": "Parameters\nurl\n\nA CFURL object for the URL that you want to read the data from.\n\nReturn Value\n\nA new data provider or NULL if the data from the URL could not be accessed. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou use this function to create a direct-access data provider that supplies data from a URL. When you supply Core Graphics with a direct-access data provider, Core Graphics obtains data from your program in a single entire block.\n\nSee Also\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:)."
  },
  {
    "title": "init(dataInfo:data:size:releaseData:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider/1408288-init",
    "html": "Parameters\ninfo\n\nA pointer to data of any type, or NULL. When Core Graphics calls the function specified in the releaseData parameter, it sends this pointer as its first argument.\n\ndata\n\nA pointer to the array of data that the provider contains.\n\nsize\n\nA value that specifies the number of bytes that the data provider contains.\n\nreleaseData\n\nA pointer to a release callback for the data provider, or NULL. Your release function is called when Core Graphics frees the data provider. For more information, see CGDataProviderReleaseDataCallback.\n\nReturn Value\n\nA new data provider. You are responsible for releasing this object using CGDataProviderRelease.\n\nDiscussion\n\nYou use this function to create a direct-access data provider that uses callback functions to read data from your program an entire block at one time.\n\nSee Also\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:)."
  },
  {
    "title": "CGDataProviderDirectCallbacks | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataproviderdirectcallbacks",
    "html": "Overview\n\nYou supply a CGDataProviderDirectCallbacks structure to the function init(directInfo:size:callbacks:) to create a data provider for direct access. The functions specified by the CGDataProviderDirectCallbacks structure are responsible for copying data a block at a time to a memory buffer for Core Graphics to use. The functions are also responsible for handling the data provider’s basic memory management. For the callback to work, one of the getBytePointer and getBytesAtPosition parameters must be non-NULL. If both are non-NULL, then getBytePointer is used to access the data.\n\nTopics\nInitializers\ninit()\ninit(version: UInt32, getBytePointer: CGDataProviderGetBytePointerCallback?, releaseBytePointer: CGDataProviderReleaseBytePointerCallback?, getBytesAtPosition: CGDataProviderGetBytesAtPositionCallback?, releaseInfo: CGDataProviderReleaseInfoCallback?)\nInstance Properties\nvar getBytePointer: CGDataProviderGetBytePointerCallback?\nA pointer to a function that returns a pointer to the provider’s data. For more information, see CGDataProviderGetBytePointerCallback.\nvar getBytesAtPosition: CGDataProviderGetBytesAtPositionCallback?\nA pointer to a function that copies data from the provider.\nvar releaseBytePointer: CGDataProviderReleaseBytePointerCallback?\nA pointer to a function that Core Graphics calls to release a pointer to the provider’s data. For more information, see CGDataProviderReleaseBytePointerCallback.\nvar releaseInfo: CGDataProviderReleaseInfoCallback?\nA pointer to a function that handles clean-up for the data provider, or NULL. For more information, see CGDataProviderReleaseInfoCallback.\nvar version: UInt32\nThe version of this structure. It should be set to 0.\nSee Also\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:)."
  },
  {
    "title": "CGDataProviderReleaseBytePointerCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataproviderreleasebytepointercallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to CGDataProviderCreateDirectAccess.\n\npointer\n\nA pointer to your provider data. This is the same pointer you returned in CGDataProviderGetBytePointerCallback.\n\nDiscussion\n\nWhen Core Graphics no longer needs direct access to your provider data, your function is called. You may safely modify, move, or release your provider data at this time.\n\nFor information on how to associate your function with a direct-access data provider, see CGDataProviderCreateDirectAccess and CGDataProviderDirectAccessCallbacks.\n\nSee Also\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:)."
  },
  {
    "title": "CGDataProviderGetBytesAtPositionCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovidergetbytesatpositioncallback",
    "html": "Parameters\ninfo\n\nA generic pointer to private data shared among your callback functions. This is the same pointer you supplied to init(directInfo:size:callbacks:).\n\nbuffer\n\nThe Core Graphics buffer into which you copy the specified number of bytes.\n\nposition\n\nSpecifies the relative location in the data provider at which to begin copying data.\n\ncount\n\nThe number of bytes to copy.\n\nReturn Value\n\nThe number of bytes copied. If no more data can be written to the buffer, you should return 0.\n\nDiscussion\n\nWhen Core Graphics is ready to receive data from the provider, your function is called.\n\nSee Also\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:)."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggradient/1398453-typeid",
    "html": "Return Value\n\nThe Core Foundation identifier for the opaque type CGGradientRef."
  },
  {
    "title": "draw(_:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427126-draw",
    "html": "Parameters\nlayer\n\nThe layer whose contents you want to draw.\n\nrect\n\nThe rectangle, in current user space coordinates, to draw in.\n\nDiscussion\n\nThe contents are scaled, if necessary, to fit into the rectangle.\n\nSee Also\nDrawing Core Graphics Layers\nfunc draw(CGLayer, at: CGPoint)\nDraws the contents of a layer object at the specified point."
  },
  {
    "title": "catalog | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402606-catalog",
    "html": "Parameters\ndocument\n\nA PDF document.\n\nReturn Value\n\nThe document catalog of the specified document.\n\nDiscussion\n\nThe entries in a PDF document catalog recursively describe the contents of the PDF document. You can access the contents of a PDF document catalog by calling the function catalog. For information on accessing PDF metadata, see Quartz 2D Programming Guide.\n\nSee Also\nExamining a PDF Document\nvar fileIdentifier: CGPDFArrayRef?\nGets the file identifier for a PDF document.\nvar info: CGPDFDictionaryRef?\nGets the information dictionary for a PDF document.\nvar numberOfPages: Int\nReturns the number of pages in a PDF document.\nfunc getVersion(majorVersion: UnsafeMutablePointer<Int32>, minorVersion: UnsafeMutablePointer<Int32>)\nReturns the major and minor version numbers of a Core Graphics PDF document.\nfunc page(at: Int) -> CGPDFPage?\nReturns a page from a Core Graphics PDF document."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1455568-typeid",
    "html": "Return Value\n\nThe Core Foundation type identifier for CGColor."
  },
  {
    "title": "converted(to:intent:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1455493-converted",
    "html": "Parameters\nCGColorSpaceRef\n\nThe destination color space.\n\nintent\n\nThe mechanism to use to match the color when the color is outside the gamut of the new color space.\n\noptions\n\nA dictionary of options used to convert the color. Currently, you should pass NULL.\n\nReturn Value\n\nA new color in the destination color space that matches (or closely approximates) the source color.\n\nDiscussion\n\nTo create the new color, this method creates a CFColorConverterRef using the options you specified and applies it to the source color.\n\nSee Also\nConverting Between Color Spaces\nclass let conversionTRCSize: CFString"
  },
  {
    "title": "pattern | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1455937-pattern",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nThe pattern for the specified color. You are responsible for retaining and releasing the pattern as needed.\n\nSee Also\nExamining a Color\nvar alpha: CGFloat\nReturns the value of the alpha component associated with a color.\nvar colorSpace: CGColorSpace?\nReturns the color space associated with a color.\nvar components: [CGFloat]?\nReturns the values of the color components (including alpha) associated with a color.\nvar numberOfComponents: Int\nReturns the number of color components (including alpha) associated with a color."
  },
  {
    "title": "colorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1455744-colorspace",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nThe color space for the specified color. You are responsible for retaining and releasing it as needed.\n\nSee Also\nExamining a Color\nvar alpha: CGFloat\nReturns the value of the alpha component associated with a color.\nvar components: [CGFloat]?\nReturns the values of the color components (including alpha) associated with a color.\nvar numberOfComponents: Int\nReturns the number of color components (including alpha) associated with a color.\nvar pattern: CGPattern?\nReturns the pattern associated with a color in a pattern color space."
  },
  {
    "title": "closePDF() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454306-closepdf",
    "html": "Parameters\ncontext\n\nA PDF graphics context.\n\nDiscussion\n\nAfter closing the context, all pending data is written to the context destination, and the PDF file is completed. No additional data can be written to the destination context after the PDF document is closed.\n\nSee Also\nManaging a PDF Graphics Context\nfunc beginPDFPage(CFDictionary?)\nBegins a new page in a PDF graphics context.\nfunc endPDFPage()\nEnds the current page in the PDF graphics context.\nfunc addDestination(CFString, at: CGPoint)\nSets a destination to jump to when a point in the current page of a PDF graphics context is clicked.\nfunc setDestination(CFString, for: CGRect)\nSets a destination to jump to when a rectangle in the current PDF page is clicked.\nfunc setURL(CFURL, for: CGRect)\nSets the URL associated with a rectangle in a PDF graphics context.\nfunc addDocumentMetadata(CFData?)\nAssociates custom metadata with the PDF document."
  },
  {
    "title": "clear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1454809-clear",
    "html": "See Also\nGetting System Colors\nclass var black: CGColor\nThe black color in the Generic gray color space.\nclass var white: CGColor\nThe white color in the Generic gray color space."
  },
  {
    "title": "setURL(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455622-seturl",
    "html": "Parameters\nurl\n\nA URL that specifies the destination of the contents associated with the rectangle.\n\nrect\n\nA rectangle specified in default user space (not device space).\n\nSee Also\nManaging a PDF Graphics Context\nfunc beginPDFPage(CFDictionary?)\nBegins a new page in a PDF graphics context.\nfunc endPDFPage()\nEnds the current page in the PDF graphics context.\nfunc addDestination(CFString, at: CGPoint)\nSets a destination to jump to when a point in the current page of a PDF graphics context is clicked.\nfunc setDestination(CFString, for: CGRect)\nSets a destination to jump to when a rectangle in the current PDF page is clicked.\nfunc addDocumentMetadata(CFData?)\nAssociates custom metadata with the PDF document.\nfunc closePDF()\nCloses a PDF document."
  },
  {
    "title": "setDestination(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456459-setdestination",
    "html": "Parameters\nname\n\nA destination name.\n\nrect\n\nA rectangle that specifies an area of the current page of a PDF graphics context. The rectangle is specified in default user space (not device space).\n\nSee Also\nManaging a PDF Graphics Context\nfunc beginPDFPage(CFDictionary?)\nBegins a new page in a PDF graphics context.\nfunc endPDFPage()\nEnds the current page in the PDF graphics context.\nfunc addDestination(CFString, at: CGPoint)\nSets a destination to jump to when a point in the current page of a PDF graphics context is clicked.\nfunc setURL(CFURL, for: CGRect)\nSets the URL associated with a rectangle in a PDF graphics context.\nfunc addDocumentMetadata(CFData?)\nAssociates custom metadata with the PDF document.\nfunc closePDF()\nCloses a PDF document."
  },
  {
    "title": "endPDFPage() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456122-endpdfpage",
    "html": "Parameters\ncontext\n\nA PDF graphics context.\n\nDiscussion\n\nYou can call endPDFPage() only after you call the function beginPDFPage(_:).\n\nSee Also\nManaging a PDF Graphics Context\nfunc beginPDFPage(CFDictionary?)\nBegins a new page in a PDF graphics context.\nfunc addDestination(CFString, at: CGPoint)\nSets a destination to jump to when a point in the current page of a PDF graphics context is clicked.\nfunc setDestination(CFString, for: CGRect)\nSets a destination to jump to when a rectangle in the current PDF page is clicked.\nfunc setURL(CFURL, for: CGRect)\nSets the URL associated with a rectangle in a PDF graphics context.\nfunc addDocumentMetadata(CFData?)\nAssociates custom metadata with the PDF document.\nfunc closePDF()\nCloses a PDF document."
  },
  {
    "title": "beginPDFPage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456578-beginpdfpage",
    "html": "Parameters\npageInfo\n\nA dictionary that contains key-value pairs that define the page properties.\n\nDiscussion\n\nYou must call the function endPDFPage() to signal the end of the page.\n\nSee Also\nManaging a PDF Graphics Context\nfunc endPDFPage()\nEnds the current page in the PDF graphics context.\nfunc addDestination(CFString, at: CGPoint)\nSets a destination to jump to when a point in the current page of a PDF graphics context is clicked.\nfunc setDestination(CFString, for: CGRect)\nSets a destination to jump to when a rectangle in the current PDF page is clicked.\nfunc setURL(CFURL, for: CGRect)\nSets the URL associated with a rectangle in a PDF graphics context.\nfunc addDocumentMetadata(CFData?)\nAssociates custom metadata with the PDF document.\nfunc closePDF()\nCloses a PDF document."
  },
  {
    "title": "width | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455607-width",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe width in pixels of the specified context, or 0 if the context is not a bitmap context.\n\nSee Also\nManaging a Bitmap Graphics Context\nvar bitmapInfo: CGBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nvar bitsPerComponent: Int\nReturns the bits per component of a bitmap context.\nvar bitsPerPixel: Int\nReturns the bits per pixel of a bitmap context.\nvar bytesPerRow: Int\nReturns the bytes per row of a bitmap context.\nvar colorSpace: CGColorSpace?\nReturns the color space of a bitmap context.\nvar data: UnsafeMutableRawPointer?\nReturns a pointer to the image data associated with a bitmap context.\nvar height: Int\nReturns the height in pixels of a bitmap context.\nfunc makeImage() -> CGImage?\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "makeImage() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454225-makeimage",
    "html": "Parameters\nc\n\nA bitmap graphics context.\n\nReturn Value\n\nA CGImage object that contains a snapshot of the bitmap graphics context or NULL if the image is not created.\n\nDiscussion\n\nThe CGImage object returned by this function is created by a copy operation. Subsequent changes to the bitmap graphics context do not affect the contents of the returned image. In some cases the copy operation actually follows copy-on-write semantics, so that the actual physical copy of the bits occur only if the underlying data in the bitmap graphics context is modified. As a consequence, you may want to use the resulting image and release it before you perform additional drawing into the bitmap graphics context. In this way, you can avoid the actual physical copy of the data.\n\nSee Also\nManaging a Bitmap Graphics Context\nvar bitmapInfo: CGBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nvar bitsPerComponent: Int\nReturns the bits per component of a bitmap context.\nvar bitsPerPixel: Int\nReturns the bits per pixel of a bitmap context.\nvar bytesPerRow: Int\nReturns the bytes per row of a bitmap context.\nvar colorSpace: CGColorSpace?\nReturns the color space of a bitmap context.\nvar data: UnsafeMutableRawPointer?\nReturns a pointer to the image data associated with a bitmap context.\nvar height: Int\nReturns the height in pixels of a bitmap context.\nvar width: Int\nReturns the width in pixels of a bitmap context."
  },
  {
    "title": "init(patternSpace:pattern:components:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1455687-init",
    "html": "Parameters\ncolorspace\n\nA pattern color space for the new color. Core Graphics retains the color space you pass in. On return, you may safely release it.\n\npattern\n\nA pattern for the new color object. Core Graphics retains the pattern you pass in. On return, you may safely release it.\n\ncomponents\n\nAn array of intensity values describing the color. The array should contain n + 1 values that correspond to the n color components in the specified color space, followed by the alpha component. Each component value should be in the range appropriate for the color space. Values outside this range will be clamped to the nearest correct value.\n\nReturn Value\n\nA new color. You are responsible for releasing this object using CGColorRelease.\n\nSee Also\nCreating Colors\nfunc copy() -> CGColor?\nCreates a copy of an existing color.\nfunc copy(alpha: CGFloat) -> CGColor?\nCreates a copy of an existing color, substituting a new alpha value.\ninit(genericCMYKCyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nCreates a color in the Generic CMYK color space.\ninit(gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space.\ninit(genericGrayGamma2_2Gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space with a gamma ramp of 2.2.\ninit(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the Generic RGB color space.\ninit(srgbRed: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the sRGB color space.\ninit?(colorSpace: CGColorSpace, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha) and an associated color space."
  },
  {
    "title": "black | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1456641-black",
    "html": "See Also\nGetting System Colors\nclass var white: CGColor\nThe white color in the Generic gray color space.\nclass var clear: CGColor\nThe clear color in the Generic gray color space."
  },
  {
    "title": "data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455517-data",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nA pointer to the specified bitmap context’s image data, or NULL if the context is not a bitmap context.\n\nDiscussion\n\nIf you provided the memory for the bitmap data, you can use this method to get that data pointer. If you passed NULL for the data pointer when creating your bitmap context, it is safe to get the data pointer in iOS 4.0 and later and macOS 10.6 and later only. In earlier versions of the operating system, passing NULL for the data parameter is not supported and may lead to crashes when attempting to access this data using this function.\n\nSee Also\nManaging a Bitmap Graphics Context\nvar bitmapInfo: CGBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nvar bitsPerComponent: Int\nReturns the bits per component of a bitmap context.\nvar bitsPerPixel: Int\nReturns the bits per pixel of a bitmap context.\nvar bytesPerRow: Int\nReturns the bytes per row of a bitmap context.\nvar colorSpace: CGColorSpace?\nReturns the color space of a bitmap context.\nvar height: Int\nReturns the height in pixels of a bitmap context.\nvar width: Int\nReturns the width in pixels of a bitmap context.\nfunc makeImage() -> CGImage?\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "bytesPerRow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456129-bytesperrow",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe number of bytes per row of the specified context, or 0 if the context is not a bitmap context.\n\nSee Also\nManaging a Bitmap Graphics Context\nvar bitmapInfo: CGBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nvar bitsPerComponent: Int\nReturns the bits per component of a bitmap context.\nvar bitsPerPixel: Int\nReturns the bits per pixel of a bitmap context.\nvar colorSpace: CGColorSpace?\nReturns the color space of a bitmap context.\nvar data: UnsafeMutableRawPointer?\nReturns a pointer to the image data associated with a bitmap context.\nvar height: Int\nReturns the height in pixels of a bitmap context.\nvar width: Int\nReturns the width in pixels of a bitmap context.\nfunc makeImage() -> CGImage?\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "height | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454681-height",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe height in pixels of the specified context, or 0 if the context is not a bitmap context.\n\nSee Also\nManaging a Bitmap Graphics Context\nvar bitmapInfo: CGBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nvar bitsPerComponent: Int\nReturns the bits per component of a bitmap context.\nvar bitsPerPixel: Int\nReturns the bits per pixel of a bitmap context.\nvar bytesPerRow: Int\nReturns the bytes per row of a bitmap context.\nvar colorSpace: CGColorSpace?\nReturns the color space of a bitmap context.\nvar data: UnsafeMutableRawPointer?\nReturns a pointer to the image data associated with a bitmap context.\nvar width: Int\nReturns the width in pixels of a bitmap context.\nfunc makeImage() -> CGImage?\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "colorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454058-colorspace",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe color space of the specified context, or NULL if the context is not a bitmap context. You are responsible for retaining and releasing this object as necessary.\n\nSee Also\nManaging a Bitmap Graphics Context\nvar bitmapInfo: CGBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nvar bitsPerComponent: Int\nReturns the bits per component of a bitmap context.\nvar bitsPerPixel: Int\nReturns the bits per pixel of a bitmap context.\nvar bytesPerRow: Int\nReturns the bytes per row of a bitmap context.\nvar data: UnsafeMutableRawPointer?\nReturns a pointer to the image data associated with a bitmap context.\nvar height: Int\nReturns the height in pixels of a bitmap context.\nvar width: Int\nReturns the width in pixels of a bitmap context.\nfunc makeImage() -> CGImage?\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "pathContains(_:mode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454778-pathcontains",
    "html": "Parameters\npoint\n\nThe point to check, specified in user space units.\n\nmode\n\nA path drawing mode. See CGPathDrawingMode.\n\nReturn Value\n\nReturns true if point is inside the current path of the graphics context; false otherwise.\n\nDiscussion\n\nA point is contained within the path of a graphics context if the point is inside the painted region when the path is stroked or filled with opaque colors using the specified path drawing mode. A point can be inside a path only if the path is explicitly closed by calling the function closePath() for paths drawn directly to the current context, or closeSubpath() for paths first created as CGPath objects and then drawn to the current context.\n\nSee Also\nExamining the Current Graphics Path\nvar boundingBoxOfPath: CGRect\nReturns the smallest rectangle that contains the current path.\nvar currentPointOfPath: CGPoint\nReturns the current point in a non-empty path.\nvar isPathEmpty: Bool\nIndicates whether the current path contains any subpaths."
  },
  {
    "title": "bitsPerPixel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455946-bitsperpixel",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe number of bits per pixel in the specified context, or 0 if the context is not a bitmap context.\n\nSee Also\nManaging a Bitmap Graphics Context\nvar bitmapInfo: CGBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nvar bitsPerComponent: Int\nReturns the bits per component of a bitmap context.\nvar bytesPerRow: Int\nReturns the bytes per row of a bitmap context.\nvar colorSpace: CGColorSpace?\nReturns the color space of a bitmap context.\nvar data: UnsafeMutableRawPointer?\nReturns a pointer to the image data associated with a bitmap context.\nvar height: Int\nReturns the height in pixels of a bitmap context.\nvar width: Int\nReturns the width in pixels of a bitmap context.\nfunc makeImage() -> CGImage?\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "kCGFontIndexInvalid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/kcgfontindexinvalid",
    "html": "See Also\nWorking with Glyphs\nvar numberOfGlyphs: Int\nReturns the number of glyphs in a font.\nfunc name(for: CGGlyph) -> CFString?\nReturns the glyph name of the specified glyph in the specified font.\nfunc getGlyphWithGlyphName(name: CFString) -> CGGlyph\nReturns the glyph for the glyph name associated with the specified font object.\nfunc getGlyphBBoxes(glyphs: UnsafePointer<CGGlyph>, count: Int, bboxes: UnsafeMutablePointer<CGRect>) -> Bool\nGet the bounding box of each glyph in an array.\nfunc getGlyphAdvances(glyphs: UnsafePointer<CGGlyph>, count: Int, advances: UnsafeMutablePointer<Int32>) -> Bool\nGets the advance width of each glyph in the provided array.\ntypealias CGGlyph\nAn index into the internal glyph table of a font.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\ntypealias CGFontIndex\nAn index into a font table.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex."
  },
  {
    "title": "bitsPerComponent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455383-bitspercomponent",
    "html": "Parameters\ncontext\n\nThe bitmap context to examine.\n\nReturn Value\n\nThe number of bits per component in the specified context, or 0 if the context is not a bitmap context.\n\nSee Also\nManaging a Bitmap Graphics Context\nvar bitmapInfo: CGBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nvar bitsPerPixel: Int\nReturns the bits per pixel of a bitmap context.\nvar bytesPerRow: Int\nReturns the bytes per row of a bitmap context.\nvar colorSpace: CGColorSpace?\nReturns the color space of a bitmap context.\nvar data: UnsafeMutableRawPointer?\nReturns a pointer to the image data associated with a bitmap context.\nvar height: Int\nReturns the height in pixels of a bitmap context.\nvar width: Int\nReturns the width in pixels of a bitmap context.\nfunc makeImage() -> CGImage?\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396369-typeid",
    "html": "Return Value\n\nThe Core Foundation identifier for the opaque type CGFont."
  },
  {
    "title": "CGGlyph | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgglyph",
    "html": "Discussion\n\nWhen drawing text, you typically specify a sequence of characters. However, Core Graphics also allows you to use CGGlyph values to specify glyphs. In either case, Core Graphics renders the text using font data provided by the Apple Type Services (ATS) framework.\n\nYou provide CGGlyph values to the functions showGlyphs(g:count:) and showGlyphsAtPoint(x:y:glyphs:count:). These functions display an array of glyphs at the current text position or at a position you specify, respectively.\n\nSee Also\nWorking with Glyphs\nvar numberOfGlyphs: Int\nReturns the number of glyphs in a font.\nfunc name(for: CGGlyph) -> CFString?\nReturns the glyph name of the specified glyph in the specified font.\nfunc getGlyphWithGlyphName(name: CFString) -> CGGlyph\nReturns the glyph for the glyph name associated with the specified font object.\nfunc getGlyphBBoxes(glyphs: UnsafePointer<CGGlyph>, count: Int, bboxes: UnsafeMutablePointer<CGRect>) -> Bool\nGet the bounding box of each glyph in an array.\nfunc getGlyphAdvances(glyphs: UnsafePointer<CGGlyph>, count: Int, advances: UnsafeMutablePointer<Int32>) -> Bool\nGets the advance width of each glyph in the provided array.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\ntypealias CGFontIndex\nAn index into a font table.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex."
  },
  {
    "title": "getGlyphWithGlyphName(name:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396340-getglyphwithglyphname",
    "html": "Parameters\nname\n\nThe name of the desired glyph.\n\nReturn Value\n\nThe named glyph, or 0 if the named glyph isn’t associated with the font.\n\nSee Also\nWorking with Glyphs\nvar numberOfGlyphs: Int\nReturns the number of glyphs in a font.\nfunc name(for: CGGlyph) -> CFString?\nReturns the glyph name of the specified glyph in the specified font.\nfunc getGlyphBBoxes(glyphs: UnsafePointer<CGGlyph>, count: Int, bboxes: UnsafeMutablePointer<CGRect>) -> Bool\nGet the bounding box of each glyph in an array.\nfunc getGlyphAdvances(glyphs: UnsafePointer<CGGlyph>, count: Int, advances: UnsafeMutablePointer<Int32>) -> Bool\nGets the advance width of each glyph in the provided array.\ntypealias CGGlyph\nAn index into the internal glyph table of a font.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\ntypealias CGFontIndex\nAn index into a font table.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex."
  },
  {
    "title": "init(radialSpace:start:startRadius:end:endRadius:function:extendStart:extendEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgshading/1456399-init",
    "html": "Parameters\ncolorspace\n\nThe color space in which color values are expressed. Core Graphics retains this object; upon return, you may safely release it.\n\nstart\n\nThe center of the starting circle, in the shading's target coordinate space.\n\nstartRadius\n\nThe radius of the starting circle, in the shading's target coordinate space.\n\nend\n\nThe center of the ending circle, in the shading's target coordinate space.\n\nendRadius\n\nThe radius of the ending circle, in the shading's target coordinate space.\n\nfunction\n\nA CGFunction object created by the function init(info:domainDimension:domain:rangeDimension:range:callbacks:). This object refers to your function for creating a radial shading. Core Graphics retains this object; upon return, you may safely release it.\n\nextendStart\n\nA Boolean value that specifies whether to extend the shading beyond the starting circle.\n\nextendEnd\n\nA Boolean value that specifies whether to extend the shading beyond the ending circle.\n\nReturn Value\n\nA new Core Graphics radial shading. You are responsible for releasing this object using CGShadingRelease.\n\nDiscussion\n\nA radial shading is a color blend that varies between two circles. To draw the shading, call the function drawShading(_:).\n\nSee Also\nCreating Shading Objects\ninit?(axialSpace: CGColorSpace, start: CGPoint, end: CGPoint, function: CGFunction, extendStart: Bool, extendEnd: Bool)\nCreates a shading object to use for axial shading."
  },
  {
    "title": "init(axialSpace:start:end:function:extendStart:extendEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgshading/1455224-init",
    "html": "Parameters\ncolorspace\n\nThe color space in which color values are expressed. Core Graphics retains this object; upon return, you may safely release it.\n\nstart\n\nThe starting point of the axis, in the shading's target coordinate space.\n\nend\n\nThe ending point of the axis, in the shading's target coordinate space.\n\nfunction\n\nA CGFunction object created by the function init(info:domainDimension:domain:rangeDimension:range:callbacks:). This object refers to your function for creating an axial shading. Core Graphics retains this object; upon return, you may safely release it.\n\nextendStart\n\nA Boolean value that specifies whether to extend the shading beyond the starting point of the axis.\n\nextendEnd\n\nA Boolean value that specifies whether to extend the shading beyond the ending point of the axis.\n\nReturn Value\n\nA new Core Graphics axial shading. You are responsible for releasing this object using CGShadingRelease.\n\nDiscussion\n\nAn axial shading is a color blend that varies along a linear axis between two endpoints and extends indefinitely perpendicular to that axis. When you are ready to draw the shading, call the function drawShading(_:).\n\nSee Also\nCreating Shading Objects\ninit?(radialSpace: CGColorSpace, start: CGPoint, startRadius: CGFloat, end: CGPoint, endRadius: CGFloat, function: CGFunction, extendStart: Bool, extendEnd: Bool)\nCreates a shading object to use for radial shading."
  },
  {
    "title": "CGPDFArray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/cgpdfarray",
    "html": "Overview\n\nPDF arrays may be heterogeneous—that is, they may contain any other PDF objects, including PDF strings, PDF dictionaries, and other PDF arrays.\n\nMany CGPDFArray functions to retrieve values from a PDF array take the form:\n\nbool CGPDFArrayGet<DataType> (\n CGPDFArrayRef array,\n size_t index,\n <DataType>Ref *value\n);\n\n\nThese functions test the data type of the object at the specified index. If the object is not of the expected type, the function returns false. If the object is of the expected type, the function returns true, and the object is passed back in the value parameter.\n\nThis type is not derived from CFTypeRef and therefore there are no functions for retaining and releasing it. CGPDFArrayRef objects exist only as constituent parts of a CGPDFDocument object, and they are managed by their container.\n\nTopics\nGetting Data from a PDF Array\nfunc CGPDFArrayGetArray(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFArrayRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is another PDF array and, if so, retrieves that array.\nfunc CGPDFArrayGetBoolean(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFBoolean>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF Boolean and, if so, retrieves that Boolean.\nfunc CGPDFArrayGetCount(CGPDFArrayRef) -> Int\nReturns the number of items in a PDF array.\nfunc CGPDFArrayGetDictionary(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFDictionaryRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF dictionary and, if so, retrieves that dictionary.\nfunc CGPDFArrayGetInteger(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFInteger>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF integer and, if so, retrieves that object.\nfunc CGPDFArrayGetName(CGPDFArrayRef, Int, UnsafeMutablePointer<UnsafePointer<CChar>?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF name reference (represented as a constant C string) and, if so, retrieves that name.\nfunc CGPDFArrayGetNull(CGPDFArrayRef, Int) -> Bool\nReturns whether an object at a given index in a Quartz PDF array is a PDF null.\nfunc CGPDFArrayGetNumber(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFReal>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF number and, if so, retrieves that object.\nfunc CGPDFArrayGetObject(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFObjectRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF object and, if so, retrieves that object.\nfunc CGPDFArrayGetStream(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStreamRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF stream and, if so, retrieves that stream.\nfunc CGPDFArrayGetString(CGPDFArrayRef, Int, UnsafeMutablePointer<CGPDFStringRef?>?) -> Bool\nReturns whether an object at a given index in a PDF array is a PDF string and, if so, retrieves that string.\nData Types\ntypealias CGPDFArrayRef\nAn opaque type that encapsulates a PDF array.\nSee Also\nAbstract Types for PDF Document Content\nCGPDFPage\nA page in a PDF document.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "leading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396390-leading",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe leading of the font.\n\nDiscussion\n\nThe leading is the spacing between consecutive lines of text in a font. The value is specified in glyph space units.\n\nSee Also\nExamining Font Metrics\nvar ascent: Int32\nReturns the ascent of a font.\nvar capHeight: Int32\nReturns the cap height of a font.\nvar descent: Int32\nReturns the descent of a font.\nvar fontBBox: CGRect\nReturns the bounding box of a font.\nvar italicAngle: CGFloat\nReturns the italic angle of a font.\nvar stemV: CGFloat\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nvar unitsPerEm: Int32\nReturns the number of glyph space units per em for the provided font.\nvar xHeight: Int32\nReturns the x-height of a font."
  },
  {
    "title": "italicAngle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396404-italicangle",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe italic angle of the font, measured in degrees counter-clockwise from the vertical.\n\nSee Also\nExamining Font Metrics\nvar ascent: Int32\nReturns the ascent of a font.\nvar capHeight: Int32\nReturns the cap height of a font.\nvar descent: Int32\nReturns the descent of a font.\nvar fontBBox: CGRect\nReturns the bounding box of a font.\nvar leading: Int32\nReturns the leading of a font.\nvar stemV: CGFloat\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nvar unitsPerEm: Int32\nReturns the number of glyph space units per em for the provided font.\nvar xHeight: Int32\nReturns the x-height of a font."
  },
  {
    "title": "capHeight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396338-capheight",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe cap height of the font.\n\nDiscussion\n\nThe cap height is the distance above the baseline of the top of flat capital letters of glyphs in a font. The value is specified in glyph space units.\n\nSee Also\nExamining Font Metrics\nvar ascent: Int32\nReturns the ascent of a font.\nvar descent: Int32\nReturns the descent of a font.\nvar fontBBox: CGRect\nReturns the bounding box of a font.\nvar italicAngle: CGFloat\nReturns the italic angle of a font.\nvar leading: Int32\nReturns the leading of a font.\nvar stemV: CGFloat\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nvar unitsPerEm: Int32\nReturns the number of glyph space units per em for the provided font.\nvar xHeight: Int32\nReturns the x-height of a font."
  },
  {
    "title": "descent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396351-descent",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe descent of the font .\n\nDiscussion\n\nThe descent is the maximum distance below the baseline of glyphs in a font. The value is specified in glyph space units.\n\nSee Also\nExamining Font Metrics\nvar ascent: Int32\nReturns the ascent of a font.\nvar capHeight: Int32\nReturns the cap height of a font.\nvar fontBBox: CGRect\nReturns the bounding box of a font.\nvar italicAngle: CGFloat\nReturns the italic angle of a font.\nvar leading: Int32\nReturns the leading of a font.\nvar stemV: CGFloat\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nvar unitsPerEm: Int32\nReturns the number of glyph space units per em for the provided font.\nvar xHeight: Int32\nReturns the x-height of a font."
  },
  {
    "title": "ascent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396359-ascent",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe ascent of the font.\n\nDiscussion\n\nThe ascent is the maximum distance above the baseline of glyphs in a font. The value is specified in glyph space units.\n\nSee Also\nExamining Font Metrics\nvar capHeight: Int32\nReturns the cap height of a font.\nvar descent: Int32\nReturns the descent of a font.\nvar fontBBox: CGRect\nReturns the bounding box of a font.\nvar italicAngle: CGFloat\nReturns the italic angle of a font.\nvar leading: Int32\nReturns the leading of a font.\nvar stemV: CGFloat\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nvar unitsPerEm: Int32\nReturns the number of glyph space units per em for the provided font.\nvar xHeight: Int32\nReturns the x-height of a font."
  },
  {
    "title": "fullName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont/1396357-fullname",
    "html": "Parameters\nfont\n\nA font object.\n\nReturn Value\n\nThe full name associated with the font."
  },
  {
    "title": "CGPDFString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/cgpdfstring",
    "html": "Overview\n\nA PDF string object is a series of bytes—unsigned integer values in the range 0 to 255.\n\nThe string elements are not integer objects, but are stored in a more compact format. For more information on the representation of strings in PDF, see the latest version of PDF Reference, Adobe Systems Incorporated.\n\nThis object is not derived from CFType and therefore there are no functions for retaining and releasing it. CGPDFString objects exist as constituent parts of a CGPDFDocument object, and are managed by their container.\n\nTopics\nConverting PDF Strings\nfunc CGPDFStringCopyTextString(CGPDFStringRef) -> CFString?\nReturns a CFString object that represents a PDF string as a text string.\nfunc CGPDFStringCopyDate(CGPDFStringRef) -> CFDate?\nConverts a string to a date.\nGetting PDF String Data\nfunc CGPDFStringGetBytePtr(CGPDFStringRef) -> UnsafePointer<UInt8>?\nReturns a pointer to the bytes of a PDF string.\nfunc CGPDFStringGetLength(CGPDFStringRef) -> Int\nReturns the number of bytes in a PDF string.\nData Types\ntypealias CGPDFStringRef\nA data type that represents a string in a PDF document.\nSee Also\nAbstract Types for PDF Document Content\nCGPDFPage\nA page in a PDF document.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGPDFStream | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/cgpdfstream",
    "html": "Overview\n\nA PDF stream consists of a dictionary that describes a sequence of bytes. Streams typically represent objects with potentially large amounts of data, such as images and page descriptions.\n\nThis object is not derived from CFType and therefore there are no functions for retaining and releasing it.\n\nTopics\nGetting Data from a PDF Stream\nfunc CGPDFStreamCopyData(CGPDFStreamRef, UnsafeMutablePointer<CGPDFDataFormat>) -> CFData?\nReturns the data associated with a PDF stream.\nfunc CGPDFStreamGetDictionary(CGPDFStreamRef) -> CGPDFDictionaryRef?\nReturns the dictionary associated with a PDF stream.\nData Types\ntypealias CGPDFStreamRef\nA type that represents a PDF stream.\nConstants\nenum CGPDFDataFormat\nThe encoding format of PDF data.\nSee Also\nAbstract Types for PDF Document Content\nCGPDFPage\nA page in a PDF document.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "setStrokeColor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456196-setstrokecolor",
    "html": "Parameters\ncolor\n\nThe new stroke color.\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "addRects(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427132-addrects",
    "html": "Parameters\nrects\n\nAn array of rectangles, specified in user space coordinates.\n\nDiscussion\n\nCalling this convenience method is equivalent to repeatedly calling the addRect(_:) method for each rectangle in the array.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "setShadow(offset:blur:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456082-setshadow",
    "html": "Parameters\noffset\n\nSpecifies a translation of the context’s coordinate system, to establish an offset for the shadow ({0,0} specifies a light source immediately above the screen).\n\nblur\n\nA non-negative number specifying the amount of blur.\n\nDiscussion\n\nShadow parameters are part of the graphics state in a context. After shadowing is set, all objects drawn are shadowed using a black color with 1/3 alpha (in effect, RGBA = {0, 0, 0, 1.0/3.0}) in the DeviceRGB color space.\n\nTo turn off shadowing:\n\nUse the standard save/restore mechanism for the graphics state.\n\nUse setShadow(offset:blur:color:) to set the shadow color to a fully transparent color (or pass NULL as the color).\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "setFillColor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455296-setfillcolor",
    "html": "Parameters\ncomponents\n\nAn array of intensity values describing the color to set. The number of array elements must equal the number of components in the current fill color space, plus an additional component for the alpha value.\n\nDiscussion\n\nThe current fill color space must not be a pattern color space. For information on setting the fill color when using a pattern color space, see setFillPattern(_:colorComponents:). Note that the preferred API to use is now setFillColor(_:).\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "init(data:width:height:bitsPerComponent:bytesPerRow:space:bitmapInfo:releaseCallback:releaseInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454984-init",
    "html": "Parameters\ndata\n\nA pointer to the destination in memory where the drawing is to be rendered. The size of this memory block should be at least (bytesPerRow*height) bytes.\n\nPass NULL if you want this function to allocate memory for the bitmap. This frees you from managing your own memory, which reduces memory leak issues.\n\nwidth\n\nThe width, in pixels, of the required bitmap.\n\nheight\n\nThe height, in pixels, of the required bitmap.\n\nbitsPerComponent\n\nThe number of bits to use for each component of a pixel in memory. For example, for a 32-bit pixel format and an RGB color space, you would specify a value of 8 bits per component. For the list of supported pixel formats, see “Supported Pixel Formats” in the Graphics Contexts chapter of Quartz 2D Programming Guide.\n\nbytesPerRow\n\nThe number of bytes of memory to use per row of the bitmap. If the data parameter is NULL, passing a value of 0 causes the value to be calculated automatically.\n\ncolorspace\n\nThe color space to use for the bitmap context. Note that indexed color spaces are not supported for bitmap graphics contexts.\n\nbitmapInfo\n\nConstants that specify whether the bitmap should contain an alpha channel, the alpha channel’s relative location in a pixel, and information about whether the pixel components are floating-point or integer values. The constants for specifying the alpha channel information are declared with the CGImageAlphaInfo type but can be passed to this parameter safely. You can also pass the other constants associated with the CGBitmapInfo type.\n\nFor an example of how to specify the color space, bits per pixel, bits per pixel component, and bitmap information, see Graphics Contexts.\n\nreleaseCallback\n\nThe custom release function to call when it is time to release the bitmap data. For the syntax of this function, see the description of the CGBitmapContextReleaseDataCallback data type. You may specify NULL for this parameter.\n\nreleaseInfo\n\nA pointer to any data you want passed to the your custom release callback.\n\nReturn Value\n\nA new bitmap context, or NULL if a context could not be created. You are responsible for releasing this object using CGContextRelease.\n\nDiscussion\n\nWhen you draw into this context, Core Graphics renders your drawing as bitmapped data in the specified block of memory.\n\nThe pixel format for a new bitmap context is determined by three parameters—the number of bits per component, the color space, and an alpha option (expressed as a CGBitmapInfo constant). The alpha value determines the opacity of a pixel when it is drawn.\n\nSee Also\nCreating Bitmap Graphics Contexts\ninit?(data: UnsafeMutableRawPointer?, width: Int, height: Int, bitsPerComponent: Int, bytesPerRow: Int, space: CGColorSpace, bitmapInfo: UInt32)\nCreates a bitmap graphics context.\ntypealias CGBitmapContextReleaseDataCallback\nA callback function used to release data associate with the bitmap context."
  },
  {
    "title": "bitmapInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455839-bitmapinfo",
    "html": "Parameters\nc\n\nA bitmap graphics context.\n\nReturn Value\n\nThe bitmap info of the bitmap graphics context or 0 if c is not a bitmap graphics context. See CGImage for a description of the CGBitmapInfo constants that can be returned.\n\nDiscussion\n\nThe data returned by the function specifies whether the bitmap contains an alpha channel and how the alpha channel is generated, along with whether the components are floating-point or integer.\n\nSee Also\nManaging a Bitmap Graphics Context\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nvar bitsPerComponent: Int\nReturns the bits per component of a bitmap context.\nvar bitsPerPixel: Int\nReturns the bits per pixel of a bitmap context.\nvar bytesPerRow: Int\nReturns the bytes per row of a bitmap context.\nvar colorSpace: CGColorSpace?\nReturns the color space of a bitmap context.\nvar data: UnsafeMutableRawPointer?\nReturns a pointer to the image data associated with a bitmap context.\nvar height: Int\nReturns the height in pixels of a bitmap context.\nvar width: Int\nReturns the width in pixels of a bitmap context.\nfunc makeImage() -> CGImage?\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "setRenderingIntent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455544-setrenderingintent",
    "html": "Parameters\nintent\n\nA rendering intent constant—CGColorRenderingIntent.defaultIntent, CGColorRenderingIntent.absoluteColorimetric, CGColorRenderingIntent.relativeColorimetric, CGColorRenderingIntent.perceptual, or CGColorRenderingIntent.saturation. For a discussion of these constants, see CGColorSpace.\n\nDiscussion\n\nThe rendering intent specifies how to handle colors that are not located within the gamut of the destination color space of a graphics context. If you do not explicitly set the rendering intent, Core Graphics uses perceptual rendering intent when drawing sampled images and relative colorimetric rendering intent for all other drawing.\n\nSee Also\nManaging a Graphics Context\nfunc flush()\nForces all pending drawing operations in a window context to be rendered immediately to the destination device.\nfunc synchronize()\nMarks a window context for update.\nfunc setBlendMode(CGBlendMode)\nSets how sample values are composited by a graphics context.\nenum CGBlendMode\nCompositing operations for images."
  },
  {
    "title": "CGBlendMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgblendmode",
    "html": "Overview\n\nThese blend mode constants represent the Porter-Duff blend modes. The symbols in the equations for these blend modes are:\n\nR is the premultiplied result\n\nS is the source color, and includes alpha\n\nD is the destination color, and includes alpha\n\nRa, Sa, and Da are the alpha components of R, S, and D\n\nYou can find more information on blend modes, including examples of images produced using them, and many mathematical descriptions of the modes, in PDF Reference, Fourth Edition, Version 1.5, Adobe Systems, Inc. If you are a former QuickDraw developer, it may be helpful for you to think of blend modes as an alternative to transfer modes\n\nFor examples of using blend modes see \"Setting Blend Modes\" and \"Using Blend Modes With Images\" in Quartz 2D Programming Guide.\n\nTopics\nConstants\ncase normal\nPaints the source image samples over the background image samples.\ncase multiply\nMultiplies the source image samples with the background image samples. This results in colors that are at least as dark as either of the two contributing sample colors.\ncase screen\nMultiplies the inverse of the source image samples with the inverse of the background image samples, resulting in colors that are at least as light as either of the two contributing sample colors.\ncase overlay\ncase darken\ncase lighten\ncase colorDodge\nBrightens the background image samples to reflect the source image samples. Source image sample values that specify black do not produce a change.\ncase colorBurn\nDarkens the background image samples to reflect the source image samples. Source image sample values that specify white do not produce a change.\ncase softLight\ncase hardLight\ncase difference\ncase exclusion\nProduces an effect similar to that produced by CGBlendMode.difference, but with lower contrast. Source image sample values that are black don’t produce a change; white inverts the background color values.\ncase hue\nUses the luminance and saturation values of the background with the hue of the source image.\ncase saturation\nUses the luminance and hue values of the background with the saturation of the source image. Areas of the background that have no saturation (that is, pure gray areas) don’t produce a change.\ncase color\nUses the luminance values of the background with the hue and saturation values of the source image. This mode preserves the gray levels in the image. You can use this mode to color monochrome images or to tint color images.\ncase luminosity\nUses the hue and saturation of the background with the luminance of the source image. This mode creates an effect that is inverse to the effect created by CGBlendMode.color.\ncase clear\nR = 0\ncase copy\nR = S\ncase sourceIn\nR = S*Da\ncase sourceOut\nR = S*(1 - Da)\ncase sourceAtop\nR = S*Da + D*(1 - Sa)\ncase destinationOver\nR = S*(1 - Da) + D\ncase destinationIn\nR = D*Sa\ncase destinationOut\nR = D*(1 - Sa)\ncase destinationAtop\nR = S*(1 - Da) + D*Sa\ncase xor\nR = S*(1 - Da) + D*(1 - Sa). This XOR mode is only nominally related to the classical bitmap XOR operation, which is not supported by Core Graphics\ncase plusDarker\nR = MAX(0, 1 - ((1 - D) + (1 - S)))\ncase plusLighter\nR = MIN(1, S + D)\nRelationships\nConforms To\nSendable\nSee Also\nManaging a Graphics Context\nfunc flush()\nForces all pending drawing operations in a window context to be rendered immediately to the destination device.\nfunc synchronize()\nMarks a window context for update.\nfunc setBlendMode(CGBlendMode)\nSets how sample values are composited by a graphics context.\nfunc setRenderingIntent(CGColorRenderingIntent)\nSets the rendering intent in the current graphics state."
  },
  {
    "title": "setBlendMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455994-setblendmode",
    "html": "Parameters\nmode\n\nA blend mode. See CGBlendMode for a list of the constants you can supply.\n\nSee Also\nManaging a Graphics Context\nfunc flush()\nForces all pending drawing operations in a window context to be rendered immediately to the destination device.\nfunc synchronize()\nMarks a window context for update.\nenum CGBlendMode\nCompositing operations for images.\nfunc setRenderingIntent(CGColorRenderingIntent)\nSets the rendering intent in the current graphics state."
  },
  {
    "title": "synchronize() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455450-synchronize",
    "html": "Parameters\nc\n\nThe window context to synchronize. If you pass a PDF context or a bitmap context, this function does nothing.\n\nDiscussion\n\nWhen you call this function, all drawing operations since the last update are flushed at the next regular opportunity. Under normal conditions, you do not need to call this function.\n\nSee Also\nManaging a Graphics Context\nfunc flush()\nForces all pending drawing operations in a window context to be rendered immediately to the destination device.\nfunc setBlendMode(CGBlendMode)\nSets how sample values are composited by a graphics context.\nenum CGBlendMode\nCompositing operations for images.\nfunc setRenderingIntent(CGColorRenderingIntent)\nSets the rendering intent in the current graphics state."
  },
  {
    "title": "flush() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454895-flush",
    "html": "Parameters\nc\n\nThe window context to flush. If you pass a PDF context or a bitmap context, this function does nothing.\n\nDiscussion\n\nWhen you call this function, Core Graphics immediately flushes the current drawing to the destination device (for example, a screen). Because the system software flushes a context automatically at the appropriate times, calling this function could have an adverse effect on performance. Under normal conditions, you do not need to call this function.\n\nSee Also\nManaging a Graphics Context\nfunc synchronize()\nMarks a window context for update.\nfunc setBlendMode(CGBlendMode)\nSets how sample values are composited by a graphics context.\nenum CGBlendMode\nCompositing operations for images.\nfunc setRenderingIntent(CGColorRenderingIntent)\nSets the rendering intent in the current graphics state."
  },
  {
    "title": "restoreGState() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455391-restoregstate",
    "html": "Parameters\nc\n\nThe graphics context whose state you want to modify.\n\nDiscussion\n\nCore Graphics removes the graphics state at the top of the stack so that the most recently saved state becomes the current graphics state.\n\nSee Also\nSaving and Restoring Graphics State\nfunc saveGState()\nPushes a copy of the current graphics state onto the graphics state stack for the context."
  },
  {
    "title": "saveGState() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456156-savegstate",
    "html": "Parameters\nc\n\nThe graphics context whose current graphics state you want to save.\n\nDiscussion\n\nEach graphics context maintains a stack of graphics states. Note that not all aspects of the current drawing environment are elements of the graphics state. For example, the current path is not considered part of the graphics state and is therefore not saved when you call this function. The graphics state parameters that are saved are:\n\nCTM (current transformation matrix)\n\nclip region\n\nimage interpolation quality\n\nline width\n\nline join\n\nmiter limit\n\nline cap\n\nline dash\n\nflatness\n\nshould anti-alias\n\nrendering intent\n\nfill color space\n\nstroke color space\n\nfill color\n\nstroke color\n\nalpha value\n\nfont\n\nfont size\n\ncharacter spacing\n\ntext drawing mode\n\nshadow parameters\n\nthe pattern phase\n\nthe font smoothing parameter\n\nblend mode\n\nTo restore your drawing environment to a previously saved state, you can use restoreGState().\n\nSee Also\nSaving and Restoring Graphics State\nfunc restoreGState()\nSets the current graphics state to the state most recently saved."
  },
  {
    "title": "setLineDash(phase:lengths:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427130-setlinedash",
    "html": "Parameters\nphase\n\nA value that specifies how far into the dash pattern the line starts, in units of the user space. For example, a value of 0 draws a line starting with the beginning of a dash pattern, and a value of 3 means the line is drawn with the dash pattern starting at three units from its beginning.\n\nlengths\n\nAn array of values that specify the lengths, in user space coordinates, of the painted and unpainted segments of the dash pattern.\n\nFor example, the array [2,3] sets a dash pattern that alternates between a 2-unit-long painted segment and a 3-unit-long unpainted segment. The array [1,3,4,2] sets the pattern to a 1-unit painted segment, a 3-unit unpainted segment, a 4-unit painted segment, and a 2-unit unpainted segment.Pass an empty array to clear the dash pattern so that all stroke drawing in the context uses solid lines.\n\nSee Also\nSetting Path Drawing Options\nfunc setAllowsAntialiasing(Bool)\nSets whether or not to allow antialiasing for a graphics context.\nfunc setFlatness(CGFloat)\nSets the accuracy of curved paths in a graphics context.\nfunc setLineCap(CGLineCap)\nSets the style for the endpoints of lines drawn in a graphics context.\nfunc setLineJoin(CGLineJoin)\nSets the style for the joins of connected lines in a graphics context.\nfunc setLineWidth(CGFloat)\nSets the line width for a graphics context.\nfunc setMiterLimit(CGFloat)\nSets the miter limit for the joins of connected lines in a graphics context.\nfunc setPatternPhase(CGSize)\nSets the pattern phase of a context.\nfunc setFillPattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the fill pattern in the specified graphics context.\nfunc setShouldAntialias(Bool)\nSets antialiasing on or off for a graphics context."
  },
  {
    "title": "setShouldAntialias(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455178-setshouldantialias",
    "html": "Parameters\nshouldAntialias\n\nA Boolean value that specifies whether antialiasing should be turned on. Antialiasing is turned on by default when a window or bitmap context is created. It is turned off for other types of contexts.\n\nDiscussion\n\nAntialiasing is a graphics state parameter.\n\nSee Also\nSetting Path Drawing Options\nfunc setAllowsAntialiasing(Bool)\nSets whether or not to allow antialiasing for a graphics context.\nfunc setFlatness(CGFloat)\nSets the accuracy of curved paths in a graphics context.\nfunc setLineCap(CGLineCap)\nSets the style for the endpoints of lines drawn in a graphics context.\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\nSets the pattern for drawing dashed lines.\nfunc setLineJoin(CGLineJoin)\nSets the style for the joins of connected lines in a graphics context.\nfunc setLineWidth(CGFloat)\nSets the line width for a graphics context.\nfunc setMiterLimit(CGFloat)\nSets the miter limit for the joins of connected lines in a graphics context.\nfunc setPatternPhase(CGSize)\nSets the pattern phase of a context.\nfunc setFillPattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the fill pattern in the specified graphics context."
  },
  {
    "title": "setLineCap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454326-setlinecap",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\ncap\n\nA line cap style constant—CGLineCap.butt (the default), CGLineCap.round, or CGLineCap.square. See CGPath.\n\nSee Also\nSetting Path Drawing Options\nfunc setAllowsAntialiasing(Bool)\nSets whether or not to allow antialiasing for a graphics context.\nfunc setFlatness(CGFloat)\nSets the accuracy of curved paths in a graphics context.\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\nSets the pattern for drawing dashed lines.\nfunc setLineJoin(CGLineJoin)\nSets the style for the joins of connected lines in a graphics context.\nfunc setLineWidth(CGFloat)\nSets the line width for a graphics context.\nfunc setMiterLimit(CGFloat)\nSets the miter limit for the joins of connected lines in a graphics context.\nfunc setPatternPhase(CGSize)\nSets the pattern phase of a context.\nfunc setFillPattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the fill pattern in the specified graphics context.\nfunc setShouldAntialias(Bool)\nSets antialiasing on or off for a graphics context."
  },
  {
    "title": "setFlatness(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455798-setflatness",
    "html": "Parameters\nflatness\n\nThe largest permissible distance, measured in device pixels, between a point on the true curve and a point on the approximated curve.\n\nDiscussion\n\nThis function controls how accurately curved paths are rendered. Setting the flatness value to less than 1.0 renders highly accurate curves, but lengthens rendering times.\n\nIn most cases, you should not change the flatness value. Customizing the flatness value for the capabilities of a particular output device impairs the ability of your application to render to other devices.\n\nSee Also\nSetting Path Drawing Options\nfunc setAllowsAntialiasing(Bool)\nSets whether or not to allow antialiasing for a graphics context.\nfunc setLineCap(CGLineCap)\nSets the style for the endpoints of lines drawn in a graphics context.\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\nSets the pattern for drawing dashed lines.\nfunc setLineJoin(CGLineJoin)\nSets the style for the joins of connected lines in a graphics context.\nfunc setLineWidth(CGFloat)\nSets the line width for a graphics context.\nfunc setMiterLimit(CGFloat)\nSets the miter limit for the joins of connected lines in a graphics context.\nfunc setPatternPhase(CGSize)\nSets the pattern phase of a context.\nfunc setFillPattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the fill pattern in the specified graphics context.\nfunc setShouldAntialias(Bool)\nSets antialiasing on or off for a graphics context."
  },
  {
    "title": "setAllowsAntialiasing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456310-setallowsantialiasing",
    "html": "Parameters\nallowsAntialiasing\n\nA Boolean value that specifies whether or not to allow antialiasing. Pass true to allow antialiasing; false otherwise. This parameter is not part of the graphics state.\n\nDiscussion\n\nCore Graphics performs antialiasing for a graphics context if both the allowsAntialiasing parameter and the graphics state parameter shouldAntialias are true.\n\nThis parameter is not part of the graphics state.\n\nSee Also\nSetting Path Drawing Options\nfunc setFlatness(CGFloat)\nSets the accuracy of curved paths in a graphics context.\nfunc setLineCap(CGLineCap)\nSets the style for the endpoints of lines drawn in a graphics context.\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\nSets the pattern for drawing dashed lines.\nfunc setLineJoin(CGLineJoin)\nSets the style for the joins of connected lines in a graphics context.\nfunc setLineWidth(CGFloat)\nSets the line width for a graphics context.\nfunc setMiterLimit(CGFloat)\nSets the miter limit for the joins of connected lines in a graphics context.\nfunc setPatternPhase(CGSize)\nSets the pattern phase of a context.\nfunc setFillPattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the fill pattern in the specified graphics context.\nfunc setShouldAntialias(Bool)\nSets antialiasing on or off for a graphics context."
  },
  {
    "title": "concatenate(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454897-concatenate",
    "html": "Parameters\ntransform\n\nThe transformation matrix to apply to the specified context’s current transformation matrix.\n\nDiscussion\n\nWhen you call this function, it concatenates (that is, it combines) two matrices, by multiplying them together. The order in which matrices are concatenated is important, as the operations are not commutative. The resulting CTM in the context is: CTMnew = transform * CTMcontext.\n\nSee Also\nWorking with the Current Transformation Matrix\nvar ctm: CGAffineTransform\nReturns the current transformation matrix.\nfunc rotate(by: CGFloat)\nRotates the user coordinate system in a context.\nfunc scaleBy(x: CGFloat, y: CGFloat)\nChanges the scale of the user coordinate system in a context.\nfunc translateBy(x: CGFloat, y: CGFloat)\nChanges the origin of the user coordinate system in a context."
  },
  {
    "title": "translateBy(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455286-translateby",
    "html": "Parameters\ntx\n\nThe amount to displace the x-axis of the coordinate space, in units of the user space, of the specified context.\n\nty\n\nThe amount to displace the y-axis of the coordinate space, in units of the user space, of the specified context.\n\nSee Also\nWorking with the Current Transformation Matrix\nvar ctm: CGAffineTransform\nReturns the current transformation matrix.\nfunc rotate(by: CGFloat)\nRotates the user coordinate system in a context.\nfunc scaleBy(x: CGFloat, y: CGFloat)\nChanges the scale of the user coordinate system in a context.\nfunc concatenate(CGAffineTransform)\nTransforms the user coordinate system in a context using a specified matrix."
  },
  {
    "title": "clip(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427135-clip",
    "html": "Parameters\nrects\n\nAn array of rectangles, in user space coordinates.\n\nDiscussion\n\nThis method sets the clipping path to the intersection of the current clipping path and the region within the specified rectangles.\n\nAfter determining the new clipping path, the function resets the context’s current path to an empty path.\n\nSee Also\nWorking with the Current Clipping Path\nfunc clip(using: CGPathFillRule)\nModifies the current clipping path.\nfunc clip(to: CGRect)\nSets the clipping path to the intersection of the current clipping path with the area defined by the specified rectangle.\nfunc clip(to: CGRect, mask: CGImage)\nMaps a mask into the specified rectangle and intersects it with the current clipping area of the graphics context.\nvar boundingBoxOfClipPath: CGRect\nReturns the bounding box of a clipping path."
  },
  {
    "title": "scaleBy(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454659-scaleby",
    "html": "Parameters\nsx\n\nThe factor by which to scale the x-axis of the coordinate space of the specified context.\n\nsy\n\nThe factor by which to scale the y-axis of the coordinate space of the specified context.\n\nSee Also\nWorking with the Current Transformation Matrix\nvar ctm: CGAffineTransform\nReturns the current transformation matrix.\nfunc rotate(by: CGFloat)\nRotates the user coordinate system in a context.\nfunc translateBy(x: CGFloat, y: CGFloat)\nChanges the origin of the user coordinate system in a context.\nfunc concatenate(CGAffineTransform)\nTransforms the user coordinate system in a context using a specified matrix."
  },
  {
    "title": "alpha | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1456637-alpha",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nAn alpha intensity value in the range [0,1]. The value represents the opacity of the color.\n\nSee Also\nExamining a Color\nvar colorSpace: CGColorSpace?\nReturns the color space associated with a color.\nvar components: [CGFloat]?\nReturns the values of the color components (including alpha) associated with a color.\nvar numberOfComponents: Int\nReturns the number of color components (including alpha) associated with a color.\nvar pattern: CGPattern?\nReturns the pattern associated with a color in a pattern color space."
  },
  {
    "title": "setStrokeColorSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454396-setstrokecolorspace",
    "html": "Parameters\ncolorspace\n\nThe new stroke color space. The color space is retained; upon return, you may safely release it.\n\nDiscussion\n\nAs a side effect when you call this function, Core Graphics assigns an appropriate initial value to the stroke color, based on the color space you specify. To change this value, call setStrokeColor(_:). Note that the preferred API is now setStrokeColor(_:).\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "setStrokePattern(_:colorComponents:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454796-setstrokepattern",
    "html": "Parameters\npattern\n\nA pattern for stroking. The object is retained; upon return, you may safely release it.\n\ncomponents\n\nIf the specified pattern is an uncolored (or masking) pattern, pass an array of intensity values that specify the color to use when the pattern is painted. The number of array elements must equal the number of components in the base space of the stroke pattern color space, plus an additional component for the alpha value.\n\nIf the specified pattern is a color pattern, pass an alpha value.\n\nDiscussion\n\nThe current stroke color space must be a pattern color space. Otherwise, the result of calling this function is undefined. If you want to set a stroke color, not a stroke pattern, use setStrokeColor(_:).\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "ctm | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454691-ctm",
    "html": "Parameters\nc\n\nA graphics context.\n\nReturn Value\n\nThe transformation matrix for the current graphics state of the specified context.\n\nSee Also\nWorking with the Current Transformation Matrix\nfunc rotate(by: CGFloat)\nRotates the user coordinate system in a context.\nfunc scaleBy(x: CGFloat, y: CGFloat)\nChanges the scale of the user coordinate system in a context.\nfunc translateBy(x: CGFloat, y: CGFloat)\nChanges the origin of the user coordinate system in a context.\nfunc concatenate(CGAffineTransform)\nTransforms the user coordinate system in a context using a specified matrix."
  },
  {
    "title": "setStrokeColor(cyan:magenta:yellow:black:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455358-setstrokecolor",
    "html": "Parameters\ncyan\n\nThe cyan intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nmagenta\n\nThe magenta intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nyellow\n\nThe yellow intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nblack\n\nThe black intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current stroke color space to DeviceCMYK.\n\nCore Graphics sets the current stroke color to the value specified by the cyan, magenta, yellow, black, and alpha parameters.\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "setStrokeColor(red:green:blue:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456378-setstrokecolor",
    "html": "Parameters\nred\n\nThe red intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\ngreen\n\nThe green intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\nblue\n\nThe blue intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current stroke color space to DeviceRGB.\n\nCore Graphics sets the current stroke color to the value specified by the red, green, blue, and alpha parameters.\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "setStrokeColor(gray:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455209-setstrokecolor",
    "html": "Parameters\ngray\n\nA value that specifies the desired gray level. The DeviceGray color space permits the specification of a value ranging from 0.0 (absolute black) to 1.0 (absolute white). Values outside this range are clamped to 0.0 or 1.0.\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current stroke color space to DeviceGray. The DeviceGray color space is a single-dimension space in which color values are specified solely by the intensity of a gray value (from absolute black to absolute white).\n\nCore Graphics sets the current stroke color to the value you specify in the gray and alpha parameters.\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "setAlpha(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456404-setalpha",
    "html": "Parameters\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nThis function sets the alpha value parameter for the specified graphics context. To clear the contents of the drawing canvas, use clear(_:).\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context."
  },
  {
    "title": "clip(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454716-clip",
    "html": "Parameters\nrect\n\nThe location and dimensions of the rectangle, in user space, to be used in determining the new clipping path.\n\nDiscussion\n\nThis function sets the specified graphics context’s clipping region to the area which intersects both the current clipping path and the specified rectangle.\n\nAfter determining the new clipping path, the function resets the context’s current path to an empty path.\n\nSee Also\nWorking with the Current Clipping Path\nfunc clip(using: CGPathFillRule)\nModifies the current clipping path.\nfunc clip(to: [CGRect])\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles.\nfunc clip(to: CGRect, mask: CGImage)\nMaps a mask into the specified rectangle and intersects it with the current clipping area of the graphics context.\nvar boundingBoxOfClipPath: CGRect\nReturns the bounding box of a clipping path.\nRelated Documentation\nclip(to:count:)\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles."
  },
  {
    "title": "setStrokeColor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456283-setstrokecolor",
    "html": "Parameters\ncomponents\n\nAn array of intensity values describing the color to set. The number of array elements must equal the number of components in the current stroke color space, plus an additional component for the alpha value.\n\nDiscussion\n\nThe current stroke color space must not be a pattern color space. For information on setting the stroke color when using a pattern color space, see setStrokePattern(_:colorComponents:). Note that the preferred API is now setStrokeColor(_:).\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "copy(maskingColorComponents:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1454358-copy",
    "html": "Parameters\ncomponents\n\nAn array of color components that specify a color or range of colors to mask the image with. The array must contain 2N values { min[1], max[1], ... min[N], max[N] } where N is the number of components in color space of image. Each value in components must be a valid image sample value. If image has integer pixel components, then each value must be in the range [0 .. 2**bitsPerComponent - 1] (where bitsPerComponent is the number of bits/component of image). If image has floating-point pixel components, then each value may be any floating-point number which is a valid color component.\n\nReturn Value\n\nAn image created by masking image with the colors specified in the components array. You are responsible for releasing this object by calling CGImageRelease.\n\nDiscussion\n\nAny image sample with color value {c[1], ... c[N]} where min[i] <= c[i] <= max[i] for 1 <= i <= N is masked out (that is, not painted). This means that anything underneath the unpainted samples, such as the current fill color, shows through.\n\nSee Also\nCreating Images by Modifying an Image\nfunc cropping(to: CGRect) -> CGImage?\nCreates a bitmap image using the data contained within a subregion of an existing bitmap image.\nfunc masking(CGImage) -> CGImage?\nCreates a bitmap image from an existing image and an image mask."
  },
  {
    "title": "utType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1456067-uttype",
    "html": "See Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image."
  },
  {
    "title": "conversionBlackPointCompensation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/2138326-conversionblackpointcompensation",
    "html": "Discussion\n\nICC profiles specify how to convert the lightest level of white between color spaces, but they do not specify how black should be converted. To account for this, set a value of true for this key when creating a color conversion with the CGColorConversionInfoCreateFromList function."
  },
  {
    "title": "mutableCopy(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411150-mutablecopy",
    "html": "Parameters\ntransform\n\nA pointer to an affine transformation matrix, or NULL if no transformation is needed. If specified, Core Graphics applies the transformation to all elements of the new path.\n\nReturn Value\n\nA new, mutable copy of the specified path transformed by the transform parameter. You are responsible for releasing this object.\n\nSee Also\nCopying a Graphics Path\nfunc copy() -> CGPath?\nCreates an immutable copy of a graphics path.\nfunc copy(using: UnsafePointer<CGAffineTransform>?) -> CGPath?\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nfunc copy(dashingWithPhase: CGFloat, lengths: [CGFloat], transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a dashed stroke.\nfunc copy(strokingWithWidth: CGFloat, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: CGFloat, transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a solid stroke.\nfunc mutableCopy() -> CGMutablePath?\nCreates a mutable copy of an existing graphics path."
  },
  {
    "title": "decode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1454575-decode",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe decode array for a bitmap image (or image mask). See the discussion for a description of possible return values.\n\nDiscussion\n\nFor a bitmap image or image mask, for each color component in the source color space, the decode array contains a pair of values denoting the upper and lower limits of a range. When the image is rendered, a linear transform maps the original component value into a relative number, within the designated range, that is appropriate for the destination color space. If remapping of the image’s color values is not allowed, the returned value will be NULL.\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument/1402603-init",
    "html": "Parameters\nprovider\n\nA data provider that supplies the PDF document data.\n\nReturn Value\n\nA new Core Graphics PDF document, or NULL if a document can not be created. You are responsible for releasing the object using CGPDFDocumentRelease.\n\nDiscussion\n\nDistributing individual pages of a PDF document to separate threads is not supported. If you want to use threads, consider creating a separate document for each thread and operating on a block of pages per thread.\n\nSee Also\nCreating PDF Documents\ninit?(CFURL)\nCreates a Core Graphics PDF document using data specified by a URL.\nRelated Documentation\nQuartz 2D Programming Guide\nCGContextDrawPDFDocument"
  },
  {
    "title": "endPage() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455027-endpage",
    "html": "Parameters\nc\n\nA page-based graphics context.\n\nDiscussion\n\nWhen using a graphics context that supports multiple pages, you should call this function to terminate drawing in the current page.\n\nSee Also\nManaging a Page-Based Graphics Context\nfunc beginPage(mediaBox: UnsafePointer<CGRect>?)\nStarts a new page in a page-based graphics context."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455504-typeid",
    "html": "Return Value\n\nThe identifier for the type CGContext."
  },
  {
    "title": "beginPage(mediaBox:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454794-beginpage",
    "html": "Parameters\nmediaBox\n\nA rectangle defining the bounds of the new page, expressed in units of the default user space, or NULL. These bounds supersede any supplied for the media box when you created the context. If you pass NULL, Core Graphics uses the rectangle you supplied for the media box when the graphics context was created.\n\nDiscussion\n\nWhen using a graphics context that supports multiple pages, you should call this function together with endPage() to delineate the page boundaries in the output. In other words, each page should be bracketed by calls to CGContextBeginPage and CGContextEndPage. Core Graphics ignores all drawing operations performed outside a page boundary in a page-based context.\n\nSee Also\nManaging a Page-Based Graphics Context\nfunc endPage()\nEnds the current page in a page-based graphics context."
  },
  {
    "title": "init(srgbRed:green:blue:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/3042355-init",
    "html": "Parameters\nred\n\nA red component value (0.0 - 1.0).\n\ngreen\n\nA green component value (0.0 - 1.0).\n\nblue\n\nA blue component value (0.0 - 1.0).\n\nalpha\n\nAn alpha value (0.0 - 1.0).\n\nReturn Value\n\nA color object.\n\nSee Also\nCreating Colors\nfunc copy() -> CGColor?\nCreates a copy of an existing color.\nfunc copy(alpha: CGFloat) -> CGColor?\nCreates a copy of an existing color, substituting a new alpha value.\ninit(genericCMYKCyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nCreates a color in the Generic CMYK color space.\ninit(gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space.\ninit(genericGrayGamma2_2Gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space with a gamma ramp of 2.2.\ninit(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the Generic RGB color space.\ninit?(colorSpace: CGColorSpace, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha) and an associated color space.\ninit?(patternSpace: CGColorSpace, pattern: CGPattern, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern."
  },
  {
    "title": "init(red:green:blue:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1455631-init",
    "html": "Parameters\nred\n\nA red component value (0.0 - 1.0).\n\ngreen\n\nA green component value (0.0 - 1.0).\n\nblue\n\nA blue component value (0.0 - 1.0).\n\nalpha\n\nAn alpha value (0.0 - 1.0).\n\nReturn Value\n\nA color object.\n\nSee Also\nCreating Colors\nfunc copy() -> CGColor?\nCreates a copy of an existing color.\nfunc copy(alpha: CGFloat) -> CGColor?\nCreates a copy of an existing color, substituting a new alpha value.\ninit(genericCMYKCyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nCreates a color in the Generic CMYK color space.\ninit(gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space.\ninit(genericGrayGamma2_2Gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space with a gamma ramp of 2.2.\ninit(srgbRed: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the sRGB color space.\ninit?(colorSpace: CGColorSpace, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha) and an associated color space.\ninit?(patternSpace: CGColorSpace, pattern: CGPattern, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern."
  },
  {
    "title": "copy(alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1455986-copy",
    "html": "Parameters\ncolor\n\nThe color to copy.\n\nalpha\n\nA value that specifies the desired opacity of the copy. Values outside the range [0,1] are clamped to 0 or 1.\n\nReturn Value\n\nA copy of the specified color, using the specified alpha value. You are responsible for releasing this object using CGColorRelease.\n\nSee Also\nCreating Colors\nfunc copy() -> CGColor?\nCreates a copy of an existing color.\ninit(genericCMYKCyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nCreates a color in the Generic CMYK color space.\ninit(gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space.\ninit(genericGrayGamma2_2Gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space with a gamma ramp of 2.2.\ninit(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the Generic RGB color space.\ninit(srgbRed: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the sRGB color space.\ninit?(colorSpace: CGColorSpace, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha) and an associated color space.\ninit?(patternSpace: CGColorSpace, pattern: CGPattern, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern."
  },
  {
    "title": "init(gray:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1456453-init",
    "html": "Parameters\ngray\n\nA grayscale value (0.0 - 1.0).\n\nalpha\n\nAn alpha value (0.0 - 1.0).\n\nReturn Value\n\nA color object.\n\nSee Also\nCreating Colors\nfunc copy() -> CGColor?\nCreates a copy of an existing color.\nfunc copy(alpha: CGFloat) -> CGColor?\nCreates a copy of an existing color, substituting a new alpha value.\ninit(genericCMYKCyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nCreates a color in the Generic CMYK color space.\ninit(genericGrayGamma2_2Gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space with a gamma ramp of 2.2.\ninit(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the Generic RGB color space.\ninit(srgbRed: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the sRGB color space.\ninit?(colorSpace: CGColorSpace, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha) and an associated color space.\ninit?(patternSpace: CGColorSpace, pattern: CGPattern, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern."
  },
  {
    "title": "init(genericCMYKCyan:magenta:yellow:black:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1454222-init",
    "html": "Parameters\ncyan\n\nA cyan value (0.0 - 1.0).\n\nmagenta\n\nA magenta value (0.0 - 1.0).\n\nyellow\n\nA yellow value (0.0 - 1.0).\n\nblack\n\nA black value (0.0 - 1.0).\n\nalpha\n\nAn alpha value (0.0 - 1.0).\n\nReturn Value\n\nA color object.\n\nSee Also\nCreating Colors\nfunc copy() -> CGColor?\nCreates a copy of an existing color.\nfunc copy(alpha: CGFloat) -> CGColor?\nCreates a copy of an existing color, substituting a new alpha value.\ninit(gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space.\ninit(genericGrayGamma2_2Gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space with a gamma ramp of 2.2.\ninit(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the Generic RGB color space.\ninit(srgbRed: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the sRGB color space.\ninit?(colorSpace: CGColorSpace, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha) and an associated color space.\ninit?(patternSpace: CGColorSpace, pattern: CGPattern, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern."
  },
  {
    "title": "init(genericGrayGamma2_2Gray:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/3042354-init",
    "html": "Parameters\ngray\n\nA grayscale value (0.0 - 1.0).\n\nalpha\n\nAn alpha value (0.0 - 1.0).\n\nSee Also\nCreating Colors\nfunc copy() -> CGColor?\nCreates a copy of an existing color.\nfunc copy(alpha: CGFloat) -> CGColor?\nCreates a copy of an existing color, substituting a new alpha value.\ninit(genericCMYKCyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nCreates a color in the Generic CMYK color space.\ninit(gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space.\ninit(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the Generic RGB color space.\ninit(srgbRed: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the sRGB color space.\ninit?(colorSpace: CGColorSpace, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha) and an associated color space.\ninit?(patternSpace: CGColorSpace, pattern: CGPattern, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern."
  },
  {
    "title": "copy() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor/1456134-copy",
    "html": "Parameters\ncolor\n\nA color.\n\nReturn Value\n\nA copy of the specified color. You are responsible for releasing this object using CGColorRelease.\n\nSee Also\nCreating Colors\nfunc copy(alpha: CGFloat) -> CGColor?\nCreates a copy of an existing color, substituting a new alpha value.\ninit(genericCMYKCyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nCreates a color in the Generic CMYK color space.\ninit(gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space.\ninit(genericGrayGamma2_2Gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space with a gamma ramp of 2.2.\ninit(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the Generic RGB color space.\ninit(srgbRed: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the sRGB color space.\ninit?(colorSpace: CGColorSpace, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha) and an associated color space.\ninit?(patternSpace: CGColorSpace, pattern: CGPattern, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern."
  },
  {
    "title": "fillEllipse(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454371-fillellipse",
    "html": "Parameters\nrect\n\nA rectangle that defines the area for the ellipse to fit in.\n\nDiscussion\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nDrawing Shapes\nfunc clear(CGRect)\nPaints a transparent rectangle.\nfunc fill(CGRect)\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nfunc fill([CGRect])\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nfunc stroke(CGRect)\nPaints a rectangular path.\nfunc stroke(CGRect, width: CGFloat)\nPaints a rectangular path, using the specified line width.\nfunc strokeEllipse(in: CGRect)\nStrokes an ellipse that fits inside the specified rectangle.\nfunc strokeLineSegments(between: [CGPoint])\nStrokes a sequence of line segments."
  },
  {
    "title": "interpolationQuality | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454940-interpolationquality",
    "html": "Parameters\nc\n\nThe graphics context to examine.\n\nReturn Value\n\nThe current level of interpolation quality.\n\nDiscussion\n\nInterpolation quality is a graphics state parameter that provides a hint for the level of quality to use for image interpolation (for example, when scaling the image). Not all contexts support all interpolation quality levels.\n\nSee Also\nDrawing Images and PDF Content\nfunc draw(CGImage, in: CGRect, byTiling: Bool)\nDraws an image in the specified area.\nfunc drawPDFPage(CGPDFPage)\nDraws the content of a PDF page into the current graphics context.\nenum CGInterpolationQuality\nLevels of interpolation quality for rendering an image.\nRelated Documentation\nCGContextSetInterpolationQuality(_:_:)\nSets the level of interpolation quality for a graphics context."
  },
  {
    "title": "stroke(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454675-stroke",
    "html": "Parameters\nrect\n\nA rectangle, specified in user space coordinates.\n\nDiscussion\n\nThe line width and stroke color of the context’s graphics state are used to paint the path. The current path is cleared as a side effect of calling this function.\n\nSee Also\nDrawing Shapes\nfunc clear(CGRect)\nPaints a transparent rectangle.\nfunc fill(CGRect)\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nfunc fill([CGRect])\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nfunc fillEllipse(in: CGRect)\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nfunc stroke(CGRect, width: CGFloat)\nPaints a rectangular path, using the specified line width.\nfunc strokeEllipse(in: CGRect)\nStrokes an ellipse that fits inside the specified rectangle.\nfunc strokeLineSegments(between: [CGPoint])\nStrokes a sequence of line segments."
  },
  {
    "title": "fill(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454700-fill",
    "html": "Parameters\nrect\n\nA rectangle, in user space coordinates.\n\nDiscussion\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nDrawing Shapes\nfunc clear(CGRect)\nPaints a transparent rectangle.\nfunc fill([CGRect])\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nfunc fillEllipse(in: CGRect)\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nfunc stroke(CGRect)\nPaints a rectangular path.\nfunc stroke(CGRect, width: CGFloat)\nPaints a rectangular path, using the specified line width.\nfunc strokeEllipse(in: CGRect)\nStrokes an ellipse that fits inside the specified rectangle.\nfunc strokeLineSegments(between: [CGPoint])\nStrokes a sequence of line segments.\nRelated Documentation\nfill(_:count:)\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state."
  },
  {
    "title": "strokePath() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454490-strokepath",
    "html": "Parameters\nc\n\nA graphics context.\n\nDiscussion\n\nThe line width and stroke color of the context’s graphics state are used to paint the path. The current path is cleared as a side effect of calling this function.\n\nSee Also\nDrawing the Current Graphics Path\nfunc drawPath(using: CGPathDrawingMode)\nDraws the current path using the provided drawing mode.\nenum CGPathDrawingMode\nOptions for rendering a path.\nfunc fillPath(using: CGPathFillRule)\nPaints the area within the current path, as determined by the specified fill rule.\nRelated Documentation\nfillPath()\nPaints the area within the current path, using the nonzero winding number rule.\neoFillPath()\nPaints the area within the current path, using the even-odd fill rule."
  },
  {
    "title": "drawPath(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455195-drawpath",
    "html": "Parameters\nmode\n\nA path drawing mode constant—CGPathDrawingMode.fill, CGPathDrawingMode.eoFill, CGPathDrawingMode.stroke, CGPathDrawingMode.fillStroke, or CGPathDrawingMode.eoFillStroke. For a discussion of these constants, see CGPath.\n\nDiscussion\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nDrawing the Current Graphics Path\nenum CGPathDrawingMode\nOptions for rendering a path.\nfunc fillPath(using: CGPathFillRule)\nPaints the area within the current path, as determined by the specified fill rule.\nfunc strokePath()\nPaints a line along the current path.\nRelated Documentation\neoFillPath()\nPaints the area within the current path, using the even-odd fill rule.\nfillPath()\nPaints the area within the current path, using the nonzero winding number rule."
  },
  {
    "title": "isMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1454229-ismask",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nA Boolean value that indicates whether the image passed in the image parameter is an image mask (true indicates that the image is an image mask).\n\nSee Also\nExamining an Image\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "setFillColorSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455151-setfillcolorspace",
    "html": "Parameters\ncolorspace\n\nThe new fill color space. The color space is retained; upon return, you may safely release it.\n\nDiscussion\n\nAs a side effect of this function, Core Graphics assigns an appropriate initial value to the fill color, based on the specified color space. To change this value, call setFillColor(_:). Note that the preferred API to use is now setFillColor(_:).\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "init(jpegDataProviderSource:decode:shouldInterpolate:intent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1454920-init",
    "html": "Parameters\nsource\n\nA data provider supplying JPEG-encoded data.\n\ndecode\n\nThe decode array for the image. Typically a decode array is unnecessary, and you should pass NULL.\n\nshouldInterpolate\n\nA Boolean value that specifies whether interpolation should occur. The interpolation setting specifies whether a pixel-smoothing algorithm should be applied to the image.\n\nintent\n\nA CGColorRenderingIntent constant that specifies how to handle colors that are not located within the gamut of the destination color space of a graphics context.\n\nReturn Value\n\nA new CGImage. You are responsible for releasing this object by calling CGImageRelease.\n\nSee Also\nCreating Images\ninit?(width: Int, height: Int, bitsPerComponent: Int, bitsPerPixel: Int, bytesPerRow: Int, space: CGColorSpace, bitmapInfo: CGBitmapInfo, provider: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)\nCreates a bitmap image from data supplied by a data provider.\ninit?(pngDataProviderSource: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)\nCreates a bitmap image using PNG-encoded data supplied by a data provider."
  },
  {
    "title": "setShadow(offset:blur:color:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455205-setshadow",
    "html": "Parameters\noffset\n\nSpecifies a translation in base-space.\n\nblur\n\nA non-negative number specifying the amount of blur.\n\ncolor\n\nSpecifies the color of the shadow, which may contain a non-opaque alpha value. If NULL, then shadowing is disabled.\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "addLine(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427159-addline",
    "html": "Parameters\npoint\n\nThe location, in user space coordinates, for the end of the new line segment.\n\nDiscussion\n\nAfter adding the line segment, the current point is set to the endpoint of the line segment.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "setFillColor(red:green:blue:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455624-setfillcolor",
    "html": "Parameters\nred\n\nThe red intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\ngreen\n\nThe green intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\nblue\n\nThe blue intensity value for the color to set. The DeviceRGB color space permits the specification of a value ranging from 0.0 (zero intensity) to 1.0 (full intensity).\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current fill color space to DeviceRGB.\n\nCore Graphics sets the current fill color to the value specified by the red, green, blue, and alpha parameters.\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "setFillColor(cyan:magenta:yellow:black:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454214-setfillcolor",
    "html": "Parameters\ncyan\n\nThe cyan intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nmagenta\n\nThe magenta intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nyellow\n\nThe yellow intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nblack\n\nThe black intensity value for the color to set. The DeviceCMYK color space permits the specification of a value ranging from 0.0 (does not absorb the secondary color) to 1.0 (fully absorbs the secondary color).\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nCore Graphics provides convenience functions for each of the device color spaces that allow you to set the fill or stroke color space and the fill or stroke color with one function call.\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current fill color space to DeviceCMYK.\n\nCore Graphics sets the current fill color to the value specified by the cyan, magenta, yellow, black, and alpha parameters.\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "setFillColor(gray:alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454255-setfillcolor",
    "html": "Parameters\ngray\n\nA value that specifies the desired gray level. The DeviceGray color space permits the specification of a value ranging from 0.0 (absolute black) to 1.0 (absolute white). Values outside this range are clamped to 0.0 or 1.0.\n\nalpha\n\nA value that specifies the opacity level. Values can range from 0.0 (transparent) to 1.0 (opaque). Values outside this range are clipped to 0.0 or 1.0.\n\nDiscussion\n\nWhen you call this function, two things happen:\n\nCore Graphics sets the current fill color space to DeviceGray.\n\nCore Graphics sets the current fill color to the value you specify in the gray and alpha parameters.\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "closePath() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454508-closepath",
    "html": "Parameters\nc\n\nA graphics context.\n\nDiscussion\n\nAppends a line from the current point to the starting point of the current subpath and ends the subpath.\n\nAfter closing the subpath, your application can begin a new subpath without first calling moveTo(x:y:). In this case, a new subpath is implicitly created with a starting and current point equal to the previous subpath’s starting point.\n\nIf the current path is empty or the current subpath is already closed, this function does nothing.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "setFillColor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454079-setfillcolor",
    "html": "Parameters\ncolor\n\nThe new fill color.\n\nSee Also\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context."
  },
  {
    "title": "convertToDeviceSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456017-converttodevicespace",
    "html": "Parameters\nrect\n\nThe rectangle, in user space coordinates, to transform.\n\nReturn Value\n\nThe rectangle in device space coordinates.\n\nDiscussion\n\nIn general affine transforms do not preserve rectangles. As a result, this function returns the smallest rectangle that contains the transformed corner points of the rectangle.\n\nSee Also\nConverting Between Coordinate Spaces\nvar userSpaceToDeviceSpaceTransform: CGAffineTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nfunc convertToDeviceSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from device space coordinates to user space coordinates.\nfunc convertToUserSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from device space coordinate to user space coordinates.\nfunc convertToDeviceSpace(CGSize) -> CGSize\nReturns a size that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGSize) -> CGSize\nReturns a size that is transformed from device space coordinates to user space coordinates."
  },
  {
    "title": "showTextAtPoint(x:y:string:length:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1586505-showtextatpoint",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nx\n\nA value for the x-coordinate (in user space) at which to display the text.\n\ny\n\nA value for the y-coordinate (in user space) at which to display the text.\n\nstring\n\nAn array of characters to draw.\n\nlength\n\nThe length of the array specified in the string parameter.\n\nDiscussion\n\nCore Graphics uses font data provided by the system to map each byte of the array through the encoding vector of the current font to obtain the glyph to display. Note that the font must have been set using selectFont(name:size:textEncoding:). Don’t use CGContextShowTextAtPoint in conjunction with setFont(_:).\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix."
  },
  {
    "title": "draw(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427141-draw",
    "html": "Parameters\nlayer\n\nThe layer whose contents you want to draw.\n\npoint\n\nThe location, in current user space coordinates, to use as the origin for the drawing.\n\nDiscussion\n\nCalling this method is equivalent to calling the draw(_:in:) method with a rectangle whose origin is the specified point and whose size matches that of the specified layer.\n\nSee Also\nDrawing Core Graphics Layers\nfunc draw(CGLayer, in: CGRect)\nDraws the contents of a layer object into the specified rectangle."
  },
  {
    "title": "setShouldSmoothFonts(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455816-setshouldsmoothfonts",
    "html": "Parameters\nshouldSmoothFonts\n\nA Boolean value that specifies whether to enable font smoothing.\n\nDiscussion\n\nThere are cases, such as rendering to a bitmap, when font smoothing is not appropriate and should be disabled. Note that some contexts (such as PostScript contexts) do not support font smoothing.\n\nThis parameter is part of the graphics state. Because of this, you use this when you want to temporarily override this setting in a drawing method.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "setShouldSubpixelQuantizeFonts(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455766-setshouldsubpixelquantizefonts",
    "html": "Parameters\nshouldSubpixelQuantizeFonts\n\nA Boolean value that specifies whether to enable subpixel quantization.\n\nDiscussion\n\nWhen enabled, the graphics context may quantize the subpixel positions of glyphs.\n\nThis parameter is part of the graphics state.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "setShouldSubpixelPositionFonts(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455671-setshouldsubpixelpositionfonts",
    "html": "Parameters\nshouldSubpixelPositionFonts\n\nA Boolean value that specifies whether to enable subpixel positioning.\n\nDiscussion\n\nWhen enabled, the graphics context may position glyphs on nonintegral pixel boundaries. When disabled, the position of glyphs are always forced to integral pixel boundaries.\n\nThis parameter is part of the graphics state.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "setTextDrawingMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454253-settextdrawingmode",
    "html": "Parameters\nmode\n\nA text drawing mode (such as CGTextDrawingMode.fill or CGTextDrawingMode.stroke) that specifies how Core Graphics renders individual glyphs in a graphics context. See CGTextDrawingMode for a complete list.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "setAllowsFontSubpixelQuantization(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456263-setallowsfontsubpixelquantizatio",
    "html": "Parameters\nallowsFontSubpixelQuantization\n\nA Boolean value that specifies whether subpixel quantization of glyphs is allowed in the specified context.\n\nDiscussion\n\nSub-pixel quantization is used by the graphics context if it is allowed, enabled, and if glyphs would be drawn at subpixel positions. For information on how to enable subpixel quantization, see the setShouldSubpixelQuantizeFonts(_:) function.\n\nThis parameter is not part of the graphics state.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "setAllowsFontSubpixelPositioning(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454942-setallowsfontsubpixelpositioning",
    "html": "Parameters\nallowsFontSubpixelPositioning\n\nA Boolean value that specifies whether subpixel positioning of glyphs is allowed in the specified context.\n\nDiscussion\n\nSub-pixel positioning is used by the graphics context if it is allowed, enabled, and if the font itself is antialiased when drawn. For information on how to enable subpixel positioning, see the setShouldSubpixelPositionFonts(_:) function.\n\nThis parameter is not part of the graphics state.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "CGTextDrawingMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgtextdrawingmode",
    "html": "Overview\n\nYou provide a text drawing mode constant to the function setTextDrawingMode(_:) to set the current text drawing mode for a graphics context. Text drawing modes determine how Core Graphics renders individual glyphs onscreen. For example, you can set a text drawing mode to draw text filled in or outlined (stroked) or both. You can also create special effects with the text clipping drawing modes, such as clipping an image to a glyph shape.\n\nTopics\nConstants\ncase fill\nPerform a fill operation on the text.\ncase stroke\nPerform a stroke operation on the text.\ncase fillStroke\nPerform fill, then stroke operations on the text.\ncase invisible\nDo not draw the text, but do update the text position.\ncase fillClip\nPerform a fill operation, then intersect the text with the current clipping path.\ncase strokeClip\nPerform a stroke operation, then intersect the text with the current clipping path.\ncase fillStrokeClip\nPerform fill then stroke operations, then intersect the text with the current clipping path.\ncase clip\nSpecifies to intersect the text with the current clipping path. This mode does not paint the text.\nRelationships\nConforms To\nSendable\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "setAllowsFontSmoothing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454767-setallowsfontsmoothing",
    "html": "Parameters\nallowsFontSmoothing\n\nA Boolean value that specifies whether font smoothing is allowed in the specified context.\n\nDiscussion\n\nFont are smoothed if they are antialiased when drawn and if font smoothing is both allowed and enabled. For information on how to enable font smoothing, see the setShouldSmoothFonts(_:) function. It is not usually necessary to make changes to both parameters at the same time; either can be used to disable font smoothing.\n\nThis parameter is not part of the graphics state.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "setFontSize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456426-setfontsize",
    "html": "Parameters\nsize\n\nA font size, expressed in text space units.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "selectFont(name:size:textEncoding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1586511-selectfont",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nname\n\nA null-terminated string that contains the PostScript name of the font to set.\n\nsize\n\nA value that specifies the font size to set, in text space units.\n\ntextEncoding\n\nA value that specifies the encoding used for the font. For a description of the available values, see CGTextEncoding.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "setCharacterSpacing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454786-setcharacterspacing",
    "html": "Parameters\nspacing\n\nA value that represents the amount of additional space to place between glyphs, in text space coordinates.\n\nDiscussion\n\nCore Graphics adds the additional space to the advance between the origin of one character and the origin of the next character. For information about the text coordinate system, see CGContextSetTextMatrix(_:_:).\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "textPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454687-textposition",
    "html": "Parameters\nc\n\nThe graphics context from which to obtain the current text position.\n\nReturn Value\n\nReturns a point that specifies the x and y values at which text is to be drawn, in user space coordinates.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "setFont(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454950-setfont",
    "html": "Parameters\nfont\n\nA font.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify.\nRelated Documentation\nCGFontCreateWithPlatformFont\nCreates a font object from an Apple Type Services (ATS) font."
  },
  {
    "title": "textMatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456154-textmatrix",
    "html": "Parameters\nc\n\nThe graphics context for which to obtain the text matrix.\n\nReturn Value\n\nThe current text matrix.\n\nSee Also\nDrawing Text\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "drawRadialGradient(_:startCenter:startRadius:endCenter:endRadius:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455923-drawradialgradient",
    "html": "Parameters\ngradient\n\nA CGGradient object.\n\nstartCenter\n\nThe coordinate that defines the center of the starting circle.\n\nstartRadius\n\nThe radius of the starting circle.\n\nendCenter\n\nThe coordinate that defines the center of the ending circle.\n\nendRadius\n\nThe radius of the ending circle.\n\noptions\n\nOption flags (drawsBeforeStartLocation or drawsAfterEndLocation) that control whether the gradient is drawn before the starting circle or after the ending circle.\n\nDiscussion\n\nThe color at location 0 in the CGGradient object is mapped to the circle defined by startCenter and startRadius. The color at location 1 in the CGGradient object is mapped to the circle defined by endCenter and endRadius. Colors are linearly interpolated between the starting and ending circles based on the location values of the gradient. The option flags control whether the gradient is drawn before the start point or after the end point.\n\nSee Also\nDrawing Gradients and Shadings\nfunc drawLinearGradient(CGGradient, start: CGPoint, end: CGPoint, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the line defined by the provided starting and ending points.\nstruct CGGradientDrawingOptions\nDrawing locations for gradients.\nfunc drawShading(CGShading)\nFills the clipping path of a context with the specified shading."
  },
  {
    "title": "drawShading(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456643-drawshading",
    "html": "Parameters\nshading\n\nA shading object. The shading object is retained; upon return, you may safely release it.\n\nDiscussion\n\nThe preferred way to draw gradients is to use a CGGradient object. See CGGradient.\n\nSee Also\nDrawing Gradients and Shadings\nfunc drawLinearGradient(CGGradient, start: CGPoint, end: CGPoint, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the line defined by the provided starting and ending points.\nfunc drawRadialGradient(CGGradient, startCenter: CGPoint, startRadius: CGFloat, endCenter: CGPoint, endRadius: CGFloat, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the area defined by the provided starting and ending circles.\nstruct CGGradientDrawingOptions\nDrawing locations for gradients."
  },
  {
    "title": "CGGradientDrawingOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggradientdrawingoptions",
    "html": "Topics\nConstants\nstatic var drawsBeforeStartLocation: CGGradientDrawingOptions\nThe fill should extend beyond the starting location. The color that extends beyond the starting point is the solid color defined by the CGGradient object to be at location 0.\nstatic var drawsAfterEndLocation: CGGradientDrawingOptions\nThe fill should extend beyond the ending location. The color that extends beyond the ending point is the solid color defined by the CGGradient object to be at location 1.\nInitializers\ninit(rawValue: UInt32)\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nDrawing Gradients and Shadings\nfunc drawLinearGradient(CGGradient, start: CGPoint, end: CGPoint, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the line defined by the provided starting and ending points.\nfunc drawRadialGradient(CGGradient, startCenter: CGPoint, startRadius: CGFloat, endCenter: CGPoint, endRadius: CGFloat, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the area defined by the provided starting and ending circles.\nfunc drawShading(CGShading)\nFills the clipping path of a context with the specified shading."
  },
  {
    "title": "clip(to:mask:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456497-clip",
    "html": "Parameters\nrect\n\nThe rectangle to map the mask parameter to.\n\nmask\n\nAn image or an image mask. If mask is an image, then it must be in the DeviceGray color space, may not have an alpha component, and may not be masked by an image mask or masking color.\n\nDiscussion\n\nIf the mask parameter is an image mask, then Core Graphics clips in a manner identical to the behavior seen with the draw(in:image:) function —the mask indicates an area to be left unchanged when drawing. The source samples of the image mask determine which points of the clipping area are changed, acting as an \"inverse alpha\" value. If the value of a source sample in the image mask is S, then the corresponding point in the current clipping area is multiplied by an alpha value of (1–S). For example, if S is 1 then the point in the clipping area becomes transparent. If S is 0, the point in the clipping area is unchanged.\n\nIf the mask parameter is an image, then mask acts like an alpha mask and is blended with the current clipping area. The source samples of mask determine which points of the clipping area are changed. If the value of the source sample in mask is S, then the corresponding point in the current clipping area is multiplied by an alpha of S. For example, if S is 0, then the point in the clipping area becomes transparent. If S is 1, the point in the clipping area is unchanged.\n\nSee Also\nWorking with the Current Clipping Path\nfunc clip(using: CGPathFillRule)\nModifies the current clipping path.\nfunc clip(to: CGRect)\nSets the clipping path to the intersection of the current clipping path with the area defined by the specified rectangle.\nfunc clip(to: [CGRect])\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles.\nvar boundingBoxOfClipPath: CGRect\nReturns the bounding box of a clipping path."
  },
  {
    "title": "drawLinearGradient(_:start:end:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454782-drawlineargradient",
    "html": "Parameters\ngradient\n\nA gradient object.\n\nstartPoint\n\nThe coordinate that defines the starting point of the gradient.\n\nendPoint\n\nThe coordinate that defines the ending point of the gradient.\n\noptions\n\nOption flags (drawsBeforeStartLocation or drawsAfterEndLocation) that control whether the fill is extended beyond the starting or ending point.\n\nDiscussion\n\nThe color at location 0 in the CGGradient object is mapped to the starting point. The color at location 1 in the CGGradient object is mapped to the ending point. Colors are linearly interpolated between these two points based on the location values of the gradient. The option flags control whether the gradient is drawn before the start point or after the end point.\n\nSee Also\nDrawing Gradients and Shadings\nfunc drawRadialGradient(CGGradient, startCenter: CGPoint, startRadius: CGFloat, endCenter: CGPoint, endRadius: CGFloat, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the area defined by the provided starting and ending circles.\nstruct CGGradientDrawingOptions\nDrawing locations for gradients.\nfunc drawShading(CGShading)\nFills the clipping path of a context with the specified shading."
  },
  {
    "title": "alphaInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454960-alphainfo",
    "html": "Parameters\ncontext\n\nA bitmap context.\n\nReturn Value\n\nA bitmap information constant. If the specified context is not a bitmap context, CGImageAlphaInfo.none is returned.\n\nDiscussion\n\nEvery bitmap context contains an attribute that specifies whether the bitmap contains an alpha component, and how it is generated. The alpha component determines the opacity of a pixel when it is drawn.\n\nSee Also\nManaging a Bitmap Graphics Context\nvar bitmapInfo: CGBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nvar bitsPerComponent: Int\nReturns the bits per component of a bitmap context.\nvar bitsPerPixel: Int\nReturns the bits per pixel of a bitmap context.\nvar bytesPerRow: Int\nReturns the bytes per row of a bitmap context.\nvar colorSpace: CGColorSpace?\nReturns the color space of a bitmap context.\nvar data: UnsafeMutableRawPointer?\nReturns a pointer to the image data associated with a bitmap context.\nvar height: Int\nReturns the height in pixels of a bitmap context.\nvar width: Int\nReturns the width in pixels of a bitmap context.\nfunc makeImage() -> CGImage?\nCreates and returns a CGImage from the pixel data in a bitmap graphics context."
  },
  {
    "title": "setPatternPhase(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455334-setpatternphase",
    "html": "Parameters\nphase\n\nA pattern phase, specified in user space.\n\nDiscussion\n\nThe pattern phase is a translation that Core Graphics applies prior to drawing a pattern in the context. The pattern phase is part of the graphics state of a context, and the default pattern phase is (0,0). Setting the pattern phase has the effect of temporarily changing the pattern matrix of any pattern you draw. For example, setting the context’s pattern phase to (2,3) has the effect of moving the start of pattern cell tiling to the point (2,3) in default user space.\n\nSee Also\nSetting Path Drawing Options\nfunc setAllowsAntialiasing(Bool)\nSets whether or not to allow antialiasing for a graphics context.\nfunc setFlatness(CGFloat)\nSets the accuracy of curved paths in a graphics context.\nfunc setLineCap(CGLineCap)\nSets the style for the endpoints of lines drawn in a graphics context.\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\nSets the pattern for drawing dashed lines.\nfunc setLineJoin(CGLineJoin)\nSets the style for the joins of connected lines in a graphics context.\nfunc setLineWidth(CGFloat)\nSets the line width for a graphics context.\nfunc setMiterLimit(CGFloat)\nSets the miter limit for the joins of connected lines in a graphics context.\nfunc setFillPattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the fill pattern in the specified graphics context.\nfunc setShouldAntialias(Bool)\nSets antialiasing on or off for a graphics context."
  },
  {
    "title": "addArc(tangent1End:tangent2End:radius:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427124-addarc",
    "html": "Parameters\ntangent1End\n\nThe end point, in user space coordinates, for the first tangent line to be used in constructing the arc. (The start point for this tangent line is the path's current point.)\n\ntangent2End\n\nThe end point, in user space coordinates, for the second tangent line to be used in constructing the arc. (The start point for this tangent line is the tangent1End point.)\n\nradius\n\nThe radius of the arc, in user space coordinates.\n\ntransform\n\nAn affine transform to apply to the arc before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nThis method calculates two tangent lines—the first from the current point to the tangent1End point, and the second from the tangent1End point to the tangent2End point—then calculates the start and end points for a circular arc of the specified radius such that the arc is tangent to both lines. Finally, this method approximates that arc with a sequence of cubic Bézier curves and appends those curves to the path.\n\nIf the starting point of the arc (that is, the point where a circle of the specified radius must meet the first tangent line in order to also be tangent to the second line) is not the current point, this method appends a straight line segment from the current point to the starting point of the arc.\n\nThe ending point of the arc (that is, the point where a circle of the specified radius must meet the second tangent line in order to also be tangent to the first line) becomes the new current point of the path.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "setFillPattern(_:colorComponents:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456334-setfillpattern",
    "html": "Parameters\npattern\n\nA fill pattern. The object is retained; upon return, you may safely release it.\n\ncomponents\n\nIf the pattern is an uncolored (or a masking) pattern, pass an array of intensity values that specify the color to use when the pattern is painted. The number of array elements must equal the number of components in the base space of the fill pattern color space, plus an additional component for the alpha value.\n\nIf the pattern is a color pattern, pass an alpha value.\n\nDiscussion\n\nThe current fill color space must be a pattern color space. Otherwise, the result of calling this function is undefined. If you want to set a fill color, not a pattern, use setFillColor(_:).\n\nSee Also\nSetting Path Drawing Options\nfunc setAllowsAntialiasing(Bool)\nSets whether or not to allow antialiasing for a graphics context.\nfunc setFlatness(CGFloat)\nSets the accuracy of curved paths in a graphics context.\nfunc setLineCap(CGLineCap)\nSets the style for the endpoints of lines drawn in a graphics context.\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\nSets the pattern for drawing dashed lines.\nfunc setLineJoin(CGLineJoin)\nSets the style for the joins of connected lines in a graphics context.\nfunc setLineWidth(CGFloat)\nSets the line width for a graphics context.\nfunc setMiterLimit(CGFloat)\nSets the miter limit for the joins of connected lines in a graphics context.\nfunc setPatternPhase(CGSize)\nSets the pattern phase of a context.\nfunc setShouldAntialias(Bool)\nSets antialiasing on or off for a graphics context."
  },
  {
    "title": "setLineJoin(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455973-setlinejoin",
    "html": "Parameters\njoin\n\nA line join value—CGLineJoin.miter (the default), CGLineJoin.round, or CGLineJoin.bevel. See CGPath.\n\nSee Also\nSetting Path Drawing Options\nfunc setAllowsAntialiasing(Bool)\nSets whether or not to allow antialiasing for a graphics context.\nfunc setFlatness(CGFloat)\nSets the accuracy of curved paths in a graphics context.\nfunc setLineCap(CGLineCap)\nSets the style for the endpoints of lines drawn in a graphics context.\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\nSets the pattern for drawing dashed lines.\nfunc setLineWidth(CGFloat)\nSets the line width for a graphics context.\nfunc setMiterLimit(CGFloat)\nSets the miter limit for the joins of connected lines in a graphics context.\nfunc setPatternPhase(CGSize)\nSets the pattern phase of a context.\nfunc setFillPattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the fill pattern in the specified graphics context.\nfunc setShouldAntialias(Bool)\nSets antialiasing on or off for a graphics context."
  },
  {
    "title": "setLineWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455270-setlinewidth",
    "html": "Parameters\nwidth\n\nThe new line width to use, in user space units. The value must be greater than 0.\n\nDiscussion\n\nThe default line width is 1 unit. When stroked, the line straddles the path, with half of the total width on either side.\n\nSee Also\nSetting Path Drawing Options\nfunc setAllowsAntialiasing(Bool)\nSets whether or not to allow antialiasing for a graphics context.\nfunc setFlatness(CGFloat)\nSets the accuracy of curved paths in a graphics context.\nfunc setLineCap(CGLineCap)\nSets the style for the endpoints of lines drawn in a graphics context.\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\nSets the pattern for drawing dashed lines.\nfunc setLineJoin(CGLineJoin)\nSets the style for the joins of connected lines in a graphics context.\nfunc setMiterLimit(CGFloat)\nSets the miter limit for the joins of connected lines in a graphics context.\nfunc setPatternPhase(CGSize)\nSets the pattern phase of a context.\nfunc setFillPattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the fill pattern in the specified graphics context.\nfunc setShouldAntialias(Bool)\nSets antialiasing on or off for a graphics context."
  },
  {
    "title": "setMiterLimit(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456499-setmiterlimit",
    "html": "Parameters\nlimit\n\nThe miter limit to use.\n\nDiscussion\n\nIf the current line join style is set to CGLineJoin.miter, the miter limit determines whether the lines should be joined with a bevel instead of a miter. The length of the miter is divided by the line width. If the result is greater than the miter limit, the style is converted to a bevel.\n\nSee Also\nSetting Path Drawing Options\nfunc setAllowsAntialiasing(Bool)\nSets whether or not to allow antialiasing for a graphics context.\nfunc setFlatness(CGFloat)\nSets the accuracy of curved paths in a graphics context.\nfunc setLineCap(CGLineCap)\nSets the style for the endpoints of lines drawn in a graphics context.\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\nSets the pattern for drawing dashed lines.\nfunc setLineJoin(CGLineJoin)\nSets the style for the joins of connected lines in a graphics context.\nfunc setLineWidth(CGFloat)\nSets the line width for a graphics context.\nfunc setPatternPhase(CGSize)\nSets the pattern phase of a context.\nfunc setFillPattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the fill pattern in the specified graphics context.\nfunc setShouldAntialias(Bool)\nSets antialiasing on or off for a graphics context."
  },
  {
    "title": "addRelativeArc(center:radius:startAngle:delta:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427147-addrelativearc",
    "html": "Parameters\ncenter\n\nThe center of the arc, in user space coordinates.\n\nradius\n\nThe radius of the arc, in user space coordinates.\n\nstartAngle\n\nThe angle to the starting point of the arc, measured in radians from the positive x-axis.\n\ndelta\n\nThe difference, measured in radians, between the starting angle and ending angle of the arc. A positive value creates a counter-clockwise arc (in user space coordinates), and vice versa.\n\ntransform\n\nAn affine transform to apply to the arc before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nThis method calculates starting and ending points using the radius and angles you specify, uses a sequence of cubic Bézier curves to approximate a segment of a circle between those points, and then appends those curves to the path.\n\nThe delta parameter determines both the length of the arc the direction in which the arc is created; the actual direction of the final path is dependent on the transform parameter and the current transform of a context where the path is drawn. In a flipped coordinate system (the default for UIView drawing methods in iOS), specifying a clockwise arc results in a counterclockwise arc after the transformation is applied.\n\nIf the path already contains a subpath, this method adds a line connecting the current point to the starting point of the arc. If the current path is empty, this method creates a new subpath whose starting point is the starting point of the arc. The ending point of the arc becomes the new current point of the path.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "addEllipse(in:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427120-addellipse",
    "html": "Parameters\nrect\n\nA rectangle that defines the area for the ellipse to fit in.\n\ntransform\n\nAn affine transform to apply to the ellipse before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nThe ellipse is approximated by a sequence of Bézier curves. Its center is the midpoint of the rectangle defined by the rect parameter. If the rectangle is square, then the ellipse is circular with a radius equal to one-half the width (or height) of the rectangle. If the rect parameter specifies a rectangular shape, then the major and minor axes of the ellipse are defined by the width and height of the rectangle.\n\nThe ellipse forms a complete subpath of the path—that is, the ellipse drawing starts with a move-to operation and ends with a close-subpath operation, with all moves oriented in the clockwise direction.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "beginTransparencyLayer(in:auxiliaryInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454368-begintransparencylayer",
    "html": "Parameters\nrect\n\nThe rectangle, specified in user space, that bounds the transparency layer.\n\nauxiliaryInfo\n\nA dictionary that specifies any additional information, or NULL.\n\nDiscussion\n\nThis function is identical to beginTransparencyLayer(auxiliaryInfo:) except that the content of the transparency layer is within the bounds of the provided rectangle.\n\nSee Also\nWorking with Transparency Layers\nfunc beginTransparencyLayer(auxiliaryInfo: CFDictionary?)\nBegins a transparency layer.\nfunc endTransparencyLayer()\nEnds a transparency layer."
  },
  {
    "title": "boundingBoxOfClipPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455387-boundingboxofclippath",
    "html": "Parameters\nc\n\nThe graphics context to modify.\n\nReturn Value\n\nThe bounding box of the clipping path, specified in user space.\n\nDiscussion\n\nThe bounding box is the smallest rectangle completely enclosing all points in the clipping path, including control points for any Bezier curves in the path.\n\nSee Also\nWorking with the Current Clipping Path\nfunc clip(using: CGPathFillRule)\nModifies the current clipping path.\nfunc clip(to: CGRect)\nSets the clipping path to the intersection of the current clipping path with the area defined by the specified rectangle.\nfunc clip(to: [CGRect])\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles.\nfunc clip(to: CGRect, mask: CGImage)\nMaps a mask into the specified rectangle and intersects it with the current clipping area of the graphics context."
  },
  {
    "title": "beginTransparencyLayer(auxiliaryInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456011-begintransparencylayer",
    "html": "Parameters\nauxiliaryInfo\n\nA dictionary that specifies any additional information, or NULL.\n\nDiscussion\n\nUntil a corresponding call to endTransparencyLayer(), all subsequent drawing operations in the specified context are composited into a fully transparent backdrop (which is treated as a separate destination buffer from the context).\n\nAfter a call to CGContextEndTransparencyLayer, the result is composited into the context using the global alpha and shadow state of the context. This operation respects the clipping region of the context.\n\nAfter a call to this function, all of the parameters in the graphics state remain unchanged with the exception of the following:\n\nThe global alpha is set to 1.\n\nThe shadow is turned off.\n\nEnding the transparency layer restores these parameters to their previous values. Core Graphics maintains a transparency layer stack for each context, and transparency layers may be nested.\n\nTip\n\nFor best performance, make sure that you set the smallest possible clipping area for the objects in the transparency layer prior to calling CGContextBeginTransparencyLayer.\n\nSee Also\nWorking with Transparency Layers\nfunc beginTransparencyLayer(in: CGRect, auxiliaryInfo: CFDictionary?)\nBegins a transparency layer whose contents are bounded by the specified rectangle.\nfunc endTransparencyLayer()\nEnds a transparency layer."
  },
  {
    "title": "bytesPerRow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455425-bytesperrow",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe number of bytes used in memory for each row of the specified bitmap image (or image mask).\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "mutableCopy() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath/1411196-mutablecopy",
    "html": "Parameters\npath\n\nThe path to copy.\n\nReturn Value\n\nA new, mutable, copy of the specified path. You are responsible for releasing this object.\n\nDiscussion\n\nYou can modify a mutable graphics path by calling the various path geometry functions, such as addArc(_:x:y:radius:startAngle:endAngle:clockwise:), addLineTo(_:x:y:), and moveTo(_:x:y:).\n\nSee Also\nCopying a Graphics Path\nfunc copy() -> CGPath?\nCreates an immutable copy of a graphics path.\nfunc copy(using: UnsafePointer<CGAffineTransform>?) -> CGPath?\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nfunc copy(dashingWithPhase: CGFloat, lengths: [CGFloat], transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a dashed stroke.\nfunc copy(strokingWithWidth: CGFloat, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: CGFloat, transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a solid stroke.\nfunc mutableCopy(using: UnsafePointer<CGAffineTransform>?) -> CGMutablePath?\nCreates a mutable copy of a graphics path transformed by a transformation matrix."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/1411209-init",
    "html": "Return Value\n\nA new mutable path. You are responsible for releasing this object."
  },
  {
    "title": "init(maskWidth:height:bitsPerComponent:bitsPerPixel:bytesPerRow:provider:decode:shouldInterpolate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455089-init",
    "html": "Parameters\nwidth\n\nThe width, in pixels, of the required image mask.\n\nheight\n\nThe height, in pixels, of the required image mask.\n\nbitsPerComponent\n\nThe number of significant masking bits in a source pixel. For example, if the source image is an 8-bit mask, you specify 8 bits per component. Image masks must be 1, 2, 4, or 8 bits per component.\n\nbitsPerPixel\n\nThe total number of bits in a source pixel.\n\nbytesPerRow\n\nThe number of bytes to use for each horizontal row of the image mask.\n\nprovider\n\nThe data source for the image mask.\n\ndecode\n\nTypically a decode array is unnecessary, and you should pass NULL.\n\nshouldInterpolate\n\nA Boolean value that specifies whether an edge-smoothing algorithm is applied to the image mask.\n\nReturn Value\n\nA bitmap image mask. You are responsible for releasing this object by calling CGImageRelease.\n\nDiscussion\n\nA bitmap image mask is used the same way an artist uses a silkscreen, or a sign painter uses a stencil. The bitmap represents a mask through which a color is transferred. The bitmap itself does not have a color. It gets its color from the fill color currently set in the graphics state.\n\nWhen you draw into a context with a bitmap image mask, the mask determines where and how the current fill color is applied to the image rectangle. Each sample value in the mask specifies how much of the current fill color is masked out at a specific location. Effectively, the sample value specifies the opacity of the mask. Larger values represent greater opacity and hence less color applied to the page.\n\nImage masks must be 1, 2, 4, or 8 bits per component. For a 1-bit mask, a sample value of 1 specifies sections of the mask that are masked out; these sections block the current fill color. A sample value of 0 specifies sections of the mask that are not masked out; these sections show the current fill color of the graphics state when the mask is painted. You can think of the sample values as an inverse alpha. That is, a value of 1 is transparent and 0 is opaque.\n\nFor image masks that are 2, 4, or 8 bits per component, each component is mapped to a range of 0 to 1 by scaling using this formula:\n\n1/(2^bits per component – 1)\n\nFor example, a 4-bit mask has values that range from 0 to 15. These values are scaled by 1/15 so that each component ranges from 0 to 1. Component values that rescale to 0 or 1 behave the same way as they behave for 1-bit image masks. Values that scale to between 0 and 1 act as an inverse alpha. That is, the fill color is painted as if it has an alpha value of (1 – MaskSampleValue). For example, if the sample value of an 8-bit mask scales to 0.8, the current fill color is painted as if it has an alpha value of 0.2, that is (1–0.8)."
  },
  {
    "title": "copy(colorSpace:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455355-copy",
    "html": "Parameters\ncolorspace\n\nThe destination color space. The number of components in this color space must be the same as the number in the specified image.\n\nReturn Value\n\nA new CGImage that is a copy of the image passed as the image parameter but with its color space replaced by that specified by the colorspace parameter. Returns NULL if image is an image mask, or if the number of components of colorspace is not the same as the number of components of the colorspace of image. You are responsible for releasing this object using CGImageRelease.\n\nSee Also\nCopying an Image\nfunc copy() -> CGImage?\nCreates a copy of a bitmap image."
  },
  {
    "title": "copy() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455615-copy",
    "html": "Parameters\nimage\n\nThe image to copy.\n\nReturn Value\n\nAn copy of the image.\n\nSee Also\nCopying an Image\nfunc copy(colorSpace: CGColorSpace) -> CGImage?\nCreates a copy of a bitmap image, replacing its colorspace."
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cglayer/1450888-typeid",
    "html": "Return Value\n\nThe type identifier for CGLayer objects.\n\nDiscussion\n\nA type identifier is an integer that identifies the opaque type to which a Core Foundation object belongs. You use type IDs in various contexts, such as when you are operating on heterogeneous collections."
  },
  {
    "title": "width | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1456148-width",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe width, in pixels, of the specified bitmap image (or image mask).\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "CGInterpolationQuality | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cginterpolationquality",
    "html": "Overview\n\nYou use the function CGContextSetInterpolationQuality(_:_:) to set the interpolation quality in a graphics context.\n\nTopics\nConstants\ncase `default`\nThe default level of quality.\ncase none\nNo interpolation.\ncase low\nA low level of interpolation quality. This setting may speed up image rendering.\ncase medium\nA medium level of interpolation quality. This setting is slower than the low setting but faster than the high setting.\ncase high\nA high level of interpolation quality. This setting may slow down image rendering.\nRelationships\nConforms To\nSendable\nSee Also\nDrawing Images and PDF Content\nfunc draw(CGImage, in: CGRect, byTiling: Bool)\nDraws an image in the specified area.\nfunc drawPDFPage(CGPDFPage)\nDraws the content of a PDF page into the current graphics context.\nvar interpolationQuality: CGInterpolationQuality\nReturns the current level of interpolation quality for a graphics context."
  },
  {
    "title": "stroke(_:width:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454679-stroke",
    "html": "Parameters\nrect\n\nA rectangle, in user space coordinates.\n\nwidth\n\nA value, in user space units, that is greater than zero. This value does not affect the line width values in the current graphics state.\n\nDiscussion\n\nAside from the line width value, Core Graphics uses the current attributes of the graphics state (such as stroke color) to paint the line. The line straddles the path, with half of the total width on either side.\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nDrawing Shapes\nfunc clear(CGRect)\nPaints a transparent rectangle.\nfunc fill(CGRect)\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nfunc fill([CGRect])\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nfunc fillEllipse(in: CGRect)\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nfunc stroke(CGRect)\nPaints a rectangular path.\nfunc strokeEllipse(in: CGRect)\nStrokes an ellipse that fits inside the specified rectangle.\nfunc strokeLineSegments(between: [CGPoint])\nStrokes a sequence of line segments."
  },
  {
    "title": "clear(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456457-clear",
    "html": "Parameters\nrect\n\nThe rectangle, in user space coordinates.\n\nDiscussion\n\nIf the provided context is a window or bitmap context, Core Graphics clears the rectangle. For other context types, Core Graphics fills the rectangle in a device-dependent manner. However, you should not use this function in contexts other than window or bitmap contexts.\n\nSee Also\nDrawing Shapes\nfunc fill(CGRect)\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nfunc fill([CGRect])\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nfunc fillEllipse(in: CGRect)\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nfunc stroke(CGRect)\nPaints a rectangular path.\nfunc stroke(CGRect, width: CGFloat)\nPaints a rectangular path, using the specified line width.\nfunc strokeEllipse(in: CGRect)\nStrokes an ellipse that fits inside the specified rectangle.\nfunc strokeLineSegments(between: [CGPoint])\nStrokes a sequence of line segments."
  },
  {
    "title": "strokeEllipse(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455774-strokeellipse",
    "html": "Parameters\nrect\n\nA rectangle that defines the area for the ellipse to fit in.\n\nDiscussion\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nDrawing Shapes\nfunc clear(CGRect)\nPaints a transparent rectangle.\nfunc fill(CGRect)\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nfunc fill([CGRect])\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nfunc fillEllipse(in: CGRect)\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nfunc stroke(CGRect)\nPaints a rectangular path.\nfunc stroke(CGRect, width: CGFloat)\nPaints a rectangular path, using the specified line width.\nfunc strokeLineSegments(between: [CGPoint])\nStrokes a sequence of line segments."
  },
  {
    "title": "strokeLineSegments(between:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427116-strokelinesegments",
    "html": "Parameters\npoints\n\nAn array of points, organized as pairs—the starting point of a line segment followed by the ending point of a line segment. For example, the first point in the array specifies the starting position of the first line, the second point specifies the ending position of the first line, the third point specifies the starting position of the second line, and so forth.\n\nDiscussion\n\nThis function creates a new path, adds the individual line segments to the path, and then strokes the path. The current path is cleared as a side effect of calling this function.\n\nSee Also\nDrawing Shapes\nfunc clear(CGRect)\nPaints a transparent rectangle.\nfunc fill(CGRect)\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nfunc fill([CGRect])\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nfunc fillEllipse(in: CGRect)\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nfunc stroke(CGRect)\nPaints a rectangular path.\nfunc stroke(CGRect, width: CGFloat)\nPaints a rectangular path, using the specified line width.\nfunc strokeEllipse(in: CGRect)\nStrokes an ellipse that fits inside the specified rectangle."
  },
  {
    "title": "drawPDFPage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456255-drawpdfpage",
    "html": "Parameters\npage\n\nA Core Graphics PDF page.\n\nDiscussion\n\nThis function works in conjunction with the CGPDFPage type to draw individual PDF pages into a context.\n\nSee Also\nDrawing Images and PDF Content\nfunc draw(CGImage, in: CGRect, byTiling: Bool)\nDraws an image in the specified area.\nvar interpolationQuality: CGInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nenum CGInterpolationQuality\nLevels of interpolation quality for rendering an image."
  },
  {
    "title": "fill(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427149-fill",
    "html": "Parameters\nrects\n\nAn array of rectangles, in user space coordinates.\n\nDiscussion\n\nThe current path is cleared as a side effect of calling this function.\n\nSee Also\nDrawing Shapes\nfunc clear(CGRect)\nPaints a transparent rectangle.\nfunc fill(CGRect)\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nfunc fillEllipse(in: CGRect)\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nfunc stroke(CGRect)\nPaints a rectangular path.\nfunc stroke(CGRect, width: CGFloat)\nPaints a rectangular path, using the specified line width.\nfunc strokeEllipse(in: CGRect)\nStrokes an ellipse that fits inside the specified rectangle.\nfunc strokeLineSegments(between: [CGPoint])\nStrokes a sequence of line segments."
  },
  {
    "title": "bitsPerPixel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1454599-bitsperpixel",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe number of bits used in memory for each pixel of the specified bitmap image (or image mask).\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "height | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455829-height",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe height in pixels of the bitmap image (or image mask).\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "isPathEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455772-ispathempty",
    "html": "Parameters\nc\n\nThe graphics context containing the path to examine.\n\nReturn Value\n\nReturns 1 if the context’s path contains no subpaths, otherwise returns 0.\n\nSee Also\nExamining the Current Graphics Path\nvar boundingBoxOfPath: CGRect\nReturns the smallest rectangle that contains the current path.\nvar currentPointOfPath: CGPoint\nReturns the current point in a non-empty path.\nfunc pathContains(CGPoint, mode: CGPathDrawingMode) -> Bool\nChecks to see whether the specified point is contained in the current path."
  },
  {
    "title": "currentPointOfPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454788-currentpointofpath",
    "html": "Parameters\nc\n\nThe graphics context containing the path to examine.\n\nReturn Value\n\nThe location, in user space, of the current point in the context’s path. If there is no path, the function returns CGPointZero.\n\nSee Also\nExamining the Current Graphics Path\nvar boundingBoxOfPath: CGRect\nReturns the smallest rectangle that contains the current path.\nvar isPathEmpty: Bool\nIndicates whether the current path contains any subpaths.\nfunc pathContains(CGPoint, mode: CGPathDrawingMode) -> Bool\nChecks to see whether the specified point is contained in the current path."
  },
  {
    "title": "boundingBoxOfPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454577-boundingboxofpath",
    "html": "Parameters\nc\n\nThe graphics context, containing a path, to examine.\n\nReturn Value\n\nThe dimensions and location, in user space, of the bounding box of the path. If there is no path, the function returns CGRectNull.\n\nDiscussion\n\nThe bounding box is the smallest rectangle completely enclosing all points in a path, including control points for Bézier cubic and quadratic curves.\n\nSee Also\nExamining the Current Graphics Path\nvar currentPointOfPath: CGPoint\nReturns the current point in a non-empty path.\nvar isPathEmpty: Bool\nIndicates whether the current path contains any subpaths.\nfunc pathContains(CGPoint, mode: CGPathDrawingMode) -> Bool\nChecks to see whether the specified point is contained in the current path."
  },
  {
    "title": "path | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455397-path",
    "html": "Parameters\ncontext\n\nA graphics context whose current path is not empty.\n\nReturn Value\n\nA path object containing the current path data.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "addArc(center:radius:startAngle:endAngle:clockwise:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427129-addarc",
    "html": "Parameters\ncenter\n\nThe center of the arc, in user space coordinates.\n\nradius\n\nThe radius of the arc, in user space coordinates.\n\nstartAngle\n\nThe angle to the starting point of the arc, measured in radians from the positive x-axis.\n\nendAngle\n\nThe angle to the end point of the arc, measured in radians from the positive x-axis.\n\nclockwise\n\ntrue to make a clockwise arc; false to make a counterclockwise arc.\n\nDiscussion\n\nThis method calculates starting and ending points using the radius and angles you specify, uses a sequence of cubic Bézier curves to approximate a segment of a circle between those points, and then appends those curves to the current path.\n\nThe clockwise parameter determines the direction in which the arc is created; the actual direction of the final path is dependent on the current transformation matrix of the graphics context. In a flipped coordinate system (the default for UIView drawing methods in iOS), specifying a clockwise arc results in a counterclockwise arc after the transformation is applied.\n\nIf the current path already contains a subpath, this method adds a line connecting the current point to the starting point of the arc. If the current path is empty, his method creates a new subpath whose starting point is the starting point of the arc. The ending point of the arc becomes the new current point of the path.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "addQuadCurve(to:control:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427151-addquadcurve",
    "html": "Parameters\nend\n\nThe point, in user space coordinates, at which to end the curve.\n\ncontrol\n\nThe control point of the curve, in user space coordinates.\n\nDiscussion\n\nThis method constructs a curve starting from the path’s current point and ending at the specified end point, with curvature defined by the control point. After this method appends that curve to the current path, the end point of the curve becomes the path’s current point.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "addArc(tangent1End:tangent2End:radius:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427122-addarc",
    "html": "Parameters\ntangent1End\n\nThe end point, in user space coordinates, for the first tangent line to be used in constructing the arc. (The start point for this tangent line is the path's current point.)\n\ntangent2End\n\nThe end point, in user space coordinates, for the second tangent line to be used in constructing the arc. (The start point for this tangent line is the tangent1End point.)\n\nradius\n\nThe radius of the arc, in user space coordinates.\n\nDiscussion\n\nThis method calculates two tangent lines—the first from the current point to the tangent1End point, and the second from the tangent1End point to the tangent2End point—then calculates the start and end points for a circular arc of the specified radius such that the arc is tangent to both lines. Finally, this method approximates that arc with a sequence of cubic Bézier curves and appends those curves to the current path.\n\nIf the starting point of the arc (that is, the point where a circle of the specified radius must meet the first tangent line in order to also be tangent to the second line) is not the current point, this method appends a straight line segment from the current point to the starting point of the arc.\n\nThe ending point of the arc (that is, the point where a circle of the specified radius must meet the second tangent line in order to also be tangent to the first line) becomes the new current point of the path.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "addEllipse(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456420-addellipse",
    "html": "Parameters\nrect\n\nA rectangle that defines the area for the ellipse to fit in.\n\nDiscussion\n\nThe ellipse is approximated by a sequence of Bézier curves. Its center is the midpoint of the rectangle defined by the rect parameter. If the rectangle is square, then the ellipse is circular with a radius equal to one-half the width (or height) of the rectangle. If the rect parameter specifies a rectangular shape, then the major and minor axes of the ellipse are defined by the width and height of the rectangle.\n\nThe ellipse forms a complete subpath of the path—that is, the ellipse drawing starts with a move-to operation and ends with a close-subpath operation, with all moves oriented in the clockwise direction.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "addLines(between:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427136-addlines",
    "html": "Parameters\npoints\n\nAn array of values that specify the start and end points of the line segments to draw. Each point in the array specifies a position in user space. The first point in the array specifies the initial starting point.\n\nDiscussion\n\nCalling this convenience method is equivalent to calling the move(to:) method with the first value in the points array, then calling the addLine(to:) method for each subsequent point until the array is exhausted. After calling this method, the path's current point is the last point in the array.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "addRect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456617-addrect",
    "html": "Parameters\nrect\n\nA rectangle, specified in user space coordinates.\n\nDiscussion\n\nThis is a convenience function that adds a rectangle to a path, starting by moving to the bottom left corner and then adding lines counter-clockwise to create a rectangle, closing the subpath.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path.\nRelated Documentation\naddRects(_:count:)\nAdds a set of rectangular paths to the current path."
  },
  {
    "title": "move(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427138-move",
    "html": "Parameters\npoint\n\nThe point, in user space coordinates, at which to start a new subpath.\n\nDiscussion\n\nThe specified point becomes the start point of a new subpath. The current point is set to this start point.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "beginPath() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456635-beginpath",
    "html": "Parameters\nc\n\nA graphics context.\n\nDiscussion\n\nA graphics context can have only a single path in use at any time. If the specified context already contains a current path when you call this function, the old path and any data associated with it is discarded.\n\nThe current path is not part of the graphics state. Consequently, saving and restoring the graphics state has no effect on the current path.\n\nSee Also\nConstructing a Current Graphics Path\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "convertToDeviceSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456619-converttodevicespace",
    "html": "Parameters\nsize\n\nThe size, in user space coordinates, to transform.\n\nReturn Value\n\nThe size in device space coordinates.\n\nSee Also\nConverting Between Coordinate Spaces\nvar userSpaceToDeviceSpaceTransform: CGAffineTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nfunc convertToDeviceSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from device space coordinates to user space coordinates.\nfunc convertToDeviceSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nfunc convertToUserSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from device space coordinate to user space coordinates.\nfunc convertToUserSpace(CGSize) -> CGSize\nReturns a size that is transformed from device space coordinates to user space coordinates."
  },
  {
    "title": "convertToUserSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456510-converttouserspace",
    "html": "Parameters\nsize\n\nThe size, in device space coordinates, to transform.\n\nReturn Value\n\nThe size in user space coordinates.\n\nSee Also\nConverting Between Coordinate Spaces\nvar userSpaceToDeviceSpaceTransform: CGAffineTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nfunc convertToDeviceSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from device space coordinates to user space coordinates.\nfunc convertToDeviceSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nfunc convertToUserSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from device space coordinate to user space coordinates.\nfunc convertToDeviceSpace(CGSize) -> CGSize\nReturns a size that is transformed from user space coordinates to device space coordinates."
  },
  {
    "title": "convertToUserSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454165-converttouserspace",
    "html": "Parameters\nrect\n\nThe rectangle, in device space coordinates, to transform.\n\nReturn Value\n\nThe rectangle in user space coordinates.\n\nDiscussion\n\nIn general, affine transforms do not preserve rectangles. As a result, this function returns the smallest rectangle that contains the transformed corner points of the rectangle.\n\nSee Also\nConverting Between Coordinate Spaces\nvar userSpaceToDeviceSpaceTransform: CGAffineTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nfunc convertToDeviceSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from device space coordinates to user space coordinates.\nfunc convertToDeviceSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nfunc convertToDeviceSpace(CGSize) -> CGSize\nReturns a size that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGSize) -> CGSize\nReturns a size that is transformed from device space coordinates to user space coordinates."
  },
  {
    "title": "showText(string:length:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1586507-showtext",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nstring\n\nAn array of characters to draw.\n\nlength\n\nThe length of the array specified in the bytes parameter.\n\nDiscussion\n\nCore Graphics uses font data provided by the system to map each byte of the array through the encoding vector of the current font to obtain the glyph to display. Note that the font must have been set using selectFont(name:size:textEncoding:). Don’t use CGContextShowText in conjunction with setFont(_:).\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "showGlyphsAtPoint(x:y:glyphs:count:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1586502-showglyphsatpoint",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nx\n\nA value for the x-coordinate of the user space at which to display the glyphs.\n\ny\n\nA value for the y-coordinate of the user space at which to display the glyphs.\n\nglyphs\n\nAn array of glyphs to display.\n\ncount\n\nThe total number of glyphs passed in the glyphs parameter.\n\nDiscussion\n\nThis function displays an array of glyphs at the specified position in the user space.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "showGlyphsWithAdvances(glyphs:advances:count:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1586503-showglyphswithadvances",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nglyphs\n\nAn array of glyphs.\n\nadvances\n\nAn array of offset values associated with each glyph in the array. Each value specifies the offset from the previous glyph's origin to the origin of the corresponding glyph. Offsets are specified in user space.\n\ncount\n\nThe number of glyphs in the specified array.\n\nDiscussion\n\nThis function draws an array of glyphs at the current point specified by the text matrix.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "showGlyphs(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427142-showglyphs",
    "html": "Parameters\nglyphs\n\nAn array of glyphs.\n\npositions\n\nAn array positions for the glyphs. Each item in this array specifies the position at which to draw the glyph at the corresponding index in the glyphs array.\n\nDiscussion\n\nPoints in the positions array are specified in text space, so the textMatrix property defines their transformation to user space.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "showGlyphs(g:count:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1586500-showglyphs",
    "html": "Deprecated\n\nUse Core Text instead.\n\nParameters\nglyphs\n\nAn array of glyphs to display.\n\ncount\n\nThe total number of glyphs passed in the g parameter.\n\nDiscussion\n\nThis function displays an array of glyphs at the current text position, a point specified by the current text matrix.\n\nSee Also\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify."
  },
  {
    "title": "convertToUserSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456451-converttouserspace",
    "html": "Parameters\npoint\n\nThe point, in device space coordinates, to transform.\n\nReturn Value\n\nThe coordinates of the point in user space coordinates.\n\nSee Also\nConverting Between Coordinate Spaces\nvar userSpaceToDeviceSpaceTransform: CGAffineTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nfunc convertToDeviceSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from user space coordinates to device space coordinates.\nfunc convertToDeviceSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nfunc convertToUserSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from device space coordinate to user space coordinates.\nfunc convertToDeviceSpace(CGSize) -> CGSize\nReturns a size that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGSize) -> CGSize\nReturns a size that is transformed from device space coordinates to user space coordinates."
  },
  {
    "title": "CGBitmapContextReleaseDataCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgbitmapcontextreleasedatacallback",
    "html": "Discussion\n\nThe releaseInfo parameter contains the contextual data that you passed to the init(data:width:height:bitsPerComponent:bytesPerRow:space:bitmapInfo:releaseCallback:releaseInfo:) function. The data parameter contains a pointer to the bitmap data for you to release.\n\nSee Also\nCreating Bitmap Graphics Contexts\ninit?(data: UnsafeMutableRawPointer?, width: Int, height: Int, bitsPerComponent: Int, bytesPerRow: Int, space: CGColorSpace, bitmapInfo: UInt32)\nCreates a bitmap graphics context.\ninit?(data: UnsafeMutableRawPointer?, width: Int, height: Int, bitsPerComponent: Int, bytesPerRow: Int, space: CGColorSpace, bitmapInfo: UInt32, releaseCallback: CGBitmapContextReleaseDataCallback?, releaseInfo: UnsafeMutableRawPointer?)\nCreates a bitmap graphics context with the specified callback function."
  },
  {
    "title": "addPath(_:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427150-addpath",
    "html": "Parameters\npath\n\nThe path to add.\n\ntransform\n\nAn affine transform to apply to the path parameter before adding to this path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nIf the path parameter is a non-empty empty path, its path elements are appended in order to this path. Afterward, the start point and current point of this path are those of the last subpath in the path parameter.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "addQuadCurve(to:control:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427128-addquadcurve",
    "html": "Parameters\nend\n\nThe point, in user space coordinates, at which to end the curve.\n\ncontrol\n\nThe control point of the curve, in user space coordinates.\n\ntransform\n\nAn affine transform to apply to the curve before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nThis method constructs a curve starting from the path’s current point and ending at the specified end point, with curvature defined by the control point. After this method appends that curve to the current path, the end point of the curve becomes the path’s current point.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "addCurve(to:control1:control2:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427158-addcurve",
    "html": "Parameters\nend\n\nThe point, in user space coordinates, at which to end the curve.\n\ncontrol1\n\nThe first control point of the curve, in user space coordinates.\n\ncontrol2\n\nThe second control point of the curve, in user space coordinates.\n\ntransform\n\nAn affine transform to apply to the curve before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nThis method constructs a curve starting from the path’s current point and ending at the specified end point, with curvature defined by the two control points. After this method appends that curve to the current path, the end point of the curve becomes the path’s current point.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "closeSubpath() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/1411188-closesubpath",
    "html": "Parameters\npath\n\nThe path to change.\n\nDiscussion\n\nAppends a line from the current point to the starting point of the current subpath and ends the subpath.\n\nAfter closing the subpath, your application can begin a new subpath without first calling moveTo(_:x:y:). In this case, a new subpath is implicitly created with a starting and current point equal to the previous subpath’s starting point.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path."
  },
  {
    "title": "init(data:width:height:bitsPerComponent:bytesPerRow:space:bitmapInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455939-init",
    "html": "Parameters\ndata\n\nA pointer to the destination in memory where the drawing is to be rendered. The size of this memory block should be at least (bytesPerRow*height) bytes.\n\nPass NULL if you want this function to allocate memory for the bitmap. This frees you from managing your own memory, which reduces memory leak issues.\n\nwidth\n\nThe width, in pixels, of the required bitmap.\n\nheight\n\nThe height, in pixels, of the required bitmap.\n\nbitsPerComponent\n\nThe number of bits to use for each component of a pixel in memory. For example, for a 32-bit pixel format and an RGB color space, you would specify a value of 8 bits per component. For the list of supported pixel formats, see “Supported Pixel Formats” in the Graphics Contexts chapter of Quartz 2D Programming Guide.\n\nbytesPerRow\n\nThe number of bytes of memory to use per row of the bitmap. If the data parameter is NULL, passing a value of 0 causes the value to be calculated automatically.\n\ncolorspace\n\nThe color space to use for the bitmap context. Note that indexed color spaces are not supported for bitmap graphics contexts.\n\nbitmapInfo\n\nConstants that specify whether the bitmap should contain an alpha channel, the alpha channel’s relative location in a pixel, and information about whether the pixel components are floating-point or integer values. The constants for specifying the alpha channel information are declared with the CGImageAlphaInfo type but can be passed to this parameter safely. You can also pass the other constants associated with the CGBitmapInfo type.\n\nFor an example of how to specify the color space, bits per pixel, bits per pixel component, and bitmap information, see Graphics Contexts.\n\nReturn Value\n\nA new bitmap context, or NULL if a context could not be created. You are responsible for releasing this object using CGContextRelease.\n\nDiscussion\n\nWhen you draw into this context, Core Graphics renders your drawing as bitmapped data in the specified block of memory.\n\nThe pixel format for a new bitmap context is determined by three parameters—the number of bits per component, the color space, and an alpha option (expressed as a CGBitmapInfo constant). The alpha value determines the opacity of a pixel when it is drawn.\n\nSee Also\nCreating Bitmap Graphics Contexts\ninit?(data: UnsafeMutableRawPointer?, width: Int, height: Int, bitsPerComponent: Int, bytesPerRow: Int, space: CGColorSpace, bitmapInfo: UInt32, releaseCallback: CGBitmapContextReleaseDataCallback?, releaseInfo: UnsafeMutableRawPointer?)\nCreates a bitmap graphics context with the specified callback function.\ntypealias CGBitmapContextReleaseDataCallback\nA callback function used to release data associate with the bitmap context."
  },
  {
    "title": "addArc(center:radius:startAngle:endAngle:clockwise:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427140-addarc",
    "html": "Parameters\ncenter\n\nThe center of the arc, in user space coordinates.\n\nradius\n\nThe radius of the arc, in user space coordinates.\n\nstartAngle\n\nThe angle to the starting point of the arc, measured in radians from the positive x-axis.\n\nendAngle\n\nThe angle to the end point of the arc, measured in radians from the positive x-axis.\n\nclockwise\n\ntrue to make a clockwise arc; false to make a counterclockwise arc.\n\ntransform\n\nAn affine transform to apply to the arc before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nThis method calculates starting and ending points using the radius and angles you specify, uses a sequence of cubic Bézier curves to approximate a segment of a circle between those points, and then appends those curves to the path.\n\nThe clockwise parameter determines the direction in which the arc is created; the actual direction of the final path is dependent on the transform parameter and the current transform of a context where the path is drawn. In a flipped coordinate system (the default for UIView drawing methods in iOS), specifying a clockwise arc results in a counterclockwise arc after the transformation is applied.\n\nIf the path already contains a subpath, this method adds a line connecting the current point to the starting point of the arc. If the current path is empty, this method creates a new subpath whose starting point is the starting point of the arc. The ending point of the arc becomes the new current point of the path.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "addRects(_:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427131-addrects",
    "html": "Parameters\nrects\n\nAn array of rectangles, specified in user space coordinates.\n\ntransform\n\nAn affine transform to apply to the rectangles before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nCalling this convenience method is equivalent to repeatedly calling the addRect(_:transform:) method for each rectangle in the array.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "addRoundedRect(in:cornerWidth:cornerHeight:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427144-addroundedrect",
    "html": "Parameters\nrect\n\nThe rectangle to add, specified in user space coordinates.\n\ncornerWidth\n\nThe horizontal size, in user space coordinates, for rounded corner sections.\n\ncornerHeight\n\nThe vertical size, in user space coordinates, for rounded corner sections.\n\ntransform\n\nAn affine transform to apply to the rectangle before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nThis convenience method is equivalent to a move operation to start the subpath followed by a series of arc and line operations that construct the rounded rectangle. Each corner of the rounded rectangle is one-quarter of an ellipse with axes equal to the cornerWidth and cornerHeight parameters. The rounded rectangle forms a closed subpath oriented in the clockwise direction.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "addLines(between:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427154-addlines",
    "html": "Parameters\npoints\n\nAn array of values that specify the start and end points of the line segments to draw. Each point in the array specifies a position in user space. The first point in the array specifies the initial starting point.\n\ntransform\n\nAn affine transform to apply to the points before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nCalling this convenience method is equivalent to calling the move(to:transform:) method with the first value in the points array, then calling the addLine(to:transform:) method for each subsequent point until the array is exhausted. After calling this method, the path’s current point is the last point in the array.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "addRect(_:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427119-addrect",
    "html": "Parameters\nrect\n\nA rectangle, specified in user space coordinates.\n\ntransform\n\nAn affine transform to apply to the rectangle before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nThis is a convenience function that adds a rectangle to a path, starting by moving to the bottom-left corner and then adding lines counter-clockwise to create a rectangle, closing the subpath.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "addLine(to:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427121-addline",
    "html": "Parameters\npoint\n\nThe location, in user space coordinates, for the end of the new line segment.\n\ntransform\n\nAn affine transform to apply to the point before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nAfter adding the line segment, the current point is set to the endpoint of the line segment.\n\nSee Also\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "move(to:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath/2427143-move",
    "html": "Parameters\npoint\n\nThe point, in user space coordinates, at which to start a new subpath.\n\ntransform\n\nAn affine transform to apply to the point before adding to the path. Defaults to the identity transform if not specified.\n\nDiscussion\n\nThe specified point becomes the start point of a new subpath. The current point is set to this start point.\n\nSee Also\nConstructing a Graphics Path\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path."
  },
  {
    "title": "init(windowListFromArrayScreenBounds:windowArray:imageOption:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455730-init",
    "html": "Parameters\nscreenBounds\n\nThe rectangle that you want to capture. The coordinates of the rectangle must be specified in screen coordinates, where the screen origin is in the upper-left corner of the main display and y-axis values increase downward. Specify CGRectNull to indicate the minimum rectangle that encloses the specified windows. Specify CGRectInfinite to capture the entire desktop area.\n\nwindowArray\n\nAn array of CGWindowID types, each of which corresponds to a window whose information you want to retrieve. The order of the window IDs also affects the compositing order of the windows; see the discussion for more information about this behavior.\n\nimageOption\n\nThe options that determine which parts of the window to capture. If you specified CGRectNull for the screenBounds parameter, these options help determine the resulting bounding box used for the image. For example, if you include a window’s screen effects in the image, the bounding box may need to be slightly larger to accommodate those effects. For a list of possible options, see Window Image Types.\n\nReturn Value\n\nA composite image formed from the contents of the specified set of windows. Invalid window IDs are ignored. If the windows are unreadable (because their sharing setting is set to CGWindowSharingType.none, for example) or if no windows meet the specified criteria, this function returns an image that is either 0 by 0 pixels in size or is of the specified size but is filled with the transparent black color. If you call this function from outside of a GUI security session or when no window server is running, this function returns NULL.\n\nDiscussion\n\nThis function ignores any window IDs in the windowArray parameter that refer to windows that no longer exist. (This can occur if the user closes a window between the time you retrieve its ID and the time you call this function.) If this results in no windows being available in the selected range, this function returns NULL.\n\nThis function ignores the onscreen ordering of the windows and instead composites them using the order specified in the windowArray parameter. In other words, windows at the beginning of the array are composited in front of windows at the end of the array.\n\nSee Also\nGetting Window Information\nfunc CGWindowListCopyWindowInfo(CGWindowListOption, CGWindowID) -> CFArray?\nGenerates and returns information about the selected windows in the current user session.\nfunc CGWindowListCreateDescriptionFromArray(CFArray?) -> CFArray?\nGenerates and returns information about windows with the specified window IDs.\nfunc CGWindowListCreateImage(CGRect, CGWindowListOption, CGWindowID, CGWindowImageOption) -> CGImage?\nReturns a composite image based on a dynamically generated list of windows.\nDeprecated"
  },
  {
    "title": "typeID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455014-typeid",
    "html": "Return Value\n\nThe identifier for the type CGImage."
  },
  {
    "title": "context | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cglayer/1450902-context",
    "html": "Parameters\nlayer\n\nThe layer whose graphics context you want to obtain.\n\nReturn Value\n\nThe graphics context associated with the layer.\n\nDiscussion\n\nThe context that’s returned is the context for the layer itself, not the context that you specified when you created the layer.\n\nSee Also\nExamining a Layer\nvar size: CGSize\nReturns the width and height of a layer object."
  },
  {
    "title": "size | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cglayer/1450890-size",
    "html": "Parameters\nlayer\n\nThe layer whose width and height you want to obtain.\n\nReturn Value\n\nThe width and height of the layer, in default user space coordinates.\n\nSee Also\nExamining a Layer\nvar context: CGContext?\nReturns the graphics context associated with a layer object."
  },
  {
    "title": "masking(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1456337-masking",
    "html": "Parameters\nmask\n\nA mask. If the mask is an image, it must be in the DeviceGray color space, must not have an alpha component, and may not itself be masked by an image mask or a masking color. If the mask is not the same size as the image specified by the image parameter, the mask is scaled to fit the image.\n\nReturn Value\n\nAn image created by masking image with mask. You are responsible for releasing this object by calling CGImageRelease.\n\nDiscussion\n\nThe resulting image depends on whether the mask parameter is an image mask or an image. If the mask parameter is an image mask, then the source samples of the image mask act as an inverse alpha value. That is, if the value of a source sample in the image mask is S, then the corresponding region in image is blended with the destination using an alpha value of (1-S). For example, if S is 1, then the region is not painted, while if S is 0, the region is fully painted.\n\nIf the mask parameter is an image, then it serves as an alpha mask for blending the image onto the destination. The source samples of mask' act as an alpha value. If the value of the source sample in mask is S, then the corresponding region in image is blended with the destination with an alpha of S. For example, if S is 0, then the region is not painted, while if S is 1, the region is fully painted.\n\nSee Also\nCreating Images by Modifying an Image\nfunc cropping(to: CGRect) -> CGImage?\nCreates a bitmap image using the data contained within a subregion of an existing bitmap image.\nfunc copy(maskingColorComponents: [CGFloat]) -> CGImage?\nCreates a bitmap image by masking an existing bitmap image with the provided color values."
  },
  {
    "title": "init(_:size:auxiliaryInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cglayer/1450892-init",
    "html": "Parameters\ncontext\n\nThe graphics context you want to create the layer relative to. The layer uses this graphics context as a reference for initialization.\n\nsize\n\nThe size, in default user space units, of the layer relative to the graphics context.\n\nauxiliaryInfo\n\nReserved for future use. Pass NULL.\n\nReturn Value\n\nA CGLayer object. You are responsible for releasing this object using the function CGLayerRelease when you no longer need the layer.\n\nDiscussion\n\nAfter you create a CGLayer object, you should reuse it whenever you can to facilitate the Core Graphics caching strategy. Core Graphics caches any objects that are reused, including CGLayer objects. Objects that are reused frequently remain in the cache. In contrast, objects that are used once in a while may be moved in and out of the cache according to their frequency of use. If you don’t reuse CGLayer objects, Core Graphics won’t cache them. This means that you lose an opportunity to improve the performance of your application."
  },
  {
    "title": "cropping(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1454683-cropping",
    "html": "Parameters\nrect\n\nA rectangle specifying the portion of the image to keep.\n\nReturn Value\n\nA CGImage object that specifies a subimage of the image. If the rect parameter defines an area that is not in the image, returns NULL.\n\nDiscussion\n\nCropping removes content around the designated rectangle; it cuts out the desired area of the input image and returns an image of the cropped size.\n\nFigure 1 Cropping an image\n\ncropping(to:) performs the following tasks to create the subimage:\n\nIt calls the CGRectIntegral(_:) function to adjust the rect parameter to integral bounds.\n\nIt intersects the rect with a rectangle whose origin is (0,0) and size is equal to the size of the image specified by the image parameter.\n\nIt reads the pixels within the resulting rectangle, treating the first pixel within as the origin of the subimage.\n\nIf W and H are the width and height of image, respectively, then the point (0,0) corresponds to the first pixel of the image data. The point (W–1, 0) is the last pixel of the first row of the image data, while (0, H–1) is the first pixel of the last row of the image data and (W–1, H–1) is the last pixel of the last row of the image data.\n\nImportant\n\nBe sure to specify the subrectangle's coordinates relative to the original image's full size, even if the UIImageView shows only a scaled version.\n\nThe resulting image retains a reference to the original image, which means you may release the original image after calling this function. In Swift, you do not need to release the original image reference explicitly.\n\nListing 1 Cropping an image using CGImageCreateWithImageInRect\nfunc cropImage(_ inputImage: UIImage, toRect cropRect: CGRect, viewWidth: CGFloat, viewHeight: CGFloat) -> UIImage? \n{    \n    let imageViewScale = max(inputImage.size.width / viewWidth,\n                             inputImage.size.height / viewHeight)\n\n\n    // Scale cropRect to handle images larger than shown-on-screen size\n    let cropZone = CGRect(x:cropRect.origin.x * imageViewScale,\n                          y:cropRect.origin.y * imageViewScale,\n                          width:cropRect.size.width * imageViewScale,\n                          height:cropRect.size.height * imageViewScale)\n\n\n    // Perform cropping in Core Graphics\n    guard let cutImageRef: CGImage = inputImage.cgImage?.cropping(to:cropZone)\n    else {\n        return nil\n    }\n\n\n    // Return image to UIImage\n    let croppedImage: UIImage = UIImage(cgImage: cutImageRef)\n    return croppedImage\n}\n\n\nIf you already use CIImage, or if you are post-processing images as CIImage data in Core Image, such as chaining together multiple filters to the cropped result, it may be more efficient to crop CIImage directly in the Core Image framework using the CICrop filter; in this case, use the convenience function cropped(to:).\n\nSee Also\nCreating Images by Modifying an Image\nfunc masking(CGImage) -> CGImage?\nCreates a bitmap image from an existing image and an image mask.\nfunc copy(maskingColorComponents: [CGFloat]) -> CGImage?\nCreates a bitmap image by masking an existing bitmap image with the provided color values."
  },
  {
    "title": "renderingIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1456350-renderingintent",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nReturns the CGColorRenderingIntent constant that specifies how to handle colors that are not located within the gamut of the destination color space of a graphics context in which the image is drawn. If the image is an image mask, this function returns CGColorRenderingIntent.defaultIntent.\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "CGBitmapInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgbitmapinfo",
    "html": "Overview\n\nApplications that store pixel data in memory using ARGB format must take care in how they read data. If the code is not written correctly, it’s possible to misread the data which leads to colors or alpha that appear wrong. The byte order constants specify the byte ordering of pixel formats. To specify byte ordering, use a bitwise OR operator to combine the appropriate constant with the bitmapInfo parameter.\n\nTopics\nConstants\nstatic var alphaInfoMask: CGBitmapInfo\nThe alpha information mask. Use this to extract alpha information that specifies whether a bitmap contains an alpha channel and how the alpha channel is generated.\nstatic var floatComponents: CGBitmapInfo\nThe components of a bitmap are floating-point values.\nstatic var byteOrderMask: CGBitmapInfo\nThe byte ordering of pixel formats.\nstatic var byteOrderDefault: CGBitmapInfo\nThe default byte order.\nstatic var byteOrder16Little: CGBitmapInfo\n16-bit, little endian format.\nstatic var byteOrder32Little: CGBitmapInfo\n32-bit, little endian format.\nstatic var byteOrder16Big: CGBitmapInfo\n16-bit, big endian format.\nstatic var byteOrder32Big: CGBitmapInfo\n32-bit, big endian format.\nstatic var floatInfoMask: CGBitmapInfo\nInitializers\ninit(rawValue: UInt32)\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "bitmapInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1454200-bitmapinfo",
    "html": "Parameters\nimage\n\nAn image.\n\nReturn Value\n\nThe bitmap information associated with an image.\n\nDiscussion\n\nThis function returns a constant that specifies:\n\nThe type of bitmap data—floating point or integer. You use the constant floatComponents to extract this information.\n\nWhether an alpha channel is in the data, and if so, how the alpha data is stored. You use the constant alphaInfoMask to extract the alpha information. Alpha information is specified as one of the constants listed in CGImageAlphaInfo.\n\nYou can extract the alpha information\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "CGImageAlphaInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimagealphainfo",
    "html": "Overview\n\nA CGImageAlphaInfo constant specifies (1) whether a bitmap contains an alpha channel, (2) where the alpha bits are located in the image data, and (3) whether the alpha value is premultiplied. You can obtain a CGImageAlphaInfo constant for an image by calling the alphaInfo function. (You provide a CGBitmapInfo constant to the function init(width:height:bitsPerComponent:bitsPerPixel:bytesPerRow:space:bitmapInfo:provider:decode:shouldInterpolate:intent:), part of which is a CGImageAlphaInfo constant.)\n\nAlpha blending is accomplished by combining the color components of the source image with the color components of the destination image using the linear interpolation formula, where “source” is one color component of one pixel of the new paint and “destination” is one color component of the background image.\n\nCore Graphics supports premultiplied alpha only for images. You should not premultiply any other color values specified in Core Graphics.\n\nTopics\nConstants\ncase first\nThe alpha component is stored in the most significant bits of each pixel. For example, non-premultiplied ARGB.\ncase last\nThe alpha component is stored in the least significant bits of each pixel. For example, non-premultiplied RGBA.\ncase none\nThere is no alpha channel.\ncase noneSkipFirst\nThere is no alpha channel. If the total size of the pixel is greater than the space required for the number of color components in the color space, the most significant bits are ignored.\ncase alphaOnly\nThere is no color data, only an alpha channel.\ncase noneSkipLast\nThere is no alpha channel.\ncase premultipliedFirst\nThe alpha component is stored in the most significant bits of each pixel and the color components have already been multiplied by this alpha value. For example, premultiplied ARGB.\ncase premultipliedLast\nThe alpha component is stored in the least significant bits of each pixel and the color components have already been multiplied by this alpha value. For example, premultiplied RGBA.\nRelationships\nConforms To\nSendable\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "dataProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455260-dataprovider",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe data provider for the specified bitmap image (or image mask). You are responsible for retaining and releasing the data provider as necessary.\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "shouldInterpolate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455363-shouldinterpolate",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nReturns 1 if interpolation is enabled for the specified bitmap image (or image mask), otherwise, returns 0.\n\nDiscussion\n\nThe interpolation setting specifies whether an edge-smoothing algorithm is applied to the associated image.\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "alphaInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455401-alphainfo",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nA CGImageAlphaInfo constant that specifies (1) whether the bitmap contains an alpha channel, (2) where the alpha bits are located in the image data, and (3) whether the alpha value is premultiplied. For possible values, see Constants. The function returns CGImageAlphaInfo.none if the image parameter refers to an image mask.\n\nDiscussion\n\nThe alpha value is what determines the opacity of a pixel when it is drawn.\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "colorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1454858-colorspace",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe source color space for the specified bitmap image, or NULL if the image is an image mask. You are responsible for retaining and releasing the color space as necessary.\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "bitsPerComponent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1454980-bitspercomponent",
    "html": "Parameters\nimage\n\nThe image to examine.\n\nReturn Value\n\nThe number of bits used in memory for each color component of the specified bitmap image (or image mask). Possible values are 1, 2, 4, or 8. For example, for a 16-bit RGB(A) colorspace, the function would return a value of 4 bits per color component.\n\nSee Also\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image."
  },
  {
    "title": "init(pngDataProviderSource:decode:shouldInterpolate:intent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1454993-init",
    "html": "Parameters\nsource\n\nA data provider supplying PNG-encoded data.\n\ndecode\n\nThe decode array for the image. Typically a decode array is unnecessary, and you should pass NULL.\n\nshouldInterpolate\n\nA Boolean value that specifies whether interpolation should occur. The interpolation setting specifies whether a pixel-smoothing algorithm should be applied to the image.\n\nintent\n\nA CGColorRenderingIntent constant that specifies how to handle colors that are not located within the gamut of the destination color space of a graphics context.\n\nReturn Value\n\nA new CGImage. You are responsible for releasing this object by calling CGImageRelease.\n\nSee Also\nCreating Images\ninit?(width: Int, height: Int, bitsPerComponent: Int, bitsPerPixel: Int, bytesPerRow: Int, space: CGColorSpace, bitmapInfo: CGBitmapInfo, provider: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)\nCreates a bitmap image from data supplied by a data provider.\ninit?(jpegDataProviderSource: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)\nCreates a bitmap image using JPEG-encoded data supplied by a data provider."
  },
  {
    "title": "fillPath(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427156-fillpath",
    "html": "Parameters\nrule\n\nThe rule for determining which areas to treat as the interior of the path. See CGPathFillRule.\n\nThis parameter defaults to the CGPathFillRule.winding rule if unspecified.\n\nDiscussion\n\nIf the current path contains any non-closed subpaths, this method treats each subpath as if it had been closed with the closePath() method, then applies the specified rule to determine which areas to fill.\n\nAfter filling the path, this method clears the context’s current path.\n\nSee Also\nDrawing the Current Graphics Path\nfunc drawPath(using: CGPathDrawingMode)\nDraws the current path using the provided drawing mode.\nenum CGPathDrawingMode\nOptions for rendering a path.\nfunc strokePath()\nPaints a line along the current path."
  },
  {
    "title": "Core Graphics Data Types | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_data_types",
    "html": "Topics\nData Types\ntypealias CGButtonCount\nRepresents the number of buttons being set in a synthetic mouse event.\ntypealias CGCharCode\nRepresents a character generated by pressing one or more keys on a keyboard.\ntypealias CGDirectDisplayID\nA unique identifier for an attached display.\ntypealias CGDisplayBlendFraction\nThe percentage of blend color used in a fade operation.\ntypealias CGDisplayConfigRef\nA reference to a display configuration transaction.\ntypealias CGDisplayCount\nThe number of displays in various lists.\ntypealias CGDisplayErr\nA uniform type for result codes returned by functions in Quartz Display Services.\ntypealias CGDisplayFadeInterval\nThe duration in seconds of a fade operation or a fade hardware reservation.\ntypealias CGDisplayFadeReservationToken\nA token issued by Quartz when reserving one or more displays for a fade operation during a specified interval.\ntypealias CGDisplayReconfigurationCallBack\nA client-supplied callback function that’s invoked whenever the configuration of a local display is changed.\ntypealias CGDisplayReservationInterval\nThe time interval for a fade reservation.\ntypealias CGDisplayStreamFrameAvailableHandler\nA block called when a data stream has a new frame event to process.\ntypealias CGEventErr\ntypealias CGEventMask\nDefines a mask that identifies the set of Quartz events to be observed in an event tap.\ntypealias CGEventSourceKeyboardType\nDefines a code that represents the type of keyboard used with a specified event source.\ntypealias CGEventTapCallBack\nA client-supplied callback function that’s invoked whenever an associated event tap receives a Quartz event.\ntypealias CGEventTapInformation\nDefines the structure used to report information about event taps.\ntypealias CGEventTapProxy\nDefines an opaque type that represents state within the client application that’s associated with an event tap.\ntypealias CGEventTimestamp\nDefines the elapsed time in nanoseconds since startup that a Quartz event occurred.\ntypealias CGGammaValue\nA value used to map a color generated in software to a color supported by the display hardware.\ntypealias CGKeyCode\nRepresents the virtual key codes used in keyboard events.\ntypealias CGOpenGLDisplayMask\nA bitmask used in OpenGL to specify a set of attached displays.\ntypealias CGRectCount\nThe size of an array of Quartz rectangles.\ntypealias CGRefreshRate\nA display’s refresh rate in frames per second.\ntypealias CGScreenRefreshCallback\nA client-supplied callback function that’s invoked when an area of the display is modified or refreshed.\ntypealias CGScreenUpdateMoveCallback\nA client-supplied callback function invoked when an area of the display is moved.\ntypealias CGWheelCount\nRepresents the number of wheels being set in a scroll wheel event.\ntypealias CGWindowID\nThe data type used to store window identifiers.\ntypealias CGWindowLevel\nA level assigned to a window by an application framework."
  },
  {
    "title": "CGColorSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorspace",
    "html": "Topics\nCreating Color Spaces\ninit?(calibratedGrayWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: CGFloat)\nCreates a calibrated grayscale color space.\ninit?(calibratedRGBWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, gamma: UnsafePointer<CGFloat>?, matrix: UnsafePointer<CGFloat>?)\nCreates a calibrated RGB color space.\ninit?(iccBasedNComponents: Int, range: UnsafePointer<CGFloat>?, profile: CGDataProvider, alternate: CGColorSpace?)\nCreates a device-independent color space that is defined according to the ICC color profile specification.\ninit?(indexedBaseSpace: CGColorSpace, last: Int, colorTable: UnsafePointer<UInt8>)\nCreates an indexed color space, consisting of colors specified by a color lookup table.\ninit?(labWhitePoint: UnsafePointer<CGFloat>, blackPoint: UnsafePointer<CGFloat>?, range: UnsafePointer<CGFloat>?)\nCreates a device-independent color space that is relative to human color perception, according to the CIE L*a*b* standard.\ninit?(patternBaseSpace: CGColorSpace?)\nCreates a pattern color space.\ninit?(name: CFString)\nCreates a specified type of Quartz color space.\ninit?(platformColorSpaceRef: UnsafeRawPointer)\nCreates a platform-specific color space.\nDeprecated\ninit?(iccData: CFTypeRef)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\ninit?(propertyListPlist: CFPropertyList)\nCreates a color space from a property list.\nfunc CGColorSpaceCreateDeviceRGB() -> CGColorSpace\nCreates a device-dependent RGB color space.\nfunc CGColorSpaceCreateDeviceCMYK() -> CGColorSpace\nCreates a device-dependent CMYK color space.\nfunc CGColorSpaceCreateDeviceGray() -> CGColorSpace\nCreates a device-dependent grayscale color space.\ninit?(iccProfileData: CFData)\nCreates an ICC-based color space using the ICC profile contained in the specified data.\nDeprecated\nExamining a Color Space\nvar baseColorSpace: CGColorSpace?\nReturns the base color space of a pattern or indexed color space.\nvar numberOfComponents: Int\nReturns the number of color components in a color space.\nvar model: CGColorSpaceModel\nReturns the color space model of the provided color space.\nenum CGColorSpaceModel\nModels for color spaces.\nvar colorTable: [UInt8]?\nThe entries in the color table of an indexed color space.\nfunc copyICCData() -> CFData?\nReturns a copy of the ICC profile data of the provided color space.\nfunc copyPropertyList() -> CFPropertyList?\nReturns a copy of the color space's properties.\nvar iccData: CFData?\nReturns a copy of the ICC profile of the provided color space.\nDeprecated\nvar name: CFString?\nReturns the name used to create the specified color space.\nvar supportsOutput: Bool\nReturns a Boolean indicating whether the color space can be used as a destination color space.\nvar isWideGamutRGB: Bool\nReturns whether the RGB color space covers a significant portion of the NTSC color gamut.\nAccessing System-Defined Color Spaces\nclass let displayP3: CFString\nThe Display P3 color space, created by Apple.\nclass let displayP3_HLG: CFString\nThe Display P3 color space, using the HLG transfer function.\nclass let displayP3_PQ_EOTF: CFString\nThe Display P3 color space, using the PQ transfer function.\nDeprecated\nclass let extendedLinearDisplayP3: CFString\nThe Display P3 color space with a linear transfer function and extended-range values.\nclass let sRGB: CFString\nThe standard Red Green Blue (sRGB) color space.\nclass let linearSRGB: CFString\nThe sRGB color space with a linear transfer function.\nclass let extendedSRGB: CFString\nThe extended sRGB color space.\nclass let extendedLinearSRGB: CFString\nThe sRGB color space with a linear transfer function and extended-range values.\nclass let genericGrayGamma2_2: CFString\nThe generic gray color space that has an exponential transfer function with a power of 2.2.\nclass let extendedGray: CFString\nThe extended gray color space.\nclass let linearGray: CFString\nThe gray color space using a linear transfer function.\nclass let extendedLinearGray: CFString\nThe extended gray color space with a linear transfer function.\nclass let genericCMYK: CFString\nThe generic CMYK color space.\nclass let genericRGBLinear: CFString\nThe generic RGB color space with a linear transfer function.\nclass let genericXYZ: CFString\nThe XYZ color space, as defined by the CIE 1931 standard.\nclass let genericLab: CFString\nThe generic LAB color space.\nclass let acescgLinear: CFString\nThe ACEScg color space.\nclass let adobeRGB1998: CFString\nThe Adobe RGB (1998) color space.\nclass let dcip3: CFString\nThe DCI P3 color space, which is the digital cinema standard.\nclass let itur_709: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.709 color space.\nclass let rommrgb: CFString\nThe Reference Output Medium Metric (ROMM) RGB color space.\nclass let itur_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space.\nclass let itur_2020_HLG: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the HLG transfer function.\nDeprecated\nclass let itur_2020_PQ_EOTF: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with the PQ transfer function.\nDeprecated\nclass let extendedLinearITUR_2020: CFString\nThe recommendation of the International Telecommunication Union (ITU) Radiocommunication sector for the BT.2020 color space, with a linear transfer function and extended range values.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for Quartz color spaces.\nType Properties\nclass let displayP3_PQ: CFString\nclass let extendedDisplayP3: CFString\nclass let extendedITUR_2020: CFString\nclass let itur_2020_PQ: CFString\nDeprecated\nclass let itur_2020_sRGBGamma: CFString\nclass let itur_2100_HLG: CFString\nclass let itur_2100_PQ: CFString\nclass let itur_709_HLG: CFString\nclass let itur_709_PQ: CFString\nclass let linearDisplayP3: CFString\nclass let linearITUR_2020: CFString\nInstance Methods\nfunc isHDR() -> Bool\nDeprecated\nRelationships\nConforms To\nSendable\nSee Also\nColors and Fonts\nclass CGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nclass CGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nclass CGFont\nA set of character glyphs and layout information for drawing text.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGPattern | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpattern",
    "html": "Topics\nCreating Pattern Objects\ninit?(info: UnsafeMutableRawPointer?, bounds: CGRect, matrix: CGAffineTransform, xStep: CGFloat, yStep: CGFloat, tiling: CGPatternTiling, isColored: Bool, callbacks: UnsafePointer<CGPatternCallbacks>)\nCreates a pattern object.\nenum CGPatternTiling\nDifferent methods for rendering a tiled pattern.\nstruct CGPatternCallbacks\nA structure that holds a version and two callback functions for drawing a custom pattern.\ntypealias CGPatternDrawPatternCallback\nDraws a pattern cell.\ntypealias CGPatternReleaseInfoCallback\nRelease private data or resources associated with the pattern.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the type identifier for Core Graphics patterns.\nSee Also\nUtility and Support Classes\nclass CGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nclass CGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nclass CGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nclass CGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nclass CGFunction\nA general facility for defining and using callback functions."
  },
  {
    "title": "draw(_:in:byTiling:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427134-draw",
    "html": "Parameters\nimage\n\nThe image to draw.\n\nrect\n\nThe rectangle, in user space coordinates, in which to draw the image.\n\nbyTiling\n\nIf true, this method fills the context's entire clipping region by tiling many copies of the image, and the rect parameter defines the origin and size of the tiling pattern.\n\nIf false (the default), this method draws a single copy of the image in the area defined by the rect parameter.\n\nDiscussion\n\nThis method scales the image (disproportionately, if necessary) to fit the bounds specified by the rect parameter.When the byTiling parameter is true, the image is tiled in user space—thus, unlike when drawing with patterns, the current transformation (see the ctm property) affects the final result.\n\nSee Also\nDrawing Images and PDF Content\nfunc drawPDFPage(CGPDFPage)\nDraws the content of a PDF page into the current graphics context.\nvar interpolationQuality: CGInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nenum CGInterpolationQuality\nLevels of interpolation quality for rendering an image."
  },
  {
    "title": "CGFunction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfunction",
    "html": "Topics\nCreating Function Objects\ninit?(info: UnsafeMutableRawPointer?, domainDimension: Int, domain: UnsafePointer<CGFloat>?, rangeDimension: Int, range: UnsafePointer<CGFloat>?, callbacks: UnsafePointer<CGFunctionCallbacks>)\nCreates a Core Graphics function.\nstruct CGFunctionCallbacks\nA structure that contains callbacks needed by a CGFunctionRef object.\ntypealias CGFunctionEvaluateCallback\nPerforms custom operations on the supplied input data to produce output data.\ntypealias CGFunctionReleaseInfoCallback\nPerforms custom clean-up tasks when Core Graphics deallocates a CGFunctionRef object.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the type identifier for Core Graphics function objects.\nSee Also\nUtility and Support Classes\nclass CGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nclass CGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nclass CGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nclass CGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nclass CGPattern\nA 2D pattern to be used for drawing graphics paths."
  },
  {
    "title": "init(width:height:bitsPerComponent:bitsPerPixel:bytesPerRow:space:bitmapInfo:provider:decode:shouldInterpolate:intent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage/1455149-init",
    "html": "Parameters\nwidth\n\nThe width, in pixels, of the required image.\n\nheight\n\nThe height, in pixels, of the required image\n\nbitsPerComponent\n\nThe number of bits for each component in a source pixel. For example, if the source image uses the RGBA-32 format, you would specify 8 bits per component.\n\nbitsPerPixel\n\nThe total number of bits in a source pixel. This value must be at least bitsPerComponent times the number of components per pixel.\n\nbytesPerRow\n\nThe number of bytes of memory for each horizontal row of the bitmap.\n\ncolorspace\n\nThe color space for the image. The color space is retained; on return, you may safely release it.\n\nbitmapInfo\n\nA constant that specifies whether the bitmap should contain an alpha channel and its relative location in a pixel, along with whether the components are floating-point or integer values.\n\nprovider\n\nThe source of data for the bitmap. For information about supported data formats, see the discussion below. The provider is retained; on return, you may safely release it.\n\ndecode\n\nThe decode array for the image. If you do not want to allow remapping of the image’s color values, pass NULL for the decode array. For each color component in the image’s color space (including the alpha component), a decode array provides a pair of values denoting the upper and lower limits of a range. For example, the decode array for a source image in the RGB color space would contain six entries total, consisting of one pair each for red, green, and blue. When the image is rendered, Core Graphics uses a linear transform to map the original component value into a relative number within your designated range that is appropriate for the destination color space.\n\nshouldInterpolate\n\nA Boolean value that specifies whether interpolation should occur. The interpolation setting specifies whether Core Graphics should apply a pixel-smoothing algorithm to the image. Without interpolation, the image may appear jagged or pixelated when drawn on an output device with higher resolution than the image data.\n\nintent\n\nA rendering intent constant that specifies how Core Graphics should handle colors that are not located within the gamut of the destination color space of a graphics context. The rendering intent determines the exact method used to map colors from one color space to another. For descriptions of the defined rendering-intent constants, see CGColorRenderingIntent.\n\nReturn Value\n\nA new bitmap image. You are responsible for releasing this object by calling CGImageRelease.\n\nDiscussion\n\nThe data provider should provide raw data that matches the format specified by the other input parameters. To use encoded data (for example, from a file specified by a URL-based data provider), see init(jpegDataProviderSource:decode:shouldInterpolate:intent:) and init(pngDataProviderSource:decode:shouldInterpolate:intent:).\n\nFor information on supported pixel formats, see Quartz 2D Programming Guide.\n\nSee Also\nCreating Images\ninit?(jpegDataProviderSource: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)\nCreates a bitmap image using JPEG-encoded data supplied by a data provider.\ninit?(pngDataProviderSource: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)\nCreates a bitmap image using PNG-encoded data supplied by a data provider."
  },
  {
    "title": "CGDataConsumer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataconsumer",
    "html": "Topics\nCreating Data Consumers\ninit?(info: UnsafeMutableRawPointer?, cbks: UnsafePointer<CGDataConsumerCallbacks>)\nCreates a data consumer that uses callback functions to write data.\ninit?(url: CFURL)\nCreates a data consumer that writes data to a location specified by a URL.\ninit?(data: CFMutableData)\nCreates a data consumer that writes to a CFData object.\nstruct CGDataConsumerCallbacks\nA structure that contains pointers to callback functions that manage the copying of data for a data consumer.\ntypealias CGDataConsumerPutBytesCallback\nCopies data from a Core Graphics-supplied buffer into a data consumer.\ntypealias CGDataConsumerReleaseInfoCallback\nReleases any private data or resources associated with the data consumer.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for Core Graphics data consumers.\nSee Also\nUtility and Support Classes\nclass CGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nclass CGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nclass CGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nclass CGFunction\nA general facility for defining and using callback functions.\nclass CGPattern\nA 2D pattern to be used for drawing graphics paths.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGPathDrawingMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathdrawingmode",
    "html": "Overview\n\nYou can pass a path drawing mode constant to the function drawPath(using:) to specify how Core Graphics should paint a graphics context’s current path.\n\nTopics\nConstants\ncase fill\nRender the area contained within the path using the non-zero winding number rule.\ncase eoFill\nRender the area within the path using the even-odd rule.\ncase stroke\nRender a line along the path.\ncase fillStroke\nFirst fill and then stroke the path, using the nonzero winding number rule.\ncase eoFillStroke\nFirst fill and then stroke the path, using the even-odd rule.\nRelationships\nConforms To\nSendable\nSee Also\nDrawing the Current Graphics Path\nfunc drawPath(using: CGPathDrawingMode)\nDraws the current path using the provided drawing mode.\nfunc fillPath(using: CGPathFillRule)\nPaints the area within the current path, as determined by the specified fill rule.\nfunc strokePath()\nPaints a line along the current path."
  },
  {
    "title": "addPath(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456628-addpath",
    "html": "Parameters\npath\n\nA previously created path object. See CGPath.\n\nDiscussion\n\nIf the source path is non-empty, then its path elements are appended in order onto the current path. The current transformation matrix (CTM) is applied to the points before adding them to the path.\n\nAfter the call completes, the start point and current point of the path are those of the last subpath in path.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "addCurve(to:control1:control2:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427127-addcurve",
    "html": "Parameters\nend\n\nThe point, in user space coordinates, at which to end the curve.\n\ncontrol1\n\nThe first control point of the curve, in user space coordinates.\n\ncontrol2\n\nThe second control point of the curve, in user space coordinates.\n\nDiscussion\n\nThis method constructs a curve starting from the path's current point and ending at the specified end point, with curvature defined by the two control points. After this method appends that curve to the current path, the end point of the curve becomes the path's current point.\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path."
  },
  {
    "title": "replacePathWithStrokedPath() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454517-replacepathwithstrokedpath",
    "html": "Parameters\nc\n\nA graphics context.\n\nDiscussion\n\nA stroked path is created using the parameters of the current graphics context. The new path is created so that filling it draws the same pixels as stroking the original path.You can use this path in the same way you use the path of any context. For example, you can clip to the stroked version of a path by calling this function followed by a call to the function clip().\n\nSee Also\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context."
  },
  {
    "title": "CGColorConversionInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolorconversioninfo",
    "html": "Overview\n\nA CGColorConversionInfo object specifies a conversion between two or more color spaces, including information about the intent of the conversion. You use color conversion objects to specify the work to be done by an MPSImageConversion filter, which can then perform GPU-accelerated image conversion.\n\nTopics\nCreating a Color Conversion\ninit?(src: CGColorSpace, dst: CGColorSpace)\nCreates a conversion between two specified color spaces.\nenum CGColorConversionInfoTransformType\nConstants describing how a color conversion uses color spaces.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for a color conversion info data type.\nInitializers\ninit?(optionsSrc: CGColorSpace, dst: CGColorSpace, options: CFDictionary?)\nSee Also\nColors and Fonts\nclass CGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nclass CGColorSpace\nA profile that specifies how to interpret a color value for display.\nclass CGFont\nA set of character glyphs and layout information for drawing text."
  },
  {
    "title": "Auxiliary Dictionary Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/auxiliary_dictionary_keys",
    "html": "Overview\n\nFor more information about using these keys in a PDF context, see init(consumer:mediaBox:_:) and init(_:mediaBox:_:).\n\nTopics\nMetadata Keys\nlet kCGPDFContextAuthor: CFString\nThe corresponding value is a string that represents the name of the person who created the document. This key is optional.\nlet kCGPDFContextCreator: CFString\nThe corresponding value is a string that represents the name of the application used to produce the document. This key is optional.\nlet kCGPDFContextTitle: CFString\nThe corresponding value is a string that represents the title of the document. This key is optional.\nlet kCGPDFContextOwnerPassword: CFString\nlet kCGPDFContextUserPassword: CFString\nlet kCGPDFContextAllowsPrinting: CFString\nWhether the document allows printing when unlocked with the user password. The value of this key must be a CFBoolean value. The default value of this key is true.\nlet kCGPDFContextAllowsCopying: CFString\nWhether the document allows copying when unlocked with the user password. The value of this key must be a CFBoolean object. The default value of this key is true.\nlet kCGPDFContextOutputIntent: CFString\nlet kCGPDFContextOutputIntents: CFString\nlet kCGPDFContextSubject: CFString\nlet kCGPDFContextKeywords: CFString\nlet kCGPDFContextEncryptionKeyLength: CFString\nBox Keys\nlet kCGPDFContextMediaBox: CFString\nThe media box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextCropBox: CFString\nThe crop box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextBleedBox: CFString\nThe bleed box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextTrimBox: CFString\nThe trim box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nlet kCGPDFContextArtBox: CFString\nThe art box for the document or for a given page. This key is optional. If present, the value of this key must be a CFData object that contains a CGRect (stored by value, not by reference).\nOutput Intent Keys\nlet kCGPDFXOutputIntentSubtype: CFString\nThe output intent subtype. This key is required. The value of this key must be a CFString object equal to \"GTS_PDFX\"; otherwise, the dictionary is ignored.\nlet kCGPDFXOutputConditionIdentifier: CFString\nlet kCGPDFXOutputCondition: CFString\nA text string identifying the intended output device or production condition in a human- readable form. This key is optional. If present, the value of this key must be a CFString object.\nlet kCGPDFXRegistryName: CFString\nlet kCGPDFXInfo: CFString\nlet kCGPDFXDestinationOutputProfile: CFString\nSee Also\nCreating PDF Graphics Contexts\ninit?(CFURL, mediaBox: UnsafePointer<CGRect>?, CFDictionary?)\nCreates a URL-based PDF graphics context.\ninit?(consumer: CGDataConsumer, mediaBox: UnsafePointer<CGRect>?, CFDictionary?)\nCreates a PDF graphics context."
  },
  {
    "title": "init(_:mediaBox:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1456290-init",
    "html": "Parameters\nurl\n\nA Core Foundation URL that specifies where you want to place the resulting PDF file.\n\nmediaBox\n\nA rectangle that specifies the bounds of the PDF. The origin of the rectangle should typically be (0,0). The CGPDFContextCreateWithURL function uses this rectangle as the default page media bounding box. If you pass NULL, CGPDFContextCreateWithURL uses a default page size of 8.5 by 11 inches (612 by 792 points).\n\nauxiliaryInfo\n\nA dictionary that specifies any additional information to be used by the PDF context when generating the PDF file, or NULL. The dictionary is retained by the new context, so on return you may safely release it.\n\nReturn Value\n\nA new PDF context, or NULL if a context could not be created. You are responsible for releasing this object using CGContextRelease.\n\nDiscussion\n\nWhen you call this function, Core Graphics creates a PDF drawing environment—that is, a graphics context—to your specifications. When you draw into the resulting context, Core Graphics renders your drawing as a series of PDF drawing commands stored in the specified location.\n\nSee Also\nCreating PDF Graphics Contexts\ninit?(consumer: CGDataConsumer, mediaBox: UnsafePointer<CGRect>?, CFDictionary?)\nCreates a PDF graphics context.\nAuxiliary Dictionary Keys\nKeys for the auxiliary info dictionary you specify when creating a PDF context."
  },
  {
    "title": "convertToDeviceSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455916-converttodevicespace",
    "html": "Parameters\npoint\n\nThe point, in user space coordinates, to transform.\n\nReturn Value\n\nThe coordinates of the point in device space coordinates.\n\nSee Also\nConverting Between Coordinate Spaces\nvar userSpaceToDeviceSpaceTransform: CGAffineTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from device space coordinates to user space coordinates.\nfunc convertToDeviceSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nfunc convertToUserSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from device space coordinate to user space coordinates.\nfunc convertToDeviceSpace(CGSize) -> CGSize\nReturns a size that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGSize) -> CGSize\nReturns a size that is transformed from device space coordinates to user space coordinates."
  },
  {
    "title": "init(consumer:mediaBox:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1454204-init",
    "html": "Parameters\nconsumer\n\nThe data consumer to receive the PDF output data.\n\nmediaBox\n\nA pointer to a rectangle that defines the size and location of the PDF page, or NULL. The origin of the rectangle should typically be (0,0). Core Graphics uses this rectangle as the default bounds of the page’s media box. If you pass NULL, Core Graphics uses a default page size of 8.5 by 11 inches (612 by 792 points).\n\nauxiliaryInfo\n\nA dictionary that specifies any additional information to be used by the PDF context when generating the PDF file, or NULL. The dictionary is retained by the new context, so on return you may safely release it. See Auxiliary Dictionary Keys for keys you can include in the dictionary.\n\nReturn Value\n\nA new PDF context, or NULL if the context cannot be created. You are responsible for releasing this object using CGContextRelease.\n\nDiscussion\n\nThis function creates a PDF drawing environment to your specifications. When you draw into the new context, Core Graphics renders your drawing as a sequence of PDF drawing commands that are passed to the data consumer object.\n\nSee Also\nCreating PDF Graphics Contexts\ninit?(CFURL, mediaBox: UnsafePointer<CGRect>?, CFDictionary?)\nCreates a URL-based PDF graphics context.\nAuxiliary Dictionary Keys\nKeys for the auxiliary info dictionary you specify when creating a PDF context."
  },
  {
    "title": "userSpaceToDeviceSpaceTransform | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/1455677-userspacetodevicespacetransform",
    "html": "Parameters\nc\n\nA graphics context.\n\nReturn Value\n\nThe affine transforms that maps the user space of the graphics context to the device space.\n\nSee Also\nConverting Between Coordinate Spaces\nfunc convertToDeviceSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from device space coordinates to user space coordinates.\nfunc convertToDeviceSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nfunc convertToUserSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from device space coordinate to user space coordinates.\nfunc convertToDeviceSpace(CGSize) -> CGSize\nReturns a size that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGSize) -> CGSize\nReturns a size that is transformed from device space coordinates to user space coordinates."
  },
  {
    "title": "CGPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpath",
    "html": "Topics\nCreating Graphics Paths\ninit(rect: CGRect, transform: UnsafePointer<CGAffineTransform>?)\nCreate an immutable path of a rectangle.\ninit(ellipseIn: CGRect, transform: UnsafePointer<CGAffineTransform>?)\nCreate an immutable path of an ellipse.\ninit(roundedRect: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: UnsafePointer<CGAffineTransform>?)\nCreate an immutable path of a rounded rectangle.\nCopying a Graphics Path\nfunc copy() -> CGPath?\nCreates an immutable copy of a graphics path.\nfunc copy(using: UnsafePointer<CGAffineTransform>?) -> CGPath?\nCreates an immutable copy of a graphics path transformed by a transformation matrix.\nfunc copy(dashingWithPhase: CGFloat, lengths: [CGFloat], transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a dashed stroke.\nfunc copy(strokingWithWidth: CGFloat, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: CGFloat, transform: CGAffineTransform) -> CGPath\nReturns a new path equivalent to the results of drawing the path with a solid stroke.\nfunc mutableCopy() -> CGMutablePath?\nCreates a mutable copy of an existing graphics path.\nfunc mutableCopy(using: UnsafePointer<CGAffineTransform>?) -> CGMutablePath?\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nExamining a Graphics Path\nvar boundingBox: CGRect\nReturns the bounding box containing all points in a graphics path.\nvar boundingBoxOfPath: CGRect\nReturns the bounding box of a graphics path.\nvar currentPoint: CGPoint\nReturns the current point in a graphics path.\nfunc contains(CGPoint, using: CGPathFillRule, transform: CGAffineTransform) -> Bool\nReturns whether the specified point is interior to the path.\nvar isEmpty: Bool\nIndicates whether or not a graphics path is empty.\nfunc isRect(UnsafeMutablePointer<CGRect>?) -> Bool\nIndicates whether or not a graphics path represents a rectangle.\nApplying a Function to the Elements of a Path\nfunc apply(info: UnsafeMutableRawPointer?, function: CGPathApplierFunction)\nFor each element in a graphics path, calls a custom applier function.\ntypealias CGPathApplierFunction\nDefines a callback function that can view an element in a graphics path.\nstruct CGPathElement\nA data structure that provides information about a path element.\nenum CGPathElementType\nThe type of element found in a path.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for Core Graphics paths.\nInstance Methods\nfunc applyWithBlock((UnsafePointer<CGPathElement>) -> Void)\nfunc componentsSeparated(using: CGPathFillRule) -> [CGPath]\nfunc flattened(threshold: CGFloat) -> CGPath\nfunc intersection(CGPath, using: CGPathFillRule) -> CGPath\nfunc intersects(CGPath, using: CGPathFillRule) -> Bool\nfunc lineIntersection(CGPath, using: CGPathFillRule) -> CGPath\nfunc lineSubtracting(CGPath, using: CGPathFillRule) -> CGPath\nfunc normalized(using: CGPathFillRule) -> CGPath\nfunc subtracting(CGPath, using: CGPathFillRule) -> CGPath\nfunc symmetricDifference(CGPath, using: CGPathFillRule) -> CGPath\nfunc union(CGPath, using: CGPathFillRule) -> CGPath\nSee Also\n2D Drawing\nclass CGContext\nA Quartz 2D drawing environment.\nclass CGImage\nA bitmap image or image mask.\nclass CGMutablePath\nA mutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nclass CGLayer\nAn offscreen context for reusing content drawn with Core Graphics."
  },
  {
    "title": "CGPSConverter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpsconverter",
    "html": "Topics\nInitializers\ninit?(info: UnsafeMutableRawPointer?, callbacks: UnsafePointer<CGPSConverterCallbacks>, options: CFDictionary?)\nCreates a new PostScript converter.\nInstance Properties\nvar isConverting: Bool\nChecks whether the converter is currently converting data.\nType Properties\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for PostScript converters.\nInstance Methods\nfunc abort() -> Bool\nTells a PostScript converter to abort a conversion at the next available opportunity.\nfunc convert(CGDataProvider, consumer: CGDataConsumer, options: CFDictionary?) -> Bool\nUses a PostScript converter to convert PostScript data to PDF data."
  },
  {
    "title": "Core Graphics Functions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_functions",
    "html": "Topics\nFunctions\nfunc CGAcquireDisplayFadeReservation(CGDisplayReservationInterval, UnsafeMutablePointer<CGDisplayFadeReservationToken>?) -> CGError\nReserves the fade hardware for a specified time interval.\nfunc CGAssociateMouseAndMouseCursorPosition(boolean_t) -> CGError\nConnects or disconnects the mouse and cursor while an application is in the foreground.\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayFadeEffect(CGDisplayConfigRef?, CGDisplayFadeInterval, CGDisplayFadeInterval, Float, Float, Float) -> CGError\nModifies the settings of the built-in fade effect that occurs during a display configuration.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nfunc CGDisplayBounds(CGDirectDisplayID) -> CGRect\nReturns the bounds of a display in the global display coordinate space.\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayCopyAllDisplayModes(CGDirectDisplayID, CFDictionary?) -> CFArray?\nReturns information about the currently available display modes.\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayCopyDisplayMode(CGDirectDisplayID) -> CGDisplayMode?\nReturns information about a display’s current configuration.\nfunc CGDisplayCreateImage(CGDirectDisplayID) -> CGImage?\nReturns an image containing the contents of the specified display.\nfunc CGDisplayCreateImage(CGDirectDisplayID, rect: CGRect) -> CGImage?\nReturns an image containing the contents of a portion of the specified display.\nfunc CGDisplayFade(CGDisplayFadeReservationToken, CGDisplayFadeInterval, CGDisplayBlendFraction, CGDisplayBlendFraction, Float, Float, Float, boolean_t) -> CGError\nPerforms a single fade operation.\nfunc CGDisplayGammaTableCapacity(CGDirectDisplayID) -> UInt32\nReturns the capacity, or number of entries, in the gamma table for a display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display.\nfunc CGDisplayHideCursor(CGDirectDisplayID) -> CGError\nHides the mouse cursor, and increments the hide cursor count.\nfunc CGDisplayIDToOpenGLDisplayMask(CGDirectDisplayID) -> CGOpenGLDisplayMask\nMaps a display ID to an OpenGL display mask.\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayMoveCursorToPoint(CGDirectDisplayID, CGPoint) -> CGError\nMoves the mouse cursor to a specified point relative to the upper-left corner of the display.\nfunc CGDisplayPixelsHigh(CGDirectDisplayID) -> Int\nReturns the display height in pixel units.\nfunc CGDisplayPixelsWide(CGDirectDisplayID) -> Int\nReturns the display width in pixel units.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRegisterReconfigurationCallback(CGDisplayReconfigurationCallBack?, UnsafeMutableRawPointer?) -> CGError\nRegisters a callback function to be invoked whenever a local display is reconfigured.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGDisplayRemoveReconfigurationCallback(CGDisplayReconfigurationCallBack?, UnsafeMutableRawPointer?) -> CGError\nRemoves the registration of a callback function that’s invoked whenever a local display is reconfigured.\nfunc CGDisplayRestoreColorSyncSettings()\nRestores the gamma tables to the values in the user’s ColorSync display profile.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplaySetDisplayMode(CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nSwitches a display to a different mode.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display.\nfunc CGDisplayShowCursor(CGDirectDisplayID) -> CGError\nDecrements the hide cursor count, and shows the mouse cursor if the count is 0.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor.\nfunc CGGetActiveDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are active for drawing.\nfunc CGGetDisplayTransferByFormula(CGDirectDisplayID, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?) -> CGError\nGets the coefficients of the gamma transfer formula for a display.\nfunc CGGetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets the values in the RGB gamma tables for a display.\nfunc CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that corresponds to the bits set in an OpenGL display mask.\nfunc CGGetDisplaysWithPoint(CGPoint, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of online displays with bounds that include the specified point.\nfunc CGGetDisplaysWithRect(CGRect, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of online displays with bounds that intersect the specified rectangle.\nfunc CGGetEventTapList(UInt32, UnsafeMutablePointer<CGEventTapInformation>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of currently installed event taps.\nfunc CGGetLastMouseDelta() -> (x: Int32, y: Int32)\nReports the change in mouse position since the last mouse movement event received by the application.\nfunc CGGetOnlineDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are online (active, mirrored, or sleeping).\nfunc CGMainDisplayID() -> CGDirectDisplayID\nReturns the display ID of the main display.\nfunc CGOpenGLDisplayMaskToDisplayID(CGOpenGLDisplayMask) -> CGDirectDisplayID\nMaps an OpenGL display mask to a display ID.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGReleaseDisplayFadeReservation(CGDisplayFadeReservationToken) -> CGError\nReleases a display fade reservation, and unfades the display if needed.\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGSessionCopyCurrentDictionary() -> CFDictionary?\nReturns information about the caller’s window server session.\nfunc CGSetDisplayTransferByByteTable(CGDirectDisplayID, UInt32, UnsafePointer<UInt8>, UnsafePointer<UInt8>, UnsafePointer<UInt8>) -> CGError\nSets the byte values in the 8-bit RGB gamma tables for a display.\nfunc CGSetDisplayTransferByFormula(CGDirectDisplayID, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue) -> CGError\nSets the gamma function for a display by specifying the coefficients of the gamma transfer formula.\nfunc CGSetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?) -> CGError\nSets the color gamma function for a display by specifying the values in the RGB gamma tables.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display.\nfunc CGWarpMouseCursorPosition(CGPoint) -> CGError\nMoves the mouse cursor without generating events.\nfunc CGWindowLevelForKey(CGWindowLevelKey) -> CGWindowLevel\nReturns the window level that corresponds to one of the standard window types.\nfunc CGWindowListCopyWindowInfo(CGWindowListOption, CGWindowID) -> CFArray?\nGenerates and returns information about the selected windows in the current user session.\nfunc CGWindowListCreateDescriptionFromArray(CFArray?) -> CFArray?\nGenerates and returns information about windows with the specified window IDs.\nfunc CGWindowListCreateImage(CGRect, CGWindowListOption, CGWindowID, CGWindowImageOption) -> CGImage?\nReturns a composite image based on a dynamically generated list of windows.\nDeprecated\nfunc CGWindowServerCreateServerPort() -> CFMachPort?\nfunc acos(CGFloat) -> CGFloat\nfunc acosh(CGFloat) -> CGFloat\nfunc asin(CGFloat) -> CGFloat\nfunc asinh(CGFloat) -> CGFloat\nfunc atan(CGFloat) -> CGFloat\nfunc atan2(CGFloat, CGFloat) -> CGFloat\nfunc atanh(CGFloat) -> CGFloat\nfunc cbrt(CGFloat) -> CGFloat\nfunc copysign(CGFloat, CGFloat) -> CGFloat\nfunc cos(CGFloat) -> CGFloat\nfunc cosh(CGFloat) -> CGFloat\nfunc erf(CGFloat) -> CGFloat\nfunc erfc(CGFloat) -> CGFloat\nfunc exp(CGFloat) -> CGFloat\nfunc exp2(CGFloat) -> CGFloat\nfunc expm1(CGFloat) -> CGFloat\nfunc fdim(CGFloat, CGFloat) -> CGFloat\nfunc fmax(CGFloat, CGFloat) -> CGFloat\nfunc fmin(CGFloat, CGFloat) -> CGFloat\nfunc hypot(CGFloat, CGFloat) -> CGFloat\nfunc ilogb(CGFloat) -> Int\nDeprecated\nfunc CGColorSpaceCreateLinearized(CGColorSpace) -> CGColorSpace?\ninit?(src: CGColorSpace, dst: CGColorSpace)\nCreates a conversion between two specified color spaces.\nfunc j0(CGFloat) -> CGFloat\nfunc j1(CGFloat) -> CGFloat\nfunc jn(Int, CGFloat) -> CGFloat\nfunc ldexp(CGFloat, Int) -> CGFloat\nDeprecated\nfunc lgamma(CGFloat) -> (CGFloat, Int)\nfunc log(CGFloat) -> CGFloat\nfunc log10(CGFloat) -> CGFloat\nfunc log1p(CGFloat) -> CGFloat\nfunc log2(CGFloat) -> CGFloat\nfunc logb(CGFloat) -> CGFloat\nfunc nan(String) -> CGFloat\nDeprecated\nfunc nearbyint(CGFloat) -> CGFloat\nfunc nextafter(CGFloat, CGFloat) -> CGFloat\nfunc pow(CGFloat, CGFloat) -> CGFloat\nfunc remquo(CGFloat, CGFloat) -> (CGFloat, Int)\nfunc rint(CGFloat) -> CGFloat\nfunc sin(CGFloat) -> CGFloat\nfunc sinh(CGFloat) -> CGFloat\nfunc tan(CGFloat) -> CGFloat\nfunc tanh(CGFloat) -> CGFloat\nfunc tgamma(CGFloat) -> CGFloat\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for a color conversion info data type.\nfunc y0(CGFloat) -> CGFloat\nfunc y1(CGFloat) -> CGFloat\nfunc yn(Int, CGFloat) -> CGFloat\nfunc CGAffineTransformMake(CGFloat, CGFloat, CGFloat, CGFloat, CGFloat, CGFloat) -> CGAffineTransform\nReturns an affine transformation matrix constructed from values you provide.\nfunc CGColorSpaceCreateCopyWithStandardRange(CGColorSpace) -> CGColorSpace\nfunc CGColorSpaceCreateExtended(CGColorSpace) -> CGColorSpace?\nfunc CGColorSpaceCreateExtendedLinearized(CGColorSpace) -> CGColorSpace?\nfunc CGColorSpaceCreateWithColorSyncProfile(ColorSyncProfile?, CFDictionary?) -> CGColorSpace?\nfunc CGColorSpaceIsHLGBased(CGColorSpace) -> Bool\nfunc CGColorSpaceIsPQBased(CGColorSpace) -> Bool\nfunc CGColorSpaceUsesITUR_2100TF(CGColorSpace) -> Bool\nfunc CGContextDrawConicGradient(CGContext, CGGradient?, CGPoint, CGFloat)\nfunc CGConvertColorDataWithFormat(Int, Int, UnsafeMutableRawPointer!, CGColorDataFormat, UnsafeMutableRawPointer!, CGColorDataFormat, CFDictionary!) -> Bool\nfunc CGEnableEventStateCombining(boolean_t) -> CGError\nEnables or disables the merging of actual key and mouse state with the application-specified state in a synthetic event.\nDeprecated\nfunc CGErrorSetCallback(CGErrorCallback!)\nfunc CGInhibitLocalEvents(boolean_t) -> CGError\nTurns off local hardware events in the current session.\nDeprecated\nfunc CGPDFArrayApplyBlock(CGPDFArrayRef, CGPDFArrayApplierBlock, UnsafeMutableRawPointer?)\nfunc CGPDFContextBeginTag(CGContext, CGPDFTagType, CFDictionary)\nfunc CGPDFContextEndTag(CGContext)\nfunc CGPDFContextSetOutline(CGContext, CFDictionary?)\nfunc CGPDFDictionaryApplyBlock(CGPDFDictionaryRef, CGPDFDictionaryApplierBlock, UnsafeMutableRawPointer?)\nfunc CGPDFScannerStop(CGPDFScannerRef)\nfunc CGPointMake(CGFloat, CGFloat) -> CGPoint\nReturns a point with the specified coordinates.\nfunc CGPointMakeWithDictionaryRepresentation(CFDictionary, UnsafeMutablePointer<CGPoint>) -> Bool\nFills in a point using the contents of the specified dictionary.\nfunc CGPostKeyboardEvent(CGCharCode, CGKeyCode, boolean_t) -> CGError\nSynthesizes a low-level keyboard event on the local machine.\nDeprecated\nfunc CGPreflightListenEventAccess() -> Bool\nfunc CGPreflightPostEventAccess() -> Bool\nfunc CGPreflightScreenCaptureAccess() -> Bool\nfunc CGRectMake(CGFloat, CGFloat, CGFloat, CGFloat) -> CGRect\nReturns a rectangle with the specified coordinate and size values.\nfunc CGRectMakeWithDictionaryRepresentation(CFDictionary, UnsafeMutablePointer<CGRect>) -> Bool\nFills in a rectangle using the contents of the specified dictionary.\nfunc CGRegisterScreenRefreshCallback(CGScreenRefreshCallback, UnsafeMutableRawPointer?) -> CGError\nRegisters a callback function to be invoked when local displays are refreshed or modified.\nDeprecated\nfunc CGReleaseScreenRefreshRects(UnsafeMutablePointer<CGRect>?)\nDeallocates a list of rectangles that represent changed areas on local displays.\nDeprecated\nfunc CGRequestListenEventAccess() -> Bool\nfunc CGRequestPostEventAccess() -> Bool\nfunc CGRequestScreenCaptureAccess() -> Bool\nfunc CGScreenRegisterMoveCallback(CGScreenUpdateMoveCallback, UnsafeMutableRawPointer?) -> CGError\nRegisters a callback function to be invoked when an area of the display is moved.\nDeprecated\nfunc CGScreenUnregisterMoveCallback(CGScreenUpdateMoveCallback, UnsafeMutableRawPointer?)\nRemoves a previously registered callback function invoked when an area of the display is moved.\nDeprecated\nfunc CGSetLocalEventsFilterDuringSuppressionState(CGEventFilterMask, CGEventSuppressionState) -> CGError\nFilters local hardware events from the keyboard and mouse during the short interval after a synthetic event is posted.\nDeprecated\nfunc CGSetLocalEventsSuppressionInterval(CFTimeInterval) -> CGError\nSets the time interval in seconds that local hardware events are suppressed after posting a synthetic event.\nDeprecated\nfunc CGSizeMake(CGFloat, CGFloat) -> CGSize\nReturns a size with the specified dimension values.\nfunc CGSizeMakeWithDictionaryRepresentation(CFDictionary, UnsafeMutablePointer<CGSize>) -> Bool\nFills in a size using the contents of the specified dictionary.\nfunc CGUnregisterScreenRefreshCallback(CGScreenRefreshCallback, UnsafeMutableRawPointer?)\nRemoves a previously registered callback function invoked when local displays are refreshed or modified.\nDeprecated\nfunc CGVectorMake(CGFloat, CGFloat) -> CGVector\nReturns a vector with the specified dimension values.\nfunc CGWaitForScreenRefreshRects(UnsafeMutablePointer<UnsafeMutablePointer<CGRect>?>?, UnsafeMutablePointer<UInt32>?) -> CGError\nWaits for screen refresh operations.\nDeprecated\nfunc CGWaitForScreenUpdateRects(CGScreenUpdateOperation, UnsafeMutablePointer<CGScreenUpdateOperation>?, UnsafeMutablePointer<UnsafeMutablePointer<CGRect>?>?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<CGScreenUpdateMoveDelta>?) -> CGError\nWaits for screen update operations.\nDeprecated\nfunc CGColorSpaceUsesExtendedRange(CGColorSpace) -> Bool"
  },
  {
    "title": "clip(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext/2427152-clip",
    "html": "Parameters\nrule\n\nThe rule for determining which areas to treat as the interior of the path. See CGPathFillRule.\n\nThis parameter defaults to the CGPathFillRule.winding rule if unspecified.\n\nDiscussion\n\nA clipping path restricts the paintable area: painting operations take effect only for those areas in the interior of the clipping path. This method uses the specified rule to calculate the intersection of the current path with the current clipping path. The path resulting from the intersection is used as the new current clipping path for subsequent painting operations.\n\nIf the current path contains any non-closed subpaths, this method treats each subpath as if it had been closed with the closePath() method, then applies the specified rule to determine which areas to fill.\n\nAfter determining the new clipping path, this method clears the context's current path.\n\nUnlike the current path, the current clipping path is part of the graphics state. Therefore, to re-enlarge the paintable area by restoring the clipping path to a prior state, you must save the graphics state before you clip and restore the graphics state after you’ve completed any clipped drawing.\n\nSee Also\nWorking with the Current Clipping Path\nfunc clip(to: CGRect)\nSets the clipping path to the intersection of the current clipping path with the area defined by the specified rectangle.\nfunc clip(to: [CGRect])\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles.\nfunc clip(to: CGRect, mask: CGImage)\nMaps a mask into the specified rectangle and intersects it with the current clipping area of the graphics context.\nvar boundingBoxOfClipPath: CGRect\nReturns the bounding box of a clipping path."
  },
  {
    "title": "CGPathFillRule | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpathfillrule",
    "html": "Overview\n\nWhen filling a path, regions that a fill rule defines as interior to the path are painted. When clipping with a path, regions interior to the path remain visible after clipping.\n\nTopics\nEnumeration Cases\ncase evenOdd\nA rule that considers a region to be interior to a path based on the number of times it is enclosed by path elements.\ncase winding\nA rule that considers a region to be interior to a path if the winding number for that region is nonzero.\nType Aliases\ntypealias CGPathFillRule.RawValue\nInitializers\ninit?(rawValue: Int)\nInstance Properties\nvar hashValue: Int\nvar rawValue: Int\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func != (CGPathFillRule, CGPathFillRule) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Core Graphics Data Types | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_data_types-am9",
    "html": "Topics\nData Types\ntypealias CGErrorCallback\ntypealias CGPDFArrayApplierBlock\ntypealias CGPDFDictionaryApplierBlock\nstruct CGPDFTagProperty\ntypealias CGPSConverterBeginDocumentCallback\nPerforms custom tasks at the beginning of a PostScript conversion process.\ntypealias CGPSConverterBeginPageCallback\nPerforms custom tasks at the beginning of each page in a PostScript conversion process.\ntypealias CGPSConverterEndDocumentCallback\nPerforms custom tasks at the end of a PostScript conversion process.\ntypealias CGPSConverterEndPageCallback\nPerforms custom tasks at the end of each page of a PostScript conversion process.\ntypealias CGPSConverterMessageCallback\nPasses messages generated during a PostScript conversion process.\ntypealias CGPSConverterProgressCallback\nReports progress periodically during a PostScript conversion process.\ntypealias CGPSConverterReleaseInfoCallback\nPerforms custom tasks when a PostScript converter is released.\ntypealias CGPathApplyBlock"
  },
  {
    "title": "Core Graphics Enumerations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_enumerations",
    "html": "Topics\nEnumerations\nenum CGColorConversionInfoTransformType\nConstants describing how a color conversion uses color spaces.\nenum CGColorRenderingIntent\nHandling options for colors that are not located within the destination color space of a graphics context.\nenum CGDisplayStreamFrameStatus\nDescribes a frame update event.\nenum CGDisplayStreamUpdateRectType\nUse these constants to determine which rectangles your app is interested in.\nenum CGError\nA uniform type for result codes returned by functions in Core Graphics.\nenum CGEventField\nConstants used as keys to access specialized fields in low-level events.\nenum CGEventMouseSubtype\nConstants used with the CGEventField.mouseEventSubtype event field.\nenum CGEventSourceStateID\nConstants that specify the possible source states of an event source.\nenum CGEventSuppressionState\nSpecify the event suppression states that can occur after posting an event.\nenum CGEventTapLocation\nConstants that specify possible tapping points for events.\nenum CGEventTapOptions\nConstants that specify whether a new event tap is an active filter or a passive listener.\nenum CGEventTapPlacement\nConstants that specify where a new event tap is inserted into the list of active event taps.\nenum CGEventType\nConstants that specify the different types of input events.\nenum CGGesturePhase\nenum CGGlyphDeprecatedEnum\nenum CGImageByteOrderInfo\nenum CGMomentumScrollPhase\nenum CGMouseButton\nConstants that specify buttons on a one, two, or three-button mouse.\nenum CGScrollEventUnit\nConstants that specify the unit of measurement for a scrolling event.\nenum CGScrollPhase\nenum CGWindowBackingType\nThe data type used to specify the backing option for a given window.\nenum CGWindowLevelKey\nKeys that represent the standard window levels in macOS. Quartz includes these keys to support application frameworks like Cocoa. Applications do not need to use them directly.\nenum CGWindowSharingType\nThe data type used to specify the sharing mode used by a window.\nenum CGImagePixelFormatInfo\nenum CGLineCap\nStyles for rendering the endpoint of a stroked line.\nenum CGLineJoin\nJunction types for stroked lines.\nenum CGPDFTagType\nenum CGTextEncoding\nText encodings for fonts."
  },
  {
    "title": "Core Graphics Constants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_constants",
    "html": "Topics\nConstants\nclass let conversionBlackPointCompensation: CFString\nAn option for whether to apply black point compensation when converting between color profiles.\nvar kCGDisplayBitsPerPixel: String\nSpecifies a CFNumber integer value that represents the number of bits in a pixel.\nvar kCGDisplayBitsPerSample: String\nSpecifies a CFNumber integer value that represents the number of bits in an individual sample (for example, a color value in an RGB pixel).\nvar kCGDisplayBlendNormal: Double\nThe blend color is not applied at the start or end of a fade operation.\nvar kCGDisplayBlendSolidColor: Double\nThe user sees only the blend color at the start or end of a fade operation.\nvar kCGDisplayBytesPerRow: String\nSpecifies a CFNumber integer value that represents the number of bytes in a row on the display.\nvar kCGDisplayFadeReservationInvalidToken: Int32\nvar kCGDisplayHeight: String\nSpecifies a CFNumber integer value that represents the height of the display in pixels.\nvar kCGDisplayIOFlags: String\nSpecifies a CFNumber integer value that contains the I/O Kit display mode flags. For more information, see the header file IOKit/IOGraphicsTypes.h.\nvar kCGDisplayMode: String\nSpecifies a CFNumber integer value that represents the I/O Kit display mode number.\nvar kCGDisplayModeIsInterlaced: String\nSpecifies a CFBoolean value indicating that the I/O Kit interlace mode flag is set.\nvar kCGDisplayModeIsSafeForHardware: String\nSpecifies a CFBoolean value indicating that the display mode doesn’t need a confirmation dialog to be set.\nvar kCGDisplayModeIsStretched: String\nSpecifies a CFBoolean value indicating that the I/O Kit stretched mode flag is set.\nvar kCGDisplayModeIsTelevisionOutput: String\nSpecifies a CFBoolean value indicating that the I/O Kit television output mode flag is set.\nvar kCGDisplayModeUsableForDesktopGUI: String\nSpecifies a CFBoolean value that indicates whether the display is suitable for use with the macOS graphical user interface. The criteria include factors such as sufficient width and height and adequate pixel depth.\nvar kCGDisplayRefreshRate: String\nSpecifies a CFNumber double-precision floating point value that represents the refresh rate of a CRT display. Some displays may not use conventional video vertical and horizontal sweep in painting the screen; these displays report a refresh rate of 0.\nvar kCGDisplaySamplesPerPixel: String\nSpecifies a CFNumber integer value that represents the number of samples in a pixel.\nlet kCGDisplayShowDuplicateLowResolutionModes: CFString\nvar kCGDisplayWidth: String\nSpecifies a CFNumber integer value that represents the width of the display in pixels.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\nvar kCGIODisplayModeID: String\nvar kCGMouseDownEventMaskingDeadSwitchTimeout: Double\nvar kCGNotifyEventTapAdded: String\nvar kCGNotifyEventTapRemoved: String\nvar kCGNotifyGUIConsoleSessionChanged: String\nvar kCGNotifyGUISessionUserChanged: String\nvar kCGNumReservedWindowLevels: Int32\nvar kCGSessionConsoleSetKey: String\nA CFNumber 32-bit unsigned integer value that represents a set of hardware composing a console.\nvar kCGSessionLoginDoneKey: String\nA CFBoolean value indicating whether the login operation has been done.\nvar kCGSessionOnConsoleKey: String\nA CFBoolean value indicating whether the session is on a console.\nvar kCGSessionUserIDKey: String\nA CFNumber 32-bit unsigned integer value that encodes a user ID for the session’s current user.\nvar kCGSessionUserNameKey: String\nA CFString value that encodes the session’s short user name as set by the login operation.\nlet kCGWindowAlpha: CFString\nlet kCGWindowBackingLocationVideoMemory: CFString\nlet kCGWindowBounds: CFString\nlet kCGWindowIsOnscreen: CFString\nlet kCGWindowLayer: CFString\nlet kCGWindowMemoryUsage: CFString\nlet kCGWindowName: CFString\nlet kCGWindowNumber: CFString\nlet kCGWindowOwnerName: CFString\nlet kCGWindowOwnerPID: CFString\nlet kCGWindowSharingState: CFString\nlet kCGWindowStoreType: CFString\nlet CGPointZero: CGPoint\nA point constant with location (0,0). The zero point is equivalent to CGPointMake(0,0).\nlet CGRectZero: CGRect\nA rectangle constant with location (0,0), and width and height of 0. The zero rectangle is equivalent to CGRectMake(0,0,0,0).\nlet CGSizeZero: CGSize\nA size constant with width and height of 0. The zero size is equivalent to CGSizeMake(0,0).\nvar CG_HDR_BT_2100: Int32\nlet kCGBitmapByteOrder16Host: CGBitmapInfo\n16-bit, host endian format.\nlet kCGBitmapByteOrder32Host: CGBitmapInfo\n32-bit, host endian format.\nlet kCGColorSpaceExtendedRange: CFString\nvar kCGNullDirectDisplay: CGDirectDisplayID\nA value that will never correspond to actual hardware.\nvar kCGNullWindowID: CGWindowID\nvar kCGNumReservedBaseWindowLevels: Int32\nlet kCGPDFContextAccessPermissions: CFString\nlet kCGPDFContextCreateLinearizedPDF: CFString\nlet kCGPDFContextCreatePDFA: CFString\nlet kCGPDFOutlineChildren: CFString\nlet kCGPDFOutlineDestination: CFString\nlet kCGPDFOutlineDestinationRect: CFString\nlet kCGPDFOutlineTitle: CFString"
  },
  {
    "title": "Quartz Display Services | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_display_services",
    "html": "Overview\n\nYou can use Quartz Display Services to:\n\nExamine and change display mode properties such as width, height, and pixel depth\n\nConfigure a set of displays in a single operation\n\nCapture one or more displays for exclusive use\n\nStream the contents of a display\n\nPerform fade effects\n\nActivate display mirroring\n\nConfigure gamma color correction tables\n\nReceive notification of screen update operations\n\nTopics\nFinding Displays\nfunc CGMainDisplayID() -> CGDirectDisplayID\nReturns the display ID of the main display.\nfunc CGGetOnlineDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are online (active, mirrored, or sleeping).\nfunc CGGetActiveDisplayList(UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that are active for drawing.\nfunc CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of displays that corresponds to the bits set in an OpenGL display mask.\nfunc CGGetDisplaysWithPoint(CGPoint, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nProvides a list of online displays with bounds that include the specified point.\nfunc CGGetDisplaysWithRect(CGRect, UInt32, UnsafeMutablePointer<CGDirectDisplayID>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of online displays with bounds that intersect the specified rectangle.\nfunc CGOpenGLDisplayMaskToDisplayID(CGOpenGLDisplayMask) -> CGDirectDisplayID\nMaps an OpenGL display mask to a display ID.\nfunc CGDisplayIDToOpenGLDisplayMask(CGDirectDisplayID) -> CGOpenGLDisplayMask\nMaps a display ID to an OpenGL display mask.\nCapturing and Releasing Displays\nfunc CGDisplayCapture(CGDirectDisplayID) -> CGError\nObtains exclusive use of a display, preventing other applications and system services from using the display or changing its configuration.\nfunc CGDisplayCaptureWithOptions(CGDirectDisplayID, CGCaptureOptions) -> CGError\nObtains exclusive use of a display for an application using the options you specify.\nfunc CGDisplayRelease(CGDirectDisplayID) -> CGError\nReleases a captured display.\nfunc CGDisplayIsCaptured(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is captured.\nDeprecated\nfunc CGCaptureAllDisplays() -> CGError\nObtains exclusive use of all active displays, preventing other applications and system services from using the display or changing its configuration.\nfunc CGCaptureAllDisplaysWithOptions(CGCaptureOptions) -> CGError\nCaptures all attached displays, using the specified options.\nfunc CGReleaseAllDisplays() -> CGError\nReleases all captured displays.\nfunc CGShieldingWindowID(CGDirectDisplayID) -> CGWindowID\nReturns the window ID of the shield window for a captured display.\nfunc CGShieldingWindowLevel() -> CGWindowLevel\nReturns the window level of the shield window for a captured display.\nfunc CGDisplayGetDrawingContext(CGDirectDisplayID) -> CGContext?\nReturns a graphics context suitable for drawing to a captured display.\nCreating Images from the Display\nfunc CGDisplayCreateImage(CGDirectDisplayID) -> CGImage?\nReturns an image containing the contents of the specified display.\nfunc CGDisplayCreateImage(CGDirectDisplayID, rect: CGRect) -> CGImage?\nReturns an image containing the contents of a portion of the specified display.\nConfiguring Displays\nfunc CGBeginDisplayConfiguration(UnsafeMutablePointer<CGDisplayConfigRef?>?) -> CGError\nBegins a new set of display configuration changes.\nfunc CGCancelDisplayConfiguration(CGDisplayConfigRef?) -> CGError\nCancels a set of display configuration changes.\nfunc CGCompleteDisplayConfiguration(CGDisplayConfigRef?, CGConfigureOption) -> CGError\nCompletes a set of display configuration changes.\nfunc CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef?, CGDirectDisplayID, CGDirectDisplayID) -> CGError\nChanges the configuration of a mirroring set.\nfunc CGConfigureDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nDeprecated\nfunc CGConfigureDisplayOrigin(CGDisplayConfigRef?, CGDirectDisplayID, Int32, Int32) -> CGError\nConfigures the origin of a display relative to the global display coordinate space.\nfunc CGRestorePermanentDisplayConfiguration()\nRestores the permanent display configuration settings for the current user.\nfunc CGConfigureDisplayStereoOperation(CGDisplayConfigRef?, CGDirectDisplayID, boolean_t, boolean_t) -> CGError\nEnables or disables stereo operation for a display, as part of a display configuration.\nfunc CGDisplaySetStereoOperation(CGDirectDisplayID, boolean_t, boolean_t, CGConfigureOption) -> CGError\nImmediately enables or disables stereo operation for a display.\nfunc CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef?, CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nConfigures the display mode of a display.\nGetting the Display Configuration\nfunc CGDisplayCopyColorSpace(CGDirectDisplayID) -> CGColorSpace\nReturns the color space for a display.\nfunc CGDisplayIOServicePort(CGDirectDisplayID) -> io_service_t\nReturns the I/O Kit service port of the specified display.\nDeprecated\nfunc CGDisplayIsActive(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is active.\nfunc CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is always in a mirroring set.\nfunc CGDisplayIsAsleep(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is sleeping (and is therefore not drawable).\nfunc CGDisplayIsBuiltin(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is built-in, such as the internal display in portable systems.\nfunc CGDisplayIsInHWMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a hardware mirroring set.\nfunc CGDisplayIsInMirrorSet(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is in a mirroring set.\nfunc CGDisplayIsMain(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is the main display.\nfunc CGDisplayIsOnline(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is connected or online.\nfunc CGDisplayIsStereo(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether a display is running in a stereo graphics mode.\nfunc CGDisplayMirrorsDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nFor a secondary display in a mirroring set, returns the primary display.\nfunc CGDisplayModelNumber(CGDirectDisplayID) -> UInt32\nReturns the model number of a display monitor.\nfunc CGDisplayPrimaryDisplay(CGDirectDisplayID) -> CGDirectDisplayID\nReturns the primary display in a hardware mirroring set.\nfunc CGDisplayRotation(CGDirectDisplayID) -> Double\nReturns the rotation angle of a display in degrees.\nfunc CGDisplayScreenSize(CGDirectDisplayID) -> CGSize\nReturns the width and height of a display in millimeters.\nfunc CGDisplaySerialNumber(CGDirectDisplayID) -> UInt32\nReturns the serial number of a display monitor.\nfunc CGDisplayUnitNumber(CGDirectDisplayID) -> UInt32\nReturns the logical unit number of a display.\nfunc CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID) -> boolean_t\nReturns a Boolean value indicating whether Quartz is using OpenGL-based window acceleration (Quartz Extreme) to render in a display.\nfunc CGDisplayVendorNumber(CGDirectDisplayID) -> UInt32\nReturns the vendor number of the specified display’s monitor.\nRegistering for Notification of Display Configuration Changes\n\nThese functions are used to register and unregister a callback function for notification of display configuration changes.\n\nfunc CGDisplayRegisterReconfigurationCallback(CGDisplayReconfigurationCallBack?, UnsafeMutableRawPointer?) -> CGError\nRegisters a callback function to be invoked whenever a local display is reconfigured.\nfunc CGDisplayRemoveReconfigurationCallback(CGDisplayReconfigurationCallBack?, UnsafeMutableRawPointer?) -> CGError\nRemoves the registration of a callback function that’s invoked whenever a local display is reconfigured.\nRetrieving Display Parameters\nfunc CGDisplayBounds(CGDirectDisplayID) -> CGRect\nReturns the bounds of a display in the global display coordinate space.\nfunc CGDisplayPixelsHigh(CGDirectDisplayID) -> Int\nReturns the display height in pixel units.\nfunc CGDisplayPixelsWide(CGDirectDisplayID) -> Int\nReturns the display width in pixel units.\nCreating and Managing Display Modes\nfunc CGDisplayAvailableModes(CGDirectDisplayID) -> CFArray?\nReturns information about the currently available display modes.\nDeprecated\nfunc CGDisplayBestModeForParameters(CGDirectDisplayID, Int, Int, Int, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth and screen size.\nDeprecated\nfunc CGDisplayBestModeForParametersAndRefreshRate(CGDirectDisplayID, Int, Int, Int, CGRefreshRate, UnsafeMutablePointer<boolean_t>?) -> CFDictionary?\nReturns information about the display mode closest to a specified depth, screen size, and refresh rate.\nDeprecated\nfunc CGDisplayCurrentMode(CGDirectDisplayID) -> CFDictionary?\nReturns information about the current display mode.\nDeprecated\nfunc CGDisplaySwitchToMode(CGDirectDisplayID, CFDictionary?) -> CGError\nSwitches a display to a different mode.\nDeprecated\nfunc CGDisplayCopyDisplayMode(CGDirectDisplayID) -> CGDisplayMode?\nReturns information about a display’s current configuration.\nfunc CGDisplayCopyAllDisplayModes(CGDirectDisplayID, CFDictionary?) -> CFArray?\nReturns information about the currently available display modes.\nfunc CGDisplaySetDisplayMode(CGDirectDisplayID, CGDisplayMode?, CFDictionary?) -> CGError\nSwitches a display to a different mode.\nGetting Information About a Display Mode\nvar width: Int\nReturns the width of the specified display mode.\nvar height: Int\nReturns the height of the specified display mode.\nvar pixelEncoding: CFString?\nReturns the pixel encoding of the specified display mode.\nDeprecated\nvar refreshRate: Double\nReturns the refresh rate of the specified display mode.\nvar ioFlags: UInt32\nReturns the I/O Kit flags of the specified display mode.\nvar ioDisplayModeID: Int32\nReturns the I/O Kit display mode ID of the specified display mode.\nfunc isUsableForDesktopGUI() -> Bool\nReturns a Boolean value indicating whether the specified display mode is usable for a desktop graphical user interface.\nclass var typeID: CFTypeID\nReturns the type identifier of Quartz display modes.\nAdjusting the Display Gamma\nfunc CGSetDisplayTransferByFormula(CGDirectDisplayID, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue, CGGammaValue) -> CGError\nSets the gamma function for a display by specifying the coefficients of the gamma transfer formula.\nfunc CGGetDisplayTransferByFormula(CGDirectDisplayID, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?) -> CGError\nGets the coefficients of the gamma transfer formula for a display.\nfunc CGSetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?, UnsafePointer<CGGammaValue>?) -> CGError\nSets the color gamma function for a display by specifying the values in the RGB gamma tables.\nfunc CGGetDisplayTransferByTable(CGDirectDisplayID, UInt32, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<CGGammaValue>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets the values in the RGB gamma tables for a display.\nfunc CGSetDisplayTransferByByteTable(CGDirectDisplayID, UInt32, UnsafePointer<UInt8>, UnsafePointer<UInt8>, UnsafePointer<UInt8>) -> CGError\nSets the byte values in the 8-bit RGB gamma tables for a display.\nfunc CGDisplayRestoreColorSyncSettings()\nRestores the gamma tables to the values in the user’s ColorSync display profile.\nfunc CGDisplayGammaTableCapacity(CGDirectDisplayID) -> UInt32\nReturns the capacity, or number of entries, in the gamma table for a display.\nDisplay Fade Effects\nfunc CGConfigureDisplayFadeEffect(CGDisplayConfigRef?, CGDisplayFadeInterval, CGDisplayFadeInterval, Float, Float, Float) -> CGError\nModifies the settings of the built-in fade effect that occurs during a display configuration.\nfunc CGAcquireDisplayFadeReservation(CGDisplayReservationInterval, UnsafeMutablePointer<CGDisplayFadeReservationToken>?) -> CGError\nReserves the fade hardware for a specified time interval.\nfunc CGDisplayFade(CGDisplayFadeReservationToken, CGDisplayFadeInterval, CGDisplayBlendFraction, CGDisplayBlendFraction, Float, Float, Float, boolean_t) -> CGError\nPerforms a single fade operation.\nfunc CGDisplayFadeOperationInProgress() -> boolean_t\nReturns a Boolean value indicating whether a fade operation is currently in progress.\nDeprecated\nfunc CGReleaseDisplayFadeReservation(CGDisplayFadeReservationToken) -> CGError\nReleases a display fade reservation, and unfades the display if needed.\nControlling the Mouse Cursor\nfunc CGDisplayHideCursor(CGDirectDisplayID) -> CGError\nHides the mouse cursor, and increments the hide cursor count.\nfunc CGDisplayShowCursor(CGDirectDisplayID) -> CGError\nDecrements the hide cursor count, and shows the mouse cursor if the count is 0.\nfunc CGDisplayMoveCursorToPoint(CGDirectDisplayID, CGPoint) -> CGError\nMoves the mouse cursor to a specified point relative to the upper-left corner of the display.\nfunc CGCursorIsVisible() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is visible.\nDeprecated\nfunc CGCursorIsDrawnInFramebuffer() -> boolean_t\nReturns a Boolean value indicating whether the mouse cursor is drawn in framebuffer memory.\nDeprecated\nfunc CGAssociateMouseAndMouseCursorPosition(boolean_t) -> CGError\nConnects or disconnects the mouse and cursor while an application is in the foreground.\nfunc CGWarpMouseCursorPosition(CGPoint) -> CGError\nMoves the mouse cursor without generating events.\nfunc CGGetLastMouseDelta() -> (x: Int32, y: Int32)\nReports the change in mouse position since the last mouse movement event received by the application.\nGetting Window Server Information\nfunc CGSessionCopyCurrentDictionary() -> CFDictionary?\nReturns information about the caller’s window server session.\nfunc CGWindowServerCFMachPort() -> CFMachPort?\nReturns a Core Foundation Mach port (CFMachPort) that corresponds to the macOS window server.\nDeprecated\nfunc CGWindowLevelForKey(CGWindowLevelKey) -> CGWindowLevel\nReturns the window level that corresponds to one of the standard window types.\nStreaming the Contents of a Display\ninit?(display: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream to be used with a CFRunloop.\nDeprecated\ninit?(dispatchQueueDisplay: CGDirectDisplayID, outputWidth: Int, outputHeight: Int, pixelFormat: Int32, properties: CFDictionary?, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler?)\nCreates a new display stream whose updates are delivered to a dispatch queue.\nDeprecated\nfunc start() -> CGError\nTells a stream to start sending updates.\nDeprecated\nfunc stop() -> CGError\nTells a stream to stop sending updates.\nDeprecated\nvar runLoopSource: CFRunLoopSource?\nGets the run loop source for a display stream.\nDeprecated\nfunc getRects(CGDisplayStreamUpdateRectType, rectCount: UnsafeMutablePointer<Int>) -> UnsafePointer<CGRect>?\nReturns an array of rectangles that describe where the frame has changed since the previous frame.\nDeprecated\ninit?(mergedUpdateFirstUpdate: CGDisplayStreamUpdate?, secondUpdate: CGDisplayStreamUpdate?)\nCombines two updates into a new update that includes the metadata for both source updates.\nDeprecated\nfunc getMovedRectsDelta(dx: UnsafeMutablePointer<CGFloat>, dy: UnsafeMutablePointer<CGFloat>)\nReturn the movement delta values for a single update.\nDeprecated\nvar dropCount: Int\nReturns the number of frames that have been dropped since the last call to your update handler.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream.\nDeprecated\nclass var typeID: CFTypeID\nReturns the type identifier of a Quartz display stream update.\nDeprecated\nCallbacks\ntypealias CGDisplayReconfigurationCallBack\nA client-supplied callback function that’s invoked whenever the configuration of a local display is changed.\ntypealias CGScreenRefreshCallback\nA client-supplied callback function that’s invoked when an area of the display is modified or refreshed.\ntypealias CGScreenUpdateMoveCallback\nA client-supplied callback function invoked when an area of the display is moved.\nData Types\ntypealias CGDirectDisplayID\nA unique identifier for an attached display.\ntypealias CGDisplayBlendFraction\nThe percentage of blend color used in a fade operation.\ntypealias CGDisplayConfigRef\nA reference to a display configuration transaction.\ntypealias CGDisplayCount\nThe number of displays in various lists.\ntypealias CGDisplayErr\nA uniform type for result codes returned by functions in Quartz Display Services.\ntypealias CGDisplayFadeInterval\nThe duration in seconds of a fade operation or a fade hardware reservation.\ntypealias CGDisplayFadeReservationToken\nA token issued by Quartz when reserving one or more displays for a fade operation during a specified interval.\nclass CGDisplayMode\nA reference to a display mode object.\ntypealias CGDisplayReservationInterval\nThe time interval for a fade reservation.\ntypealias CGGammaValue\nA value used to map a color generated in software to a color supported by the display hardware.\ntypealias CGOpenGLDisplayMask\nA bitmask used in OpenGL to specify a set of attached displays.\ntypealias CGRectCount\nThe size of an array of Quartz rectangles.\ntypealias CGRefreshRate\nA display’s refresh rate in frames per second.\nstruct CGScreenUpdateMoveDelta\nThe distance, in pixel units, that an onscreen region moves.\ntypealias CGWindowLevel\nA level assigned to a window by an application framework.\nclass CGDisplayStream\nA reference to a display stream object.\nclass CGDisplayStreamUpdate\nA reference to frame update’s metadata.\ntypealias CGDisplayStreamFrameAvailableHandler\nA block called when a data stream has a new frame event to process.\nConstants\nstruct CGCaptureOptions\nConfiguration parameters that are used when capturing displays.\nstruct CGDisplayChangeSummaryFlags\nThe configuration parameters that are passed to a display reconfiguration callback function.\nstruct CGConfigureOption\nThe scope of the changes in a display configuration transaction.\nDisplay Fade Blend Fractions\nThe lower and upper bounds for blend color fractions during a display fade operation.\nDisplay Fade Constants\nValues relating to fade operations.\nDisplay Mode Standard Properties\nKeys for the standard properties in a display mode dictionary.\nDisplay Mode Optional Properties\nKeys for optional properties in a display mode dictionary.\nReserved Window Levels\nWindow level constants.\nstruct CGScreenUpdateOperation\nTypes of screen-update operations.\nenum CGWindowLevelKey\nKeys that represent the standard window levels in macOS. Quartz includes these keys to support application frameworks like Cocoa. Applications do not need to use them directly.\nWindow Server Session Properties\nThe keys for the standard properties in a window server session dictionary.\nenum CGDisplayStreamUpdateRectType\nUse these constants to determine which rectangles your app is interested in.\nenum CGDisplayStreamFrameStatus\nDescribes a frame update event.\nDisplay Stream Optional Property Keys\nThese keys are used to populate the properties dictionary used when creating a new display stream.\nDisplay Stream YCbCr to RGB conversion Matrix Options\nThese strings are used to specify a matrix for the yCbCrMatrix option.\nSee Also\nServices\nQuartz Event Services\nProvides features for managing event taps—filters for observing and altering the stream of low-level user input events in macOS.\nQuartz Window Services\nProvides information about the windows managed by the macOS window server.\nRelated Documentation\nQuartz Display Services Programming Topics"
  },
  {
    "title": "Quartz Event Services | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_event_services",
    "html": "Overview\n\nEvent taps make it possible to monitor and filter input events from several points within the system, prior to their delivery to a foreground application. Event taps complement and extend the capabilities of the Carbon event monitor mechanism, which allows an application to observe input events delivered to other processes (see the function GetEventMonitorTarget()).\n\nEvent taps are designed to serve as a Section 508 enabling technology. For example, consider a software system to assist a person with language impairments, designed to perform keyboard filtering with spoken review. Such a system could use an event tap to monitor all keystrokes, perform dictionary checks and matches, and recite the assembled word back to the user on detection of a word break in the input stream. If acceptable to the user, as indicated by an additional input keystroke or other gesture, the events would be posted into the system for delivery to the foreground application.\n\nIntroduced in OS X version 10.4, event taps provide functionality similar to the Win32 functions SetWinEventHook when used to establish an out-of-context event hook, and SendInput. Quartz Event Services also includes an older set of event-related functions declared in the file CGRemoteOperation.h. These functions are still supported, but they are not recommended for new development.\n\nTopics\nWorking With Events\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventRef.\ninit?(source: CGEventSource?)\nReturns a new Quartz event.\ninit?(withDataAllocator: CFAllocator?, data: CFData?)\nReturns a Quartz event created from a flattened data representation of the event.\ninit?(mouseEventSource: CGEventSource?, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton)\nReturns a new Quartz mouse event.\ninit?(keyboardEventSource: CGEventSource?, virtualKey: CGKeyCode, keyDown: Bool)\nReturns a new Quartz keyboard event.\nfunc copy() -> CGEvent?\nReturns a copy of an existing Quartz event.\ninit?(event: CGEvent?)\nReturns a Quartz event source created from an existing Quartz event.\nfunc setSource(CGEventSource?)\nSets the event source of a Quartz event.\nvar type: CGEventType\nReturns the event type of a Quartz event (left mouse down, for example).\nvar timestamp: CGEventTimestamp\nReturns the timestamp of a Quartz event.\nvar location: CGPoint\nReturns the location of a Quartz mouse event.\nvar unflippedLocation: CGPoint\nReturns the location of a Quartz mouse event.\nvar flags: CGEventFlags\nReturns the event flags of a Quartz event.\nfunc keyboardGetUnicodeString(maxStringLength: Int, actualStringLength: UnsafeMutablePointer<Int>?, unicodeString: UnsafeMutablePointer<UniChar>?)\nReturns the Unicode string associated with a Quartz keyboard event.\nfunc keyboardSetUnicodeString(stringLength: Int, unicodeString: UnsafePointer<UniChar>?)\nSets the Unicode string associated with a Quartz keyboard event.\nfunc getIntegerValueField(CGEventField) -> Int64\nReturns the integer value of a field in a Quartz event.\nfunc setIntegerValueField(CGEventField, value: Int64)\nSets the integer value of a field in a Quartz event.\nfunc getDoubleValueField(CGEventField) -> Double\nReturns the floating-point value of a field in a Quartz event.\nfunc setDoubleValueField(CGEventField, value: Double)\nSets the floating-point value of a field in a Quartz event.\nWorking With Event Taps\nclass func tapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap.\nclass func tapCreateForPSN(processSerialNumber: UnsafeMutableRawPointer, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: UnsafeMutableRawPointer?) -> CFMachPort?\nCreates an event tap for a specified process.\nclass func tapEnable(tap: CFMachPort, enable: Bool)\nEnables or disables an event tap.\nclass func tapIsEnabled(tap: CFMachPort) -> Bool\nReturns a Boolean value indicating whether an event tap is enabled.\nfunc tapPostEvent(CGEventTapProxy?)\nPosts a Quartz event from an event tap into the event stream.\nfunc post(tap: CGEventTapLocation)\nPosts a Quartz event into the event stream at a specified location.\nfunc postToPSN(processSerialNumber: UnsafeMutableRawPointer?)\nPosts a Quartz event into the event stream for a specific application.\nfunc CGGetEventTapList(UInt32, UnsafeMutablePointer<CGEventTapInformation>?, UnsafeMutablePointer<UInt32>?) -> CGError\nGets a list of currently installed event taps.\nWorking With Event Sources\nclass var typeID: CFTypeID\nReturns the type identifier for the opaque type CGEventSourceRef.\ninit?(stateID: CGEventSourceStateID)\nReturns a Quartz event source created with a specified source state.\nvar keyboardType: CGEventSourceKeyboardType\nReturns the keyboard type to be used with a Quartz event source.\nvar sourceStateID: CGEventSourceStateID\nReturns the source state associated with a Quartz event source.\nclass func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool\nReturns a Boolean value indicating the current button state of a Quartz event source.\nclass func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool\nReturns a Boolean value indicating the current keyboard state of a Quartz event source.\nclass func flagsState(CGEventSourceStateID) -> CGEventFlags\nReturns the current flags of a Quartz event source.\nclass func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval\nReturns the elapsed time since the last event for a Quartz event source.\nclass func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32\nReturns a count of events of a given type seen since the window server started.\nvar userData: Int64\nReturns the 64-bit user-specified data for a Quartz event source.\nfunc getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask\nReturns the mask that indicates which classes of local hardware events are enabled during event suppression.\nfunc setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)\nSets the mask that indicates which classes of local hardware events are enabled during event suppression.\nvar localEventsSuppressionInterval: CFTimeInterval\nReturns the interval that local hardware events may be suppressed following the posting of a Quartz event.\nvar pixelsPerLine: Double\nGets the scale of pixels per line in a scrolling event source.\nCallbacks\ntypealias CGEventTapCallBack\nA client-supplied callback function that’s invoked whenever an associated event tap receives a Quartz event.\nData Types\ntypealias CGButtonCount\nRepresents the number of buttons being set in a synthetic mouse event.\ntypealias CGCharCode\nRepresents a character generated by pressing one or more keys on a keyboard.\ntypealias CGEventMask\nDefines a mask that identifies the set of Quartz events to be observed in an event tap.\nclass CGEvent\nDefines an opaque type that represents a low-level hardware event.\ntypealias CGEventSourceKeyboardType\nDefines a code that represents the type of keyboard used with a specified event source.\nclass CGEventSource\nDefines an opaque type that represents the source of a Quartz event.\ntypealias CGEventTapInformation\nDefines the structure used to report information about event taps.\ntypealias CGEventTapProxy\nDefines an opaque type that represents state within the client application that’s associated with an event tap.\ntypealias CGEventTimestamp\nDefines the elapsed time in nanoseconds since startup that a Quartz event occurred.\ntypealias CGKeyCode\nRepresents the virtual key codes used in keyboard events.\ntypealias CGWheelCount\nRepresents the number of wheels being set in a scroll wheel event.\nConstants\nenum CGEventField\nConstants used as keys to access specialized fields in low-level events.\nstruct CGEventFilterMask\nSpecify masks for classes of low-level events that can be filtered during event suppression states.\nstruct CGEventFlags\nConstants that indicate the modifier key state at the time an event is created, as well as other event-related states.\nenum CGEventSourceStateID\nConstants that specify the possible source states of an event source.\nenum CGEventSuppressionState\nSpecify the event suppression states that can occur after posting an event.\nenum CGEventTapLocation\nConstants that specify possible tapping points for events.\nenum CGEventTapOptions\nConstants that specify whether a new event tap is an active filter or a passive listener.\nenum CGEventTapPlacement\nConstants that specify where a new event tap is inserted into the list of active event taps.\nenum CGEventType\nConstants that specify the different types of input events.\nenum CGMouseButton\nConstants that specify buttons on a one, two, or three-button mouse.\nenum CGEventMouseSubtype\nConstants used with the CGEventField.mouseEventSubtype event field.\nenum CGScrollEventUnit\nConstants that specify the unit of measurement for a scrolling event.\nSee Also\nServices\nQuartz Display Services\nProvides direct access to features in the macOS window server for configuring and controlling display hardware.\nQuartz Window Services\nProvides information about the windows managed by the macOS window server."
  },
  {
    "title": "Quartz Window Services | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/quartz_window_services",
    "html": "Overview\n\nThis includes the onscreen windows seen on the user’s desktop and any offscreen windows used by the running applications. You can also use Quartz Window Services to generate images based on the contents of windows.\n\nTopics\nGetting Window Information\nfunc CGWindowListCopyWindowInfo(CGWindowListOption, CGWindowID) -> CFArray?\nGenerates and returns information about the selected windows in the current user session.\nfunc CGWindowListCreateDescriptionFromArray(CFArray?) -> CFArray?\nGenerates and returns information about windows with the specified window IDs.\nfunc CGWindowListCreateImage(CGRect, CGWindowListOption, CGWindowID, CGWindowImageOption) -> CGImage?\nReturns a composite image based on a dynamically generated list of windows.\nDeprecated\ninit?(windowListFromArrayScreenBounds: CGRect, windowArray: CFArray, imageOption: CGWindowImageOption)\nReturns a composite image of the specified windows.\nDeprecated\nData Types\ntypealias CGWindowID\nThe data type used to store window identifiers.\nstruct CGWindowListOption\nThe data type used to specify the options for gathering a list of windows.\nstruct CGWindowImageOption\nThe data type to use to specify the type of image to be generated for a window.\nenum CGWindowSharingType\nThe data type used to specify the sharing mode used by a window.\nenum CGWindowBackingType\nThe data type used to specify the backing option for a given window.\nConstants\nWindow Sharing Constants\nSpecifies whether and how windows are shared between applications.\nBacking Store Types\nSpecifies how the window device buffers drawing commands.\nWindow List Option Constants\nSpecifies which windows in the current user session to include in a generated list.\nWindow Image Types\nSpecifies the options for capturing an image of a window.\nRequired Window List Keys\nThe keys that are guaranteed to be available in a window’s information dictionary.\nOptional Window List Keys\nThe keys that may optionally be available inside a window’s information dictionary.\nSee Also\nServices\nQuartz Display Services\nProvides direct access to features in the macOS window server for configuring and controlling display hardware.\nQuartz Event Services\nProvides features for managing event taps—filters for observing and altering the stream of low-level user input events in macOS."
  },
  {
    "title": "Core Graphics Structures | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/core_graphics_structures",
    "html": "Topics\nStructures\nstruct CGCaptureOptions\nConfiguration parameters that are used when capturing displays.\nstruct CGConfigureOption\nThe scope of the changes in a display configuration transaction.\nstruct CGDeviceColor\nstruct CGDisplayChangeSummaryFlags\nThe configuration parameters that are passed to a display reconfiguration callback function.\nstruct CGEventFilterMask\nSpecify masks for classes of low-level events that can be filtered during event suppression states.\nstruct CGEventFlags\nConstants that indicate the modifier key state at the time an event is created, as well as other event-related states.\nstruct CGScreenUpdateMoveDelta\nThe distance, in pixel units, that an onscreen region moves.\nstruct CGScreenUpdateOperation\nTypes of screen-update operations.\nstruct CGWindowImageOption\nThe data type to use to specify the type of image to be generated for a window.\nstruct CGWindowListOption\nThe data type used to specify the options for gathering a list of windows.\nstruct CGColorDataFormat\nstruct CGPDFAccessPermissions\nstruct CGPSConverterCallbacks\nA structure for holding the callbacks provided when you create a PostScript converter object."
  },
  {
    "title": "CGGradient | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cggradient",
    "html": "Topics\nCreating Gradient Objects\ninit?(colorSpace: CGColorSpace, colorComponents: UnsafePointer<CGFloat>, locations: UnsafePointer<CGFloat>?, count: Int)\nCreates a CGGradient object from a color space and the provided color components and locations.\ninit?(colorsSpace: CGColorSpace?, colors: CFArray, locations: UnsafePointer<CGFloat>?)\nCreates a gradient object from a color space and the provided color objects and locations.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for CGGradient objects.\nSee Also\nUtility and Support Classes\nclass CGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nclass CGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nclass CGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nclass CGFunction\nA general facility for defining and using callback functions.\nclass CGPattern\nA 2D pattern to be used for drawing graphics paths."
  },
  {
    "title": "CGDataProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgdataprovider",
    "html": "Overview\n\nSome Core Graphics routines supply blocks of data to your program. Rather than reading through a raw memory buffer, data provider objects of type CGDataProviderRef allow you to supply Core Graphics functions with data.\n\nCGDataProviderRef is derived from CFTypeRef and inherits the properties that all Core Foundation types have in common.\n\nTopics\nCreating Sequential-Access Data Providers\ninit?(sequentialInfo: UnsafeMutableRawPointer?, callbacks: UnsafePointer<CGDataProviderSequentialCallbacks>)\nCreates a sequential-access data provider.\nstruct CGDataProviderSequentialCallbacks\nDefines a structure containing pointers to client-defined callback functions that manage the sending of data for a sequential-access data provider.\ntypealias CGDataProviderRewindCallback\nA callback function that moves the current position in the data stream back to the beginning.\ntypealias CGDataProviderGetBytesCallback\nA callback function that copies from a provider data stream into a Core Graphics buffer.\ntypealias CGDataProviderSkipForwardCallback\nA callback function that advances the current position in the data stream supplied by the provider.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\nCreating Direct-Access Data Providers\ninit?(directInfo: UnsafeMutableRawPointer?, size: off_t, callbacks: UnsafePointer<CGDataProviderDirectCallbacks>)\nCreates a direct-access data provider.\ninit?(data: CFData)\nCreates a data provider that reads from a CFData object.\ninit?(url: CFURL)\nCreates a direct-access data provider that uses a URL to supply data.\ninit?(dataInfo: UnsafeMutableRawPointer?, data: UnsafeRawPointer, size: Int, releaseData: CGDataProviderReleaseDataCallback)\nCreates a direct-access data provider that uses data your program supplies.\ninit?(filename: UnsafePointer<CChar>)\nCreates a direct-access data provider that uses a file to supply data.\nstruct CGDataProviderDirectCallbacks\nDefines pointers to client-defined callback functions that manage the sending of data for a direct-access data provider.\ntypealias CGDataProviderGetBytePointerCallback\nA callback function that returns a generic pointer to the provider data.\ntypealias CGDataProviderGetBytesAtPositionCallback\nA callback function that copies data from the provider into a Core Graphics buffer.\ntypealias CGDataProviderReleaseBytePointerCallback\nA callback function that releases the pointer Core Graphics obtained by calling CGDataProviderGetBytePointerCallback.\ntypealias CGDataProviderReleaseInfoCallback\nA callback function that releases any private data or resources associated with the data provider.\ntypealias CGDataProviderReleaseDataCallback\nA callback function that releases data you supply to the function init(dataInfo:data:size:releaseData:).\nGetting Data from a Data Provider\nvar data: CFData?\nReturns a copy of the provider’s data.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for data providers.\nInstance Properties\nvar info: UnsafeMutableRawPointer?\nSee Also\nUtility and Support Classes\nclass CGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nclass CGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nclass CGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nclass CGFunction\nA general facility for defining and using callback functions.\nclass CGPattern\nA 2D pattern to be used for drawing graphics paths."
  },
  {
    "title": "CGShading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgshading",
    "html": "Topics\nCreating Shading Objects\ninit?(axialSpace: CGColorSpace, start: CGPoint, end: CGPoint, function: CGFunction, extendStart: Bool, extendEnd: Bool)\nCreates a shading object to use for axial shading.\ninit?(radialSpace: CGColorSpace, start: CGPoint, startRadius: CGFloat, end: CGPoint, endRadius: CGFloat, function: CGFunction, extendStart: Bool, extendEnd: Bool)\nCreates a shading object to use for radial shading.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for Core Graphics shading objects.\nSee Also\nUtility and Support Classes\nclass CGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nclass CGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nclass CGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nclass CGFunction\nA general facility for defining and using callback functions.\nclass CGPattern\nA 2D pattern to be used for drawing graphics paths."
  },
  {
    "title": "CGFont | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgfont",
    "html": "Overview\n\nA glyph can represent a single character (such as ‘b’), more than one character (such as the “ﬁ” ligature), or a special character such as a space. Core Graphics retrieves the glyphs for the font from ATS (Apple Type Services) and paints the glyphs based on the relevant parameters of the current graphics state.\n\nCore Graphics provides a limited, low-level interface for drawing text. For information on text-drawing functions, see CGContext. For full Unicode and text-layout support, use the services provided by TextKit).\n\nTopics\nCreating Font Objects\ninit?(CGDataProvider)\nCreates a font object from data supplied from a data provider.\ninit?(CFString)\nCreates a font object corresponding to the font specified by a PostScript or full name.\nExamining Font Metadata\nvar fullName: CFString?\nReturns the full name associated with a font object.\nExamining Font Metrics\nvar ascent: Int32\nReturns the ascent of a font.\nvar capHeight: Int32\nReturns the cap height of a font.\nvar descent: Int32\nReturns the descent of a font.\nvar fontBBox: CGRect\nReturns the bounding box of a font.\nvar italicAngle: CGFloat\nReturns the italic angle of a font.\nvar leading: Int32\nReturns the leading of a font.\nvar stemV: CGFloat\nReturns the thickness of the dominant vertical stems of glyphs in a font.\nvar unitsPerEm: Int32\nReturns the number of glyph space units per em for the provided font.\nvar xHeight: Int32\nReturns the x-height of a font.\nWorking with PostScript Fonts\nvar postScriptName: CFString?\nObtains the PostScript name of a font.\nfunc canCreatePostScriptSubset(CGFontPostScriptFormat) -> Bool\nDetermines whether Core Graphics can create a subset of the font in PostScript format.\nfunc createPostScriptSubset(subsetName: CFString, format: CGFontPostScriptFormat, glyphs: UnsafePointer<CGGlyph>?, count: Int, encoding: UnsafePointer<CGGlyph>?) -> CFData?\nCreates a subset of the font in the specified PostScript format.\nenum CGFontPostScriptFormat\nPossible formats for a PostScript font subset.\nfunc createPostScriptEncoding(encoding: UnsafePointer<CGGlyph>?) -> CFData?\nCreates a PostScript encoding of a font.\nWorking with Font Tables\nvar tableTags: CFArray?\nReturns an array of tags that correspond to the font tables for a font.\nfunc table(for: UInt32) -> CFData?\nReturns the font table that corresponds to the provided tag.\nFont Table Index Values\nPossible values for an index into a font table.\nWorking with Variations\nfunc copy(withVariations: CFDictionary?) -> CGFont?\nCreates a copy of a font using a variation specification dictionary.\nvar variations: CFDictionary?\nReturns the variation specification dictionary for a font.\nvar variationAxes: CFArray?\nReturns an array of the variation axis dictionaries for a font.\nFont Variation Axis Keys\nKeys used for a font variation axis dictionary.\nWorking with Glyphs\nvar numberOfGlyphs: Int\nReturns the number of glyphs in a font.\nfunc name(for: CGGlyph) -> CFString?\nReturns the glyph name of the specified glyph in the specified font.\nfunc getGlyphWithGlyphName(name: CFString) -> CGGlyph\nReturns the glyph for the glyph name associated with the specified font object.\nfunc getGlyphBBoxes(glyphs: UnsafePointer<CGGlyph>, count: Int, bboxes: UnsafeMutablePointer<CGRect>) -> Bool\nGet the bounding box of each glyph in an array.\nfunc getGlyphAdvances(glyphs: UnsafePointer<CGGlyph>, count: Int, advances: UnsafeMutablePointer<Int32>) -> Bool\nGets the advance width of each glyph in the provided array.\ntypealias CGGlyph\nAn index into the internal glyph table of a font.\nlet kCGGlyphMax: CGFontIndex\nThe maximum allowed value of a CGGlyph.\ntypealias CGFontIndex\nAn index into a font table.\nlet kCGFontIndexMax: CGFontIndex\nThe maximum allowed value of a CGFontIndex.\nlet kCGFontIndexInvalid: CGFontIndex\nA value representing an invalid CGFontIndex.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for Core Graphics fonts.\nSee Also\nColors and Fonts\nclass CGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nclass CGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nclass CGColorSpace\nA profile that specifies how to interpret a color value for display."
  },
  {
    "title": "CGPDFDocument | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgpdfdocument",
    "html": "Topics\nCreating PDF Documents\ninit?(CGDataProvider)\nCreates a Core Graphics PDF document using a data provider.\ninit?(CFURL)\nCreates a Core Graphics PDF document using data specified by a URL.\nExamining a PDF Document\nvar catalog: CGPDFDictionaryRef?\nReturns the document catalog of a Core Graphics PDF document.\nvar fileIdentifier: CGPDFArrayRef?\nGets the file identifier for a PDF document.\nvar info: CGPDFDictionaryRef?\nGets the information dictionary for a PDF document.\nvar numberOfPages: Int\nReturns the number of pages in a PDF document.\nfunc getVersion(majorVersion: UnsafeMutablePointer<Int32>, minorVersion: UnsafeMutablePointer<Int32>)\nReturns the major and minor version numbers of a Core Graphics PDF document.\nfunc page(at: Int) -> CGPDFPage?\nReturns a page from a Core Graphics PDF document.\nWorking with an Encrypted PDF Document\nvar isEncrypted: Bool\nReturns whether the specified PDF file is encrypted.\nvar allowsCopying: Bool\nReturns whether the specified PDF document allows copying.\nvar allowsPrinting: Bool\nReturns whether a PDF document allows printing.\nvar isUnlocked: Bool\nReturns whether the specified PDF document is currently unlocked.\nfunc unlockWithPassword(UnsafePointer<CChar>) -> Bool\nUnlocks an encrypted PDF document when a valid password is supplied.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the type identifier for Core Graphics PDF documents.\nAbstract Types for PDF Document Content\nUse these abstract types and related functions to work with the content of a CGPDFDocument object.\nCGPDFPage\nA page in a PDF document.\nCGPDFArray\nAn array structure within a PDF document.\nCGPDFObject\nAn object representing content within a PDF document.\nCGPDFStream\nA stream or sequence of data bytes in a PDF document.\nCGPDFString\nA text string in a PDF document.\nCGPDFScanner\nA parser object for handling content and operators in a PDF content stream.\nCGPDFDictionary\nA dictionary structure within a PDF document.\nCGPDFContentStream\nA representation of one or more content data streams in a PDF page.\nCGPDFOperatorTable\nA set of callback functions for operators used when scanning content in a PDF document.\nInstance Properties\nvar accessPermissions: CGPDFAccessPermissions\nvar outline: CFDictionary?"
  },
  {
    "title": "CGColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcolor",
    "html": "Overview\n\nCGColor is the fundamental data type used internally by Core Graphics to represent colors. CGColor objects, and the functions that operate on them, provide a fast and convenient way of managing and setting colors directly, especially colors that are reused (such as black for text).\n\nA color object contains a set of components (such as red, green, and blue) that uniquely define a color, and a color space that specifies how those components should be interpreted.\n\nColor objects provide a fast and convenient way to manage and set colors, especially colors that are used repeatedly. Drawing operations use color objects for setting fill and stroke colors, managing alpha, and setting color with a pattern.\n\nCGColor is derived from CFTypeRef and inherits the properties that all Core Foundation types have in common.\n\nTopics\nCreating Colors\nfunc copy() -> CGColor?\nCreates a copy of an existing color.\nfunc copy(alpha: CGFloat) -> CGColor?\nCreates a copy of an existing color, substituting a new alpha value.\ninit(genericCMYKCyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nCreates a color in the Generic CMYK color space.\ninit(gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space.\ninit(genericGrayGamma2_2Gray: CGFloat, alpha: CGFloat)\nCreates a color in the Generic gray color space with a gamma ramp of 2.2.\ninit(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the Generic RGB color space.\ninit(srgbRed: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nCreates a color in the sRGB color space.\ninit?(colorSpace: CGColorSpace, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha) and an associated color space.\ninit?(patternSpace: CGColorSpace, pattern: CGPattern, components: UnsafePointer<CGFloat>)\nCreates a color using a list of intensity values (including alpha), a pattern color space, and a pattern.\nGetting System Colors\nclass var black: CGColor\nThe black color in the Generic gray color space.\nclass var white: CGColor\nThe white color in the Generic gray color space.\nclass var clear: CGColor\nThe clear color in the Generic gray color space.\nExamining a Color\nvar alpha: CGFloat\nReturns the value of the alpha component associated with a color.\nvar colorSpace: CGColorSpace?\nReturns the color space associated with a color.\nvar components: [CGFloat]?\nReturns the values of the color components (including alpha) associated with a color.\nvar numberOfComponents: Int\nReturns the number of color components (including alpha) associated with a color.\nvar pattern: CGPattern?\nReturns the pattern associated with a color in a pattern color space.\nConverting Between Color Spaces\nclass let conversionTRCSize: CFString\nfunc converted(to: CGColorSpace, intent: CGColorRenderingIntent, options: CFDictionary?) -> CGColor?\nCreates a new color in a different color space that matches the provided color.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the Core Foundation type identifier for a color data type.\nType Properties\nclass let conversionBlackPointCompensation: CFString\nAn option for whether to apply black point compensation when converting between color profiles.\nRelationships\nConforms To\nSendable\nSee Also\nColors and Fonts\nclass CGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nclass CGColorSpace\nA profile that specifies how to interpret a color value for display.\nclass CGFont\nA set of character glyphs and layout information for drawing text."
  },
  {
    "title": "CGContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgcontext",
    "html": "Overview\n\nThe CGContext type represents a Quartz 2D drawing destination. A graphics context contains drawing parameters and all device-specific information needed to render the paint on a page to the destination, whether the destination is a window in an application, a bitmap image, a PDF document, or a printer.\n\nTopics\nCreating Bitmap Graphics Contexts\ninit?(data: UnsafeMutableRawPointer?, width: Int, height: Int, bitsPerComponent: Int, bytesPerRow: Int, space: CGColorSpace, bitmapInfo: UInt32)\nCreates a bitmap graphics context.\ninit?(data: UnsafeMutableRawPointer?, width: Int, height: Int, bitsPerComponent: Int, bytesPerRow: Int, space: CGColorSpace, bitmapInfo: UInt32, releaseCallback: CGBitmapContextReleaseDataCallback?, releaseInfo: UnsafeMutableRawPointer?)\nCreates a bitmap graphics context with the specified callback function.\ntypealias CGBitmapContextReleaseDataCallback\nA callback function used to release data associate with the bitmap context.\nCreating PDF Graphics Contexts\ninit?(CFURL, mediaBox: UnsafePointer<CGRect>?, CFDictionary?)\nCreates a URL-based PDF graphics context.\ninit?(consumer: CGDataConsumer, mediaBox: UnsafePointer<CGRect>?, CFDictionary?)\nCreates a PDF graphics context.\nAuxiliary Dictionary Keys\nKeys for the auxiliary info dictionary you specify when creating a PDF context.\nConverting Between Coordinate Spaces\nvar userSpaceToDeviceSpaceTransform: CGAffineTransform\nReturns an affine transform that maps user space coordinates to device space coordinates.\nfunc convertToDeviceSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGPoint) -> CGPoint\nReturns a point that is transformed from device space coordinates to user space coordinates.\nfunc convertToDeviceSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from user space coordinate to device space coordinates.\nfunc convertToUserSpace(CGRect) -> CGRect\nReturns a rectangle that is transformed from device space coordinate to user space coordinates.\nfunc convertToDeviceSpace(CGSize) -> CGSize\nReturns a size that is transformed from user space coordinates to device space coordinates.\nfunc convertToUserSpace(CGSize) -> CGSize\nReturns a size that is transformed from device space coordinates to user space coordinates.\nConstructing a Current Graphics Path\nfunc beginPath()\nCreates a new empty path in a graphics context.\nfunc move(to: CGPoint)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint])\nAdds a sequence of connected straight-line segments to the current path.\nfunc addRect(CGRect)\nAdds a rectangular path to the current path.\nfunc addRects([CGRect])\nAdds a set of rectangular paths to the current path.\nfunc addEllipse(in: CGRect)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)\nAdds an arc of a circle to the current path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat)\nAdds an arc of a circle to the current path, specified with a radius and two tangent lines.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)\nAdds a cubic Bézier curve to the current path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint)\nAdds a quadratic Bézier curve to the current path, with the specified end point and control point.\nfunc addPath(CGPath)\nAdds a previously created path object to the current path in a graphics context.\nfunc closePath()\nCloses and terminates the current path’s subpath.\nvar path: CGPath?\nReturns a path object built from the current path information in a graphics context.\nfunc replacePathWithStrokedPath()\nReplaces the path in the graphics context with the stroked version of the path.\nExamining the Current Graphics Path\nvar boundingBoxOfPath: CGRect\nReturns the smallest rectangle that contains the current path.\nvar currentPointOfPath: CGPoint\nReturns the current point in a non-empty path.\nvar isPathEmpty: Bool\nIndicates whether the current path contains any subpaths.\nfunc pathContains(CGPoint, mode: CGPathDrawingMode) -> Bool\nChecks to see whether the specified point is contained in the current path.\nDrawing the Current Graphics Path\nfunc drawPath(using: CGPathDrawingMode)\nDraws the current path using the provided drawing mode.\nenum CGPathDrawingMode\nOptions for rendering a path.\nfunc fillPath(using: CGPathFillRule)\nPaints the area within the current path, as determined by the specified fill rule.\nfunc strokePath()\nPaints a line along the current path.\nDrawing Shapes\nfunc clear(CGRect)\nPaints a transparent rectangle.\nfunc fill(CGRect)\nPaints the area contained within the provided rectangle, using the fill color in the current graphics state.\nfunc fill([CGRect])\nPaints the areas contained within the provided rectangles, using the fill color in the current graphics state.\nfunc fillEllipse(in: CGRect)\nPaints the area of the ellipse that fits inside the provided rectangle, using the fill color in the current graphics state.\nfunc stroke(CGRect)\nPaints a rectangular path.\nfunc stroke(CGRect, width: CGFloat)\nPaints a rectangular path, using the specified line width.\nfunc strokeEllipse(in: CGRect)\nStrokes an ellipse that fits inside the specified rectangle.\nfunc strokeLineSegments(between: [CGPoint])\nStrokes a sequence of line segments.\nDrawing Images and PDF Content\nfunc draw(CGImage, in: CGRect, byTiling: Bool)\nDraws an image in the specified area.\nfunc drawPDFPage(CGPDFPage)\nDraws the content of a PDF page into the current graphics context.\nvar interpolationQuality: CGInterpolationQuality\nReturns the current level of interpolation quality for a graphics context.\nenum CGInterpolationQuality\nLevels of interpolation quality for rendering an image.\nDrawing Gradients and Shadings\nfunc drawLinearGradient(CGGradient, start: CGPoint, end: CGPoint, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the line defined by the provided starting and ending points.\nfunc drawRadialGradient(CGGradient, startCenter: CGPoint, startRadius: CGFloat, endCenter: CGPoint, endRadius: CGFloat, options: CGGradientDrawingOptions)\nPaints a gradient fill that varies along the area defined by the provided starting and ending circles.\nstruct CGGradientDrawingOptions\nDrawing locations for gradients.\nfunc drawShading(CGShading)\nFills the clipping path of a context with the specified shading.\nDrawing Text\nvar textMatrix: CGAffineTransform\nReturns the current text matrix.\nvar textPosition: CGPoint\nReturns the location at which text is drawn.\nfunc selectFont(name: UnsafePointer<CChar>, size: CGFloat, textEncoding: CGTextEncoding)\nSets the font and font size in a graphics context.\nfunc setCharacterSpacing(CGFloat)\nSets the current character spacing.\nfunc setFont(CGFont)\nSets the platform font in a graphics context.\nfunc setFontSize(CGFloat)\nSets the current font size.\nfunc setTextDrawingMode(CGTextDrawingMode)\nSets the current text drawing mode.\nenum CGTextDrawingMode\nModes for rendering text.\nfunc setAllowsFontSmoothing(Bool)\nSets whether or not to allow font smoothing for a graphics context.\nfunc setAllowsFontSubpixelPositioning(Bool)\nSets whether or not to allow subpixel positioning for a graphics context.\nfunc setAllowsFontSubpixelQuantization(Bool)\nSets whether or not to allow subpixel quantization for a graphics context.\nfunc setShouldSmoothFonts(Bool)\nEnables or disables font smoothing in a graphics context.\nfunc setShouldSubpixelPositionFonts(Bool)\nEnables or disables subpixel positioning in a graphics context.\nfunc setShouldSubpixelQuantizeFonts(Bool)\nEnables or disables subpixel quantization in a graphics context.\nfunc showGlyphs(g: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at the current text position.\nfunc showGlyphs([CGGlyph], at: [CGPoint])\nDraws a set of glyphs at a set of corresponding positions.\nfunc showGlyphsAtPoint(x: CGFloat, y: CGFloat, glyphs: UnsafePointer<CGGlyph>?, count: Int)\nDisplays an array of glyphs at a position you specify.\nfunc showGlyphsWithAdvances(glyphs: UnsafePointer<CGGlyph>?, advances: UnsafePointer<CGSize>?, count: Int)\nDraws an array of glyphs with varying offsets.\nfunc showText(string: UnsafePointer<CChar>, length: Int)\nDisplays a character array at the current text position, a point specified by the current text matrix.\nfunc showTextAtPoint(x: CGFloat, y: CGFloat, string: UnsafePointer<CChar>, length: Int)\nDisplays a character string at a position you specify.\nDrawing Core Graphics Layers\nfunc draw(CGLayer, at: CGPoint)\nDraws the contents of a layer object at the specified point.\nfunc draw(CGLayer, in: CGRect)\nDraws the contents of a layer object into the specified rectangle.\nSetting Fill, Stroke, and Shadow Colors\nfunc setFillColor(CGColor)\nSets the current fill color in a graphics context, using a CGColor.\nfunc setFillColor(UnsafePointer<CGFloat>)\nSets the current fill color.\nfunc setFillColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceCMYK color space.\nfunc setFillColor(gray: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceGray color space.\nfunc setFillColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current fill color to a value in the DeviceRGB color space.\nfunc setFillColorSpace(CGColorSpace)\nSets the fill color space in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat)\nEnables shadowing in a graphics context.\nfunc setShadow(offset: CGSize, blur: CGFloat, color: CGColor?)\nEnables shadowing with color a graphics context.\nfunc setStrokeColor(CGColor)\nSets the current stroke color in a context, using a CGColor.\nfunc setStrokeColor(UnsafePointer<CGFloat>)\nSets the current stroke color.\nfunc setStrokeColor(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceCMYK color space.\nfunc setStrokeColor(gray: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceGray color space.\nfunc setStrokeColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)\nSets the current stroke color to a value in the DeviceRGB color space.\nfunc setStrokeColorSpace(CGColorSpace)\nSets the stroke color space in a graphics context.\nfunc setStrokePattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the stroke pattern in the specified graphics context.\nfunc setAlpha(CGFloat)\nSets the opacity level for objects drawn in a graphics context.\nWorking with the Current Clipping Path\nfunc clip(using: CGPathFillRule)\nModifies the current clipping path.\nfunc clip(to: CGRect)\nSets the clipping path to the intersection of the current clipping path with the area defined by the specified rectangle.\nfunc clip(to: [CGRect])\nSets the clipping path to the intersection of the current clipping path with the region defined by an array of rectangles.\nfunc clip(to: CGRect, mask: CGImage)\nMaps a mask into the specified rectangle and intersects it with the current clipping area of the graphics context.\nvar boundingBoxOfClipPath: CGRect\nReturns the bounding box of a clipping path.\nWorking with Transparency Layers\nfunc beginTransparencyLayer(in: CGRect, auxiliaryInfo: CFDictionary?)\nBegins a transparency layer whose contents are bounded by the specified rectangle.\nfunc beginTransparencyLayer(auxiliaryInfo: CFDictionary?)\nBegins a transparency layer.\nfunc endTransparencyLayer()\nEnds a transparency layer.\nWorking with the Current Transformation Matrix\nvar ctm: CGAffineTransform\nReturns the current transformation matrix.\nfunc rotate(by: CGFloat)\nRotates the user coordinate system in a context.\nfunc scaleBy(x: CGFloat, y: CGFloat)\nChanges the scale of the user coordinate system in a context.\nfunc translateBy(x: CGFloat, y: CGFloat)\nChanges the origin of the user coordinate system in a context.\nfunc concatenate(CGAffineTransform)\nTransforms the user coordinate system in a context using a specified matrix.\nSetting Path Drawing Options\nfunc setAllowsAntialiasing(Bool)\nSets whether or not to allow antialiasing for a graphics context.\nfunc setFlatness(CGFloat)\nSets the accuracy of curved paths in a graphics context.\nfunc setLineCap(CGLineCap)\nSets the style for the endpoints of lines drawn in a graphics context.\nfunc setLineDash(phase: CGFloat, lengths: [CGFloat])\nSets the pattern for drawing dashed lines.\nfunc setLineJoin(CGLineJoin)\nSets the style for the joins of connected lines in a graphics context.\nfunc setLineWidth(CGFloat)\nSets the line width for a graphics context.\nfunc setMiterLimit(CGFloat)\nSets the miter limit for the joins of connected lines in a graphics context.\nfunc setPatternPhase(CGSize)\nSets the pattern phase of a context.\nfunc setFillPattern(CGPattern, colorComponents: UnsafePointer<CGFloat>)\nSets the fill pattern in the specified graphics context.\nfunc setShouldAntialias(Bool)\nSets antialiasing on or off for a graphics context.\nSaving and Restoring Graphics State\nfunc saveGState()\nPushes a copy of the current graphics state onto the graphics state stack for the context.\nfunc restoreGState()\nSets the current graphics state to the state most recently saved.\nManaging a Graphics Context\nfunc flush()\nForces all pending drawing operations in a window context to be rendered immediately to the destination device.\nfunc synchronize()\nMarks a window context for update.\nfunc setBlendMode(CGBlendMode)\nSets how sample values are composited by a graphics context.\nenum CGBlendMode\nCompositing operations for images.\nfunc setRenderingIntent(CGColorRenderingIntent)\nSets the rendering intent in the current graphics state.\nManaging a Bitmap Graphics Context\nThese properties and methods are valid only when used with a CGContext object created with the initializers listed in Creating Bitmap Graphics Contexts.Creating Bitmap Graphics Contexts\nvar bitmapInfo: CGBitmapInfo\nObtains the bitmap information associated with a bitmap graphics context.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha information associated with the context, which indicates how a bitmap context handles the alpha component.\nvar bitsPerComponent: Int\nReturns the bits per component of a bitmap context.\nvar bitsPerPixel: Int\nReturns the bits per pixel of a bitmap context.\nvar bytesPerRow: Int\nReturns the bytes per row of a bitmap context.\nvar colorSpace: CGColorSpace?\nReturns the color space of a bitmap context.\nvar data: UnsafeMutableRawPointer?\nReturns a pointer to the image data associated with a bitmap context.\nvar height: Int\nReturns the height in pixels of a bitmap context.\nvar width: Int\nReturns the width in pixels of a bitmap context.\nfunc makeImage() -> CGImage?\nCreates and returns a CGImage from the pixel data in a bitmap graphics context.\nManaging a PDF Graphics Context\nThese methods are valid only when used with a CGContext object created with the initializers listed in Creating PDF Graphics Contexts.\nfunc beginPDFPage(CFDictionary?)\nBegins a new page in a PDF graphics context.\nfunc endPDFPage()\nEnds the current page in the PDF graphics context.\nfunc addDestination(CFString, at: CGPoint)\nSets a destination to jump to when a point in the current page of a PDF graphics context is clicked.\nfunc setDestination(CFString, for: CGRect)\nSets a destination to jump to when a rectangle in the current PDF page is clicked.\nfunc setURL(CFURL, for: CGRect)\nSets the URL associated with a rectangle in a PDF graphics context.\nfunc addDocumentMetadata(CFData?)\nAssociates custom metadata with the PDF document.\nfunc closePDF()\nCloses a PDF document.\nManaging a Page-Based Graphics Context\nfunc beginPage(mediaBox: UnsafePointer<CGRect>?)\nStarts a new page in a page-based graphics context.\nfunc endPage()\nEnds the current page in a page-based graphics context.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the type identifier for a graphics context.\nConstants\nenum CGPathFillRule\nRules for determining which regions are interior to a path, used by the fillPath(using:) and clip(using:) methods.\nInstance Methods\nfunc resetClip()\nSee Also\n2D Drawing\nclass CGImage\nA bitmap image or image mask.\nclass CGPath\nAn immutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nclass CGMutablePath\nA mutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nclass CGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGMutablePath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgmutablepath",
    "html": "Topics\nCreating Graphics Paths\ninit()\nCreates a mutable graphics path.\nCopying a Graphics Path\nfunc mutableCopy() -> CGMutablePath?\nCreates a mutable copy of an existing graphics path.\nfunc mutableCopy(using: UnsafePointer<CGAffineTransform>?) -> CGMutablePath?\nCreates a mutable copy of a graphics path transformed by a transformation matrix.\nConstructing a Graphics Path\nfunc move(to: CGPoint, transform: CGAffineTransform)\nBegins a new subpath at the specified point.\nfunc addLine(to: CGPoint, transform: CGAffineTransform)\nAppends a straight line segment from the current point to the specified point.\nfunc addLines(between: [CGPoint], transform: CGAffineTransform)\nAdds a sequence of connected straight-line segments to the path.\nfunc addRect(CGRect, transform: CGAffineTransform)\nAdds a rectangular subpath to the path.\nfunc addRects([CGRect], transform: CGAffineTransform)\nAdds a set of rectangular subpaths to the path.\nfunc addEllipse(in: CGRect, transform: CGAffineTransform)\nAdds an ellipse that fits inside the specified rectangle.\nfunc addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)\nAdds a subpath to the path, in the shape of a rectangle with rounded corners.\nfunc addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and angles.\nfunc addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and two tangent lines.\nfunc addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)\nAdds an arc of a circle to the path, specified with a radius and a difference in angle.\nfunc addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)\nAdds a cubic Bézier curve to the path, with the specified end point and control points.\nfunc addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)\nAdds a quadratic Bézier curve to the path, with the specified end point and control point.\nfunc addPath(CGPath, transform: CGAffineTransform)\nAppends another path object to the path.\nfunc closeSubpath()\nCloses and completes a subpath in a mutable graphics path.\nRelationships\nInherits From\nCGPath\nSee Also\n2D Drawing\nclass CGContext\nA Quartz 2D drawing environment.\nclass CGImage\nA bitmap image or image mask.\nclass CGPath\nAn immutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nclass CGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nRelated Documentation\nQuartz 2D Programming Guide"
  },
  {
    "title": "CGLayer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cglayer",
    "html": "Topics\nCreating Layer Objects\ninit?(CGContext, size: CGSize, auxiliaryInfo: CFDictionary?)\nCreates a layer object that is associated with a graphics context.\nExamining a Layer\nvar context: CGContext?\nReturns the graphics context associated with a layer object.\nvar size: CGSize\nReturns the width and height of a layer object.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the unique type identifier used for CGLayer objects.\nSee Also\n2D Drawing\nclass CGContext\nA Quartz 2D drawing environment.\nclass CGImage\nA bitmap image or image mask.\nclass CGPath\nAn immutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nclass CGMutablePath\nA mutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context."
  },
  {
    "title": "CGImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics/cgimage",
    "html": "Topics\nCreating Images\ninit?(width: Int, height: Int, bitsPerComponent: Int, bitsPerPixel: Int, bytesPerRow: Int, space: CGColorSpace, bitmapInfo: CGBitmapInfo, provider: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)\nCreates a bitmap image from data supplied by a data provider.\ninit?(jpegDataProviderSource: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)\nCreates a bitmap image using JPEG-encoded data supplied by a data provider.\ninit?(pngDataProviderSource: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)\nCreates a bitmap image using PNG-encoded data supplied by a data provider.\nExamining an Image\nvar isMask: Bool\nReturns whether a bitmap image is an image mask.\nvar width: Int\nReturns the width of a bitmap image.\nvar height: Int\nReturns the height of a bitmap image.\nvar bitsPerComponent: Int\nReturns the number of bits allocated for a single color component of a bitmap image.\nvar bitsPerPixel: Int\nReturns the number of bits allocated for a single pixel in a bitmap image.\nvar bytesPerRow: Int\nReturns the number of bytes allocated for a single row of a bitmap image.\nvar colorSpace: CGColorSpace?\nReturn the color space for a bitmap image.\nvar alphaInfo: CGImageAlphaInfo\nReturns the alpha channel information for a bitmap image.\nenum CGImageAlphaInfo\nStorage options for alpha component data.\nvar dataProvider: CGDataProvider?\nReturns the data provider for a bitmap image.\nvar decode: UnsafePointer<CGFloat>?\nReturns the decode array for a bitmap image.\nvar shouldInterpolate: Bool\nReturns the interpolation setting for a bitmap image.\nvar renderingIntent: CGColorRenderingIntent\nReturns the rendering intent setting for a bitmap image.\nvar bitmapInfo: CGBitmapInfo\nReturns the bitmap information for a bitmap image.\nstruct CGBitmapInfo\nComponent information for a bitmap image.\nvar utType: CFString?\nThe Universal Type Identifier for the image.\nCopying an Image\nfunc copy() -> CGImage?\nCreates a copy of a bitmap image.\nfunc copy(colorSpace: CGColorSpace) -> CGImage?\nCreates a copy of a bitmap image, replacing its colorspace.\nCreating Images by Modifying an Image\nfunc cropping(to: CGRect) -> CGImage?\nCreates a bitmap image using the data contained within a subregion of an existing bitmap image.\nfunc masking(CGImage) -> CGImage?\nCreates a bitmap image from an existing image and an image mask.\nfunc copy(maskingColorComponents: [CGFloat]) -> CGImage?\nCreates a bitmap image by masking an existing bitmap image with the provided color values.\nCreating Image Masks\ninit?(maskWidth: Int, height: Int, bitsPerComponent: Int, bitsPerPixel: Int, bytesPerRow: Int, provider: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool)\nCreates a bitmap image mask from data supplied by a data provider.\nWorking with Core Foundation Types\nclass var typeID: CFTypeID\nReturns the type identifier for CGImage objects.\nInitializers\ninit?(windowListFromArrayScreenBounds: CGRect, windowArray: CFArray, imageOption: CGWindowImageOption)\nReturns a composite image of the specified windows.\nDeprecated\nInstance Properties\nvar byteOrderInfo: CGImageByteOrderInfo\nvar pixelFormatInfo: CGImagePixelFormatInfo\nRelationships\nConforms To\nSendable\nSee Also\n2D Drawing\nclass CGContext\nA Quartz 2D drawing environment.\nclass CGPath\nAn immutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nclass CGMutablePath\nA mutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nclass CGLayer\nAn offscreen context for reusing content drawn with Core Graphics."
  },
  {
    "title": "Core Graphics | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coregraphics",
    "html": "Overview\n\nThe Core Graphics framework is based on the Quartz advanced drawing engine. It provides low-level, lightweight 2D rendering with unmatched output fidelity. You use this framework to handle path-based drawing, transformations, color management, offscreen rendering, patterns, gradients and shadings, image data management, image creation, and image masking, as well as PDF document creation, display, and parsing.\n\nIn macOS, Core Graphics also includes services for working with display hardware, low-level user input events, and the windowing system.\n\nTopics\nGeometric Data Types\nstruct CGFloat\nThe basic type for floating-point scalar values in Core Graphics and related frameworks.\nstruct CGPoint\nA structure that contains a point in a two-dimensional coordinate system.\nstruct CGSize\nA structure that contains width and height values.\nstruct CGRect\nA structure that contains the location and dimensions of a rectangle.\nstruct CGVector\nA structure that contains a two-dimensional vector.\nstruct CGAffineTransform\nAn affine transformation matrix for use in drawing 2D graphics.\n2D Drawing\nclass CGContext\nA Quartz 2D drawing environment.\nclass CGImage\nA bitmap image or image mask.\nclass CGPath\nAn immutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nclass CGMutablePath\nA mutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.\nclass CGLayer\nAn offscreen context for reusing content drawn with Core Graphics.\nColors and Fonts\nclass CGColor\nA set of components that define a color, with a color space specifying how to interpret them.\nclass CGColorConversionInfo\nAn object that describes how to convert between color spaces for use by other system services.\nclass CGColorSpace\nA profile that specifies how to interpret a color value for display.\nclass CGFont\nA set of character glyphs and layout information for drawing text.\nWorking with PDF Documents\nclass CGPDFDocument\nA document that contains PDF (Portable Document Format) drawing information.\nUtility and Support Classes\nclass CGDataConsumer\nAn abstraction for data-writing tasks that eliminates the need to manage a raw memory buffer.\nclass CGDataProvider\nAn abstraction for data-reading tasks that eliminates the need to manage a raw memory buffer.\nclass CGShading\nA definition for a smooth transition between colors, controlled by a custom function you provide, for drawing radial and axial gradient fills.\nclass CGGradient\nA definition for a smooth transition between colors for drawing radial and axial gradient fills.\nclass CGFunction\nA general facility for defining and using callback functions.\nclass CGPattern\nA 2D pattern to be used for drawing graphics paths.\nServices\nQuartz Display Services\nProvides direct access to features in the macOS window server for configuring and controlling display hardware.\nQuartz Event Services\nProvides features for managing event taps—filters for observing and altering the stream of low-level user input events in macOS.\nQuartz Window Services\nProvides information about the windows managed by the macOS window server.\nReference\nCore Graphics Structures\nCore Graphics Enumerations\nCore Graphics Constants\nCore Graphics Functions\nCore Graphics Data Types\nCore Graphics Data Types\nEnumerations\nenum CGPathFillRule\nRules for determining which regions are interior to a path, used by the fillPath(using:) and clip(using:) methods.\nClasses\nclass CGPSConverter\nAn opaque data type used to convert PostScript data to PDF data.\nSee Also\nRelated Documentation\nQuartz 2D Programming Guide"
  }
]