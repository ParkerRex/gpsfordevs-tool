[
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackeventproperty/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackeventproperty/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackeventproperty/init(rawvalue:)",
    "html": "See Also\nInitializers\ninit(String)"
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackevent/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance."
  },
  {
    "title": "init(_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackeventproperty/init(_:)",
    "html": "See Also\nInitializers\ninit(rawValue: String)"
  },
  {
    "title": "_SwiftNewtypeWrapper Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackeventproperty/_swiftnewtypewrapper-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackeventproperty/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "timeRange",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/highlight/timerange",
    "html": "See Also\nAccessing a Highlight\nvar highlightDescription: String?\nA description for an individual highlight.\nvar imageURL: URL?\nThe URL for an image associated with a highlight.\nvar localizedName: String?\nThe name associated with a highlight."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackevent/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/mediatype/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementalignment/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/code/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "returnValue",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackcustomeventuserinfo/returnvalue",
    "html": "See Also\nCreating User Info for Custom Playback Events\ninit(properties: [TVPlaybackEventProperty : Any]?, expectsReturnValue: Bool)\nCreate a new custom playback event user info dictionary.\nstruct TVPlaybackEventProperty\nExtend this structure to create your own custom playback event properties.\nvar expectsReturnValue: Bool\nA Boolean value that indicates whether the custom event expects to contain a return value."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementresettableproperty/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkiterror/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/repeatmode-swift.enum/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "_SwiftNewtypeWrapper Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackevent/_swiftnewtypewrapper-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/mediatype/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementeventtype/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolortype/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "init(properties:expectsReturnValue:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackcustomeventuserinfo/init(properties:expectsreturnvalue:)",
    "html": "Parameters\nproperties\n\nA dictionary of custom playback event properties.\n\nReturn Value\n\nA Boolean value that indicates whether the custom playback event requires a return value.\n\nDiscussion\n\nWhen created, if the function requires a return value, it is only dispatched to first listener. Otherwise, it is broadcast to all of the listeners.\n\nSee Also\nCreating User Info for Custom Playback Events\nstruct TVPlaybackEventProperty\nExtend this structure to create your own custom playback event properties.\nvar expectsReturnValue: Bool\nA Boolean value that indicates whether the custom event expects to contain a return value.\nvar returnValue: Any?\nThe return value type for the custom event."
  },
  {
    "title": "expectsReturnValue",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackcustomeventuserinfo/expectsreturnvalue",
    "html": "See Also\nCreating User Info for Custom Playback Events\ninit(properties: [TVPlaybackEventProperty : Any]?, expectsReturnValue: Bool)\nCreate a new custom playback event user info dictionary.\nstruct TVPlaybackEventProperty\nExtend this structure to create your own custom playback event properties.\nvar returnValue: Any?\nThe return value type for the custom event."
  },
  {
    "title": "TVPlaybackEventProperty",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackeventproperty",
    "html": "Topics\nInitializers\ninit(String)\ninit(rawValue: String)\nDefault Implementations\nEquatable Implementations\n_SwiftNewtypeWrapper Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nCreating User Info for Custom Playback Events\ninit(properties: [TVPlaybackEventProperty : Any]?, expectsReturnValue: Bool)\nCreate a new custom playback event user info dictionary.\nvar expectsReturnValue: Bool\nA Boolean value that indicates whether the custom event expects to contain a return value.\nvar returnValue: Any?\nThe return value type for the custom event."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.struct/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "properties",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackeventmarshaling/properties",
    "html": "Required\n\nSee Also\nProcessing Playback Events\nfunc processReturnValue(value: JSValue, in: JSContext)\nConverts a JavaScript value into a value that is readable in Swift or Objective-C.\nstruct TVPlaybackEventProperty\nExtend this structure to create your own custom playback event properties."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/endaction-swift.enum/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.struct/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementeventtype/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "TVTransitionWipe",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtransitionwipe",
    "html": "See Also\nConstants\nTVTransitionDissolve\nThe element stays in place and a dissolve effect is applied.\nTVTransitionMagicMove\nThe magic move transition is to be used.\nTVTransitionNone\nNo transition effect is to be applied.\nTVTransitionPush\nThe element is pushed onto the screen."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelementstyle/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "processReturnValue(value:in:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackeventmarshaling/processreturnvalue(value:in:)",
    "html": "Parameters\nvalue\n\nA JavaScript value returned by the dispatch event.\n\njsContext\n\nThe JavaScript context for the value.\n\nSee Also\nProcessing Playback Events\nvar properties: [TVPlaybackEventProperty : Any]?\nAn array of custom playback event properties.\n\nRequired\n\nstruct TVPlaybackEventProperty\nExtend this structure to create your own custom playback event properties."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimagetype/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "imageURL",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/highlight/imageurl",
    "html": "See Also\nAccessing a Highlight\nvar highlightDescription: String?\nA description for an individual highlight.\nvar localizedName: String?\nThe name associated with a highlight.\nvar timeRange: TVMediaItem.TimeRange\nA time range that determines when a highlight begins and its duration."
  },
  {
    "title": "highlightDescription",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/highlight/highlightdescription",
    "html": "See Also\nAccessing a Highlight\nvar imageURL: URL?\nThe URL for an image associated with a highlight.\nvar localizedName: String?\nThe name associated with a highlight.\nvar timeRange: TVMediaItem.TimeRange\nA time range that determines when a highlight begins and its duration."
  },
  {
    "title": "TVPlaybackState.rewinding",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/rewinding",
    "html": "See Also\nPlayback States\ncase undefined\nThe playback state of the player is undefined.\ncase begin\nThe player is beginning playback.\ncase loading\nThe player is loading a media item.\ncase playing\nThe player is currently playing.\ncase paused\nThe player paused playback.\ncase scanning\nThe player is quickly scanning forwards or backwards.\ncase fastForwarding\nThe player is fast-forwarding.\ncase end\nThe player ended playback."
  },
  {
    "title": "duration",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/timerange/duration",
    "html": "See Also\nDefining the Time Range\nvar startTime: TimeInterval\nThe time in a media item that determines when a time range begins.\nvar endTime: TimeInterval\nThe time in a media item that determines when a time range ends."
  },
  {
    "title": "localizedName",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/highlight/localizedname",
    "html": "See Also\nAccessing a Highlight\nvar highlightDescription: String?\nA description for an individual highlight.\nvar imageURL: URL?\nThe URL for an image associated with a highlight.\nvar timeRange: TVMediaItem.TimeRange\nA time range that determines when a highlight begins and its duration."
  },
  {
    "title": "highlights",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/highlightgroup/highlights",
    "html": "Discussion\n\nThe highlights property contains all of the highlights associated with a specific group. For example, all of the home runs hit during a single baseball game.\n\nSee Also\nAccessing the Highlights\nvar localizedName: String?\nThe name of a highlight group.\nclass Highlight\nAn object that describes a media item highlight."
  },
  {
    "title": "TVPlaybackState.fastForwarding",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/fastforwarding",
    "html": "See Also\nPlayback States\ncase undefined\nThe playback state of the player is undefined.\ncase begin\nThe player is beginning playback.\ncase loading\nThe player is loading a media item.\ncase playing\nThe player is currently playing.\ncase paused\nThe player paused playback.\ncase scanning\nThe player is quickly scanning forwards or backwards.\ncase rewinding\nThe player is rewinding.\ncase end\nThe player ended playback."
  },
  {
    "title": "TVPlaybackState.scanning",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/scanning",
    "html": "See Also\nPlayback States\ncase undefined\nThe playback state of the player is undefined.\ncase begin\nThe player is beginning playback.\ncase loading\nThe player is loading a media item.\ncase playing\nThe player is currently playing.\ncase paused\nThe player paused playback.\ncase fastForwarding\nThe player is fast-forwarding.\ncase rewinding\nThe player is rewinding.\ncase end\nThe player ended playback."
  },
  {
    "title": "TVPlaybackState.loading",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/loading",
    "html": "See Also\nPlayback States\ncase undefined\nThe playback state of the player is undefined.\ncase begin\nThe player is beginning playback.\ncase playing\nThe player is currently playing.\ncase paused\nThe player paused playback.\ncase scanning\nThe player is quickly scanning forwards or backwards.\ncase fastForwarding\nThe player is fast-forwarding.\ncase rewinding\nThe player is rewinding.\ncase end\nThe player ended playback."
  },
  {
    "title": "TVPlaybackState.playing",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/playing",
    "html": "See Also\nPlayback States\ncase undefined\nThe playback state of the player is undefined.\ncase begin\nThe player is beginning playback.\ncase loading\nThe player is loading a media item.\ncase paused\nThe player paused playback.\ncase scanning\nThe player is quickly scanning forwards or backwards.\ncase fastForwarding\nThe player is fast-forwarding.\ncase rewinding\nThe player is rewinding.\ncase end\nThe player ended playback."
  },
  {
    "title": "TVPlaybackState.paused",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/paused",
    "html": "See Also\nPlayback States\ncase undefined\nThe playback state of the player is undefined.\ncase begin\nThe player is beginning playback.\ncase loading\nThe player is loading a media item.\ncase playing\nThe player is currently playing.\ncase scanning\nThe player is quickly scanning forwards or backwards.\ncase fastForwarding\nThe player is fast-forwarding.\ncase rewinding\nThe player is rewinding.\ncase end\nThe player ended playback."
  },
  {
    "title": "TVPlaybackState.begin",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/begin",
    "html": "See Also\nPlayback States\ncase undefined\nThe playback state of the player is undefined.\ncase loading\nThe player is loading a media item.\ncase playing\nThe player is currently playing.\ncase paused\nThe player paused playback.\ncase scanning\nThe player is quickly scanning forwards or backwards.\ncase fastForwarding\nThe player is fast-forwarding.\ncase rewinding\nThe player is rewinding.\ncase end\nThe player ended playback."
  },
  {
    "title": "TVPlaybackState.undefined",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/undefined",
    "html": "See Also\nPlayback States\ncase begin\nThe player is beginning playback.\ncase loading\nThe player is loading a media item.\ncase playing\nThe player is currently playing.\ncase paused\nThe player paused playback.\ncase scanning\nThe player is quickly scanning forwards or backwards.\ncase fastForwarding\nThe player is fast-forwarding.\ncase rewinding\nThe player is rewinding.\ncase end\nThe player ended playback."
  },
  {
    "title": "init(_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackevent/init(_:)",
    "html": "See Also\nInitializers\ninit(rawValue: String)"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackevent/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "_SwiftNewtypeWrapper Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/mediatype/_swiftnewtypewrapper-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackevent/init(rawvalue:)",
    "html": "See Also\nInitializers\ninit(String)"
  },
  {
    "title": "audio",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/mediatype/audio",
    "html": "See Also\nMedia Types\nstatic let video: TVMediaItem.MediaType\nThe media item incorporates video."
  },
  {
    "title": "init(_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/mediatype/init(_:)",
    "html": "See Also\nInitializers\ninit(rawValue: String)"
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementcontentalignment/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "video",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/mediatype/video",
    "html": "See Also\nMedia Types\nstatic let audio: TVMediaItem.MediaType\nThe media item is audio only."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/mediatype/init(rawvalue:)",
    "html": "See Also\nInitializers\ninit(String)"
  },
  {
    "title": "TVElementResettableProperty.updateType",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementresettableproperty/updatetype",
    "html": "See Also\nConstants\ncase autoHighlightIdentifier\nThe autoHighlightIdentifier property is reset to nil."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementupdatetype/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "hash(into:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance."
  },
  {
    "title": "TVElementUpdateType.subtree",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementupdatetype/subtree",
    "html": "See Also\nConstants\ncase none\nThe tree structure did not change.\ncase children\nThe order of child nodes have been updated due to the addition, removal, or replacement of child nodes.\ncase node\nThe current node and its subtree have been modified."
  },
  {
    "title": "TVElementAlignment.right",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementalignment/right",
    "html": "See Also\nConstants\ncase undefined\nThe alignment has not been defined for the item.\ncase left\nThe item is aligned along the left side of the containing element.\ncase center\nThe item is aligned in the center of the containing element.\ncase leading\nThe item is aligned along the leading edge of the containing element.\ncase trailing\nThe item is aligned along the trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.right",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/right",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVViewElementStyleType.double",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype/double",
    "html": "See Also\nConstants\ncase integer\nAn NSNumber value.\ncase point\nA CGPoint value.\ncase string\nA NSString value.\ncase color\nA TVColor value.\ncase URL\nA NSURL value.\ncase edgeInsets\nAn UIEdgeInsets value."
  },
  {
    "title": "TVViewElementStyleType.color",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype/color",
    "html": "See Also\nConstants\ncase integer\nAn NSNumber value.\ncase double\nAn NSNumber value.\ncase point\nA CGPoint value.\ncase string\nA NSString value.\ncase URL\nA NSURL value.\ncase edgeInsets\nAn UIEdgeInsets value."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementresettableproperty/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementresettableproperty/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "music",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.struct/music",
    "html": "See Also\nRating Domains\nstatic let movie: TVMediaItem.ContentRatingDomain\nThe media item’s rating uses the movie domain.\nstatic let tvShow: TVMediaItem.ContentRatingDomain\nThe media item’s rating uses the TV show domain."
  },
  {
    "title": "tvShow",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.struct/tvshow",
    "html": "See Also\nRating Domains\nstatic let movie: TVMediaItem.ContentRatingDomain\nThe media item’s rating uses the movie domain.\nstatic let music: TVMediaItem.ContentRatingDomain\nThe media item’s rating uses the music domain."
  },
  {
    "title": "init(_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.struct/init(_:)",
    "html": "See Also\nInitializers\ninit(rawValue: String)"
  },
  {
    "title": "TVElementResettableProperty.autoHighlightIdentifier",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementresettableproperty/autohighlightidentifier",
    "html": "See Also\nConstants\ncase updateType\nThe updateType property is reset to TVElementUpdateType.none."
  },
  {
    "title": "TVTextHighlightStyleShowOnHighlight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtexthighlightstyleshowonhighlight",
    "html": "See Also\nConstants\nTVTextHighlightStyleMarqueeOnHighlight\nAny text that is longer than the available space is truncated.\nTVTextHighlightStyleMarqueeAndShowOnHighlight\nThe text will scroll across the screen if the text is longer than the available space."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.struct/init(rawvalue:)",
    "html": "See Also\nInitializers\ninit(String)"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.struct/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "_SwiftNewtypeWrapper Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.struct/_swiftnewtypewrapper-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "TVTextHighlightStyleMarqueeOnHighlight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtexthighlightstylemarqueeonhighlight",
    "html": "See Also\nConstants\nTVTextHighlightStyleShowOnHighlight\nAny text that is longer than the available space will scroll across the screen.\nTVTextHighlightStyleMarqueeAndShowOnHighlight\nThe text will scroll across the screen if the text is longer than the available space."
  },
  {
    "title": "TVTextHighlightStyleMarqueeAndShowOnHighlight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtexthighlightstylemarqueeandshowonhighlight",
    "html": "See Also\nConstants\nTVTextHighlightStyleShowOnHighlight\nAny text that is longer than the available space will scroll across the screen.\nTVTextHighlightStyleMarqueeOnHighlight\nAny text that is longer than the available space is truncated."
  },
  {
    "title": "TVPlaylist.EndAction.pause",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/endaction-swift.enum/pause",
    "html": "See Also\nEnd Playback Reasons\ncase stop\nThe player has stopped playback\ncase waitForMoreItems\nThe player is waiting for more media items."
  },
  {
    "title": "TVPlaylist.EndAction.stop",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/endaction-swift.enum/stop",
    "html": "See Also\nEnd Playback Reasons\ncase pause\nThe player has paused playback.\ncase waitForMoreItems\nThe player is waiting for more media items."
  },
  {
    "title": "TVPlaylist.EndAction.waitForMoreItems",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/endaction-swift.enum/waitformoreitems",
    "html": "See Also\nEnd Playback Reasons\ncase stop\nThe player has stopped playback\ncase pause\nThe player has paused playback."
  },
  {
    "title": "TVPlaylist.RepeatMode.one",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/repeatmode-swift.enum/one",
    "html": "See Also\nReplay Modes\ncase all\nReplay all of the media items in the playlist.\ncase none\nReplay none of the media items in the playlist."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/endaction-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/endaction-swift.enum/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "TVPlaylist.RepeatMode.all",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/repeatmode-swift.enum/all",
    "html": "See Also\nReplay Modes\ncase one\nReplay the currently playing media item.\ncase none\nReplay none of the media items in the playlist."
  },
  {
    "title": "TVPlaylist.RepeatMode.none",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/repeatmode-swift.enum/none",
    "html": "See Also\nReplay Modes\ncase all\nReplay all of the media items in the playlist.\ncase one\nReplay the currently playing media item."
  },
  {
    "title": "TVRatingStyleStarLarge",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvratingstylestarlarge",
    "html": "See Also\nConstants\nTVRatingStyleStarSmall\nA small star image is used.\nTVRatingStyleStarMedium\nA medium star image is used."
  },
  {
    "title": "TVRatingStyleStarSmall",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvratingstylestarsmall",
    "html": "See Also\nConstants\nTVRatingStyleStarMedium\nA medium star image is used.\nTVRatingStyleStarLarge\nA large star image is used."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/repeatmode-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "TVTransitionNone",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtransitionnone",
    "html": "See Also\nConstants\nTVTransitionDissolve\nThe element stays in place and a dissolve effect is applied.\nTVTransitionMagicMove\nThe magic move transition is to be used.\nTVTransitionPush\nThe element is pushed onto the screen.\nTVTransitionWipe\nThe element is wiped from the screen."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/repeatmode-swift.enum/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "TVTransitionMagicMove",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtransitionmagicmove",
    "html": "See Also\nConstants\nTVTransitionDissolve\nThe element stays in place and a dissolve effect is applied.\nTVTransitionNone\nNo transition effect is to be applied.\nTVTransitionPush\nThe element is pushed onto the screen.\nTVTransitionWipe\nThe element is wiped from the screen."
  },
  {
    "title": "TVRatingStyleStarMedium",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvratingstylestarmedium",
    "html": "See Also\nConstants\nTVRatingStyleStarSmall\nA small star image is used.\nTVRatingStyleStarLarge\nA large star image is used."
  },
  {
    "title": "TVTransitionPush",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtransitionpush",
    "html": "See Also\nConstants\nTVTransitionDissolve\nThe element stays in place and a dissolve effect is applied.\nTVTransitionMagicMove\nThe magic move transition is to be used.\nTVTransitionNone\nNo transition effect is to be applied.\nTVTransitionWipe\nThe element is wiped from the screen."
  },
  {
    "title": "TVElementContentAlignment.center",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementcontentalignment/center",
    "html": "See Also\nConstants\nTVElementContentAlignmentUndefinded\nThe alignment has not been defined for the element.\ncase top\nItems are aligned along the top of the element.\ncase bottom\nItems are aligned along the bottom of the element."
  },
  {
    "title": "TVElementContentAlignment.top",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementcontentalignment/top",
    "html": "See Also\nConstants\nTVElementContentAlignmentUndefinded\nThe alignment has not been defined for the element.\ncase center\nItems are aligned in the center of the element.\ncase bottom\nItems are aligned along the bottom of the element."
  },
  {
    "title": "TVElementContentAlignmentUndefinded",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementcontentalignmentundefinded",
    "html": "See Also\nConstants\ncase top\nItems are aligned along the top of the element.\ncase center\nItems are aligned in the center of the element.\ncase bottom\nItems are aligned along the bottom of the element."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "TVMediaItem.Highlight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/highlight",
    "html": "Topics\nAccessing a Highlight\nvar highlightDescription: String?\nA description for an individual highlight.\nvar imageURL: URL?\nThe URL for an image associated with a highlight.\nvar localizedName: String?\nThe name associated with a highlight.\nvar timeRange: TVMediaItem.TimeRange\nA time range that determines when a highlight begins and its duration.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nAccessing the Highlights\nvar localizedName: String?\nThe name of a highlight group.\nvar highlights: [TVMediaItem.Highlight]\nAn array of the individual highlights that make up a group."
  },
  {
    "title": "TVPlaybackState.end",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/end",
    "html": "See Also\nPlayback States\ncase undefined\nThe playback state of the player is undefined.\ncase begin\nThe player is beginning playback.\ncase loading\nThe player is loading a media item.\ncase playing\nThe player is currently playing.\ncase paused\nThe player paused playback.\ncase scanning\nThe player is quickly scanning forwards or backwards.\ncase fastForwarding\nThe player is fast-forwarding.\ncase rewinding\nThe player is rewinding."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "startTime",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/timerange/starttime",
    "html": "See Also\nDefining the Time Range\nvar endTime: TimeInterval\nThe time in a media item that determines when a time range ends.\nvar duration: TimeInterval\nThe duration of a time range in a media item."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "endTime",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/timerange/endtime",
    "html": "See Also\nDefining the Time Range\nvar startTime: TimeInterval\nThe time in a media item that determines when a time range begins.\nvar duration: TimeInterval\nThe duration of a time range in a media item."
  },
  {
    "title": "localizedName",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/highlightgroup/localizedname",
    "html": "See Also\nAccessing the Highlights\nvar highlights: [TVMediaItem.Highlight]\nAn array of the individual highlights that make up a group.\nclass Highlight\nAn object that describes a media item highlight."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/mediatype/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "TVElementUpdateType.node",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementupdatetype/node",
    "html": "See Also\nConstants\ncase none\nThe tree structure did not change.\ncase subtree\nA subtree element has been updated without affecting the order of any immediate children.\ncase children\nThe order of child nodes have been updated due to the addition, removal, or replacement of child nodes."
  },
  {
    "title": "TVTextStyleSubtitle1",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstylesubtitle1",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "TVTextStyleHeadline",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstyleheadline",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementalignment/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "TVElementAlignment.leading",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementalignment/leading",
    "html": "Discussion\n\nFor left-to-right languages, the leading edge is the left edge. For right-to-left languages, the leading edge is the right edge.\n\nSee Also\nConstants\ncase undefined\nThe alignment has not been defined for the item.\ncase left\nThe item is aligned along the left side of the containing element.\ncase center\nThe item is aligned in the center of the containing element.\ncase right\nThe item is aligned along the right of the containing element.\ncase trailing\nThe item is aligned along the trailing edge of the containing element."
  },
  {
    "title": "TVElementAlignment.trailing",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementalignment/trailing",
    "html": "Discussion\n\nFor left-to-right languages, the trailing edge is the right edge. For right-to-left languages, the trailing edge is the left edge.\n\nSee Also\nConstants\ncase undefined\nThe alignment has not been defined for the item.\ncase left\nThe item is aligned along the left side of the containing element.\ncase center\nThe item is aligned in the center of the containing element.\ncase right\nThe item is aligned along the right of the containing element.\ncase leading\nThe item is aligned along the leading edge of the containing element."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementalignment/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolortype/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "TVViewElementStyleType.URL",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype/url",
    "html": "See Also\nConstants\ncase integer\nAn NSNumber value.\ncase double\nAn NSNumber value.\ncase point\nA CGPoint value.\ncase string\nA NSString value.\ncase color\nA TVColor value.\ncase edgeInsets\nAn UIEdgeInsets value."
  },
  {
    "title": "TVColorType.plain",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolortype/plain",
    "html": "See Also\nConstants\ncase none\nIndicates that there is no color associated with an element.\ncase linearGradientTopToBottom\nIndicates that a color gradient goes from the top to the bottom of an element.\ncase linearGradientLeftToRight\nIndicates that a color gradient goes from the left to the right of an element."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolortype/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "TVColorType.none",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolortype/none",
    "html": "See Also\nConstants\ncase plain\nIndicates that a single color is to be used with an element.\ncase linearGradientTopToBottom\nIndicates that a color gradient goes from the top to the bottom of an element.\ncase linearGradientLeftToRight\nIndicates that a color gradient goes from the left to the right of an element."
  },
  {
    "title": "TVViewElementStyleType.string",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype/string",
    "html": "See Also\nConstants\ncase integer\nAn NSNumber value.\ncase double\nAn NSNumber value.\ncase point\nA CGPoint value.\ncase color\nA TVColor value.\ncase URL\nA NSURL value.\ncase edgeInsets\nAn UIEdgeInsets value."
  },
  {
    "title": "documentViewController(_:handleEvent:with:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontrollerdelegate/documentviewcontroller(_:handleevent:with:)",
    "html": "Required\n\nDiscussion\n\nBy default, event handling can happen in either TVMLKit or TVMLKit JS. To defer event handling exclusively to TVMLKit JS, return false and don’t handle the event in this TVMLKit method. To assign event handling to TVMLKit, handle the event in this method and return true."
  },
  {
    "title": "browserViewController(_:willCenterOn:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontrollerdelegate/browserviewcontroller(_:willcenteron:)",
    "html": "Required\n\nSee Also\nManaging Focus\nfunc browserViewController(TVBrowserViewController, didCenterOn: TVViewElement)\nTells the delegate how to respond when the specified view element completes the transition to becoming centered upon.\n\nRequired"
  },
  {
    "title": "TVViewElementStyleType.point",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype/point",
    "html": "See Also\nConstants\ncase integer\nAn NSNumber value.\ncase double\nAn NSNumber value.\ncase string\nA NSString value.\ncase color\nA TVColor value.\ncase URL\nA NSURL value.\ncase edgeInsets\nAn UIEdgeInsets value."
  },
  {
    "title": "TVViewElementStyleType.integer",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype/integer",
    "html": "See Also\nConstants\ncase double\nAn NSNumber value.\ncase point\nA CGPoint value.\ncase string\nA NSString value.\ncase color\nA TVColor value.\ncase URL\nA NSURL value.\ncase edgeInsets\nAn UIEdgeInsets value."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementeventtype/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementupdatetype/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "browserViewController(_:didCenterOn:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontrollerdelegate/browserviewcontroller(_:didcenteron:)",
    "html": "Required\n\nSee Also\nManaging Focus\nfunc browserViewController(TVBrowserViewController, willCenterOn: TVViewElement)\nTells the delegate when the specified view element is to be centered on the page.\n\nRequired"
  },
  {
    "title": "documentViewController(_:didUpdateWithContext:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontrollerdelegate/documentviewcontroller(_:didupdatewithcontext:)",
    "html": "Required\n\nSee Also\nManaging Document Updates\nfunc documentViewControllerWillUpdate(TVDocumentViewController)\nTells the delegate that the document will be updated.\nfunc documentViewControllerDidUpdate(TVDocumentViewController)\nTells the delegate that the document has been updated.\n\nRequired"
  },
  {
    "title": "documentViewControllerDidUpdate(_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontrollerdelegate/documentviewcontrollerdidupdate(_:)",
    "html": "Required\n\nSee Also\nManaging Document Updates\nfunc documentViewControllerWillUpdate(TVDocumentViewController)\nTells the delegate that the document will be updated.\nfunc documentViewController(TVDocumentViewController, didUpdateWithContext: [String : Any])\nTells the delegate that the document has been updated with a specified context.\n\nRequired"
  },
  {
    "title": "documentViewControllerWillUpdate(_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontrollerdelegate/documentviewcontrollerwillupdate(_:)",
    "html": "See Also\nManaging Document Updates\nfunc documentViewControllerDidUpdate(TVDocumentViewController)\nTells the delegate that the document has been updated.\n\nRequired\n\nfunc documentViewController(TVDocumentViewController, didUpdateWithContext: [String : Any])\nTells the delegate that the document has been updated with a specified context.\n\nRequired"
  },
  {
    "title": "movie",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.struct/movie",
    "html": "See Also\nRating Domains\nstatic let music: TVMediaItem.ContentRatingDomain\nThe media item’s rating uses the music domain.\nstatic let tvShow: TVMediaItem.ContentRatingDomain\nThe media item’s rating uses the TV show domain."
  },
  {
    "title": "TVElementEventType.play",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementeventtype/play",
    "html": "See Also\nEnumeration Cases\ncase change\nA change event has been dispatched.\ncase highlight\nA highlight event has been dispatched.\ncase holdSelect\nA hold event has been dispatched.\ncase select\nA select event has been dispatched."
  },
  {
    "title": "TVElementEventType.holdSelect",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementeventtype/holdselect",
    "html": "See Also\nEnumeration Cases\ncase change\nA change event has been dispatched.\ncase highlight\nA highlight event has been dispatched.\ncase play\nA play event has been dispatched.\ncase select\nA select event has been dispatched."
  },
  {
    "title": "TVElementEventType.highlight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementeventtype/highlight",
    "html": "See Also\nEnumeration Cases\ncase change\nA change event has been dispatched.\ncase holdSelect\nA hold event has been dispatched.\ncase play\nA play event has been dispatched.\ncase select\nA select event has been dispatched."
  },
  {
    "title": "TVElementEventType.select",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementeventtype/select",
    "html": "See Also\nEnumeration Cases\ncase change\nA change event has been dispatched.\ncase highlight\nA highlight event has been dispatched.\ncase holdSelect\nA hold event has been dispatched.\ncase play\nA play event has been dispatched."
  },
  {
    "title": "TVElementEventType.change",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementeventtype/change",
    "html": "See Also\nEnumeration Cases\ncase highlight\nA highlight event has been dispatched.\ncase holdSelect\nA hold event has been dispatched.\ncase play\nA play event has been dispatched.\ncase select\nA select event has been dispatched."
  },
  {
    "title": "TVTransitionDissolve",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtransitiondissolve",
    "html": "See Also\nConstants\nTVTransitionMagicMove\nThe magic move transition is to be used.\nTVTransitionNone\nNo transition effect is to be applied.\nTVTransitionPush\nThe element is pushed onto the screen.\nTVTransitionWipe\nThe element is wiped from the screen."
  },
  {
    "title": "TVElementPosition.topTrailing",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/toptrailing",
    "html": "Discussion\n\nFor left-to-right languages, the trailing edge is the right edge. For right-to-left languages, the trailing edge is the left edge.\n\nSee Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.left",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/left",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "currentMediaItem",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplayer/currentmediaitem",
    "html": "See Also\nInspecting Media Items\nfunc setCurrentMediaItem(toItemAtIndex: Int)\nSets the current media item to the designated media item.\nvar previousMediaItem: TVMediaItem?\nThe previously selected media item.\nvar nextMediaItem: TVMediaItem?\nThe next media item in the playlist."
  },
  {
    "title": "itemDescription",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/itemdescription",
    "html": "See Also\nIdentifying Media Items\nvar artworkImageURL: URL?\nThe URL path to the artwork that accompanies the media item.\nvar subtitle: String?\nThe subtitle for a media item.\nvar title: String?\nThe title for a media item.\nvar type: TVMediaItem.MediaType?\nThe type of media item.\nstruct MediaType\nA value indicating whether the media is audio or video.\nvar url: URL?\nThe URL path to the media item.\nvar userInfo: [String : Any]\nUser-defined metadata, like a developer-specific identifier, for a media item."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementupdatetype/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "player(for:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollerdelegate/player(for:)",
    "html": "Parameters\nappController\n\nThe TVApplicationController object that contains the player object.\n\nReturn Value\n\nA customizable TVPlayer object.\n\nSee Also\nManaging the App Controller\nfunc appController(TVApplicationController, didFail: any Error)\nTell the delegate the app controller failed due to an error.\n\nRequired\n\nfunc appController(TVApplicationController, didFinishLaunching: [String : Any]?)\nTells the delegate the app controller has finished launching.\n\nRequired\n\nfunc appController(TVApplicationController, didStop: [String : Any]?)\nTells the delegate the app has stopped for any reason.\nfunc appController(TVApplicationController, evaluateAppJavaScriptIn: JSContext)\nTells the delegate to add JavaScript classes and objects."
  },
  {
    "title": "appController(_:evaluateAppJavaScriptIn:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollerdelegate/appcontroller(_:evaluateappjavascriptin:)",
    "html": "Parameters\nappController\n\nThe TVApplicationController object that is evaluating the JavaScript context.\n\njsContext\n\nThe JSContext object being evaluated.\n\nDiscussion\n\nThis method serves as a callback function, giving the delegate the ability to add JavaScript classes and objects through the setObject:forKeyedSubscript: method using the jsContext parameter. This method is called before the JavaScript is parsed into the execution context and is called on the JavaScript execution thread, not the main thread. Any object exposed to JSContext must not be retained on any other thread.\n\nSee Also\nManaging the App Controller\nfunc appController(TVApplicationController, didFail: any Error)\nTell the delegate the app controller failed due to an error.\n\nRequired\n\nfunc appController(TVApplicationController, didFinishLaunching: [String : Any]?)\nTells the delegate the app controller has finished launching.\n\nRequired\n\nfunc appController(TVApplicationController, didStop: [String : Any]?)\nTells the delegate the app has stopped for any reason.\nfunc player(for: TVApplicationController) -> TVPlayer?\nAsks the delegate for a custom player object for a particular player bridge."
  },
  {
    "title": "TVElementUpdateType.none",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementupdatetype/none",
    "html": "See Also\nConstants\ncase subtree\nA subtree element has been updated without affecting the order of any immediate children.\ncase children\nThe order of child nodes have been updated due to the addition, removal, or replacement of child nodes.\ncase node\nThe current node and its subtree have been modified."
  },
  {
    "title": "TVElementUpdateType.children",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementupdatetype/children",
    "html": "See Also\nConstants\ncase none\nThe tree structure did not change.\ncase subtree\nA subtree element has been updated without affecting the order of any immediate children.\ncase node\nThe current node and its subtree have been modified."
  },
  {
    "title": "appController(_:didFail:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollerdelegate/appcontroller(_:didfail:)",
    "html": "Required\n\nParameters\nappController\n\nThe TVApplicationController object that has failed.\n\nerror\n\nAn NSError object describing why the app controller failed.\n\nSee Also\nManaging the App Controller\nfunc appController(TVApplicationController, didFinishLaunching: [String : Any]?)\nTells the delegate the app controller has finished launching.\n\nRequired\n\nfunc appController(TVApplicationController, didStop: [String : Any]?)\nTells the delegate the app has stopped for any reason.\nfunc appController(TVApplicationController, evaluateAppJavaScriptIn: JSContext)\nTells the delegate to add JavaScript classes and objects.\nfunc player(for: TVApplicationController) -> TVPlayer?\nAsks the delegate for a custom player object for a particular player bridge."
  },
  {
    "title": "_SwiftNewtypeWrapper Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/_swiftnewtypewrapper-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "unload",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/unload",
    "html": "See Also\nEvent Types\nstatic let appear: TVDocumentViewController.Event\nAn event that signals when the document appears.\nstatic let disappear: TVDocumentViewController.Event\nAn event that signals when the document disappears.\nstatic let highlight: TVDocumentViewController.Event\nAn event that signals when the document is highlighted.\nstatic let holdSelect: TVDocumentViewController.Event\nAn event that signals when the document is held down and selected.\nstatic let load: TVDocumentViewController.Event\nAn event that signals when the document is loaded.\nstatic let play: TVDocumentViewController.Event\nAn event that signals when the document is played.\nstatic let select: TVDocumentViewController.Event\nAn event that signals when the document is selected."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "TVTextStyleTitle2",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstyletitle2",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "appController(_:didStop:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollerdelegate/appcontroller(_:didstop:)",
    "html": "Parameters\nappController\n\nThe TVApplicationController object that has stopped.\n\noptions\n\nThe launch options passed to the app controller.\n\nSee Also\nManaging the App Controller\nfunc appController(TVApplicationController, didFail: any Error)\nTell the delegate the app controller failed due to an error.\n\nRequired\n\nfunc appController(TVApplicationController, didFinishLaunching: [String : Any]?)\nTells the delegate the app controller has finished launching.\n\nRequired\n\nfunc appController(TVApplicationController, evaluateAppJavaScriptIn: JSContext)\nTells the delegate to add JavaScript classes and objects.\nfunc player(for: TVApplicationController) -> TVPlayer?\nAsks the delegate for a custom player object for a particular player bridge."
  },
  {
    "title": "appController(_:didFinishLaunching:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollerdelegate/appcontroller(_:didfinishlaunching:)",
    "html": "Required\n\nParameters\nappController\n\nThe TVApplicationController object that finished launching.\n\noptions\n\nThe launch options passed to the app controller.\n\nSee Also\nManaging the App Controller\nfunc appController(TVApplicationController, didFail: any Error)\nTell the delegate the app controller failed due to an error.\n\nRequired\n\nfunc appController(TVApplicationController, didStop: [String : Any]?)\nTells the delegate the app has stopped for any reason.\nfunc appController(TVApplicationController, evaluateAppJavaScriptIn: JSContext)\nTells the delegate to add JavaScript classes and objects.\nfunc player(for: TVApplicationController) -> TVPlayer?\nAsks the delegate for a custom player object for a particular player bridge."
  },
  {
    "title": "select",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/select",
    "html": "See Also\nEvent Types\nstatic let appear: TVDocumentViewController.Event\nAn event that signals when the document appears.\nstatic let disappear: TVDocumentViewController.Event\nAn event that signals when the document disappears.\nstatic let highlight: TVDocumentViewController.Event\nAn event that signals when the document is highlighted.\nstatic let holdSelect: TVDocumentViewController.Event\nAn event that signals when the document is held down and selected.\nstatic let load: TVDocumentViewController.Event\nAn event that signals when the document is loaded.\nstatic let play: TVDocumentViewController.Event\nAn event that signals when the document is played.\nstatic let unload: TVDocumentViewController.Event\nAn event that signals when the document is unloaded."
  },
  {
    "title": "play",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/play",
    "html": "See Also\nEvent Types\nstatic let appear: TVDocumentViewController.Event\nAn event that signals when the document appears.\nstatic let disappear: TVDocumentViewController.Event\nAn event that signals when the document disappears.\nstatic let highlight: TVDocumentViewController.Event\nAn event that signals when the document is highlighted.\nstatic let holdSelect: TVDocumentViewController.Event\nAn event that signals when the document is held down and selected.\nstatic let load: TVDocumentViewController.Event\nAn event that signals when the document is loaded.\nstatic let select: TVDocumentViewController.Event\nAn event that signals when the document is selected.\nstatic let unload: TVDocumentViewController.Event\nAn event that signals when the document is unloaded."
  },
  {
    "title": "load",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/load",
    "html": "See Also\nEvent Types\nstatic let appear: TVDocumentViewController.Event\nAn event that signals when the document appears.\nstatic let disappear: TVDocumentViewController.Event\nAn event that signals when the document disappears.\nstatic let highlight: TVDocumentViewController.Event\nAn event that signals when the document is highlighted.\nstatic let holdSelect: TVDocumentViewController.Event\nAn event that signals when the document is held down and selected.\nstatic let play: TVDocumentViewController.Event\nAn event that signals when the document is played.\nstatic let select: TVDocumentViewController.Event\nAn event that signals when the document is selected.\nstatic let unload: TVDocumentViewController.Event\nAn event that signals when the document is unloaded."
  },
  {
    "title": "holdSelect",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/holdselect",
    "html": "See Also\nEvent Types\nstatic let appear: TVDocumentViewController.Event\nAn event that signals when the document appears.\nstatic let disappear: TVDocumentViewController.Event\nAn event that signals when the document disappears.\nstatic let highlight: TVDocumentViewController.Event\nAn event that signals when the document is highlighted.\nstatic let load: TVDocumentViewController.Event\nAn event that signals when the document is loaded.\nstatic let play: TVDocumentViewController.Event\nAn event that signals when the document is played.\nstatic let select: TVDocumentViewController.Event\nAn event that signals when the document is selected.\nstatic let unload: TVDocumentViewController.Event\nAn event that signals when the document is unloaded."
  },
  {
    "title": "TVTextStyleTitle1",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstyletitle1",
    "html": "See Also\nConstants\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "TVTextStyleSubtitle3",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstylesubtitle3",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "TVTextStyleSubtitle2",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstylesubtitle2",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "TVTextStyleFootnote",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstylefootnote",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "TVTextStyleTitle3",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstyletitle3",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "appear",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/appear",
    "html": "See Also\nEvent Types\nstatic let disappear: TVDocumentViewController.Event\nAn event that signals when the document disappears.\nstatic let highlight: TVDocumentViewController.Event\nAn event that signals when the document is highlighted.\nstatic let holdSelect: TVDocumentViewController.Event\nAn event that signals when the document is held down and selected.\nstatic let load: TVDocumentViewController.Event\nAn event that signals when the document is loaded.\nstatic let play: TVDocumentViewController.Event\nAn event that signals when the document is played.\nstatic let select: TVDocumentViewController.Event\nAn event that signals when the document is selected.\nstatic let unload: TVDocumentViewController.Event\nAn event that signals when the document is unloaded."
  },
  {
    "title": "TVTextStyleSubhead",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstylesubhead",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "highlight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/highlight",
    "html": "See Also\nEvent Types\nstatic let appear: TVDocumentViewController.Event\nAn event that signals when the document appears.\nstatic let disappear: TVDocumentViewController.Event\nAn event that signals when the document disappears.\nstatic let holdSelect: TVDocumentViewController.Event\nAn event that signals when the document is held down and selected.\nstatic let load: TVDocumentViewController.Event\nAn event that signals when the document is loaded.\nstatic let play: TVDocumentViewController.Event\nAn event that signals when the document is played.\nstatic let select: TVDocumentViewController.Event\nAn event that signals when the document is selected.\nstatic let unload: TVDocumentViewController.Event\nAn event that signals when the document is unloaded."
  },
  {
    "title": "disappear",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/disappear",
    "html": "See Also\nEvent Types\nstatic let appear: TVDocumentViewController.Event\nAn event that signals when the document appears.\nstatic let highlight: TVDocumentViewController.Event\nAn event that signals when the document is highlighted.\nstatic let holdSelect: TVDocumentViewController.Event\nAn event that signals when the document is held down and selected.\nstatic let load: TVDocumentViewController.Event\nAn event that signals when the document is loaded.\nstatic let play: TVDocumentViewController.Event\nAn event that signals when the document is played.\nstatic let select: TVDocumentViewController.Event\nAn event that signals when the document is selected.\nstatic let unload: TVDocumentViewController.Event\nAn event that signals when the document is unloaded."
  },
  {
    "title": "init(_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/init(_:)",
    "html": "See Also\nInitializers for Document View Controller Events\ninit(rawValue: String)\nCreate an instance of a new document view controller event based on a string value."
  },
  {
    "title": "init(rawValue:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event/init(rawvalue:)",
    "html": "See Also\nInitializers for Document View Controller Events\ninit(String)\nCreate a new document view controller event based on a string value."
  },
  {
    "title": "TVTextStyleBody",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstylebody",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "TVTextStyleCaption1",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstylecaption1",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "TVElementAlignment.center",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementalignment/center",
    "html": "See Also\nConstants\ncase undefined\nThe alignment has not been defined for the item.\ncase left\nThe item is aligned along the left side of the containing element.\ncase right\nThe item is aligned along the right of the containing element.\ncase leading\nThe item is aligned along the leading edge of the containing element.\ncase trailing\nThe item is aligned along the trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.bottom",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/bottom",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVTextStyleCaption2",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstylecaption2",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight."
  },
  {
    "title": "TVElementPosition.undefined",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/undefined",
    "html": "See Also\nConstants\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.center",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/center",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementcontentalignment/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "TVElementPosition.top",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/top",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementcontentalignment/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "TVElementAlignment.left",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementalignment/left",
    "html": "See Also\nConstants\ncase undefined\nThe alignment has not been defined for the item.\ncase center\nThe item is aligned in the center of the containing element.\ncase right\nThe item is aligned along the right of the containing element.\ncase leading\nThe item is aligned along the leading edge of the containing element.\ncase trailing\nThe item is aligned along the trailing edge of the containing element."
  },
  {
    "title": "TVElementAlignment.undefined",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementalignment/undefined",
    "html": "See Also\nConstants\ncase left\nThe item is aligned along the left side of the containing element.\ncase center\nThe item is aligned in the center of the containing element.\ncase right\nThe item is aligned along the right of the containing element.\ncase leading\nThe item is aligned along the leading edge of the containing element.\ncase trailing\nThe item is aligned along the trailing edge of the containing element."
  },
  {
    "title": "TVElementContentAlignment.bottom",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementcontentalignment/bottom",
    "html": "See Also\nConstants\nTVElementContentAlignmentUndefinded\nThe alignment has not been defined for the element.\ncase top\nItems are aligned along the top of the element.\ncase center\nItems are aligned in the center of the element."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/code/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "TVColorType.linearGradientTopToBottom",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolortype/lineargradienttoptobottom",
    "html": "See Also\nConstants\ncase none\nIndicates that there is no color associated with an element.\ncase plain\nIndicates that a single color is to be used with an element.\ncase linearGradientLeftToRight\nIndicates that a color gradient goes from the left to the right of an element."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/code/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "TVDocumentError.Code.failed",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/code/failed",
    "html": "See Also\nEnumeration Cases\ncase cancelled"
  },
  {
    "title": "TVDocumentError.Code.cancelled",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/code/cancelled",
    "html": "See Also\nEnumeration Cases\ncase failed"
  },
  {
    "title": "TVColorType.linearGradientLeftToRight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolortype/lineargradientlefttoright",
    "html": "See Also\nConstants\ncase none\nIndicates that there is no color associated with an element.\ncase plain\nIndicates that a single color is to be used with an element.\ncase linearGradientTopToBottom\nIndicates that a color gradient goes from the top to the bottom of an element."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "TVViewElementStyleType.edgeInsets",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype/edgeinsets",
    "html": "See Also\nConstants\ncase integer\nAn NSNumber value.\ncase double\nAn NSNumber value.\ncase point\nA CGPoint value.\ncase string\nA NSString value.\ncase color\nA TVColor value.\ncase URL\nA NSURL value."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkiterror/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "TVMLKitError.internetUnavailable",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkiterror/internetunavailable",
    "html": "See Also\nErrors\ncase failedToLaunch\nThe app failed to launch.\ncase last\nReserved.\ncase unknown\nUnable to determine the cause of the error."
  },
  {
    "title": "TVElementPosition.bottomLeft",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/bottomleft",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.topLeft",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/topleft",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.topRight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/topright",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.header",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/header",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.bottomRight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/bottomright",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.footer",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/footer",
    "html": "See Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.leading",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/leading",
    "html": "Discussion\n\nFor left-to-right languages, the leading edge is the left edge. For right-to-left languages, the leading edge is the right edge.\n\nSee Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.trailing",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/trailing",
    "html": "Discussion\n\nFor left-to-right languages, the trailing edge is the right edge. For right-to-left languages, the trailing edge is the left edge.\n\nSee Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.bottomTrailing",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/bottomtrailing",
    "html": "Discussion\n\nFor left-to-right languages, the trailing edge is the right edge. For right-to-left languages, the trailing edge is the left edge.\n\nSee Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element."
  },
  {
    "title": "TVElementPosition.topLeading",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/topleading",
    "html": "Discussion\n\nFor left-to-right languages, the leading edge is the left edge. For right-to-left languages, the leading edge is the right edge.\n\nSee Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "TVElementPosition.bottomLeading",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/bottomleading",
    "html": "Discussion\n\nFor left-to-right languages, the leading edge is the left edge. For right-to-left languages, the leading edge is the right edge.\n\nSee Also\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element."
  },
  {
    "title": "nextMediaItem",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplayer/nextmediaitem",
    "html": "See Also\nInspecting Media Items\nfunc setCurrentMediaItem(toItemAtIndex: Int)\nSets the current media item to the designated media item.\nvar previousMediaItem: TVMediaItem?\nThe previously selected media item.\nvar currentMediaItem: TVMediaItem?\nThe currently selected media item."
  },
  {
    "title": "previousMediaItem",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplayer/previousmediaitem",
    "html": "See Also\nInspecting Media Items\nfunc setCurrentMediaItem(toItemAtIndex: Int)\nSets the current media item to the designated media item.\nvar currentMediaItem: TVMediaItem?\nThe currently selected media item.\nvar nextMediaItem: TVMediaItem?\nThe next media item in the playlist."
  },
  {
    "title": "TVTextElementStyle.description",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelementstyle/description",
    "html": "See Also\nConstants\ncase none\nNo style is applied to the element.\ncase title\nThe title style defaults are applied to the element.\ncase subtitle\nThe subtitle style defaults are applied to the element.\ncase decoration\nThe decoration style defaults are applied to the element."
  },
  {
    "title": "setCurrentMediaItem(toItemAtIndex:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplayer/setcurrentmediaitem(toitematindex:)",
    "html": "Parameters\nindex\n\nThe location in the playlist array containing the desired media item.\n\nSee Also\nInspecting Media Items\nvar previousMediaItem: TVMediaItem?\nThe previously selected media item.\nvar currentMediaItem: TVMediaItem?\nThe currently selected media item.\nvar nextMediaItem: TVMediaItem?\nThe next media item in the playlist."
  },
  {
    "title": "TVTextElementStyle.title",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelementstyle/title",
    "html": "See Also\nConstants\ncase none\nNo style is applied to the element.\ncase subtitle\nThe subtitle style defaults are applied to the element.\ncase description\nThe description style defaults are applied to the element.\ncase decoration\nThe decoration style defaults are applied to the element."
  },
  {
    "title": "TVTextElementStyle.decoration",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelementstyle/decoration",
    "html": "See Also\nConstants\ncase none\nNo style is applied to the element.\ncase title\nThe title style defaults are applied to the element.\ncase subtitle\nThe subtitle style defaults are applied to the element.\ncase description\nThe description style defaults are applied to the element."
  },
  {
    "title": "TVPlaybackCustomEventUserInfo",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackcustomeventuserinfo",
    "html": "Topics\nCreating User Info for Custom Playback Events\ninit(properties: [TVPlaybackEventProperty : Any]?, expectsReturnValue: Bool)\nCreate a new custom playback event user info dictionary.\nstruct TVPlaybackEventProperty\nExtend this structure to create your own custom playback event properties.\nvar expectsReturnValue: Bool\nA Boolean value that indicates whether the custom event expects to contain a return value.\nvar returnValue: Any?\nThe return value type for the custom event.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nTVPlaybackEventMarshaling\nSee Also\nControlling Playback\nfunc next()\nPlays the next media item in the playlist.\nfunc pause()\nPauses the currently playing item.\nfunc previous()\nPlays the previous media item in the playlist.\nvar state: TVPlaybackState\nThe current state of the player.\nenum TVPlaybackState\nThe possible states of a player.\nfunc dispatch(event: TVPlaybackEvent, userInfo: (any TVPlaybackEventMarshaling)?, completion: ((Bool) -> Void)?)\nDispatches custom playback events to the JavaScript environment.\nstruct TVPlaybackEvent\nExtend this structure to send your custom playback events to the JavaScript environment.\nprotocol TVPlaybackEventMarshaling\nA protocol used for sending and receiving information across the JavaScript bridge."
  },
  {
    "title": "TVPlaybackEventMarshaling",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackeventmarshaling",
    "html": "Overview\n\nYou must conform to this protocol in order to pass custom events.\n\nTopics\nProcessing Playback Events\nfunc processReturnValue(value: JSValue, in: JSContext)\nConverts a JavaScript value into a value that is readable in Swift or Objective-C.\nvar properties: [TVPlaybackEventProperty : Any]?\nAn array of custom playback event properties.\n\nRequired\n\nstruct TVPlaybackEventProperty\nExtend this structure to create your own custom playback event properties.\nRelationships\nInherits From\nNSObjectProtocol\nConforming Types\nTVPlaybackCustomEventUserInfo\nSee Also\nControlling Playback\nfunc next()\nPlays the next media item in the playlist.\nfunc pause()\nPauses the currently playing item.\nfunc previous()\nPlays the previous media item in the playlist.\nvar state: TVPlaybackState\nThe current state of the player.\nenum TVPlaybackState\nThe possible states of a player.\nfunc dispatch(event: TVPlaybackEvent, userInfo: (any TVPlaybackEventMarshaling)?, completion: ((Bool) -> Void)?)\nDispatches custom playback events to the JavaScript environment.\nstruct TVPlaybackEvent\nExtend this structure to send your custom playback events to the JavaScript environment.\nclass TVPlaybackCustomEventUserInfo\nThe user information used in a custom playback event."
  },
  {
    "title": "TVTextElementStyle.none",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelementstyle/none",
    "html": "See Also\nConstants\ncase title\nThe title style defaults are applied to the element.\ncase subtitle\nThe subtitle style defaults are applied to the element.\ncase description\nThe description style defaults are applied to the element.\ncase decoration\nThe decoration style defaults are applied to the element."
  },
  {
    "title": "collectionViewCellClass(for:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvinterfacecreating/collectionviewcellclass(for:)",
    "html": "Required\n\nParameters\nelement\n\nThe element a collection view cell is created for.\n\nReturn Value\n\nThe new collection view cell associated with the given element name.\n\nDiscussion\n\nThe collection view cell must be in a list, shelf, or grid. This method is called once per unique element name as a common cell class is used for all elements that share the same name in a collection. Return nil for default handling.\n\nSee Also\nUpdating View Information\nfunc makeViewController(element: TVViewElement, existingViewController: UIViewController?) -> UIViewController?\nReturns a view controller for a view element.\nfunc makeView(element: TVViewElement, existingView: UIView?) -> UIView?\nReturns a view for a view element.\n\nRequired\n\nfunc playerViewController(for: TVPlayer) -> UIViewController?\nReturns the custom player user interface for a custom player."
  },
  {
    "title": "TVTextElementStyle.subtitle",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelementstyle/subtitle",
    "html": "See Also\nConstants\ncase none\nNo style is applied to the element.\ncase title\nThe title style defaults are applied to the element.\ncase description\nThe description style defaults are applied to the element.\ncase decoration\nThe decoration style defaults are applied to the element."
  },
  {
    "title": "resourceURL(name:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvinterfacecreating/resourceurl(name:)",
    "html": "Required\n\nParameters\nresourceName\n\nA string that contains the name of the resource.\n\nReturn Value\n\nThe URL associated with the resource name. The app must return nil if the event is not handled.\n\nDiscussion\n\nThe resourceName parameter comes from a resource URL specified in certain elements. For example, badge src=\"resource://developer-resource\"> contains the resource name, developer-resource.\n\nSee Also\nRetrieving Resource Information\nfunc resourceImage(name: String) -> UIImage?\nReturns the image for the given resource"
  },
  {
    "title": "makeViewController(element:existingViewController:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvinterfacecreating/makeviewcontroller(element:existingviewcontroller:)",
    "html": "Parameters\nelement\n\nThe view element requesting a view controller.\n\nexistingViewController\n\nThe current view controller.\n\nReturn Value\n\nThe new view controller associated with the view element. If the app doesn’t handle this event, you must return nil.\n\nDiscussion\n\nWhen possible, update the view controller contained in the existingViewController parameter instead of creating a new view controller.\n\nSee Also\nUpdating View Information\nfunc makeView(element: TVViewElement, existingView: UIView?) -> UIView?\nReturns a view for a view element.\n\nRequired\n\nfunc collectionViewCellClass(for: TVViewElement) -> AnyClass?\nReturns a collection view cell for the specified element.\n\nRequired\n\nfunc playerViewController(for: TVPlayer) -> UIViewController?\nReturns the custom player user interface for a custom player."
  },
  {
    "title": "resourceImage(name:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvinterfacecreating/resourceimage(name:)",
    "html": "Parameters\nresourceName\n\nA string that contains the name of the resource.\n\nReturn Value\n\nThe UIImage associated with the resource name. Returns nil if no image matches the resource name or if the event is not handled.\n\nDiscussion\n\nThe resourceName parameter comes from a resource URL specified in certain elements. For example, <``badge src=\"resource://developer-resource\"> contains the resource name, developer-resource.\n\nSee Also\nRetrieving Resource Information\nfunc resourceURL(name: String) -> URL?\nReturns a URL for the given resource.\n\nRequired"
  },
  {
    "title": "playerViewController(for:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvinterfacecreating/playerviewcontroller(for:)",
    "html": "Parameters\nplayer\n\nThe player requesting a view controller.\n\nReturn Value\n\nThe new view controller associated with the view element. If the app doesn’t handle this event, you must return nil.\n\nSee Also\nUpdating View Information\nfunc makeViewController(element: TVViewElement, existingViewController: UIViewController?) -> UIViewController?\nReturns a view controller for a view element.\nfunc makeView(element: TVViewElement, existingView: UIView?) -> UIView?\nReturns a view for a view element.\n\nRequired\n\nfunc collectionViewCellClass(for: TVViewElement) -> AnyClass?\nReturns a collection view cell for the specified element.\n\nRequired"
  },
  {
    "title": "type",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/type",
    "html": "See Also\nIdentifying Media Items\nvar artworkImageURL: URL?\nThe URL path to the artwork that accompanies the media item.\nvar itemDescription: String?\nThe description for a media item.\nvar subtitle: String?\nThe subtitle for a media item.\nvar title: String?\nThe title for a media item.\nstruct MediaType\nA value indicating whether the media is audio or video.\nvar url: URL?\nThe URL path to the media item.\nvar userInfo: [String : Any]\nUser-defined metadata, like a developer-specific identifier, for a media item."
  },
  {
    "title": "TVTextStyleCallout",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextstylecallout",
    "html": "See Also\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight."
  },
  {
    "title": "ratingStyle",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/ratingstyle",
    "html": "Discussion\n\nFor possible values, see Rating Style Values.\n\nSee Also\nModifying an Image\nvar imageTreatmentName: String?\nA value that determines how an image is displayed."
  },
  {
    "title": "color",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/color",
    "html": "See Also\nColoring an Element\nvar backgroundColor: TVColor?\nThe background color for an element.\nvar highlightColor: TVColor?\nThe color of the element when it is highlighted.\nvar tintColor: TVColor?\nThe tint color applied to an element."
  },
  {
    "title": "tintColor",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/tintcolor",
    "html": "See Also\nColoring an Element\nvar backgroundColor: TVColor?\nThe background color for an element.\nvar color: TVColor?\nThe color for an element.\nvar highlightColor: TVColor?\nThe color of the element when it is highlighted."
  },
  {
    "title": "textAlignment",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/textalignment",
    "html": "See Also\nChanging the Text of an Element\nvar fontSize: CGFloat\nThe font size applied to any text contained in the element.\nvar fontWeight: String?\nA string indicating how thick or thin the font is.\nvar maxTextLines: Int\nThe maximum number of lines of text allowed inside of the element.\nvar textHighlightStyle: String?\nA string indicating how a label reacts when it is in focus.\nvar textMinimumScaleFactor: CGFloat\nThe minimum size text can be if the original text size does not fit in an element.\nvar textStyle: String?\nThe style applied to the text in an element."
  },
  {
    "title": "maxWidth",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/maxwidth",
    "html": "See Also\nDefining the Height and Width of an Element\nvar height: CGFloat\nThe height, in pixels, for an element.\nvar maxHeight: CGFloat\nThe maximum height, in pixels, for the element.\nvar minHeight: CGFloat\nThe minimum height, in pixels, for an element.\nvar minWidth: CGFloat\nThe minimum width, in pixels, for an element.\nvar width: CGFloat\nThe width, in pixels, for an element."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelementstyle/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelementstyle/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "maxHeight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/maxheight",
    "html": "See Also\nDefining the Height and Width of an Element\nvar height: CGFloat\nThe height, in pixels, for an element.\nvar maxWidth: CGFloat\nThe maximum width, in pixels, for an element.\nvar minHeight: CGFloat\nThe minimum height, in pixels, for an element.\nvar minWidth: CGFloat\nThe minimum width, in pixels, for an element.\nvar width: CGFloat\nThe width, in pixels, for an element."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimagetype/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimagetype/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "TVImageType.decoration",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimagetype/decoration",
    "html": "See Also\nConstants\ncase image\nThe image is presented in its actual size.\ncase fullscreen\nThe image occupies the entire screen.\ncase hero\nThe image is a hero image, which is used to display a product image."
  },
  {
    "title": "TVImageType.hero",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimagetype/hero",
    "html": "See Also\nConstants\ncase image\nThe image is presented in its actual size.\ncase fullscreen\nThe image occupies the entire screen.\ncase decoration\nThe image is a decoration image, which is used to display an image inside of another image."
  },
  {
    "title": "color",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolor/color",
    "html": "Discussion\n\nOnly available when colorType is set to TVColorType.plain.\n\nSee Also\nGetting Color Properties\nvar colorType: TVColorType\nThe color type for an element.\nenum TVColorType\nDesignates how color for an element is to be displayed.\nvar gradientColors: [UIColor]?\nAn array of colors used to create a gradient for an element.\nvar gradientPoints: [NSNumber]?\nAn array of points used to determine gradient color changes."
  },
  {
    "title": "TVImageType.fullscreen",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimagetype/fullscreen",
    "html": "See Also\nConstants\ncase image\nThe image is presented in its actual size.\ncase decoration\nThe image is a decoration image, which is used to display an image inside of another image.\ncase hero\nThe image is a hero image, which is used to display a product image."
  },
  {
    "title": "TVImageType.image",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimagetype/image",
    "html": "See Also\nConstants\ncase fullscreen\nThe image occupies the entire screen.\ncase decoration\nThe image is a decoration image, which is used to display an image inside of another image.\ncase hero\nThe image is a hero image, which is used to display a product image."
  },
  {
    "title": "localizedDescription",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/localizeddescription",
    "html": "See Also\nAccessing Error Data\nstatic var errorDomain: String\nDefault domain of the error."
  },
  {
    "title": "launchOptions",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollercontext/launchoptions",
    "html": "Discussion\n\nThe system will pass this data to the JavaScript onLaunch method. The values contained in this property must be serializable. You must include url and sourceApplication in the launch options if the JavaScript implements the openURL(_:) method.\n\nSee Also\nProviding Launch Information\nvar javaScriptApplicationURL: URL\nURL pointing to the controlling JavaScript file for the application.\nvar storageIdentifier: String?\nOptional identifier for a local storage file.\nvar supportsPictureInPicturePlayback: Bool\nA Boolean value that indicates whether your app can display content in a picture-in-picture format."
  },
  {
    "title": "supportsPictureInPicturePlayback",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollercontext/supportspictureinpictureplayback",
    "html": "Discussion\n\nWhen this property is set to true, the system allows the user to continue watching your app’s video content while using other apps. If you customize playback with AVPlayerViewController, set the controller’s delegate property to an object that implements the AVPlayerViewControllerDelegate protocol and the system will notify that object about picture-in-picture playback events.\n\nThe default value is true.\n\nSee Also\nProviding Launch Information\nvar javaScriptApplicationURL: URL\nURL pointing to the controlling JavaScript file for the application.\nvar launchOptions: [String : Any]\nData passed to the JavaScript launch callback method.\nvar storageIdentifier: String?\nOptional identifier for a local storage file."
  },
  {
    "title": "browserViewController(_:documentViewControllerFor:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontrollerdatasource/browserviewcontroller(_:documentviewcontrollerfor:)",
    "html": "Required"
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkiterror/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "storageIdentifier",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollercontext/storageidentifier",
    "html": "See Also\nProviding Launch Information\nvar javaScriptApplicationURL: URL\nURL pointing to the controlling JavaScript file for the application.\nvar launchOptions: [String : Any]\nData passed to the JavaScript launch callback method.\nvar supportsPictureInPicturePlayback: Bool\nA Boolean value that indicates whether your app can display content in a picture-in-picture format."
  },
  {
    "title": "Error Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/error-implementations",
    "html": "Topics\nInstance Properties\nvar localizedDescription: String\nRetrieve the localized description for this error."
  },
  {
    "title": "javaScriptApplicationURL",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollercontext/javascriptapplicationurl",
    "html": "See Also\nProviding Launch Information\nvar launchOptions: [String : Any]\nData passed to the JavaScript launch callback method.\nvar storageIdentifier: String?\nOptional identifier for a local storage file.\nvar supportsPictureInPicturePlayback: Bool\nA Boolean value that indicates whether your app can display content in a picture-in-picture format."
  },
  {
    "title": "resumeTime",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/resumetime",
    "html": "See Also\nSetting Timing Options\nvar highlightGroups: [TVMediaItem.HighlightGroup]\nAn array containing groups of individual highlights in a media item.\nclass HighlightGroup\nA container for groups of highlights for a media item.\nvar interstitials: [TVMediaItem.TimeRange]\nAn array of time intervals that indicate where to insert media items into another, single media item.\nclass TimeRange\nAn object that defines a time range in a media item."
  },
  {
    "title": "TVMLKitError.last",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkiterror/last",
    "html": "See Also\nErrors\ncase failedToLaunch\nThe app failed to launch.\ncase internetUnavailable\nNo connection to the Internet is available.\ncase unknown\nUnable to determine the cause of the error."
  },
  {
    "title": "TVMLKitError.unknown",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkiterror/unknown",
    "html": "See Also\nErrors\ncase failedToLaunch\nThe app failed to launch.\ncase internetUnavailable\nNo connection to the Internet is available.\ncase last\nReserved."
  },
  {
    "title": "highlightGroups",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/highlightgroups",
    "html": "Discussion\n\nThe highlightGroups property enables you to show several groups highlights from a stream. Each highlight group in the array contains a list of highlights. Each highlight is an object with the following properties: highlightDescription, localizedName, imageURL, and TVMediaItem.TimeRange.\n\nFor example, consider a video of a baseball game, which is the media item. You can create a highlight group containing the video for each home run —each highlight— in the game. You create another highlight group containing all of the errors. You put these highlight groups into the highlightGroups property.\n\nSee Also\nSetting Timing Options\nclass HighlightGroup\nA container for groups of highlights for a media item.\nvar interstitials: [TVMediaItem.TimeRange]\nAn array of time intervals that indicate where to insert media items into another, single media item.\nclass TimeRange\nAn object that defines a time range in a media item.\nvar resumeTime: TimeInterval\nThe number of seconds from the beginning of a media item to the point where that media item begins playing."
  },
  {
    "title": "TVMediaItem.TimeRange",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/timerange",
    "html": "Topics\nDefining the Time Range\nvar startTime: TimeInterval\nThe time in a media item that determines when a time range begins.\nvar endTime: TimeInterval\nThe time in a media item that determines when a time range ends.\nvar duration: TimeInterval\nThe duration of a time range in a media item.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nSetting Timing Options\nvar highlightGroups: [TVMediaItem.HighlightGroup]\nAn array containing groups of individual highlights in a media item.\nclass HighlightGroup\nA container for groups of highlights for a media item.\nvar interstitials: [TVMediaItem.TimeRange]\nAn array of time intervals that indicate where to insert media items into another, single media item.\nvar resumeTime: TimeInterval\nThe number of seconds from the beginning of a media item to the point where that media item begins playing."
  },
  {
    "title": "TVMLKitError.failedToLaunch",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkiterror/failedtolaunch",
    "html": "See Also\nErrors\ncase internetUnavailable\nNo connection to the Internet is available.\ncase last\nReserved.\ncase unknown\nUnable to determine the cause of the error."
  },
  {
    "title": "interstitials",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/interstitials",
    "html": "Discussion\n\nThe Interstitials property defines points within a TVMediaItem object where you can insert another media item; for example, a short ad. Each time range in the array contains two properties: startTime and duration. The startTime is the length of time from the beginning of a media item, in seconds. The duration is the length of the interstitial, in seconds. Both properties are required. A common use for these objects is to define when and where ads are to be played during a stream.\n\nSee Also\nSetting Timing Options\nvar highlightGroups: [TVMediaItem.HighlightGroup]\nAn array containing groups of individual highlights in a media item.\nclass HighlightGroup\nA container for groups of highlights for a media item.\nclass TimeRange\nAn object that defines a time range in a media item.\nvar resumeTime: TimeInterval\nThe number of seconds from the beginning of a media item to the point where that media item begins playing."
  },
  {
    "title": "TVMediaItem.HighlightGroup",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/highlightgroup",
    "html": "Topics\nAccessing the Highlights\nvar localizedName: String?\nThe name of a highlight group.\nvar highlights: [TVMediaItem.Highlight]\nAn array of the individual highlights that make up a group.\nclass Highlight\nAn object that describes a media item highlight.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nSetting Timing Options\nvar highlightGroups: [TVMediaItem.HighlightGroup]\nAn array containing groups of individual highlights in a media item.\nvar interstitials: [TVMediaItem.TimeRange]\nAn array of time intervals that indicate where to insert media items into another, single media item.\nclass TimeRange\nAn object that defines a time range in a media item.\nvar resumeTime: TimeInterval\nThe number of seconds from the beginning of a media item to the point where that media item begins playing."
  },
  {
    "title": "userInfo",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/userinfo",
    "html": "See Also\nIdentifying Media Items\nvar artworkImageURL: URL?\nThe URL path to the artwork that accompanies the media item.\nvar itemDescription: String?\nThe description for a media item.\nvar subtitle: String?\nThe subtitle for a media item.\nvar title: String?\nThe title for a media item.\nvar type: TVMediaItem.MediaType?\nThe type of media item.\nstruct MediaType\nA value indicating whether the media is audio or video.\nvar url: URL?\nThe URL path to the media item."
  },
  {
    "title": "url",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/url",
    "html": "See Also\nIdentifying Media Items\nvar artworkImageURL: URL?\nThe URL path to the artwork that accompanies the media item.\nvar itemDescription: String?\nThe description for a media item.\nvar subtitle: String?\nThe subtitle for a media item.\nvar title: String?\nThe title for a media item.\nvar type: TVMediaItem.MediaType?\nThe type of media item.\nstruct MediaType\nA value indicating whether the media is audio or video.\nvar userInfo: [String : Any]\nUser-defined metadata, like a developer-specific identifier, for a media item."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "TVPlaybackState",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackstate",
    "html": "Topics\nPlayback States\ncase undefined\nThe playback state of the player is undefined.\ncase begin\nThe player is beginning playback.\ncase loading\nThe player is loading a media item.\ncase playing\nThe player is currently playing.\ncase paused\nThe player paused playback.\ncase scanning\nThe player is quickly scanning forwards or backwards.\ncase fastForwarding\nThe player is fast-forwarding.\ncase rewinding\nThe player is rewinding.\ncase end\nThe player ended playback.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nControlling Playback\nfunc next()\nPlays the next media item in the playlist.\nfunc pause()\nPauses the currently playing item.\nfunc previous()\nPlays the previous media item in the playlist.\nvar state: TVPlaybackState\nThe current state of the player.\nfunc dispatch(event: TVPlaybackEvent, userInfo: (any TVPlaybackEventMarshaling)?, completion: ((Bool) -> Void)?)\nDispatches custom playback events to the JavaScript environment.\nstruct TVPlaybackEvent\nExtend this structure to send your custom playback events to the JavaScript environment.\nprotocol TVPlaybackEventMarshaling\nA protocol used for sending and receiving information across the JavaScript bridge.\nclass TVPlaybackCustomEventUserInfo\nThe user information used in a custom playback event."
  },
  {
    "title": "dispatch(event:userInfo:completion:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplayer/dispatch(event:userinfo:completion:)",
    "html": "Parameters\nevent\n\nThe custom playback event to be dispatched.\n\nuserInfo\n\nThe user information for the custom event.\n\ncompletion\n\nA block that is called after the event has been dispatched. Contains the information required to process the event’s results.\n\nDiscussion\n\nImportant\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc dispatch(event: TVPlaybackEvent, userInfo: (any TVPlaybackEventMarshaling)?) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nControlling Playback\nfunc next()\nPlays the next media item in the playlist.\nfunc pause()\nPauses the currently playing item.\nfunc previous()\nPlays the previous media item in the playlist.\nvar state: TVPlaybackState\nThe current state of the player.\nenum TVPlaybackState\nThe possible states of a player.\nstruct TVPlaybackEvent\nExtend this structure to send your custom playback events to the JavaScript environment.\nprotocol TVPlaybackEventMarshaling\nA protocol used for sending and receiving information across the JavaScript bridge.\nclass TVPlaybackCustomEventUserInfo\nThe user information used in a custom playback event."
  },
  {
    "title": "TVPlaybackEvent",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaybackevent",
    "html": "Topics\nInitializers\ninit(String)\ninit(rawValue: String)\nDefault Implementations\nEquatable Implementations\n_SwiftNewtypeWrapper Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nControlling Playback\nfunc next()\nPlays the next media item in the playlist.\nfunc pause()\nPauses the currently playing item.\nfunc previous()\nPlays the previous media item in the playlist.\nvar state: TVPlaybackState\nThe current state of the player.\nenum TVPlaybackState\nThe possible states of a player.\nfunc dispatch(event: TVPlaybackEvent, userInfo: (any TVPlaybackEventMarshaling)?, completion: ((Bool) -> Void)?)\nDispatches custom playback events to the JavaScript environment.\nprotocol TVPlaybackEventMarshaling\nA protocol used for sending and receiving information across the JavaScript bridge.\nclass TVPlaybackCustomEventUserInfo\nThe user information used in a custom playback event."
  },
  {
    "title": "previous()",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplayer/previous()",
    "html": "See Also\nControlling Playback\nfunc next()\nPlays the next media item in the playlist.\nfunc pause()\nPauses the currently playing item.\nvar state: TVPlaybackState\nThe current state of the player.\nenum TVPlaybackState\nThe possible states of a player.\nfunc dispatch(event: TVPlaybackEvent, userInfo: (any TVPlaybackEventMarshaling)?, completion: ((Bool) -> Void)?)\nDispatches custom playback events to the JavaScript environment.\nstruct TVPlaybackEvent\nExtend this structure to send your custom playback events to the JavaScript environment.\nprotocol TVPlaybackEventMarshaling\nA protocol used for sending and receiving information across the JavaScript bridge.\nclass TVPlaybackCustomEventUserInfo\nThe user information used in a custom playback event."
  },
  {
    "title": "state",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplayer/state",
    "html": "See Also\nControlling Playback\nfunc next()\nPlays the next media item in the playlist.\nfunc pause()\nPauses the currently playing item.\nfunc previous()\nPlays the previous media item in the playlist.\nenum TVPlaybackState\nThe possible states of a player.\nfunc dispatch(event: TVPlaybackEvent, userInfo: (any TVPlaybackEventMarshaling)?, completion: ((Bool) -> Void)?)\nDispatches custom playback events to the JavaScript environment.\nstruct TVPlaybackEvent\nExtend this structure to send your custom playback events to the JavaScript environment.\nprotocol TVPlaybackEventMarshaling\nA protocol used for sending and receiving information across the JavaScript bridge.\nclass TVPlaybackCustomEventUserInfo\nThe user information used in a custom playback event."
  },
  {
    "title": "next()",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplayer/next()",
    "html": "See Also\nControlling Playback\nfunc pause()\nPauses the currently playing item.\nfunc previous()\nPlays the previous media item in the playlist.\nvar state: TVPlaybackState\nThe current state of the player.\nenum TVPlaybackState\nThe possible states of a player.\nfunc dispatch(event: TVPlaybackEvent, userInfo: (any TVPlaybackEventMarshaling)?, completion: ((Bool) -> Void)?)\nDispatches custom playback events to the JavaScript environment.\nstruct TVPlaybackEvent\nExtend this structure to send your custom playback events to the JavaScript environment.\nprotocol TVPlaybackEventMarshaling\nA protocol used for sending and receiving information across the JavaScript bridge.\nclass TVPlaybackCustomEventUserInfo\nThe user information used in a custom playback event."
  },
  {
    "title": "pause()",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplayer/pause()",
    "html": "See Also\nControlling Playback\nfunc next()\nPlays the next media item in the playlist.\nfunc previous()\nPlays the previous media item in the playlist.\nvar state: TVPlaybackState\nThe current state of the player.\nenum TVPlaybackState\nThe possible states of a player.\nfunc dispatch(event: TVPlaybackEvent, userInfo: (any TVPlaybackEventMarshaling)?, completion: ((Bool) -> Void)?)\nDispatches custom playback events to the JavaScript environment.\nstruct TVPlaybackEvent\nExtend this structure to send your custom playback events to the JavaScript environment.\nprotocol TVPlaybackEventMarshaling\nA protocol used for sending and receiving information across the JavaScript bridge.\nclass TVPlaybackCustomEventUserInfo\nThe user information used in a custom playback event."
  },
  {
    "title": "TVMediaItem.MediaType",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/mediatype",
    "html": "Topics\nMedia Types\nstatic let audio: TVMediaItem.MediaType\nThe media item is audio only.\nstatic let video: TVMediaItem.MediaType\nThe media item incorporates video.\nInitializers\ninit(String)\ninit(rawValue: String)\nDefault Implementations\nEquatable Implementations\n_SwiftNewtypeWrapper Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nIdentifying Media Items\nvar artworkImageURL: URL?\nThe URL path to the artwork that accompanies the media item.\nvar itemDescription: String?\nThe description for a media item.\nvar subtitle: String?\nThe subtitle for a media item.\nvar title: String?\nThe title for a media item.\nvar type: TVMediaItem.MediaType?\nThe type of media item.\nvar url: URL?\nThe URL path to the media item.\nvar userInfo: [String : Any]\nUser-defined metadata, like a developer-specific identifier, for a media item."
  },
  {
    "title": "TVElementResettableProperty",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementresettableproperty",
    "html": "Topics\nConstants\ncase updateType\nThe updateType property is reset to TVElementUpdateType.none.\ncase autoHighlightIdentifier\nThe autoHighlightIdentifier property is reset to nil.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nResetting a Property’s Value\nfunc resetProperty(TVElementResettableProperty)\nResets the property to its default value."
  },
  {
    "title": "title",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/title",
    "html": "See Also\nIdentifying Media Items\nvar artworkImageURL: URL?\nThe URL path to the artwork that accompanies the media item.\nvar itemDescription: String?\nThe description for a media item.\nvar subtitle: String?\nThe subtitle for a media item.\nvar type: TVMediaItem.MediaType?\nThe type of media item.\nstruct MediaType\nA value indicating whether the media is audio or video.\nvar url: URL?\nThe URL path to the media item.\nvar userInfo: [String : Any]\nUser-defined metadata, like a developer-specific identifier, for a media item."
  },
  {
    "title": "subtitle",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/subtitle",
    "html": "See Also\nIdentifying Media Items\nvar artworkImageURL: URL?\nThe URL path to the artwork that accompanies the media item.\nvar itemDescription: String?\nThe description for a media item.\nvar title: String?\nThe title for a media item.\nvar type: TVMediaItem.MediaType?\nThe type of media item.\nstruct MediaType\nA value indicating whether the media is audio or video.\nvar url: URL?\nThe URL path to the media item.\nvar userInfo: [String : Any]\nUser-defined metadata, like a developer-specific identifier, for a media item."
  },
  {
    "title": "TVElementEventType",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementeventtype",
    "html": "Topics\nEnumeration Cases\ncase change\nA change event has been dispatched.\ncase highlight\nA highlight event has been dispatched.\ncase holdSelect\nA hold event has been dispatched.\ncase play\nA play event has been dispatched.\ncase select\nA select event has been dispatched.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nDispatching Events\nfunc dispatchEvent(type: TVElementEventType, canBubble: Bool, cancellable: Bool, extraInfo: [String : Any]?, completion: ((Bool, Bool) -> Void)?)\nDispatches an event of a specific type to the JavaScript file.\nfunc dispatchEvent(name: String, canBubble: Bool, cancellable: Bool, extraInfo: [String : Any]?, completion: ((Bool, Bool) -> Void)?)\nDispatches a custom-named event."
  },
  {
    "title": "artworkImageURL",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/artworkimageurl",
    "html": "See Also\nIdentifying Media Items\nvar itemDescription: String?\nThe description for a media item.\nvar subtitle: String?\nThe subtitle for a media item.\nvar title: String?\nThe title for a media item.\nvar type: TVMediaItem.MediaType?\nThe type of media item.\nstruct MediaType\nA value indicating whether the media is audio or video.\nvar url: URL?\nThe URL path to the media item.\nvar userInfo: [String : Any]\nUser-defined metadata, like a developer-specific identifier, for a media item."
  },
  {
    "title": "contentRatingRanking",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingranking",
    "html": "Discussion\n\nThe rating is a value from 0-1000. This value corresponds to a specific rating used by different countries. For example, a rating value can represent a PG-13 rating in the United States and an MA15+ in Australia.\n\nSee Also\nRating Media Content\nvar containsExplicitContent: Bool\nA Boolean value indicating whether the item contains adult-oriented content.\nvar contentRatingDomain: TVMediaItem.ContentRatingDomain?\nThe media domain that the rating applies to.\nstruct ContentRatingDomain\nA value identifying the media’s content rating domain."
  },
  {
    "title": "init(context:for:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/init(context:for:)",
    "html": "Discussion\n\nThe context parameter provides information to TVMLKit JS to determine which document to load."
  },
  {
    "title": "contentRatingDomain",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.property",
    "html": "See Also\nRating Media Content\nvar containsExplicitContent: Bool\nA Boolean value indicating whether the item contains adult-oriented content.\nstruct ContentRatingDomain\nA value identifying the media’s content rating domain.\nvar contentRatingRanking: NSNumber?\nThe rating for a video item."
  },
  {
    "title": "TVMediaItem.ContentRatingDomain",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/contentratingdomain-swift.struct",
    "html": "Topics\nRating Domains\nstatic let movie: TVMediaItem.ContentRatingDomain\nThe media item’s rating uses the movie domain.\nstatic let music: TVMediaItem.ContentRatingDomain\nThe media item’s rating uses the music domain.\nstatic let tvShow: TVMediaItem.ContentRatingDomain\nThe media item’s rating uses the TV show domain.\nInitializers\ninit(String)\ninit(rawValue: String)\nDefault Implementations\nEquatable Implementations\n_SwiftNewtypeWrapper Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nRating Media Content\nvar containsExplicitContent: Bool\nA Boolean value indicating whether the item contains adult-oriented content.\nvar contentRatingDomain: TVMediaItem.ContentRatingDomain?\nThe media domain that the rating applies to.\nvar contentRatingRanking: NSNumber?\nThe rating for a video item."
  },
  {
    "title": "Label State Values",
    "url": "https://developer.apple.com/documentation/tvmlkit/label-state-values",
    "html": "Overview\nNSString *const TVTextHighlightStyleShowOnHighlight;\nNSString *const TVTextHighlightStyleMarqueeOnHighlight;\nNSString *const TVTextHighlightStyleMarqueeAndShowOnHighlight;\n\nTopics\nConstants\nTVTextHighlightStyleShowOnHighlight\nAny text that is longer than the available space will scroll across the screen.\nTVTextHighlightStyleMarqueeOnHighlight\nAny text that is longer than the available space is truncated.\nTVTextHighlightStyleMarqueeAndShowOnHighlight\nThe text will scroll across the screen if the text is longer than the available space.\nSee Also\nElement Styles\nTransition Style Values\nThe type of transition to apply to an element.\nRating Style Values\nThe size of the star image used for a rating element.\nText Style Values\nFont size and weight."
  },
  {
    "title": "containsExplicitContent",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem/containsexplicitcontent",
    "html": "Discussion\n\nThis property is ignored when the type is video.\n\nSee Also\nRating Media Content\nvar contentRatingDomain: TVMediaItem.ContentRatingDomain?\nThe media domain that the rating applies to.\nstruct ContentRatingDomain\nA value identifying the media’s content rating domain.\nvar contentRatingRanking: NSNumber?\nThe rating for a video item."
  },
  {
    "title": "TVPlaylist.EndAction",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/endaction-swift.enum",
    "html": "Topics\nEnd Playback Reasons\ncase stop\nThe player has stopped playback\ncase pause\nThe player has paused playback.\ncase waitForMoreItems\nThe player is waiting for more media items.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nRetrieving Playlist Information\nvar mediaItems: [TVMediaItem]\nAn array of media items contained in the playlist.\nvar userInfo: [String : Any]?\nUser-defined metadata, like a developer-specific identifier, for a playlist.\nvar repeatMode: TVPlaylist.RepeatMode\nA mode that determines how media items are replayed.\nenum RepeatMode\nThe modes that indicate how or whether media items can be replayed.\nvar endAction: TVPlaylist.EndAction\nAn action that causes media playback to end."
  },
  {
    "title": "TVPlaylist.RepeatMode",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/repeatmode-swift.enum",
    "html": "Topics\nReplay Modes\ncase all\nReplay all of the media items in the playlist.\ncase one\nReplay the currently playing media item.\ncase none\nReplay none of the media items in the playlist.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nRetrieving Playlist Information\nvar mediaItems: [TVMediaItem]\nAn array of media items contained in the playlist.\nvar userInfo: [String : Any]?\nUser-defined metadata, like a developer-specific identifier, for a playlist.\nvar repeatMode: TVPlaylist.RepeatMode\nA mode that determines how media items are replayed.\nvar endAction: TVPlaylist.EndAction\nAn action that causes media playback to end.\nenum EndAction\nThe actions that cause media playback to end."
  },
  {
    "title": "Rating Style Values",
    "url": "https://developer.apple.com/documentation/tvmlkit/rating-style-values",
    "html": "Overview\nNSString *const TVRatingStyleStarSmall;\nNSString *const TVRatingStyleStarMedium;\nNSString *const TVRatingStyleStarLarge;\n\nTopics\nConstants\nTVRatingStyleStarSmall\nA small star image is used.\nTVRatingStyleStarMedium\nA medium star image is used.\nTVRatingStyleStarLarge\nA large star image is used.\nSee Also\nElement Styles\nTransition Style Values\nThe type of transition to apply to an element.\nLabel State Values\nHow text is displayed when an element is in focus.\nText Style Values\nFont size and weight."
  },
  {
    "title": "Transition Style Values",
    "url": "https://developer.apple.com/documentation/tvmlkit/transition-style-values",
    "html": "Overview\nNSString *const TVTransitionDissolve;\nNSString *const TVTransitionMagicMove;\nNSString *const TVTransitionNone;\nNSString *const TVTransitionPush;\nNSString *const TVTransitionWipe;\n\nTopics\nConstants\nTVTransitionDissolve\nThe element stays in place and a dissolve effect is applied.\nTVTransitionMagicMove\nThe magic move transition is to be used.\nTVTransitionNone\nNo transition effect is to be applied.\nTVTransitionPush\nThe element is pushed onto the screen.\nTVTransitionWipe\nThe element is wiped from the screen.\nSee Also\nElement Styles\nRating Style Values\nThe size of the star image used for a rating element.\nLabel State Values\nHow text is displayed when an element is in focus.\nText Style Values\nFont size and weight."
  },
  {
    "title": "userInfo",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/userinfo",
    "html": "See Also\nRetrieving Playlist Information\nvar mediaItems: [TVMediaItem]\nAn array of media items contained in the playlist.\nvar repeatMode: TVPlaylist.RepeatMode\nA mode that determines how media items are replayed.\nenum RepeatMode\nThe modes that indicate how or whether media items can be replayed.\nvar endAction: TVPlaylist.EndAction\nAn action that causes media playback to end.\nenum EndAction\nThe actions that cause media playback to end."
  },
  {
    "title": "highlightColor",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/highlightcolor",
    "html": "See Also\nColoring an Element\nvar backgroundColor: TVColor?\nThe background color for an element.\nvar color: TVColor?\nThe color for an element.\nvar tintColor: TVColor?\nThe tint color applied to an element."
  },
  {
    "title": "imageTreatmentName",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/imagetreatmentname",
    "html": "Discussion\n\nFor possible values, Image Treatment Values.\n\nSee Also\nModifying an Image\nvar ratingStyle: String?\nA string indicating the style to be used by a rating element."
  },
  {
    "title": "textStyle",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/textstyle",
    "html": "Discussion\n\nFor possible values, see Text Style Values.\n\nSee Also\nChanging the Text of an Element\nvar fontSize: CGFloat\nThe font size applied to any text contained in the element.\nvar fontWeight: String?\nA string indicating how thick or thin the font is.\nvar maxTextLines: Int\nThe maximum number of lines of text allowed inside of the element.\nvar textAlignment: NSTextAlignment\nThe horizontal alignment of text within an element.\nvar textHighlightStyle: String?\nA string indicating how a label reacts when it is in focus.\nvar textMinimumScaleFactor: CGFloat\nThe minimum size text can be if the original text size does not fit in an element."
  },
  {
    "title": "textMinimumScaleFactor",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/textminimumscalefactor",
    "html": "Discussion\n\nThe minimum size is defined as a percentage of the original text size.\n\nSee Also\nChanging the Text of an Element\nvar fontSize: CGFloat\nThe font size applied to any text contained in the element.\nvar fontWeight: String?\nA string indicating how thick or thin the font is.\nvar maxTextLines: Int\nThe maximum number of lines of text allowed inside of the element.\nvar textAlignment: NSTextAlignment\nThe horizontal alignment of text within an element.\nvar textHighlightStyle: String?\nA string indicating how a label reacts when it is in focus.\nvar textStyle: String?\nThe style applied to the text in an element."
  },
  {
    "title": "textHighlightStyle",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/texthighlightstyle",
    "html": "Discussion\n\nFor possible values, seeLabel State Values.\n\nSee Also\nChanging the Text of an Element\nvar fontSize: CGFloat\nThe font size applied to any text contained in the element.\nvar fontWeight: String?\nA string indicating how thick or thin the font is.\nvar maxTextLines: Int\nThe maximum number of lines of text allowed inside of the element.\nvar textAlignment: NSTextAlignment\nThe horizontal alignment of text within an element.\nvar textMinimumScaleFactor: CGFloat\nThe minimum size text can be if the original text size does not fit in an element.\nvar textStyle: String?\nThe style applied to the text in an element."
  },
  {
    "title": "maxTextLines",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/maxtextlines",
    "html": "See Also\nChanging the Text of an Element\nvar fontSize: CGFloat\nThe font size applied to any text contained in the element.\nvar fontWeight: String?\nA string indicating how thick or thin the font is.\nvar textAlignment: NSTextAlignment\nThe horizontal alignment of text within an element.\nvar textHighlightStyle: String?\nA string indicating how a label reacts when it is in focus.\nvar textMinimumScaleFactor: CGFloat\nThe minimum size text can be if the original text size does not fit in an element.\nvar textStyle: String?\nThe style applied to the text in an element."
  },
  {
    "title": "padding",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/padding",
    "html": "See Also\nAligning and Positioning an Element\nvar alignment: TVElementAlignment\nA value indicating how an item is aligned inside of an element.\nenum TVElementAlignment\nLocation of an item inside of an element on the horizontal axis.\nvar contentAlignment: TVElementContentAlignment\nA value indicating how items inside of an element are aligned.\nenum TVElementContentAlignment\nLocation of items inside of an element on the vertical axis.\nvar focusMargin: UIEdgeInsets\nThe amount of space, in pixels, a custom cell requires when it comes into focus.\nvar interitemSpacing: CGFloat\nThe spacing, in pixels, between items inside of an element.\nvar margin: UIEdgeInsets\nThe amount of space, in pixels, between the element and other elements.\nvar position: TVElementPosition\nA value indicating the position of the element relative to the screen or its containing element.\nenum TVElementPosition\nLocation of an element relative to the screen or its containing element."
  },
  {
    "title": "focusMargin",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/focusmargin",
    "html": "See Also\nAligning and Positioning an Element\nvar alignment: TVElementAlignment\nA value indicating how an item is aligned inside of an element.\nenum TVElementAlignment\nLocation of an item inside of an element on the horizontal axis.\nvar contentAlignment: TVElementContentAlignment\nA value indicating how items inside of an element are aligned.\nenum TVElementContentAlignment\nLocation of items inside of an element on the vertical axis.\nvar interitemSpacing: CGFloat\nThe spacing, in pixels, between items inside of an element.\nvar margin: UIEdgeInsets\nThe amount of space, in pixels, between the element and other elements.\nvar padding: UIEdgeInsets\nThe amount of space, in pixels, between the border and the contents of the element.\nvar position: TVElementPosition\nA value indicating the position of the element relative to the screen or its containing element.\nenum TVElementPosition\nLocation of an element relative to the screen or its containing element."
  },
  {
    "title": "interitemSpacing",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/interitemspacing",
    "html": "See Also\nAligning and Positioning an Element\nvar alignment: TVElementAlignment\nA value indicating how an item is aligned inside of an element.\nenum TVElementAlignment\nLocation of an item inside of an element on the horizontal axis.\nvar contentAlignment: TVElementContentAlignment\nA value indicating how items inside of an element are aligned.\nenum TVElementContentAlignment\nLocation of items inside of an element on the vertical axis.\nvar focusMargin: UIEdgeInsets\nThe amount of space, in pixels, a custom cell requires when it comes into focus.\nvar margin: UIEdgeInsets\nThe amount of space, in pixels, between the element and other elements.\nvar padding: UIEdgeInsets\nThe amount of space, in pixels, between the border and the contents of the element.\nvar position: TVElementPosition\nA value indicating the position of the element relative to the screen or its containing element.\nenum TVElementPosition\nLocation of an element relative to the screen or its containing element."
  },
  {
    "title": "margin",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/margin",
    "html": "See Also\nAligning and Positioning an Element\nvar alignment: TVElementAlignment\nA value indicating how an item is aligned inside of an element.\nenum TVElementAlignment\nLocation of an item inside of an element on the horizontal axis.\nvar contentAlignment: TVElementContentAlignment\nA value indicating how items inside of an element are aligned.\nenum TVElementContentAlignment\nLocation of items inside of an element on the vertical axis.\nvar focusMargin: UIEdgeInsets\nThe amount of space, in pixels, a custom cell requires when it comes into focus.\nvar interitemSpacing: CGFloat\nThe spacing, in pixels, between items inside of an element.\nvar padding: UIEdgeInsets\nThe amount of space, in pixels, between the border and the contents of the element.\nvar position: TVElementPosition\nA value indicating the position of the element relative to the screen or its containing element.\nenum TVElementPosition\nLocation of an element relative to the screen or its containing element."
  },
  {
    "title": "TVElementContentAlignment",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementcontentalignment",
    "html": "Topics\nConstants\nTVElementContentAlignmentUndefinded\nThe alignment has not been defined for the element.\ncase top\nItems are aligned along the top of the element.\ncase center\nItems are aligned in the center of the element.\ncase bottom\nItems are aligned along the bottom of the element.\nEnumeration Cases\ncase undefined\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nAligning and Positioning an Element\nvar alignment: TVElementAlignment\nA value indicating how an item is aligned inside of an element.\nenum TVElementAlignment\nLocation of an item inside of an element on the horizontal axis.\nvar contentAlignment: TVElementContentAlignment\nA value indicating how items inside of an element are aligned.\nvar focusMargin: UIEdgeInsets\nThe amount of space, in pixels, a custom cell requires when it comes into focus.\nvar interitemSpacing: CGFloat\nThe spacing, in pixels, between items inside of an element.\nvar margin: UIEdgeInsets\nThe amount of space, in pixels, between the element and other elements.\nvar padding: UIEdgeInsets\nThe amount of space, in pixels, between the border and the contents of the element.\nvar position: TVElementPosition\nA value indicating the position of the element relative to the screen or its containing element.\nenum TVElementPosition\nLocation of an element relative to the screen or its containing element."
  },
  {
    "title": "alignment",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/alignment",
    "html": "Discussion\n\nThis property aligns an item inside of an element on the horizontal axis. For possible values, see TVElementContentAlignment.\n\nSee Also\nAligning and Positioning an Element\nenum TVElementAlignment\nLocation of an item inside of an element on the horizontal axis.\nvar contentAlignment: TVElementContentAlignment\nA value indicating how items inside of an element are aligned.\nenum TVElementContentAlignment\nLocation of items inside of an element on the vertical axis.\nvar focusMargin: UIEdgeInsets\nThe amount of space, in pixels, a custom cell requires when it comes into focus.\nvar interitemSpacing: CGFloat\nThe spacing, in pixels, between items inside of an element.\nvar margin: UIEdgeInsets\nThe amount of space, in pixels, between the element and other elements.\nvar padding: UIEdgeInsets\nThe amount of space, in pixels, between the border and the contents of the element.\nvar position: TVElementPosition\nA value indicating the position of the element relative to the screen or its containing element.\nenum TVElementPosition\nLocation of an element relative to the screen or its containing element."
  },
  {
    "title": "TVElementAlignment",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementalignment",
    "html": "Topics\nConstants\ncase undefined\nThe alignment has not been defined for the item.\ncase left\nThe item is aligned along the left side of the containing element.\ncase center\nThe item is aligned in the center of the containing element.\ncase right\nThe item is aligned along the right of the containing element.\ncase leading\nThe item is aligned along the leading edge of the containing element.\ncase trailing\nThe item is aligned along the trailing edge of the containing element.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nAligning and Positioning an Element\nvar alignment: TVElementAlignment\nA value indicating how an item is aligned inside of an element.\nvar contentAlignment: TVElementContentAlignment\nA value indicating how items inside of an element are aligned.\nenum TVElementContentAlignment\nLocation of items inside of an element on the vertical axis.\nvar focusMargin: UIEdgeInsets\nThe amount of space, in pixels, a custom cell requires when it comes into focus.\nvar interitemSpacing: CGFloat\nThe spacing, in pixels, between items inside of an element.\nvar margin: UIEdgeInsets\nThe amount of space, in pixels, between the element and other elements.\nvar padding: UIEdgeInsets\nThe amount of space, in pixels, between the border and the contents of the element.\nvar position: TVElementPosition\nA value indicating the position of the element relative to the screen or its containing element.\nenum TVElementPosition\nLocation of an element relative to the screen or its containing element."
  },
  {
    "title": "minHeight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/minheight",
    "html": "See Also\nDefining the Height and Width of an Element\nvar height: CGFloat\nThe height, in pixels, for an element.\nvar maxHeight: CGFloat\nThe maximum height, in pixels, for the element.\nvar maxWidth: CGFloat\nThe maximum width, in pixels, for an element.\nvar minWidth: CGFloat\nThe minimum width, in pixels, for an element.\nvar width: CGFloat\nThe width, in pixels, for an element."
  },
  {
    "title": "contentAlignment",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/contentalignment",
    "html": "Discussion\n\nThis property aligns items inside of an element on the vertical axis. For possible values, see TVElementContentAlignment.\n\nSee Also\nAligning and Positioning an Element\nvar alignment: TVElementAlignment\nA value indicating how an item is aligned inside of an element.\nenum TVElementAlignment\nLocation of an item inside of an element on the horizontal axis.\nenum TVElementContentAlignment\nLocation of items inside of an element on the vertical axis.\nvar focusMargin: UIEdgeInsets\nThe amount of space, in pixels, a custom cell requires when it comes into focus.\nvar interitemSpacing: CGFloat\nThe spacing, in pixels, between items inside of an element.\nvar margin: UIEdgeInsets\nThe amount of space, in pixels, between the element and other elements.\nvar padding: UIEdgeInsets\nThe amount of space, in pixels, between the border and the contents of the element.\nvar position: TVElementPosition\nA value indicating the position of the element relative to the screen or its containing element.\nenum TVElementPosition\nLocation of an element relative to the screen or its containing element."
  },
  {
    "title": "value(propertyName:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/value(propertyname:)",
    "html": "Parameters\nname\n\nA user defined string representing the name of the style.\n\nReturn Value\n\nAn object containing the value associated with the style name."
  },
  {
    "title": "minWidth",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/minwidth",
    "html": "See Also\nDefining the Height and Width of an Element\nvar height: CGFloat\nThe height, in pixels, for an element.\nvar maxHeight: CGFloat\nThe maximum height, in pixels, for the element.\nvar maxWidth: CGFloat\nThe maximum width, in pixels, for an element.\nvar minHeight: CGFloat\nThe minimum height, in pixels, for an element.\nvar width: CGFloat\nThe width, in pixels, for an element."
  },
  {
    "title": "width",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/width",
    "html": "See Also\nDefining the Height and Width of an Element\nvar height: CGFloat\nThe height, in pixels, for an element.\nvar maxHeight: CGFloat\nThe maximum height, in pixels, for the element.\nvar maxWidth: CGFloat\nThe maximum width, in pixels, for an element.\nvar minHeight: CGFloat\nThe minimum height, in pixels, for an element.\nvar minWidth: CGFloat\nThe minimum width, in pixels, for an element."
  },
  {
    "title": "TVColorType",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolortype",
    "html": "Topics\nConstants\ncase none\nIndicates that there is no color associated with an element.\ncase plain\nIndicates that a single color is to be used with an element.\ncase linearGradientTopToBottom\nIndicates that a color gradient goes from the top to the bottom of an element.\ncase linearGradientLeftToRight\nIndicates that a color gradient goes from the left to the right of an element.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nGetting Color Properties\nvar color: UIColor?\nA UIColor object used to color an element.\nvar colorType: TVColorType\nThe color type for an element.\nvar gradientColors: [UIColor]?\nAn array of colors used to create a gradient for an element.\nvar gradientPoints: [NSNumber]?\nAn array of points used to determine gradient color changes."
  },
  {
    "title": "height",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/height",
    "html": "See Also\nDefining the Height and Width of an Element\nvar maxHeight: CGFloat\nThe maximum height, in pixels, for the element.\nvar maxWidth: CGFloat\nThe maximum width, in pixels, for an element.\nvar minHeight: CGFloat\nThe minimum height, in pixels, for an element.\nvar minWidth: CGFloat\nThe minimum width, in pixels, for an element.\nvar width: CGFloat\nThe width, in pixels, for an element."
  },
  {
    "title": "gradientPoints",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolor/gradientpoints",
    "html": "Discussion\n\nThis property is only available when colorType is set to TVColorType.linearGradientTopToBottom or TVColorType.linearGradientLeftToRight. The points defined in the array determine when a color change occurs using the colors in the gradientColors property.\n\nSee Also\nGetting Color Properties\nvar color: UIColor?\nA UIColor object used to color an element.\nvar colorType: TVColorType\nThe color type for an element.\nenum TVColorType\nDesignates how color for an element is to be displayed.\nvar gradientColors: [UIColor]?\nAn array of colors used to create a gradient for an element."
  },
  {
    "title": "gradientColors",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolor/gradientcolors",
    "html": "Discussion\n\nThis property is only available when colorType is set to TVColorType.linearGradientTopToBottom or TVColorType.linearGradientLeftToRight.\n\nSee Also\nGetting Color Properties\nvar color: UIColor?\nA UIColor object used to color an element.\nvar colorType: TVColorType\nThe color type for an element.\nenum TVColorType\nDesignates how color for an element is to be displayed.\nvar gradientPoints: [NSNumber]?\nAn array of points used to determine gradient color changes."
  },
  {
    "title": "colorType",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolor/colortype",
    "html": "See Also\nGetting Color Properties\nvar color: UIColor?\nA UIColor object used to color an element.\nenum TVColorType\nDesignates how color for an element is to be displayed.\nvar gradientColors: [UIColor]?\nAn array of colors used to create a gradient for an element.\nvar gradientPoints: [NSNumber]?\nAn array of points used to determine gradient color changes."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "TVDocumentError.Code",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/code",
    "html": "Topics\nEnumeration Cases\ncase cancelled\ncase failed\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nError Types\nstatic var cancelled: TVDocumentError.Code\nstatic var failed: TVDocumentError.Code"
  },
  {
    "title": "CustomNSError Implementations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/customnserror-implementations",
    "html": "Topics\nType Properties\nstatic var errorDomain: String\nDefault domain of the error."
  },
  {
    "title": "errorDomain",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/errordomain-m3d1",
    "html": "See Also\nAccessing Error Data\nvar localizedDescription: String\nRetrieve the localized description for this error."
  },
  {
    "title": "failed",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/failed",
    "html": "See Also\nError Types\nstatic var cancelled: TVDocumentError.Code\nenum Code"
  },
  {
    "title": "cancelled",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/cancelled",
    "html": "See Also\nError Types\nstatic var failed: TVDocumentError.Code\nenum Code"
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "TVViewElementStyleType",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyletype",
    "html": "Topics\nConstants\ncase integer\nAn NSNumber value.\ncase double\nAn NSNumber value.\ncase point\nA CGPoint value.\ncase string\nA NSString value.\ncase color\nA TVColor value.\ncase URL\nA NSURL value.\ncase edgeInsets\nAn UIEdgeInsets value.\nEnumeration Cases\ncase transform\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nCreating New Style Properties\nclass func registerStyleName(String, type: TVViewElementStyleType, inherited: Bool)\nCreates a new style property of the indicated type."
  },
  {
    "title": "registerStyleName(_:type:inherited:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvstylefactory/registerstylename(_:type:inherited:)",
    "html": "Parameters\nstyleName\n\nThe name used to identify the style.\n\ntype\n\nThe element style type as specified by TVViewElementStyleType.\n\ninherited\n\nBoolean indicating whether the style is able to be inherited by other styles.\n\nSee Also\nCreating New Style Properties\nenum TVViewElementStyleType\nDescribes the different style types for an element."
  },
  {
    "title": "textStyle",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelement/textstyle",
    "html": "Discussion\n\nThis property will contain a TVTextElementStyle value.\n\nSee Also\nInspecting Text Elements\nvar attributedString: NSAttributedString?\nThe text for an element.\nenum TVTextElementStyle\nThe style applied to the text inside of an element."
  },
  {
    "title": "makeAttributedString(font:foregroundColor:textAlignment:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelement/makeattributedstring(font:foregroundcolor:textalignment:)",
    "html": "Parameters\nfont\n\nThe font used for the attributed string. This can be any available font on the device.\n\nforegroundColor\n\nThe foreground color for the element.\n\nalignment\n\nThe alignment for the text contained within the element.\n\nReturn Value\n\nAn NSAttributedString object with the applied attributes.\n\nDiscussion\n\nSupply a font to this method to get the NSAttributedString representation of the text contained within an element. Use the foregroundColor and alignment parameters to override the value specified in the text element.\n\nSee Also\nCreating Attributed Strings\nfunc makeAttributedString(font: UIFont) -> NSAttributedString\nProvides an attributed string for a given font."
  },
  {
    "title": "attributedString",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelement/attributedstring",
    "html": "Discussion\n\nThe text for an element is an NSAttributedString object.\n\nSee Also\nInspecting Text Elements\nvar textStyle: TVTextElementStyle\nThe style applied to the text of the element.\nenum TVTextElementStyle\nThe style applied to the text inside of an element."
  },
  {
    "title": "makeAttributedString(font:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelement/makeattributedstring(font:)",
    "html": "Parameters\nfont\n\nThe font used for the attributed string. This can be any available font on the device.\n\nReturn Value\n\nAn NSAttributedString object with the supplied font.\n\nDiscussion\n\nSupply a font to this method to get the NSAttributedString representation of the text contained within an element.\n\nSee Also\nCreating Attributed Strings\nfunc makeAttributedString(font: UIFont, foregroundColor: UIColor?, textAlignment: NSTextAlignment) -> NSAttributedString\nConvenience method for configuring an attributed string given the specified attributes."
  },
  {
    "title": "interitemSpacing",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontroller/interitemspacing",
    "html": "Discussion\n\nThe default value is 20.0.\n\nSee Also\nModifying the Browser Appearance\nvar cornerRadius: CGFloat\nThe corner radius, in points, of each full-screen browser item.\nvar maskInset: UIEdgeInsets\nThe amount by which the content of the cell is inset."
  },
  {
    "title": "TVBrowserViewControllerDelegate",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontrollerdelegate",
    "html": "Topics\nManaging Focus\nfunc browserViewController(TVBrowserViewController, didCenterOn: TVViewElement)\nTells the delegate how to respond when the specified view element completes the transition to becoming centered upon.\n\nRequired\n\nfunc browserViewController(TVBrowserViewController, willCenterOn: TVViewElement)\nTells the delegate when the specified view element is to be centered on the page.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nManaging Interactions with the Browser\nvar delegate: (any TVBrowserViewControllerDelegate)?\nThe object that acts as the delegate and handles callbacks for the browser view."
  },
  {
    "title": "cornerRadius",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontroller/cornerradius",
    "html": "Discussion\n\nThe default value is 36.0 points.\n\nSee Also\nModifying the Browser Appearance\nvar interitemSpacing: CGFloat\nThe spacing between full-screen browser items.\nvar maskInset: UIEdgeInsets\nThe amount by which the content of the cell is inset."
  },
  {
    "title": "documentContext",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/documentcontext",
    "html": "Discussion\n\nUse this property to retrieve the current context, whether it’s new or updated.\n\nSee Also\nAccessing the Document’s Components\nvar appController: TVApplicationController?\nThe document’s app controller that bridges UI, navigation stack, storage, and event handling from JavaScript."
  },
  {
    "title": "delegate",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/delegate",
    "html": "See Also\nManaging Interactions with the Document\nprotocol TVDocumentViewControllerDelegate\nMethods to manage updates, events, and errors from the document view controller."
  },
  {
    "title": "TVDocumentViewController.Event",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/event",
    "html": "Topics\nInitializers for Document View Controller Events\ninit(String)\nCreate a new document view controller event based on a string value.\ninit(rawValue: String)\nCreate an instance of a new document view controller event based on a string value.\nEvent Types\nstatic let appear: TVDocumentViewController.Event\nAn event that signals when the document appears.\nstatic let disappear: TVDocumentViewController.Event\nAn event that signals when the document disappears.\nstatic let highlight: TVDocumentViewController.Event\nAn event that signals when the document is highlighted.\nstatic let holdSelect: TVDocumentViewController.Event\nAn event that signals when the document is held down and selected.\nstatic let load: TVDocumentViewController.Event\nAn event that signals when the document is loaded.\nstatic let play: TVDocumentViewController.Event\nAn event that signals when the document is played.\nstatic let select: TVDocumentViewController.Event\nAn event that signals when the document is selected.\nstatic let unload: TVDocumentViewController.Event\nAn event that signals when the document is unloaded.\nDefault Implementations\nEquatable Implementations\n_SwiftNewtypeWrapper Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "TVDocumentViewControllerDelegate",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontrollerdelegate",
    "html": "Topics\nManaging Document Updates\nfunc documentViewControllerWillUpdate(TVDocumentViewController)\nTells the delegate that the document will be updated.\nfunc documentViewControllerDidUpdate(TVDocumentViewController)\nTells the delegate that the document has been updated.\n\nRequired\n\nfunc documentViewController(TVDocumentViewController, didUpdateWithContext: [String : Any])\nTells the delegate that the document has been updated with a specified context.\n\nRequired\n\nResponding to Errors\nfunc documentViewController(TVDocumentViewController, didFailUpdateWithError: any Error)\nTells the delegate that the document failed to update.\nHandling Events\nfunc documentViewController(TVDocumentViewController, handleEvent: TVDocumentViewController.Event, with: TVViewElement) -> Bool\nHandles events natively from document view controllers.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nManaging Interactions with the Document\nvar delegate: (any TVDocumentViewControllerDelegate)?\nThe delegate for handling events in the document view controller."
  },
  {
    "title": "resetProperty(_:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/resetproperty(_:)",
    "html": "Parameters\nresettableProperty\n\nA property that can be reset to its default value. For possible values, see TVElementResettableProperty.\n\nDiscussion\n\nThis method can be used to reset a resettable property to its default value after changes to the property have been read.\n\nSee Also\nResetting a Property’s Value\nenum TVElementResettableProperty\nThe types of properties that can be reset to their default values."
  },
  {
    "title": "dispatchEvent(name:canBubble:cancellable:extraInfo:completion:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/dispatchevent(name:canbubble:cancellable:extrainfo:completion:)",
    "html": "Parameters\neventName\n\nThe name of the event.\n\ncanBubble\n\nA flag indicating that an event is dispatched on the target’s parent nodes after the event has been dispatched on the target.\n\nisCancellable\n\nA flag indicating whether the event is cancelable.\n\nextraInfo\n\nExtra properties that need to be exposed in the event object.\n\ncompletion\n\nA block object to be executed when the dispatch call is complete. This block has no return value and takes two Boolean arguments that indicate whether or not the event has been dispatched and whether it was canceled. This parameter may be NULL.\n\nDiscussion\n\nImportant\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc dispatchEvent(name eventName: String, canBubble: Bool, cancellable isCancellable: Bool, extraInfo: [String : Any]?) async -> (Bool, Bool)\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nUse this method to dispatch custom-named events from views and view controllers to JavaScript.\n\nSee Also\nDispatching Events\nfunc dispatchEvent(type: TVElementEventType, canBubble: Bool, cancellable: Bool, extraInfo: [String : Any]?, completion: ((Bool, Bool) -> Void)?)\nDispatches an event of a specific type to the JavaScript file.\nenum TVElementEventType\nThe type of event that has been dispatched."
  },
  {
    "title": "dispatchEvent(type:canBubble:cancellable:extraInfo:completion:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/dispatchevent(type:canbubble:cancellable:extrainfo:completion:)",
    "html": "Parameters\ntype\n\nThe type of TV element to dispatch. For possible values see TVElementEventType.\n\ncanBubble\n\nA flag that indicates an event is dispatched on the target’s parent nodes after the event has been dispatched on the target.\n\nisCancellable\n\nA flag to indicate whether the event can be cancelled.\n\nextraInfo\n\nExtra properties that need to be exposed in the event object.\n\ncompletion\n\nA block object to be executed when the dispatch call is complete. This block has no return value and takes two Boolean arguments that indicate whether or not the event has been dispatched and whether it was canceled. This parameter may be NULL.\n\nDiscussion\n\nImportant\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc dispatchEvent(type: TVElementEventType, canBubble: Bool, cancellable isCancellable: Bool, extraInfo: [String : Any]?) async -> (Bool, Bool)\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nUse this method to dispatch events from views and view controllers to JavaScript.\n\nSee Also\nDispatching Events\nenum TVElementEventType\nThe type of event that has been dispatched.\nfunc dispatchEvent(name: String, canBubble: Bool, cancellable: Bool, extraInfo: [String : Any]?, completion: ((Bool, Bool) -> Void)?)\nDispatches a custom-named event."
  },
  {
    "title": "TVElementUpdateType",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementupdatetype",
    "html": "Topics\nConstants\ncase none\nThe tree structure did not change.\ncase subtree\nA subtree element has been updated without affecting the order of any immediate children.\ncase children\nThe order of child nodes have been updated due to the addition, removal, or replacement of child nodes.\ncase node\nThe current node and its subtree have been modified.\nEnumeration Cases\ncase styles\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nInspecting a View Element\nvar autoHighlightIdentifier: String?\nA string identifying the element that is initially in focus.\nvar attributes: [String : String]?\nThe attributes associated with a view element.\nvar children: [TVViewElement]?\nAn array containing the child elements of the element currently being inspected.\nvar isDisabled: Bool\nBoolean value indicating whether the current element being inspected is disabled.\nvar identifier: String\nA string containing the unique identifier for an element.\nvar name: String\nA string containing the element’s name.\nvar parent: TVViewElement?\nThe parent of the current node.\nvar style: TVViewElementStyle?\nThe style applied to an element.\nvar updateType: TVElementUpdateType\nThe value that describes any changes to the DOM tree after it has been reparsed."
  },
  {
    "title": "style",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/style",
    "html": "See Also\nInspecting a View Element\nvar autoHighlightIdentifier: String?\nA string identifying the element that is initially in focus.\nvar attributes: [String : String]?\nThe attributes associated with a view element.\nvar children: [TVViewElement]?\nAn array containing the child elements of the element currently being inspected.\nvar isDisabled: Bool\nBoolean value indicating whether the current element being inspected is disabled.\nvar identifier: String\nA string containing the unique identifier for an element.\nvar name: String\nA string containing the element’s name.\nvar parent: TVViewElement?\nThe parent of the current node.\nvar updateType: TVElementUpdateType\nThe value that describes any changes to the DOM tree after it has been reparsed.\nenum TVElementUpdateType\nDescribes any changes to the DOM tree after it has been reparsed."
  },
  {
    "title": "name",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/name",
    "html": "See Also\nInspecting a View Element\nvar autoHighlightIdentifier: String?\nA string identifying the element that is initially in focus.\nvar attributes: [String : String]?\nThe attributes associated with a view element.\nvar children: [TVViewElement]?\nAn array containing the child elements of the element currently being inspected.\nvar isDisabled: Bool\nBoolean value indicating whether the current element being inspected is disabled.\nvar identifier: String\nA string containing the unique identifier for an element.\nvar parent: TVViewElement?\nThe parent of the current node.\nvar style: TVViewElementStyle?\nThe style applied to an element.\nvar updateType: TVElementUpdateType\nThe value that describes any changes to the DOM tree after it has been reparsed.\nenum TVElementUpdateType\nDescribes any changes to the DOM tree after it has been reparsed."
  },
  {
    "title": "updateType",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/updatetype",
    "html": "Discussion\n\nFor possible values, see TVElementUpdateType. This property is initially set to TVElementUpdateType.none.\n\nSee Also\nInspecting a View Element\nvar autoHighlightIdentifier: String?\nA string identifying the element that is initially in focus.\nvar attributes: [String : String]?\nThe attributes associated with a view element.\nvar children: [TVViewElement]?\nAn array containing the child elements of the element currently being inspected.\nvar isDisabled: Bool\nBoolean value indicating whether the current element being inspected is disabled.\nvar identifier: String\nA string containing the unique identifier for an element.\nvar name: String\nA string containing the element’s name.\nvar parent: TVViewElement?\nThe parent of the current node.\nvar style: TVViewElementStyle?\nThe style applied to an element.\nenum TVElementUpdateType\nDescribes any changes to the DOM tree after it has been reparsed."
  },
  {
    "title": "parent",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/parent",
    "html": "See Also\nInspecting a View Element\nvar autoHighlightIdentifier: String?\nA string identifying the element that is initially in focus.\nvar attributes: [String : String]?\nThe attributes associated with a view element.\nvar children: [TVViewElement]?\nAn array containing the child elements of the element currently being inspected.\nvar isDisabled: Bool\nBoolean value indicating whether the current element being inspected is disabled.\nvar identifier: String\nA string containing the unique identifier for an element.\nvar name: String\nA string containing the element’s name.\nvar style: TVViewElementStyle?\nThe style applied to an element.\nvar updateType: TVElementUpdateType\nThe value that describes any changes to the DOM tree after it has been reparsed.\nenum TVElementUpdateType\nDescribes any changes to the DOM tree after it has been reparsed."
  },
  {
    "title": "identifier",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/identifier",
    "html": "See Also\nInspecting a View Element\nvar autoHighlightIdentifier: String?\nA string identifying the element that is initially in focus.\nvar attributes: [String : String]?\nThe attributes associated with a view element.\nvar children: [TVViewElement]?\nAn array containing the child elements of the element currently being inspected.\nvar isDisabled: Bool\nBoolean value indicating whether the current element being inspected is disabled.\nvar name: String\nA string containing the element’s name.\nvar parent: TVViewElement?\nThe parent of the current node.\nvar style: TVViewElementStyle?\nThe style applied to an element.\nvar updateType: TVElementUpdateType\nThe value that describes any changes to the DOM tree after it has been reparsed.\nenum TVElementUpdateType\nDescribes any changes to the DOM tree after it has been reparsed."
  },
  {
    "title": "isDisabled",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/isdisabled",
    "html": "See Also\nInspecting a View Element\nvar autoHighlightIdentifier: String?\nA string identifying the element that is initially in focus.\nvar attributes: [String : String]?\nThe attributes associated with a view element.\nvar children: [TVViewElement]?\nAn array containing the child elements of the element currently being inspected.\nvar identifier: String\nA string containing the unique identifier for an element.\nvar name: String\nA string containing the element’s name.\nvar parent: TVViewElement?\nThe parent of the current node.\nvar style: TVViewElementStyle?\nThe style applied to an element.\nvar updateType: TVElementUpdateType\nThe value that describes any changes to the DOM tree after it has been reparsed.\nenum TVElementUpdateType\nDescribes any changes to the DOM tree after it has been reparsed."
  },
  {
    "title": "children",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/children",
    "html": "See Also\nInspecting a View Element\nvar autoHighlightIdentifier: String?\nA string identifying the element that is initially in focus.\nvar attributes: [String : String]?\nThe attributes associated with a view element.\nvar isDisabled: Bool\nBoolean value indicating whether the current element being inspected is disabled.\nvar identifier: String\nA string containing the unique identifier for an element.\nvar name: String\nA string containing the element’s name.\nvar parent: TVViewElement?\nThe parent of the current node.\nvar style: TVViewElementStyle?\nThe style applied to an element.\nvar updateType: TVElementUpdateType\nThe value that describes any changes to the DOM tree after it has been reparsed.\nenum TVElementUpdateType\nDescribes any changes to the DOM tree after it has been reparsed."
  },
  {
    "title": "attributes",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/attributes",
    "html": "Discussion\n\nAll of the attributes are defined as key-value pairs.\n\nSee Also\nInspecting a View Element\nvar autoHighlightIdentifier: String?\nA string identifying the element that is initially in focus.\nvar children: [TVViewElement]?\nAn array containing the child elements of the element currently being inspected.\nvar isDisabled: Bool\nBoolean value indicating whether the current element being inspected is disabled.\nvar identifier: String\nA string containing the unique identifier for an element.\nvar name: String\nA string containing the element’s name.\nvar parent: TVViewElement?\nThe parent of the current node.\nvar style: TVViewElementStyle?\nThe style applied to an element.\nvar updateType: TVElementUpdateType\nThe value that describes any changes to the DOM tree after it has been reparsed.\nenum TVElementUpdateType\nDescribes any changes to the DOM tree after it has been reparsed."
  },
  {
    "title": "shared()",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvinterfacefactory/shared()",
    "html": "Return Value\n\nThe shared interface factory.\n\nSee Also\nExtending an Interface\nvar extendedInterfaceCreator: (any TVInterfaceCreating)?\nThe interface that is being extended."
  },
  {
    "title": "autoHighlightIdentifier",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement/autohighlightidentifier",
    "html": "See Also\nInspecting a View Element\nvar attributes: [String : String]?\nThe attributes associated with a view element.\nvar children: [TVViewElement]?\nAn array containing the child elements of the element currently being inspected.\nvar isDisabled: Bool\nBoolean value indicating whether the current element being inspected is disabled.\nvar identifier: String\nA string containing the unique identifier for an element.\nvar name: String\nA string containing the element’s name.\nvar parent: TVViewElement?\nThe parent of the current node.\nvar style: TVViewElementStyle?\nThe style applied to an element.\nvar updateType: TVElementUpdateType\nThe value that describes any changes to the DOM tree after it has been reparsed.\nenum TVElementUpdateType\nDescribes any changes to the DOM tree after it has been reparsed."
  },
  {
    "title": "context",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontroller/context",
    "html": "Discussion\n\nThe launch information contains the JavaScript application URL, storageIdentifier, and launchOptions. The URL can point to a local or remote resource. launchOptions can be constructed and forwarded from launch options keys that are part of UIApplication. See Launch Options Keys.\n\nSee Also\nExamining App Controller Properties\nvar navigationController: UINavigationController\nThe navigation controller that is bridged from JavaScript to tvOS.\nvar window: UIWindow?\nA reference to the window supplied when the app controller was initialized."
  },
  {
    "title": "extendedInterfaceCreator",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvinterfacefactory/extendedinterfacecreator",
    "html": "Discussion\n\nAn app can extend or override framework implementation by setting the extendedInterfaceCreator property. An app must provide its own methods to handle custom registered elements.\n\nSee Also\nExtending an Interface\nclass func shared() -> Self\nReturns the singleton instance of the interface factory."
  },
  {
    "title": "navigationController",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontroller/navigationcontroller",
    "html": "Discussion\n\nThe root controller in which all content is presented. Native controllers can also be pushed onto this controller, or they may be presented manually.\n\nSee Also\nExamining App Controller Properties\nvar context: TVApplicationControllerContext\nThe launch information for the application controller.\nvar window: UIWindow?\nA reference to the window supplied when the app controller was initialized."
  },
  {
    "title": "window",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontroller/window",
    "html": "See Also\nExamining App Controller Properties\nvar context: TVApplicationControllerContext\nThe launch information for the application controller.\nvar navigationController: UINavigationController\nThe navigation controller that is bridged from JavaScript to tvOS."
  },
  {
    "title": "TVApplicationControllerDelegate",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollerdelegate",
    "html": "Topics\nManaging the App Controller\nfunc appController(TVApplicationController, didFail: any Error)\nTell the delegate the app controller failed due to an error.\n\nRequired\n\nfunc appController(TVApplicationController, didFinishLaunching: [String : Any]?)\nTells the delegate the app controller has finished launching.\n\nRequired\n\nfunc appController(TVApplicationController, didStop: [String : Any]?)\nTells the delegate the app has stopped for any reason.\nfunc appController(TVApplicationController, evaluateAppJavaScriptIn: JSContext)\nTells the delegate to add JavaScript classes and objects.\nfunc player(for: TVApplicationController) -> TVPlayer?\nAsks the delegate for a custom player object for a particular player bridge.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nGetting the Delegate\nvar delegate: (any TVApplicationControllerDelegate)?\nThe delegate of the app controller object."
  },
  {
    "title": "evaluate(inJavaScriptContext:completion:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontroller/evaluate(injavascriptcontext:completion:)",
    "html": "Parameters\nevaluation\n\nThe block to be evaluated in the JavaScript execution queue.\n\ncompletion\n\nThe callback after the block has been executed. true if the block was evaluated; false otherwise.\n\nDiscussion\n\nImportant\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc evaluate(inJavaScriptContext evaluation: @escaping (JSContext) -> Void) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThis method adds a block to the JavaScript execution queue and invokes the completion block after the evaluation block has finished execution. The context block parameter is valid within the scope of the evaluation block and should not be referenced by the app outside the block.\n\nSee Also\nControlling and Handling Events\nfunc stop()\nEnds the app life cycle."
  },
  {
    "title": "delegate",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontroller/delegate",
    "html": "Discussion\n\nThe delegate provides methods for observing and managing different TVApplicationController object states. TVApplicationControllerDelegate provides callbacks during the launch of the JavaScript application.\n\nSee Also\nGetting the Delegate\nprotocol TVApplicationControllerDelegate\nA protocol used to observe and manage the different states of an application controller."
  },
  {
    "title": "stop()",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontroller/stop()",
    "html": "Discussion\n\nAfter the JavaScript context has ended and all resources have been released, appController(_:didStop:) is called. The app controller cannot be reused after the stop method has been called.\n\nSee Also\nControlling and Handling Events\nfunc evaluate(inJavaScriptContext: (JSContext) -> Void, completion: ((Bool) -> Void)?)\nEvaluates a block in the JavaScript execution queue."
  },
  {
    "title": "init(context:window:delegate:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontroller/init(context:window:delegate:)",
    "html": "Parameters\ncontext\n\nA TVApplicationControllerContext object containing information about the JavaScript app.\n\nwindow\n\nA UIWindow object that presents the application controller’s navigation controller.\n\ndelegate\n\nThe app controller delegate.\n\nReturn Value\n\nThe initialized TVApplicationController object.\n\nDiscussion\n\nAn app controller coordinates activity between the JavaScript environments and tvOS. There are three options when presenting the application controller. If you provide a valid UIWindow object, the application controller’s navigation controller is presented immediately and managed by TVApplicationController. If no window is provided, the navigation controller can be presented and dismissed manually within the binary app. Finally, if you wish to present native view controllers alongside a TVApplicationController object, you can push additional view controllers onto navigationController."
  },
  {
    "title": "TVDocumentViewController.Event",
    "url": "https://developer.apple.com/documentation/TVMLKit/TVDocumentViewController/Event",
    "html": "Topics\nInitializers for Document View Controller Events\ninit(String)\nCreate a new document view controller event based on a string value.\ninit(rawValue: String)\nCreate an instance of a new document view controller event based on a string value.\nEvent Types\nstatic let appear: TVDocumentViewController.Event\nAn event that signals when the document appears.\nstatic let disappear: TVDocumentViewController.Event\nAn event that signals when the document disappears.\nstatic let highlight: TVDocumentViewController.Event\nAn event that signals when the document is highlighted.\nstatic let holdSelect: TVDocumentViewController.Event\nAn event that signals when the document is held down and selected.\nstatic let load: TVDocumentViewController.Event\nAn event that signals when the document is loaded.\nstatic let play: TVDocumentViewController.Event\nAn event that signals when the document is played.\nstatic let select: TVDocumentViewController.Event\nAn event that signals when the document is selected.\nstatic let unload: TVDocumentViewController.Event\nAn event that signals when the document is unloaded.\nDefault Implementations\nEquatable Implementations\n_SwiftNewtypeWrapper Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "Text Style Values",
    "url": "https://developer.apple.com/documentation/tvmlkit/text-style-values",
    "html": "Overview\nNSString *const TVTextStyleTitle1;\nNSString *const TVTextStyleTitle2;\nNSString *const TVTextStyleTitle3;\nNSString *const TVTextStyleHeadline;\nNSString *const TVTextStyleSubtitle1;\nNSString *const TVTextStyleSubtitle2;\nNSString *const TVTextStyleSubtitle3;\nNSString *const TVTextStyleCallout;\nNSString *const TVTextStyleBody;\nNSString *const TVTextStyleSubhead;\nNSString *const TVTextStyleFootnote;\nNSString *const TVTextStyleCaption1;\nNSString *const TVTextStyleCaption2;\n\nTopics\nConstants\nTVTextStyleTitle1\nUse the title1 font size and weight.\nTVTextStyleTitle2\nUse the title2 font size and weight.\nTVTextStyleTitle3\nUse the title3 font size and weight.\nTVTextStyleHeadline\nUse the headline font size and weight.\nTVTextStyleSubtitle1\nUse the subtitle1 font size and weight.\nTVTextStyleSubtitle2\nUse the subtitle2 font size and weight.\nTVTextStyleSubtitle3\nUse the subtitle3 font size and weight.\nTVTextStyleCallout\nUse the callout font size and weight.\nTVTextStyleBody\nUse the body font size and weight.\nTVTextStyleSubhead\nUse the subhead font size and weight.\nTVTextStyleFootnote\nUse the footnote font size and weight.\nTVTextStyleCaption1\nUse the caption1 font size and weight.\nTVTextStyleCaption2\nUse the caption2 font size and weight.\nSee Also\nElement Styles\nTransition Style Values\nThe type of transition to apply to an element.\nRating Style Values\nThe size of the star image used for a rating element.\nLabel State Values\nHow text is displayed when an element is in focus."
  },
  {
    "title": "mediaItems",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/mediaitems",
    "html": "See Also\nRetrieving Playlist Information\nvar userInfo: [String : Any]?\nUser-defined metadata, like a developer-specific identifier, for a playlist.\nvar repeatMode: TVPlaylist.RepeatMode\nA mode that determines how media items are replayed.\nenum RepeatMode\nThe modes that indicate how or whether media items can be replayed.\nvar endAction: TVPlaylist.EndAction\nAn action that causes media playback to end.\nenum EndAction\nThe actions that cause media playback to end."
  },
  {
    "title": "repeatMode",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/repeatmode-swift.property",
    "html": "See Also\nRetrieving Playlist Information\nvar mediaItems: [TVMediaItem]\nAn array of media items contained in the playlist.\nvar userInfo: [String : Any]?\nUser-defined metadata, like a developer-specific identifier, for a playlist.\nenum RepeatMode\nThe modes that indicate how or whether media items can be replayed.\nvar endAction: TVPlaylist.EndAction\nAn action that causes media playback to end.\nenum EndAction\nThe actions that cause media playback to end."
  },
  {
    "title": "endAction",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist/endaction-swift.property",
    "html": "See Also\nRetrieving Playlist Information\nvar mediaItems: [TVMediaItem]\nAn array of media items contained in the playlist.\nvar userInfo: [String : Any]?\nUser-defined metadata, like a developer-specific identifier, for a playlist.\nvar repeatMode: TVPlaylist.RepeatMode\nA mode that determines how media items are replayed.\nenum RepeatMode\nThe modes that indicate how or whether media items can be replayed.\nenum EndAction\nThe actions that cause media playback to end."
  },
  {
    "title": "backgroundColor",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/backgroundcolor",
    "html": "See Also\nColoring an Element\nvar color: TVColor?\nThe color for an element.\nvar highlightColor: TVColor?\nThe color of the element when it is highlighted.\nvar tintColor: TVColor?\nThe tint color applied to an element."
  },
  {
    "title": "TVElementPosition",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementposition",
    "html": "Topics\nConstants\ncase undefined\nThe position has not been defined.\ncase center\nPosition the element in the center of its containing element.\ncase top\nPosition the element at the top of the containing element.\ncase bottom\nPosition the element at the bottom of the containing element.\ncase left\nPosition the element along the left side of the containing element.\ncase right\nPosition the element along the right side of the containing element.\ncase topLeft\nPosition the element in the top-left of the containing element.\ncase topRight\nPosition the element in the top-right of the containing element.\ncase bottomLeft\nPosition the element in the bottom-left of the containing element.\ncase bottomRight\nPosition the element in the bottom-right of the containing element.\ncase header\nPosition the element in the header area of the containing element.\ncase footer\nPosition the element in the footer area of the containing element.\ncase leading\nPosition the element in the leading edge of the containing element.\ncase trailing\nPosition the element in the trailing edge of the containing element.\ncase topLeading\nPosition the element in the top-leading edge of the containing element.\ncase topTrailing\nPosition the element in the top-trailing edge of the containing element.\ncase bottomLeading\nPosition the element in the bottom-leading edge of the containing element.\ncase bottomTrailing\nPosition the element in the bottom-trailing edge of the containing element.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nAligning and Positioning an Element\nvar alignment: TVElementAlignment\nA value indicating how an item is aligned inside of an element.\nenum TVElementAlignment\nLocation of an item inside of an element on the horizontal axis.\nvar contentAlignment: TVElementContentAlignment\nA value indicating how items inside of an element are aligned.\nenum TVElementContentAlignment\nLocation of items inside of an element on the vertical axis.\nvar focusMargin: UIEdgeInsets\nThe amount of space, in pixels, a custom cell requires when it comes into focus.\nvar interitemSpacing: CGFloat\nThe spacing, in pixels, between items inside of an element.\nvar margin: UIEdgeInsets\nThe amount of space, in pixels, between the element and other elements.\nvar padding: UIEdgeInsets\nThe amount of space, in pixels, between the border and the contents of the element.\nvar position: TVElementPosition\nA value indicating the position of the element relative to the screen or its containing element."
  },
  {
    "title": "fontSize",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/fontsize",
    "html": "See Also\nChanging the Text of an Element\nvar fontWeight: String?\nA string indicating how thick or thin the font is.\nvar maxTextLines: Int\nThe maximum number of lines of text allowed inside of the element.\nvar textAlignment: NSTextAlignment\nThe horizontal alignment of text within an element.\nvar textHighlightStyle: String?\nA string indicating how a label reacts when it is in focus.\nvar textMinimumScaleFactor: CGFloat\nThe minimum size text can be if the original text size does not fit in an element.\nvar textStyle: String?\nThe style applied to the text in an element."
  },
  {
    "title": "position",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/position",
    "html": "Discussion\n\nFor possible values, see TVElementPosition.\n\nSee Also\nAligning and Positioning an Element\nvar alignment: TVElementAlignment\nA value indicating how an item is aligned inside of an element.\nenum TVElementAlignment\nLocation of an item inside of an element on the horizontal axis.\nvar contentAlignment: TVElementContentAlignment\nA value indicating how items inside of an element are aligned.\nenum TVElementContentAlignment\nLocation of items inside of an element on the vertical axis.\nvar focusMargin: UIEdgeInsets\nThe amount of space, in pixels, a custom cell requires when it comes into focus.\nvar interitemSpacing: CGFloat\nThe spacing, in pixels, between items inside of an element.\nvar margin: UIEdgeInsets\nThe amount of space, in pixels, between the element and other elements.\nvar padding: UIEdgeInsets\nThe amount of space, in pixels, between the border and the contents of the element.\nenum TVElementPosition\nLocation of an element relative to the screen or its containing element."
  },
  {
    "title": "fontWeight",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle/fontweight",
    "html": "Discussion\n\nValid values for this property are bold, light, medium, and regular.\n\nSee Also\nChanging the Text of an Element\nvar fontSize: CGFloat\nThe font size applied to any text contained in the element.\nvar maxTextLines: Int\nThe maximum number of lines of text allowed inside of the element.\nvar textAlignment: NSTextAlignment\nThe horizontal alignment of text within an element.\nvar textHighlightStyle: String?\nA string indicating how a label reacts when it is in focus.\nvar textMinimumScaleFactor: CGFloat\nThe minimum size text can be if the original text size does not fit in an element.\nvar textStyle: String?\nThe style applied to the text in an element."
  },
  {
    "title": "TVPlayer",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplayer",
    "html": "Overview\n\nYou create a new TVPlayer object using your custom AVPlayer object. You can then play media items that are associated with the JavaScript media player using the new player. For example, you can add gestures, overlays, and other custom features to your TV player.\n\nTopics\nSetting Up the Player\nvar playlist: TVPlaylist?\nThe playlist for the media player.\nControlling Playback\nfunc next()\nPlays the next media item in the playlist.\nfunc pause()\nPauses the currently playing item.\nfunc previous()\nPlays the previous media item in the playlist.\nvar state: TVPlaybackState\nThe current state of the player.\nenum TVPlaybackState\nThe possible states of a player.\nfunc dispatch(event: TVPlaybackEvent, userInfo: (any TVPlaybackEventMarshaling)?, completion: ((Bool) -> Void)?)\nDispatches custom playback events to the JavaScript environment.\nstruct TVPlaybackEvent\nExtend this structure to send your custom playback events to the JavaScript environment.\nprotocol TVPlaybackEventMarshaling\nA protocol used for sending and receiving information across the JavaScript bridge.\nclass TVPlaybackCustomEventUserInfo\nThe user information used in a custom playback event.\nInspecting Media Items\nfunc setCurrentMediaItem(toItemAtIndex: Int)\nSets the current media item to the designated media item.\nvar previousMediaItem: TVMediaItem?\nThe previously selected media item.\nvar currentMediaItem: TVMediaItem?\nThe currently selected media item.\nvar nextMediaItem: TVMediaItem?\nThe next media item in the playlist.\nInstance Methods\nfunc present(animated: Bool)\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nCustom Player\nclass TVMediaItem\nA single audio or video item associated with the Apple TV JavaScript player.\nclass TVPlaylist\nA collection of media items associated with the Apple TV JavaScript player."
  },
  {
    "title": "makeView(element:existingView:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvinterfacecreating/makeview(element:existingview:)",
    "html": "Required\n\nParameters\nelement\n\nThe view element requesting a new view.\n\nexistingView\n\nThe current view.\n\nReturn Value\n\nThe new view associated with the view element. If the app doesn’t handle the event, you must return nil.\n\nDiscussion\n\nWhen possible, update the view contained in the existingView parameter instead of creating a new view. However, if the existing view is an instance of UICollectionViewCell, you must configure the cell instead of creating a new instance.\n\nSee Also\nUpdating View Information\nfunc makeViewController(element: TVViewElement, existingViewController: UIViewController?) -> UIViewController?\nReturns a view controller for a view element.\nfunc collectionViewCellClass(for: TVViewElement) -> AnyClass?\nReturns a collection view cell for the specified element.\n\nRequired\n\nfunc playerViewController(for: TVPlayer) -> UIViewController?\nReturns the custom player user interface for a custom player."
  },
  {
    "title": "TVTextElementStyle",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelementstyle",
    "html": "Topics\nConstants\ncase none\nNo style is applied to the element.\ncase title\nThe title style defaults are applied to the element.\ncase subtitle\nThe subtitle style defaults are applied to the element.\ncase description\nThe description style defaults are applied to the element.\ncase decoration\nThe decoration style defaults are applied to the element.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nInspecting Text Elements\nvar attributedString: NSAttributedString?\nThe text for an element.\nvar textStyle: TVTextElementStyle\nThe style applied to the text of the element."
  },
  {
    "title": "url",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimageelement/url",
    "html": "See Also\nIdentifying an Image\nvar imageType: TVImageType\nThe type of image.\nenum TVImageType\nThe type of image.\nvar srcset: [String : URL]?\nA dictionary specifying versions of the same image for different resolutions."
  },
  {
    "title": "srcset",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimageelement/srcset",
    "html": "Discussion\n\nEach dictionary entry contains a string and a URL for a specific image.\n\nSee Also\nIdentifying an Image\nvar url: URL?\nA URL that points to the location of the image.\nvar imageType: TVImageType\nThe type of image.\nenum TVImageType\nThe type of image."
  },
  {
    "title": "TVImageType",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimagetype",
    "html": "Topics\nConstants\ncase image\nThe image is presented in its actual size.\ncase fullscreen\nThe image occupies the entire screen.\ncase decoration\nThe image is a decoration image, which is used to display an image inside of another image.\ncase hero\nThe image is a hero image, which is used to display a product image.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nIdentifying an Image\nvar url: URL?\nA URL that points to the location of the image.\nvar imageType: TVImageType\nThe type of image.\nvar srcset: [String : URL]?\nA dictionary specifying versions of the same image for different resolutions."
  },
  {
    "title": "imageType",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimageelement/imagetype",
    "html": "Discussion\n\nFor possible values, see TVImageType.\n\nSee Also\nIdentifying an Image\nvar url: URL?\nA URL that points to the location of the image.\nenum TVImageType\nThe type of image.\nvar srcset: [String : URL]?\nA dictionary specifying versions of the same image for different resolutions."
  },
  {
    "title": "TVBrowserTransitionAnimator",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowsertransitionanimator",
    "html": "Relationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nUIViewControllerAnimatedTransitioning"
  },
  {
    "title": "maskInset",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontroller/maskinset",
    "html": "Discussion\n\nThe default is UIEdgeInsetsMake(32.0, 120.0, 0.0, 120.0).\n\nSee Also\nModifying the Browser Appearance\nvar cornerRadius: CGFloat\nThe corner radius, in points, of each full-screen browser item.\nvar interitemSpacing: CGFloat\nThe spacing between full-screen browser items."
  },
  {
    "title": "viewElement",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontroller/viewelement",
    "html": "See Also\nAccessing Browser Elements\nvar centeredViewElement: TVViewElement\nThe full screen browser item that is currently centered on the screen."
  },
  {
    "title": "centeredViewElement",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontroller/centeredviewelement",
    "html": "See Also\nAccessing Browser Elements\nvar viewElement: TVViewElement\nThe view element that the full screen browser is constructed from."
  },
  {
    "title": "registerViewElementClass(_:elementName:)",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementfactory/registerviewelementclass(_:elementname:)",
    "html": "Parameters\nelementClass\n\nThe class of the element.\n\nelementName\n\nThe element name used when referencing this element within TVML.\n\nDiscussion\n\nThe TVViewElement class represents a read-only DOM node along with its attributes and aggregated style. This model object is traversed by the interface factory to construct views and view controllers, and to render templates. You must call this method for each element you register."
  },
  {
    "title": "TVBrowserViewControllerDataSource",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontrollerdatasource",
    "html": "Overview\n\nUse the data source to provide a document to the browser.\n\nTopics\nProviding Data\nfunc browserViewController(TVBrowserViewController, documentViewControllerFor: TVViewElement) -> TVDocumentViewController?\nProvides the document view controller to be used for a particular child of the full-screen browser.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nProviding the Browser’s Data\nvar dataSource: (any TVBrowserViewControllerDataSource)?\nThe object that provides data to the full-screen browser."
  },
  {
    "title": "dataSource",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontroller/datasource",
    "html": "See Also\nProviding the Browser’s Data\nprotocol TVBrowserViewControllerDataSource\nMethods adopted by the object you use to represent the browser view."
  },
  {
    "title": "appController",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller/appcontroller",
    "html": "See Also\nAccessing the Document’s Components\nvar documentContext: [String : Any]\nThe current document context."
  },
  {
    "title": "delegate",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontroller/delegate",
    "html": "See Also\nManaging Interactions with the Browser\nprotocol TVBrowserViewControllerDelegate\nMethods for detecting events and performing actions on the browser view."
  },
  {
    "title": "TVApplicationControllerContext",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontrollercontext",
    "html": "Topics\nProviding Launch Information\nvar javaScriptApplicationURL: URL\nURL pointing to the controlling JavaScript file for the application.\nvar launchOptions: [String : Any]\nData passed to the JavaScript launch callback method.\nvar storageIdentifier: String?\nOptional identifier for a local storage file.\nvar supportsPictureInPicturePlayback: Bool\nA Boolean value that indicates whether your app can display content in a picture-in-picture format.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCopying\nNSObjectProtocol\nSee Also\nJavaScript Environment\nImplementing a Hybrid TV App with TVMLKit\nDisplay content options with document view controllers and fetch and populate content with TVMLKit JS.\nclass TVApplicationController\nAn object that bridges the UI, navigation stack, storage, and event handling from JavaScript."
  },
  {
    "title": "TVMLKit Constants",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkit-constants",
    "html": "Overview\n\nThis document defines constants in the TVMLKit framework that are not associated with a particular class.\n\nTopics\nConstants\nlet TVDocumentErrorDomain: String\nSee Also\nReference\nTVMLKit Enumerations"
  },
  {
    "title": "TVMLKit Enumerations",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkit-enumerations",
    "html": "Overview\nTopics\nEnumerations\nenum Code\nSee Also\nReference\nTVMLKit Constants"
  },
  {
    "title": "TVDocumentError",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumenterror-swift.struct",
    "html": "Topics\nAccessing Error Data\nvar localizedDescription: String\nRetrieve the localized description for this error.\nstatic var errorDomain: String\nDefault domain of the error.\nError Types\nstatic var cancelled: TVDocumentError.Code\nstatic var failed: TVDocumentError.Code\nenum Code\nOperator Functions\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nType Properties\nstatic var errorDomain: String\nThe domain of the error.\nDefault Implementations\nCustomNSError Implementations\nEquatable Implementations\nError Implementations\nRelationships\nConforms To\nCustomNSError\nEquatable\nError\nHashable\nSendable\nSee Also\nErrors\nlet TVMLKitErrorDomain: String\nAn error occurred in TVMLKit.\nenum TVMLKitError\nError codes for the TVMLKit error domain."
  },
  {
    "title": "TVMLKitError",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkiterror",
    "html": "Topics\nErrors\ncase failedToLaunch\nThe app failed to launch.\ncase internetUnavailable\nNo connection to the Internet is available.\ncase last\nReserved.\ncase unknown\nUnable to determine the cause of the error.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nErrors\nlet TVMLKitErrorDomain: String\nAn error occurred in TVMLKit.\nstruct TVDocumentError"
  },
  {
    "title": "TVMLKitErrorDomain",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmlkiterrordomain",
    "html": "See Also\nErrors\nenum TVMLKitError\nError codes for the TVMLKit error domain.\nstruct TVDocumentError"
  },
  {
    "title": "TVMediaItem",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvmediaitem",
    "html": "Overview\n\nA TVMediaItem object contains read-only information about a media item associated with the JavaScript player. You can use this information with your own custom AVPlayer objects exposed through a TVPlayer object. For example, you can retrieve audio track information from the JavaScript player and play the track through a TVPlayer object.\n\nTopics\nRating Media Content\nvar containsExplicitContent: Bool\nA Boolean value indicating whether the item contains adult-oriented content.\nvar contentRatingDomain: TVMediaItem.ContentRatingDomain?\nThe media domain that the rating applies to.\nstruct ContentRatingDomain\nA value identifying the media’s content rating domain.\nvar contentRatingRanking: NSNumber?\nThe rating for a video item.\nIdentifying Media Items\nvar artworkImageURL: URL?\nThe URL path to the artwork that accompanies the media item.\nvar itemDescription: String?\nThe description for a media item.\nvar subtitle: String?\nThe subtitle for a media item.\nvar title: String?\nThe title for a media item.\nvar type: TVMediaItem.MediaType?\nThe type of media item.\nstruct MediaType\nA value indicating whether the media is audio or video.\nvar url: URL?\nThe URL path to the media item.\nvar userInfo: [String : Any]\nUser-defined metadata, like a developer-specific identifier, for a media item.\nSetting Timing Options\nvar highlightGroups: [TVMediaItem.HighlightGroup]\nAn array containing groups of individual highlights in a media item.\nclass HighlightGroup\nA container for groups of highlights for a media item.\nvar interstitials: [TVMediaItem.TimeRange]\nAn array of time intervals that indicate where to insert media items into another, single media item.\nclass TimeRange\nAn object that defines a time range in a media item.\nvar resumeTime: TimeInterval\nThe number of seconds from the beginning of a media item to the point where that media item begins playing.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nCustom Player\nclass TVPlaylist\nA collection of media items associated with the Apple TV JavaScript player.\nclass TVPlayer\nA customizable native media player used to control playback from the JavaScript player used in an Apple TV client-server app."
  },
  {
    "title": "TVPlaylist",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvplaylist",
    "html": "Overview\n\nA TVPlaylist object contains read-only information about a playlist associated with the JavaScript player. You can use this information with your own custom AVPlayer objects exposed through a TVPlayer object. For example, you can retrieve album information from the JavaScript player and play the track through a TVPlayer object.\n\nTopics\nRetrieving Playlist Information\nvar mediaItems: [TVMediaItem]\nAn array of media items contained in the playlist.\nvar userInfo: [String : Any]?\nUser-defined metadata, like a developer-specific identifier, for a playlist.\nvar repeatMode: TVPlaylist.RepeatMode\nA mode that determines how media items are replayed.\nenum RepeatMode\nThe modes that indicate how or whether media items can be replayed.\nvar endAction: TVPlaylist.EndAction\nAn action that causes media playback to end.\nenum EndAction\nThe actions that cause media playback to end.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nCustom Player\nclass TVMediaItem\nA single audio or video item associated with the Apple TV JavaScript player.\nclass TVPlayer\nA customizable native media player used to control playback from the JavaScript player used in an Apple TV client-server app."
  },
  {
    "title": "TVViewElementStyle",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelementstyle",
    "html": "Topics\nRetrieving the Style for an Element\nfunc value(propertyName: String) -> Any?\nReturns the value associated with a given style name.\nDefining the Height and Width of an Element\nvar height: CGFloat\nThe height, in pixels, for an element.\nvar maxHeight: CGFloat\nThe maximum height, in pixels, for the element.\nvar maxWidth: CGFloat\nThe maximum width, in pixels, for an element.\nvar minHeight: CGFloat\nThe minimum height, in pixels, for an element.\nvar minWidth: CGFloat\nThe minimum width, in pixels, for an element.\nvar width: CGFloat\nThe width, in pixels, for an element.\nAligning and Positioning an Element\nvar alignment: TVElementAlignment\nA value indicating how an item is aligned inside of an element.\nenum TVElementAlignment\nLocation of an item inside of an element on the horizontal axis.\nvar contentAlignment: TVElementContentAlignment\nA value indicating how items inside of an element are aligned.\nenum TVElementContentAlignment\nLocation of items inside of an element on the vertical axis.\nvar focusMargin: UIEdgeInsets\nThe amount of space, in pixels, a custom cell requires when it comes into focus.\nvar interitemSpacing: CGFloat\nThe spacing, in pixels, between items inside of an element.\nvar margin: UIEdgeInsets\nThe amount of space, in pixels, between the element and other elements.\nvar padding: UIEdgeInsets\nThe amount of space, in pixels, between the border and the contents of the element.\nvar position: TVElementPosition\nA value indicating the position of the element relative to the screen or its containing element.\nenum TVElementPosition\nLocation of an element relative to the screen or its containing element.\nChanging the Text of an Element\nvar fontSize: CGFloat\nThe font size applied to any text contained in the element.\nvar fontWeight: String?\nA string indicating how thick or thin the font is.\nvar maxTextLines: Int\nThe maximum number of lines of text allowed inside of the element.\nvar textAlignment: NSTextAlignment\nThe horizontal alignment of text within an element.\nvar textHighlightStyle: String?\nA string indicating how a label reacts when it is in focus.\nvar textMinimumScaleFactor: CGFloat\nThe minimum size text can be if the original text size does not fit in an element.\nvar textStyle: String?\nThe style applied to the text in an element.\nModifying an Image\nvar imageTreatmentName: String?\nA value that determines how an image is displayed.\nvar ratingStyle: String?\nA string indicating the style to be used by a rating element.\nColoring an Element\nvar backgroundColor: TVColor?\nThe background color for an element.\nvar color: TVColor?\nThe color for an element.\nvar highlightColor: TVColor?\nThe color of the element when it is highlighted.\nvar tintColor: TVColor?\nThe tint color applied to an element.\nElement Styles\nTransition Style Values\nThe type of transition to apply to an element.\nRating Style Values\nThe size of the star image used for a rating element.\nLabel State Values\nHow text is displayed when an element is in focus.\nText Style Values\nFont size and weight.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCopying\nNSObjectProtocol\nSee Also\nCustom Styles\nclass TVStyleFactory\nAn object used to register custom style properties.\nclass TVColor\nThe color data used by styles."
  },
  {
    "title": "TVColor",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvcolor",
    "html": "Topics\nGetting Color Properties\nvar color: UIColor?\nA UIColor object used to color an element.\nvar colorType: TVColorType\nThe color type for an element.\nenum TVColorType\nDesignates how color for an element is to be displayed.\nvar gradientColors: [UIColor]?\nAn array of colors used to create a gradient for an element.\nvar gradientPoints: [NSNumber]?\nAn array of points used to determine gradient color changes.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCopying\nNSObjectProtocol\nSee Also\nCustom Styles\nclass TVViewElementStyle\nA style applied to a view element.\nclass TVStyleFactory\nAn object used to register custom style properties."
  },
  {
    "title": "Creating TVML Elements",
    "url": "https://developer.apple.com/documentation/tvmlkit/creating-tvml-elements",
    "html": "Overview\n\nThe TVML template elements ensure structure and consistency between documents. However, there are times when applying the same modification to a particular element across a single or multiple documents becomes unwiedly. One such example is when you need to update an element that contains copyright information. By creating a new element that incorporates these changes, you can avoid having to apply the same modifications to each instance of the element.\n\nCreate Your Customization Class\n\nYour element customization class is where you register any new elements and add the customization code. To start, create a new class that conforms to the TVInterfaceCreating protocol and import the UIKit and TVMLKit frameworks:\n\nimport UIKit\nimport TVMLKit\n\n\nclass CustomElements: NSObject, TVInterfaceCreating {\n   ...\n}\n\nRegister Your New Element\n\nBefore you can use a new element in your TVML code, register the element using the registerViewElementClass(_:elementName:) function. Call the registerViewElementClass(_:elementName:) in your class’s init function and assign a name to the new element. The JavaScript environment can now recognize the registered element. The following code creates the new TVML element, <copyright/>:\n\noverride init() {\n    super.init()\n    TVElementFactory.registerViewElementClass(TVTextElement.self, elementName: \"copyright\")\n}\n\n\nImportant\n\nYou must register all elements before initializing the TVApplicationController object.\n\nCustomize Your New Element\n\nAfter registering the new element name, you need to customize the element. Implement the makeView(element:existingView:) function in your custom class. The system automatically calls the makeView(element:existingView:) function for every element in your TVML document. Check for the new element’s name and add the customization code. If the current element is not your new element, you must return nil.\n\nfunc makeView(element: TVViewElement, existingView: UIView?) -> UIView? {\n    if element.name == \"copyright\" {\n        let label = UILabel()\n        label.font = UIFont.boldSystemFont(ofSize: 16)\n        label.textColor = .black\n        label.textAlignment = NSTextAlignment.center\n        label.text = \"Copyright information\"\n        return label\n    }\n    return nil\n}\n\nAccess the Shared Interface\n\nTo enable your class to communicate with your JavaScript code, associate the class with the shared() interface. Before setting the application controller, set the extendedInterfaceCreator property to an instance of the class inside of the application(_:didFinishLaunchingWithOptions:) function:\n\nTVInterfaceFactory.shared().extendedInterfaceCreator = CustomElements()\n\n\nWhen complete, use the new element in your TVML code like any other element; for example, <copyright/>.\n\nSee Also\nCustom Elements\nclass TVElementFactory\nAn object used to register new elements to extend the Apple TV Markup Language (TVML).\nclass TVImageElement\nA representation of a read-only DOM node containing the attributes that describe an image element.\nclass TVTextElement\nThe textual content for the DOM element."
  },
  {
    "title": "TVStyleFactory",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvstylefactory",
    "html": "Topics\nCreating New Style Properties\nclass func registerStyleName(String, type: TVViewElementStyleType, inherited: Bool)\nCreates a new style property of the indicated type.\nenum TVViewElementStyleType\nDescribes the different style types for an element.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nCustom Styles\nclass TVViewElementStyle\nA style applied to a view element.\nclass TVColor\nThe color data used by styles."
  },
  {
    "title": "TVImageElement",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvimageelement",
    "html": "Topics\nIdentifying an Image\nvar url: URL?\nA URL that points to the location of the image.\nvar imageType: TVImageType\nThe type of image.\nenum TVImageType\nThe type of image.\nvar srcset: [String : URL]?\nA dictionary specifying versions of the same image for different resolutions.\nRelationships\nInherits From\nTVViewElement\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCopying\nNSObjectProtocol\nSee Also\nCustom Elements\nclass TVElementFactory\nAn object used to register new elements to extend the Apple TV Markup Language (TVML).\nclass TVTextElement\nThe textual content for the DOM element.\nCreating TVML Elements\nAvoid rewriting complex and often used elements by creating a simplified custom element."
  },
  {
    "title": "TVTextElement",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvtextelement",
    "html": "Topics\nCreating Attributed Strings\nfunc makeAttributedString(font: UIFont) -> NSAttributedString\nProvides an attributed string for a given font.\nfunc makeAttributedString(font: UIFont, foregroundColor: UIColor?, textAlignment: NSTextAlignment) -> NSAttributedString\nConvenience method for configuring an attributed string given the specified attributes.\nInspecting Text Elements\nvar attributedString: NSAttributedString?\nThe text for an element.\nvar textStyle: TVTextElementStyle\nThe style applied to the text of the element.\nenum TVTextElementStyle\nThe style applied to the text inside of an element.\nRelationships\nInherits From\nTVViewElement\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCopying\nNSObjectProtocol\nSee Also\nCustom Elements\nclass TVElementFactory\nAn object used to register new elements to extend the Apple TV Markup Language (TVML).\nclass TVImageElement\nA representation of a read-only DOM node containing the attributes that describe an image element.\nCreating TVML Elements\nAvoid rewriting complex and often used elements by creating a simplified custom element."
  },
  {
    "title": "TVElementFactory",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvelementfactory",
    "html": "Overview\n\nYou must register new elements before initializing a TVApplicationController object.\n\nTopics\nRegistering New Elements\nclass func registerViewElementClass(AnyClass, elementName: String)\nRegisters a view element for the specified element name.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nCustom Elements\nclass TVImageElement\nA representation of a read-only DOM node containing the attributes that describe an image element.\nclass TVTextElement\nThe textual content for the DOM element.\nCreating TVML Elements\nAvoid rewriting complex and often used elements by creating a simplified custom element."
  },
  {
    "title": "TVBrowserViewController",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvbrowserviewcontroller",
    "html": "Overview\n\nUse this class to create a full-screen layout that supports full-screen browsing. This layout includes a built-in parallax effect that is triggered during the transition between cells.\n\nTopics\nInitializing the Browser View Controller\nconvenience init?(viewElement: TVViewElement)\nCreate a full-screen browser from a specified view element.\nProviding the Browser’s Data\nvar dataSource: (any TVBrowserViewControllerDataSource)?\nThe object that provides data to the full-screen browser.\nprotocol TVBrowserViewControllerDataSource\nMethods adopted by the object you use to represent the browser view.\nManaging Interactions with the Browser\nvar delegate: (any TVBrowserViewControllerDelegate)?\nThe object that acts as the delegate and handles callbacks for the browser view.\nprotocol TVBrowserViewControllerDelegate\nMethods for detecting events and performing actions on the browser view.\nModifying the Browser Appearance\nvar cornerRadius: CGFloat\nThe corner radius, in points, of each full-screen browser item.\nvar interitemSpacing: CGFloat\nThe spacing between full-screen browser items.\nvar maskInset: UIEdgeInsets\nThe amount by which the content of the cell is inset.\nAccessing Browser Elements\nvar centeredViewElement: TVViewElement\nThe full screen browser item that is currently centered on the screen.\nvar viewElement: TVViewElement\nThe view element that the full screen browser is constructed from.\nManaging Browser Transitions\nclass TVBrowserTransitionAnimator\nAn object that provides animations to and from the full screen browser.\nRelationships\nInherits From\nUIViewController\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCoding\nNSExtensionRequestHandling\nNSObjectProtocol\nUIAppearanceContainer\nUIContentContainer\nUIFocusEnvironment\nUIResponderStandardEditActions\nUIStateRestoring\nUITraitChangeObservable\nUITraitEnvironment\nUIUserActivityRestoring\nSee Also\nViews and View Controllers\nclass TVViewElement\nA representation of a read-only DOM node.\nprotocol TVInterfaceCreating\nA protocol that defines methods used to create views and view controllers.\nclass TVInterfaceFactory\nA factory for the creation of views and view controllers.\nclass TVDocumentViewController\nA view controller that represents a TVMLKit document."
  },
  {
    "title": "TVDocumentViewController",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvdocumentviewcontroller",
    "html": "Overview\n\nInstances of this class serve as bridges into TVMLKit JS’s document life cycle, and allow for native event handling with TVMLKit. This class also provides a way for native clients to communicate with TVMLKit JS.\n\nTopics\nInitializing the Document View Controller\nconvenience init(context: [String : Any], for: TVApplicationController)\nCreates a new document view controller with a specific context and app controller.\nManaging Interactions with the Document\nvar delegate: (any TVDocumentViewControllerDelegate)?\nThe delegate for handling events in the document view controller.\nprotocol TVDocumentViewControllerDelegate\nMethods to manage updates, events, and errors from the document view controller.\nHandling Document Events\nstruct Event\nEvents that can be triggered on the document view controller.\nUpdating the Document View Controller\nfunc update(using: [String : Any])\nUpdates the document view controller with the provided context.\nAccessing the Document’s Components\nvar appController: TVApplicationController?\nThe document’s app controller that bridges UI, navigation stack, storage, and event handling from JavaScript.\nvar documentContext: [String : Any]\nThe current document context.\nRelationships\nInherits From\nUIViewController\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCoding\nNSExtensionRequestHandling\nNSObjectProtocol\nSendable\nUIAppearanceContainer\nUIContentContainer\nUIFocusEnvironment\nUIResponderStandardEditActions\nUIStateRestoring\nUITraitChangeObservable\nUITraitEnvironment\nUIUserActivityRestoring\nSee Also\nViews and View Controllers\nclass TVViewElement\nA representation of a read-only DOM node.\nprotocol TVInterfaceCreating\nA protocol that defines methods used to create views and view controllers.\nclass TVInterfaceFactory\nA factory for the creation of views and view controllers.\nclass TVBrowserViewController\nA view controller that presents content in a browsable, full-screen format."
  },
  {
    "title": "TVViewElement",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvviewelement",
    "html": "Overview\n\nThe TVViewElement model object is traversed by the TVInterfaceFactory factory to construct views and view controllers, and to render templates. Views and view controllers should use the available dispatch APIs to send user events to JavaScript.\n\nTopics\nInspecting a View Element\nvar autoHighlightIdentifier: String?\nA string identifying the element that is initially in focus.\nvar attributes: [String : String]?\nThe attributes associated with a view element.\nvar children: [TVViewElement]?\nAn array containing the child elements of the element currently being inspected.\nvar isDisabled: Bool\nBoolean value indicating whether the current element being inspected is disabled.\nvar identifier: String\nA string containing the unique identifier for an element.\nvar name: String\nA string containing the element’s name.\nvar parent: TVViewElement?\nThe parent of the current node.\nvar style: TVViewElementStyle?\nThe style applied to an element.\nvar updateType: TVElementUpdateType\nThe value that describes any changes to the DOM tree after it has been reparsed.\nenum TVElementUpdateType\nDescribes any changes to the DOM tree after it has been reparsed.\nDispatching Events\nfunc dispatchEvent(type: TVElementEventType, canBubble: Bool, cancellable: Bool, extraInfo: [String : Any]?, completion: ((Bool, Bool) -> Void)?)\nDispatches an event of a specific type to the JavaScript file.\nenum TVElementEventType\nThe type of event that has been dispatched.\nfunc dispatchEvent(name: String, canBubble: Bool, cancellable: Bool, extraInfo: [String : Any]?, completion: ((Bool, Bool) -> Void)?)\nDispatches a custom-named event.\nResetting a Property’s Value\nfunc resetProperty(TVElementResettableProperty)\nResets the property to its default value.\nenum TVElementResettableProperty\nThe types of properties that can be reset to their default values.\nInstance Properties\nvar elementData: [String : Any]\nRelationships\nInherits From\nNSObject\nInherited By\nTVImageElement\nTVTextElement\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCopying\nNSObjectProtocol\nSee Also\nViews and View Controllers\nprotocol TVInterfaceCreating\nA protocol that defines methods used to create views and view controllers.\nclass TVInterfaceFactory\nA factory for the creation of views and view controllers.\nclass TVBrowserViewController\nA view controller that presents content in a browsable, full-screen format.\nclass TVDocumentViewController\nA view controller that represents a TVMLKit document."
  },
  {
    "title": "TVInterfaceFactory",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvinterfacefactory",
    "html": "Overview\n\nThe app can extend or override the framework implementation by setting extendedInterfaceCreator.\n\nTopics\nExtending an Interface\nvar extendedInterfaceCreator: (any TVInterfaceCreating)?\nThe interface that is being extended.\nclass func shared() -> Self\nReturns the singleton instance of the interface factory.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nTVInterfaceCreating\nSee Also\nViews and View Controllers\nclass TVViewElement\nA representation of a read-only DOM node.\nprotocol TVInterfaceCreating\nA protocol that defines methods used to create views and view controllers.\nclass TVBrowserViewController\nA view controller that presents content in a browsable, full-screen format.\nclass TVDocumentViewController\nA view controller that represents a TVMLKit document."
  },
  {
    "title": "TVApplicationController",
    "url": "https://developer.apple.com/documentation/tvmlkit/tvapplicationcontroller",
    "html": "Overview\n\nThe TVApplicationController class establishes the JavaScript environment and provides a centralized point of control and coordination between the JavaScript environment and tvOS.\n\nTopics\nCreating a New App Controller\ninit(context: TVApplicationControllerContext, window: UIWindow?, delegate: (any TVApplicationControllerDelegate)?)\nInitializes and returns an app controller.\nControlling and Handling Events\nfunc evaluate(inJavaScriptContext: (JSContext) -> Void, completion: ((Bool) -> Void)?)\nEvaluates a block in the JavaScript execution queue.\nfunc stop()\nEnds the app life cycle.\nGetting the Delegate\nvar delegate: (any TVApplicationControllerDelegate)?\nThe delegate of the app controller object.\nprotocol TVApplicationControllerDelegate\nA protocol used to observe and manage the different states of an application controller.\nExamining App Controller Properties\nvar context: TVApplicationControllerContext\nThe launch information for the application controller.\nvar navigationController: UINavigationController\nThe navigation controller that is bridged from JavaScript to tvOS.\nvar window: UIWindow?\nA reference to the window supplied when the app controller was initialized.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nJavaScript Environment\nImplementing a Hybrid TV App with TVMLKit\nDisplay content options with document view controllers and fetch and populate content with TVMLKit JS.\nclass TVApplicationControllerContext\nLaunch information provided to the TV application controller."
  },
  {
    "title": "Implementing a Hybrid TV App with TVMLKit",
    "url": "https://developer.apple.com/documentation/tvmlkit/implementing-a-hybrid-tv-app-with-tvmlkit",
    "html": "Overview\n\nThis hybrid app consists of a server built with TVMLKit JS and a client built with TVMLKit. The app uses native TVMLKit Swift code to take content from the server and build the user interface on screen, and uses TVMLKit JS to provide the requested data.\n\nTraditionally, hybrid tvOS apps depend on TVMLKit JS to initialize view controllers, push view controllers to the navigation stack, and handle events, such as a selection or play event. This app demonstrates the stateless JavaScript design pattern, in which native TVMLKit, instead of TVMLKit JS, takes on these tasks.\n\nBecause the TV content resides in JavaScript in the server, the app uses TVDocumentViewController objects to allow TVMLKit to communicate with TVMLKit JS. TVMLKit JS is responsible for fetching data and populating the native UI. Building your app with the stateless model is useful if you want to use the functionalities provided by Swift or if you are more familiar with native development.\n\nConfigure the Sample Code Project\n\nThe sample relies on a running server containing JavaScript files, image assets, and templates that specify the app’s content. The app takes the content from the server and builds the user interface on screen. Before running the app, start the server as follows:\n\nIn Finder, navigate to this project’s folder.\n\nIn Terminal, enter cd, followed by a space.\n\nDrag the Server folder from inside the Finder window into your Terminal window. Execute the cd command in terminal to change the directory to the Server folder.\n\nIn Terminal, enter ruby -run -ehttpd . -p9001 to start the server.\n\nBuild and run the app.\n\nCreate and Display a Document View Controller\n\nXML files provide the structure of a TVMLKit app. The files contain TVML elements such as buttons and lockups, and lay out the elements on screen. In this app, the templates folder in the server directory contains two XML files: Index.xml, and ProductSingle.xml. These files contain the structure of the two primary views used in this app. Index.xml is responsible for providing the structure of the initial page, which consists of a grid of items to select. When the user selects an item from the main page, the ProductSingle.xml file displays the content for the selected item.\n\nAt launch time, create a TVApplicationController object in the application(_:didFinishLaunching:) method. That object provides the infrastructure your app needs to display content. You then use the app controller’s delegate method to specify the initial page’s content by creating a new TVDocumentViewController object.\n\nThe TVDocumentViewController‘s initializer accepts a context dictionary, which provides TVMLKit JS with a route to the new document’s data. It then pushes the TVDocumentViewController onto the app controller’s navigation stack. TVMLKit apps use this navigation controller to manage navigation between pages. When this method returns, TVMLKit builds the app’s UI from the Index.xml file. It then queries your server for the data needed to fill that structure.\n\nfunc appController(_ appController: TVApplicationController, didFinishLaunching options: [String: Any]?) {\n    // Specify the context for the initial document request.\n    let contextDictionary = [\"url\": \"templates/Index.xml\"]\n    // This URL is sent over to application.js and is part of the request in App.onDocumentRequest\n    let documentController = TVDocumentViewController(context: contextDictionary, for: appController)\n    documentController.delegate = self\n    // Push it onto the navigation stack to start the loading of the document.\n    appController.navigationController.pushViewController(documentController, animated: false)\n}\n\n\nFor more information about how to build the structure of your app, see TVML.\n\nFetch and Populate TV Content\n\nThe structure of the interface is empty until the TVMLKit JS provides the data for the TV content. When you create a TVDocumentViewController object in appController(_:didFinishLaunching:), TVMLKit determines that it needs data, which causes TVMLKit JS to trigger the onDocumentRequest event in application.js. This event creates a new DocumentLoader object, which grabs data from a documentProcessor based on the URL of the request. The URL of the request used is the context used to construct the TVDocumentViewController object (templates/Index.xml).\n\nApp.onDocumentRequest = (request, response) => {\n    if (request.requestType == \"document\") {\n        // Setup a document load to update the link.\n        new DocumentLoader(gHostController.getRemoteURL(request.url)).load((document, errorStr) => {\n            let processor = documentProcessor[request.url];\n            if (processor != null) {\n                processor(request, document);\n            }\n            response.document = document;\n            response.close(errorStr ? { 'errorStr' : errorStr } : null);\n        });\n    }\n    else {\n        response.close();\n    }\n};\n\n\nThe documentProcessor‘s data variable contains a dictionary of URLs mapped to JSON content. This JSON content includes an artwork URL, background URL, URL path, and other metadata. The app uses this JSON to fill in the UI structure from Index.xml with presentable content, including the images and titles associated with each lockup. To insert the data into the TVML template, the processor retrieves the initial template’s top level stack template, and sets its dataItem to the JSON data. This inserts the JSON into the template and maps the JSON content to the right variables.\n\nlet documentProcessor = {\n    \"templates/Index.xml\": (request, document) => {\n        let data = {\n            movies : [\n                {\n                    artworkURL : gHostController.getRemoteURL('resources/images/square_1.jpg'),\n                    backgroundURL : gHostController.getRemoteURL('resources/images/product_bg_1.jpg'),\n                    logoURL : gHostController.getRemoteURL('resources/images/product_logo.png'),\n                    title : \"Movie Title\",\n                    theme : \"dark\",\n                    url : \"templates/ProductSingle.xml\"\n                },\n                ...\n            ]\n        };\n        // Set on the template element.\n        let templateElement = document.getElementsByTagName('stackTemplate').item(0);\n        templateElement.dataItem = data;\n    },\n    \"templates/ProductSingle.xml\": (request, document) => {\n        let extraInfo = request;\n        // Set data on the template element.\n        let templateElement = document.getElementsByTagName('stackTemplate').item(0);\n        templateElement.dataItem = extraInfo;\n    }\n}\n\n\n\n\nFor example, the processor passes its movies into the section’s binding attribute, populating four sections with the four movie elements. The sample fills in the image binding with the {artworkURL} from the data, as well as the {title} binding’s text content.\n\n<section binding=\"items:{movies};\">\n    <prototypes>\n        <lockup useBrowser=\"false\">\n            <img binding=\"@src:{artworkURL};\" contentsMode=\"aspectFill\" width=\"410\" height=\"231\"/>\n            <title binding=\"textContent:{title};\" class=\"hidden_text\"/>\n        </lockup>\n    </prototypes>                   \n</section>\n\nHandle Selection Events\n\nThe app triggers a selection event when the user selects a lockup. Because this app follows the stateless JavaScript model, you handle that selection event natively in the documentViewController(_:handleEvent:with:) method.\n\nWhen you trigger the select event on a lockup with the useBrowser attribute set to true, the app creates and pushes a TVBrowserViewController to the top of the navigation stack. When you trigger the select event on a lockup with the useBrowser attribute set to false, the app pushes a standard document conforming to the ProductSingle.xml template to the top of the navigation stack. After the app pushes the appropriate view, it will set the handled variable to true and return it. This signals that the app natively handled the event, and that it needs no more work on the JavaScript end.\n\nif event == .select {\n    if let useBrowser = element.attributes![\"useBrowser\"], useBrowser == \"true\" {\n        // Handle the select event that might lead to loading documents in a browser.\n        let superParent: TVViewElement? = element.parent?.parent?.name == \"shelf\" ? element.parent?.parent : nil\n        if let shelfElement = superParent, let browserController = TVBrowserViewController(viewElement: shelfElement) {\n            browserController.dataSource = self\n            appController.navigationController.pushViewController(browserController, animated: true)\n            handled = true\n        }\n    } else {\n        let documentController = TVDocumentViewController(context: element.elementData, for: appController)\n        documentController.delegate = self\n        appController.navigationController.pushViewController(documentController, animated: true)\n        handled = true\n    }\n}\n\n\nWhen TVMLKit determines that there are unpopulated views that need data, TVMLKit triggers the onDocumentRequest event to request data for that document. The app references a documentProcessor again, except this time it presents data that corresponds to the ProductSingle.xml template instead of the Index.xml template. This is because the URL from the lockup points to templates/ProductSingle.xml. The new data populated into the ProductSingle template presents a full screen view with the selected image.\n\nTo learn more about the different TVDocumentViewController events, see TVDocumentViewController.Event.\n\nSee Also\nJavaScript Environment\nclass TVApplicationController\nAn object that bridges the UI, navigation stack, storage, and event handling from JavaScript.\nclass TVApplicationControllerContext\nLaunch information provided to the TV application controller."
  },
  {
    "title": "TVMLKit",
    "url": "https://developer.apple.com/documentation/TVMLKit",
    "html": "Overview\n\nThe TVMLKit framework enables you to evaluate TVMLKit JS and TVML files from within your tvOS app. You can create TVML elements, styles, views, and view controllers through the JavaScript environment.\n\nTopics\nJavaScript Environment\nImplementing a Hybrid TV App with TVMLKit\nDisplay content options with document view controllers and fetch and populate content with TVMLKit JS.\nclass TVApplicationController\nAn object that bridges the UI, navigation stack, storage, and event handling from JavaScript.\nclass TVApplicationControllerContext\nLaunch information provided to the TV application controller.\nViews and View Controllers\nclass TVViewElement\nA representation of a read-only DOM node.\nprotocol TVInterfaceCreating\nA protocol that defines methods used to create views and view controllers.\nclass TVInterfaceFactory\nA factory for the creation of views and view controllers.\nclass TVBrowserViewController\nA view controller that presents content in a browsable, full-screen format.\nclass TVDocumentViewController\nA view controller that represents a TVMLKit document.\nCustom Elements\nclass TVElementFactory\nAn object used to register new elements to extend the Apple TV Markup Language (TVML).\nclass TVImageElement\nA representation of a read-only DOM node containing the attributes that describe an image element.\nclass TVTextElement\nThe textual content for the DOM element.\nCreating TVML Elements\nAvoid rewriting complex and often used elements by creating a simplified custom element.\nCustom Styles\nclass TVViewElementStyle\nA style applied to a view element.\nclass TVStyleFactory\nAn object used to register custom style properties.\nclass TVColor\nThe color data used by styles.\nCustom Player\nclass TVMediaItem\nA single audio or video item associated with the Apple TV JavaScript player.\nclass TVPlaylist\nA collection of media items associated with the Apple TV JavaScript player.\nclass TVPlayer\nA customizable native media player used to control playback from the JavaScript player used in an Apple TV client-server app.\nErrors\nlet TVMLKitErrorDomain: String\nAn error occurred in TVMLKit.\nenum TVMLKitError\nError codes for the TVMLKit error domain.\nstruct TVDocumentError\nReference\nTVMLKit Enumerations\nTVMLKit Constants"
  }
]