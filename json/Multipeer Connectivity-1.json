[
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionstate/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcencryptionpreference/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "MCSessionState.notConnected",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionstate/notconnected",
    "html": "See Also\nConstants\ncase connecting\nA connection to the peer is currently being established.\ncase connected\nThe peer is connected to this session."
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionsenddatamode/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "MCError.Code.unavailable",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code/unavailable",
    "html": "See Also\nConstants\ncase unknown\nAn unknown error occurred.\ncase notConnected\nYour app attempted to send data to a peer that is not connected.\ncase invalidParameter\nYour app passed an invalid value as a parameter.\ncase unsupported\nThe operation is unsupported. For example, this error is returned if you call sendResource(at:withName:toPeer:withCompletionHandler:) with a URL that is neither a local file nor a web URL.\ncase timedOut\nThe connection attempt timed out.\ncase cancelled\nThe operation was cancelled by the user."
  },
  {
    "title": "MCError.Code.timedOut",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code/timedout",
    "html": "See Also\nConstants\ncase unknown\nAn unknown error occurred.\ncase notConnected\nYour app attempted to send data to a peer that is not connected.\ncase invalidParameter\nYour app passed an invalid value as a parameter.\ncase unsupported\nThe operation is unsupported. For example, this error is returned if you call sendResource(at:withName:toPeer:withCompletionHandler:) with a URL that is neither a local file nor a web URL.\ncase cancelled\nThe operation was cancelled by the user.\ncase unavailable\nMultipeer connectivity is currently unavailable."
  },
  {
    "title": "MCError.Code.cancelled",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code/cancelled",
    "html": "See Also\nConstants\ncase unknown\nAn unknown error occurred.\ncase notConnected\nYour app attempted to send data to a peer that is not connected.\ncase invalidParameter\nYour app passed an invalid value as a parameter.\ncase unsupported\nThe operation is unsupported. For example, this error is returned if you call sendResource(at:withName:toPeer:withCompletionHandler:) with a URL that is neither a local file nor a web URL.\ncase timedOut\nThe connection attempt timed out.\ncase unavailable\nMultipeer connectivity is currently unavailable."
  },
  {
    "title": "MCError.Code.invalidParameter",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code/invalidparameter",
    "html": "See Also\nConstants\ncase unknown\nAn unknown error occurred.\ncase notConnected\nYour app attempted to send data to a peer that is not connected.\ncase unsupported\nThe operation is unsupported. For example, this error is returned if you call sendResource(at:withName:toPeer:withCompletionHandler:) with a URL that is neither a local file nor a web URL.\ncase timedOut\nThe connection attempt timed out.\ncase cancelled\nThe operation was cancelled by the user.\ncase unavailable\nMultipeer connectivity is currently unavailable."
  },
  {
    "title": "MCError.Code.unsupported",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code/unsupported",
    "html": "See Also\nConstants\ncase unknown\nAn unknown error occurred.\ncase notConnected\nYour app attempted to send data to a peer that is not connected.\ncase invalidParameter\nYour app passed an invalid value as a parameter.\ncase timedOut\nThe connection attempt timed out.\ncase cancelled\nThe operation was cancelled by the user.\ncase unavailable\nMultipeer connectivity is currently unavailable."
  },
  {
    "title": "MCError.Code.notConnected",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code/notconnected",
    "html": "See Also\nConstants\ncase unknown\nAn unknown error occurred.\ncase invalidParameter\nYour app passed an invalid value as a parameter.\ncase unsupported\nThe operation is unsupported. For example, this error is returned if you call sendResource(at:withName:toPeer:withCompletionHandler:) with a URL that is neither a local file nor a web URL.\ncase timedOut\nThe connection attempt timed out.\ncase cancelled\nThe operation was cancelled by the user.\ncase unavailable\nMultipeer connectivity is currently unavailable."
  },
  {
    "title": "MCSessionSendDataMode.reliable",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionsenddatamode/reliable",
    "html": "Discussion\n\nUse this message type for application-critical data.\n\nSee Also\nConstants\ncase unreliable\nMessages to peers should be sent immediately without socket-level queueing. If a message cannot be sent immediately, it should be dropped. The order of messages is not guaranteed."
  },
  {
    "title": "MCError.Code.unknown",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code/unknown",
    "html": "See Also\nConstants\ncase notConnected\nYour app attempted to send data to a peer that is not connected.\ncase invalidParameter\nYour app passed an invalid value as a parameter.\ncase unsupported\nThe operation is unsupported. For example, this error is returned if you call sendResource(at:withName:toPeer:withCompletionHandler:) with a URL that is neither a local file nor a web URL.\ncase timedOut\nThe connection attempt timed out.\ncase cancelled\nThe operation was cancelled by the user.\ncase unavailable\nMultipeer connectivity is currently unavailable."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionsenddatamode/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "MCEncryptionPreference.optional",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcencryptionpreference/optional",
    "html": "See Also\nConstants\ncase required\nThe session requires encryption.\ncase none\nThe session should not be encrypted."
  },
  {
    "title": "browser(_:foundPeer:withDiscoveryInfo:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyservicebrowserdelegate/browser(_:foundpeer:withdiscoveryinfo:)",
    "html": "Required\n\nParameters\nbrowser\n\nThe browser object that found the nearby peer.\n\npeerID\n\nThe unique ID of the peer that was found.\n\ninfo\n\nThe info dictionary advertised by the discovered peer. For more information on the contents of this dictionary, see the documentation for init(peer:discoveryInfo:serviceType:) in MCNearbyServiceAdvertiser.\n\nDiscussion\n\nThe peer ID provided to this delegate method can be used to invite the nearby peer to join a session.\n\nSee Also\nPeer Discovery Delegate Methods\nfunc browser(MCNearbyServiceBrowser, lostPeer: MCPeerID)\nCalled when a nearby peer is lost.\n\nRequired"
  },
  {
    "title": "browser(_:lostPeer:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyservicebrowserdelegate/browser(_:lostpeer:)",
    "html": "Required\n\nParameters\nbrowser\n\nThe browser object that lost the nearby peer.\n\npeerID\n\nThe unique ID of the nearby peer that was lost.\n\nDiscussion\n\nThis callback informs your app that invitations can no longer be sent to a peer, and that your app should remove that peer from its user interface.\n\nImportant\n\nBecause there is a delay between when a host leaves a network and when the underlying Bonjour layer detects that it has left, the fact that your app has not yet received a disappearance callback does not guarantee that it can communicate with the peer successfully.\n\nSee Also\nPeer Discovery Delegate Methods\nfunc browser(MCNearbyServiceBrowser, foundPeer: MCPeerID, withDiscoveryInfo: [String : String]?)\nCalled when a nearby peer is found.\n\nRequired"
  },
  {
    "title": "init(serviceType:discoveryInfo:session:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistant/init(servicetype:discoveryinfo:session:)",
    "html": "Parameters\nserviceType\n\nThe type of service to advertise. This should be a short text string that describes the app’s networking protocol, in the same format as a Bonjour service type (without the transport protocol) and meeting the restrictions of RFC 6335 (section 5.1) governing Service Name Syntax. In particular, the string:\n\nMust be 1–15 characters long\n\nCan contain only ASCII lowercase letters, numbers, and hyphens\n\nMust contain at least one ASCII letter\n\nMust not begin or end with a hyphen\n\nMust not contain hyphens adjacent to other hyphens.\n\nThis name should be easily distinguished from unrelated services. For example, a text chat app made by ABC company could use the service type abc-txtchat.\n\nFor more details, read Domain Naming Conventions.\n\ninfo\n\nA dictionary of key-value pairs that are made available to browsers. Each key and value must be an NSString object.\n\nThis data is advertised using a Bonjour TXT record, encoded according to RFC 6763 (section 6). As a result:\n\nThe key-value pair must be no longer than 255 bytes (total) when encoded in UTF-8 format with an equals sign (=) between the key and the value.\n\nKeys cannot contain an equals sign.\n\nFor optimal performance, the total size of the keys and values in this dictionary should be no more than about 400 bytes so that the entire advertisement can fit within a single Bluetooth data packet. For details on the maximum allowable length, read Monitoring a Bonjour Service.\n\nIf the data you need to provide is too large to fit within these constraints, create a custom discovery class using Bonjour for discovery and your choice of networking protocols for exchanging the information.\n\nsession\n\nThe session into which new peers should be added after they accept the invitation.\n\nReturn Value\n\nAn initialized instance, or nil if an error occurred.\n\nDiscussion\n\nThis method throws an exception if a valid peerID object is not provided, or if serviceType is not a legal Bonjour service type.\n\nSee Also\nInitializing and Configuring\nvar session: MCSession\nThe session into which new peers are added after accepting an invitation.\nvar delegate: (any MCAdvertiserAssistantDelegate)?\nThe delegate object that handles advertising-assistant-related events.\nvar discoveryInfo: [String : String]?\nThe info dictionary that was passed when this object was initialized.\nvar serviceType: String\nThe service type that your app is advertising."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionstate/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "errorDomain",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/errordomain-315ws",
    "html": "See Also\nType Properties\nstatic var cancelled: MCError.Code\nstatic var invalidParameter: MCError.Code\nstatic var notConnected: MCError.Code\nstatic var timedOut: MCError.Code\nstatic var unavailable: MCError.Code\nstatic var unknown: MCError.Code\nstatic var unsupported: MCError.Code"
  },
  {
    "title": "timedOut",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/timedout",
    "html": "See Also\nType Properties\nstatic var cancelled: MCError.Code\nstatic var errorDomain: String\nThe domain of the error.\nstatic var invalidParameter: MCError.Code\nstatic var notConnected: MCError.Code\nstatic var unavailable: MCError.Code\nstatic var unknown: MCError.Code\nstatic var unsupported: MCError.Code"
  },
  {
    "title": "MCEncryptionPreference.required",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcencryptionpreference/required",
    "html": "See Also\nConstants\ncase optional\nThe session prefers to use encryption, but accepts unencrypted connections. A connection uses encryption when all the peers choose either MCEncryptionPreference.optional or MCEncryptionPreference.required. If some peers choose MCEncryptionPreference.none, then the session will not be encrypted. For this reason, if some peers running your app can be configured without encryption, you should always assume that the session is unencrypted.\ncase none\nThe session should not be encrypted."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcencryptionpreference/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcencryptionpreference/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "Multipeer Connectivity Error Domain",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/multipeer_connectivity_error_domain",
    "html": "Topics\nConstants\nlet MCErrorDomain: String\nThe NSError domain constant. If the domain value for an NSError object is equal to MCErrorDomain, then the error was produced by the Multipeer Connectivity framework itself, as opposed to a lower-level framework on which it depends.\nSee Also\nConstants\nenum MCSessionSendDataMode\nIndicates whether delivery of data should be guaranteed.\nenum MCSessionState\nIndicates the current state of a given peer within a session.\nenum MCEncryptionPreference\nIndicates whether a session should use encryption when communicating with nearby peers.\nenum Code\nError codes found in MCErrorDomain error domain NSError objects returned by methods in the Multipeer Connectivity framework.\nMinimum and Maximum Supported Peers\nConstants that define the minimum and maximum number of peers supported in a session."
  },
  {
    "title": "browserViewControllerWasCancelled(_:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontrollerdelegate/browserviewcontrollerwascancelled(_:)",
    "html": "Required\n\nParameters\nbrowserViewController\n\nThe browser view controller that was canceled.\n\nDiscussion\n\nThis call is intended to inform your app that the view controller has been dismissed because the user canceled the discovery process and is no longer interested in creating a communication session.\n\nWhen your app receives this delegate method call, your app must call dismiss(animated:completion:) to dismiss the view controller. Then, your app should handle the cancelation in whatever way is appropriate for your app, and then resume any UI updates that it may have temporarily suspended while the view controller was onscreen.\n\nSee Also\nUser Action Notifications\nfunc browserViewControllerDidFinish(MCBrowserViewController)\nCalled when the browser view controller is dismissed with peers connected in a session.\n\nRequired"
  },
  {
    "title": "MCSessionSendDataMode.unreliable",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionsenddatamode/unreliable",
    "html": "Discussion\n\nUse this message type for data that ceases to be relevant if delayed, such as real-time gaming data.\n\nSee Also\nConstants\ncase reliable\nThe framework should guarantee delivery of each message, enqueueing and retransmitting data as needed, and ensuring in-order delivery."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionsenddatamode/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "MCEncryptionPreference.none",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcencryptionpreference/none",
    "html": "See Also\nConstants\ncase optional\nThe session prefers to use encryption, but accepts unencrypted connections. A connection uses encryption when all the peers choose either MCEncryptionPreference.optional or MCEncryptionPreference.required. If some peers choose MCEncryptionPreference.none, then the session will not be encrypted. For this reason, if some peers running your app can be configured without encryption, you should always assume that the session is unencrypted.\ncase required\nThe session requires encryption."
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "delegate",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistant/delegate",
    "html": "See Also\nInitializing and Configuring\ninit(serviceType: String, discoveryInfo: [String : String]?, session: MCSession)\nInitializes an advertiser assistant object.\nvar session: MCSession\nThe session into which new peers are added after accepting an invitation.\nvar discoveryInfo: [String : String]?\nThe info dictionary that was passed when this object was initialized.\nvar serviceType: String\nThe service type that your app is advertising."
  },
  {
    "title": "discoveryInfo",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistant/discoveryinfo",
    "html": "Discussion\n\nYou set this property’s value when you initialize the object. It cannot be changed later.\n\nSee Also\nInitializing and Configuring\ninit(serviceType: String, discoveryInfo: [String : String]?, session: MCSession)\nInitializes an advertiser assistant object.\nvar session: MCSession\nThe session into which new peers are added after accepting an invitation.\nvar delegate: (any MCAdvertiserAssistantDelegate)?\nThe delegate object that handles advertising-assistant-related events.\nvar serviceType: String\nThe service type that your app is advertising."
  },
  {
    "title": "session",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistant/session",
    "html": "Discussion\n\nYou set this property’s value when you initialize the object. It cannot be changed later.\n\nSee Also\nInitializing and Configuring\ninit(serviceType: String, discoveryInfo: [String : String]?, session: MCSession)\nInitializes an advertiser assistant object.\nvar delegate: (any MCAdvertiserAssistantDelegate)?\nThe delegate object that handles advertising-assistant-related events.\nvar discoveryInfo: [String : String]?\nThe info dictionary that was passed when this object was initialized.\nvar serviceType: String\nThe service type that your app is advertising."
  },
  {
    "title": "init(peer:discoveryInfo:serviceType:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiser/init(peer:discoveryinfo:servicetype:)",
    "html": "Parameters\nmyPeerID\n\nYour app’s local peer ID.\n\ninfo\n\nA dictionary of key-value pairs that are made available to browsers. Each key and value must be an NSString object.\n\nThis data is advertised using a Bonjour TXT record, encoded according to RFC 6763 (section 6). As a result:\n\nThe key-value pair must be no longer than 255 bytes (total) when encoded in UTF-8 format with an equals sign (=) between the key and the value.\n\nKeys cannot contain an equals sign.\n\nFor optimal performance, the total size of the keys and values in this dictionary should be no more than about 400 bytes so that the entire advertisement can fit within a single Bluetooth data packet. For details on the maximum allowable length, read Monitoring a Bonjour Service.\n\nIf the data you need to provide is too large to fit within these constraints, you should create a custom discovery class using Bonjour for discovery and your choice of networking protocols for exchanging the information.\n\nserviceType\n\nThe type of service to advertise. This should be a short text string that describes the app’s networking protocol, in the same format as a Bonjour service type (without the transport protocol) and meeting the restrictions of RFC 6335 (section 5.1) governing Service Name Syntax. In particular, the string:\n\nMust be 1–15 characters long\n\nCan contain only ASCII lowercase letters, numbers, and hyphens\n\nMust contain at least one ASCII letter\n\nMust not begin or end with a hyphen\n\nMust not contain hyphens adjacent to other hyphens.\n\nThis name should be easily distinguished from unrelated services. For example, a text chat app made by ABC company could use the service type abc-txtchat.\n\nFor more details, read Domain Naming Conventions.\n\nReturn Value\n\nReturns an initialized instance, or nil if an error occurred.\n\nDiscussion\n\nThis method throws an exception if a valid peerID object is not provided or if the value of serviceType is not a legal Bonjour service type.\n\nSee Also\nConfiguring and Initialization\nvar delegate: (any MCNearbyServiceAdvertiserDelegate)?\nThe delegate object that handles advertising-related events.\nvar discoveryInfo: [String : String]?\nThe info dictionary passed when this object was initialized.\nvar myPeerID: MCPeerID\nThe local peer ID for this instance.\nvar serviceType: String\nThe service type that your app is advertising"
  },
  {
    "title": "session",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontroller/session",
    "html": "Discussion\n\nThis value is set when you initialize the object, and cannot be changed later.\n\nSee Also\nInitializing a Browser View Controller\nconvenience init(serviceType: String, session: MCSession)\nInitializes a browser view controller using the provided service type and session.\ninit(browser: MCNearbyServiceBrowser, session: MCSession)\nInitializes a browser view controller with the provided browser and session.\nvar delegate: (any MCBrowserViewControllerDelegate)?\nThe delegate object that handles browser-view-controller-related events.\nvar browser: MCNearbyServiceBrowser?\nThe browser object that is used for discovering peers."
  },
  {
    "title": "minimumNumberOfPeers",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontroller/minimumnumberofpeers",
    "html": "Discussion\n\nThe smallest allowable value (and the default) is 2.\n\nSee Also\nGetting and Setting the Maximum and Minimum Number of Peers\nvar maximumNumberOfPeers: Int\nThe maximum number of peers allowed in a session, including the local peer."
  },
  {
    "title": "RawRepresentable Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionstate/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "session(_:didReceiveCertificate:fromPeer:certificateHandler:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/session(_:didreceivecertificate:frompeer:certificatehandler:)",
    "html": "Required\n\nParameters\nsession\n\nThe session that the nearby peer wishes to join.\n\ncertificate\n\nA certificate chain, presented as an array of SecCertificateRef certificate objects. The first certificate in this chain is the peer’s certificate, which is derived from the identity that the peer provided when it called the init(peer:securityIdentity:encryptionPreference:) method. The other certificates are the (optional) additional chain certificates provided in that same array.\n\nIf the nearby peer did not provide a security identity, then this parameter’s value is nil.\n\npeerID\n\nThe peer ID of the sender.\n\ncertificateHandler\n\nYour app should call this handler with a value of true if the nearby peer should be allowed to join the session, or false otherwise.\n\nDiscussion\n\nYour app should inspect the nearby peer’s certificate, and then should decide whether to trust that certificate. Upon making that determination, your app should call the provided certificateHandler block, passing either true (to trust the nearby peer) or false (to reject it).\n\nFor information about validating certificates, read Cryptographic Services Guide.\n\nImportant\n\nThe multipeer connectivity framework makes no attempt to validate the peer-provided identity or certificates in any way. If your delegate does not implement this method, all certificates are accepted automatically.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired"
  },
  {
    "title": "Minimum and Maximum Supported Peers",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/minimum_and_maximum_supported_peers",
    "html": "Topics\nConstants\nlet kMCSessionMaximumNumberOfPeers: Int\nThe maximum number of peers that a session can support, including the local peer.\nlet kMCSessionMinimumNumberOfPeers: Int\nThe minimum number of peers that a session can support, including the local peer.\nSee Also\nConstants\nenum MCSessionSendDataMode\nIndicates whether delivery of data should be guaranteed.\nenum MCSessionState\nIndicates the current state of a given peer within a session.\nenum MCEncryptionPreference\nIndicates whether a session should use encryption when communicating with nearby peers.\nenum Code\nError codes found in MCErrorDomain error domain NSError objects returned by methods in the Multipeer Connectivity framework.\nMultipeer Connectivity Error Domain\nThe error domain for errors specific to Multipeer Connectivity."
  },
  {
    "title": "MCSessionState.connecting",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionstate/connecting",
    "html": "See Also\nConstants\ncase notConnected\nThe peer is not (or is no longer) in this session.\ncase connected\nThe peer is connected to this session."
  },
  {
    "title": "session(_:didReceive:withName:fromPeer:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/1406917-session",
    "html": "Required\n\nParameters\nsession\n\nThe session through which the byte stream was opened.\n\nstream\n\nAn NSInputStream object that represents the local endpoint for the byte stream.\n\nstreamName\n\nThe name of the stream, as provided by the originator.\n\npeerID\n\nThe peer ID of the originator of the stream.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established."
  },
  {
    "title": "session(_:peer:didChange:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/session(_:peer:didchange:)",
    "html": "Required\n\nParameters\nsession\n\nThe session that manages the nearby peer whose state changed.\n\npeerID\n\nThe ID of the nearby peer whose state changed.\n\nstate\n\nThe new state of the nearby peer.\n\nDiscussion\n\nThis delegate method is called with the following state values when the nearby peer’s state changes:\n\nMCSessionState.connected—the nearby peer accepted the invitation and is now connected to the session.\n\nMCSessionState.notConnected—the nearby peer declined the invitation, the connection could not be established, or a previously connected peer is no longer connected.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established.\n\nRequired"
  },
  {
    "title": "session(_:didStartReceivingResourceWithName:fromPeer:with:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/session(_:didstartreceivingresourcewithname:frompeer:with:)",
    "html": "Required\n\nParameters\nsession\n\nThe session that started receiving the resource.\n\nresourceName\n\nThe name of the resource, as provided by the sender.\n\npeerID\n\nThe sender’s peer ID.\n\nprogress\n\nAn NSProgress object that can be used to cancel the transfer or queried to determine how far the transfer has progressed.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established.\n\nRequired"
  },
  {
    "title": "browserViewController(_:shouldPresentNearbyPeer:withDiscoveryInfo:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontrollerdelegate/browserviewcontroller(_:shouldpresentnearbypeer:withdiscoveryinfo:)",
    "html": "Required\n\nParameters\nbrowserViewController\n\nThe browser view controller object that discovered the new peer.\n\npeerID\n\nThe unique ID of the nearby peer.\n\ninfo\n\nThe info dictionary advertised by the discovered peer. For more information on the contents of this dictionary, see the documentation for init(peer:discoveryInfo:serviceType:) in MCNearbyServiceAdvertiser.\n\nReturn Value\n\nThis delegate method should return true if the newly discovered peer should be shown in the user interface, or false otherwise.\n\nDiscussion\n\nIf this method is not provided, all peers are shown."
  },
  {
    "title": "session(_:didReceive:fromPeer:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/session(_:didreceive:frompeer:)",
    "html": "Required\n\nParameters\nsession\n\nThe session through which the data was received.\n\ndata\n\nAn object containing the received data.\n\npeerID\n\nThe peer ID of the sender.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established.\n\nRequired"
  },
  {
    "title": "advertiser(_:didReceiveInvitationFromPeer:withContext:invitationHandler:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiserdelegate/advertiser(_:didreceiveinvitationfrompeer:withcontext:invitationhandler:)",
    "html": "Required\n\nParameters\nadvertiser\n\nThe advertiser object that was invited to join the session.\n\npeerID\n\nThe peer ID of the nearby peer that invited your app to join the session.\n\ncontext\n\nAn arbitrary piece of data received from the nearby peer. This can be used to provide further information to the user about the nature of the invitation.\n\nImportant\n\nThe nearby peer should treat any data it receives as potentially untrusted. To learn more about working with untrusted data, read Secure Coding Guide.\n\ninvitationHandler\n\nA block that your code must call to indicate whether the advertiser should accept or decline the invitation, and to provide a session with which to associate the peer that sent the invitation."
  },
  {
    "title": "MCErrorDomain",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerrordomain",
    "html": "See Also\nConstants\nlet kMCSessionMaximumNumberOfPeers: Int\nThe maximum number of peers that a session can support, including the local peer.\nlet kMCSessionMinimumNumberOfPeers: Int\nThe minimum number of peers that a session can support, including the local peer."
  },
  {
    "title": "MCError.Code",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/code",
    "html": "Topics\nConstants\ncase unknown\nAn unknown error occurred.\ncase notConnected\nYour app attempted to send data to a peer that is not connected.\ncase invalidParameter\nYour app passed an invalid value as a parameter.\ncase unsupported\nThe operation is unsupported. For example, this error is returned if you call sendResource(at:withName:toPeer:withCompletionHandler:) with a URL that is neither a local file nor a web URL.\ncase timedOut\nThe connection attempt timed out.\ncase cancelled\nThe operation was cancelled by the user.\ncase unavailable\nMultipeer connectivity is currently unavailable.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable"
  },
  {
    "title": "MCSessionState",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionstate",
    "html": "Topics\nConstants\ncase notConnected\nThe peer is not (or is no longer) in this session.\ncase connecting\nA connection to the peer is currently being established.\ncase connected\nThe peer is connected to this session.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nConstants\nenum MCSessionSendDataMode\nIndicates whether delivery of data should be guaranteed.\nenum MCEncryptionPreference\nIndicates whether a session should use encryption when communicating with nearby peers.\nenum Code\nError codes found in MCErrorDomain error domain NSError objects returned by methods in the Multipeer Connectivity framework.\nMultipeer Connectivity Error Domain\nThe error domain for errors specific to Multipeer Connectivity.\nMinimum and Maximum Supported Peers\nConstants that define the minimum and maximum number of peers supported in a session."
  },
  {
    "title": "MCSessionSendDataMode",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionsenddatamode",
    "html": "Topics\nConstants\ncase reliable\nThe framework should guarantee delivery of each message, enqueueing and retransmitting data as needed, and ensuring in-order delivery.\ncase unreliable\nMessages to peers should be sent immediately without socket-level queueing. If a message cannot be sent immediately, it should be dropped. The order of messages is not guaranteed.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nConstants\nenum MCSessionState\nIndicates the current state of a given peer within a session.\nenum MCEncryptionPreference\nIndicates whether a session should use encryption when communicating with nearby peers.\nenum Code\nError codes found in MCErrorDomain error domain NSError objects returned by methods in the Multipeer Connectivity framework.\nMultipeer Connectivity Error Domain\nThe error domain for errors specific to Multipeer Connectivity.\nMinimum and Maximum Supported Peers\nConstants that define the minimum and maximum number of peers supported in a session."
  },
  {
    "title": "myPeerID",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/mypeerid",
    "html": "Discussion\n\nYou set this value when you initialize the session object. It cannot be changed later.\n\nSee Also\nCreating a Session\nconvenience init(peer: MCPeerID)\nCreates a Multipeer Connectivity session.\ninit(peer: MCPeerID, securityIdentity: [Any]?, encryptionPreference: MCEncryptionPreference)\nCreates a Multipeer Connectivity session, providing security information.\nvar delegate: (any MCSessionDelegate)?\nThe delegate object that handles session-related events.\nvar encryptionPreference: MCEncryptionPreference\nA value indicating whether the connection prefers encrypted connections, unencrypted connections, or has no preference.\nvar securityIdentity: [Any]?\nThe security identity of the local peer."
  },
  {
    "title": "sendResource(at:withName:toPeer:withCompletionHandler:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/sendresource(at:withname:topeer:withcompletionhandler:)",
    "html": "Parameters\nresourceURL\n\nA file or HTTP URL.\n\nresourceName\n\nA name for the resource.\n\npeerID\n\nThe peer that should receive this resource.\n\ncompletionHandler\n\nA block that gets called when delivery succeeds or fails. Upon success, the handler is called with an error value of nil. Upon failure, the handle is called with an error object that indicates what went wrong.\n\nReturn Value\n\nAn NSProgress object that can be used to query the status of the transfer or cancel the transfer.\n\nDiscussion\n\nThis method is asynchronous (nonblocking).\n\nOn the local device, the completion handler block is called when delivery succeeds or when an error occurs.\n\nOn the recipient device, the session calls its delegate’s session(_:didStartReceivingResourceWithName:fromPeer:with:) method as soon as it begins receiving the resource. This method provides an NSProgress object that your app can use to cancel the transfer or check its status.\n\nUpon successful delivery, on the recipient device, the session calls its delegate’s session(_:didFinishReceivingResourceWithName:fromPeer:at:withError:) method. The received resource is written to a file in a temporary location with the same base name; the app is responsible for opening the file or moving it to a permanent location before that delegate method returns.\n\nSee Also\nSending Data and Resources\nfunc send(Data, toPeers: [MCPeerID], with: MCSessionSendDataMode) throws\nSends a message to nearby peers.\nfunc startStream(withName: String, toPeer: MCPeerID) throws -> OutputStream\nOpens a byte stream to a nearby peer."
  },
  {
    "title": "nearbyConnectionData(forPeer:withCompletionHandler:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/nearbyconnectiondata(forpeer:withcompletionhandler:)",
    "html": "Parameters\npeerID\n\nA peer ID object obtained from the nearby peer that you want to add to a session.\n\ncompletionHandler\n\nA handler that is called when connection data is available or when an error occurs.\n\nDiscussion\n\nImportant\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc nearbyConnectionData(forPeer peerID: MCPeerID) async throws -> Data\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThis method provides connection data that is required when adding a specific nearby peer to a session if you are using your own service discovery code instead of an MCNearbyServiceBrowser or MCBrowserViewController object. For more information, see the Managing Peers Manually section in the overview of the MCSession class reference.\n\nSee Also\nManaging Peers Manually\nfunc connectPeer(MCPeerID, withNearbyConnectionData: Data)\nCall this method to connect a peer to the session when using your own service discovery code instead of an MCNearbyServiceBrowser or MCBrowserViewController object.\nfunc cancelConnectPeer(MCPeerID)\nCancels an attempt to connect to a peer.\nvar connectedPeers: [MCPeerID]\nAn array of all peers that are currently connected to this session."
  },
  {
    "title": "send(_:toPeers:with:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/send(_:topeers:with:)",
    "html": "Parameters\ndata\n\nAn instance containing the message to send.\n\npeerIDs\n\nAn array of peer ID instances representing the peers that should receive the message.\n\nmode\n\nThe transmission mode to use (reliable or unreliable delivery).\n\nerror\n\nIn Objective-C, the address of an NSError pointer where an error object should be stored upon error.\n\nReturn Value\n\nIn Objective-C, true if the message was successfully enqueued for delivery, or false if an error occurred.\n\nDiscussion\n\nThis method is asynchronous (nonblocking).\n\nOn the recipient device, the session instance calls its delegate instance’s session(_:didReceive:fromPeer:) method with the message after it has been fully received.\n\nSee Also\nSending Data and Resources\nfunc sendResource(at: URL, withName: String, toPeer: MCPeerID, withCompletionHandler: (((any Error)?) -> Void)?) -> Progress?\nSends the contents of a URL to a peer.\nfunc startStream(withName: String, toPeer: MCPeerID) throws -> OutputStream\nOpens a byte stream to a nearby peer."
  },
  {
    "title": "cancelConnectPeer(_:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/cancelconnectpeer(_:)",
    "html": "Parameters\npeerID\n\nThe ID of the nearby peer.\n\nDiscussion\n\nCall this method to cancel connections to peers when you are using your own service discovery code instead of an MCNearbyServiceBrowser or MCBrowserViewController object. It should be called in two situations:\n\nIf your app calls connectPeer(_:withNearbyConnectionData:) and later needs to cancel the connection attempt\n\nIf your app has obtained nearby connection data for a peer but you decide not to connect to the peer\n\nFor more information, see the Managing Peers Manually section in the overview of the MCSession class reference.\n\nSee Also\nManaging Peers Manually\nfunc connectPeer(MCPeerID, withNearbyConnectionData: Data)\nCall this method to connect a peer to the session when using your own service discovery code instead of an MCNearbyServiceBrowser or MCBrowserViewController object.\nvar connectedPeers: [MCPeerID]\nAn array of all peers that are currently connected to this session.\nfunc nearbyConnectionData(forPeer: MCPeerID, withCompletionHandler: (Data?, (any Error)?) -> Void)\nObtains connection data for the specified peer."
  },
  {
    "title": "securityIdentity",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/securityidentity",
    "html": "Discussion\n\nYou set this value when you initialize the session object. It cannot be changed later. For details on this value, see the documentation for init(peer:securityIdentity:encryptionPreference:).\n\nSee Also\nCreating a Session\nconvenience init(peer: MCPeerID)\nCreates a Multipeer Connectivity session.\ninit(peer: MCPeerID, securityIdentity: [Any]?, encryptionPreference: MCEncryptionPreference)\nCreates a Multipeer Connectivity session, providing security information.\nvar delegate: (any MCSessionDelegate)?\nThe delegate object that handles session-related events.\nvar encryptionPreference: MCEncryptionPreference\nA value indicating whether the connection prefers encrypted connections, unencrypted connections, or has no preference.\nvar myPeerID: MCPeerID\nA local identifier that represents the device on which your app is currently running."
  },
  {
    "title": "encryptionPreference",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/encryptionpreference",
    "html": "Discussion\n\nYou set this value when you initialize the session object. It cannot be changed later. For possible values, see MCEncryptionPreference\n\nSee Also\nCreating a Session\nconvenience init(peer: MCPeerID)\nCreates a Multipeer Connectivity session.\ninit(peer: MCPeerID, securityIdentity: [Any]?, encryptionPreference: MCEncryptionPreference)\nCreates a Multipeer Connectivity session, providing security information.\nvar delegate: (any MCSessionDelegate)?\nThe delegate object that handles session-related events.\nvar myPeerID: MCPeerID\nA local identifier that represents the device on which your app is currently running.\nvar securityIdentity: [Any]?\nThe security identity of the local peer."
  },
  {
    "title": "init(peer:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/init(peer:)",
    "html": "Parameters\nmyPeerID\n\nA local identifier that represents the device on which your app is currently running.\n\nReturn Value\n\nThe initialized session object, or nil if an error occurs.\n\nDiscussion\n\nThis method is equivalent to calling init(peer:securityIdentity:encryptionPreference:) with a nil identity and an encryption setting that varies based on which version of the SDK was used to link the application. On apps linked on or after iOS 9, the encryption is set to MCEncryptionPreference.required. On apps linked prior to iOS 9, the encryption is set to MCEncryptionPreference.optional.\n\nThis method throws an exception if the provided peer ID object is invalid or nil.\n\nFor more information, see Initiating a Session.\n\nSee Also\nCreating a Session\ninit(peer: MCPeerID, securityIdentity: [Any]?, encryptionPreference: MCEncryptionPreference)\nCreates a Multipeer Connectivity session, providing security information.\nvar delegate: (any MCSessionDelegate)?\nThe delegate object that handles session-related events.\nvar encryptionPreference: MCEncryptionPreference\nA value indicating whether the connection prefers encrypted connections, unencrypted connections, or has no preference.\nvar myPeerID: MCPeerID\nA local identifier that represents the device on which your app is currently running.\nvar securityIdentity: [Any]?\nThe security identity of the local peer."
  },
  {
    "title": "init(peer:securityIdentity:encryptionPreference:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/init(peer:securityidentity:encryptionpreference:)",
    "html": "Parameters\nmyPeerID\n\nA local identifier that represents the device on which your app is currently running.\n\nidentity\n\nAn array containing information that can be used to identify the local peer to other nearby peers.\n\nThe first object in this array should be a SecIdentity object that provides the local peer’s identity.\n\nThe remainder of the array should contain zero or more additional SecCertificate objects that provide any intermediate certificates that nearby peers might require when verifying the local peer’s identity. These certificates should be sent in certificate chain order.\n\nWhen you add other peers to the session, those peers receive your local peer’s certificate (extracted from the provided identity) and any additional certificates that you provided. It is the receiving peer’s responsibility to validate that certificate, if desired.\n\nencryptionPreference\n\nAn integer value that indicates whether encryption is required, preferred, or undesirable.\n\nReturn Value\n\nThe initialized session object, or nil if an error occurs.\n\nDiscussion\n\nAll combinations of authentication (supplying an identity value or not) and encryptionPreference are legal. Using both authentication to establish a peer’s identity and encryption to secure the channel provides the most security, while using neither provides none, but the right combination depends upon the needs of your application. For example, one app might use authentication with unencrypted data if the source of the data must be established, but the data is not sensitive. Another app might use an unauthenticated but encrypted link to avoid eavesdropping among known peers.\n\nThis method throws an exception if the provided peer ID object is invalid or nil.\n\nFor more information, see Initiating a Session.\n\nSee Also\nCreating a Session\nconvenience init(peer: MCPeerID)\nCreates a Multipeer Connectivity session.\nvar delegate: (any MCSessionDelegate)?\nThe delegate object that handles session-related events.\nvar encryptionPreference: MCEncryptionPreference\nA value indicating whether the connection prefers encrypted connections, unencrypted connections, or has no preference.\nvar myPeerID: MCPeerID\nA local identifier that represents the device on which your app is currently running.\nvar securityIdentity: [Any]?\nThe security identity of the local peer."
  },
  {
    "title": "serviceType",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyservicebrowser/servicetype",
    "html": "Discussion\n\nThis value is set when you initialize the object, and cannot be changed later.\n\nSee Also\nInitializing the Browser\ninit(peer: MCPeerID, serviceType: String)\nInitializes the nearby service browser object.\nvar delegate: (any MCNearbyServiceBrowserDelegate)?\nThe delegate object that handles browser-related events.\nvar myPeerID: MCPeerID\nThe local peer ID for this instance."
  },
  {
    "title": "invitePeer(_:to:withContext:timeout:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyservicebrowser/invitepeer(_:to:withcontext:timeout:)",
    "html": "Parameters\npeer\n\nThe ID of the peer to invite.\n\nsession\n\nThe session you wish the invited peer to join.\n\ncontext\n\nAn arbitrary piece of data that is passed to the nearby peer. This can be used to provide further information to the user about the nature of the invitation.\n\nImportant\n\nThe nearby peer should treat any data it receives as potentially untrusted. To learn more about working with untrusted data, read Secure Coding Guide.\n\ntimeout\n\nThe amount of time to wait for the peer to respond to the invitation.\n\nThis timeout is measured in seconds, and must be a positive value. If a negative value or zero is specified, the default timeout (30 seconds) is used."
  },
  {
    "title": "startBrowsingForPeers()",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyservicebrowser/startbrowsingforpeers()",
    "html": "Discussion\n\nAfter this method is called (until you call stopBrowsingForPeers()), the framework calls your delegate’s browser(_:foundPeer:withDiscoveryInfo:) and browser(_:lostPeer:) methods as new peers are found and lost.\n\nSee Also\nBrowsing for Peers\nfunc stopBrowsingForPeers()\nStops browsing for peers."
  },
  {
    "title": "stopBrowsingForPeers()",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyservicebrowser/stopbrowsingforpeers()",
    "html": "See Also\nBrowsing for Peers\nfunc startBrowsingForPeers()\nStarts browsing for peers."
  },
  {
    "title": "Error Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/error-implementations",
    "html": "Topics\nInstance Properties\nvar localizedDescription: String\nRetrieve the localized description for this error."
  },
  {
    "title": "discoveryInfo",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiser/discoveryinfo",
    "html": "Discussion\n\nThis value is set when you initialize the object, and cannot be changed later.\n\nSee Also\nConfiguring and Initialization\ninit(peer: MCPeerID, discoveryInfo: [String : String]?, serviceType: String)\nInitializes an advertiser object.\nvar delegate: (any MCNearbyServiceAdvertiserDelegate)?\nThe delegate object that handles advertising-related events.\nvar myPeerID: MCPeerID\nThe local peer ID for this instance.\nvar serviceType: String\nThe service type that your app is advertising"
  },
  {
    "title": "myPeerID",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiser/mypeerid",
    "html": "Discussion\n\nThis value is set when you initialize the object, and cannot be changed later.\n\nSee Also\nConfiguring and Initialization\ninit(peer: MCPeerID, discoveryInfo: [String : String]?, serviceType: String)\nInitializes an advertiser object.\nvar delegate: (any MCNearbyServiceAdvertiserDelegate)?\nThe delegate object that handles advertising-related events.\nvar discoveryInfo: [String : String]?\nThe info dictionary passed when this object was initialized.\nvar serviceType: String\nThe service type that your app is advertising"
  },
  {
    "title": "stopAdvertisingPeer()",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiser/stopadvertisingpeer()",
    "html": "See Also\nStarting and Stopping Advertisement\nfunc startAdvertisingPeer()\nBegins advertising the service provided by a local peer."
  },
  {
    "title": "delegate",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiser/delegate",
    "html": "See Also\nConfiguring and Initialization\ninit(peer: MCPeerID, discoveryInfo: [String : String]?, serviceType: String)\nInitializes an advertiser object.\nvar discoveryInfo: [String : String]?\nThe info dictionary passed when this object was initialized.\nvar myPeerID: MCPeerID\nThe local peer ID for this instance.\nvar serviceType: String\nThe service type that your app is advertising"
  },
  {
    "title": "init(browser:session:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontroller/init(browser:session:)",
    "html": "Parameters\nbrowser\n\nAn object that the browser view controller uses for browsing. This is usually an instance of MCNearbyServiceBrowser. However, if your app is using a custom discovery scheme, you can instead pass any custom subclass that calls the methods defined in the MCNearbyServiceBrowserDelegate protocol on its delegate when peers are found and lost.\n\nImportant\n\nIf you want the browser view controller to manage the browsing process, the browser object must not be actively browsing, and its delegate must be nil.\n\nsession\n\nThe multipeer session into which the invited peers are connected.\n\nReturn Value\n\nReturns an initialized object, or nil if an error occurred.\n\nDiscussion\n\nThis method throws an exception if the browser or session parameters do not contain valid objects.\n\nSee Also\nInitializing a Browser View Controller\nconvenience init(serviceType: String, session: MCSession)\nInitializes a browser view controller using the provided service type and session.\nvar delegate: (any MCBrowserViewControllerDelegate)?\nThe delegate object that handles browser-view-controller-related events.\nvar browser: MCNearbyServiceBrowser?\nThe browser object that is used for discovering peers.\nvar session: MCSession\nThe multipeer session to which the invited peers are connected."
  },
  {
    "title": "CustomNSError Implementations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/customnserror-implementations",
    "html": "Topics\nType Properties\nstatic var errorDomain: String\nDefault domain of the error."
  },
  {
    "title": "invalidParameter",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/invalidparameter",
    "html": "See Also\nType Properties\nstatic var cancelled: MCError.Code\nstatic var errorDomain: String\nThe domain of the error.\nstatic var notConnected: MCError.Code\nstatic var timedOut: MCError.Code\nstatic var unavailable: MCError.Code\nstatic var unknown: MCError.Code\nstatic var unsupported: MCError.Code"
  },
  {
    "title": "cancelled",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/cancelled",
    "html": "See Also\nType Properties\nstatic var errorDomain: String\nThe domain of the error.\nstatic var invalidParameter: MCError.Code\nstatic var notConnected: MCError.Code\nstatic var timedOut: MCError.Code\nstatic var unavailable: MCError.Code\nstatic var unknown: MCError.Code\nstatic var unsupported: MCError.Code"
  },
  {
    "title": "localizedDescription",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/localizeddescription",
    "html": "See Also\nInstance Properties\nvar code: Code\nvar errorCode: Int\nvar errorUserInfo: [String : Any]\nvar hashValue: Int\nvar userInfo: [String : Any]"
  },
  {
    "title": "session(_:didFinishReceivingResourceWithName:fromPeer:at:withError:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/1406984-session",
    "html": "Required\n\nParameters\nsession\n\nThe session through which the data was received.\n\nresourceName\n\nThe name of the resource, as provided by the sender.\n\npeerID\n\nThe peer ID of the sender.\n\nlocalURL\n\nAn NSURL object that provides the location of a temporary file containing the received data.\n\nerror\n\nAn error object indicating what went wrong if the file was not received successfully, or nil.\n\nDiscussion\n\nThe file referenced by resourceURL is a temporary file. Your app must either read the file or make a copy in a permanent location before this delegate method returns.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established."
  },
  {
    "title": "session(_:didReceiveCertificate:fromPeer:certificateHandler:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/1407067-session",
    "html": "Parameters\nsession\n\nThe session that the nearby peer wishes to join.\n\ncertificate\n\nA certificate chain, presented as an array of SecCertificateRef certificate objects. The first certificate in this chain is the peer’s certificate, which is derived from the identity that the peer provided when it called the init(peer:securityIdentity:encryptionPreference:) method. The other certificates are the (optional) additional chain certificates provided in that same array.\n\nIf the nearby peer did not provide a security identity, then this parameter’s value is nil.\n\npeerID\n\nThe peer ID of the sender.\n\ncertificateHandler\n\nYour app should call this handler with a value of true if the nearby peer should be allowed to join the session, or false otherwise.\n\nDiscussion\n\nYour app should inspect the nearby peer’s certificate, and then should decide whether to trust that certificate. Upon making that determination, your app should call the provided certificateHandler block, passing either true (to trust the nearby peer) or false (to reject it).\n\nFor information about validating certificates, read Cryptographic Services Guide.\n\nImportant\n\nThe multipeer connectivity framework makes no attempt to validate the peer-provided identity or certificates in any way. If your delegate does not implement this method, all certificates are accepted automatically.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired"
  },
  {
    "title": "session(_:didStartReceivingResourceWithName:fromPeer:with:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/1406965-session",
    "html": "Required\n\nParameters\nsession\n\nThe session that started receiving the resource.\n\nresourceName\n\nThe name of the resource, as provided by the sender.\n\npeerID\n\nThe sender’s peer ID.\n\nprogress\n\nAn NSProgress object that can be used to cancel the transfer or queried to determine how far the transfer has progressed.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established."
  },
  {
    "title": "session(_:didReceive:fromPeer:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/1406934-session",
    "html": "Required\n\nParameters\nsession\n\nThe session through which the data was received.\n\ndata\n\nAn object containing the received data.\n\npeerID\n\nThe peer ID of the sender.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established."
  },
  {
    "title": "browserViewControllerDidFinish(_:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontrollerdelegate/browserviewcontrollerdidfinish(_:)",
    "html": "Required\n\nParameters\nbrowserViewController\n\nThe view controller that was dismissed.\n\nDiscussion\n\nThis call is intended to inform your app that the user has connected with nearby peers in a session and that the browser view controller has been dismissed. Upon receiving this delegate method call, your app must call dismiss(animated:completion:) to dismiss the view controller. Your app can also begin sending data to any connected peers, and should resume any UI updates that it may have temporarily suspended while the view controller was onscreen.\n\nSee Also\nUser Action Notifications\nfunc browserViewControllerWasCancelled(MCBrowserViewController)\nCalled when the user cancels the browser view controller.\n\nRequired"
  },
  {
    "title": "MCSessionState.connected",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessionstate/connected",
    "html": "See Also\nConstants\ncase notConnected\nThe peer is not (or is no longer) in this session.\ncase connecting\nA connection to the peer is currently being established."
  },
  {
    "title": "session(_:didFinishReceivingResourceWithName:fromPeer:at:withError:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/session(_:didfinishreceivingresourcewithname:frompeer:at:witherror:)",
    "html": "Required\n\nParameters\nsession\n\nThe session through which the data was received.\n\nresourceName\n\nThe name of the resource, as provided by the sender.\n\npeerID\n\nThe peer ID of the sender.\n\nlocalURL\n\nAn NSURL object that provides the location of a temporary file containing the received data.\n\nerror\n\nAn error object indicating what went wrong if the file was not received successfully, or nil.\n\nDiscussion\n\nThe file referenced by resourceURL is a temporary file. Your app must either read the file or make a copy in a permanent location before this delegate method returns.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established.\n\nRequired"
  },
  {
    "title": "session(_:didReceive:withName:fromPeer:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/session(_:didreceive:withname:frompeer:)",
    "html": "Required\n\nParameters\nsession\n\nThe session through which the byte stream was opened.\n\nstream\n\nAn NSInputStream object that represents the local endpoint for the byte stream.\n\nstreamName\n\nThe name of the stream, as provided by the originator.\n\npeerID\n\nThe peer ID of the originator of the stream.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established.\n\nRequired"
  },
  {
    "title": "startStream(withName:toPeer:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/startstream(withname:topeer:)",
    "html": "Parameters\nstreamName\n\nA name for the stream. This name is provided to the nearby peer.\n\npeerID\n\nThe ID of the nearby peer.\n\nerror\n\nThe address of an NSError pointer where an error object should be stored if something goes wrong.\n\nReturn Value\n\nIn Swift, an output stream instance. In Objective-C, an output stream object upon success or nil if a stream could not be established.\n\nDiscussion\n\nThis method is nonblocking.\n\nFor more information about performing networking with input and output streams, read Networking Programming Topics.\n\nSee Also\nSending Data and Resources\nfunc send(Data, toPeers: [MCPeerID], with: MCSessionSendDataMode) throws\nSends a message to nearby peers.\nfunc sendResource(at: URL, withName: String, toPeer: MCPeerID, withCompletionHandler: (((any Error)?) -> Void)?) -> Progress?\nSends the contents of a URL to a peer."
  },
  {
    "title": "connectedPeers",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/connectedpeers",
    "html": "See Also\nManaging Peers Manually\nfunc connectPeer(MCPeerID, withNearbyConnectionData: Data)\nCall this method to connect a peer to the session when using your own service discovery code instead of an MCNearbyServiceBrowser or MCBrowserViewController object.\nfunc cancelConnectPeer(MCPeerID)\nCancels an attempt to connect to a peer.\nfunc nearbyConnectionData(forPeer: MCPeerID, withCompletionHandler: (Data?, (any Error)?) -> Void)\nObtains connection data for the specified peer."
  },
  {
    "title": "delegate",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/delegate",
    "html": "See Also\nCreating a Session\nconvenience init(peer: MCPeerID)\nCreates a Multipeer Connectivity session.\ninit(peer: MCPeerID, securityIdentity: [Any]?, encryptionPreference: MCEncryptionPreference)\nCreates a Multipeer Connectivity session, providing security information.\nvar encryptionPreference: MCEncryptionPreference\nA value indicating whether the connection prefers encrypted connections, unencrypted connections, or has no preference.\nvar myPeerID: MCPeerID\nA local identifier that represents the device on which your app is currently running.\nvar securityIdentity: [Any]?\nThe security identity of the local peer."
  },
  {
    "title": "connectPeer(_:withNearbyConnectionData:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession/connectpeer(_:withnearbyconnectiondata:)",
    "html": "Parameters\npeerID\n\nThe peer ID object obtained from the nearby peer.\n\ndata\n\nThe connection data object obtained from the nearby peer.\n\nDiscussion\n\nCall this method to connect to peers when you are using your own service discovery code instead of an MCNearbyServiceBrowser or MCBrowserViewController object. For more information, see the Managing Peers Manually section in the overview of the MCSession class reference.\n\nSee Also\nManaging Peers Manually\nfunc cancelConnectPeer(MCPeerID)\nCancels an attempt to connect to a peer.\nvar connectedPeers: [MCPeerID]\nAn array of all peers that are currently connected to this session.\nfunc nearbyConnectionData(forPeer: MCPeerID, withCompletionHandler: (Data?, (any Error)?) -> Void)\nObtains connection data for the specified peer."
  },
  {
    "title": "serviceType",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistant/servicetype",
    "html": "Discussion\n\nYou set this property’s value when you initialize the object. It cannot be changed later.\n\nSee Also\nInitializing and Configuring\ninit(serviceType: String, discoveryInfo: [String : String]?, session: MCSession)\nInitializes an advertiser assistant object.\nvar session: MCSession\nThe session into which new peers are added after accepting an invitation.\nvar delegate: (any MCAdvertiserAssistantDelegate)?\nThe delegate object that handles advertising-assistant-related events.\nvar discoveryInfo: [String : String]?\nThe info dictionary that was passed when this object was initialized."
  },
  {
    "title": "stop()",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistant/stop()",
    "html": "See Also\nStarting and Stopping the Assistant\nfunc start()\nBegins advertising the service provided by a local peer and starts the assistant."
  },
  {
    "title": "start()",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistant/start()",
    "html": "See Also\nStarting and Stopping the Assistant\nfunc stop()\nStops advertising the service provided by a local peer and stops the assistant."
  },
  {
    "title": "advertiserAssistantDidDismissInvitation(_:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistantdelegate/advertiserassistantdiddismissinvitation(_:)",
    "html": "Parameters\nadvertiserAssistant\n\nThe advertiser assistant that finished showing an invitation.\n\nDiscussion\n\nThis call tells your app to resume any activity that it stopped doing while the invitation was onscreen. For example, it might resume computationally intensive UI updates for views that are no longer hidden by the invitation.\n\nSee Also\nAdvertiser Assistant Delegate Methods\nfunc advertiserAssistantWillPresentInvitation(MCAdvertiserAssistant)\nIndicates that the advertiser assistant is about to present an invitation to the user."
  },
  {
    "title": "displayName",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcpeerid/displayname",
    "html": "Discussion\n\nFor the local peer, you set this property when the object is initialized. It cannot be changed.\n\nFor other peer objects provided to you by the framework, this property is provided by the peer and cannot be changed.\n\nSee Also\nPeer Methods\ninit(displayName: String)\nInitializes a peer."
  },
  {
    "title": "kMCSessionMaximumNumberOfPeers",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/kmcsessionmaximumnumberofpeers",
    "html": "See Also\nConstants\nlet MCErrorDomain: String\nThe NSError domain constant. If the domain value for an NSError object is equal to MCErrorDomain, then the error was produced by the Multipeer Connectivity framework itself, as opposed to a lower-level framework on which it depends.\nlet kMCSessionMinimumNumberOfPeers: Int\nThe minimum number of peers that a session can support, including the local peer."
  },
  {
    "title": "init(displayName:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcpeerid/init(displayname:)",
    "html": "Parameters\nmyDisplayName\n\nThe display name for the local peer. If you use the multipeer browser view controller, this name is shown.\n\nThe display name is intended for use in UI elements, and should be short and descriptive of the local peer. The maximum allowable length is 63 bytes in UTF-8 encoding. The displayName parameter may not be nil or an empty string.\n\nReturn Value\n\nAn initialized peer ID object.\n\nDiscussion\n\nCall this method only when creating the local peer, not when you create objects that represent other devices.\n\nThis method throws an exception if the displayName value is too long, empty, or nil.\n\nEach call to this method produces a unique peer ID, even for the same display name. If you need a device to maintain a consistent peer ID over time, you may want to archive and reuse it later instead of creating a new one every time your app starts advertising or browsing.\n\nSee Also\nPeer Methods\nvar displayName: String\nThe display name for this peer."
  },
  {
    "title": "kMCSessionMinimumNumberOfPeers",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/kmcsessionminimumnumberofpeers",
    "html": "See Also\nConstants\nlet MCErrorDomain: String\nThe NSError domain constant. If the domain value for an NSError object is equal to MCErrorDomain, then the error was produced by the Multipeer Connectivity framework itself, as opposed to a lower-level framework on which it depends.\nlet kMCSessionMaximumNumberOfPeers: Int\nThe maximum number of peers that a session can support, including the local peer."
  },
  {
    "title": "advertiserAssistantWillPresentInvitation(_:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistantdelegate/advertiserassistantwillpresentinvitation(_:)",
    "html": "Parameters\nadvertiserAssistant\n\nThe advertiser assistant that is about to present an invitation to the user.\n\nDiscussion\n\nThis call is intended to allow your app to prepare for an invitation that will be presented to the user. For example, your app might stop performing computationally intensive UI updates for views that will be hidden by the invitation.\n\nSee Also\nAdvertiser Assistant Delegate Methods\nfunc advertiserAssistantDidDismissInvitation(MCAdvertiserAssistant)\nIndicates that the advertiser assistant finished showing the invitation to the user."
  },
  {
    "title": "init(peer:serviceType:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyservicebrowser/init(peer:servicetype:)",
    "html": "Parameters\nmyPeerID\n\nThe local peer ID for this instance.\n\nserviceType\n\nThe type of service to search for. This should be a short text string that describes the app’s networking protocol, in the same format as a Bonjour service type (without the transport protocol) and meeting the restrictions of RFC 6335 (section 5.1) governing Service Name Syntax. In particular, the string:\n\nMust be 1–15 characters long\n\nCan contain only ASCII lowercase letters, numbers, and hyphens\n\nMust contain at least one ASCII letter\n\nMust not begin or end with a hyphen\n\nMust not contain hyphens adjacent to other hyphens.\n\nThis name should be easily distinguished from unrelated services. For example, a text chat app made by ABC company could use the service type abc-txtchat.\n\nFor more details, read Domain Naming Conventions.\n\nReturn Value\n\nReturns an initialized nearby service browser object, or nil if an error occurs.\n\nDiscussion\n\nThis method throws an exception if the session or serviceType parameters do not contain valid objects or the specified Bonjour service type is not valid.\n\nSee Also\nInitializing the Browser\nvar delegate: (any MCNearbyServiceBrowserDelegate)?\nThe delegate object that handles browser-related events.\nvar myPeerID: MCPeerID\nThe local peer ID for this instance.\nvar serviceType: String\nThe service type to browse for."
  },
  {
    "title": "delegate",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyservicebrowser/delegate",
    "html": "See Also\nInitializing the Browser\ninit(peer: MCPeerID, serviceType: String)\nInitializes the nearby service browser object.\nvar myPeerID: MCPeerID\nThe local peer ID for this instance.\nvar serviceType: String\nThe service type to browse for."
  },
  {
    "title": "serviceType",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiser/servicetype",
    "html": "Discussion\n\nThis value is set when you initialize the object, and cannot be changed later.\n\nSee Also\nConfiguring and Initialization\ninit(peer: MCPeerID, discoveryInfo: [String : String]?, serviceType: String)\nInitializes an advertiser object.\nvar delegate: (any MCNearbyServiceAdvertiserDelegate)?\nThe delegate object that handles advertising-related events.\nvar discoveryInfo: [String : String]?\nThe info dictionary passed when this object was initialized.\nvar myPeerID: MCPeerID\nThe local peer ID for this instance."
  },
  {
    "title": "myPeerID",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyservicebrowser/mypeerid",
    "html": "Discussion\n\nThis value is set when you initialize the object, and cannot be changed later.\n\nSee Also\nInitializing the Browser\ninit(peer: MCPeerID, serviceType: String)\nInitializes the nearby service browser object.\nvar delegate: (any MCNearbyServiceBrowserDelegate)?\nThe delegate object that handles browser-related events.\nvar serviceType: String\nThe service type to browse for."
  },
  {
    "title": "startAdvertisingPeer()",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiser/startadvertisingpeer()",
    "html": "See Also\nStarting and Stopping Advertisement\nfunc stopAdvertisingPeer()\nStops advertising the service provided by a local peer."
  },
  {
    "title": "unknown",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/unknown",
    "html": "See Also\nType Properties\nstatic var cancelled: MCError.Code\nstatic var errorDomain: String\nThe domain of the error.\nstatic var invalidParameter: MCError.Code\nstatic var notConnected: MCError.Code\nstatic var timedOut: MCError.Code\nstatic var unavailable: MCError.Code\nstatic var unsupported: MCError.Code"
  },
  {
    "title": "unavailable",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/unavailable",
    "html": "See Also\nType Properties\nstatic var cancelled: MCError.Code\nstatic var errorDomain: String\nThe domain of the error.\nstatic var invalidParameter: MCError.Code\nstatic var notConnected: MCError.Code\nstatic var timedOut: MCError.Code\nstatic var unknown: MCError.Code\nstatic var unsupported: MCError.Code"
  },
  {
    "title": "unsupported",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/unsupported",
    "html": "See Also\nType Properties\nstatic var cancelled: MCError.Code\nstatic var errorDomain: String\nThe domain of the error.\nstatic var invalidParameter: MCError.Code\nstatic var notConnected: MCError.Code\nstatic var timedOut: MCError.Code\nstatic var unavailable: MCError.Code\nstatic var unknown: MCError.Code"
  },
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.\n\nSee Also\nOperator Functions\nstatic func == (MCError, MCError) -> Bool"
  },
  {
    "title": "notConnected",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror/notconnected",
    "html": "See Also\nType Properties\nstatic var cancelled: MCError.Code\nstatic var errorDomain: String\nThe domain of the error.\nstatic var invalidParameter: MCError.Code\nstatic var timedOut: MCError.Code\nstatic var unavailable: MCError.Code\nstatic var unknown: MCError.Code\nstatic var unsupported: MCError.Code"
  },
  {
    "title": "browser",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontroller/browser",
    "html": "Discussion\n\nThis value is set when you initialize the object, and cannot be changed later.\n\nSee Also\nInitializing a Browser View Controller\nconvenience init(serviceType: String, session: MCSession)\nInitializes a browser view controller using the provided service type and session.\ninit(browser: MCNearbyServiceBrowser, session: MCSession)\nInitializes a browser view controller with the provided browser and session.\nvar delegate: (any MCBrowserViewControllerDelegate)?\nThe delegate object that handles browser-view-controller-related events.\nvar session: MCSession\nThe multipeer session to which the invited peers are connected."
  },
  {
    "title": "delegate",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontroller/delegate",
    "html": "Discussion\n\nA browser view controller notifies the delegate:\n\nWhen the user presses the “Done” button, which is enabled when the specified minimum number of peers are connected in a session.\n\nWhen the user cancels the view controller.\n\nAlso, as new peers are discovered, the delegate can choose whether to present them in the user interface.\n\nSee Also\nInitializing a Browser View Controller\nconvenience init(serviceType: String, session: MCSession)\nInitializes a browser view controller using the provided service type and session.\ninit(browser: MCNearbyServiceBrowser, session: MCSession)\nInitializes a browser view controller with the provided browser and session.\nvar browser: MCNearbyServiceBrowser?\nThe browser object that is used for discovering peers.\nvar session: MCSession\nThe multipeer session to which the invited peers are connected."
  },
  {
    "title": "init(serviceType:session:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontroller/init(servicetype:session:)",
    "html": "Parameters\nserviceType\n\nThe type of service to search for. This should be a short text string that describes the app’s networking protocol, in the same format as a Bonjour service type (without the transport protocol) and meeting the restrictions of RFC 6335 (section 5.1) governing Service Name Syntax. In particular, the string:\n\nMust be 1–15 characters long\n\nCan contain only ASCII lowercase letters, numbers, and hyphens\n\nMust contain at least one ASCII letter\n\nMust not begin or end with a hyphen\n\nMust not contain hyphens adjacent to other hyphens.\n\nThis name should be easily distinguished from unrelated services. For example, a text chat app made by ABC company could use the service type abc-txtchat.\n\nFor more details, read Domain Naming Conventions.\n\nsession\n\nThe multipeer session that any user-chosen peers should be invited to join.\n\nReturn Value\n\nReturns an initialized object, or nil if an error occurred.\n\nDiscussion\n\nThis method throws an exception if the session or serviceType parameters do not contain valid objects or the specified Bonjour service type is not valid.\n\nSee Also\nInitializing a Browser View Controller\ninit(browser: MCNearbyServiceBrowser, session: MCSession)\nInitializes a browser view controller with the provided browser and session.\nvar delegate: (any MCBrowserViewControllerDelegate)?\nThe delegate object that handles browser-view-controller-related events.\nvar browser: MCNearbyServiceBrowser?\nThe browser object that is used for discovering peers.\nvar session: MCSession\nThe multipeer session to which the invited peers are connected."
  },
  {
    "title": "MultipeerConnectivity Enumerations",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/multipeerconnectivity_enumerations",
    "html": "Topics\nEnumerations\nenum MCEncryptionPreference\nIndicates whether a session should use encryption when communicating with nearby peers.\nenum Code\nError codes found in MCErrorDomain error domain NSError objects returned by methods in the Multipeer Connectivity framework.\nenum MCSessionSendDataMode\nIndicates whether delivery of data should be guaranteed.\nenum MCSessionState\nIndicates the current state of a given peer within a session.\nSee Also\nReference\nMultipeerConnectivity Constants"
  },
  {
    "title": "session(_:peer:didChange:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate/1406958-session",
    "html": "Required\n\nParameters\nsession\n\nThe session that manages the nearby peer whose state changed.\n\npeerID\n\nThe ID of the nearby peer whose state changed.\n\nstate\n\nThe new state of the nearby peer.\n\nDiscussion\n\nThis delegate method is called with the following state values when the nearby peer’s state changes:\n\nMCSessionState.connected—the nearby peer accepted the invitation and is now connected to the session.\n\nMCSessionState.notConnected—the nearby peer declined the invitation, the connection could not be established, or a previously connected peer is no longer connected.\n\nSee Also\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established."
  },
  {
    "title": "advertiser(_:didNotStartAdvertisingPeer:)",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiserdelegate/advertiser(_:didnotstartadvertisingpeer:)",
    "html": "Required\n\nParameters\nadvertiser\n\nThe advertiser object that failed to begin advertising.\n\nerror\n\nAn error object that indicates what went wrong."
  },
  {
    "title": "MCEncryptionPreference",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcencryptionpreference",
    "html": "Topics\nConstants\ncase optional\nThe session prefers to use encryption, but accepts unencrypted connections. A connection uses encryption when all the peers choose either MCEncryptionPreference.optional or MCEncryptionPreference.required. If some peers choose MCEncryptionPreference.none, then the session will not be encrypted. For this reason, if some peers running your app can be configured without encryption, you should always assume that the session is unencrypted.\ncase required\nThe session requires encryption.\ncase none\nThe session should not be encrypted.\nInitializers\ninit?(rawValue: Int)\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSendable\nSee Also\nConstants\nenum MCSessionSendDataMode\nIndicates whether delivery of data should be guaranteed.\nenum MCSessionState\nIndicates the current state of a given peer within a session.\nenum Code\nError codes found in MCErrorDomain error domain NSError objects returned by methods in the Multipeer Connectivity framework.\nMultipeer Connectivity Error Domain\nThe error domain for errors specific to Multipeer Connectivity.\nMinimum and Maximum Supported Peers\nConstants that define the minimum and maximum number of peers supported in a session."
  },
  {
    "title": "MCAdvertiserAssistant",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistant",
    "html": "Overview\n\nBefore you can advertise a service, you must create an MCPeerID object that identifies your app and the user to nearby devices.\n\nTopics\nInitializing and Configuring\ninit(serviceType: String, discoveryInfo: [String : String]?, session: MCSession)\nInitializes an advertiser assistant object.\nvar session: MCSession\nThe session into which new peers are added after accepting an invitation.\nvar delegate: (any MCAdvertiserAssistantDelegate)?\nThe delegate object that handles advertising-assistant-related events.\nvar discoveryInfo: [String : String]?\nThe info dictionary that was passed when this object was initialized.\nvar serviceType: String\nThe service type that your app is advertising.\nStarting and Stopping the Assistant\nfunc start()\nBegins advertising the service provided by a local peer and starts the assistant.\nfunc stop()\nStops advertising the service provided by a local peer and stops the assistant.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nClasses\nclass MCBrowserViewController\nThe MCBrowserViewController class presents nearby devices to the user and enables the user to invite nearby devices to a session. To use this class in iOS or tvOS, call methods from the underlying UIViewController class (prepare(for:sender:) and performSegue(withIdentifier:sender:) for storyboards or present(_:animated:completion:) and dismiss(animated:completion:) for nib-based views) to present and dismiss the view controller. In macOS, use the comparable NSViewController methods presentAsSheet(_:) and dismiss(_:) instead.\nclass MCNearbyServiceAdvertiser\nThe MCNearbyServiceAdvertiser class publishes an advertisement for a specific service that your app provides through the Multipeer Connectivity framework and notifies its delegate about invitations from nearby peers.\nclass MCNearbyServiceBrowser\nSearches (by service type) for services offered by nearby devices using infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Bluetooth (in iOS) or Ethernet (in macOS and tvOS), and provides the ability to easily invite those devices to a Multipeer Connectivity session (MCSession).\nclass MCPeerID\nAn MCPeerID object represents a peer in a multipeer session.\nclass MCSession\nAn MCSession object enables and manages communication among all peers in a Multipeer Connectivity session."
  },
  {
    "title": "MultipeerConnectivity Constants",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/multipeerconnectivity_constants",
    "html": "Topics\nConstants\nlet MCErrorDomain: String\nThe NSError domain constant. If the domain value for an NSError object is equal to MCErrorDomain, then the error was produced by the Multipeer Connectivity framework itself, as opposed to a lower-level framework on which it depends.\nlet kMCSessionMaximumNumberOfPeers: Int\nThe maximum number of peers that a session can support, including the local peer.\nlet kMCSessionMinimumNumberOfPeers: Int\nThe minimum number of peers that a session can support, including the local peer.\nSee Also\nReference\nMultipeerConnectivity Enumerations"
  },
  {
    "title": "MCError",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcerror",
    "html": "Topics\nInitializers\ninit(Code, userInfo: [String : Any])\nInstance Properties\nvar code: Code\nvar errorCode: Int\nvar errorUserInfo: [String : Any]\nvar hashValue: Int\nvar localizedDescription: String\nRetrieve the localized description for this error.\nvar userInfo: [String : Any]\nType Properties\nstatic var cancelled: MCError.Code\nstatic var errorDomain: String\nThe domain of the error.\nstatic var invalidParameter: MCError.Code\nstatic var notConnected: MCError.Code\nstatic var timedOut: MCError.Code\nstatic var unavailable: MCError.Code\nstatic var unknown: MCError.Code\nstatic var unsupported: MCError.Code\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (MCError, MCError) -> Bool\nEnumerations\nenum Code\nError codes found in MCErrorDomain error domain NSError objects returned by methods in the Multipeer Connectivity framework.\nDefault Implementations\nCustomNSError Implementations\nEquatable Implementations\nError Implementations\nRelationships\nConforms To\nCustomNSError\nEquatable\nError\nHashable\nSendable"
  },
  {
    "title": "maximumNumberOfPeers",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontroller/maximumnumberofpeers",
    "html": "Discussion\n\nThe largest allowable value (and the default) is 8.\n\nSee Also\nGetting and Setting the Maximum and Minimum Number of Peers\nvar minimumNumberOfPeers: Int\nThe minimum number of peers that need to be in a session, including the local peer."
  },
  {
    "title": "MCSessionDelegate",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsessiondelegate",
    "html": "Overview\n\nDelegate calls occur on a private serial queue. If your app needs to perform an action on a particular run loop or operation queue, its delegate method should explicitly dispatch or schedule that work.\n\nTopics\nMCSession Delegate Methods\nfunc session(MCSession, didReceive: Data, fromPeer: MCPeerID)\nIndicates that an NSData object has been received from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didStartReceivingResourceWithName: String, fromPeer: MCPeerID, with: Progress)\nIndicates that the local peer began receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didFinishReceivingResourceWithName: String, fromPeer: MCPeerID, at: URL?, withError: (any Error)?)\nIndicates that the local peer finished receiving a resource from a nearby peer.\n\nRequired\n\nfunc session(MCSession, didReceive: InputStream, withName: String, fromPeer: MCPeerID)\nCalled when a nearby peer opens a byte stream connection to the local peer.\n\nRequired\n\nfunc session(MCSession, peer: MCPeerID, didChange: MCSessionState)\nCalled when the state of a nearby peer changes.\n\nRequired\n\nfunc session(MCSession, didReceiveCertificate: [Any]?, fromPeer: MCPeerID, certificateHandler: (Bool) -> Void)\nCalled to validate the client certificate provided by a peer when the connection is first established.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nProtocols\nprotocol MCAdvertiserAssistantDelegate\nThe MCAdvertiserAssistantDelegate protocol describes the methods that the delegate object for an MCAdvertiserAssistant instance can implement to handle advertising-related events.\nprotocol MCBrowserViewControllerDelegate\nThe MCBrowserViewControllerDelegate protocol defines the methods that your delegate object can implement to handle events related to the MCBrowserViewController class.\nprotocol MCNearbyServiceAdvertiserDelegate\nThe MCNearbyServiceAdvertiserDelegate protocol describes the methods that the delegate object for an MCNearbyServiceAdvertiser instance can implement for handling events from the MCNearbyServiceAdvertiser class.\nprotocol MCNearbyServiceBrowserDelegate\nThe MCNearbyServiceBrowserDelegate protocol defines methods that a MCNearbyServiceBrowser object’s delegate can implement to handle browser-related events."
  },
  {
    "title": "MCNearbyServiceAdvertiserDelegate",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiserdelegate",
    "html": "Overview\n\nNo assumption should be made about which queue the delegate methods are called on. It is the receiver’s responsibility to ensure that any UIKit updates are called on the main thread.\n\nTopics\nError Handling Delegate Methods\nfunc advertiser(MCNearbyServiceAdvertiser, didNotStartAdvertisingPeer: any Error)\nCalled when advertisement fails.\n\nRequired\n\nInvitation Handling Delegate Methods\nfunc advertiser(MCNearbyServiceAdvertiser, didReceiveInvitationFromPeer: MCPeerID, withContext: Data?, invitationHandler: (Bool, MCSession?) -> Void)\nCalled when an invitation to join a session is received from a nearby peer.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nProtocols\nprotocol MCAdvertiserAssistantDelegate\nThe MCAdvertiserAssistantDelegate protocol describes the methods that the delegate object for an MCAdvertiserAssistant instance can implement to handle advertising-related events.\nprotocol MCBrowserViewControllerDelegate\nThe MCBrowserViewControllerDelegate protocol defines the methods that your delegate object can implement to handle events related to the MCBrowserViewController class.\nprotocol MCNearbyServiceBrowserDelegate\nThe MCNearbyServiceBrowserDelegate protocol defines methods that a MCNearbyServiceBrowser object’s delegate can implement to handle browser-related events.\nprotocol MCSessionDelegate\nThe MCSessionDelegate protocol defines methods that a delegate of the MCSession class can implement to handle session-related events. For more information, see MCSession."
  },
  {
    "title": "MCBrowserViewControllerDelegate",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontrollerdelegate",
    "html": "Overview\n\nNo assumption should be made about which queue the delegate methods are called on. It is the receiver’s responsibility to ensure that any UIKit-related updates are called on the main thread.\n\nTopics\nPeer Notifications\nfunc browserViewController(MCBrowserViewController, shouldPresentNearbyPeer: MCPeerID, withDiscoveryInfo: [String : String]?) -> Bool\nCalled when a new peer is discovered to decide whether to show it in the user interface.\n\nRequired\n\nUser Action Notifications\nfunc browserViewControllerDidFinish(MCBrowserViewController)\nCalled when the browser view controller is dismissed with peers connected in a session.\n\nRequired\n\nfunc browserViewControllerWasCancelled(MCBrowserViewController)\nCalled when the user cancels the browser view controller.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nProtocols\nprotocol MCAdvertiserAssistantDelegate\nThe MCAdvertiserAssistantDelegate protocol describes the methods that the delegate object for an MCAdvertiserAssistant instance can implement to handle advertising-related events.\nprotocol MCNearbyServiceAdvertiserDelegate\nThe MCNearbyServiceAdvertiserDelegate protocol describes the methods that the delegate object for an MCNearbyServiceAdvertiser instance can implement for handling events from the MCNearbyServiceAdvertiser class.\nprotocol MCNearbyServiceBrowserDelegate\nThe MCNearbyServiceBrowserDelegate protocol defines methods that a MCNearbyServiceBrowser object’s delegate can implement to handle browser-related events.\nprotocol MCSessionDelegate\nThe MCSessionDelegate protocol defines methods that a delegate of the MCSession class can implement to handle session-related events. For more information, see MCSession."
  },
  {
    "title": "MCSession",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcsession",
    "html": "Initiating a Session\n\nTo set up a session:\n\nUse the init(displayName:) method of the MCPeerID to create a peer ID that represents the local peer, or retrieve a peer ID that you previously archived (to maintain a stable peer ID over time).\n\nUse the peer ID with the method init(peer:) to initialize the session object.\n\nInvite peers to join the session using an MCNearbyServiceBrowser object, an MCBrowserViewController object, or your own peer discovery code. (Sessions currently support up to 8 peers, including the local peer.)\n\nSet up an MCNearbyServiceAdvertiser object or MCAdvertiserAssistant object to allow other devices to ask your app to join a session that they create.\n\nIf you use one of the framework’s browser objects for peer discovery, when a peer accepts an invitation, the session calls its delegate object’s session(_:peer:didChange:) method with MCSessionState.connected as the new state, along with an object that tells you which peer became connected. See Creating a Session for related methods.\n\nIf instead you write your own peer discovery code, you are responsible for managing the connection manually. See the Managing Peers Manually section for more information.\n\nCommunicating with Peers\n\nOnce you have set up the session, your app can send data to other peers by calling one of the following methods, found in Sending Data and Resources:\n\nsend(_:toPeers:with:) sends an NSData object to the specified peers.\n\nOn each recipient device, the delegate object’s session(_:didReceive:fromPeer:) method is called with the data object when the data has been fully received.\n\nsendResource(at:withName:toPeer:withCompletionHandler:) sends the contents from an NSURL object to the specified peer. The URL can be either a local file URL or a web URL. The completionHandler block is called when the resource is fully received by the recipient peer or when an error occurs during transmission.\n\nThis method returns an NSProgress object that you can use to cancel the transfer or check the current status of the transfer.\n\nOn the recipient device, the session calls its delegate object’s session(_:didStartReceivingResourceWithName:fromPeer:with:) method when the device begins receiving the resource, and calls its session(_:didFinishReceivingResourceWithName:fromPeer:at:withError:) method when the resource has been fully received or when an error occurs.\n\nstartStream(withName:toPeer:) creates a connected byte stream (NSOutputStream) that you can use to send data to the specified peer.\n\nOn the recipient device, the session calls its delegate object’s session(_:didReceive:withName:fromPeer:) method with an NSInputStream object that represents the other endpoint of communication.\n\nOn both sides, your code must set the stream’s delegate, schedule the stream on a run loop, and open the stream. Your code must also implement stream delegate methods to manage sending and receiving stream data.\n\nImportant\n\nDelegate calls occur on a private operation queue. If your app needs to perform an action on a particular run loop or operation queue, its delegate method should explicitly dispatch or schedule that work.\n\nManaging Peers Manually\n\nIf instead of using the framework’s browser and advertiser objects to perform peer discovery, you decide to write your own peer discovery code (with NSNetService or the Bonjour C API, for example), you can manually connect nearby peers into a session. To do this:\n\nEstablish a connection from your app to nearby peers, and exchange peer IDs with those peers.\n\nEach peer should serialize its own local MCPeerID object with NSKeyedArchiver, and the receiving peer should unserialize it with NSKeyedUnarchiver.\n\nImportant\n\nDo not attempt to construct a peer ID object for a nonlocal peer using init(displayName:). A peer ID object must be constructed on the device that it represents.\n\nExchange connection data. After you have obtained the nearby peer’s ID object, call nearbyConnectionData(forPeer:withCompletionHandler:) to obtain a connection data object specific to that nearby peer.\n\nWhen the completion handler block is called, send the resulting connection data object to that peer.\n\nNote\n\nEach device in the session must perform this step for each nonlocal peer in the session. So if there are four devices in the session, each device must generate a connection data object for each of the other three devices.\n\nWhen your app receives connection data from another peer, it must call connectPeer(_:withNearbyConnectionData:) to add that peer to the session.\n\nNote\n\nEach of the nonlocal peers must also call connectPeer(_:withNearbyConnectionData:) with the connection data that it received from your app and other nonlocal peers.\n\nYou can also cancel an outstanding connection attempt by calling cancelConnectPeer(_:). These methods are described in the Managing Peers Manually group.\n\nDisconnecting\n\nTo leave a session, your app must call disconnect(). For more details, see Leaving a Session.\n\nTopics\nCreating a Session\nconvenience init(peer: MCPeerID)\nCreates a Multipeer Connectivity session.\ninit(peer: MCPeerID, securityIdentity: [Any]?, encryptionPreference: MCEncryptionPreference)\nCreates a Multipeer Connectivity session, providing security information.\nvar delegate: (any MCSessionDelegate)?\nThe delegate object that handles session-related events.\nvar encryptionPreference: MCEncryptionPreference\nA value indicating whether the connection prefers encrypted connections, unencrypted connections, or has no preference.\nvar myPeerID: MCPeerID\nA local identifier that represents the device on which your app is currently running.\nvar securityIdentity: [Any]?\nThe security identity of the local peer.\nManaging Peers Manually\nfunc connectPeer(MCPeerID, withNearbyConnectionData: Data)\nCall this method to connect a peer to the session when using your own service discovery code instead of an MCNearbyServiceBrowser or MCBrowserViewController object.\nfunc cancelConnectPeer(MCPeerID)\nCancels an attempt to connect to a peer.\nvar connectedPeers: [MCPeerID]\nAn array of all peers that are currently connected to this session.\nfunc nearbyConnectionData(forPeer: MCPeerID, withCompletionHandler: (Data?, (any Error)?) -> Void)\nObtains connection data for the specified peer.\nSending Data and Resources\nfunc send(Data, toPeers: [MCPeerID], with: MCSessionSendDataMode) throws\nSends a message to nearby peers.\nfunc sendResource(at: URL, withName: String, toPeer: MCPeerID, withCompletionHandler: (((any Error)?) -> Void)?) -> Progress?\nSends the contents of a URL to a peer.\nfunc startStream(withName: String, toPeer: MCPeerID) throws -> OutputStream\nOpens a byte stream to a nearby peer.\nLeaving a Session\nfunc disconnect()\nDisconnects the local peer from the session.\nConstants\nenum MCSessionSendDataMode\nIndicates whether delivery of data should be guaranteed.\nenum MCSessionState\nIndicates the current state of a given peer within a session.\nenum MCEncryptionPreference\nIndicates whether a session should use encryption when communicating with nearby peers.\nenum Code\nError codes found in MCErrorDomain error domain NSError objects returned by methods in the Multipeer Connectivity framework.\nMultipeer Connectivity Error Domain\nThe error domain for errors specific to Multipeer Connectivity.\nMinimum and Maximum Supported Peers\nConstants that define the minimum and maximum number of peers supported in a session.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nClasses\nclass MCAdvertiserAssistant\nThe MCAdvertiserAssistant is a convenience class that handles advertising, presents incoming invitations to the user, and handles users’ responses. Use this class to provide a user interface for handling invitations when your app does not require programmatic control over the invitation process.\nclass MCBrowserViewController\nThe MCBrowserViewController class presents nearby devices to the user and enables the user to invite nearby devices to a session. To use this class in iOS or tvOS, call methods from the underlying UIViewController class (prepare(for:sender:) and performSegue(withIdentifier:sender:) for storyboards or present(_:animated:completion:) and dismiss(animated:completion:) for nib-based views) to present and dismiss the view controller. In macOS, use the comparable NSViewController methods presentAsSheet(_:) and dismiss(_:) instead.\nclass MCNearbyServiceAdvertiser\nThe MCNearbyServiceAdvertiser class publishes an advertisement for a specific service that your app provides through the Multipeer Connectivity framework and notifies its delegate about invitations from nearby peers.\nclass MCNearbyServiceBrowser\nSearches (by service type) for services offered by nearby devices using infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Bluetooth (in iOS) or Ethernet (in macOS and tvOS), and provides the ability to easily invite those devices to a Multipeer Connectivity session (MCSession).\nclass MCPeerID\nAn MCPeerID object represents a peer in a multipeer session."
  },
  {
    "title": "MCAdvertiserAssistantDelegate",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcadvertiserassistantdelegate",
    "html": "Overview\n\nNo assumption should be made about which queue the delegate methods are called on. It is the delegate’s responsibility to ensure that any UIKit-related updates are called on the main thread.\n\nTopics\nAdvertiser Assistant Delegate Methods\nfunc advertiserAssistantWillPresentInvitation(MCAdvertiserAssistant)\nIndicates that the advertiser assistant is about to present an invitation to the user.\nfunc advertiserAssistantDidDismissInvitation(MCAdvertiserAssistant)\nIndicates that the advertiser assistant finished showing the invitation to the user.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nProtocols\nprotocol MCBrowserViewControllerDelegate\nThe MCBrowserViewControllerDelegate protocol defines the methods that your delegate object can implement to handle events related to the MCBrowserViewController class.\nprotocol MCNearbyServiceAdvertiserDelegate\nThe MCNearbyServiceAdvertiserDelegate protocol describes the methods that the delegate object for an MCNearbyServiceAdvertiser instance can implement for handling events from the MCNearbyServiceAdvertiser class.\nprotocol MCNearbyServiceBrowserDelegate\nThe MCNearbyServiceBrowserDelegate protocol defines methods that a MCNearbyServiceBrowser object’s delegate can implement to handle browser-related events.\nprotocol MCSessionDelegate\nThe MCSessionDelegate protocol defines methods that a delegate of the MCSession class can implement to handle session-related events. For more information, see MCSession."
  },
  {
    "title": "MCPeerID",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcpeerid",
    "html": "Overview\n\nYou create a single peer ID object that represents the instance of your app running on the local device. The Multipeer Connectivity framework is responsible for creating peer ID objects that represent other devices.\n\nTo create a new peer ID for the local app and associate a display name with that ID, call init(displayName:). The peer’s name must be no longer than 63 bytes in UTF-8 encoding.\n\nEach peer ID your app creates with init(displayName:) is unique, even when supplying the same display name. If you want a device’s peer ID to be stable over time, don’t create a new peer ID every time your app begins advertising or browsing. Instead, archive the ID when you create it, and then unarchive it the next time you need it. If you need the peer ID to be tied to the display name, you can archive the name as well, and only create a new peer ID when the name changes, as illustrated in the following code fragment:\n\nNSString *displayName = <#Get a name#>;\n \nNSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\nNSString *oldDisplayName = [defaults stringForKey:kDisplayNameKey];\nMCPeerID *peerID;\n \nif ([oldDisplayName isEqualToString:displayName]) {\n    NSData *peerIDData = [defaults dataForKey:kPeerIDKey];\n    peerID = [NSKeyedUnarchiver unarchiveObjectWithData:peerIDData];\n} else {\n    peerID = [[MCPeerID alloc] initWithDisplayName:displayName];\n    NSData *peerIDData = [NSKeyedArchiver archivedDataWithRootObject:peerID];\n    [defaults setObject:peerIDData forKey:kPeerIDKey];\n    [defaults setObject:displayName forKey:kDisplayNameKey];\n    [defaults synchronize];\n}\n\nTopics\nPeer Methods\ninit(displayName: String)\nInitializes a peer.\nvar displayName: String\nThe display name for this peer.\nInitializers\ninit?(coder: NSCoder)\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCoding\nNSCopying\nNSObjectProtocol\nNSSecureCoding\nSynchronizationPeerID\nSee Also\nClasses\nclass MCAdvertiserAssistant\nThe MCAdvertiserAssistant is a convenience class that handles advertising, presents incoming invitations to the user, and handles users’ responses. Use this class to provide a user interface for handling invitations when your app does not require programmatic control over the invitation process.\nclass MCBrowserViewController\nThe MCBrowserViewController class presents nearby devices to the user and enables the user to invite nearby devices to a session. To use this class in iOS or tvOS, call methods from the underlying UIViewController class (prepare(for:sender:) and performSegue(withIdentifier:sender:) for storyboards or present(_:animated:completion:) and dismiss(animated:completion:) for nib-based views) to present and dismiss the view controller. In macOS, use the comparable NSViewController methods presentAsSheet(_:) and dismiss(_:) instead.\nclass MCNearbyServiceAdvertiser\nThe MCNearbyServiceAdvertiser class publishes an advertisement for a specific service that your app provides through the Multipeer Connectivity framework and notifies its delegate about invitations from nearby peers.\nclass MCNearbyServiceBrowser\nSearches (by service type) for services offered by nearby devices using infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Bluetooth (in iOS) or Ethernet (in macOS and tvOS), and provides the ability to easily invite those devices to a Multipeer Connectivity session (MCSession).\nclass MCSession\nAn MCSession object enables and manages communication among all peers in a Multipeer Connectivity session."
  },
  {
    "title": "MCNearbyServiceBrowser",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyservicebrowser",
    "html": "Topics\nInitializing the Browser\ninit(peer: MCPeerID, serviceType: String)\nInitializes the nearby service browser object.\nvar delegate: (any MCNearbyServiceBrowserDelegate)?\nThe delegate object that handles browser-related events.\nvar myPeerID: MCPeerID\nThe local peer ID for this instance.\nvar serviceType: String\nThe service type to browse for.\nBrowsing for Peers\nfunc startBrowsingForPeers()\nStarts browsing for peers.\nfunc stopBrowsingForPeers()\nStops browsing for peers.\nInviting Peers\nfunc invitePeer(MCPeerID, to: MCSession, withContext: Data?, timeout: TimeInterval)\nInvites a discovered peer to join a Multipeer Connectivity session.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nClasses\nclass MCAdvertiserAssistant\nThe MCAdvertiserAssistant is a convenience class that handles advertising, presents incoming invitations to the user, and handles users’ responses. Use this class to provide a user interface for handling invitations when your app does not require programmatic control over the invitation process.\nclass MCBrowserViewController\nThe MCBrowserViewController class presents nearby devices to the user and enables the user to invite nearby devices to a session. To use this class in iOS or tvOS, call methods from the underlying UIViewController class (prepare(for:sender:) and performSegue(withIdentifier:sender:) for storyboards or present(_:animated:completion:) and dismiss(animated:completion:) for nib-based views) to present and dismiss the view controller. In macOS, use the comparable NSViewController methods presentAsSheet(_:) and dismiss(_:) instead.\nclass MCNearbyServiceAdvertiser\nThe MCNearbyServiceAdvertiser class publishes an advertisement for a specific service that your app provides through the Multipeer Connectivity framework and notifies its delegate about invitations from nearby peers.\nclass MCPeerID\nAn MCPeerID object represents a peer in a multipeer session.\nclass MCSession\nAn MCSession object enables and manages communication among all peers in a Multipeer Connectivity session."
  },
  {
    "title": "MCNearbyServiceAdvertiser",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcnearbyserviceadvertiser",
    "html": "Overview\n\nBefore you can advertise a service, you must create an MCPeerID object that identifies your app and the user to nearby devices.\n\nThe serviceType parameter is a short text string used to describe the app’s networking protocol. It should be in the same format as a Bonjour service type: 1–15 characters long and valid characters include ASCII lowercase letters, numbers, and the hyphen, containing at least one letter and no adjacent hyphens. A short name that distinguishes itself from unrelated services is recommended; for example, a text chat app made by ABC company could use the service type \"abc-txtchat\". For more information about service types, read Domain Naming Conventions.\n\nThe discoveryInfo parameter is a dictionary of string key/value pairs that will be advertised for browsers to see. The content of discoveryInfo will be advertised within Bonjour TXT records, so you should keep the dictionary small for better discovery performance.\n\nFor more information about TXT records, read Bonjour Operations.\n\nTopics\nConfiguring and Initialization\ninit(peer: MCPeerID, discoveryInfo: [String : String]?, serviceType: String)\nInitializes an advertiser object.\nvar delegate: (any MCNearbyServiceAdvertiserDelegate)?\nThe delegate object that handles advertising-related events.\nvar discoveryInfo: [String : String]?\nThe info dictionary passed when this object was initialized.\nvar myPeerID: MCPeerID\nThe local peer ID for this instance.\nvar serviceType: String\nThe service type that your app is advertising\nStarting and Stopping Advertisement\nfunc startAdvertisingPeer()\nBegins advertising the service provided by a local peer.\nfunc stopAdvertisingPeer()\nStops advertising the service provided by a local peer.\nRelationships\nInherits From\nNSObject\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSObjectProtocol\nSee Also\nClasses\nclass MCAdvertiserAssistant\nThe MCAdvertiserAssistant is a convenience class that handles advertising, presents incoming invitations to the user, and handles users’ responses. Use this class to provide a user interface for handling invitations when your app does not require programmatic control over the invitation process.\nclass MCBrowserViewController\nThe MCBrowserViewController class presents nearby devices to the user and enables the user to invite nearby devices to a session. To use this class in iOS or tvOS, call methods from the underlying UIViewController class (prepare(for:sender:) and performSegue(withIdentifier:sender:) for storyboards or present(_:animated:completion:) and dismiss(animated:completion:) for nib-based views) to present and dismiss the view controller. In macOS, use the comparable NSViewController methods presentAsSheet(_:) and dismiss(_:) instead.\nclass MCNearbyServiceBrowser\nSearches (by service type) for services offered by nearby devices using infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Bluetooth (in iOS) or Ethernet (in macOS and tvOS), and provides the ability to easily invite those devices to a Multipeer Connectivity session (MCSession).\nclass MCPeerID\nAn MCPeerID object represents a peer in a multipeer session.\nclass MCSession\nAn MCSession object enables and manages communication among all peers in a Multipeer Connectivity session."
  },
  {
    "title": "MCBrowserViewController",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity/mcbrowserviewcontroller",
    "html": "Topics\nInitializing a Browser View Controller\nconvenience init(serviceType: String, session: MCSession)\nInitializes a browser view controller using the provided service type and session.\ninit(browser: MCNearbyServiceBrowser, session: MCSession)\nInitializes a browser view controller with the provided browser and session.\nvar delegate: (any MCBrowserViewControllerDelegate)?\nThe delegate object that handles browser-view-controller-related events.\nvar browser: MCNearbyServiceBrowser?\nThe browser object that is used for discovering peers.\nvar session: MCSession\nThe multipeer session to which the invited peers are connected.\nGetting and Setting the Maximum and Minimum Number of Peers\nvar maximumNumberOfPeers: Int\nThe maximum number of peers allowed in a session, including the local peer.\nvar minimumNumberOfPeers: Int\nThe minimum number of peers that need to be in a session, including the local peer.\nRelationships\nInherits From\nNSViewController\nUIViewController\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nMCNearbyServiceBrowserDelegate\nNSCoding\nNSEditor\nNSExtensionRequestHandling\nNSObjectProtocol\nNSSeguePerforming\nNSStandardKeyBindingResponding\nNSTouchBarProvider\nNSUserActivityRestoring\nNSUserInterfaceItemIdentification\nUIActivityItemsConfigurationProviding\nUIAppearanceContainer\nUIContentContainer\nUIFocusEnvironment\nUIPasteConfigurationSupporting\nUIResponderStandardEditActions\nUIStateRestoring\nUITraitChangeObservable\nUITraitEnvironment\nUIUserActivityRestoring\nSee Also\nClasses\nclass MCAdvertiserAssistant\nThe MCAdvertiserAssistant is a convenience class that handles advertising, presents incoming invitations to the user, and handles users’ responses. Use this class to provide a user interface for handling invitations when your app does not require programmatic control over the invitation process.\nclass MCNearbyServiceAdvertiser\nThe MCNearbyServiceAdvertiser class publishes an advertisement for a specific service that your app provides through the Multipeer Connectivity framework and notifies its delegate about invitations from nearby peers.\nclass MCNearbyServiceBrowser\nSearches (by service type) for services offered by nearby devices using infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Bluetooth (in iOS) or Ethernet (in macOS and tvOS), and provides the ability to easily invite those devices to a Multipeer Connectivity session (MCSession).\nclass MCPeerID\nAn MCPeerID object represents a peer in a multipeer session.\nclass MCSession\nAn MCSession object enables and manages communication among all peers in a Multipeer Connectivity session."
  },
  {
    "title": "Multipeer Connectivity",
    "url": "https://developer.apple.com/documentation/multipeerconnectivity",
    "html": "Overview\n\nThe Multipeer Connectivity framework supports the discovery of services provided by nearby devices and supports communicating with those services through message-based data, streaming data, and resources (such as files). In iOS, the framework uses infrastructure Wi-Fi networks, peer-to-peer Wi-Fi, and Bluetooth personal area networks for the underlying transport. In macOS and tvOS, it uses infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Ethernet.\n\nImportant\n\nApps that use the local network must provide a usage string in their Info.plist with the key NSLocalNetworkUsageDescription. Apps that use Bonjour must also declare the services they browse, using the NSBonjourServices key.\n\nArchitecture\n\nWhen working with the Multipeer Connectivity framework, your app must interact with several types of objects:\n\nSession objects (MCSession) support communication between connected peer devices. Your app creates a session and adds peers to it when peers accept an invitation to connect, and it creates a session when invited to connect by another peer. Session objects maintain a set of peer ID objects that represent the peers connected to the session.\n\nAdvertiser objects (MCNearbyServiceAdvertiser) tell nearby peers that your app is willing to join sessions of a specified type. An advertiser object uses a single local peer object to provide information that identifies the device and its user to other nearby devices.\n\nAdvertiser assistant objects (MCAdvertiserAssistant) provide the same functionality as advertiser objects, but also provide a standard user interface that allows the user to accept invitations. If you wish to provide your own user interface, or if you wish to exercise additional programmatic control over which invitations are displayed, use an advertiser object directly.\n\nBrowser objects (MCNearbyServiceBrowser) let your app search programmatically for nearby devices with apps that support sessions of a particular type.\n\nBrowser view controller objects (MCBrowserViewController) provide a standard user interface that allows the user to choose nearby peers to add to a session.\n\nPeer IDs (MCPeerID) uniquely identify an app running on a device to nearby peers.\n\nDiscovery Phase and Session Phase\n\nThis framework is used in two phases: the discovery phase and the session phase.\n\nIn the discovery phase, your app uses an MCNearbyServiceBrowser object to browse for nearby peers, optionally using the MCBrowserViewController object to display a user interface.\n\nThe app also uses an MCNearbyServiceAdvertiser object or an MCAdvertiserAssistant object to tell nearby peers that it is available, so that apps on other nearby devices can invite it to a session.\n\nDuring the discovery phase, your app has limited communication with and knowledge of other peers; it has access to the discoveryInfo data that other nearby clients provide, and any context data that other peers provide when inviting it to join a session.\n\nAfter the user chooses which peers to add to a session, the app invites those peers to join the session. Apps running on the nearby devices can choose whether to accept or reject the invitation, and can ask their users for permission.\n\nIf the peer accepts the invitation, the browser establishes a connection with the advertiser and the session phase begins. In this phase, your app can perform direct communication to one or more peers within the session. The framework notifies your app through delegate callbacks when peers join the session and when they leave the session.\n\nIf the app moves into the background, the framework stops advertising and browsing and disconnects any open sessions. Upon returning to the foreground, the framework automatically resumes advertising and browsing, but the developer must reestablish any closed sessions.\n\nTopics\nClasses\nclass MCAdvertiserAssistant\nThe MCAdvertiserAssistant is a convenience class that handles advertising, presents incoming invitations to the user, and handles users’ responses. Use this class to provide a user interface for handling invitations when your app does not require programmatic control over the invitation process.\nclass MCBrowserViewController\nThe MCBrowserViewController class presents nearby devices to the user and enables the user to invite nearby devices to a session. To use this class in iOS or tvOS, call methods from the underlying UIViewController class (prepare(for:sender:) and performSegue(withIdentifier:sender:) for storyboards or present(_:animated:completion:) and dismiss(animated:completion:) for nib-based views) to present and dismiss the view controller. In macOS, use the comparable NSViewController methods presentAsSheet(_:) and dismiss(_:) instead.\nclass MCNearbyServiceAdvertiser\nThe MCNearbyServiceAdvertiser class publishes an advertisement for a specific service that your app provides through the Multipeer Connectivity framework and notifies its delegate about invitations from nearby peers.\nclass MCNearbyServiceBrowser\nSearches (by service type) for services offered by nearby devices using infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Bluetooth (in iOS) or Ethernet (in macOS and tvOS), and provides the ability to easily invite those devices to a Multipeer Connectivity session (MCSession).\nclass MCPeerID\nAn MCPeerID object represents a peer in a multipeer session.\nclass MCSession\nAn MCSession object enables and manages communication among all peers in a Multipeer Connectivity session.\nProtocols\nprotocol MCAdvertiserAssistantDelegate\nThe MCAdvertiserAssistantDelegate protocol describes the methods that the delegate object for an MCAdvertiserAssistant instance can implement to handle advertising-related events.\nprotocol MCBrowserViewControllerDelegate\nThe MCBrowserViewControllerDelegate protocol defines the methods that your delegate object can implement to handle events related to the MCBrowserViewController class.\nprotocol MCNearbyServiceAdvertiserDelegate\nThe MCNearbyServiceAdvertiserDelegate protocol describes the methods that the delegate object for an MCNearbyServiceAdvertiser instance can implement for handling events from the MCNearbyServiceAdvertiser class.\nprotocol MCNearbyServiceBrowserDelegate\nThe MCNearbyServiceBrowserDelegate protocol defines methods that a MCNearbyServiceBrowser object’s delegate can implement to handle browser-related events.\nprotocol MCSessionDelegate\nThe MCSessionDelegate protocol defines methods that a delegate of the MCSession class can implement to handle session-related events. For more information, see MCSession.\nStructures\nstruct MCError\nReference\nMultipeerConnectivity Enumerations\nMultipeerConnectivity Constants"
  }
]