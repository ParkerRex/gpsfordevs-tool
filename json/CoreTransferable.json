[
  {
    "title": "!=(_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationvisibility/!=(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "exportingCondition(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/datarepresentation/exportingcondition(_:)",
    "html": "Parameters\ncondition\n\nA closure that determines whether the item is exportable. Don’t perform long-running work in this closure. It shouldn’t contain network requests, file operations, or other potentially time-consuming tasks as they can cause delays during operations with Transferable items.\n\nDiscussion\n\nSome instances of a model type may have state-dependent conditions that make them unsuitable for export. For example, an Archive structure that supports a comma-separated text representation only when it has compatible content:\n\nstruct Archive {\n    var supportsCSV: Bool\n    func csvData() -> Data\n    init(csvData: Data)\n}\n\n\nextension Archive: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        DataRepresentation(contentType: .commaSeparatedText) { archive in\n            archive.csvData()\n        } importing: { data in Archive(csvData: data) }\n            .exportingCondition { archive in archive.supportsCSV }\n    }\n}\n"
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/codablerepresentation/suggestedfilename(_:)-1ixmb",
    "html": "Parameters\nfileName\n\nThe optional closure that returns the suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\nstruct Note: Transferable {\n    var title: String\n    var body: String\n    static var transferRepresentation: some TransferRepresentation {\n        ProxyRepresentation(exporting: \\.body)\n            .suggestedFileName { $0.title + \".txt\" }\n     }\n }\n"
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/codablerepresentation/suggestedfilename(_:)-9xa3h",
    "html": "Parameters\nfileName\n\nThe suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\n extension ImageDocumentLayer: Transferable {\n     static var transferRepresentation: some TransferRepresentation {\n         DataRepresentation(contentType: .layer) { layer in\n             layer.data()\n             } importing: { data in\n                 try ImageDocumentLayer(data: data)\n             }\n             .suggestedFileName(\"Layer.exampleLayer\")\n         DataRepresentation(exportedContentType: .png) { layer in\n             layer.pngData()\n         }\n         .suggestedFileName(\"Layer.png\")\n     }\n }\n\n\nThe .exampleLayer filename extension above should match the extension for the layer content type, which you declare in your app’s Info.plist file."
  },
  {
    "title": "visibility(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/codablerepresentation/visibility(_:)",
    "html": "Parameters\nvisibility\n\nThe visibility level."
  },
  {
    "title": "exportingCondition(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/codablerepresentation/exportingcondition(_:)",
    "html": "Parameters\ncondition\n\nA closure that determines whether the item is exportable. Don’t perform long-running work in this closure. It shouldn’t contain network requests, file operations, or other potentially time-consuming tasks as they can cause delays during operations with Transferable items.\n\nDiscussion\n\nSome instances of a model type may have state-dependent conditions that make them unsuitable for export. For example, an Archive structure that supports a comma-separated text representation only when it has compatible content:\n\nstruct Archive {\n    var supportsCSV: Bool\n    func csvData() -> Data\n    init(csvData: Data)\n}\n\n\nextension Archive: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        DataRepresentation(contentType: .commaSeparatedText) { archive in\n            archive.csvData()\n        } importing: { data in Archive(csvData: data) }\n            .exportingCondition { archive in archive.supportsCSV }\n    }\n}\n"
  },
  {
    "title": "visibility(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/datarepresentation/visibility(_:)",
    "html": "Parameters\nvisibility\n\nThe visibility level."
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/datarepresentation/suggestedfilename(_:)-6zayd",
    "html": "Parameters\nfileName\n\nThe optional closure that returns the suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\nstruct Note: Transferable {\n    var title: String\n    var body: String\n    static var transferRepresentation: some TransferRepresentation {\n        ProxyRepresentation(exporting: \\.body)\n            .suggestedFileName { $0.title + \".txt\" }\n     }\n }\n"
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/datarepresentation/suggestedfilename(_:)-3p1cr",
    "html": "Parameters\nfileName\n\nThe suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\n extension ImageDocumentLayer: Transferable {\n     static var transferRepresentation: some TransferRepresentation {\n         DataRepresentation(contentType: .layer) { layer in\n             layer.data()\n             } importing: { data in\n                 try ImageDocumentLayer(data: data)\n             }\n             .suggestedFileName(\"Layer.exampleLayer\")\n         DataRepresentation(exportedContentType: .png) { layer in\n             layer.pngData()\n         }\n         .suggestedFileName(\"Layer.png\")\n     }\n }\n\n\nThe .exampleLayer filename extension above should match the extension for the layer content type, which you declare in your app’s Info.plist file."
  },
  {
    "title": "exportingCondition(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/filerepresentation/exportingcondition(_:)",
    "html": "Parameters\ncondition\n\nA closure that determines whether the item is exportable. Don’t perform long-running work in this closure. It shouldn’t contain network requests, file operations, or other potentially time-consuming tasks as they can cause delays during operations with Transferable items.\n\nDiscussion\n\nSome instances of a model type may have state-dependent conditions that make them unsuitable for export. For example, an Archive structure that supports a comma-separated text representation only when it has compatible content:\n\nstruct Archive {\n    var supportsCSV: Bool\n    func csvData() -> Data\n    init(csvData: Data)\n}\n\n\nextension Archive: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        DataRepresentation(contentType: .commaSeparatedText) { archive in\n            archive.csvData()\n        } importing: { data in Archive(csvData: data) }\n            .exportingCondition { archive in archive.supportsCSV }\n    }\n}\n"
  },
  {
    "title": "visibility(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/filerepresentation/visibility(_:)",
    "html": "Parameters\nvisibility\n\nThe visibility level."
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/filerepresentation/suggestedfilename(_:)-4ys18",
    "html": "Parameters\nfileName\n\nThe optional closure that returns the suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\nstruct Note: Transferable {\n    var title: String\n    var body: String\n    static var transferRepresentation: some TransferRepresentation {\n        ProxyRepresentation(exporting: \\.body)\n            .suggestedFileName { $0.title + \".txt\" }\n     }\n }\n"
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/filerepresentation/suggestedfilename(_:)-4cna5",
    "html": "Parameters\nfileName\n\nThe suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\n extension ImageDocumentLayer: Transferable {\n     static var transferRepresentation: some TransferRepresentation {\n         DataRepresentation(contentType: .layer) { layer in\n             layer.data()\n             } importing: { data in\n                 try ImageDocumentLayer(data: data)\n             }\n             .suggestedFileName(\"Layer.exampleLayer\")\n         DataRepresentation(exportedContentType: .png) { layer in\n             layer.pngData()\n         }\n         .suggestedFileName(\"Layer.png\")\n     }\n }\n\n\nThe .exampleLayer filename extension above should match the extension for the layer content type, which you declare in your app’s Info.plist file."
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/tupletransferrepresentation/suggestedfilename(_:)-73r2p",
    "html": "Parameters\nfileName\n\nThe suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\n extension ImageDocumentLayer: Transferable {\n     static var transferRepresentation: some TransferRepresentation {\n         DataRepresentation(contentType: .layer) { layer in\n             layer.data()\n             } importing: { data in\n                 try ImageDocumentLayer(data: data)\n             }\n             .suggestedFileName(\"Layer.exampleLayer\")\n         DataRepresentation(exportedContentType: .png) { layer in\n             layer.pngData()\n         }\n         .suggestedFileName(\"Layer.png\")\n     }\n }\n\n\nThe .exampleLayer filename extension above should match the extension for the layer content type, which you declare in your app’s Info.plist file."
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/tupletransferrepresentation/suggestedfilename(_:)-8hetv",
    "html": "Parameters\nfileName\n\nThe optional closure that returns the suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\nstruct Note: Transferable {\n    var title: String\n    var body: String\n    static var transferRepresentation: some TransferRepresentation {\n        ProxyRepresentation(exporting: \\.body)\n            .suggestedFileName { $0.title + \".txt\" }\n     }\n }\n"
  },
  {
    "title": "visibility(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/tupletransferrepresentation/visibility(_:)",
    "html": "Parameters\nvisibility\n\nThe visibility level."
  },
  {
    "title": "exportingCondition(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/tupletransferrepresentation/exportingcondition(_:)",
    "html": "Parameters\ncondition\n\nA closure that determines whether the item is exportable. Don’t perform long-running work in this closure. It shouldn’t contain network requests, file operations, or other potentially time-consuming tasks as they can cause delays during operations with Transferable items.\n\nDiscussion\n\nSome instances of a model type may have state-dependent conditions that make them unsuitable for export. For example, an Archive structure that supports a comma-separated text representation only when it has compatible content:\n\nstruct Archive {\n    var supportsCSV: Bool\n    func csvData() -> Data\n    init(csvData: Data)\n}\n\n\nextension Archive: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        DataRepresentation(contentType: .commaSeparatedText) { archive in\n            archive.csvData()\n        } importing: { data in Archive(csvData: data) }\n            .exportingCondition { archive in archive.supportsCSV }\n    }\n}\n"
  },
  {
    "title": "transferRepresentation",
    "url": "https://developer.apple.com/documentation/coretransferable/transferable/transferrepresentation",
    "html": "Required\n\nDiscussion\n\nA transferRepresentation can contain multiple representations for different content types.\n\nSee Also\nImplementing a transfer representation\nassociatedtype Representation : TransferRepresentation\nThe type of the representation used to import and export the item.\n\nRequired"
  },
  {
    "title": "Equatable Implementations",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationvisibility/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are not equal."
  },
  {
    "title": "==(_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationvisibility/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "ownProcess",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationvisibility/ownprocess",
    "html": "See Also\nSpecifying transfer visibility\nstatic let all: TransferRepresentationVisibility\nThe visibility level that specifies that any app or process can access the item.\nstatic let team: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only to apps created by the current app’s development team.\nstatic let group: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only to macOS apps in the same App Group."
  },
  {
    "title": "group",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationvisibility/group",
    "html": "See Also\nSpecifying transfer visibility\nstatic let all: TransferRepresentationVisibility\nThe visibility level that specifies that any app or process can access the item.\nstatic let team: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only to apps created by the current app’s development team.\nstatic let ownProcess: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only within the app that’s the source of the item."
  },
  {
    "title": "team",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationvisibility/team",
    "html": "See Also\nSpecifying transfer visibility\nstatic let all: TransferRepresentationVisibility\nThe visibility level that specifies that any app or process can access the item.\nstatic let group: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only to macOS apps in the same App Group.\nstatic let ownProcess: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only within the app that’s the source of the item."
  },
  {
    "title": "init(importedContentType:importing:)",
    "url": "https://developer.apple.com/documentation/coretransferable/datarepresentation/init(importedcontenttype:importing:)",
    "html": "Parameters\nimportedContentType\n\nA uniform type identifier that best describes the item.\n\nimporting\n\nA closure that instantiates the item with given binary data\n\nSee Also\nCreating a transfer representation\ninit(contentType: UTType, exporting: (Item) async throws -> Data, importing: (Data) async throws -> Item)\nCreates a representation that allows transporting an item as binary data.\ninit(exportedContentType: UTType, exporting: (Item) async throws -> Data)\nCreates a representation that allows exporting an item as binary data."
  },
  {
    "title": "all",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationvisibility/all",
    "html": "See Also\nSpecifying transfer visibility\nstatic let team: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only to apps created by the current app’s development team.\nstatic let group: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only to macOS apps in the same App Group.\nstatic let ownProcess: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only within the app that’s the source of the item."
  },
  {
    "title": "exportingCondition(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/exportingcondition(_:)",
    "html": "Parameters\ncondition\n\nA closure that determines whether the item is exportable. Don’t perform long-running work in this closure. It shouldn’t contain network requests, file operations, or other potentially time-consuming tasks as they can cause delays during operations with Transferable items.\n\nDiscussion\n\nSome instances of a model type may have state-dependent conditions that make them unsuitable for export. For example, an Archive structure that supports a comma-separated text representation only when it has compatible content:\n\nstruct Archive {\n    var supportsCSV: Bool\n    func csvData() -> Data\n    init(csvData: Data)\n}\n\n\nextension Archive: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        DataRepresentation(contentType: .commaSeparatedText) { archive in\n            archive.csvData()\n        } importing: { data in Archive(csvData: data) }\n            .exportingCondition { archive in archive.supportsCSV }\n    }\n}\n"
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/suggestedfilename(_:)-1r7ku",
    "html": "Parameters\nfileName\n\nThe optional closure that returns the suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\nstruct Note: Transferable {\n    var title: String\n    var body: String\n    static var transferRepresentation: some TransferRepresentation {\n        ProxyRepresentation(exporting: \\.body)\n            .suggestedFileName { $0.title + \".txt\" }\n     }\n }\n"
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/suggestedfilename(_:)-3wdhy",
    "html": "Parameters\nfileName\n\nThe suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\n extension ImageDocumentLayer: Transferable {\n     static var transferRepresentation: some TransferRepresentation {\n         DataRepresentation(contentType: .layer) { layer in\n             layer.data()\n             } importing: { data in\n                 try ImageDocumentLayer(data: data)\n             }\n             .suggestedFileName(\"Layer.exampleLayer\")\n         DataRepresentation(exportedContentType: .png) { layer in\n             layer.pngData()\n         }\n         .suggestedFileName(\"Layer.png\")\n     }\n }\n\n\nThe .exampleLayer filename extension above should match the extension for the layer content type, which you declare in your app’s Info.plist file."
  },
  {
    "title": "visibility(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/visibility(_:)",
    "html": "Parameters\nvisibility\n\nThe visibility level."
  },
  {
    "title": "buildExpression(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildexpression(_:)-3z8sl",
    "html": "See Also\nBuilding a transfer representation\nstatic func buildBlock<Content>(Content) -> Content\nPasses a single transfer representation to the builder unmodified.\nstatic func buildExpression<Encoder, Decoder>(CodableRepresentation<Item, Encoder, Decoder>) -> CodableRepresentation<Item, Encoder, Decoder>\nBuilds an encodable and decodable transfer representation from an expression."
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentation/suggestedfilename(_:)-2yln2",
    "html": "Parameters\nfileName\n\nThe suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\n extension ImageDocumentLayer: Transferable {\n     static var transferRepresentation: some TransferRepresentation {\n         DataRepresentation(contentType: .layer) { layer in\n             layer.data()\n             } importing: { data in\n                 try ImageDocumentLayer(data: data)\n             }\n             .suggestedFileName(\"Layer.exampleLayer\")\n         DataRepresentation(exportedContentType: .png) { layer in\n             layer.pngData()\n         }\n         .suggestedFileName(\"Layer.png\")\n     }\n }\n\n\nThe .exampleLayer filename extension above should match the extension for the layer content type, which you declare in your app’s Info.plist file."
  },
  {
    "title": "TransferRepresentation Implementations",
    "url": "https://developer.apple.com/documentation/coretransferable/codablerepresentation/transferrepresentation-implementations",
    "html": "Topics\nInstance Methods\nfunc exportingCondition((Self.Item) -> Bool) -> _ConditionalTransferRepresentation<Self>\nPrevents the system from exporting an item if it does not meet the supplied condition.\nfunc suggestedFileName((Self.Item) -> String?) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc suggestedFileName(String) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc visibility(TransferRepresentationVisibility) -> some TransferRepresentation<Self.Item>\nSpecifies the kinds of apps and processes that can see an item in transit."
  },
  {
    "title": "TransferRepresentation Implementations",
    "url": "https://developer.apple.com/documentation/coretransferable/datarepresentation/transferrepresentation-implementations",
    "html": "Topics\nInstance Methods\nfunc exportingCondition((Self.Item) -> Bool) -> _ConditionalTransferRepresentation<Self>\nPrevents the system from exporting an item if it does not meet the supplied condition.\nfunc suggestedFileName(String) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc suggestedFileName((Self.Item) -> String?) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc visibility(TransferRepresentationVisibility) -> some TransferRepresentation<Self.Item>\nSpecifies the kinds of apps and processes that can see an item in transit."
  },
  {
    "title": "init(for:contentType:)",
    "url": "https://developer.apple.com/documentation/coretransferable/codablerepresentation/init(for:contenttype:)",
    "html": "Parameters\nitemType\n\nThe concrete type of the item that’s being transferred.\n\ncontentType\n\nA uniform type identifier that best describes the item.\n\nDiscussion\n\nThis initializer uses JSON for encoding and decoding.\n\nSee Also\nCreating a transfer representation\ninit(for: Item.Type, contentType: UTType, encoder: Encoder, decoder: Decoder)\nCreates a transfer representation for a given type with the encoder and decoder you supply."
  },
  {
    "title": "init(for:contentType:encoder:decoder:)",
    "url": "https://developer.apple.com/documentation/coretransferable/codablerepresentation/init(for:contenttype:encoder:decoder:)",
    "html": "Parameters\nitemType\n\nThe concrete type of the item that’s being transported.\n\ncontentType\n\nA uniform type identifier that best describes the item.\n\nencoder\n\nAn instance of a type that can convert the item being transferred into binary data with a specific structure.\n\ndecoder\n\nAn instance of a type that can convert specifically structured binary data into the item being transferred.\n\nSee Also\nCreating a transfer representation\ninit(for: Item.Type, contentType: UTType)\nCreates a transfer representation for a given type and type identifier."
  },
  {
    "title": "init(exportedContentType:exporting:)",
    "url": "https://developer.apple.com/documentation/coretransferable/datarepresentation/init(exportedcontenttype:exporting:)",
    "html": "Parameters\nexportedContentType\n\nA uniform type identifier that best describes the item.\n\nexporting\n\nA closure that provides a data representation of the given item.\n\nSee Also\nCreating a transfer representation\ninit(contentType: UTType, exporting: (Item) async throws -> Data, importing: (Data) async throws -> Item)\nCreates a representation that allows transporting an item as binary data.\ninit(importedContentType: UTType, importing: (Data) async throws -> Item)\nCreates a representation that allows importing an item as binary data."
  },
  {
    "title": "init(contentType:exporting:importing:)",
    "url": "https://developer.apple.com/documentation/coretransferable/datarepresentation/init(contenttype:exporting:importing:)",
    "html": "Parameters\ncontentType\n\nA uniform type identifier that best describes the item.\n\nexporting\n\nA closure that provides a data representation of the given item.\n\nimporting\n\nA closure that instantiates the item with given binary data.\n\nSee Also\nCreating a transfer representation\ninit(importedContentType: UTType, importing: (Data) async throws -> Item)\nCreates a representation that allows importing an item as binary data.\ninit(exportedContentType: UTType, exporting: (Item) async throws -> Data)\nCreates a representation that allows exporting an item as binary data."
  },
  {
    "title": "TransferRepresentation Implementations",
    "url": "https://developer.apple.com/documentation/coretransferable/filerepresentation/transferrepresentation-implementations",
    "html": "Topics\nInstance Methods\nfunc exportingCondition((Self.Item) -> Bool) -> _ConditionalTransferRepresentation<Self>\nPrevents the system from exporting an item if it does not meet the supplied condition.\nfunc suggestedFileName(String) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc suggestedFileName((Self.Item) -> String?) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc visibility(TransferRepresentationVisibility) -> some TransferRepresentation<Self.Item>\nSpecifies the kinds of apps and processes that can see an item in transit."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nCombining transfer representations\nstatic func buildBlock<C1, C2>(C1, C2) -> TupleTransferRepresentation<Item, (C1, C2)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3>(C1, C2, C3) -> TupleTransferRepresentation<Item, (C1, C2, C3)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4>(C1, C2, C3, C4) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5>(C1, C2, C3, C4, C5) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6>(C1, C2, C3, C4, C5, C6) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7>(C1, C2, C3, C4, C5, C6, C7) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCombines multiple transfer representations into a single transfer representation."
  },
  {
    "title": "init(exportedContentType:shouldAllowToOpenInPlace:exporting:)",
    "url": "https://developer.apple.com/documentation/coretransferable/filerepresentation/init(exportedcontenttype:shouldallowtoopeninplace:exporting:)",
    "html": "Parameters\nexportedContentType\n\nA uniform type identifier for the file URL, returned by the exporting closure.\n\nshouldAllowToOpenInPlace\n\nA Boolean value that indicates whether the receiver can try to gain access to the original item on disk and can edit it. If false, the receiver only has access to a copy of the file made by the system.\n\nexporting\n\nA closure that provides a file representation of the given item.\n\nSee Also\nCreating a transfer representation\ninit(contentType: UTType, shouldAttemptToOpenInPlace: Bool, exporting: (Item) async throws -> SentTransferredFile, importing: (ReceivedTransferredFile) async throws -> Item)\nCreates a transfer representation for importing and exporting transferable items as files.\ninit(importedContentType: UTType, shouldAttemptToOpenInPlace: Bool, importing: (ReceivedTransferredFile) async throws -> Item)\nCreates a transfer representation for importing transferable items as files."
  },
  {
    "title": "init(importedContentType:shouldAttemptToOpenInPlace:importing:)",
    "url": "https://developer.apple.com/documentation/coretransferable/filerepresentation/init(importedcontenttype:shouldattempttoopeninplace:importing:)",
    "html": "Parameters\nimportedContentType\n\nA uniform type identifier for the file promise, returned by the exporting closure.\n\nshouldAttemptToOpenInPlace\n\nA Boolean value that indicates whether the receiver wants to gain access to the original item on disk and can edit it. If false, the receiver only has access to a copy of the file made by the system.\n\nimporting\n\nA closure that creates the item with given file promise. The file referred to by the file property of the ReceivedTransferredFile is only guaranteed to exist within the importing closure. If you need the file to be around for a longer period, make a copy in the importing closure.\n\nSee Also\nCreating a transfer representation\ninit(contentType: UTType, shouldAttemptToOpenInPlace: Bool, exporting: (Item) async throws -> SentTransferredFile, importing: (ReceivedTransferredFile) async throws -> Item)\nCreates a transfer representation for importing and exporting transferable items as files.\ninit(exportedContentType: UTType, shouldAllowToOpenInPlace: Bool, exporting: (Item) async throws -> SentTransferredFile)\nCreates a transfer representation for exporting transferable items as files."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nCombining transfer representations\nstatic func buildBlock<C1, C2>(C1, C2) -> TupleTransferRepresentation<Item, (C1, C2)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3>(C1, C2, C3) -> TupleTransferRepresentation<Item, (C1, C2, C3)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4>(C1, C2, C3, C4) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5>(C1, C2, C3, C4, C5) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6>(C1, C2, C3, C4, C5, C6) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7>(C1, C2, C3, C4, C5, C6, C7) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(C1, C2, C3, C4, C5, C6, C7, C8, C9, C10) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>\nCombines multiple transfer representations into a single transfer representation."
  },
  {
    "title": "init(contentType:shouldAttemptToOpenInPlace:exporting:importing:)",
    "url": "https://developer.apple.com/documentation/coretransferable/filerepresentation/init(contenttype:shouldattempttoopeninplace:exporting:importing:)",
    "html": "Parameters\ncontentType\n\nA uniform type identifier that best describes the item.\n\nshouldAttemptToOpenInPlace\n\nA Boolean value that indicates whether the receiver gains access to the original item on disk and can edit it, or to a copy made by the system.\n\nexporting\n\nA closure that provides a file representation of the given item.\n\nimporting\n\nA closure that instantiates the item with given file promise. The file referred to by the file property of the ReceivedTransferredFile instance is only guaranteed to exist within the importing closure. If you need the file to be around for a longer period, make a copy in the importing closure.\n\nSee Also\nCreating a transfer representation\ninit(importedContentType: UTType, shouldAttemptToOpenInPlace: Bool, importing: (ReceivedTransferredFile) async throws -> Item)\nCreates a transfer representation for importing transferable items as files.\ninit(exportedContentType: UTType, shouldAllowToOpenInPlace: Bool, exporting: (Item) async throws -> SentTransferredFile)\nCreates a transfer representation for exporting transferable items as files."
  },
  {
    "title": "init(_:allowAccessingOriginalFile:)",
    "url": "https://developer.apple.com/documentation/coretransferable/senttransferredfile/init(_:allowaccessingoriginalfile:)",
    "html": "Parameters\nfile\n\nA URL that describes the location of the file.\n\nallowAccessingOriginalFile\n\nA Boolean value that indicates whether the receiver can read and write the original file. When set to false, the receiver can only gain access to a copy of the file.\n\nSee Also\nConfiguring a file transfer\nlet file: URL\nA URL that describes the location of the file.\nlet allowAccessingOriginalFile: Bool\nA Boolean value that indicates whether the receiver can read and write the original file. When set to false, the receiver can only gain access to a copy of the file."
  },
  {
    "title": "allowAccessingOriginalFile",
    "url": "https://developer.apple.com/documentation/coretransferable/senttransferredfile/allowaccessingoriginalfile",
    "html": "See Also\nConfiguring a file transfer\ninit(URL, allowAccessingOriginalFile: Bool)\nCreates a description of a file from the perspective of the sender.\nlet file: URL\nA URL that describes the location of the file."
  },
  {
    "title": "file",
    "url": "https://developer.apple.com/documentation/coretransferable/senttransferredfile/file",
    "html": "See Also\nConfiguring a file transfer\ninit(URL, allowAccessingOriginalFile: Bool)\nCreates a description of a file from the perspective of the sender.\nlet allowAccessingOriginalFile: Bool\nA Boolean value that indicates whether the receiver can read and write the original file. When set to false, the receiver can only gain access to a copy of the file."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildblock(_:_:_:_:_:_:_:_:)",
    "html": "See Also\nCombining transfer representations\nstatic func buildBlock<C1, C2>(C1, C2) -> TupleTransferRepresentation<Item, (C1, C2)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3>(C1, C2, C3) -> TupleTransferRepresentation<Item, (C1, C2, C3)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4>(C1, C2, C3, C4) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5>(C1, C2, C3, C4, C5) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6>(C1, C2, C3, C4, C5, C6) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7>(C1, C2, C3, C4, C5, C6, C7) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(C1, C2, C3, C4, C5, C6, C7, C8, C9, C10) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>\nCombines multiple transfer representations into a single transfer representation."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildblock(_:_:_:_:_:_:_:)",
    "html": "See Also\nCombining transfer representations\nstatic func buildBlock<C1, C2>(C1, C2) -> TupleTransferRepresentation<Item, (C1, C2)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3>(C1, C2, C3) -> TupleTransferRepresentation<Item, (C1, C2, C3)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4>(C1, C2, C3, C4) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5>(C1, C2, C3, C4, C5) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6>(C1, C2, C3, C4, C5, C6) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(C1, C2, C3, C4, C5, C6, C7, C8, C9, C10) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>\nCombines multiple transfer representations into a single transfer representation."
  },
  {
    "title": "buildBlock(_:_:_:_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildblock(_:_:_:_:_:)",
    "html": "See Also\nCombining transfer representations\nstatic func buildBlock<C1, C2>(C1, C2) -> TupleTransferRepresentation<Item, (C1, C2)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3>(C1, C2, C3) -> TupleTransferRepresentation<Item, (C1, C2, C3)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4>(C1, C2, C3, C4) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6>(C1, C2, C3, C4, C5, C6) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7>(C1, C2, C3, C4, C5, C6, C7) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(C1, C2, C3, C4, C5, C6, C7, C8, C9, C10) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>\nCombines multiple transfer representations into a single transfer representation."
  },
  {
    "title": "buildBlock(_:_:_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildblock(_:_:_:_:)",
    "html": "See Also\nCombining transfer representations\nstatic func buildBlock<C1, C2>(C1, C2) -> TupleTransferRepresentation<Item, (C1, C2)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3>(C1, C2, C3) -> TupleTransferRepresentation<Item, (C1, C2, C3)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5>(C1, C2, C3, C4, C5) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6>(C1, C2, C3, C4, C5, C6) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7>(C1, C2, C3, C4, C5, C6, C7) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(C1, C2, C3, C4, C5, C6, C7, C8, C9, C10) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>\nCombines multiple transfer representations into a single transfer representation."
  },
  {
    "title": "buildBlock(_:_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildblock(_:_:_:)",
    "html": "See Also\nCombining transfer representations\nstatic func buildBlock<C1, C2>(C1, C2) -> TupleTransferRepresentation<Item, (C1, C2)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4>(C1, C2, C3, C4) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5>(C1, C2, C3, C4, C5) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6>(C1, C2, C3, C4, C5, C6) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7>(C1, C2, C3, C4, C5, C6, C7) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(C1, C2, C3, C4, C5, C6, C7, C8, C9, C10) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>\nCombines multiple transfer representations into a single transfer representation."
  },
  {
    "title": "buildBlock(_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildblock(_:_:)",
    "html": "See Also\nCombining transfer representations\nstatic func buildBlock<C1, C2, C3>(C1, C2, C3) -> TupleTransferRepresentation<Item, (C1, C2, C3)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4>(C1, C2, C3, C4) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5>(C1, C2, C3, C4, C5) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6>(C1, C2, C3, C4, C5, C6) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7>(C1, C2, C3, C4, C5, C6, C7) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(C1, C2, C3, C4, C5, C6, C7, C8, C9, C10) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>\nCombines multiple transfer representations into a single transfer representation."
  },
  {
    "title": "buildExpression(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildexpression(_:)-6qtdp",
    "html": "See Also\nBuilding a transfer representation\nstatic func buildBlock<Content>(Content) -> Content\nPasses a single transfer representation to the builder unmodified.\nstatic func buildExpression<R>(R) -> R\nBuilds a transfer representation from an expression."
  },
  {
    "title": "buildBlock(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildblock(_:)",
    "html": "See Also\nBuilding a transfer representation\nstatic func buildExpression<R>(R) -> R\nBuilds a transfer representation from an expression.\nstatic func buildExpression<Encoder, Decoder>(CodableRepresentation<Item, Encoder, Decoder>) -> CodableRepresentation<Item, Encoder, Decoder>\nBuilds an encodable and decodable transfer representation from an expression."
  },
  {
    "title": "init(exporting:importing:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/init(exporting:importing:)-h69f",
    "html": "Parameters\nexporting\n\nA closure that converts the item into desired representation.\n\nimporting\n\nA closure that converts the chosen representation back into the transported item."
  },
  {
    "title": "init(importing:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/init(importing:)-4w9l5",
    "html": "Parameters\nimporting\n\nA closure that converts the chosen representation into the transported item."
  },
  {
    "title": "suggestedFileName(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentation/suggestedfilename(_:)-47rg0",
    "html": "Parameters\nfileName\n\nThe optional closure that returns the suggested filename including the filename extension. If several suggested file names are specified on an item, only the last one will be used.\n\nDiscussion\n\nAny transfer representation can be written to disk.\n\nstruct Note: Transferable {\n    var title: String\n    var body: String\n    static var transferRepresentation: some TransferRepresentation {\n        ProxyRepresentation(exporting: \\.body)\n            .suggestedFileName { $0.title + \".txt\" }\n     }\n }\n"
  },
  {
    "title": "TransferRepresentation Implementations",
    "url": "https://developer.apple.com/documentation/coretransferable/tupletransferrepresentation/transferrepresentation-implementations",
    "html": "Topics\nInstance Methods\nfunc exportingCondition((Self.Item) -> Bool) -> _ConditionalTransferRepresentation<Self>\nPrevents the system from exporting an item if it does not meet the supplied condition.\nfunc suggestedFileName(String) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc suggestedFileName((Self.Item) -> String?) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc visibility(TransferRepresentationVisibility) -> some TransferRepresentation<Self.Item>\nSpecifies the kinds of apps and processes that can see an item in transit."
  },
  {
    "title": "visibility(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentation/visibility(_:)",
    "html": "Parameters\nvisibility\n\nThe visibility level."
  },
  {
    "title": "exportingCondition(_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentation/exportingcondition(_:)",
    "html": "Parameters\ncondition\n\nA closure that determines whether the item is exportable. Don’t perform long-running work in this closure. It shouldn’t contain network requests, file operations, or other potentially time-consuming tasks as they can cause delays during operations with Transferable items.\n\nDiscussion\n\nSome instances of a model type may have state-dependent conditions that make them unsuitable for export. For example, an Archive structure that supports a comma-separated text representation only when it has compatible content:\n\nstruct Archive {\n    var supportsCSV: Bool\n    func csvData() -> Data\n    init(csvData: Data)\n}\n\n\nextension Archive: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        DataRepresentation(contentType: .commaSeparatedText) { archive in\n            archive.csvData()\n        } importing: { data in Archive(csvData: data) }\n            .exportingCondition { archive in archive.supportsCSV }\n    }\n}\n"
  },
  {
    "title": "body",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentation/body-swift.property",
    "html": "Required\n\nDiscussion\n\nCombine multiple existing transfer representations to compose a single transfer representation that describes how to transfer an item in multiple scenarios.\n\nstruct CombinedRepresentation: TransferRepresentation {\n   var body: some TransferRepresentation {\n       DataRepresentation(...)\n       FileRepresentation(...)\n   }\n}\n\nSee Also\nImplementing a transfer representation\nassociatedtype Body : TransferRepresentation\nThe transfer representation for the item.\n\nRequired\n\nassociatedtype Item : Transferable\nThe type of the item that’s being transferred.\n\nRequired"
  },
  {
    "title": "Item",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentation/item",
    "html": "Required\n\nSee Also\nImplementing a transfer representation\nvar body: Self.Body\nA builder expression that describes the process of importing and exporting an item.\n\nRequired\n\nassociatedtype Body : TransferRepresentation\nThe transfer representation for the item.\n\nRequired"
  },
  {
    "title": "Body",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentation/body-swift.associatedtype",
    "html": "Required\n\nSee Also\nImplementing a transfer representation\nvar body: Self.Body\nA builder expression that describes the process of importing and exporting an item.\n\nRequired\n\nassociatedtype Item : Transferable\nThe type of the item that’s being transferred.\n\nRequired"
  },
  {
    "title": "Representation",
    "url": "https://developer.apple.com/documentation/coretransferable/transferable/representation",
    "html": "Required\n\nDiscussion\n\nSwift infers this type from the return value of the transferRepresentation property.\n\nSee Also\nImplementing a transfer representation\nstatic var transferRepresentation: Self.Representation\nThe representation used to import and export the item.\n\nRequired"
  },
  {
    "title": "TransferRepresentationVisibility",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationvisibility",
    "html": "Topics\nSpecifying transfer visibility\nstatic let all: TransferRepresentationVisibility\nThe visibility level that specifies that any app or process can access the item.\nstatic let team: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only to apps created by the current app’s development team.\nstatic let group: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only to macOS apps in the same App Group.\nstatic let ownProcess: TransferRepresentationVisibility\nThe visibility level that specifies that the item is visible only within the app that’s the source of the item.\nOperators\nstatic func == (TransferRepresentationVisibility, TransferRepresentationVisibility) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nSendable\nSee Also\nTransfer customization\nstruct ProxyRepresentation\nA transfer representation that uses another type’s transfer representation as its own."
  },
  {
    "title": "file",
    "url": "https://developer.apple.com/documentation/coretransferable/receivedtransferredfile/file",
    "html": "See Also\nConfiguring a file transfer\nlet isOriginalFile: Bool\nA Boolean value that indicates whether the file’s URL points to the original file provided by the sender or to a copy."
  },
  {
    "title": "isOriginalFile",
    "url": "https://developer.apple.com/documentation/coretransferable/receivedtransferredfile/isoriginalfile",
    "html": "See Also\nConfiguring a file transfer\nlet file: URL\nThe received file on disk."
  },
  {
    "title": "DataRepresentation",
    "url": "https://developer.apple.com/documentation/CoreTransferable/DataRepresentation",
    "html": "Overview\n\nUse this transfer representation if your model is stored in memory. For example, a drawing app might have a notion of a layer that can be converted to and from a custom binary data format and also converted to the PNG image type:\n\nstruct ImageDocumentLayer {\n    init(data: Data) throws\n    func data() -> Data\n    func pngData() -> Data\n}\n\n\nYou can provide multiple transfer representations for a model type, even if the transfer representation types are the same. The following shows the ImageDocumentLayer structure conforming to Transferable with two DataRepresentation instances composed together:\n\nextension ImageDocumentLayer: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        DataRepresentation(contentType: .layer) { layer in\n                layer.data()\n            } importing: { data in\n                try ImageDocumentLayer(data: data)\n            }\n        DataRepresentation(exportedContentType: .png) { layer in\n            layer.pngData()\n        }\n    }\n}\n\n\nThe example drawing app’s custom transfer representation comes first so that apps that know about the custom transfer representation can use it. The second transfer representation offers export compatibility with other apps that work with PNG images.\n\nTip\n\nIf a type conforms to Codable, CodableRepresentation might be a more convenient choice than DataRepresentation.\n\nTopics\nCreating a transfer representation\ninit(contentType: UTType, exporting: (Item) async throws -> Data, importing: (Data) async throws -> Item)\nCreates a representation that allows transporting an item as binary data.\ninit(importedContentType: UTType, importing: (Data) async throws -> Item)\nCreates a representation that allows importing an item as binary data.\ninit(exportedContentType: UTType, exporting: (Item) async throws -> Data)\nCreates a representation that allows exporting an item as binary data.\nType Aliases\ntypealias Body\nThe transfer representation for the item.\nDefault Implementations\nTransferRepresentation Implementations\nRelationships\nConforms To\nSendable\nTransferRepresentation\nSee Also\nData transfer\nstruct CodableRepresentation\nA transfer representation for types that participate in Swift’s protocols for encoding and decoding."
  },
  {
    "title": "TransferRepresentation Implementations",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/transferrepresentation-implementations",
    "html": "Topics\nInstance Methods\nfunc exportingCondition((Self.Item) -> Bool) -> _ConditionalTransferRepresentation<Self>\nPrevents the system from exporting an item if it does not meet the supplied condition.\nfunc suggestedFileName((Self.Item) -> String?) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc suggestedFileName(String) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc visibility(TransferRepresentationVisibility) -> some TransferRepresentation<Self.Item>\nSpecifies the kinds of apps and processes that can see an item in transit."
  },
  {
    "title": "FileRepresentation",
    "url": "https://developer.apple.com/documentation/CoreTransferable/FileRepresentation",
    "html": "Overview\n\nUse a FileRepresentation for transferring types that involve a large amount of data. For example, if your app defines a Movie type that could represent a lengthy video, use a FileRepresentation instance to transfer the video data to another app or process.\n\nstruct Movie: Transferable {\n    let url: URL\n    static var transferRepresentation: some TransferRepresentation {\n        FileRepresentation(contentType: .mpeg4Movie) { movie in\n            SentTransferredFile($0.url)\n            } importing: { received in\n                let copy: URL = URL(fileURLWithPath: \"<#...#>\")\n                try FileManager.default.copyItem(at: received.file, to: copy)\n                return Self.init(url: copy) }\n    }\n}\n\n\nIt’s efficient to pass such data around as a file and the receiver loads it into memory only if it’s required.\n\nTopics\nCreating a transfer representation\ninit(contentType: UTType, shouldAttemptToOpenInPlace: Bool, exporting: (Item) async throws -> SentTransferredFile, importing: (ReceivedTransferredFile) async throws -> Item)\nCreates a transfer representation for importing and exporting transferable items as files.\ninit(importedContentType: UTType, shouldAttemptToOpenInPlace: Bool, importing: (ReceivedTransferredFile) async throws -> Item)\nCreates a transfer representation for importing transferable items as files.\ninit(exportedContentType: UTType, shouldAllowToOpenInPlace: Bool, exporting: (Item) async throws -> SentTransferredFile)\nCreates a transfer representation for exporting transferable items as files.\nType Aliases\ntypealias Body\nThe transfer representation for the item.\nDefault Implementations\nTransferRepresentation Implementations\nRelationships\nConforms To\nSendable\nTransferRepresentation\nSee Also\nFile transfer\nstruct SentTransferredFile\nA description of a file from the perspective of the sender.\nstruct ReceivedTransferredFile\nA description of a file from the perspective of the receiver."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:)",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder/buildblock(_:_:_:_:_:_:)",
    "html": "See Also\nCombining transfer representations\nstatic func buildBlock<C1, C2>(C1, C2) -> TupleTransferRepresentation<Item, (C1, C2)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3>(C1, C2, C3) -> TupleTransferRepresentation<Item, (C1, C2, C3)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4>(C1, C2, C3, C4) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5>(C1, C2, C3, C4, C5) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7>(C1, C2, C3, C4, C5, C6, C7) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(C1, C2, C3, C4, C5, C6, C7, C8, C9, C10) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>\nCombines multiple transfer representations into a single transfer representation."
  },
  {
    "title": "init(importing:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/init(importing:)-pq40",
    "html": "Parameters\nimporting\n\nA closure that converts the chosen representation into the transported item."
  },
  {
    "title": "init(exporting:importing:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/init(exporting:importing:)-8q8zv",
    "html": "Parameters\nexporting\n\nA closure that converts the item into desired representation.\n\nimporting\n\nA closure that converts the chosen representation back into the transported item."
  },
  {
    "title": "init(exporting:importing:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/init(exporting:importing:)-4aiur",
    "html": "Parameters\nexporting\n\nA closure that converts the item into desired representation.\n\nimporting\n\nA closure that converts the chosen representation back into the transported item."
  },
  {
    "title": "init(exporting:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/init(exporting:)-6gjdh",
    "html": "Parameters\nexporting\n\nA closure that converts the item into desired representation."
  },
  {
    "title": "init(exporting:)",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation/init(exporting:)-q3qp",
    "html": "Parameters\nexporting\n\nA closure that converts the item into desired representation."
  },
  {
    "title": "body",
    "url": "https://developer.apple.com/documentation/coretransferable/tupletransferrepresentation/body-swift.property",
    "html": "Discussion\n\nCombine multiple existing transfer representations to compose a single transfer representation that describes how to transfer an item in multiple scenarios.\n\nstruct CombinedRepresentation: TransferRepresentation {\n   var body: some TransferRepresentation {\n       DataRepresentation(...)\n       FileRepresentation(...)\n   }\n}\n"
  },
  {
    "title": "CodableRepresentation",
    "url": "https://developer.apple.com/documentation/coretransferable/codablerepresentation",
    "html": "Overview\nstruct Todo: Codable, Transferable {\n    var text: String\n    var isDone = false\n\n\n    static var transferRepresentation: some TransferRepresentation {\n        CodableRepresentation(contentType: .todo)\n    }\n}\n\n\n extension UTType {\n     static var todo: UTType { UTType(exportedAs: \"com.example.todo\") }\n}\n\n\nImportant\n\nIf your app declares custom uniform type identifiers, include corresponding entries in the app’s Info.plist. For more information, see Defining file and data types for your app.\n\nTopics\nCreating a transfer representation\ninit(for: Item.Type, contentType: UTType)\nCreates a transfer representation for a given type and type identifier.\ninit(for: Item.Type, contentType: UTType, encoder: Encoder, decoder: Decoder)\nCreates a transfer representation for a given type with the encoder and decoder you supply.\nType Aliases\ntypealias Body\nThe transfer representation for the item.\nDefault Implementations\nTransferRepresentation Implementations\nRelationships\nConforms To\nSendable\nTransferRepresentation\nSee Also\nData transfer\nstruct DataRepresentation\nA transfer representation for types that provide their own binary data conversion."
  },
  {
    "title": "DataRepresentation",
    "url": "https://developer.apple.com/documentation/coretransferable/datarepresentation",
    "html": "Overview\n\nUse this transfer representation if your model is stored in memory. For example, a drawing app might have a notion of a layer that can be converted to and from a custom binary data format and also converted to the PNG image type:\n\nstruct ImageDocumentLayer {\n    init(data: Data) throws\n    func data() -> Data\n    func pngData() -> Data\n}\n\n\nYou can provide multiple transfer representations for a model type, even if the transfer representation types are the same. The following shows the ImageDocumentLayer structure conforming to Transferable with two DataRepresentation instances composed together:\n\nextension ImageDocumentLayer: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        DataRepresentation(contentType: .layer) { layer in\n                layer.data()\n            } importing: { data in\n                try ImageDocumentLayer(data: data)\n            }\n        DataRepresentation(exportedContentType: .png) { layer in\n            layer.pngData()\n        }\n    }\n}\n\n\nThe example drawing app’s custom transfer representation comes first so that apps that know about the custom transfer representation can use it. The second transfer representation offers export compatibility with other apps that work with PNG images.\n\nTip\n\nIf a type conforms to Codable, CodableRepresentation might be a more convenient choice than DataRepresentation.\n\nTopics\nCreating a transfer representation\ninit(contentType: UTType, exporting: (Item) async throws -> Data, importing: (Data) async throws -> Item)\nCreates a representation that allows transporting an item as binary data.\ninit(importedContentType: UTType, importing: (Data) async throws -> Item)\nCreates a representation that allows importing an item as binary data.\ninit(exportedContentType: UTType, exporting: (Item) async throws -> Data)\nCreates a representation that allows exporting an item as binary data.\nType Aliases\ntypealias Body\nThe transfer representation for the item.\nDefault Implementations\nTransferRepresentation Implementations\nRelationships\nConforms To\nSendable\nTransferRepresentation\nSee Also\nData transfer\nstruct CodableRepresentation\nA transfer representation for types that participate in Swift’s protocols for encoding and decoding."
  },
  {
    "title": "FileRepresentation",
    "url": "https://developer.apple.com/documentation/coretransferable/filerepresentation",
    "html": "Overview\n\nUse a FileRepresentation for transferring types that involve a large amount of data. For example, if your app defines a Movie type that could represent a lengthy video, use a FileRepresentation instance to transfer the video data to another app or process.\n\nstruct Movie: Transferable {\n    let url: URL\n    static var transferRepresentation: some TransferRepresentation {\n        FileRepresentation(contentType: .mpeg4Movie) { movie in\n            SentTransferredFile($0.url)\n            } importing: { received in\n                let copy: URL = URL(fileURLWithPath: \"<#...#>\")\n                try FileManager.default.copyItem(at: received.file, to: copy)\n                return Self.init(url: copy) }\n    }\n}\n\n\nIt’s efficient to pass such data around as a file and the receiver loads it into memory only if it’s required.\n\nTopics\nCreating a transfer representation\ninit(contentType: UTType, shouldAttemptToOpenInPlace: Bool, exporting: (Item) async throws -> SentTransferredFile, importing: (ReceivedTransferredFile) async throws -> Item)\nCreates a transfer representation for importing and exporting transferable items as files.\ninit(importedContentType: UTType, shouldAttemptToOpenInPlace: Bool, importing: (ReceivedTransferredFile) async throws -> Item)\nCreates a transfer representation for importing transferable items as files.\ninit(exportedContentType: UTType, shouldAllowToOpenInPlace: Bool, exporting: (Item) async throws -> SentTransferredFile)\nCreates a transfer representation for exporting transferable items as files.\nType Aliases\ntypealias Body\nThe transfer representation for the item.\nDefault Implementations\nTransferRepresentation Implementations\nRelationships\nConforms To\nSendable\nTransferRepresentation\nSee Also\nFile transfer\nstruct SentTransferredFile\nA description of a file from the perspective of the sender.\nstruct ReceivedTransferredFile\nA description of a file from the perspective of the receiver."
  },
  {
    "title": "SentTransferredFile",
    "url": "https://developer.apple.com/documentation/coretransferable/senttransferredfile",
    "html": "Topics\nConfiguring a file transfer\ninit(URL, allowAccessingOriginalFile: Bool)\nCreates a description of a file from the perspective of the sender.\nlet file: URL\nA URL that describes the location of the file.\nlet allowAccessingOriginalFile: Bool\nA Boolean value that indicates whether the receiver can read and write the original file. When set to false, the receiver can only gain access to a copy of the file.\nRelationships\nConforms To\nSendable\nSee Also\nFile transfer\nstruct FileRepresentation\nA transfer representation for types that transfer as a file URL.\nstruct ReceivedTransferredFile\nA description of a file from the perspective of the receiver."
  },
  {
    "title": "TransferRepresentationBuilder",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentationbuilder",
    "html": "Topics\nBuilding a transfer representation\nstatic func buildBlock<Content>(Content) -> Content\nPasses a single transfer representation to the builder unmodified.\nstatic func buildExpression<R>(R) -> R\nBuilds a transfer representation from an expression.\nstatic func buildExpression<Encoder, Decoder>(CodableRepresentation<Item, Encoder, Decoder>) -> CodableRepresentation<Item, Encoder, Decoder>\nBuilds an encodable and decodable transfer representation from an expression.\nCombining transfer representations\nstatic func buildBlock<C1, C2>(C1, C2) -> TupleTransferRepresentation<Item, (C1, C2)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3>(C1, C2, C3) -> TupleTransferRepresentation<Item, (C1, C2, C3)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4>(C1, C2, C3, C4) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5>(C1, C2, C3, C4, C5) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6>(C1, C2, C3, C4, C5, C6) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7>(C1, C2, C3, C4, C5, C6, C7) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9)>\nCombines multiple transfer representations into a single transfer representation.\nstatic func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(C1, C2, C3, C4, C5, C6, C7, C8, C9, C10) -> TupleTransferRepresentation<Item, (C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>\nCombines multiple transfer representations into a single transfer representation.\nSee Also\nSupporting types\nstruct TupleTransferRepresentation\nA wrapper type for tuples that contain transfer representations."
  },
  {
    "title": "TransferRepresentation",
    "url": "https://developer.apple.com/documentation/coretransferable/transferrepresentation",
    "html": "Overview\n\nCombine multiple existing transfer representations to compose a single transfer representation that describes how to transfer an item in multiple scenarios.\n\nThe following shows a Greeting type that transfers both as a Codable type and by proxy through its message string.\n\nimport UniformTypeIdentifiers\n\n\nstruct Greeting: Codable, Transferable {\n    let message: String\n    var displayInAllCaps: Bool = false\n\n\n    static var transferRepresentation: some TransferRepresentation {\n        CodableRepresentation(contentType: .greeting)\n        ProxyRepresentation(exporting: \\.message)\n    }\n}\n\n\nextension UTType {\n    static var greeting: UTType { .init(exportedAs: \"com.example.greeting\") }\n}\n\nTopics\nImplementing a transfer representation\nvar body: Self.Body\nA builder expression that describes the process of importing and exporting an item.\n\nRequired\n\nassociatedtype Body : TransferRepresentation\nThe transfer representation for the item.\n\nRequired\n\nassociatedtype Item : Transferable\nThe type of the item that’s being transferred.\n\nRequired\n\nConfiguring exports\nfunc exportingCondition((Self.Item) -> Bool) -> _ConditionalTransferRepresentation<Self>\nPrevents the system from exporting an item if it does not meet the supplied condition.\nControlling visibility\nfunc visibility(TransferRepresentationVisibility) -> some TransferRepresentation<Self.Item>\nSpecifies the kinds of apps and processes that can see an item in transit.\nInstance Methods\nfunc suggestedFileName(String) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nfunc suggestedFileName((Self.Item) -> String?) -> some TransferRepresentation<Self.Item>\nProvides a filename to use if the receiver chooses to write the item to disk.\nRelationships\nInherits From\nSendable\nConforming Types\nCodableRepresentation\nDataRepresentation\nFileRepresentation\nProxyRepresentation\nTupleTransferRepresentation\nSee Also\nEssentials\nprotocol Transferable\nA protocol that describes how a type interacts with transport APIs such as drag and drop or copy and paste.\nChoosing a transfer representation for a model type\nDefine a custom representation for your data using a combination of built-in types."
  },
  {
    "title": "Transferable",
    "url": "https://developer.apple.com/documentation/coretransferable/transferable",
    "html": "Overview\n\nTo conform to the Transferable protocol, implement the transferRepresentation property. For example, an image editing app’s layer type might conform to Transferable to let people drag and drop image layers to reorder them within a document.\n\nstruct ImageDocumentLayer {\n    init(data: Data)\n    func data() -> Data\n    func pngData() -> Data\n}\n\n\nThe following shows how you can extend ImageDocumentLayer to conform to Transferable:\n\nextension ImageDocumentLayer: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        DataRepresentation(contentType: .layer) { layer in\n                layer.data()\n            }, importing: { data in\n                try Layer(data: data)\n            }\n        DataRepresentation(exportedContentType: .png) { layer in\n            layer.pngData()\n    }\n}\n\n\nWhen people drag and drop a layer within the app or onto another app that recognizes the custom layer content type, the app uses the first representation. When people drag and drop the layer onto a different image editor, it’s likely that the editor recognizes the PNG file type. The second transfer representation adds support for PNG files.\n\nThe following declares the custom layer uniform type identifier:\n\nextension UTType {\n    static var layer: UTType { UTType(exportedAs: \"com.example.layer\") }\n}\n\n\nImportant\n\nIf your app declares custom uniform type identifiers, include corresponding entries in the app’s Info.plist. For more information, see Defining file and data types for your app.\n\nIf one of your existing types conforms to Codable, Transferable automatically handles conversion to and from Data. The following declares a simple Note structure that’s Codable and an extension to make it Transferable:\n\nstruct Note: Codable {\n    let title: String\n    let body: String\n}\n\n\nextension Note: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        CodableRepresentation(contentType: .note)\n    }\n}\n\n\nTo ensure compatibility with other apps that don’t know about the custom note type identifier, the following adds an additional transfer representation that converts the note to text.\n\nextension Note: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        CodableRepresentation(contentType: .note)\n        ProxyRepresentation(\\.title)\n    }\n}\n\n\nThe order of the representations in the transfer representation matters; place the representation that most accurately represents your type first, followed by a sequence of more compatible but less preferable representations.\n\nTopics\nImplementing a transfer representation\nstatic var transferRepresentation: Self.Representation\nThe representation used to import and export the item.\n\nRequired\n\nassociatedtype Representation : TransferRepresentation\nThe type of the representation used to import and export the item.\n\nRequired\n\nSee Also\nEssentials\nprotocol TransferRepresentation\nA declarative description of the process of importing and exporting a transferable item.\nChoosing a transfer representation for a model type\nDefine a custom representation for your data using a combination of built-in types."
  },
  {
    "title": "Choosing a transfer representation for a model type",
    "url": "https://developer.apple.com/documentation/coretransferable/choosing-a-transfer-representation-for-a-model-type",
    "html": "Overview\n\nWhen you enable types in your app to participate in system interactions like sharing or drag and drop, you get to decide how — and if — you expose your app’s model data to other apps. You can also control how different parts of your own app respond to receiving your models in different contexts.\n\nCore Transferable defines a set of transfer representations and modifiers that you can combine together in different ways to get the behavior that’s right for the different data transfer and sharing scenarios your app supports. For each of your app’s model types that participate in sharing and data transfer, pick the built-in transfer representations to represent your model’s data, or define your own. Then, determine whether your app allows people to share or receive the model’s data, or both.\n\nCompose transfer representations\n\nCore Transferable defines three main transfer representations: DataRepresentation, FileRepresentation, and CodableRepresentation. Use DataRepresentation for model types where the entire model is stored in memory, and use FileRepresentation for types stored on disk.\n\nYou use CodableRepresentation as convenient way to create a transfer representation if your model is already Codable or you can easily make it Codable. For more information on making a type Codable, see Encoding and Decoding Custom Types.\n\nImportant\n\nIf you use a CodableRepresentation, you’re often defining a new data type as well. As a result, include corresponding entries in the app’s Info.plist. For more information, see Defining file and data types for your app.\n\nUse the ProxyRepresentation type to let another type that conforms to Transferable take on the responsibility of representing your type. Common types like strings, data, and images are already Transferable, and you can use them as proxy representations in some common contexts.\n\nYou can combine multiple transfer representations together to support different clients or scenarios. For example, you can combine a CodableRepresentation with a ProxyRepresentation to let your app transfer its Note type to different parts of the app, but still maintain compatibility with other text editors:\n\nstruct Note: Transferable {\n    var title: String\n    static var transferRepresentation: some TransferRepresentation {\n        CodableRepresentation(contentType: .note)\n        ProxyRepresentation(\\.title)\n    }\n}\n\n\nextension UTType {\n     static var note: UTType { UTType(exportedAs: \"com.example.note\") }\n}\n\n\nThe order of the transfer representations in the transferRepresentation builder matters: the most preferable representation comes first, followed by the less preferable — but more compatible — representations.\n\nConfigure your model type for import or export\n\nYou can limit a transfer representation to support only importing, only exporting, or the representation can support both. Imports occur when your app is the recipient of an item from sharing, the drop of a drag-and-drop interaction, or the paste from a copy-and-paste interaction. Conversely, exports occur when people share, copy, or drag an item out of your app. For example, your vector image editing app might support exporting, but choose not to import PNG images.\n\nTransfer representation initializers control whether representations support sharing interactions for import and export. The following shows a data representation of tax information that can only import tax forms and can only output tax returns.\n\nstruct TaxInfo {\n    var forms: [TaxForm]\n    var year: Int\n\n\n    init(_ formsData: Data) { <# ... #> }\n    func generateReturnsData() -> Data { <# ... #> }\n}\n\n\nextension TaxInfo: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        DataRepresentation(importedContentType: .taxForm) { formsData in\n            TaxInfo(formsData)\n        }\n        DataRepresentation(exportedContentType: .taxReturn) { taxInfo in\n            taxInfo.generateReturnsData()\n        }\n    }\n}\n\n\nextension UTType {\n    static var taxForm = UTType(exportedAs: \"com.example.taxForm\")\n    static var taxReturn = UTType(exportedAs: \"com.example.taxReturn\")\n}\n\nSee Also\nEssentials\nprotocol Transferable\nA protocol that describes how a type interacts with transport APIs such as drag and drop or copy and paste.\nprotocol TransferRepresentation\nA declarative description of the process of importing and exporting a transferable item."
  },
  {
    "title": "ReceivedTransferredFile",
    "url": "https://developer.apple.com/documentation/coretransferable/receivedtransferredfile",
    "html": "Topics\nConfiguring a file transfer\nlet file: URL\nThe received file on disk.\nlet isOriginalFile: Bool\nA Boolean value that indicates whether the file’s URL points to the original file provided by the sender or to a copy.\nRelationships\nConforms To\nSendable\nSee Also\nFile transfer\nstruct FileRepresentation\nA transfer representation for types that transfer as a file URL.\nstruct SentTransferredFile\nA description of a file from the perspective of the sender."
  },
  {
    "title": "ProxyRepresentation",
    "url": "https://developer.apple.com/documentation/coretransferable/proxyrepresentation",
    "html": "Overview\n\nUse this representation to rely on an existing transfer representation that’s suitable for the type. For example, a Note type might use the String structure’s built-in Transferable conformance — a plain text representation — so it can be pasted into any text editor:\n\nstruct Note: Transferable {\n    var body: String\n\n\n    static var transferRepresentation: some TransferRepresentation {\n        ProxyRepresentation(\\.body)\n    }\n}\n\n\nProxyRepresentation makes it easy to provide alternative representations for receivers that don’t support the preferred custom format.\n\n struct Todo: Transferable, Codable {\n    var text: String\n    var isDone = false\n\n\n    static var transferRepresentation: some TransferRepresentation {\n        CodableRepresentation(contentType: .todo)\n        ProxyRepresentation(\\.text)\n    }\n}\n\n\n extension UTType {\n     static var todo: UTType { UTType(exportedAs: \"com.example.todo\") }\n }\n\n\nWrite the order of the representations in the transferRepresentation property from more preferred to less preferred. In the previous example, if the receiver knows about the custom com.example.todo content type, it will receive that custom content type. Using a ProxyRepresentation as the alternative lets people paste the to-do item in any text editor that doesn’t support the com.example.todo content type but works with text formats.\n\nProxyRepresentation is a convenience, and its evaluation isn’t supposed to be calculation-heavy. Don’t perform long-running work in exporting and importing closures. They shouldn’t contain network requests, file operations, or other potentially time-consuming tasks as they can cause delays during operations with Transferable items.\n\nUse FileRepresentation or DataRepresentation to read and write files or for other lengthy tasks.\n\nTopics\nInitializers\ninit(exporting: (Item) async throws -> ProxyRepresentation)\nCreates a transfer representation that’s exported by proxy through another transfer representation.\ninit(exporting: (Item) throws -> ProxyRepresentation)\nCreates a transfer representation that’s exported by proxy through another transfer representation.\ninit(exporting: (Item) throws -> ProxyRepresentation, importing: (ProxyRepresentation) throws -> Item)\nCreates a transfer representation that’s imported and exported by proxy through another transfer representation.\ninit(exporting: (Item) async throws -> ProxyRepresentation, importing: (ProxyRepresentation) async throws -> Item)\nCreates a transfer representation that’s imported and exported by proxy through another transfer representation.\ninit(exporting: (Item) throws -> ProxyRepresentation, importing: (ProxyRepresentation) async throws -> Item)\nCreates a transfer representation that’s imported and exported by proxy through another transfer representation.\ninit(importing: (ProxyRepresentation) async throws -> Item)\nCreates a transfer representation that’s imported by proxy through another transfer representation.\ninit(importing: (ProxyRepresentation) throws -> Item)\nCreates a transfer representation that’s imported by proxy through another transfer representation.\nType Aliases\ntypealias Body\nThe transfer representation for the item.\nDefault Implementations\nTransferRepresentation Implementations\nRelationships\nConforms To\nSendable\nTransferRepresentation\nSee Also\nTransfer customization\nstruct TransferRepresentationVisibility\nThe visibility levels that specify the kinds of apps and processes that can see an item in transit."
  },
  {
    "title": "TupleTransferRepresentation",
    "url": "https://developer.apple.com/documentation/coretransferable/tupletransferrepresentation",
    "html": "Topics\nBuilding a transfer representation\nvar body: some TransferRepresentation\nA builder expression that describes the process of importing and exporting an item.\nType Aliases\ntypealias Body\nThe transfer representation for the item.\nDefault Implementations\nTransferRepresentation Implementations\nRelationships\nConforms To\nSendable\nTransferRepresentation\nSee Also\nSupporting types\nstruct TransferRepresentationBuilder\nCreates a transfer representation by composing existing transfer representations."
  },
  {
    "title": "Core Transferable",
    "url": "https://developer.apple.com/documentation/CoreTransferable",
    "html": "Overview\n\nCore Transferable provides a modern, Swift-focused approach to make your types available in data transfer and sharing contexts. Use transferable types for system interactions that move or share data, like the Share button, drag and drop, and copy and paste.\n\nCore Transferable defines a core protocol, Transferable, that you adopt in your app’s model types. Provide a transfer representation by composing one or more of the framework’s built-in TransferRepresentation types. Use Transferable types together with system frameworks like SwiftUI — that include types such as ShareLink and PasteButton — to share and paste transferable data. SwiftUI also includes view modifiers like draggable(_:) and dropDestination(for:action:isTargeted:) that support drag-and-drop interactions using Transferable. System types like String, Data, URL, and Image already conform to Transferable.\n\nYou can send or receive Transferable items within an app, among a collection of your own apps, or between your apps and other apps that share an understanding of how to import or export a known data format. The following shows an example model type, Note, that’s extended to conform to Transferable:\n\nstruct Note: Codable {\n    var text: String\n    var url: URL\n\n\n    init(url: URL) {\n        self.url = url\n        self.text = \"\"\n    }\n}\n\n\nextension Note: Transferable {\n    static var transferRepresentation: some TransferRepresentation {\n        CodableRepresentation(contentType: .note)\n        ProxyRepresentation(exporting: \\.text)\n        FileRepresentation(\n            contentType: .utf8PlainText,\n            exporting: { note in SentTransferredFile(note.url) },\n            importing: { received in\n                let destination = URL(fileURLWithPath: <# ... #>)\n                try FileManager.default.copyItem(at: received.file, to: destination)\n                return Self.init(url: destination) })\n        }\n}\n\n\nextension UTType {\n    static var note = UTType(exportedAs: \"com.example.note\")\n}\n\n\nUse Core Transferable along with the collection of common file and data transfer identifiers from the Uniform Type Identifiers framework to take advantage of system interactions that move and share data using standard file types or your own custom-defined file types.\n\nTopics\nEssentials\nprotocol Transferable\nA protocol that describes how a type interacts with transport APIs such as drag and drop or copy and paste.\nprotocol TransferRepresentation\nA declarative description of the process of importing and exporting a transferable item.\nChoosing a transfer representation for a model type\nDefine a custom representation for your data using a combination of built-in types.\nData transfer\nstruct CodableRepresentation\nA transfer representation for types that participate in Swift’s protocols for encoding and decoding.\nstruct DataRepresentation\nA transfer representation for types that provide their own binary data conversion.\nFile transfer\nstruct FileRepresentation\nA transfer representation for types that transfer as a file URL.\nstruct SentTransferredFile\nA description of a file from the perspective of the sender.\nstruct ReceivedTransferredFile\nA description of a file from the perspective of the receiver.\nTransfer customization\nstruct ProxyRepresentation\nA transfer representation that uses another type’s transfer representation as its own.\nstruct TransferRepresentationVisibility\nThe visibility levels that specify the kinds of apps and processes that can see an item in transit.\nSupporting types\nstruct TransferRepresentationBuilder\nCreates a transfer representation by composing existing transfer representations.\nstruct TupleTransferRepresentation\nA wrapper type for tuples that contain transfer representations."
  }
]