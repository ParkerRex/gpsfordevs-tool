[
  {
    "title": "storefrontId",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/storefrontid",
    "html": "Discussion\n\nThis value is the same as the id value in StoreKit.\n\nSee Also\nStorefront info\ntype storefront\nThe three-letter code that represents the country or region associated with the App Store storefront of the purchase."
  },
  {
    "title": "offerDiscountType",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/offerdiscounttype",
    "html": "Possible Values\nFREE_TRIAL\n\nA payment mode of a product discount that indicates a free trial.\n\nPAY_AS_YOU_GO\n\nA payment mode of a product discount that is billed over a single or multiple billing periods.\n\nPAY_UP_FRONT\n\nA payment mode of a product discount that is paid up front.\n\nDiscussion\n\nYou set up subscription offers and determine the payment mode when you configure subscriptions in App Store Connect. For more information about the Free Trial, Pay As You Go, and Pay Up Front payment modes, see Pricing and availability.\n\nFor more information about configuring subscription offers, see: Set up introductory offers for auto-renewable subscriptions, Set up promotional offers for auto-renewable subscriptions, and Set up offer codes.\n\nSee Also\nPromotional offers\ntype offerIdentifier\nThe identifier that contains the offer code or the promotional offer identifier.\ntype offerType\nThe type of subscription offer."
  },
  {
    "title": "expiresDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/expiresdate",
    "html": "Discussion\n\nThe expiresDate is a static value that applies for each transaction. When the auto-renewable subscription renews, the App Store creates a new transaction with a new expiresDate.\n\nSee Also\nSubscription renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason an auto-renewable subscription expired.\ntype isUpgraded\nThe Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires.\ntype status\nThe status of an auto-renewable subscription."
  },
  {
    "title": "purchaseDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/purchasedate",
    "html": "Discussion\n\nThe purchase date is in UNIX time, in milliseconds.\n\nSee Also\nPurchase dates\ntype originalPurchaseDate\nThe purchase date of the transaction associated with the original transaction identifier.\ntype recentSubscriptionStartDate\nThe earliest start date of a subscription in a series of auto-renewable subscription purchases that ignores all lapses of paid service shorter than 60 days."
  },
  {
    "title": "TestNotificationNotFoundError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/testnotificationnotfounderror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4040008\nerrorMessage\nstring\n\nAllow more time and try again if you recently called Request a Test Notification.\n\nValue: Either the test notification token is expired or the notification and status are not yet available.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date."
  },
  {
    "title": "InvalidStartDateError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidstartdateerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000015\nerrorMessage\nstring\nValue: Invalid request. The start date is not a timestamp value represented in milliseconds.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "inAppOwnershipType",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/inappownershiptype",
    "html": "Possible Values\nFAMILY_SHARED\n\nThe transaction belongs to a family member who benefits from service.\n\nPURCHASED\n\nThe transaction belongs to the purchaser."
  },
  {
    "title": "succeededCount",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/succeededcount",
    "html": "Discussion\n\nFor information about a subscription’s eligibility to receive a subscription-renewal-date extension, see Extending the renewal date for auto-renewable subscriptions.\n\nSee Also\nData types\ntype complete\nA Boolean value that indicates whether the App Store completed the request to extend a subscription renewal date to active subscribers.\ntype completeDate\nThe UNIX time, in milliseconds, that the App Store completes a request to extend a subscription renewal date for eligible subscribers.\ntype failedCount\nThe count of subscriptions that fail to receive a subscription-renewal-date extension."
  },
  {
    "title": "MultipleFiltersSuppliedError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/multiplefilterssuppliederror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000019\nerrorMessage\nstring\nValue: Invalid request. Supply either a transaction id or a notification type, but not both.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "currency",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/currency",
    "html": "Discussion\n\nThe currency property contains an ISO 4217 alpha-3 string that represents the currency of the price of the product.\n\nImportant\n\nDon't use the price or currency values for any revenue reconciliation or recognition. App Store Connect reporting is your source of record for financial and accounting purposes. For more information, see Overview of reporting tools.\n\nDon’t use the currency to infer the storefront. Use the storefront value in the transaction, instead.\n\nFor more information on how you set prices, see Set a price and Set a price for an in-app purchase.\n\nSee Also\nProduct price and currency\ntype price\nThe price, in milliunits, of the in-app purchase or subscription offer that you configured in App Store Connect."
  },
  {
    "title": "StartDateTooFarInPastError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/startdatetoofarinpasterror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000012\nerrorMessage\nstring\nValue: Invalid request. The start date is earlier than the allowed start date.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "InvalidPaginationTokenError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidpaginationtokenerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000014\nerrorMessage\nstring\nValue: Invalid request. The pagination token is invalid.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "originalPurchaseDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/originalpurchasedate",
    "html": "Discussion\n\nThe original purchase date is in UNIX time, in milliseconds.\n\nSee Also\nPurchase dates\ntype purchaseDate\nThe time that the App Store charged the user’s account for an in-app purchase, a restored in-app purchase, a subscription, or a subscription renewal after a lapse.\ntype recentSubscriptionStartDate\nThe earliest start date of a subscription in a series of auto-renewable subscription purchases that ignores all lapses of paid service shorter than 60 days."
  },
  {
    "title": "attemptDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/attemptdate",
    "html": "See Also\nData types\ntype sendAttemptResult\nThe success or error information the App Store server records when it attempts to send an App Store server notification to your server."
  },
  {
    "title": "InvalidEndDateError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidenddateerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000016\nerrorMessage\nstring\nValue: Invalid request. The end date is not a timestamp value represented in milliseconds.\nSee Also\nNotification test and history errors\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "completeDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/completedate",
    "html": "Discussion\n\nFor more information about a requesting a subscription-renewal-date extension, see Extend Subscription Renewal Dates for All Active Subscribers.\n\nSee Also\nData types\ntype complete\nA Boolean value that indicates whether the App Store completed the request to extend a subscription renewal date to active subscribers.\ntype failedCount\nThe count of subscriptions that fail to receive a subscription-renewal-date extension.\ntype succeededCount\nThe count of subscriptions that successfully receive a subscription-renewal-date extension."
  },
  {
    "title": "SubscriptionMaxExtensionError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/subscriptionmaxextensionerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4030005\nerrorMessage\nstring\nValue: Forbidden - subscription has reached maximum extension count.\nDiscussion\n\nThis error applies to the Extend a Subscription Renewal Date endpoint.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "SubscriptionExtensionIneligibleError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/subscriptionextensionineligibleerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4030004\nerrorMessage\nstring\nValue: Forbidden - subscription state ineligible for extension.\nDiscussion\n\nThis error applies to the Extend a Subscription Renewal Date endpoint.\n\nAuto-renewable subscriptions in the following states aren’t eligible for renewal date extensions:\n\nSubscriptions in a free offer period\n\nInactive subscriptions in a billing retry state\n\nSubscriptions in a grace period state with an expiration date in the past\n\nSubscriptions that have already received two renewal date extensions within the past 365 days\n\nExpired subscriptions\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "InvalidUserStatusError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invaliduserstatuserror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000042\nerrorMessage\nstring\nValue: Invalid request. The user status field is invalid.\nDiscussion\n\nFor valid userStatus values in a ConsumptionRequest, see userStatus.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type."
  },
  {
    "title": "paginationToken",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/paginationtoken",
    "html": "Discussion\n\nA token you use in the Get Notification History endpoint to ask for the next set of up to 20 notification history entries. All responses include a paginationToken.\n\nSee Also\nData types\ntype hasMore\nA Boolean value indicating whether the App Store has more transaction data."
  },
  {
    "title": "price",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/price",
    "html": "Discussion\n\nThis value represents the price, in milliunits of the currency, of the in-app purchase or subscription offer that you configured in App Store Connect. One unit of the currency equals 1,000 milliunits.\n\nThe following table shows some examples of the price and currency parameters based on sample prices you might configure in App Store Connect:\n\nPrice configured in App Store Connect\n\n\t\n\nprice parameter\n\n\t\n\ncurrency parameter\n\n\n\n\n$1.99 (US dollar)\n\n\t\n\n1990\n\n\t\n\nUSD\n\n\n\n\nKRW 3,300 (South Korean won)\n\n\t\n\n3300000\n\n\t\n\nKRW\n\n\n\n\nJPY 300 (Japanese Yen)\n\n\t\n\n300000\n\n\t\n\nJPY\n\nTo determine the storefront, use the storefront value in the transaction. Don’t use the currency to infer the storefront.\n\nImportant\n\nDon’t use the price or currency values for any revenue reconciliation or recognition. App Store Connect reporting is your source of record for financial and accounting purposes. For more information, see Overview of reporting tools.\n\nFor more information on how you set prices, see Set a price and Set a price for an in-app purchase.\n\nSee Also\nProduct price and currency\ntype currency\nThe three-letter ISO 4217 currency code for the price of the product."
  },
  {
    "title": "quantity",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/quantity",
    "html": "See Also\nProduct information\ntype productId\nThe unique identifier for the product, that you create in App Store Connect.\ntype type\nThe type of in-app purchase products you can offer in your app.\ntype subscriptionGroupIdentifier\nThe identifier of the subscription group that the subscription belongs to."
  },
  {
    "title": "type",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/type",
    "html": "Possible Values\nAuto-Renewable Subscription\n\nAn auto-renewable subscription\n\nNon-Consumable\n\nA nonconsumable in-app purchase\n\nConsumable\n\nA consumable in-app purchase\n\nNon-Renewing Subscription\n\nA non-renewing subscription\n\nSee Also\nProduct information\ntype productId\nThe unique identifier for the product, that you create in App Store Connect.\ntype subscriptionGroupIdentifier\nThe identifier of the subscription group that the subscription belongs to.\ntype quantity\nThe number of consumable products purchased."
  },
  {
    "title": "transactionReason",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/transactionreason",
    "html": "Possible Values\nPURCHASE\n\nThe customer initiated the purchase, which may be for any in-app purchase type: consumable, non-consumable, non-renewing subscription, or auto-renewable subscription.\n\nRENEWAL\n\nThe App Store server initiated the purchase transaction to renew an auto-renewable subscription.\n\nDiscussion\n\nIf a customer upgrades an auto-renewable subscription, the upgrade is effective immediately and the transactionReason is PURCHASE.\n\nIf a customer downgrades an auto-renewable subscription, the product change occurs on the subscription renewal date. The resulting transactionReason is RENEWAL."
  },
  {
    "title": "requestIdentifier",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/requestidentifier",
    "html": "Discussion\n\nYou provide a requestIdentifier in the request body when you call the Extend Subscription Renewal Dates for All Active Subscribers and Extend a Subscription Renewal Date endpoints.\n\nThe API returns the same request identifier in its response, so you can match your request with the related response. The App Store Server Notifications V2 also include this request identifier in notifications related to the Extend Subscription Renewal Dates for All Active Subscribers endpoint. For more information, see the RENEWAL_EXTENSION notificationType.\n\nTo resend the same request due to a timeout or other error, use the same request identifier. Otherwise, create a unique request identifer for each different subscription-renewal-date extension request.\n\nImportant\n\nProvide a UUID value for the requestIdentifier when calling the Extend Subscription Renewal Dates for All Active Subscribers endpoint.\n\nThe maximum string length is 128 characters.\n\nSee Also\nRequest data types\ntype extendByDays\nThe number of days to extend the subscription renewal date.\ntype extendReasonCode\nThe code that represents the reason for the subscription-renewal-date extension."
  },
  {
    "title": "revocationReason",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/revocationreason",
    "html": "Possible Values\n0\n\nThe App Store refunded the transaction on behalf of the customer for other reasons, for example, an accidental purchase.\n\n1\n\nThe App Store refunded the transaction on behalf of the customer due to an actual or perceived issue within your app.\n\nSee Also\nRevocation date and reason\ntype revocationDate\nThe UNIX time, in milliseconds, that the App Store refunded the transaction or revoked it from Family Sharing."
  },
  {
    "title": "storefront",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/storefront",
    "html": "Discussion\n\nThis property uses the ISO 3166-1 alpha-3 country code representation. This property is the same as the countryCode in StoreKit.\n\nSee Also\nStorefront info\ntype storefrontId\nAn Apple-defined value that uniquely identifies an App Store storefront."
  },
  {
    "title": "isUpgraded",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/isupgraded",
    "html": "Discussion\n\nIf isUpgraded is true, the user has upgraded the subscription represented by this transaction to another subscription. This value appears in the transaction only when it’s true. To determine the service that the customer is entitled to, look for another transaction that has a subscription with a higher level of service.\n\nSee Also\nSubscription renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason an auto-renewable subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires.\ntype status\nThe status of an auto-renewable subscription."
  },
  {
    "title": "priceIncreaseStatus",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/priceincreasestatus",
    "html": "Possible Values\n0\n\nThe customer hasn’t yet responded to an auto-renewable subscription price increase that requires customer consent.\n\n1\n\nThe customer consented to an auto-renewable subscription price increase that requires customer consent, or the App Store has notified the customer of an auto-renewable subscription price increase that doesn’t require consent."
  },
  {
    "title": "renewalDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/renewaldate",
    "html": "Discussion\n\nThe renewalDate is a value that’s always present in the payload for auto-renewable subscriptions, even for expired subscriptions. This date indicates the expiration date of the most recent auto-renewable subscription purchase, including renewals, and may be in the past. For subscriptions that renew successfully, the renewalDate is the date when the subscription renews.\n\nSee Also\nSubscription renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason an auto-renewable subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nThe Boolean value that indicates whether the user upgraded to another subscription.\ntype status\nThe status of an auto-renewable subscription."
  },
  {
    "title": "x5c",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/x5c",
    "html": "Discussion\n\nFor more information, or to download Apple’s root and intermediate certificates, see Apple PKI.\n\nSee Also\nData types\ntype alg\nAn algorithm used to sign a JSON Web Signature."
  },
  {
    "title": "recentSubscriptionStartDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/recentsubscriptionstartdate",
    "html": "Discussion\n\nThe recent subscription start date is in UNIX time, in milliseconds.\n\nUse the recentSubscriptionStartDate to identify the earliest start date of a subscription in a series of auto-renewable subscription purchases that the customer maintained continuously, or that has one or more gaps of less than 60 days each.\n\nThe App Store calculates the recentSubscriptionStartDate by finding the start date of the most recent auto-renewable subscription purchase that’s preceded by a gap in paid service of more than 60 days in the production environment, or 10 minutes in the sandbox environment. The start date includes any free trials or promotional purchases. If no such gap exists — for example, if the user has only ever purchased one subscription — the recentSubscriptionStartDate is the same as the subscription’s originalPurchaseDate.\n\nThe recentSubscriptionStartDate calculation counts a grace period or a billing retry state as a gap in the paid service.\n\nImportant\n\nDon’t use the recentSubscriptionStartDate date to calculate days of paid service. For more information about paid days of service, see Net revenue after a year.\n\nThis date applies to active or expired subscriptions. For example, if a subscriber purchases an auto-renewable subscription on June 1, 2022 and lets it expire on December 31, 2022, the App Store determines the recent subscription start date as follows:\n\nInitially, the recentSubscriptionStartDate is the same as the originalPurchaseDate: June 1, 2022.\n\nIf the customer purchases the subscription again on February 1, 2023, less than 60 days after the initial subscription expired, the recentSubscriptionStartDate remains June 1, 2022.\n\nIf the customer purchases the subscription again on April 1, 2023, more than 60 days after the first subscription expired, the App Store updates the recentSubscriptionStartDate to April 1, 2023.\n\nSee Also\nPurchase dates\ntype originalPurchaseDate\nThe purchase date of the transaction associated with the original transaction identifier.\ntype purchaseDate\nThe time that the App Store charged the user’s account for an in-app purchase, a restored in-app purchase, a subscription, or a subscription renewal after a lapse."
  },
  {
    "title": "alg",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/alg",
    "html": "See Also\nData types\ntype x5c\nThe JSON Web Signature (JWS) header parameter that contains the certificate chain that corresponds to the key used to digitally sign the JWS."
  },
  {
    "title": "offerIdentifier",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/offeridentifier",
    "html": "Discussion\n\nThe offerIdentifier applies only when the offerType has a value of 2 or 3.\n\nThe offerIdentifier provides details about the subscription offer in effect for the transaction. Its value is either the offer code or the promotional offer.\n\nFor more information on offer codes, see Supporting subscription offer codes in your app and Set up offer codes. For more information on promotional offers, see Set up promotional offers for auto-renewable subscriptions.\n\nSee Also\nPromotional offers\ntype offerType\nThe type of subscription offer.\ntype offerDiscountType\nThe payment mode you configure for an introductory offer, promotional offer, or offer code on an auto-renewable subscription."
  },
  {
    "title": "offerType",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/offertype",
    "html": "Possible Values\n1\n\nAn introductory offer.\n\n2\n\nA promotional offer.\n\n3\n\nAn offer with a subscription offer code.\n\nDiscussion\n\nThe offer types 2 and 3 have an offerIdentifier.\n\nFor more information about introductory offers, see Implementing introductory offers in your app. For more information about promotional offers, see Set up promotional offers for auto-renewable subscriptions. For more information about promo codes, see Promo codes overview.\n\nSee Also\nPromotional offers\ntype offerIdentifier\nThe identifier that contains the offer code or the promotional offer identifier.\ntype offerDiscountType\nThe payment mode you configure for an introductory offer, promotional offer, or offer code on an auto-renewable subscription."
  },
  {
    "title": "expirationIntent",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/expirationintent",
    "html": "Possible Values\n1\n\nThe customer canceled their subscription.\n\n2\n\nBilling error; for example, the customer’s payment information is no longer valid.\n\n3\n\nThe customer didn’t consent to an auto-renewable subscription price increase that requires customer consent, allowing the subscription to expire.\n\n4\n\nThe product wasn’t available for purchase at the time of renewal.\n\n5\n\nThe subscription expired for some other reason.\n\nSee Also\nSubscription renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nThe Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires.\ntype status\nThe status of an auto-renewable subscription."
  },
  {
    "title": "gracePeriodExpiresDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/graceperiodexpiresdate",
    "html": "Discussion\n\nFor more information about billing grace periods, see Enable Billing Grace Period for auto-renewable subscriptions.\n\nSee Also\nBilling status\ntype isInBillingRetryPeriod\nA Boolean value that indicates whether the App Store is attempting to automatically renew an expired subscription."
  },
  {
    "title": "isInBillingRetryPeriod",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/isinbillingretryperiod",
    "html": "See Also\nBilling status\ntype gracePeriodExpiresDate\nThe time when the Billing Grace Period for subscription renewals expires."
  },
  {
    "title": "GeneralInternalRetryableError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/generalinternalretryableerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 5000001\nerrorMessage\nstring\nValue: An unknown error occurred. Please try again.\nSee Also\nErrors to retry\nobject AccountNotFoundRetryableError\nAn error response that indicates the App Store account wasn’t found, but you can try again.\nobject AppNotFoundRetryableError\nAn error response that indicates the app wasn’t found, but you can try again.\nobject OriginalTransactionIdNotFoundRetryableError\nAn error response that indicates the original transaction identifier wasn’t found, but you can try again."
  },
  {
    "title": "consumptionStatus",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/consumptionstatus",
    "html": "Possible Values\n0\n\nThe consumption status is undeclared. Use this value to avoid providing information for this field.\n\n1\n\nThe in-app purchase is not consumed.\n\n2\n\nThe in-app purchase is partially consumed.\n\n3\n\nThe in-app purchase is fully consumed.\n\nDiscussion\n\nSome examples of consumption status include the following scenarios:\n\nScenario 1: A user purchases a “bag of 100 coins” in your app and spends all 100 coins. The in-app purchase is considered fully consumed.\n\nScenario 2: If your app has an exchange platform that has bartering, or if your app transferred an in-app purchase from one account to another user’s account, the in-app purchase is considered fully consumed.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "AccountNotFoundRetryableError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/accountnotfoundretryableerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4040002\nerrorMessage\nstring\nValue: Account not found. Please try again.\nSee Also\nErrors to retry\nobject AppNotFoundRetryableError\nAn error response that indicates the app wasn’t found, but you can try again.\nobject GeneralInternalRetryableError\nAn error response that indicates an unknown error occurred, but you can try again.\nobject OriginalTransactionIdNotFoundRetryableError\nAn error response that indicates the original transaction identifier wasn’t found, but you can try again."
  },
  {
    "title": "AppNotFoundError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/appnotfounderror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4040003\nerrorMessage\nstring\nValue: App not found.\nDiscussion\n\nCheck the bid claim in the JSON Web Token (JWT) to make sure that your app’s bundle ID is correct. For more information, see Generating JSON Web Tokens for API requests.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "accountTenure",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/accounttenure",
    "html": "Possible Values\n0\n\nAccount age is undeclared. Use this value to avoid providing information for this field.\n\n1\n\nAccount age is between 0–3 days.\n\n2\n\nAccount age is between 3–10 days.\n\n3\n\nAccount age is between 10–30 days.\n\n4\n\nAccount age is between 30–90 days.\n\n5\n\nAccount age is between 90–180 days.\n\n6\n\nAccount age is between 180–365 days.\n\n7\n\nAccount age is over 365 days.\n\nSee Also\nConsumption Data Types\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "InvalidInAppOwnershipTypeError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidinappownershiptypeerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000026\nerrorMessage\nstring\nValue: Invalid request. The in-app ownership type parameter is invalid.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "autoRenewStatus",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/autorenewstatus",
    "html": "Possible Values\n0\n\nAutomatic renewal is off. The customer has turned off automatic renewal for the subscription, and it won’t renew at the end of the current subscription period.\n\n1\n\nAutomatic renewal is on. The subscription renews at the end of the current subscription period.\n\nSee Also\nSubscription renewal and expiration\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason an auto-renewable subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nThe Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires.\ntype status\nThe status of an auto-renewable subscription."
  },
  {
    "title": "InvalidSortError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidsorterror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000021\nerrorMessage\nstring\nValue: Invalid request. The sort parameter is invalid.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "autoRenewProductId",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/autorenewproductid",
    "html": "See Also\nSubscription renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype expirationIntent\nThe reason an auto-renewable subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nThe Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires.\ntype status\nThe status of an auto-renewable subscription."
  },
  {
    "title": "SubscriptionGroupIdentifierItem",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/subscriptiongroupidentifieritem",
    "html": "Properties\nsubscriptionGroupIdentifier\nsubscriptionGroupIdentifier\n\nThe subscription group identifier of the auto-renewable subscriptions in the lastTransactions array.\n\nlastTransactions\n[lastTransactionsItem]\n\nAn array of the most recent App Store-signed transaction information and App Store-signed renewal information for all auto-renewable subscriptions in the subscription group.\n\nTopics\nObject and Data Types\ntype subscriptionGroupIdentifier\nThe identifier of the subscription group that the subscription belongs to.\nobject lastTransactionsItem\nThe most recent App Store-signed transaction information and App Store-signed renewal information for an auto-renewable subscription.\nSee Also\nResponse Objects and Data Types\ntype environment\nThe server environment, either sandbox or production.\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app."
  },
  {
    "title": "InvalidSubscriptionGroupIdentifierError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidsubscriptiongroupidentifiererror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000024\nerrorMessage\nstring\nValue: Invalid request. The subscription group identifier parameter is invalid.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "InvalidTestNotificationTokenError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidtestnotificationtokenerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000020\nerrorMessage\nstring\n\nGet a valid testNotificationToken from the SendTestNotificationResponse.\n\nValue: Invalid request. The test notification token is invalid.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "transactionId",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/transactionid",
    "html": "Discussion\n\nIn a purchase transaction, the transactionId matches the original transaction identifier, originalTransactionId. When a customer restores a purchase or renews a subscription, the transactionId differs.\n\nSee Also\nTransaction identifiers\ntype originalTransactionId\nThe original transaction identifier of a purchase.\ntype webOrderLineItemId\nThe unique identifier of subscription-purchase events across devices, including renewals."
  },
  {
    "title": "subscriptionGroupIdentifier",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/subscriptiongroupidentifier",
    "html": "Discussion\n\nAuto-renewable subscriptions always belong to a subscription group. You create the subscription group identifiers in App Store Connect before you create and add an auto-renewable subscription. For more information about subscription groups, see Offer auto-renewable subscriptions.\n\nSee Also\nProduct information\ntype productId\nThe unique identifier for the product, that you create in App Store Connect.\ntype type\nThe type of in-app purchase products you can offer in your app.\ntype quantity\nThe number of consumable products purchased."
  },
  {
    "title": "failedCount",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/failedcount",
    "html": "Discussion\n\nFor information about retrying a renewal date extension when if fails, see Extending the renewal date for auto-renewable subscriptions.\n\nSee Also\nData types\ntype complete\nA Boolean value that indicates whether the App Store completed the request to extend a subscription renewal date to active subscribers.\ntype completeDate\nThe UNIX time, in milliseconds, that the App Store completes a request to extend a subscription renewal date for eligible subscribers.\ntype succeededCount\nThe count of subscriptions that successfully receive a subscription-renewal-date extension."
  },
  {
    "title": "lastTransactionsItem",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/lasttransactionsitem",
    "html": "Properties\noriginalTransactionId\noriginalTransactionId\n\nThe original transaction identifier of the auto-renewable subscription.\n\nstatus\nstatus\n\nThe status of the auto-renewable subscription.\n\nsignedRenewalInfo\nJWSRenewalInfo\n\nThe subscription renewal information signed by the App Store, in JSON Web Signature (JWS) format.\n\nsignedTransactionInfo\nJWSTransaction\n\nThe transaction information signed by the App Store, in JWS format.\n\nTopics\nData Types\ntype originalTransactionId\nThe original transaction identifier of a purchase.\ntype status\nThe status of an auto-renewable subscription.\ntype JWSRenewalInfo\nSubscription renewal information, signed by the App Store, in JSON Web Signature (JWS) format.\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\nSee Also\nObject and Data Types\ntype subscriptionGroupIdentifier\nThe identifier of the subscription group that the subscription belongs to."
  },
  {
    "title": "ServerNotificationURLNotFoundError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/servernotificationurlnotfounderror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4040007\nerrorMessage\nstring\n\nFor more information about configuring App Store Server Notifications in App Store Connect, see Enter a URL for App Store server notifications. Check that you’ve configured a server notifications URL for the production environment or sandbox enviroment, whichever you’re using.\n\nValue: No App Store Server Notification URL found for provided app. Check that a URL is configured in App Store Connect for this environment.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "StartDateAfterEndDateError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/startdateafterenddateerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000013\nerrorMessage\nstring\nValue: Invalid request. The end date precedes the start date or the dates are the same.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "JWSTransaction",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/jwstransaction",
    "html": "Discussion\n\nThe JWSTransaction type is a string of three Base64 URL-encoded components, separated by a period. The string contains transaction information signed by the App Store according to the JSON Web Signature (JWS) IETF RFC 7515 specification.\n\nThe three components of the string are a header, a payload, and a signature.\n\nTo read the transaction information, decode the payload. Use a JWSTransactionDecodedPayload object to read the payload information.\n\nTo read the header, decode it and use a JWSDecodedHeader object to access the information. Use the information in the header to verify the signature.\n\nSee Also\nJWS headers and payloads\ntype JWSRenewalInfo\nSubscription renewal information, signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSDecodedHeader\nA decoded JSON Web Signature (JWS) header containing transaction or renewal information.\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\nData types\nData types to use in decoded transaction payloads and renewal info payloads."
  },
  {
    "title": "signedPayload",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/signedpayload",
    "html": "Discussion\n\nThe signedPayload is a string of three Base64 URL-encoded components, separated by a period.\n\nFor more information, see signedPayload in App Store Server Notifications.\n\nSee Also\nData types\ntype sendAttemptResult\nThe success or error information the App Store server records when it attempts to send an App Store server notification to your server.\nobject sendAttemptItem\nThe success or error information and the date the App Store server records when it attempts to send a server notification to your server."
  },
  {
    "title": "PaginationTokenExpiredError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/paginationtokenexpirederror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000017\nerrorMessage\nstring\nValue: Invalid request. The pagination token is expired.\nDiscussion\n\nWhen calling Get Notification History, use the same NotificationHistoryRequest body on subsequent page requests that include a pagination token in the query.\n\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "notificationSubtype",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/notificationsubtype",
    "html": "Discussion\n\nFor the list of notification subtypes available in App Store Server Notifications, see subtype.\n\nSee Also\nData types\ntype startDate\nThe start date of a timespan, expressed in UNIX time, in milliseconds.\ntype endDate\nThe end date of a timespan, expressed in UNIX time, in milliseconds.\ntype notificationType\nA notification type value that App Store Server Notifications 2 uses.\ntype onlyFailures\nA Boolean value that indicates whether the response includes only notifications that failed to reach your server."
  },
  {
    "title": "onlyFailures",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/onlyfailures",
    "html": "Discussion\n\nA value of true indicates that you want to receive just the App Store server notifications that failed to reach your server, including those that the App Store server is currently retrying.\n\nSee Also\nData types\ntype startDate\nThe start date of a timespan, expressed in UNIX time, in milliseconds.\ntype endDate\nThe end date of a timespan, expressed in UNIX time, in milliseconds.\ntype notificationType\nA notification type value that App Store Server Notifications 2 uses.\ntype notificationSubtype\nA notification subtype value that App Store Server Notifications 2 uses."
  },
  {
    "title": "storefrontCountryCodes",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/storefrontcountrycodes",
    "html": "Discussion\n\nYou provide the list of storefront country codes in the MassExtendRenewalDateRequest to limit the storefronts in which the App Store extends the subscription renewal date. To indicate that the extension applies in all storefronts, omit the storefrontCountryCodes object from the MassExtendRenewalDateRequest object.\n\nSee Also\nData types\ntype extendByDays\nThe number of days to extend the subscription renewal date.\ntype extendReasonCode\nThe code that represents the reason for the subscription-renewal-date extension.\ntype productId\nThe product identifier of the in-app purchase.\ntype requestIdentifier\nA string that contains a unique identifier you provide to track each subscription-renewal-date extension request.\ntype storefrontCountryCode\nThe three-letter code that represents the country or region associated with the App Store storefront."
  },
  {
    "title": "storefrontCountryCode",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/storefrontcountrycode",
    "html": "Discussion\n\nThis type uses the ISO 3166-1 Alpha-3 country code representation.\n\nSee Also\nData types\ntype extendByDays\nThe number of days to extend the subscription renewal date.\ntype extendReasonCode\nThe code that represents the reason for the subscription-renewal-date extension.\ntype productId\nThe product identifier of the in-app purchase.\ntype requestIdentifier\nA string that contains a unique identifier you provide to track each subscription-renewal-date extension request.\ntype storefrontCountryCodes\nA list of storefront country codes you provide to limit the storefronts for a subscription-renewal-date extension."
  },
  {
    "title": "success",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/success",
    "html": "Discussion\n\nIf this value is true, the renewal date for the subscription is extended.\n\nSee Also\nResponse data types\ntype effectiveDate\nThe new subscription expiration date for a subscription-renewal extension.\ntype originalTransactionId\nThe original transaction identifier of a purchase.\ntype webOrderLineItemId\nThe unique identifier of subscription-purchase events across devices, including renewals."
  },
  {
    "title": "extendByDays",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/extendbydays",
    "html": "Discussion\n\nThe number of days is a number from 1 to 90.\n\nSee Also\nRequest data types\ntype extendReasonCode\nThe code that represents the reason for the subscription-renewal-date extension.\ntype requestIdentifier\nA string that contains a unique identifier you provide to track each subscription-renewal-date extension request."
  },
  {
    "title": "webOrderLineItemId",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/weborderlineitemid",
    "html": "Discussion\n\nThis value applies only to auto-renewable subscriptions.\n\nSee Also\nTransaction identifiers\ntype originalTransactionId\nThe original transaction identifier of a purchase.\ntype transactionId\nThe unique identifier for a transaction such as an in-app purchase, restored in-app purchase, or subscription renewal."
  },
  {
    "title": "FamilySharedSubscriptionExtensionIneligibleError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/familysharedsubscriptionextensionineligibleerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4030007\nerrorMessage\nstring\nValue: Subscriptions that users obtain through Family Sharing can't get a renewal date extension directly.\nDiscussion\n\nA request returns this error if you call the Extend a Subscription Renewal Date endpoint with an originalTransactionId that belongs to a subscription the user obtains through Family Sharing.\n\nWhen the endpoint extends an eligible purchased subscription that supports Family Sharing, it automatically extends the family members’ subscriptions as well. However, the endpoint doesn’t support requests to extend a family member’s subscription directly.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "InvalidExtendByDaysError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidextendbydayserror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000009\nerrorMessage\nstring\nValue: Invalid extend by days value.\nDiscussion\n\nThis error applies to the extendByDays you provide in the Extend a Subscription Renewal Date and Extend Subscription Renewal Dates for All Active Subscribers endpoints.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "OriginalTransactionIdNotFoundError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/originaltransactionidnotfounderror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4040005\nerrorMessage\nstring\nValue: Original transaction id not found.\nDiscussion\n\nTo resolve this error, check your request to ensure that:\n\nThe JSON Web Token (JWT) payload contains the bundle ID (bid) of your app that’s associated with the transaction ID. For more information, see Generating JSON Web Tokens for API requests.\n\nYou’re making the request in the same environment, production or sandbox, that generated the transaction ID.\n\nDon’t unlock the service or content associated with the transaction ID for the app bundle ID and environment that you indicate in the request until you resolve this error.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "InvalidOriginalTransactionIdError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidoriginaltransactioniderror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000008\nerrorMessage\nstring\nValue: Invalid original transaction id.\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "InvalidRequestIdentifierError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidrequestidentifiererror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000011\nerrorMessage\nstring\nValue: Invalid request identifier.\nDiscussion\n\nThis error applies to the requestIdentifier you provide in the Extend a Subscription Renewal Date, Extend Subscription Renewal Dates for All Active Subscribers, and Get Status of Subscription Renewal Date Extensions endpoints.\n\nFor the Extend Subscription Renewal Dates for All Active Subscribers and Get Status of Subscription Renewal Date Extensions endpoints, the requestIdentifier needs to be a UUID.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "InvalidExtendReasonCodeError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidextendreasoncodeerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000010\nerrorMessage\nstring\nValue: Invalid extend reason code.\nDiscussion\n\nThis error applies to the extendReasonCode you provide in the Extend a Subscription Renewal Date and Extend Subscription Renewal Dates for All Active Subscribers endpoints.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "revocationDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/revocationdate",
    "html": "See Also\nRevocation date and reason\ntype revocationReason\nThe reason for a refunded transaction."
  },
  {
    "title": "hasMore",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/hasmore",
    "html": "Discussion\n\nThis value is true if the App Store has more transactions for the customer. Call the endpoint again, including the revision or paginationToken query parameter, to get the next set of transactions.\n\nIf this value is false, there aren’t any additional transactions.\n\nThe hasMore value appears in responses to endpoints that provide paginated results, such as NotificationHistoryResponse, HistoryResponse, and RefundHistoryResponse.\n\nSee Also\nResponse data types\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype environment\nThe server environment, either sandbox or production.\ntype revision\nA token you use in a query to request the next set of transactions for the customer.\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format."
  },
  {
    "title": "InvalidRequestRevisionError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidrequestrevisionerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000005\nerrorMessage\nstring\nValue: Invalid request revision.\nDiscussion\n\nThis error applies to the revision query parameter of endpoints like Get Transaction History and Get Refund History.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "InvalidRefundPreferenceError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidrefundpreferenceerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000044\nerrorMessage\nstring\nValue: Invalid request. The refund preference field is invalid.\nDiscussion\n\nThis error applies to the refundPreference value you provide in a ConsumptionRequest.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "OrderLookupStatus",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/orderlookupstatus",
    "html": "Possible Values\n0\n\nThe orderId that you provided in the Look Up Order ID request is valid and contains at least one in-app purchase for your app.\n\n1\n\nThe orderId is invalid or doesn't contain any in-app purchases for your app."
  },
  {
    "title": "InvalidPlayTimeError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidplaytimeerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000040\nerrorMessage\nstring\nValue: Invalid request. The playtime field is invalid.\nDiscussion\n\nFor valid playTime values in a ConsumptionRequest, see playTime.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "InvalidSampleContentProvidedError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidsamplecontentprovidederror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000041\nerrorMessage\nstring\nValue: Invalid request. The sample content provided field is invalid.\nDiscussion\n\nFor valid sampleContentProvided values in a ConsumptionRequest, see sampleContentProvided.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "InvalidPlatformError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidplatformerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000039\nerrorMessage\nstring\nValue: Invalid request. The platform field is invalid.\nDiscussion\n\nFor valid platform values in a ConsumptionRequest, see platform.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "InvalidCustomerConsentedError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidcustomerconsentederror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000035\nerrorMessage\nstring\nValue: Invalid request. The customer consented field is required and must indicate the customer consented.\nDiscussion\n\nIf the customerConsented field in a ConsumptionRequest is any value other than true, the App Store server rejects the request. For more information, see customerConsented.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "InvalidLifetimeDollarsRefundedError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidlifetimedollarsrefundederror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000038\nerrorMessage\nstring\nValue: Invalid request. The lifetime dollars refunded field is invalid.\nDiscussion\n\nFor valid lifetimeDollarsRefunded values in a ConsumptionRequest, see lifetimeDollarsRefunded.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "InvalidLifetimeDollarsPurchasedError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidlifetimedollarspurchasederror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000037\nerrorMessage\nstring\nValue: Invalid request. The lifetime dollars purchased field is invalid.\nDiscussion\n\nFor valid lifetimeDollarsPurchased values in a ConsumptionRequest, see lifetimeDollarsPurchased.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "InvalidDeliveryStatusError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invaliddeliverystatuserror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000036\nerrorMessage\nstring\nValue: Invalid request. The delivery status field is invalid.\nDiscussion\n\nFor valid deliveryStatus values in a ConsumptionRequest, see deliveryStatus.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "userStatus",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/userstatus",
    "html": "Possible Values\n0\n\nAccount status is undeclared. Use this value to avoid providing information for this field.\n\n1\n\nThe customer’s account is active.\n\n2\n\nThe customer’s account is suspended.\n\n3\n\nThe customer’s account is terminated.\n\n4\n\nThe customer’s account has limited access.\n\nDiscussion\n\nThis user status represents the standing of a customer account in your app.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality."
  },
  {
    "title": "refundPreference",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/refundpreference",
    "html": "Possible Values\n0\n\nThe refund preference is undeclared. Use this value to avoid providing information for this field.\n\n1\n\nYou prefer that Apple grants the refund.\n\n2\n\nYou prefer that Apple declines the refund.\n\n3\n\nYou have no preference whether Apple grants or declines the refund.\n\nDiscussion\n\nYour refund preference is one of a variety of factors that the App Store uses to inform its refund decisions.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "sampleContentProvided",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/samplecontentprovided",
    "html": "Discussion\n\nSet this value to true if you provided any of the following prior to the customer’s purchase:\n\nA free sample or free trial of the purchased content\n\nInformation about the content and how it works, such as expected game play\n\nSet this value to false otherwise.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "AppNotFoundRetryableError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/appnotfoundretryableerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4040004\nerrorMessage\nstring\nValue: App not found. Please try again.\nSee Also\nErrors to retry\nobject AccountNotFoundRetryableError\nAn error response that indicates the App Store account wasn’t found, but you can try again.\nobject GeneralInternalRetryableError\nAn error response that indicates an unknown error occurred, but you can try again.\nobject OriginalTransactionIdNotFoundRetryableError\nAn error response that indicates the original transaction identifier wasn’t found, but you can try again."
  },
  {
    "title": "playTime",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/playtime",
    "html": "Possible Values\n0\n\nThe engagement time is undeclared. Use this value to avoid providing information for this field.\n\n1\n\nThe engagement time is between 0–5 minutes.\n\n2\n\nThe engagement time is between 5–60 minutes.\n\n3\n\nThe engagement time is between 1–6 hours.\n\n4\n\nThe engagement time is between 6–24 hours.\n\n5\n\nThe engagement time is between 1–4 days.\n\n6\n\nThe engagement time is between 4–16 days.\n\n7\n\nThe engagement time is over 16 days.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "lifetimeDollarsRefunded",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/lifetimedollarsrefunded",
    "html": "Possible Values\n0\n\nLifetime refund amount is undeclared. Use this value to avoid providing information for this field.\n\n1\n\nLifetime refund amount is 0 USD.\n\n2\n\nLifetime refund amount is between 0.01–49.99 USD.\n\n3\n\nLifetime refund amount is between 50–99.99 USD.\n\n4\n\nLifetime refund amount is between 100–499.99 USD.\n\n5\n\nLifetime refund amount is between 500–999.99 USD.\n\n6\n\nLifetime refund amount is between 1000–1999.99 USD.\n\n7\n\nLifetime refund amount is over 2000 USD.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "InvalidStatusError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidstatuserror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000031\nerrorMessage\nstring\nValue: Invalid request. The status parameter is invalid.\nDiscussion\n\nThe Get All Subscription Statuses endpoint returns this error if you provide an invalid status query parameter.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "deliveryStatus",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/deliverystatus",
    "html": "Possible Values\n0\n\nThe app delivered the consumable in-app purchase and it’s working properly.\n\n1\n\nThe app didn’t deliver the consumable in-app purchase due to a quality issue.\n\n2\n\nThe app delivered the wrong item.\n\n3\n\nThe app didn’t deliver the consumable in-app purchase due to a server outage.\n\n4\n\nThe app didn’t deliver the consumable in-app purchase due to an in-game currency change.\n\n5\n\nThe app didn’t deliver the consumable in-app purchase for other reasons.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "lifetimeDollarsPurchased",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/lifetimedollarspurchased",
    "html": "Possible Values\n0\n\nLifetime purchase amount is undeclared. Use this value to avoid providing information for this field.\n\n1\n\nLifetime purchase amount is 0 USD.\n\n2\n\nLifetime purchase amount is between 0.01–49.99 USD.\n\n3\n\nLifetime purchase amount is between 50–99.99 USD.\n\n4\n\nLifetime purchase amount is between 100–499.99 USD.\n\n5\n\nLifetime purchase amount is between 500–999.99 USD.\n\n6\n\nLifetime purchase amount is between 1000–1999.99 USD.\n\n7\n\nLifetime purchase amount is over 2000 USD.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "customerConsented",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/customerconsented",
    "html": "Discussion\n\nSet this field to true if the user provided consent to send the App Store the consumption data related to their refund request, including all the data you provide in the ConsumptionRequest request body. If not, don’t respond to the CONSUMPTION_REQUEST notification.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "InvalidTransactionIdError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidtransactioniderror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000006\nerrorMessage\nstring\nValue: Invalid transaction id.\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "appAccountToken",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/appaccounttoken",
    "html": "Discussion\n\nWhen a customer initiates an in-app purchase, you can optionally generate an appAccountToken(_:) and send it to the App Store. If you use the Original API for in-app purchase, you may provide a UUID in the applicationUsername property. The App Store returns the same UUID in appAccountToken in the transaction information after the customer completes the purchase.\n\nThe ConsumptionRequest response body requires that you set the appAccountToken value to a valid value of either a UUID or an empty string. Set the appAccountToken value to the value you received in the CONSUMPTION_REQUEST notification, or, if you choose not to provide this information, set the value to an empty string.\n\nIf you receive a CONSUMPTION_REQUEST notification for a transaction, find its associated appAccountToken value as follows:\n\nIf you receive App Store Server Notifications version 2, the appAccountToken value is in JWSTransactionDecodedPayload.\n\nIf you receive App Store Server Notifications version 1, the appAccountToken value is in unified_receipt.Latest_receipt_info.\n\nThe appAccountToken value may be an empty string if your app doesn’t use app account tokens.\n\nFor more information about App Store Server Notifications versions, see App Store Server Notifications changelog.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "AccountNotFoundError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/accountnotfounderror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4040001\nerrorMessage\nstring\nValue: Account not found.\nSee Also\nErrors\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "InvalidAppIdentifierError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidappidentifiererror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000002\nerrorMessage\nstring\nValue: Invalid request app identifier.\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "originalTransactionId",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/originaltransactionid",
    "html": "Discussion\n\nThe App Store generates an original transaction identifier when a customer makes a successful in-app purchase. Most App Store Server API endpoints require an originalTransactionId.\n\nThere are several ways to obtain this value: from your app after a user makes a successful in-app purchase, from transaction information provided in App Store Server Notifications, or from App Store Receipts for apps that use the Original API for in-app purchase.\n\nTo get the original transaction identifier from your app, use the originalID property of the Transaction object that represents the in-app purchase.\n\nIf you’ve enabled App Store Server Notifications, your server receives notifications for in-app purchase events that include the transaction information with the original transaction identifier. For more information, see responseBodyV1 and responseBodyV2DecodedPayload.\n\nIf your app uses the Original API for in-app purchase, the original transaction identifier is the transactionIdentifier property in the SKPaymentTransaction object. For restored purchases, the original transaction identifier is found in the transactionIdentifier of the original property. If you verify receipts using verifyReceipt, the original transaction identifier is the original_transaction_id value.\n\nUse the value of the original transaction identifier that you get from your app, a notification, or a receipt as the value for originalTransactionId when you send requests to the App Store Server API.\n\nTip\n\nIf you maintain a database to manage your subscribers, save the original transaction identifier to uniquely identify auto-renewable subscriptions.\n\nSee Also\nTransaction identifiers\ntype transactionId\nThe unique identifier for a transaction such as an in-app purchase, restored in-app purchase, or subscription renewal.\ntype webOrderLineItemId\nThe unique identifier of subscription-purchase events across devices, including renewals."
  },
  {
    "title": "status",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/status",
    "html": "Possible Values\n1\n\nThe auto-renewable subscription is active.\n\n2\n\nThe auto-renewable subscription is expired.\n\n3\n\nThe auto-renewable subscription is in a billing retry period.\n\n4\n\nThe auto-renewable subscription is in a Billing Grace Period.\n\n5\n\nThe auto-renewable subscription is revoked. The App Store refunded the transaction or revoked it from Family Sharing.\n\nDiscussion\n\nFor more information about the Billing Grace Period, see Enable Billing Grace Period for auto-renewable subscriptions.\n\nSee Also\nSubscription renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason an auto-renewable subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nThe Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires."
  },
  {
    "title": "InvalidRevokedError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidrevokederror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000030\nerrorMessage\nstring\nValue: Invalid request. The revoked parameter is invalid.\nDiscussion\n\nThe Get Transaction History returns this error if you provide an invalid value for the revoked query parameter.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "OriginalTransactionIdNotFoundRetryableError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/originaltransactionidnotfoundretryableerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4040006\nerrorMessage\nstring\nValue: Original transaction id not found. Please try again.\nSee Also\nErrors to retry\nobject AccountNotFoundRetryableError\nAn error response that indicates the App Store account wasn’t found, but you can try again.\nobject AppNotFoundRetryableError\nAn error response that indicates the app wasn’t found, but you can try again.\nobject GeneralInternalRetryableError\nAn error response that indicates an unknown error occurred, but you can try again."
  },
  {
    "title": "InvalidTransactionNotConsumableError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidtransactionnotconsumableerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000043\nerrorMessage\nstring\nValue: Invalid request. The transaction id parameter must represent a consumable in-app purchase.\nDiscussion\n\nThe system no longer sends this error.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "InvalidExcludeRevokedError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidexcluderevokederror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000025\nerrorMessage\nstring\nValue: Invalid request. The exclude revoked parameter is invalid.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "bundleId",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/bundleid",
    "html": "See Also\nResponse data types\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype environment\nThe server environment, either sandbox or production.\ntype hasMore\nA Boolean value indicating whether the App Store has more transaction data.\ntype revision\nA token you use in a query to request the next set of transactions for the customer.\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format."
  },
  {
    "title": "InvalidProductTypeError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidproducttypeerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000022\nerrorMessage\nstring\nValue: Invalid request. The product type parameter is invalid.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "appAppleId",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/appappleid",
    "html": "See Also\nResponse data types\ntype bundleId\nThe bundle identifier of an app.\ntype environment\nThe server environment, either sandbox or production.\ntype hasMore\nA Boolean value indicating whether the App Store has more transaction data.\ntype revision\nA token you use in a query to request the next set of transactions for the customer.\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format."
  },
  {
    "title": "testNotificationToken",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/testnotificationtoken",
    "html": "Discussion\n\nYou receive a testNotificationToken when you call the Request a Test Notification endpoint. Use the testNotificationToken to learn your server’s response to the test by calling Get Test Notification Status."
  },
  {
    "title": "sendAttemptResult",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/sendattemptresult",
    "html": "Possible Values\nSUCCESS\n\nThe App Store server received a success response when it sent the notification to your server.\n\nCIRCULAR_REDIRECT\n\nThe App Store server detected a continual redirect. Check your server’s redirects for a circular redirect loop.\n\nINVALID_RESPONSE\n\nThe App Store server received an invalid response from your server.\n\nNO_RESPONSE\n\nThe App Store server didn’t receive a valid HTTP response from your server.\n\nOTHER\n\nAnother error occurred that prevented your server from receiving the notification.\n\nPREMATURE_CLOSE\n\nThe App Store server’s connection to your server was closed while the send was in progress.\n\nSOCKET_ISSUE\n\nA network error caused the notification attempt to fail.\n\nTIMED_OUT\n\nThe App Store server didn’t get a response from your server and timed out. Check that your server isn’t processing messages in line.\n\nTLS_ISSUE\n\nThe App Store server couldn’t establish a TLS session or validate your certificate. Check that your server has a valid certificate and supports Transport Layer Security (TLS) protocol 1.2 or later.\n\nUNSUCCESSFUL_HTTP_RESPONSE_CODE\n\nThe App Store server didn’t receive an HTTP 200 response from your server.\n\nUNSUPPORTED_CHARSET\n\nThe App Store server doesn’t support the supplied charset.\n\nDiscussion\n\nThe Get Notification History and Get Test Notification Status endpoints return a sendAttemptResult for each notification attempt in their responses. This value describes the success or error the server encountered on its attempt to send the notification to your server.\n\nIn the production environment, the App Store server retries sending the notfications if it doesn’t receive a 200 response from your server. Your server may have successfully received the notification on the App Store server’s subsequent attempt if the sendAttemptResult value shows an error.\n\nIn the sandbox environment, the App Store server attempts to send the notification one time.\n\nFor more information about the timing of retry attempts, see Responding to App Store Server Notifications.\n\nSee Also\nData types\nobject sendAttemptItem\nThe success or error information and the date the App Store server records when it attempts to send a server notification to your server.\ntype signedPayload\nA cryptographically signed payload, in JSON Web Signature (JWS) format, containing the response body for a version 2 notification."
  },
  {
    "title": "complete",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/complete",
    "html": "Discussion\n\nThe request is complete when this value is TRUE. For more information about the subscription-renewal-date extension, see Extend Subscription Renewal Dates for All Active Subscribers.\n\nSee Also\nData types\ntype completeDate\nThe UNIX time, in milliseconds, that the App Store completes a request to extend a subscription renewal date for eligible subscribers.\ntype failedCount\nThe count of subscriptions that fail to receive a subscription-renewal-date extension.\ntype succeededCount\nThe count of subscriptions that successfully receive a subscription-renewal-date extension."
  },
  {
    "title": "sendAttemptItem",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/sendattemptitem",
    "html": "Properties\nattemptDate\nattemptDate\n\nThe date the App Store server attempts to send the notification.\n\nsendAttemptResult\nsendAttemptResult\n\nThe success or error information the App Store server records when it attempts to send an App Store server notification to your server.\n\nTopics\nData types\ntype attemptDate\nThe date the App Store server attempts to send a notification.\ntype sendAttemptResult\nThe success or error information the App Store server records when it attempts to send an App Store server notification to your server.\nSee Also\nData types\ntype sendAttemptResult\nThe success or error information the App Store server records when it attempts to send an App Store server notification to your server.\ntype signedPayload\nA cryptographically signed payload, in JSON Web Signature (JWS) format, containing the response body for a version 2 notification."
  },
  {
    "title": "InvalidNotificationTypeError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidnotificationtypeerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000018\nerrorMessage\nstring\n\nFor a list of valid notification types and subtypes, see notificationType and subtype. If you provide both a notification type and subtype, ensure the two are a valid combination, as documented on subtype.\n\nValue: Invalid request. The notification type or subtype is invalid.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "notificationType",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/notificationtype",
    "html": "Discussion\n\nFor the list of notification types available in App Store Server Notifications version 2, see notificationType.\n\nSee Also\nData types\ntype startDate\nThe start date of a timespan, expressed in UNIX time, in milliseconds.\ntype endDate\nThe end date of a timespan, expressed in UNIX time, in milliseconds.\ntype notificationSubtype\nA notification subtype value that App Store Server Notifications 2 uses.\ntype onlyFailures\nA Boolean value that indicates whether the response includes only notifications that failed to reach your server."
  },
  {
    "title": "startDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/startdate",
    "html": "Discussion\n\nThe start date must be earlier than the endDate.\n\nSee Also\nData types\ntype endDate\nThe end date of a timespan, expressed in UNIX time, in milliseconds.\ntype notificationType\nA notification type value that App Store Server Notifications 2 uses.\ntype notificationSubtype\nA notification subtype value that App Store Server Notifications 2 uses.\ntype onlyFailures\nA Boolean value that indicates whether the response includes only notifications that failed to reach your server."
  },
  {
    "title": "endDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/enddate",
    "html": "Discussion\n\nThe end date must be later than the startDate.\n\nSee Also\nData types\ntype startDate\nThe start date of a timespan, expressed in UNIX time, in milliseconds.\ntype notificationType\nA notification type value that App Store Server Notifications 2 uses.\ntype notificationSubtype\nA notification subtype value that App Store Server Notifications 2 uses.\ntype onlyFailures\nA Boolean value that indicates whether the response includes only notifications that failed to reach your server."
  },
  {
    "title": "InvalidStorefrontCountryCodeError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidstorefrontcountrycodeerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000028\nerrorMessage\nstring\nValue: Invalid request. A storefront country code was invalid.\nDiscussion\n\nThis error applies to the storefrontCountryCodes list you provide in the MassExtendRenewalDateRequest object for the Extend Subscription Renewal Dates for All Active Subscribers endpoint.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "InvalidEmptyStorefrontCountryCodeListError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidemptystorefrontcountrycodelisterror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000027\nerrorMessage\nstring\nValue: Invalid request. If provided, the list of storefront country codes must not be empty.\nDiscussion\n\nThis error applies to the Extend Subscription Renewal Dates for All Active Subscribers endpoint. If your request applies to all storefronts, omit the storefrontCountryCodes list from the MassExtendRenewalDateRequest object.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "StatusRequestNotFoundError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/statusrequestnotfounderror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4040009\nerrorMessage\nstring\nValue: The server didn't find a subscription-renewal-date extension request for this requestIdentifier and productId combination.\nDiscussion\n\nThis error applies to the Get Status of Subscription Renewal Date Extensions endpoint. Check that the productId and requestIdentifier parameters match the values associated with your request to the Extend Subscription Renewal Dates for All Active Subscribers endpoint.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "InvalidProductIdError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidproductiderror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000023\nerrorMessage\nstring\nValue: Invalid request. The product id parameter is invalid.\nSee Also\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "productId",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/productid",
    "html": "See Also\nProduct information\ntype type\nThe type of in-app purchase products you can offer in your app.\ntype subscriptionGroupIdentifier\nThe identifier of the subscription group that the subscription belongs to.\ntype quantity\nThe number of consumable products purchased."
  },
  {
    "title": "effectiveDate",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/effectivedate",
    "html": "See Also\nResponse data types\ntype originalTransactionId\nThe original transaction identifier of a purchase.\ntype success\nA Boolean value that indicates whether the subscription-renewal-date extension succeeded.\ntype webOrderLineItemId\nThe unique identifier of subscription-purchase events across devices, including renewals."
  },
  {
    "title": "extendReasonCode",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/extendreasoncode",
    "html": "Possible Values\n0\n\nUndeclared; no information provided.\n\n1\n\nThe renewal-date extension is for customer satisfaction.\n\n2\n\nThe renewal-date extension is for other reasons.\n\n3\n\nThe renewal-date extension is due to a service issue or outage.\n\nDiscussion\n\nFor more information about requesting subscription-renewal-date extensions, see Extending the renewal date for auto-renewable subscriptions.\n\nSee Also\nRequest data types\ntype extendByDays\nThe number of days to extend the subscription renewal date.\ntype requestIdentifier\nA string that contains a unique identifier you provide to track each subscription-renewal-date extension request."
  },
  {
    "title": "GeneralBadRequestError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/generalbadrequesterror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000000\nerrorMessage\nstring\nValue: Bad request.\nDiscussion\n\nA bad request error typically occurs when the server receives a malformed request or a request that contains incorrect syntax.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "InvalidTransactionTypeNotSupportedError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidtransactiontypenotsupportederror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000047\nerrorMessage\nstring\nValue: Invalid request. The transaction id doesn't represent a supported in-app purchase type.\nDiscussion\n\nThe Send Consumption Information endpoint returns this error if the transactionId doesn't represent a supported in-app purchase. Be sure to provide the same transactionId that you receive to your App Store Server Notifications V2 endpoint in a notification with a CONSUMPTION_REQUEST notificationType.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "TransactionInfoResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/transactioninforesponse",
    "html": "Properties\nsignedTransactionInfo\nJWSTransaction\n\nA customer’s in-app purchase transaction, signed by Apple, in JSON Web Signature (JWS) format.\n\nDiscussion\n\nThe TransactionInfoResponse contains information about the transaction that you request using the Get Transaction Info endpoint. The transactionId in the signedTransactionInfo matches the transactionId you provide in the request path.\n\nTopics\nResponse data types\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\nSee Also\nTransaction information\nGet Transaction Info\nGet information about a single transaction for your app."
  },
  {
    "title": "revision",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/revision",
    "html": "Discussion\n\nThe App Store server returns a revision value in each response to certain endpoints, such as Get Transaction History and Get Refund History. Use the revision value to get a set of paginated transactions.\n\nThe first time you call an endpoint, you don't include a revision query parameter, and the API returns the customer’s first set of up to 20 transactions. If there are more transactions, the hasMore value in the response is true. To get the next set of transactions, use the revision value from the response in your subsequent call to the endpoint.\n\nConsider storing the revision value from the last page of transactions, when the hasMore value is false, with other customer account information. Use it the next time you call the endpoint for the same customer, to avoid fetching transactions you've already received. For the Get Transaction History endpoint, store the revision value only if you request the transaction history in ASCENDING sort order.\n\nSee Also\nResponse data types\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype environment\nThe server environment, either sandbox or production.\ntype hasMore\nA Boolean value indicating whether the App Store has more transaction data.\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format."
  },
  {
    "title": "InvalidAccountTenureError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidaccounttenureerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000032\nerrorMessage\nstring\nValue: Invalid request. The account tenure field is invalid.\nDiscussion\n\nFor more information about accountTenure values in a ConsumptionRequest, see accountTenure.\n\nSee Also\nConsumption request errors\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "InvalidAppAccountTokenError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidappaccounttokenerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000033\nerrorMessage\nstring\nValue: Invalid request. The app account token field must contain a valid UUID or an empty string.\nDiscussion\n\nFor more information about the appAccountToken field in a ConsumptionRequest, see appAccountToken.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "InvalidConsumptionStatusError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/invalidconsumptionstatuserror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4000034\nerrorMessage\nstring\nValue: Invalid request. The consumption status field is invalid.\nDiscussion\n\nFor more information about the consumptionStatus field in a ConsumptionRequest, see consumptionStatus.\n\nSee Also\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid."
  },
  {
    "title": "App Store Server API changelog",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/app_store_server_api_changelog",
    "html": "Overview\n\nUse this changelog to learn about feature updates, deprecations, and removals for the App Store Server API.\n\n1.11 — 2024/04/11\n\nNew features\n\nAdded the refundPreference field to the ConsumptionRequest request body.\n\nSend Consumption Information added support for receiving information for auto-renewable subscriptions.\n\nAdded the InvalidTransactionTypeNotSupportedError error object.\n\nRemovals\n\nThe system no longer sends the InvalidTransactionNotConsumableError error object. It uses InvalidTransactionTypeNotSupportedError instead.\n\n1.10.1 — 2024/03/12\n\nThe type of the price field changed from int32 to int64.\n\nServer update — 2024/02/29\n\nNew features\n\nThe Get Notification History endpoint adds support for the new notification type for unreported external purchase tokens.\n\n1.10 — 2023/10/26\n\nNew features\n\nAdded the following new properties in the decoded transaction payload JWSTransactionDecodedPayload: price, currency, and offerDiscountType.\n\n1.9 — 2023/09/27\n\nNew features\n\nUpdated the error format of the Send Consumption Information endpoint to match that of other endpoints. The endpoint now returns a JSON body that can contain an error code.\n\nNew error codes for the Send Consumption Information endpoint include: InvalidAccountTenureError, InvalidAppAccountTokenError, InvalidConsumptionStatusError, InvalidCustomerConsentedError, InvalidDeliveryStatusError, InvalidLifetimeDollarsPurchasedError, InvalidLifetimeDollarsRefundedError, InvalidPlatformError, InvalidPlayTimeError, InvalidSampleContentProvidedError, InvalidTransactionNotConsumableError, InvalidUserStatusError.\n\n1.8 — 2023/06/05\n\nNew features\n\nAdded a new endpoint Get Transaction Info with its response TransactionInfoResponse, which provides information about a single transaction.\n\nThe Get Notification History endpoint adds a new filter parameter, onlyFailures. When you set it to true, the endpoint returns only the notifications that failed to reach the developer’s server.\n\nThe following endpoints changed their path parameters from originalTransactionId to transactionId: Get All Subscription Statuses, Get Transaction History, Get Refund History, and Send Consumption Information. These endpoints now accept any transaction identifier, including original transaction identifiers.\n\nThe Get Notification History endpoint now accepts a transactionId instead of requiring an original transaction identifier (originalTransactionId) in the NotificationHistoryRequest body.\n\nThe Get Transaction History endpoint adds a new filter parameter, revoked, that filters the response to return only revoked transactions or only nonrevoked transactions.\n\nThe Get All Subscription Statuses endpoint adds a new filter parameter, status, that enables you to request subscriptions with the status values you specify.\n\nAdded the storefront, storefrontId, and transactionReason fields to the JWSTransactionDecodedPayload object.\n\nAdded the renewalDate field to the JWSRenewalInfoDecodedPayload object.\n\nAdded the sendAttempts field to the CheckTestNotificationResponse and the notificationHistoryResponseItem of the NotificationHistoryResponse to provide information about all the send attempts for App Store Server Notifications.\n\nAdded the error codes FamilySharedSubscriptionExtensionIneligibleError, StatusRequestNotFoundError, InvalidStatusError, InvalidRevokedError, InvalidTransactionIdError, TransactionIdNotFoundError, and RateLimitExceededError.\n\nAll endpoints are subject to a rate limit and can return a RateLimitExceededError with an HTTP 429 error code. For more information, see Identifying rate limits.\n\nDeprecations\n\nThe excludeRevoked filter in Get Transaction History is deprecated. Use the new revoked filter instead.\n\nThe firstSendAttemptResult field is deprecated in the CheckTestNotificationResponse and notificationHistoryResponseItem objects. Use the first sendAttemptItem in the sendAttempts array instead.\n\n1.7 — 2023/01/30\n\nNew features\n\nThe new endpoint Extend Subscription Renewal Dates for All Active Subscribers takes a subscription product identifier and extends the renewal date for all eligible subscribers. It responds with MassExtendRenewalDateResponse. For more information, see Extending the renewal date for auto-renewable subscriptions. For information about new App Store server notifications related to this endpoint, see the App Store Server Notifications changelog.\n\nThe new endpoint Get Status of Subscription Renewal Date Extensions checks the status of a subscription-renewal-date extension, and responds with the MassExtendRenewalDateStatusResponse.\n\n1.6 — 2022/08/08\n\nNew features\n\nThe new version 2 endpoint Get Refund History returns a paginated list of refunded transactions in the RefundHistoryResponse.\n\nDeprecations\n\nThe endpoint Get Refund History V1 and its response RefundLookupResponse are deprecated.\n\nIn firstSendAttemptResult, the SSL_ISSUE value is deprecated and replaced with TLS_ISSUE.\n\n1.5 — 2022/06/06\n\nNew features\n\nThe API has two new endpoints to support testing how your server receives App Store Server Notifications. The endpoints are: Request a Test Notification and Get Test Notification Status.\n\nThe API adds the new Get Notification History endpoint.\n\nThe Get Transaction History endpoint is enhanced with new parameters to support filtering and sorting functionality.\n\nThe JWSRenewalInfoDecodedPayload now includes the recentSubscriptionStartDate field.\n\n1.4\n\nThis version doesn’t contain any public changes.\n\n1.3\n\nThis version doesn’t contain any public changes.\n\nServer update — 2022/03/17\n\nRemovals\n\nThe JWSDecodedHeader object no longer includes the kid field.\n\n1.2 — 2022/02/24\n\nNew features\n\nThe JWSTransactionDecodedPayload and JWSRenewalInfoDecodedPayload objects now include the environment field.\n\nServer update — 2022/02/23\n\nThe Get Refund History V1 endpoint now returns a maximum of 50 refunded transactions.\n\n1.1 — 2022/10/21\n\nNew features\n\nThe API adds three endpoints: Look Up Order ID, Get Refund History V1, and Extend a Subscription Renewal Date.\n\nServer update — 2021/09/20\n\nThe API is now available in the production environment, using the following base URL:\n\nhttps://api.storekit.itunes.apple.com/inApps/\n\n\n1.0b1 — 2021/06/07\n\nInitial version of the App Store Server API.\n\nNew features\n\nThis API has three endpoints, available in the sandbox environment: Get Transaction History, Send Consumption Information, and Get All Subscription Statuses.\n\nSee Also\nEssentials\nSimplifying your implementation by using the App Store Server Library\nUse Apple’s open source library to create JSON Web Tokens (JWT) to authorize your calls, verify transactions, extract transaction identifiers from receipts, and more.\nCreating API keys to authorize API requests\nCreate API keys you use to sign JSON Web Tokens and authorize API requests.\nGenerating JSON Web Tokens for API requests\nCreate JSON Web Tokens signed with your private key to authorize requests for App Store Server API and External Purchase Server API.\nIdentifying rate limits\nRecognize the rate limits that apply to App Store Server API endpoints and handle them in your code."
  },
  {
    "title": "RateLimitExceededError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/ratelimitexceedederror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4290000\nerrorMessage\nstring\nValue: Rate limit exceeded.\nDiscussion\n\nFor more information, including a list of endpoints and their rate limits, see Identifying rate limits.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "platform",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/platform",
    "html": "Possible Values\n0\n\nThe platform is undeclared. Use this value to avoid providing information for this field.\n\n1\n\nAn Apple platform.\n\n2\n\nNon-Apple platform.\n\nSee Also\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app."
  },
  {
    "title": "GeneralInternalError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/generalinternalerror",
    "html": "Properties\nerrorCode\nnumber\nValue: 5000000\nerrorMessage\nstring\nValue: An unknown error occurred.\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found."
  },
  {
    "title": "Get Transaction Info",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/get_transaction_info",
    "html": "URL\nGET https://api.storekit.itunes.apple.com/inApps/v1/transactions/{transactionId}\nSandbox URL\nGET https://api.storekit-sandbox.itunes.apple.com/inApps/v1/transactions/{transactionId}\nPath Parameters\ntransactionId\ntransactionId\n(Required) \n\nThe identifier of a transaction that belongs to the customer, and which may be an original transaction identifier (originalTransactionId).\n\nResponse Codes\n200\nTransactionInfoResponse\nOK\n\nRequest succeeded.\n\nContent-Type: application/json\n400\nInvalidTransactionIdError\nBad Request\n\nInvalid request.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n404\nTransactionIdNotFoundError\nNot Found\n\nThe transaction identifier wasn’t found.\n\nContent-Type: application/json\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nServer error. Try again later.\n\nContent-Type: application/json\nDiscussion\n\nUse this endpoint to get transaction information for any transaction identifier, including original transaction identifiers. This endpoint supports all in-app purchase types, including consumable, non-consumable, non-renewing subscriptions, and auto-renewable subscriptions. It also supports transactions that your app marked as finished using finish() or finishTransaction(_:) in StoreKit.\n\nSee Also\nTransaction information\nobject TransactionInfoResponse\nA response that contains signed transaction information for a single transaction."
  },
  {
    "title": "Get Transaction History",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/get_transaction_history",
    "html": "URL\nGET https://api.storekit.itunes.apple.com/inApps/v1/history/{transactionId}\nSandbox URL\nGET https://api.storekit-sandbox.itunes.apple.com/inApps/v1/history/{transactionId}\nPath Parameters\ntransactionId\ntransactionId\n(Required) \n\nThe identifier of a transaction that belongs to the customer, and which may be an original transaction identifier (originalTransactionId).\n\nQuery Parameters\nrevision\nrevision\n\nA token you provide to get the next set of up to 20 transactions. All responses include a revision token. Use the revision token from the previous HistoryResponse.\n\nNote: The revision token is required in all requests except the initial request. For requests that use the revision token, include the same query parameters from the initial request.\n\nstartDate\nstartDate\n\nAn optional start date of the timespan for the transaction history records you’re requesting. The startDate needs to precede the endDate if you specify both dates. The results include a transaction if its purchaseDate is equal to or greater than the startDate.\n\nendDate\nendDate\n\nAn optional end date of the timespan for the transaction history records you’re requesting. Choose an endDate that’s later than the startDate if you specify both dates. Using an endDate in the future is valid. The results include a transaction if its purchaseDate is earlier than the endDate.\n\nproductId\n[productId]\n\nAn optional filter that indicates the product identifier to include in the transaction history. Your query may specify more than one productID.\n\nproductType\n[string]\n\nAn optional filter that indicates the product type to include in the transaction history. Your query may specify more than one productType.\n\nPossible Values: AUTO_RENEWABLE, NON_RENEWABLE, CONSUMABLE, NON_CONSUMABLE\nsort\nstring\n\nAn optional sort order for the transaction history records. The response sorts the transaction records by their recently modified date. The default value is ASCENDING, so you receive the oldest records first.\n\nPossible Values: ASCENDING, DESCENDING\nsubscriptionGroupIdentifier\n[subscriptionGroupIdentifier]\n\nAn optional filter that indicates the subscription group identifier to include in the transaction history. Your query may specify more than one subscriptionGroupIdentifier.\n\ninAppOwnershipType\ninAppOwnershipType\n\nAn optional filter that limits the transaction history by the in-app ownership type.\n\nrevoked\nboolean\n\nAn optional Boolean value that indicates whether the response includes only revoked transactions when the value is true, or contains only nonrevoked transactions when the value is false. By default, the request doesn't include this parameter.\n\nPossible Values: true, false\nexcludeRevoked\nboolean\nDeprecated  \n\nSet revoked to false to exclude revoked transactions instead.\n\nPossible Values: true, false\nResponse Codes\n200\nHistoryResponse\nOK\n\nRequest succeeded.\n\nContent-Type: application/json\n400\n(InvalidAppIdentifierError | InvalidRequestRevisionError | InvalidTransactionIdError | InvalidSortError | InvalidStartDateError | InvalidEndDateError | InvalidProductTypeError | InvalidProductIdError | InvalidSubscriptionGroupIdentifierError | InvalidInAppOwnershipTypeError | InvalidExcludeRevokedError | InvalidRevokedError)\nBad Request\n\nInvalid request.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n404\n(AccountNotFoundError | AccountNotFoundRetryableError | AppNotFoundError | AppNotFoundRetryableError | TransactionIdNotFoundError)\nNot Found\nContent-Type: application/json\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nServer error. Try again later.\n\nContent-Type: application/json\nDiscussion\n\nThe Get Transaction History endpoint returns results for the following product types:\n\nAuto-renewable subscriptions\n\nNon-renewing subscriptions\n\nNon-consumable in-app purchases\n\nConsumable in-app purchases if the transaction is refunded or revoked, or if the app hasn’t finished processing the transaction. The results don’t include consumable in-app purchases that the app marks as finished. For more information about finishing transactions, see finish() and finishTransaction(_:). To get transaction information for finished consumable transactions, see Get Transaction Info.\n\nYou can customize your request by including query parameters that filter the transaction history. The query parameters limit the scope of the request by dates, product IDs, product types, and subscription group identifiers. You can also exclude revoked or nonrevoked transactions, and limit the transactions by in-app ownership type. If you provide multiple filters in the query, the transactions that return match all the filters.\n\nYou can also specify a sort order. The App Store sorts the transactions based on their recently modified dates. Use a DESCENDING order to get the most recent transactions first. The App Store updates the recently modified date if the customer upgrades a subscription or the App Store revokes an in-app purchase. If a transaction updates while you’re receiving transaction history and the response is sorted in ASCENDING order, you may receive the transaction again with updated data.\n\nThe productId, productType, and subscriptionGroupIdentifier query parameters allow you to specify multiple values. To specify more than one value for a query parameter, include it in the request multiple times. For example, to filter the transaction history by non-consumable and auto-renewable product types, include the following within your request:\n\nGET https://api.storekit.itunes.apple.com/inApps/v1/history/{transactionId}?productType=NON_CONSUMABLE&productType=AUTO_RENEWABLE\n\n\nWhen you specify multiple values for a single query parameter, the response contains transactions that match any of the values.\n\nNote\n\nIf you use optional query parameters, be sure to use the same query parameters on subsequent requests that include the revision parameter.\n\nTo request a full transaction history in ascending order for your app, start by calling the endpoint without any query parameters, as follows:\n\nGET https://api.storekit.itunes.apple.com/inApps/v1/history/{transactionId}\n\n\nFor subsequent requests, include the revision token from the previous HistoryResponse.\n\nGET https://api.storekit.itunes.apple.com/inApps/v1/history/{transactionId}?revision={revision}\n\n\nSee Also\nIn-app purchase history\nobject HistoryResponse\nA response that contains the customer’s transaction history for an app."
  },
  {
    "title": "HistoryResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/historyresponse",
    "html": "Properties\nappAppleId\nappAppleId\n\nThe app’s identifier in the App Store.\n\nbundleId\nbundleId\n\nThe bundle identifier of the app.\n\nenvironment\nenvironment\n\nThe server environment in which you’re making the request, whether sandbox or production.\n\nhasMore\nhasMore\n\nA Boolean value that indicates whether the App Store has more transactions than it returns in this response. If the value is true, use the revision token to request the next set of transactions.\n\nrevision\nrevision\n\nA token you use in a query to request the next set of transactions from the Get Transaction History endpoint.\n\nsignedTransactions\n[JWSTransaction]\n\nAn array of in-app purchase transactions for the customer, signed by Apple, in JSON Web Signature format.\n\nDiscussion\n\nHistoryResponse contains results for the following product types:\n\nAuto-renewable subscriptions\n\nNon-renewing subscriptions\n\nNon-consumable in-app purchases\n\nConsumable in-app purchases if the transaction is refunded, revoked, or if the app hasn’t finished processing the transaction\n\nThe response doesn’t include consumable in-app purchases that the app has marked as finished. For more information about finishing transactions, see finish() and finishTransaction(_:).\n\nThe history response returns a maximum of 20 transactions per response. If your customer has more than 20 in-app transactions, the hasMore value is true. Each response includes a revision value. Call Get Transaction History again with the revision token in the query to receive the next set of transactions; use the same query parameters for each subsequent call that includes revision. When the App Store has no more transactions to send, the hasMore value is false.\n\nIf a customer upgrades a subscription or the App Store revokes an in-app purchase while you’re receiving transaction history, the App Store updates the relevant transaction. If the response is sorted in ASCENDING order, you’ll receive the transaction again, with updated data.\n\nTopics\nResponse data types\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype environment\nThe server environment, either sandbox or production.\ntype hasMore\nA Boolean value indicating whether the App Store has more transaction data.\ntype revision\nA token you use in a query to request the next set of transactions for the customer.\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\nSee Also\nIn-app purchase history\nGet Transaction History\nGet a customer’s in-app purchase transaction history for your app."
  },
  {
    "title": "Generating JSON Web Tokens for API requests",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/generating_json_web_tokens_for_api_requests",
    "html": "Overview\n\nJSON Web Token (JWT) is an open standard (RFC 7519) that defines a way to securely transmit information. The App Store Server API and External Purchase Server API require a JWT to authorize each request you make to the API. You create the token, signing it with the private key you downloaded from App Store Connect. For more information about creating keys, see Creating API keys to authorize API requests.\n\nTo generate a signed JWT:\n\nCreate the JWT header.\n\nCreate the JWT payload.\n\nSign the JWT.\n\nInclude the signed JWT in the authorization header of each API request. Generate a new signed JWT for each new request.\n\nTip\n\nThe App Store Server Library provides an API client and creates JWTs for use with the App Store Server API. For more information, see Simplifying your implementation by using the App Store Server Library.\n\nCreate the JWT header\n\nTo create a JWT to communicate with the App Store Server API or External Purchase Server API, use the following fields and values in the header:\n\nHeader Field\n\n\t\n\nValue\n\n\n\n\nalg - Encryption Algorithm\n\n\t\n\nES256\n\nAll JWTs must be signed with ES256 encryption\n\n\n\n\nkid - Key ID\n\n\t\n\nYour private key ID from App Store Connect (Ex: 2X9R4HXF34)\n\n\n\n\ntyp - Token Type\n\n\t\n\nJWT\n\nTo get your key ID, copy it from App Store Connect by logging in to App Store Connect, then:\n\nSelect Users and Access, then select the Keys tab.\n\nThe key IDs appear in a column under the Active heading. Hover the cursor next to a key ID to display the Copy Key ID link.\n\nClick Copy Key ID.\n\nIf you have more than one API key, copy the key ID of the private key that you use to sign the JWT.\n\nHere’s an example of a JWT header:\n\n{\n\"alg\": \"ES256\",\n\"kid\": \"2X9R4HXF34\",\n\"typ\": \"JWT\"\n}\n\n\nCreate the JWT payload\n\nThe JWT payload contains information specific to the App Store Server API and External Purchase Server API, such as issuer ID and expiration time. Use the following fields — also known as JWT claims — to include these values in the JWT payload:\n\nPayload Field\n\n\t\n\nValue\n\n\n\n\niss - Issuer\n\n\t\n\nYour issuer ID from the Keys page in App Store Connect (Ex: \"57246542-96fe-1a63-e053-0824d011072a\")\n\n\n\n\niat - Issued At\n\n\t\n\nThe time at which you issue the token, in UNIX time, in seconds (Ex: 1623085200)\n\n\n\n\nexp - Expiration Time\n\n\t\n\nThe token’s expiration time, in UNIX time, in seconds. Tokens that expire more than 60 minutes after the time in iat are not valid (Ex: 1623086400)\n\n\n\n\naud - Audience\n\n\t\n\nappstoreconnect-v1\n\n\n\n\nbid - Bundle ID\n\n\t\n\nYour app’s bundle ID (Ex: “com.example.testbundleid”)\n\nTo get your issuer ID, log in to App Store Connect, then:\n\nSelect Users and Access, then select the Keys tab.\n\nThe issuer ID appears near the top of the page. To copy the issuer ID, click Copy next to the ID.\n\nHere’s an example of a JWT payload:\n\n{\n  \"iss\": \"57246542-96fe-1a63e053-0824d011072a\",\n  \"iat\": 1623085200,\n  \"exp\": 1623086400,\n  \"aud\": \"appstoreconnect-v1\",\n  \"bid\": \"com.example.testbundleid\"\n}\n\n\nNote that the JWT is valid for up to one hour after the time you indicate in the iat field, or it expires sooner if you set the exp field for an earlier time.\n\nSign the JWT\n\nUse the private key associated with the key ID you specified in the header to sign the token using ES256 encryption.\n\nThere are a variety of open source libraries available online for creating and signing JWT tokens. See JWT.io for more information. For calls to the App Store Server API, consider using the App Store Server Library to create the JWTs instead. For more information, see Simplifying your implementation by using the App Store Server Library.\n\nInclude the JWT in the authorization header of the request\n\nAfter you create and sign the JWT, provide it in the request’s authorization header as a bearer token.\n\nThe following example for the App Store Server API shows a curl command using a bearer token. Replace the text [signed token] with the value of the signed JWT itself. Replace {transactionId} with a transaction identifier of your customer.\n\ncurl -v -H 'Authorization: Bearer [signed token]' \n\"https://api.storekit.itunes.apple.com/inApps/v1/subscriptions/{transactionId}\"\n\n\nSee Also\nEssentials\nSimplifying your implementation by using the App Store Server Library\nUse Apple’s open source library to create JSON Web Tokens (JWT) to authorize your calls, verify transactions, extract transaction identifiers from receipts, and more.\nCreating API keys to authorize API requests\nCreate API keys you use to sign JSON Web Tokens and authorize API requests.\nIdentifying rate limits\nRecognize the rate limits that apply to App Store Server API endpoints and handle them in your code.\nApp Store Server API changelog\nLearn about new features and updates in the App Store Server API."
  },
  {
    "title": "Identifying rate limits",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/identifying_rate_limits",
    "html": "Overview\n\nThe App Store Server API limits the number of requests that you can submit to each endpoint within a specified timespan. The request limits apply per app.\n\nThe following table lists the rate limits for each endpoint in the production environment, expressed in requests per second. Limits are enforced on an hourly basis.\n\nEndpoint\n\n\t\n\nRate limit (per second)\n\n\n\n\nGet Transaction Info\n\n\t\n\n50\n\n\n\n\nGet Transaction History\n\n\t\n\n50\n\n\n\n\nGet All Subscription Statuses\n\n\t\n\n50\n\n\n\n\nSend Consumption Information\n\n\t\n\n50\n\n\n\n\nGet Notification History\n\n\t\n\n50\n\n\n\n\nExtend a Subscription Renewal Date\n\n\t\n\n20\n\n\n\n\nLook Up Order ID\n\n\t\n\n10\n\n\n\n\nGet Refund History\n\n\t\n\n10\n\n\n\n\nExtend Subscription Renewal Dates for All Active Subscribers\n\n\t\n\n1\n\n\n\n\nRequest a Test Notification\n\n\t\n\n1\n\n\n\n\nGet Test Notification Status\n\n\t\n\n1\n\nThe rate limits in the sandbox environment are 10% of the limits in the table above.\n\nThe App Store server may make adjustments to reduce or increase these rate limits as needed at any time.\n\nHandle exceeded rate limits gracefully\n\nIf you exceed a per-hour limit, the API rejects the request with an HTTP 429 response, with a RateLimitExceededError in the body. Consider the following as you integrate the API:\n\nIf you periodically call the API, throttle your requests to avoid exceeding the per-hour limit for an endpoint.\n\nManage the HTTP 429 RateLimitExceededError in your error-handling process. For example, log the failure and queue the job to process it again at a later time.\n\nCheck the Retry-After header if you receive the HTTP 429 error. This header contains a UNIX time, in milliseconds, that informs you when you can next send a request.\n\nSee Also\nEssentials\nSimplifying your implementation by using the App Store Server Library\nUse Apple’s open source library to create JSON Web Tokens (JWT) to authorize your calls, verify transactions, extract transaction identifiers from receipts, and more.\nCreating API keys to authorize API requests\nCreate API keys you use to sign JSON Web Tokens and authorize API requests.\nGenerating JSON Web Tokens for API requests\nCreate JSON Web Tokens signed with your private key to authorize requests for App Store Server API and External Purchase Server API.\nApp Store Server API changelog\nLearn about new features and updates in the App Store Server API."
  },
  {
    "title": "Error codes",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/error_codes",
    "html": "Topics\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions.\nobject TransactionIdNotFoundError\nAn error that indicates a transaction identifier wasn’t found.\nErrors to retry\nobject AccountNotFoundRetryableError\nAn error response that indicates the App Store account wasn’t found, but you can try again.\nobject AppNotFoundRetryableError\nAn error response that indicates the app wasn’t found, but you can try again.\nobject GeneralInternalRetryableError\nAn error response that indicates an unknown error occurred, but you can try again.\nobject OriginalTransactionIdNotFoundRetryableError\nAn error response that indicates the original transaction identifier wasn’t found, but you can try again.\nConsumption request errors\nobject InvalidAccountTenureError\nAn error that indicates the value of the account tenure field is invalid.\nobject InvalidAppAccountTokenError\nAn error that indicates the value of the app account token field is invalid.\nobject InvalidConsumptionStatusError\nAn error that indicates the value of the consumption status field is invalid.\nobject InvalidCustomerConsentedError\nAn error that indicates the customer consented field is invalid or doesn’t indicate that the customer consented.\nobject InvalidDeliveryStatusError\nAn error that indicates the value in the delivery status field is invalid.\nobject InvalidLifetimeDollarsPurchasedError\nAn error that indicates the value in the lifetime dollars purchased field is invalid.\nobject InvalidLifetimeDollarsRefundedError\nAn error that indicates the value in the lifetime dollars refunded field is invalid.\nobject InvalidPlatformError\nAn error that indicates the value in the platform field is invalid.\nobject InvalidPlayTimeError\nAn error that indicates the value in the playtime field is invalid.\nobject InvalidSampleContentProvidedError\nAn error that indicates the value in the sample content provided field is invalid.\nobject InvalidTransactionNotConsumableError\nAn error that indicates the transaction identifier doesn’t represent a consumable in-app purchase.\nobject InvalidTransactionTypeNotSupportedError\nAn error that indicates the transaction identifier represents an unsupported in-app purchase type.\nobject InvalidUserStatusError\nAn error that indicates the value in the user status field is invalid.\nNotification test and history errors\nobject InvalidEndDateError\nAn error that indicates the end date is invalid.\nobject InvalidNotificationTypeError\nAn error that indicates the notification type or subtype is invalid.\nobject InvalidPaginationTokenError\nAn error that indicates the pagination token is invalid.\nobject InvalidStartDateError\nAn error that indicates the start date is invalid.\nobject InvalidTestNotificationTokenError\nAn error that indicates the test notification token is invalid.\nobject InvalidExcludeRevokedError\nAn error that indicates the query parameter exclude-revoked is invalid.\nDeprecated\nobject InvalidInAppOwnershipTypeError\nAn error that indicates an invalid in-app ownership type parameter.\nobject InvalidProductIdError\nAn error that indicates the product ID parameter is invalid.\nobject InvalidProductTypeError\nAn error that indicates the product type parameter is invalid.\nobject InvalidSortError\nAn error that indicates the sort parameter is invalid.\nobject InvalidSubscriptionGroupIdentifierError\nAn error that indicates the subscription group identifier is invalid.\nobject MultipleFiltersSuppliedError\nAn error that indicates the request is invalid because it has too many constraints applied.\nobject PaginationTokenExpiredError\nAn error that indicates the pagination token expired.\nobject ServerNotificationURLNotFoundError\nAn error that indicates the App Store server couldn’t find a notifications URL for your app in this environment.\nobject StartDateAfterEndDateError\nAn error that indicates the end date precedes the start date, or the two dates are equal.\nobject StartDateTooFarInPastError\nAn error that indicates the start date is earlier than the earliest allowed date.\nobject TestNotificationNotFoundError\nAn error that indicates the test notification token is expired or the test notification status isn’t available."
  },
  {
    "title": "JWSTransactionDecodedPayload",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/jwstransactiondecodedpayload",
    "html": "Properties\nappAccountToken\nappAccountToken\n\nA UUID you create at the time of purchase that associates the transaction with a customer on your own service. If your app doesn’t provide an appAccountToken, this string is empty. For more information, see appAccountToken(_:).\n\nbundleId\nbundleId\n\nThe bundle identifier of the app.\n\ncurrency\ncurrency\n\nThe three-letter ISO 4217 currency code associated with the price parameter. This value is present only if price is present.\n\nenvironment\nenvironment\n\nThe server environment, either sandbox or production.\n\nexpiresDate\nexpiresDate\n\nThe UNIX time, in milliseconds, that the subscription expires or renews.\n\ninAppOwnershipType\ninAppOwnershipType\n\nA string that describes whether the transaction was purchased by the customer, or is available to them through Family Sharing.\n\nisUpgraded\nisUpgraded\n\nA Boolean value that indicates whether the customer upgraded to another subscription.\n\nofferDiscountType\nofferDiscountType\n\nThe payment mode you configure for the subscription offer, such as Free Trial, Pay As You Go, or Pay Up Front.\n\nofferIdentifier\nofferIdentifier\n\nThe identifier that contains the offer code or the promotional offer identifier.\n\nofferType\nofferType\n\nA value that represents the promotional offer type.\n\noriginalPurchaseDate\noriginalPurchaseDate\n\nThe UNIX time, in milliseconds, that represents the purchase date of the original transaction identifier.\n\noriginalTransactionId\noriginalTransactionId\n\nThe transaction identifier of the original purchase.\n\nprice\nprice\n\nAn integer value that represents the price multiplied by 1000 of the in-app purchase or subscription offer you configured in App Store Connect and that the system records at the time of the purchase. For more information, see price. The currency parameter indicates the currency of this price.\n\nproductId\nproductId\n\nThe unique identifier of the product.\n\npurchaseDate\npurchaseDate\n\nThe UNIX time, in milliseconds, that the App Store charged the customer’s account for a purchase, restored product, subscription, or subscription renewal after a lapse.\n\nquantity\nquantity\n\nThe number of consumable products the customer purchased.\n\nrevocationDate\nrevocationDate\n\nThe UNIX time, in milliseconds, that the App Store refunded the transaction or revoked it from Family Sharing.\n\nrevocationReason\nrevocationReason\n\nThe reason that the App Store refunded the transaction or revoked it from Family Sharing.\n\nsignedDate\nsignedDate\n\nThe UNIX time, in milliseconds, that the App Store signed the JSON Web Signature (JWS) data.\n\nstorefront\nstorefront\n\nThe three-letter code that represents the country or region associated with the App Store storefront for the purchase.\n\nstorefrontId\nstorefrontId\n\nAn Apple-defined value that uniquely identifies the App Store storefront associated with the purchase.\n\nsubscriptionGroupIdentifier\nsubscriptionGroupIdentifier\n\nThe identifier of the subscription group to which the subscription belongs.\n\ntransactionId\ntransactionId\n\nThe unique identifier of the transaction.\n\ntransactionReason\ntransactionReason\n\nThe reason for the purchase transaction, which indicates whether it’s a customer’s purchase or a renewal for an auto-renewable subscription that the system initates.\n\ntype\ntype\n\nThe type of the in-app purchase.\n\nwebOrderLineItemId\nwebOrderLineItemId\n\nThe unique identifier of subscription purchase events across devices, including subscription renewals.\n\nDiscussion\n\nImportant\n\nDon’t use the price or currency values for any revenue reconciliation or recognition. App Store Connect reporting is your source of record for financial and accounting purposes. For more information, see Overview of reporting tools.\n\nSee Also\nJWS headers and payloads\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\ntype JWSRenewalInfo\nSubscription renewal information, signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSDecodedHeader\nA decoded JSON Web Signature (JWS) header containing transaction or renewal information.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\nData types\nData types to use in decoded transaction payloads and renewal info payloads."
  },
  {
    "title": "Data types",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/data_types",
    "html": "Topics\nEnvironment\ntype environment\nThe server environment, either sandbox or production.\nTransaction identifiers\ntype originalTransactionId\nThe original transaction identifier of a purchase.\ntype transactionId\nThe unique identifier for a transaction such as an in-app purchase, restored in-app purchase, or subscription renewal.\ntype webOrderLineItemId\nThe unique identifier of subscription-purchase events across devices, including renewals.\nApp information\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\nAccount Info\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\nProduct information\ntype productId\nThe unique identifier for the product, that you create in App Store Connect.\ntype type\nThe type of in-app purchase products you can offer in your app.\ntype subscriptionGroupIdentifier\nThe identifier of the subscription group that the subscription belongs to.\ntype quantity\nThe number of consumable products purchased.\nProduct price and currency\ntype price\nThe price, in milliunits, of the in-app purchase or subscription offer that you configured in App Store Connect.\ntype currency\nThe three-letter ISO 4217 currency code for the price of the product.\nStorefront info\ntype storefront\nThe three-letter code that represents the country or region associated with the App Store storefront of the purchase.\ntype storefrontId\nAn Apple-defined value that uniquely identifies an App Store storefront.\nPromotional offers\ntype offerIdentifier\nThe identifier that contains the offer code or the promotional offer identifier.\ntype offerType\nThe type of subscription offer.\ntype offerDiscountType\nThe payment mode you configure for an introductory offer, promotional offer, or offer code on an auto-renewable subscription.\nPurchase dates\ntype originalPurchaseDate\nThe purchase date of the transaction associated with the original transaction identifier.\ntype purchaseDate\nThe time that the App Store charged the user’s account for an in-app purchase, a restored in-app purchase, a subscription, or a subscription renewal after a lapse.\ntype recentSubscriptionStartDate\nThe earliest start date of a subscription in a series of auto-renewable subscription purchases that ignores all lapses of paid service shorter than 60 days.\nBilling status\ntype isInBillingRetryPeriod\nA Boolean value that indicates whether the App Store is attempting to automatically renew an expired subscription.\ntype gracePeriodExpiresDate\nThe time when the Billing Grace Period for subscription renewals expires.\nSubscription renewal and expiration\ntype autoRenewStatus\nThe renewal status for an auto-renewable subscription.\ntype autoRenewProductId\nThe product identifier of the product that will renew at the next billing period.\ntype expirationIntent\nThe reason an auto-renewable subscription expired.\ntype expiresDate\nThe UNIX time, in milliseconds, an auto-renewable subscription purchase expires or renews.\ntype isUpgraded\nThe Boolean value that indicates whether the user upgraded to another subscription.\ntype renewalDate\nThe UNIX time, in milliseconds, when the most recent auto-renewable subscription purchase expires.\ntype status\nThe status of an auto-renewable subscription.\nFamily Sharing\ntype inAppOwnershipType\nThe relationship of the user with the family-shared purchase to which they have access.\nPrice increase status\ntype priceIncreaseStatus\nThe status that indicates whether an auto-renewable subscription is subject to a price increase.\nRevocation date and reason\ntype revocationDate\nThe UNIX time, in milliseconds, that the App Store refunded the transaction or revoked it from Family Sharing.\ntype revocationReason\nThe reason for a refunded transaction.\nTransaction reason\ntype transactionReason\nThe cause of a purchase transaction, which indicates whether it’s a customer’s purchase or a renewal for an auto-renewable subscription that the system initiates.\nJWS signature date\ntype signedDate\nThe UNIX time, in milliseconds, that the App Store signed the JSON Web Signature data.\nSee Also\nJWS headers and payloads\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\ntype JWSRenewalInfo\nSubscription renewal information, signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSDecodedHeader\nA decoded JSON Web Signature (JWS) header containing transaction or renewal information.\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription."
  },
  {
    "title": "Simplifying your implementation by using the App Store Server Library",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/simplifying_your_implementation_by_using_the_app_store_server_library",
    "html": "Overview\n\nThe App Store Server Library is an open source library from Apple, available in four languages. It makes adopting the App Store Server API and working with JSON Web Signature (JWS) transactions easier. Find the App Store Server Library for each language in the following GitHub repositories:\n\nSwift: App Store Server Swift Library\n\nJava: App Store Server Java Library\n\nPython: App Store Server Python Library\n\nNode: App Store Server Node Library\n\nChoose the language that best supports your server and expertise.\n\nThe App Store Server Library offers four key capabilities:\n\nAn API client that encodes App Store Server API requests, decodes the responses, and creates the JSON Web Token (JWT) you use to authenticate the calls. For more information on using JWTs, see Generating JSON Web Tokens for API requests.\n\nA function that verifies JWS transactions, to verify that Apple signed the transaction data you get in API responses, from App Store Server Notifications V2, and from devices using StoreKit.\n\nA utility that extracts transaction identifiers from receipts. The App Store Server API endpoints take a transaction identifier in the path parameter. Use this utility as you migrate from using verifyReceipt with App Store Receipts to using the App Store Server API for transaction information.\n\nA function that generates signatures for subscription promotional offers. For more information on promotional offers, see Set up promotional offers for auto-renewable subscriptions.\n\nFor more information, see the WWDC23 session Meet the App Store Server Library.\n\nSee Also\nEssentials\nCreating API keys to authorize API requests\nCreate API keys you use to sign JSON Web Tokens and authorize API requests.\nGenerating JSON Web Tokens for API requests\nCreate JSON Web Tokens signed with your private key to authorize requests for App Store Server API and External Purchase Server API.\nIdentifying rate limits\nRecognize the rate limits that apply to App Store Server API endpoints and handle them in your code.\nApp Store Server API changelog\nLearn about new features and updates in the App Store Server API."
  },
  {
    "title": "Creating API keys to authorize API requests",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/creating_api_keys_to_authorize_api_requests",
    "html": "Overview\n\nThe App Store Server API and External Purchase Server API require JSON Web Tokens (JWTs) to authorize each request you make to the API. You generate JWTs using a private API key that you download from App Store Connect. For information about generating the JWT using your private key, see Generating JSON Web Tokens for API requests.\n\nAn API key has two parts: a public portion that Apple keeps, and a private key that you download. Use the private key to sign tokens that authorize the API to access or submit your data to the App Store.\n\nImportant\n\nStore your private keys in a secure place. Don’t share your keys, don’t store keys in a code repository, and don’t include keys in client-side code. If you suspect a private key is compromised, immediately revoke the key in App Store Connect. See Revoking API Keys for details.\n\nUse the API key for the App Store Server API and the External Purchase Server API. You can’t use the key for other Apple services.\n\nGenerate a private key\n\nTo generate keys, you must have an Admin role or Account Holder role in App Store Connect. You may generate multiple API keys. To generate an API key to use with the App Store Server API and External Purchase Server API, log in to App Store Connect and complete the following steps:\n\nSelect Users and Access, and then select the Keys tab.\n\nSelect In-App Purchase under the Key Type.\n\nClick Generate API Key or the Add (+) button.\n\nEnter a name for the key. The name is for your reference only and isn’t part of the key itself.\n\nClick Generate.\n\nThe new key’s name, key ID, a download link, and other information appears on the page.\n\nDownload and store the private key\n\nAfter generating your API key, App Store Connect gives you the opportunity to download the private half of the key. The private key is only available for download a single time.\n\nLog in to App Store Connect.\n\nSelect Users and Access, and then select the Keys tab.\n\nSelect In-App Purchase under the Key Type.\n\nClick Download API Key next to the new API key.\n\nThe download link appears only if you haven’t yet downloaded the private key. Apple doesn’t keep a copy of the private key. Store your private key in a secure place.\n\nSee Also\nEssentials\nSimplifying your implementation by using the App Store Server Library\nUse Apple’s open source library to create JSON Web Tokens (JWT) to authorize your calls, verify transactions, extract transaction identifiers from receipts, and more.\nGenerating JSON Web Tokens for API requests\nCreate JSON Web Tokens signed with your private key to authorize requests for App Store Server API and External Purchase Server API.\nIdentifying rate limits\nRecognize the rate limits that apply to App Store Server API endpoints and handle them in your code.\nApp Store Server API changelog\nLearn about new features and updates in the App Store Server API."
  },
  {
    "title": "JWSDecodedHeader",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/jwsdecodedheader",
    "html": "Properties\nalg\nalg\n\nThe algorithm used for signing the JSON Web Signature (JWS).\n\nx5c\nx5c\n\nThe X.509 certificate chain that corresponds to the key that the App Store used to secure the JWS.\n\nDiscussion\n\nThe types JWSTransaction and JWSRenewalInfo contain headers that are JWSDecodedHeader objects when decoded. Use the information in the JWSDecodedHeader to validate the JWS signature. For more information about validating signatures, see the JSON Web Signature (JWS) IETF RFC 7515 specification.\n\nThe App Store signs transaction and renewal information that you receive in App Store Server Notifications V2 and in the App Store Server API. It uses the following x5c certificate chain, in order:\n\nA certificate that contains the public key that corresponds to the key the App Store uses to digitally sign the JWS. Section 4.11.10 Mac App Store Receipt Signing Certificates of the Apple Inc. Certificate Practice Statement Worldwide Developer Relations document defines the policy for this certificate.\n\nAn Apple intermediate certificate from the Apple PKI site that starts with Worldwide Developer Relations.\n\nAn Apple root certificate.\n\nFor more information, or to download Apple’s root and intermediate certificates, see Apple PKI.\n\nTopics\nData types\ntype alg\nAn algorithm used to sign a JSON Web Signature.\ntype x5c\nThe JSON Web Signature (JWS) header parameter that contains the certificate chain that corresponds to the key used to digitally sign the JWS.\nSee Also\nJWS headers and payloads\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\ntype JWSRenewalInfo\nSubscription renewal information, signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\nData types\nData types to use in decoded transaction payloads and renewal info payloads."
  },
  {
    "title": "JWSRenewalInfoDecodedPayload",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/jwsrenewalinfodecodedpayload",
    "html": "Properties\nautoRenewProductId\nautoRenewProductId\n\nThe identifier of the product that renews at the next billing period.\n\nautoRenewStatus\nautoRenewStatus\n\nThe renewal status of the auto-renewable subscription.\n\nenvironment\nenvironment\n\nThe server environment, either sandbox or production.\n\nexpirationIntent\nexpirationIntent\n\nThe reason the subscription expired.\n\ngracePeriodExpiresDate\ngracePeriodExpiresDate\n\nThe time when the grace period for subscription renewals expires.\n\nisInBillingRetryPeriod\nisInBillingRetryPeriod\n\nA Boolean value that indicates whether the App Store is attempting to automatically renew an expired subscription.\n\nofferIdentifier\nofferIdentifier\n\nThe offer code or promotional offer identifier.\n\nofferType\nofferType\n\nThe type of the subscription offer.\n\noriginalTransactionId\noriginalTransactionId\n\nThe transaction identifier of the original purchase associated with this transaction.\n\npriceIncreaseStatus\npriceIncreaseStatus\n\nThe status that indicates whether the auto-renewable subscription is subject to a price increase.\n\nproductId\nproductId\n\nThe unique identifier of the product.\n\nrecentSubscriptionStartDate\nrecentSubscriptionStartDate\n\nThe earliest start date of an auto-renewable subscription in a series of subscription purchases that ignores all lapses of paid service that are 60 days or fewer.\n\nrenewalDate\nrenewalDate\n\nThe UNIX time, in milliseconds, that the most recent auto-renewable subscription purchase expires.\n\nsignedDate\nsignedDate\n\nThe UNIX time, in milliseconds, that the App Store signed the JSON Web Signature (JWS) data.\n\nSee Also\nJWS headers and payloads\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\ntype JWSRenewalInfo\nSubscription renewal information, signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSDecodedHeader\nA decoded JSON Web Signature (JWS) header containing transaction or renewal information.\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nData types\nData types to use in decoded transaction payloads and renewal info payloads."
  },
  {
    "title": "TransactionIdNotFoundError",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/transactionidnotfounderror",
    "html": "Properties\nerrorCode\nnumber\nValue: 4040010\nerrorMessage\nstring\nValue: Transaction id not found.\nDiscussion\n\nTo resolve this error, check your request to ensure that:\n\nThe JSON Web Token (JWT) payload contains the bundle ID (bid) of your app that’s associated with the transaction ID. For more information, see Generating JSON Web Tokens for API requests.\n\nYou’re making the request in the same environment, production or sandbox, that generated the transaction ID.\n\nDon’t unlock the service or content associated with the transaction ID for the app bundle ID and environment that you indicate in the request until you resolve this error.\n\nSee Also\nErrors\nobject AccountNotFoundError\nAn error that indicates the App Store account wasn’t found.\nobject AppNotFoundError\nAn error that indicates the app wasn’t found.\nobject FamilySharedSubscriptionExtensionIneligibleError\nAn error that indicates a subscription isn't directly eligible for a renewal date extension because the user obtained it through Family Sharing.\nobject GeneralInternalError\nAn error that indicates a general internal error.\nobject GeneralBadRequestError\nAn error that indicates an invalid request.\nobject InvalidAppIdentifierError\nAn error that indicates an invalid app identifier.\nobject InvalidEmptyStorefrontCountryCodeListError\nAn error that indicates a required storefront country code is empty.\nobject InvalidExtendByDaysError\nAn error that indicates an invalid extend-by-days value.\nobject InvalidExtendReasonCodeError\nAn error that indicates an invalid reason code.\nobject InvalidOriginalTransactionIdError\nAn error that indicates an invalid original transaction identifier.\nobject InvalidRefundPreferenceError\nAn error that indicates an invalid refund preference code.\nobject InvalidRequestIdentifierError\nAn error that indicates an invalid request identifier.\nobject InvalidRequestRevisionError\nAn error that indicates an invalid request revision.\nobject InvalidRevokedError\nAn error that indicates the revoked parameter contains an invalid value.\nobject InvalidStatusError\nAn error that indicates the status parameter is invalid.\nobject InvalidStorefrontCountryCodeError\nAn error that indicates a storefront code is invalid.\nobject InvalidTransactionIdError\nAn error that indicates an invalid transaction identifier.\nobject OriginalTransactionIdNotFoundError\nAn error that indicates an original transaction identifier wasn’t found.\nobject RateLimitExceededError\nAn error that indicates the request exceeded the rate limit.\nobject StatusRequestNotFoundError\nAn error that indicates the server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\nobject SubscriptionExtensionIneligibleError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension due to its subscription state.\nobject SubscriptionMaxExtensionError\nAn error that indicates the subscription doesn’t qualify for a renewal-date extension because it has already received the maximum extensions."
  },
  {
    "title": "JWSRenewalInfo",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/jwsrenewalinfo",
    "html": "Discussion\n\nThe JWSRenewalInfo type is a string of three Base64 URL-encoded components, separated by a period, containing subscription renewal information signed by the App Store. The App Store signs the string according to the JSON Web Signature (JWS) IETF RFC 7515 specification.\n\nThe three components in the string are a header, a payload, and a signature.\n\nTo read the subscription renewal information, decode the payload. Use a JWSRenewalInfoDecodedPayload object to read the payload information.\n\nTo read the header, decode it and use a JWSDecodedHeader object to access the information. Use the information in the header to verify the signature.\n\nSee Also\nJWS headers and payloads\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSDecodedHeader\nA decoded JSON Web Signature (JWS) header containing transaction or renewal information.\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\nData types\nData types to use in decoded transaction payloads and renewal info payloads."
  },
  {
    "title": "CheckTestNotificationResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/checktestnotificationresponse",
    "html": "Properties\nsendAttempts\n[sendAttemptItem]\n\nAn array of information the App Store server records for its attempts to send the TEST notification to your server. The array may contain a maximum of six sendAttemptItem objects.\n\nsignedPayload\nsignedPayload\n\nThe signed payload, in JWS format, that contains the TEST notification that the App Store server sent to your server.\n\nfirstSendAttemptResult\nstring\nDeprecated  \n\nThe result of the App Store server’s first attempt to send the TEST notification to your server.\n\nUse the first sendAttemptItem in the sendAttempts array instead.\n\nDiscussion\n\nThe Get Test Notification Status endpoint returns this response.\n\nThe sendAttempts array contains up to six sendAttemptItem items: one for the initial attempt, and up to five for the retries. Use this information to troubleshoot your server if it doesn't receive notifications at its App Store Server Notifications V2 endpoint successfully.\n\nThe signedPayload contains the TEST notification that the App Store server attempted to send to your server.\n\nTopics\nData types\nobject sendAttemptItem\nThe success or error information and the date the App Store server records when it attempts to send a server notification to your server.\ntype signedPayload\nA cryptographically signed payload, in JSON Web Signature (JWS) format, containing the response body for a version 2 notification.\nSee Also\nApp Store Server Notifications testing\nRequest a Test Notification\nAsk App Store Server Notifications to send a test notification to your server.\nGet Test Notification Status\nCheck the status of the test App Store server notification sent to your server.\nobject SendTestNotificationResponse\nA response that contains the test notification token."
  },
  {
    "title": "SendTestNotificationResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/sendtestnotificationresponse",
    "html": "Properties\ntestNotificationToken\ntestNotificationToken\n\nThe test notification token that uniquely identifies the notification test that App Store Server Notifications sends to your server.\n\nDiscussion\n\nThe Request a Test Notification endpoint returns this response, which includes a testNotificationToken value to reference the test associated with your request. When you request a test notification, the App Store server sends a notification with the TEST notificationType to your server. To learn the result of the App Store server’s attempt to send the TEST notification, call Get Test Notification Status with the testNotificationToken.\n\nFor more information about notifications, see App Store Server Notifications.\n\nTopics\nData types\ntype testNotificationToken\nA unique identifier for a notification test that the App Store server sends to your server.\nSee Also\nApp Store Server Notifications testing\nRequest a Test Notification\nAsk App Store Server Notifications to send a test notification to your server.\nGet Test Notification Status\nCheck the status of the test App Store server notification sent to your server.\nobject CheckTestNotificationResponse\nA response that contains the contents of the App Store server's test notification and the result from your server."
  },
  {
    "title": "environment",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/environment",
    "html": "Possible Values\nSandbox\n\nIndicates that the data applies to testing in the sandbox environment.\n\nProduction\n\nIndicates that the data applies to the production environment.\n\nDiscussion\n\nYou receive data from the App Store Server API for the sandbox environment when you send test requests to the endpoints using the sandbox base URL:\n\nhttps://api.storekit-sandbox.itunes.apple.com/\n\n\nSee Also\nResponse data types\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\ntype hasMore\nA Boolean value indicating whether the App Store has more transaction data.\ntype revision\nA token you use in a query to request the next set of transactions for the customer.\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format."
  },
  {
    "title": "Request a Test Notification",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/request_a_test_notification",
    "html": "URL\nPOST https://api.storekit.itunes.apple.com/inApps/v1/notifications/test\nSandbox URL\nPOST https://api.storekit-sandbox.itunes.apple.com/inApps/v1/notifications/test\nResponse Codes\n200\nSendTestNotificationResponse\nOK\n\nSuccessfully received your request to send a test notification.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n404\nServerNotificationURLNotFoundError\nNot Found\n\nAn error that indicates that the App Store server couldn’t find a notifications URL for your app in this environment. For more information, see ServerNotificationURLNotFoundError.\n\nContent-Type: application/json\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nServer error. Try again later.\n\nContent-Type: application/json\nDiscussion\n\nUse this endpoint to test if your server is receiving App Store Server Notifications at the URLs that you configured in App Store Connect. The Request a Test Notification endpoint prompts the App Store server to send your server a notification with the TEST notificationType. The App Store server sends the TEST notification to your production URL if you call this endpoint’s production URL; it sends it to your sandbox URL if you call this endpoint’s sandbox URL.\n\nAlthough TEST is a version 2 notification, you can call this endpoint regardless of whether you configured your App Store Server Notifications URL in App Store Connect for version 1 or version 2. For more information about the configuration and enabling notifications, see Enter a URL for App Store server notifications and Enabling App Store Server Notifications.\n\nThis endpoint responds with a testNotificationToken in SendTestNotificationResponse. To learn the result that the App Store server recorded when it attempted to send your server the TEST notification, call the Get Test Notification Status endpoint with the testNotificationToken. Use the status information to troubleshoot your server if it’s unable to receive the TEST notification.\n\nSee Also\nApp Store Server Notifications testing\nGet Test Notification Status\nCheck the status of the test App Store server notification sent to your server.\nobject SendTestNotificationResponse\nA response that contains the test notification token.\nobject CheckTestNotificationResponse\nA response that contains the contents of the App Store server's test notification and the result from your server."
  },
  {
    "title": "Get Test Notification Status",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/get_test_notification_status",
    "html": "URL\nGET https://api.storekit.itunes.apple.com/inApps/v1/notifications/test/{testNotificationToken}\nSandbox URL\nGET https://api.storekit-sandbox.itunes.apple.com/inApps/v1/notifications/test/{testNotificationToken}\nPath Parameters\ntestNotificationToken\ntestNotificationToken\n(Required) \n\nThe token that uniquely identifies a test, that you receive when you call Request a Test Notification.\n\nResponse Codes\n200\nCheckTestNotificationResponse\nOK\n\nSuccess.\n\nContent-Type: application/json\n400\nInvalidTestNotificationTokenError\nBad Request\n\nThe test notification token is invalid. Use a valid token that you receive in the SendTestNotificationResponse.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n404\nTestNotificationNotFoundError\nNot Found\n\nThe status isn’t yet available or the test notification token wasn’t found.\n\nContent-Type: application/json\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nServer error. Try again later.\n\nContent-Type: application/json\nDiscussion\n\nCall this endpoint using the testNotificationToken you receive when you call Request a Test Notification. You can check the status using the testNotificationToken for up to six months. Use the information in the CheckTestNotificationResponse to troubleshoot your server if it’s unable to receive App Store Server Notifications successfully.\n\nSee Also\nApp Store Server Notifications testing\nRequest a Test Notification\nAsk App Store Server Notifications to send a test notification to your server.\nobject SendTestNotificationResponse\nA response that contains the test notification token.\nobject CheckTestNotificationResponse\nA response that contains the contents of the App Store server's test notification and the result from your server."
  },
  {
    "title": "MassExtendRenewalDateStatusResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/massextendrenewaldatestatusresponse",
    "html": "Properties\nrequestIdentifier\nrequestIdentifier\n\nThe UUID that represents your request for a subscription-renewal-date extension.\n\nMaximum Length: 128\ncomplete\ncomplete\n\nA Boolean value that’s TRUE to indicate that the App Store completed your request to extend a subscription renewal date for all eligible subscribers.\n\nThe value is FALSE if the request is in progress.\n\ncompleteDate\ncompleteDate\n\nThe date that the App Store completes the request.\n\nAppears only if complete is TRUE.\n\nfailedCount\nfailedCount\n\nThe final count of subscribers that fail to receive a subscription-renewal-date extension.\n\nAppears only if complete is TRUE.\n\nsucceededCount\nsucceededCount\n\nThe final count of subscribers that successfully receive a subscription-renewal-date extension.\n\nAppears only if complete is TRUE.\n\nDiscussion\n\nThe App Store server sends this response when you call the Get Status of Subscription Renewal Date Extensions endpoint. Your request to Extend Subscription Renewal Dates for All Active Subscribers is complete when the value of the complete field is TRUE. Otherwise, the request is still in progress.\n\nThe App Store server also sends real-time notifications as it’s processing the subscription-renewal-date extension, including notifications with notificationType values of RENEWAL_EXTENSION and RENEWAL_EXTENDED. For more information, see App Store Server Notifications. For more information about extending subscription renewal dates, see Extending the renewal date for auto-renewable subscriptions.\n\nTopics\nData types\ntype complete\nA Boolean value that indicates whether the App Store completed the request to extend a subscription renewal date to active subscribers.\ntype completeDate\nThe UNIX time, in milliseconds, that the App Store completes a request to extend a subscription renewal date for eligible subscribers.\ntype failedCount\nThe count of subscriptions that fail to receive a subscription-renewal-date extension.\ntype succeededCount\nThe count of subscriptions that successfully receive a subscription-renewal-date extension.\nSee Also\nSubscription-renewal-date extension\nExtending the renewal date for auto-renewable subscriptions\nCompensate eligible active subscribers for service interruptions by extending a subscription’s renewal date.\nExtend a Subscription Renewal Date\nExtends the renewal date of a customer’s active subscription using the original transaction identifier.\nExtend Subscription Renewal Dates for All Active Subscribers\nUses a subscription’s product identifier to extend the renewal date for all of its eligible active subscribers.\nGet Status of Subscription Renewal Date Extensions\nChecks whether a renewal date extension request completed, and provides the final count of successful or failed extensions.\nobject ExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data for an individual subscription.\nobject ExtendRenewalDateResponse\nA response that indicates whether an individual renewal-date extension succeeded, and related details.\nobject MassExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data to apply for all eligible active subscribers.\nobject MassExtendRenewalDateResponse\nA response that indicates the server successfully received the subscription-renewal-date extension request."
  },
  {
    "title": "notificationHistoryResponseItem",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/notificationhistoryresponseitem",
    "html": "Properties\nsendAttempts\n[sendAttemptItem]\n\nAn array of information the App Store server records for its attempts to send a notification to your server. The maximum number of entries in the array is six.\n\nsignedPayload\nsignedPayload\n\nThe cryptographically signed payload, in JSON Web Signature (JWS) format, containing the original response body of a version 2 notification. For more information, see signedPayload in App Store Server Notifications.\n\nfirstSendAttemptResult\nstring\nDeprecated  \n\nThe result of the App Store server’s first attempt to send the notification to your server’s App Store Server Notifications V2 endpoint.\n\nUse the earliest sendAttemptItem in the sendAttempts array instead.\n\nTopics\nData types\ntype sendAttemptResult\nThe success or error information the App Store server records when it attempts to send an App Store server notification to your server.\nobject sendAttemptItem\nThe success or error information and the date the App Store server records when it attempts to send a server notification to your server.\ntype signedPayload\nA cryptographically signed payload, in JSON Web Signature (JWS) format, containing the response body for a version 2 notification.\nSee Also\nApp Store Server Notifications history\nGet Notification History\nGet a list of notifications that the App Store server attempted to send to your server.\nobject NotificationHistoryRequest\nThe request body for notification history.\nobject NotificationHistoryResponse\nA response that contains the App Store Server Notifications history for your app."
  },
  {
    "title": "NotificationHistoryResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/notificationhistoryresponse",
    "html": "Properties\nnotificationHistory\n[notificationHistoryResponseItem]\n\nAn array of App Store Server Notifications history records.\n\nIf you set onlyFailures to true in the NotificationHistoryRequest, this array contains only the notifications that failed to reach your server.\n\nhasMore\nhasMore\n\nA Boolean value that indicates whether the App Store has more notification history records to send. If hasMore is true, use the paginationToken in the subsequent request to get more records. If hasMore is false, there are no more records available.\n\npaginationToken\npaginationToken\n\nA pagination token that you provide to Get Notification History on a subsequent request to get the next page of responses.\n\nDiscussion\n\nThe Get Notification History endpoint returns this response. Notification history records contain the notifications that the App Store server attempted to send to your server’s App Store Server Notifications V2 endpoint.\n\nThe notification history response contains a maximum of 20 notification history records per response. If the history has more than 20 records, the hasMore value is true. Call Get Notification History again with paginationToken in the query to receive the next page of responses. When the App Store has no more records to send, the hasMore value is false.\n\nNote\n\nThe notifications in the history records reflect the state of an in-app purchase at the time the App Store originally sent the notification, and may not reflect its current state. To get the current state of auto-renewable subscriptions, call the Get All Subscription Statuses endpoint. For all other in-app purchase types, call the Get Transaction History endpoint.\n\nTopics\nData types\ntype paginationToken\nA pagination token that you return to the endpoint on a subsequent call to receive the next set of results.\ntype hasMore\nA Boolean value indicating whether the App Store has more transaction data.\nSee Also\nApp Store Server Notifications history\nGet Notification History\nGet a list of notifications that the App Store server attempted to send to your server.\nobject NotificationHistoryRequest\nThe request body for notification history.\nobject notificationHistoryResponseItem\nThe App Store server notification history record, including the signed notification payload and the result of the server’s first send attempt."
  },
  {
    "title": "Get Notification History",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/get_notification_history",
    "html": "URL\nPOST https://api.storekit.itunes.apple.com/inApps/v1/notifications/history\nSandbox URL\nPOST https://api.storekit-sandbox.itunes.apple.com/inApps/v1/notifications/history\nQuery Parameters\npaginationToken\npaginationToken\n\nAn optional token you use to get the next set of up to 20 notification history records. All responses that have more records available include a paginationToken.\n\nNote: Omit this parameter the first time you call this endpoint.\n\nHTTP Body\nNotificationHistoryRequest\n\nThe request body that includes the start and end dates, and optional query constraints.\n\nContent-Type: application/json\nResponse Codes\n200\nNotificationHistoryResponse\nOK\n\nRequest succeeded.\n\nContent-Type: application/json\n400\n(InvalidTransactionIdError | PaginationTokenExpiredError | InvalidPaginationTokenError | InvalidStartDateError | InvalidEndDateError | StartDateAfterEndDateError | StartDateTooFarInPastError | InvalidNotificationTypeError | MultipleFiltersSuppliedError)\nBad Request\n\nInvalid request.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n404\n(TransactionIdNotFoundError | AccountNotFoundError)\nNot Found\nContent-Type: application/json\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nServer error. Try again later.\n\nContent-Type: application/json\nDiscussion\n\nCall this endpoint to get a paginated list of the version 2 App Store Server Notifications that the App Store attempted to send to your server’s App Store Server Notifications V2 endpoint in a specified timespan. Choose a start date for the timespan that’s within the past 180 days.\n\nYou can further limit the request by specifying a notificationType or notificationSubtype in the NotificationHistoryRequest object. Alternatively, to get the notification history for a single user, provide a transactionId. The response, NotificationHistoryResponse, contains the full contents of the original notifications.\n\nEach time you call this endpoint, it returns a maximum of 20 notification history records. If the hasMore field in the NotificationHistoryResponse is true, use the paginationToken from the response in your subsequent request to get the next set of records. Use the same NotificationHistoryRequest body on subsequent requests.\n\nThis endpoint is available in the production and sandbox environments. For more information about configuring App Store Server Notifications, see Enabling App Store Server Notifications and Enter a URL for App Store server notifications.\n\nNote\n\nFor notifications that relate to in-app purchases, the history records reflect the state of an in-app purchase at the time the App Store originally sent the notification, and may not reflect its current state. To get the current state of auto-renewable subscriptions, call the Get All Subscription Statuses endpoint. For all other in-app purchase types, call the Get Transaction History endpoint.\n\nSee Also\nApp Store Server Notifications history\nobject NotificationHistoryRequest\nThe request body for notification history.\nobject NotificationHistoryResponse\nA response that contains the App Store Server Notifications history for your app.\nobject notificationHistoryResponseItem\nThe App Store server notification history record, including the signed notification payload and the result of the server’s first send attempt."
  },
  {
    "title": "NotificationHistoryRequest",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/notificationhistoryrequest",
    "html": "Properties\nstartDate\nstartDate\n\nRequired. The start date of the timespan for the requested App Store Server Notification history records. The startDate needs to precede the endDate. Choose a startDate that’s within the past 180 days from the current date.\n\nendDate\nendDate\n\nRequired. The end date of the timespan for the requested App Store Server Notification history records. Choose an endDate that’s later than the startDate. If you choose an endDate in the future, the endpoint automatically uses the current date as the endDate.\n\nnotificationType\nnotificationType\n\nOptional. A notification type. Provide this field to limit the notification history records to those with this one notification type. For a list of notifications types, see notificationType.\n\nNote: You may include either the transactionId or the notificationType property (or neither) in your query, but not both.\n\nnotificationSubtype\nnotificationSubtype\n\nOptional. A notification subtype. Provide this field to limit the notification history records to those with this one notification subtype. For a list of subtypes, see subtype. If you specify a notificationSubtype, you need to also specify its related notificationType.\n\nonlyFailures\nonlyFailures\n\nOptional. A Boolean value you set to true to request only the notifications that haven’t reached your server successfully. The response also includes notifications that the App Store server is currently retrying to send to your server.\n\ntransactionId\ntransactionId\n\nOptional. The transaction identifier, which may be an original transaction identifier, of any transaction belonging to the customer. Provide this field to limit the notification history request to this one customer.\n\nNote: You may include either the transactionId or the notificationType property (or neither) in your query, but not both.\n\noriginalTransactionId\nstring\nDeprecated  \n\nUse transactionId instead.\n\nDiscussion\n\nSpecify the constraints for the App Store Server Notification history entries you’re requesting from Get Notification History. The request requires the startDate and endDate fields; all other fields are optional. Include only the fields in your request that you need to constrain the response.\n\nIf you provide both the notificationType and subtype, they need to be a valid combination, otherwise, the request returns an InvalidNotificationTypeError error. For more information, see notificationType and subtype.\n\nNote\n\nNotification history is available for the past 180 days. Choose a startDate that’s within 180 days of the current date.\n\nTopics\nData types\ntype startDate\nThe start date of a timespan, expressed in UNIX time, in milliseconds.\ntype endDate\nThe end date of a timespan, expressed in UNIX time, in milliseconds.\ntype notificationType\nA notification type value that App Store Server Notifications 2 uses.\ntype notificationSubtype\nA notification subtype value that App Store Server Notifications 2 uses.\ntype onlyFailures\nA Boolean value that indicates whether the response includes only notifications that failed to reach your server.\nSee Also\nApp Store Server Notifications history\nGet Notification History\nGet a list of notifications that the App Store server attempted to send to your server.\nobject NotificationHistoryResponse\nA response that contains the App Store Server Notifications history for your app.\nobject notificationHistoryResponseItem\nThe App Store server notification history record, including the signed notification payload and the result of the server’s first send attempt."
  },
  {
    "title": "MassExtendRenewalDateRequest",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/massextendrenewaldaterequest",
    "html": "Properties\nrequestIdentifier\nrequestIdentifier\n\nRequired. A string that contains a one-time UUID value you provide to identify this subscription-renewal-date extension request.\n\nMaximum Length: 128\nextendByDays\nextendByDays\n\nRequired. The number of days to extend the subscription renewal date.\n\nMaximum Value: 90\nextendReasonCode\nextendReasonCode\n\nRequired. The reason code for the subscription-renewal-date extension.\n\nproductId\nproductId\n\nRequired. The product identifier of the auto-renewable subscription that you’re requesting the renewal-date extension for.\n\nstorefrontCountryCodes\nstorefrontCountryCodes\n\nA list of storefront country codes you provide to limit the storefronts that are eligible to receive the subscription-renewal-date extension. Omit this list to request the subscription-renewal-date extension in all storefronts.\n\nDiscussion\n\nThis request body applies to the Extend Subscription Renewal Dates for All Active Subscribers endpoint.\n\nThe requestIdentifier uniquely identifies this request. Use the same requestIdentifier in the following APIs :\n\nThe Get Status of Subscription Renewal Date Extensions endpoint\n\nThe summary object in App Store Server Notifications.\n\nFor more information, see Extending the renewal date for auto-renewable subscriptions.\n\nTopics\nData types\ntype extendByDays\nThe number of days to extend the subscription renewal date.\ntype extendReasonCode\nThe code that represents the reason for the subscription-renewal-date extension.\ntype productId\nThe product identifier of the in-app purchase.\ntype requestIdentifier\nA string that contains a unique identifier you provide to track each subscription-renewal-date extension request.\ntype storefrontCountryCode\nThe three-letter code that represents the country or region associated with the App Store storefront.\ntype storefrontCountryCodes\nA list of storefront country codes you provide to limit the storefronts for a subscription-renewal-date extension.\nSee Also\nSubscription-renewal-date extension\nExtending the renewal date for auto-renewable subscriptions\nCompensate eligible active subscribers for service interruptions by extending a subscription’s renewal date.\nExtend a Subscription Renewal Date\nExtends the renewal date of a customer’s active subscription using the original transaction identifier.\nExtend Subscription Renewal Dates for All Active Subscribers\nUses a subscription’s product identifier to extend the renewal date for all of its eligible active subscribers.\nGet Status of Subscription Renewal Date Extensions\nChecks whether a renewal date extension request completed, and provides the final count of successful or failed extensions.\nobject ExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data for an individual subscription.\nobject ExtendRenewalDateResponse\nA response that indicates whether an individual renewal-date extension succeeded, and related details.\nobject MassExtendRenewalDateResponse\nA response that indicates the server successfully received the subscription-renewal-date extension request.\nobject MassExtendRenewalDateStatusResponse\nA response that indicates the current status of a request to extend the subscription renewal date to all eligible subscribers."
  },
  {
    "title": "ExtendRenewalDateResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/extendrenewaldateresponse",
    "html": "Properties\neffectiveDate\neffectiveDate\n\nThe new subscription expiration date of a successful subscription-renewal-date extension.\n\noriginalTransactionId\noriginalTransactionId\n\nThe original transaction identifier of the subscription that experienced a service interruption.\n\nsuccess\nsuccess\n\nA Boolean value that indicates whether the subscription-renewal-date extension succeeded.\n\nwebOrderLineItemId\nwebOrderLineItemId\n\nA unique ID that identifies subscription-purchase events, including subscription renewals, across devices.\n\nDiscussion\n\nThis object is the response data for the Extend a Subscription Renewal Date endpoint.\n\nTopics\nResponse data types\ntype effectiveDate\nThe new subscription expiration date for a subscription-renewal extension.\ntype originalTransactionId\nThe original transaction identifier of a purchase.\ntype success\nA Boolean value that indicates whether the subscription-renewal-date extension succeeded.\ntype webOrderLineItemId\nThe unique identifier of subscription-purchase events across devices, including renewals.\nSee Also\nSubscription-renewal-date extension\nExtending the renewal date for auto-renewable subscriptions\nCompensate eligible active subscribers for service interruptions by extending a subscription’s renewal date.\nExtend a Subscription Renewal Date\nExtends the renewal date of a customer’s active subscription using the original transaction identifier.\nExtend Subscription Renewal Dates for All Active Subscribers\nUses a subscription’s product identifier to extend the renewal date for all of its eligible active subscribers.\nGet Status of Subscription Renewal Date Extensions\nChecks whether a renewal date extension request completed, and provides the final count of successful or failed extensions.\nobject ExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data for an individual subscription.\nobject MassExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data to apply for all eligible active subscribers.\nobject MassExtendRenewalDateResponse\nA response that indicates the server successfully received the subscription-renewal-date extension request.\nobject MassExtendRenewalDateStatusResponse\nA response that indicates the current status of a request to extend the subscription renewal date to all eligible subscribers."
  },
  {
    "title": "MassExtendRenewalDateResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/massextendrenewaldateresponse",
    "html": "Properties\nrequestIdentifier\nrequestIdentifier\n\nA string that contains the UUID that identifies the subscription-renewal-date extension request.\n\nMaximum Length: 128\nDiscussion\n\nThe App Store server returns this response when you call the Extend Subscription Renewal Dates for All Active Subscribers endpoint. Because the endpoint runs asynchronously, this response means the App Store received your request and is processing it. The request may take multiple hours or days to complete, depending on the number of subscribers.\n\nAs the App Store server processes your request, it sends notifications (App Store Server Notifications V2) in near real-time to report on each subscription it processes. Look for notifications with the notificationType of RENEWAL_EXTENSION and RENEWAL_EXTENDED. The server sends a RENEWAL_EXTENSION notification with a subtype of SUCCESS when it completes the request.\n\nThe Get Status of Subscription Renewal Date Extensions endpoint reports on whether your request is complete. For completed requests, it also reports the count of successful and failed subscription-renewal-date extensions.\n\nFor more information, see Extending the renewal date for auto-renewable subscriptions.\n\nSee Also\nSubscription-renewal-date extension\nExtending the renewal date for auto-renewable subscriptions\nCompensate eligible active subscribers for service interruptions by extending a subscription’s renewal date.\nExtend a Subscription Renewal Date\nExtends the renewal date of a customer’s active subscription using the original transaction identifier.\nExtend Subscription Renewal Dates for All Active Subscribers\nUses a subscription’s product identifier to extend the renewal date for all of its eligible active subscribers.\nGet Status of Subscription Renewal Date Extensions\nChecks whether a renewal date extension request completed, and provides the final count of successful or failed extensions.\nobject ExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data for an individual subscription.\nobject ExtendRenewalDateResponse\nA response that indicates whether an individual renewal-date extension succeeded, and related details.\nobject MassExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data to apply for all eligible active subscribers.\nobject MassExtendRenewalDateStatusResponse\nA response that indicates the current status of a request to extend the subscription renewal date to all eligible subscribers."
  },
  {
    "title": "ExtendRenewalDateRequest",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/extendrenewaldaterequest",
    "html": "Properties\nextendByDays\nextendByDays\n\nRequired. The number of days to extend the subscription renewal date.\n\nMaximum Value: 90\nextendReasonCode\nextendReasonCode\n\nRequired. The reason code for the subscription date extension.\n\nrequestIdentifier\nrequestIdentifier\n\nRequired. A string that contains a value you provide to uniquely identify this renewal-date extension request.\n\nMaximum Length: 128\nDiscussion\n\nUse this object with the Extend a Subscription Renewal Date endpoint.\n\nTopics\nRequest data types\ntype extendByDays\nThe number of days to extend the subscription renewal date.\ntype extendReasonCode\nThe code that represents the reason for the subscription-renewal-date extension.\ntype requestIdentifier\nA string that contains a unique identifier you provide to track each subscription-renewal-date extension request.\nSee Also\nSubscription-renewal-date extension\nExtending the renewal date for auto-renewable subscriptions\nCompensate eligible active subscribers for service interruptions by extending a subscription’s renewal date.\nExtend a Subscription Renewal Date\nExtends the renewal date of a customer’s active subscription using the original transaction identifier.\nExtend Subscription Renewal Dates for All Active Subscribers\nUses a subscription’s product identifier to extend the renewal date for all of its eligible active subscribers.\nGet Status of Subscription Renewal Date Extensions\nChecks whether a renewal date extension request completed, and provides the final count of successful or failed extensions.\nobject ExtendRenewalDateResponse\nA response that indicates whether an individual renewal-date extension succeeded, and related details.\nobject MassExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data to apply for all eligible active subscribers.\nobject MassExtendRenewalDateResponse\nA response that indicates the server successfully received the subscription-renewal-date extension request.\nobject MassExtendRenewalDateStatusResponse\nA response that indicates the current status of a request to extend the subscription renewal date to all eligible subscribers."
  },
  {
    "title": "Extend Subscription Renewal Dates for All Active Subscribers",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/extend_subscription_renewal_dates_for_all_active_subscribers",
    "html": "URL\nPOST https://api.storekit.itunes.apple.com/inApps/v1/subscriptions/extend/mass/\nSandbox URL\nPOST https://api.storekit-sandbox.itunes.apple.com/inApps/v1/subscriptions/extend/mass/\nHTTP Body\nMassExtendRenewalDateRequest\n\nThe request body for extending a subscription renewal date for all of its active subscribers.\n\nContent-Type: application/json\nResponse Codes\n200\nMassExtendRenewalDateResponse\nOK\n\nRequest succeeded.\n\nIf you reuse the requestIdentifier to call the endpoint again, the server responds with 200.\n\nContent-Type: application/json\n400\n(InvalidExtendByDaysError | InvalidProductIdError | InvalidExtendReasonCodeError | InvalidRequestIdentifierError | InvalidEmptyStorefrontCountryCodeListError | InvalidStorefrontCountryCodeError)\nBad Request\n\nThe request is invalid and can’t be accepted.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n403\n(SubscriptionExtensionIneligibleError | SubscriptionMaxExtensionError)\nForbidden\n\nThe request is invalid and can’t be accepted.\n\nContent-Type: application/json\n404\nStatusRequestNotFoundError\nNot Found\n\nThe server didn’t find a subscription-renewal-date extension request for the request identifier and product identifier you provided.\n\nContent-Type: application/json\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nThe request failed. This may be due to a temporary outage. Check the specific error message for further information.\n\nContent-Type: application/json\nDiscussion\n\nUse this endpoint to compensate your customers for temporary service outages, canceled events, or interruptions to live streamed events by extending the renewal date of their paid, active subscription. This endpoint acts on all active subscriptions for the product identifier you specify, and is limited to the storefronts you optionally specify.\n\nTo call this endpoint, provide the subscription product identifier that experienced the service interruption, and other information in the request body, MassExtendRenewalDateRequest.\n\nA successful response with an HTTP 200 status code contains the MassExtendRenewalDateResponse object, which includes the same unique requestIdentifier you provide in the request. This endpoint is an asynchronous request. A successful response indicates that the App Store server is processing the request. Status codes other than HTTP 200 indicate that the request failed.\n\nNote\n\nAfter the subscription renewal extension goes into effect, there’s no way to reverse it. The extension period doesn’t count toward the one year of paid service when the App Store calculates the developer’s commission rate.\n\nFor more information about this endpoint, including subscription eligibility, getting status notifications, and retrying extensions that fail, see Extending the renewal date for auto-renewable subscriptions.\n\nSee Also\nSubscription-renewal-date extension\nExtending the renewal date for auto-renewable subscriptions\nCompensate eligible active subscribers for service interruptions by extending a subscription’s renewal date.\nExtend a Subscription Renewal Date\nExtends the renewal date of a customer’s active subscription using the original transaction identifier.\nGet Status of Subscription Renewal Date Extensions\nChecks whether a renewal date extension request completed, and provides the final count of successful or failed extensions.\nobject ExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data for an individual subscription.\nobject ExtendRenewalDateResponse\nA response that indicates whether an individual renewal-date extension succeeded, and related details.\nobject MassExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data to apply for all eligible active subscribers.\nobject MassExtendRenewalDateResponse\nA response that indicates the server successfully received the subscription-renewal-date extension request.\nobject MassExtendRenewalDateStatusResponse\nA response that indicates the current status of a request to extend the subscription renewal date to all eligible subscribers."
  },
  {
    "title": "Extending the renewal date for auto-renewable subscriptions",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/extending_the_renewal_date_for_auto-renewable_subscriptions",
    "html": "Overview\n\nIf your service experiences a temporary outage, canceled event, or interruption to a live streamed event, you may choose to compensate your customers by extending the renewal date of their paid, active subscription. The App Store Server API provides two endpoints for requesting such extensions:\n\nExtend a Subscription Renewal Date, for an individual subscription\n\nExtend Subscription Renewal Dates for All Active Subscribers, for all subscriptions based on a product identifier, optionally limited to a list of storefronts\n\nYou can move the renewal date for active auto-renewable subscriptions up to 90 days into the future if your service experiences an unexpected outage. To give you flexibility to resolve service issues or outages, you can extend the renewal date twice within a year (365 days) per customer.\n\nNote\n\nAfter the subscription renewal extension goes into effect, there’s no way to reverse it. The extension period doesn’t count toward the one year of paid service when the App Store calculates the developer’s commission rate.\n\nDetermine eligible subscriptions\n\nOnly active auto-renewable subscriptions with at least one previously paid period are eligible to have a renewal date extension.\n\nThe following types of subscriptions aren’t eligible for renewal date extensions:\n\nSubscriptions in a free offer period\n\nInactive subscriptions in a billing retry state\n\nSubscriptions in a billing grace period state with an expiration date in the past\n\nSubscriptions that have already received two renewal date extensions within the past 365 days\n\nExpired subscriptions\n\nThe App Store attempts to extend the renewal dates for eligible subscriptions only.\n\nWhen the system extends eligible purchased subscriptions that support Family Sharing, it automatically extends the family members’ subscriptions as well. However, the Extend a Subscription Renewal Date endpoint doesn't support requests to extend a family member's subscription directly.\n\nExtend renewal dates for one or many subscribers\n\nTo request a renewal date extension for all eligible subscribers, call the Extend Subscription Renewal Dates for All Active Subscribers endpoint. You indicate the subscription by its productId. This endpoint is convenient for applying the renewal date extension to a large number of subscriptions with just one call. If a server outage affects some regions and not others, you can limit the request by storefront by including the optional storefrontCountryCodes property in the request body, MassExtendRenewalDateRequest.\n\nTo request a renewal date extension for a single subscriber, call the Extend a Subscription Renewal Date endpoint. You identify the subscription with an originalTransactionId. Use this endpoint to retry a renewal date extension that fails with the other endpoint, as described in Retry attempts that fail below.\n\nReceive in-progress and summary notifications\n\nRequests to the Extend Subscription Renewal Dates for All Active Subscribers endpoint can take hours or days to complete, depending on the number of subscribers. The App Store server sends real-time notifications as it processes your request. The notifications inform you as each renewal date extension succeeds or fails, as well as when your request is complete.\n\nTo receive notifications, support App Store Server Notifications V2 on your server. For more information, see Enabling App Store Server Notifications.\n\nThe following table lists the notifications and their notificationType and subtype values:\n\nNotification type\n\n\t\n\nSubtype\n\n\t\n\nDescription\n\n\n\n\nRENEWAL_EXTENDED\n\n\t\n\n(none)\n\n\t\n\nThe App Store extended the subscription renewal date for a specific subscription.\n\n\n\n\nRENEWAL_EXTENSION\n\n\t\n\nFAILURE\n\n\t\n\nThe subscription-renewal-date extension failed for a specific subscription.\n\n\n\n\nRENEWAL_EXTENSION\n\n\t\n\nSUMMARY\n\n\t\n\nThe request is complete.\n\nFor more information about the contents of a notification payload, see responseBodyV2DecodedPayload.\n\nFor requests to the Extend a Subscription Renewal Date endpoint, App Store Server Notifications sends a RENEWAL_EXTENDED notification when the request succeeds. The endpoint returns more information in its response body, ExtendRenewalDateResponse.\n\nCheck whether a request is complete\n\nTo check whether your request to Extend Subscription Renewal Dates for All Active Subscribers is complete, call the Get Status of Subscription Renewal Date Extensions endpoint. Complete requests include the final count of successful and failed renewal date extensions. If you don’t need this status on demand, use App Store Server Notifications for status information instead, as described in the previous section.\n\nRetry attempts that fail\n\nThe App Store server sends real-time notifications as it processes your request to Extend Subscription Renewal Dates for All Active Subscribers. The notifications inform you each time an attempt to extend the renewal date succeeds or fails. You can retry the failed attempts by calling the Extend a Subscription Renewal Date endpoint with the failed subscription’s transaction identifier. Follow these steps:\n\nSupport App Store Server Notifications V2 on your server. For more information, see Enabling App Store Server Notifications.\n\nLook for notifications with a notificationType of RENEWAL_EXTENSION and subtype of FAILURE. The notification identifies a specific subscription that failed to receive a subscription-renewal-date extension.\n\nFind the subscription’s transaction identifier in the notification’s payload, responseBodyV2DecodedPayload. Specifically, use the originalTransactionId in the JWSTransactionDecodedPayload, which you get from the JWSTransaction of the data object in the payload.\n\nCall Extend a Subscription Renewal Date using the originalTransactionID.\n\nSee Also\nSubscription-renewal-date extension\nExtend a Subscription Renewal Date\nExtends the renewal date of a customer’s active subscription using the original transaction identifier.\nExtend Subscription Renewal Dates for All Active Subscribers\nUses a subscription’s product identifier to extend the renewal date for all of its eligible active subscribers.\nGet Status of Subscription Renewal Date Extensions\nChecks whether a renewal date extension request completed, and provides the final count of successful or failed extensions.\nobject ExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data for an individual subscription.\nobject ExtendRenewalDateResponse\nA response that indicates whether an individual renewal-date extension succeeded, and related details.\nobject MassExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data to apply for all eligible active subscribers.\nobject MassExtendRenewalDateResponse\nA response that indicates the server successfully received the subscription-renewal-date extension request.\nobject MassExtendRenewalDateStatusResponse\nA response that indicates the current status of a request to extend the subscription renewal date to all eligible subscribers."
  },
  {
    "title": "Get Status of Subscription Renewal Date Extensions",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/get_status_of_subscription_renewal_date_extensions",
    "html": "URL\nGET https://api.storekit.itunes.apple.com/inApps/v1/subscriptions/extend/mass/{productId}/{requestIdentifier}\nSandbox URL\nGET https://api.storekit-sandbox.itunes.apple.com/inApps/v1/subscriptions/extend/mass/{productId}/{requestIdentifier}\nPath Parameters\nproductId\nproductId\n(Required) \n\nThe product identifier of the auto-renewable subscription that you request a renewal-date extension for.\n\nrequestIdentifier\nrequestIdentifier\n(Required) \n\nThe UUID that represents your request to the Extend Subscription Renewal Dates for All Active Subscribers endpoint.\n\nMaximum Length: 128\nResponse Codes\n200\nMassExtendRenewalDateStatusResponse\nOK\n\nThe request succeeded.\n\nContent-Type: application/json\n400\n(InvalidProductIdError | InvalidRequestIdentifierError)\nBad Request\n\nThe request is invalid.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nServer error. Try again later.\n\nContent-Type: application/json\nDiscussion\n\nThis endpoint provides basic status information about a request you initiate when you call the Extend Subscription Renewal Dates for All Active Subscribers endpoint. Such requests may take hours, or even days, depending on the number of subscribers. This status tells whether the request is complete. If so, it has the total count of successful and failed subscription-renewal-date extensions.\n\nTip\n\nIf you don’t need this status on demand, or need more details, use the App Store Server Notifications for near real-time status information instead. For more information about related notifications, see Extending the renewal date for auto-renewable subscriptions.\n\nSee Also\nSubscription-renewal-date extension\nExtending the renewal date for auto-renewable subscriptions\nCompensate eligible active subscribers for service interruptions by extending a subscription’s renewal date.\nExtend a Subscription Renewal Date\nExtends the renewal date of a customer’s active subscription using the original transaction identifier.\nExtend Subscription Renewal Dates for All Active Subscribers\nUses a subscription’s product identifier to extend the renewal date for all of its eligible active subscribers.\nobject ExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data for an individual subscription.\nobject ExtendRenewalDateResponse\nA response that indicates whether an individual renewal-date extension succeeded, and related details.\nobject MassExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data to apply for all eligible active subscribers.\nobject MassExtendRenewalDateResponse\nA response that indicates the server successfully received the subscription-renewal-date extension request.\nobject MassExtendRenewalDateStatusResponse\nA response that indicates the current status of a request to extend the subscription renewal date to all eligible subscribers."
  },
  {
    "title": "Extend a Subscription Renewal Date",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/extend_a_subscription_renewal_date",
    "html": "URL\nPUT https://api.storekit.itunes.apple.com/inApps/v1/subscriptions/extend/{originalTransactionId}\nSandbox URL\nPUT https://api.storekit-sandbox.itunes.apple.com/inApps/v1/subscriptions/extend/{originalTransactionId}\nPath Parameters\noriginalTransactionId\noriginalTransactionId\n(Required) \n\nThe original transaction identifier of the subscription receiving a renewal date extension.\n\nHTTP Body\nExtendRenewalDateRequest\n\nThe request body containing subscription-renewal-extension data.\n\nContent-Type: application/json\nResponse Codes\n200\nExtendRenewalDateResponse\nOK\n\nRequest succeeded.\n\nContent-Type: application/json\n400\n(InvalidOriginalTransactionIdError | InvalidExtendByDaysError | InvalidExtendReasonCodeError | InvalidRequestIdentifierError)\nBad Request\n\nThe request is invalid and can’t be accepted.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n403\n(SubscriptionExtensionIneligibleError | SubscriptionMaxExtensionError | FamilySharedSubscriptionExtensionIneligibleError)\nForbidden\n\nThe request is invalid and can’t be accepted.\n\nContent-Type: application/json\n404\nOriginalTransactionIdNotFoundError\nNot Found\n\nThe request is invalid and can’t be accepted.\n\nContent-Type: application/json\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nThe request failed. This may be due to a temporary outage. Check the specific error message for further information.\n\nContent-Type: application/json\nDiscussion\n\nUse this endpoint to compensate your customers for temporary service outages, canceled events, or interruptions to live streamed events by extending the renewal date of their paid, active subscription. This endpoint acts on a single subscription for a transaction identifier that you specify.\n\nTo call this endpoint, provide the original transaction identifier of the subscription that experienced the service interruption. In the request body, ExtendRenewalDateRequest, provide the extension duration, the reason code for the extension, and a unique requestIdentifier for each extension request.\n\nWhen this endpoint extends eligible purchased subscriptions that support Family Sharing, it automatically extends the family members' subscriptions as well. However, the endpoint doesn’t support requests to extend a family member’s subscription directly.\n\nA successful response with an HTTP 200 status code contains the ExtendRenewalDateResponse object. The response object includes the same unique request identifier you provide in the request, and information you need to determine whether the extension succeeds. For successful extensions, the new subscription expiration date is the effectiveDate. All status codes other than HTTP 200 indicate that the request failed.\n\nNote\n\nAfter the subscription renewal extension goes into effect, there’s no way to reverse it. The extension period doesn’t count toward the one year of paid service when the App Store calculates the developer’s commission rate.\n\nFor more information about this and related endpoints, including subscription eligibility, see Extending the renewal date for auto-renewable subscriptions.\n\nSee Also\nSubscription-renewal-date extension\nExtending the renewal date for auto-renewable subscriptions\nCompensate eligible active subscribers for service interruptions by extending a subscription’s renewal date.\nExtend Subscription Renewal Dates for All Active Subscribers\nUses a subscription’s product identifier to extend the renewal date for all of its eligible active subscribers.\nGet Status of Subscription Renewal Date Extensions\nChecks whether a renewal date extension request completed, and provides the final count of successful or failed extensions.\nobject ExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data for an individual subscription.\nobject ExtendRenewalDateResponse\nA response that indicates whether an individual renewal-date extension succeeded, and related details.\nobject MassExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data to apply for all eligible active subscribers.\nobject MassExtendRenewalDateResponse\nA response that indicates the server successfully received the subscription-renewal-date extension request.\nobject MassExtendRenewalDateStatusResponse\nA response that indicates the current status of a request to extend the subscription renewal date to all eligible subscribers."
  },
  {
    "title": "Get Refund History V1",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/get_refund_history_v1",
    "html": "Deprecated\n\nUse Get Refund History instead.\n\nURL\nGET https://api.storekit.itunes.apple.com/inApps/v1/refund/lookup/{originalTransactionId}\nSandbox URL\nGET https://api.storekit-sandbox.itunes.apple.com/inApps/v1/refund/lookup/{originalTransactionId}\nPath Parameters\noriginalTransactionId\noriginalTransactionId\n(Required) \n\nThe original transaction identifier for a transaction that belongs to the customer.\n\nResponse Codes\n200\nRefundLookupResponse\nOK\n\nRequest succeeded.\n\nContent-Type: application/json\n400\nInvalidOriginalTransactionIdError\nBad Request\n\nThe request is invalid. Check the specific error message for further information.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n404\nOriginalTransactionIdNotFoundError\nNot Found\n\nThe request is invalid. Check the specific error message for further information.\n\nContent-Type: application/json\n429\nRateLimitExceededError\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nThe request failed. This may be due to a temporary outage. Check the specific error message for further information.\n\nContent-Type: application/json\nDiscussion\n\nCall this endpoint to get a customer’s refund history for your app. The response (RefundLookupResponse) includes up to 50 of the customer’s most-recently refunded transactions, based on the revocationDate.\n\nNote\n\nTo get the complete refund history, use Get Refund History.\n\nTo call this endpoint, provide any original transaction identifier (originalID) for any of the customer’s in-app purchases. The response only includes App Store-approved refunds for any product type: consumable, non-consumable, auto-renewable subscriptions, and non-renewing subscriptions. For more information about product types, see In-app purchase.\n\nThe information in the response is the same as the information in one or more REFUND notifications (notificationType) from App Store Server Notifications. Use this API to retrieve any refund notifications you may have missed, such as during a server outage.\n\nA successful response may have an empty signedTransactions array if the customer hasn’t received any App Store-approved refunds. To identify the date and reason code for a refund, see revocationDate and revocationReason in the JWSTransactionDecodedPayload.\n\nThe App Store Server API returns information based on the customer’s in-app purchase history regardless of whether the customer installs, removes, or reinstalls the app on their devices.\n\nSee Also\nRefund lookup\nGet Refund History\nGet a paginated list of all of a customer’s refunded in-app purchases for your app.\nobject RefundHistoryResponse\nA response that contains an array of signed JSON Web Signature (JWS) refunded transactions, and paging information.\nobject RefundLookupResponse\nA response that contains an array of signed JSON Web Signature (JWS) transactions.\nDeprecated"
  },
  {
    "title": "RefundLookupResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/refundlookupresponse",
    "html": "Deprecated\n\nUse Get Refund History and its response, RefundHistoryResponse, instead.\n\nProperties\nsignedTransactions\n[JWSTransaction]\n\nA list of JWS transactions, or an empty array if the customer has received no refunds in your app. The transactions are sorted in ascending order by their revocationDate.\n\nDiscussion\n\nIf the customer hasn’t received any refunds for in-app purchases in your app, the signedTransactions array is empty. To read the transaction information, decode the payload for each JWSTransaction object in the signedTransactions array. Use a JWSTransactionDecodedPayload object to read the transaction information in the payload.\n\nThis response can contain a maximum of 50 transactions in the signedTransactions array.\n\nSee Also\nRefund lookup\nGet Refund History\nGet a paginated list of all of a customer’s refunded in-app purchases for your app.\nobject RefundHistoryResponse\nA response that contains an array of signed JSON Web Signature (JWS) refunded transactions, and paging information.\nGet Refund History V1\nGet a list of up to 50 of a customer’s refunded in-app purchases for your app.\nDeprecated"
  },
  {
    "title": "RefundHistoryResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/refundhistoryresponse",
    "html": "Properties\nhasMore\nhasMore\n\nA Boolean value that indicates whether the App Store has more transactions than it returns in signedTransactions. If the value is true, use the revision token to request the next set of transactions by calling Get Refund History.\n\nrevision\nrevision\n\nA token you provide in a query to request the next set of transactions from the Get Refund History endpoint.\n\nsignedTransactions\n[JWSTransaction]\n\nA list of up to 20 JWS transactions, or an empty array if the customer hasn't received any refunds in your app.\n\nThe transactions are sorted in ascending order by revocationDate.\n\nDiscussion\n\nThe Get Refund History endpoint returns this response.\n\nThis response returns a maximum of 20 refunded transactions. If your customer has more than 20 refunded transactions, the hasMore value is true. Each response includes a revision token. Call Get Refund History again with the revision token in the query to receive the next set of transactions. When the App Store has no more transactions to send, the hasMore value is false.\n\nConsider storing the revision token from the last page of results with other customer account information. Use it at a later date when you call Get Refund History to request any new refunded transactions since the last time you called the endpoint for the customer. By using the stored revision token, you can avoid fetching transactions you’ve already received.\n\nTopics\nResponse data types\ntype hasMore\nA Boolean value indicating whether the App Store has more transaction data.\ntype revision\nA token you use in a query to request the next set of transactions for the customer.\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\nSee Also\nRefund lookup\nGet Refund History\nGet a paginated list of all of a customer’s refunded in-app purchases for your app.\nGet Refund History V1\nGet a list of up to 50 of a customer’s refunded in-app purchases for your app.\nDeprecated\nobject RefundLookupResponse\nA response that contains an array of signed JSON Web Signature (JWS) transactions.\nDeprecated"
  },
  {
    "title": "Get Refund History",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/get_refund_history",
    "html": "URL\nGET https://api.storekit.itunes.apple.com/inApps/v2/refund/lookup/{transactionId}\nSandbox URL\nGET https://api.storekit-sandbox.itunes.apple.com/inApps/v2/refund/lookup/{transactionId}\nPath Parameters\ntransactionId\ntransactionId\n(Required) \n\nThe identifier of a transaction that belongs to the customer, and which may be an original transaction identifier (originalTransactionId).\n\nQuery Parameters\nrevision\nrevision\n\nA token you provide to get the next set of up to 20 transactions. All responses include a revision token. Use the revision token from the previous RefundHistoryResponse.\n\nYou can store the revision token from the final results page and use it for a future call. For more information, see RefundHistoryResponse.\n\nThe revision token is required in all requests except the initial request.\n\nResponse Codes\n200\nRefundHistoryResponse\nOK\n\nRequest succeeded.\n\nContent-Type: application/json\n400\n(InvalidTransactionIdError | InvalidRequestRevisionError)\nBad Request\n\nInvalid request. Check the specific error message for further information.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n404\nTransactionIdNotFoundError\nNot Found\n\nInvalid request. Check the specific error message for further information.\n\nContent-Type: application/json\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nServer error. Try again later.\n\nContent-Type: application/json\nDiscussion\n\nCall this endpoint to get the customer’s complete refund history for your app by providing the transaction identifier (transactionId) for any of the customer’s in-app purchases. Each response (RefundHistoryResponse) contains a maximum of 20 refunded transactions. If the hasMore property in the response is true, call the endpoint again using the revision token from the response to get the next set of refunded transactions.\n\nThe response only includes App Store-approved refunds for any product type: consumable, non-consumable, auto-renewable subscriptions, and non-renewing subscriptions. For more information about product types, see In-app purchase.\n\nThe information in the response is the same as the information in one or more REFUND notifications (notificationType) from App Store Server Notifications. Use this API to retrieve any refund notifications you may have missed, such as during a server outage.\n\nA successful response may have an empty signedTransactions array if the customer hasn’t received any App Store-approved refunds. To identify the date and reason code for a refund, see revocationDate and revocationReason in the JWSTransactionDecodedPayload.\n\nThe App Store Server API returns information based on the customer’s in-app purchase history regardless of whether the customer installs, removes, or reinstalls the app on their devices.\n\nTo get a customer’s full refund history for your app, start by calling the endpoint without any query parameters, as follows:\n\nGET https://api.storekit.itunes.apple.com/inApps/v2/refund/lookup/{transactionId}\n\n\nFor subsequent requests, include the revision token from the previous RefundHistoryResponse.\n\nGET https://api.storekit.itunes.apple.com/inApps/v2/refund/lookup/{transactionId}?revision={revision}\n\n\nSee Also\nRefund lookup\nobject RefundHistoryResponse\nA response that contains an array of signed JSON Web Signature (JWS) refunded transactions, and paging information.\nGet Refund History V1\nGet a list of up to 50 of a customer’s refunded in-app purchases for your app.\nDeprecated\nobject RefundLookupResponse\nA response that contains an array of signed JSON Web Signature (JWS) transactions.\nDeprecated"
  },
  {
    "title": "OrderLookupResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/orderlookupresponse",
    "html": "Properties\nstatus\nOrderLookupStatus\n\nThe status that indicates whether the order ID is valid.\n\nsignedTransactions\n[JWSTransaction]\n\nAn array of in-app purchase transactions that are part of order, signed by Apple, in JSON Web Signature format.\n\nDiscussion\n\nThe order lookup response contains information about the orderId you specify when you call Look Up Order ID.\n\nIf the orderId that you provide in the request is invalid, the response doesn't include the signedTransactions array. If the orderId is valid, expect at least one transaction in the signedTransactions array.\n\nTopics\nResponse data types\ntype OrderLookupStatus\nA value that indicates whether the order ID in the request is valid for your app.\nSee Also\nOrder ID lookup\nLook Up Order ID\nGet a customer’s in-app purchases from a receipt using the order ID.\ntype orderId\nThe customer’s order ID from an App Store receipt for in-app purchases."
  },
  {
    "title": "Look Up Order ID",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/look_up_order_id",
    "html": "URL\nGET https://api.storekit.itunes.apple.com/inApps/v1/lookup/{orderId}\nSandbox URL\nGET https://api.storekit-sandbox.itunes.apple.com/inApps/v1/lookup/{orderId}\nPath Parameters\norderId\norderId\n(Required) \n\nThe order ID for in-app purchases that belong to the customer.\n\nResponse Codes\n200\nOrderLookupResponse\nOK\n\nRequest succeeded.\n\nContent-Type: application/json\n400\nGeneralBadRequestError\nBad Request\n\nThe request is invalid and can’t be accepted.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\n\nServer error. Try again later.\n\nContent-Type: application/json\nDiscussion\n\nImportant\n\nThis endpoint isn’t available in the sandbox environment.\n\nCall this endpoint to identify and validate a customer’s in-app purchases, based on their order ID.\n\nWhen a customer contacts you for support, ask for their order ID and use that value to call this endpoint. Customers can retrieve their order IDs from their purchase history on the App Store; for more information, see See your purchase history for the App Store, iTunes store, and more. The App Store also sends customers an email receipt with an order ID each time they make in-app purchases.\n\nA successful response with an OrderLookupStatus value of 0 contains an array of one or more signed transactions for the in-app purchase based on the order ID. Use the decoded transaction, JWSTransactionDecodedPayload, to identify information such as the productId and purchaseDate that you can use to provide customer support.\n\nA response with an OrderLookupStatus value of 1 doesn't contain a signed transactions array.\n\nThe App Store Server API returns information based on the customer’s in-app purchase history regardless of whether the customer installed, removed, or reinstalled the app on their devices.\n\nTopics\nRequest data types\ntype orderId\nThe customer’s order ID from an App Store receipt for in-app purchases.\nSee Also\nOrder ID lookup\ntype orderId\nThe customer’s order ID from an App Store receipt for in-app purchases.\nobject OrderLookupResponse\nA response that includes the order lookup status and an array of signed transactions for the in-app purchases in the order."
  },
  {
    "title": "Send Consumption Information",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/send_consumption_information",
    "html": "URL\nPUT https://api.storekit.itunes.apple.com/inApps/v1/transactions/consumption/{transactionId}\nSandbox URL\nPUT https://api.storekit-sandbox.itunes.apple.com/inApps/v1/transactions/consumption/{transactionId}\nPath Parameters\ntransactionId\ntransactionId\n(Required) \n\nThe transaction identifier for which you’re providing consumption information. You receive this identifier in the CONSUMPTION_REQUEST notification the App Store sends to your server’s App Store Server Notifications V2 endpoint.\n\nHTTP Body\nConsumptionRequest\n\nThe request body.\n\nContent-Type: application/json\nResponse Codes\n202\nAccepted\n\nThe App Store server received the consumption information.\n\n400\n(InvalidAccountTenureError | InvalidAppAccountTokenError | InvalidConsumptionStatusError | InvalidCustomerConsentedError | InvalidDeliveryStatusError | InvalidLifetimeDollarsPurchasedError | InvalidLifetimeDollarsRefundedError | InvalidPlatformError | InvalidPlayTimeError | InvalidSampleContentProvidedError | InvalidUserStatusError | InvalidRefundPreferenceError | InvalidTransactionTypeNotSupportedError)\nBad Request\n\nInvalid request. See the error code for more information. If there's no error code, the request is malformed.\n\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n404\nTransactionIdNotFoundError\nNot Found\n\nThe transaction identifier wasn’t found.\n\nContent-Type: application/json\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\nGeneralInternalError\nInternal Server Error\n\nServer error. Try again later.\n\nContent-Type: application/json\nDiscussion\n\nThe App Store uses a variety of factors to determine if a refund request is approved or denied. To help inform and improve the refund process, you can send information about a user’s consumption of the in-app purchase to the App Store when the user requests a refund. The App Store uses the consumption information you provide to inform its refund decisions.\n\nWhen a customer initiates a refund request for a consumable in-app purchase or auto-renewable subscription, the App Store sends a CONSUMPTION_REQUEST notificationType to your server through your App Store Server Notifications V2 endpoint. If the customer provided consent, respond by calling this API and sending the consumption data in the ConsumptionRequest to the App Store. If not, don’t respond to the CONSUMPTION_REQUEST notification.\n\nRespond within 12 hours of receiving the CONSUMPTION_REQUEST notification.\n\nFor information about configuring your server to receive App Store server notifications, see Enabling App Store Server Notifications. For information about initiating refund requests in an app, see any of the refund request methods, including beginRefundRequest(in:), beginRefundRequest(for:in:), beginRefundRequest(in:), and beginRefundRequest(for:in:).\n\nObtain valid consent\n\nYou must obtain valid consent from the user before sharing their personal data with Apple in the Send Consumption Information API. You, the developer, are solely responsible for obtaining valid consent because you’re sharing with Apple the data that you collected from the user.\n\nThe requirements to obtain valid consent vary under applicable law, and Apple can’t advise you on specific ways to obtain valid consent. Developers are responsible for determining specific compliance with applicable laws. If your app violates Apple’s guidelines, App Review will reach out and work with you to address any concerns.\n\nHere are some general guidelines to keep in mind for obtaining valid consent:\n\nValid consent is freely given, specific, informed, and unambiguous as to a user’s wishes with respect to their personal data.\n\nAs an example, when requesting consent, you may include: clear language that conveys to a user that you will provide Apple with some of their personal data to assist with reviewing the user’s app refund requests; clear language that conveys to users that they can withdraw their consent at any time; and a method for users to give their affirmative consent.\n\nOpt-in consent is a higher standard for consent than offering an opt-out. Generally, if you don’t offer an individual the opportunity to opt out, it can be difficult to show that consent is freely given.\n\nAfter you’ve obtained consent, if there is a change in circumstances causing you to conclude that the user’s consent is no longer valid — for example, due to a change in the way you use or share data, or if the user withdraws consent for this purpose — you should update the customerConsented flag and not send any further data from that user.\n\nImportant\n\nDon’t use the App Tracking Transparency prompt to obtain consent for sharing data with Apple through the Send Consumption Information API. Obtaining consent needed to use the Send Consumption Information endpoint is unrelated to App Tracking Transparency. These two features are distinct and unrelated.\n\nThe data you share with Apple through the Send Consumption Information API isn’t used for tracking. You must separately obtain consent from users when sharing data with Apple using the Send Consumption Information API.\n\nDisclose data usage\n\nIf you adopt the Send Consumption Information API, answer the app privacy questions to disclose in your labels any data you collect from your users and what you’re using it for. For more information about app privacy labels, see App privacy details on the App Store.\n\nApple uses and protects the data you share through the Send Consumption Information API in accordance with Apple’s Privacy Policy. For additional information about how Apple protects data, see Apple Platform Security Guide. Apple retains the data you provide through the Send Consumption Information API for the period necessary to fulfill the purpose for which the data was collected, which is to improve the refund process by obtaining data that assists with reviewing the customer’s refund request. Apple may share the data you provide through the Send Consumption Information API with service providers who act on our behalf, our partners, or others at your direction. Apple will not share the data with third parties for their own marketing purposes. For more information, see App Store & Privacy.\n\nHandle requests to access or delete consumption data\n\nIf your users request access to or deletion of their personal data related to consumption information, inform them that they may submit requests directly to Apple by visiting privacy.apple.com. If your app stores data in CloudKit on behalf of your users, see Responding to Requests to Delete Data, Providing User Access to CloudKit Data, and Changing Access Controls on User Data for more information.\n\nSee Also\nConsumption information\nobject ConsumptionRequest\nThe request body containing consumption information."
  },
  {
    "title": "orderId",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/orderid",
    "html": "Discussion\n\nWhen customers make one or more in-app purchases in your app, the App Store emails them a receipt. The receipt contains an order ID. Use this order ID to call Look Up Order ID. Customers can also retrieve their order IDs from their purchase history on the App Store; for more information, see See your purchase history for the App Store, iTunes store, and more.\n\nSee Also\nOrder ID lookup\nLook Up Order ID\nGet a customer’s in-app purchases from a receipt using the order ID.\nobject OrderLookupResponse\nA response that includes the order lookup status and an array of signed transactions for the in-app purchases in the order."
  },
  {
    "title": "ConsumptionRequest",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/consumptionrequest",
    "html": "Properties\naccountTenure\naccountTenure\n\n(Required) The age of the customer’s account.\n\nappAccountToken\nappAccountToken\n\n(Required) The UUID of the in-app user account that completed the in-app purchase transaction.\n\nconsumptionStatus\nconsumptionStatus\n\n(Required) A value that indicates the extent to which the customer consumed the in-app purchase.\n\ncustomerConsented\ncustomerConsented\n\n(Required) A Boolean value of true or false that indicates whether the customer consented to provide consumption data.\n\nNote: The App Store server rejects requests that have a customerConsented value other than true by returning an HTTP 400 error with an InvalidCustomerConsentError.\n\ndeliveryStatus\ndeliveryStatus\n\n(Required) A value that indicates whether the app successfully delivered an in-app purchase that works properly.\n\nlifetimeDollarsPurchased\nlifetimeDollarsPurchased\n\n(Required) A value that indicates the total amount, in USD, of in-app purchases the customer has made in your app, across all platforms.\n\nlifetimeDollarsRefunded\nlifetimeDollarsRefunded\n\n(Required) A value that indicates the total amount, in USD, of refunds the customer has received, in your app, across all platforms.\n\nplatform\nplatform\n\n(Required) A value that indicates the platform on which the customer consumed the in-app purchase.\n\nplayTime\nplayTime\n\n(Required) A value that indicates the amount of time that the customer used the app.\n\nrefundPreference\nrefundPreference\n\nA value that indicates your preference, based on your operational logic, as to whether Apple should grant the refund.\n\nsampleContentProvided\nsampleContentProvided\n\n(Required) A Boolean value of true or false that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\n\nuserStatus\nuserStatus\n\n(Required) The status of the customer’s account.\n\nDiscussion\n\nUse ConsumptionRequest to provide information about the customer’s consumable in-app purchase or auto-renewable subscription when you call the Send Consumption Information endpoint.\n\nTo create a valid request and avoid an HTTP 400 Bad Request error, ConsumptionRequest must contain all the required fields with proper data types and valid values. However, you can choose whether or not to provide information for most fields. Most fields have a valid option if you choose not to provide the information.\n\nNote\n\nUse the field value for undeclared, where available, if you choose not to provide information.\n\nFor example, if you choose not to provide information for the accountTenure field, set accountTenure to 0. If you choose not to provide information for the appAccountToken field, set its value to an empty string. Refer to each field’s documentation for the list of valid values, including the undeclared value where available.\n\nThe App Store server rejects requests that have a customerConsented value other than true by returning an HTTP 400 error with an InvalidCustomerConsentError.\n\nTopics\nConsumption Data Types\ntype accountTenure\nThe age of the customer’s account.\ntype appAccountToken\nThe UUID that an app optionally generates to map a customer’s in-app purchase with its resulting App Store transaction.\ntype consumptionStatus\nA value that indicates the extent to which the customer consumed the in-app purchase.\ntype customerConsented\nA Boolean value that indicates whether the customer consented to provide consumption data to the App Store.\ntype deliveryStatus\nA value that indicates whether the app successfully delivered an in-app purchase that works properly.\ntype lifetimeDollarsPurchased\nA value that indicates the dollar amount of in-app purchases the customer has made in your app, since purchasing the app, across all platforms.\ntype lifetimeDollarsRefunded\nA value that indicates the dollar amount of refunds the customer has received in your app, since purchasing the app, across all platforms.\ntype platform\nThe platform on which the customer consumed the in-app purchase.\ntype playTime\nA value that indicates the amount of time that the customer used the app.\ntype refundPreference\nA value that indicates your preferred outcome for the refund request.\ntype sampleContentProvided\nA Boolean value that indicates whether you provided, prior to its purchase, a free sample or trial of the content, or information about its functionality.\ntype userStatus\nThe status of a customer’s account within your app.\nSee Also\nConsumption information\nSend Consumption Information\nSend consumption information about a consumable in-app purchase or auto-renewable subscription to the App Store after your server receives a consumption request notification."
  },
  {
    "title": "Get All Subscription Statuses",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/get_all_subscription_statuses",
    "html": "URL\nGET https://api.storekit.itunes.apple.com/inApps/v1/subscriptions/{transactionId}\nSandbox URL\nGET https://api.storekit-sandbox.itunes.apple.com/inApps/v1/subscriptions/{transactionId}\nPath Parameters\ntransactionId\ntransactionId\n(Required) \n\nThe identifier of a transaction that belongs to the customer, and which may be an original transaction identifier (originalTransactionId).\n\nQuery Parameters\nstatus\n[status]\n\nAn optional filter that indicates the status of subscriptions to include in the response. Your query may specify more than one status query parameter.\n\nResponse Codes\n200\nStatusResponse\nOK\n\nRequest succeeded.\n\nContent-Type: application/json\n400\n(InvalidAppIdentifierError | InvalidTransactionIdError | InvalidStatusError)\nBad Request\nContent-Type: application/json\n401\nUnauthorized\n\nThe JSON Web Token (JWT) in the authorization header is invalid. For more information, see Generating JSON Web Tokens for API requests.\n\n404\n(AccountNotFoundError | AccountNotFoundRetryableError | AppNotFoundError | AppNotFoundRetryableError | TransactionIdNotFoundError)\nNot Found\nContent-Type: application/json\n429\nRateLimitExceededError\n\nThe request exceeded the rate limit.\n\nContent-Type: application/json\n500\n(GeneralInternalError | GeneralInternalRetryableError)\nInternal Server Error\nContent-Type: application/json\nDiscussion\n\nThis API returns the status for all of the customer’s subscriptions, organized by their subscription group identifier.\n\nSpecify multiple values for the status query parameter to get a response that contains subscriptions with statuses that match any of the values. For example, the following request returns subscriptions that are active (status value of 1) and subscriptions that are in the Billing Grace Period (status value of 4):\n\nGET https://api.storekit.itunes.apple.com/inApps/v1/subscriptions/{transactionId}?status=1&status=4\n\n\nSee Also\nSubscription status\nobject StatusResponse\nA response that contains status information for all of a customer’s auto-renewable subscriptions in your app."
  },
  {
    "title": "StatusResponse",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/statusresponse",
    "html": "Properties\ndata\n[SubscriptionGroupIdentifierItem]\n\nAn array of information for auto-renewable subscriptions, including App Store-signed transaction information and App Store-signed renewal information.\n\nenvironment\nenvironment\n\nThe server environment, sandbox or production, in which the App Store generated the response.\n\nappAppleId\nappAppleId\n\nYour app’s App Store identifier.\n\nbundleId\nbundleId\n\nYour app’s bundle identifier.\n\nTopics\nResponse Objects and Data Types\nobject SubscriptionGroupIdentifierItem\nInformation for auto-renewable subscriptions, including signed transaction information and signed renewal information, for one subscription group.\ntype environment\nThe server environment, either sandbox or production.\ntype appAppleId\nThe unique identifier of an app in the App Store.\ntype bundleId\nThe bundle identifier of an app.\nSee Also\nSubscription status\nGet All Subscription Statuses\nGet the statuses for all of a customer’s auto-renewable subscriptions in your app."
  },
  {
    "title": "App Store Server API",
    "url": "https://developer.apple.com/documentation/appstoreserverapi/",
    "html": "Overview\n\nThe App Store Server API is a REST API that you call from your server to request and provide information about your customers' in-app purchases. The App Store signs the transaction and subscription renewal information that this API returns using the JSON Web Signature (JWS) specification. Most endpoints return data for a single customer of your app, indicated by a transaction identifier that you provide.\n\nThe App Store Server API is independent of the app’s installation status on the customers’ devices. The App Store server returns information based on a customer’s in-app purchase history regardless of whether the customer installs, removes, or reinstalls the app on their devices.\n\nThis API provides the following functionality:\n\nTransactions and auto-renewable subscription status. Get information for single transactions by calling Get Transaction Info or a customer’s entire transaction history using Get Transaction History. Call Get All Subscription Statuses for up-to-date subscription status. Use this information to keep your customers' purchase information current on your server.\n\nRefund information. Call Get Refund History to get a customer’s refund history. Use the Send Consumption Information endpoint to send information to the App Store when customers request a refund for a consumable in-app purchase, after you receive the CONSUMPTION_REQUEST notificationType from App Store Server Notifications V2. Your data helps inform refund decisions.\n\nApp Store Server Notifications history and testing. Call Get Notification History to request the notifications your server may have missed in the past 180 days. Call Request a Test Notification and Get Test Notification Status to test if your server is successfully receiving notifications at its App Store Server Notifications V2 endpoint.\n\nSubscription renewal date extensions. Call Extend a Subscription Renewal Date and related endpoints to compensate your customers for temporary service outages, canceled events, or interruptions to live-streamed events by extending the renewal date of their paid, active subscription. For more information, see Extending the renewal date for auto-renewable subscriptions.\n\nOrder information lookup. Call Look Up Order ID to get in-app purchase information based on a customer’s order ID, found on the App Store receipt that customers receive in email.\n\nYour server must support the Transport Layer Security (TLS) protocol 1.2 or later to use the App Store Server API.\n\nCheck the App Store Server API changelog to learn about the latest changes to this API. Look for videos about the App Store Server API on the Apple Developer website.\n\nAuthorize your API calls\n\nCalls to the API require JSON Web Tokens (JWTs) for authorization; you obtain keys to create the tokens from your organization’s App Store Connect account. See Creating API keys to authorize API requests to create your keys. See Generating JSON Web Tokens for API requests to generate tokens using your keys, and send API requests.\n\nAfter you have a complete and signed token, provide the token in the request’s authorization header as a bearer token. Generate a new token for each new API request, or reuse tokens until they expire.\n\nCreate JWTs, verify transactions, and more using the App Store Server Library\n\nThe App Store Server Library is an open source library from Apple, available in four languages. It provides a client that make it easier to adopt the App Store Server APIs, including creating the JWTs to authorize calls. For more information, see Simplifying your implementation by using the App Store Server Library and the WWDC23 session Meet the App Store Server Library.\n\nTest using the sandbox environment\n\nAll App Store Server API endpoints are available for testing in the sandbox environment, except Look Up Order ID. Access the sandbox environment by sending requests to the endpoints using the following base URL:\n\nhttps://api.storekit-sandbox.itunes.apple.com/\n\n\nFor example, to call Get Transaction History in the sandbox environment, send a request using the sandbox URL:\n\nhttps://api.storekit-sandbox.itunes.apple.com/inApps/v1/history/{transactionId}\n\n\nNote that /inApps in the path is case-sensitive.\n\nFor endpoints that take a transactionId as a parameter, be sure to call the endpoint using the same environment that creates the transaction identifier. Environment information is present in the environment property of the JWSTransactionDecodedPayload.\n\nIf you don’t have environment information, follow these steps:\n\nCall the endpoint using the production URL. If the call succeeds, the transaction identifier belongs to the production environment.\n\nIf you receive an error code 4040010 TransactionIdNotFoundError, call the endpoint using the sandbox environment.\n\nIf the call succeeds, the transaction identifier belongs to the sandbox environment. If the call fails with the same error code, the transaction identifier isn’t present in either environment.\n\nTopics\nEssentials\nSimplifying your implementation by using the App Store Server Library\nUse Apple’s open source library to create JSON Web Tokens (JWT) to authorize your calls, verify transactions, extract transaction identifiers from receipts, and more.\nCreating API keys to authorize API requests\nCreate API keys you use to sign JSON Web Tokens and authorize API requests.\nGenerating JSON Web Tokens for API requests\nCreate JSON Web Tokens signed with your private key to authorize requests for App Store Server API and External Purchase Server API.\nIdentifying rate limits\nRecognize the rate limits that apply to App Store Server API endpoints and handle them in your code.\nApp Store Server API changelog\nLearn about new features and updates in the App Store Server API.\nIn-app purchase history\nGet Transaction History\nGet a customer’s in-app purchase transaction history for your app.\nobject HistoryResponse\nA response that contains the customer’s transaction history for an app.\nTransaction information\nGet Transaction Info\nGet information about a single transaction for your app.\nobject TransactionInfoResponse\nA response that contains signed transaction information for a single transaction.\nSubscription status\nGet All Subscription Statuses\nGet the statuses for all of a customer’s auto-renewable subscriptions in your app.\nobject StatusResponse\nA response that contains status information for all of a customer’s auto-renewable subscriptions in your app.\nConsumption information\nSend Consumption Information\nSend consumption information about a consumable in-app purchase or auto-renewable subscription to the App Store after your server receives a consumption request notification.\nobject ConsumptionRequest\nThe request body containing consumption information.\nOrder ID lookup\nLook Up Order ID\nGet a customer’s in-app purchases from a receipt using the order ID.\ntype orderId\nThe customer’s order ID from an App Store receipt for in-app purchases.\nobject OrderLookupResponse\nA response that includes the order lookup status and an array of signed transactions for the in-app purchases in the order.\nRefund lookup\nGet Refund History\nGet a paginated list of all of a customer’s refunded in-app purchases for your app.\nobject RefundHistoryResponse\nA response that contains an array of signed JSON Web Signature (JWS) refunded transactions, and paging information.\nGet Refund History V1\nGet a list of up to 50 of a customer’s refunded in-app purchases for your app.\nDeprecated\nobject RefundLookupResponse\nA response that contains an array of signed JSON Web Signature (JWS) transactions.\nDeprecated\nSubscription-renewal-date extension\nExtending the renewal date for auto-renewable subscriptions\nCompensate eligible active subscribers for service interruptions by extending a subscription’s renewal date.\nExtend a Subscription Renewal Date\nExtends the renewal date of a customer’s active subscription using the original transaction identifier.\nExtend Subscription Renewal Dates for All Active Subscribers\nUses a subscription’s product identifier to extend the renewal date for all of its eligible active subscribers.\nGet Status of Subscription Renewal Date Extensions\nChecks whether a renewal date extension request completed, and provides the final count of successful or failed extensions.\nobject ExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data for an individual subscription.\nobject ExtendRenewalDateResponse\nA response that indicates whether an individual renewal-date extension succeeded, and related details.\nobject MassExtendRenewalDateRequest\nThe request body that contains subscription-renewal-extension data to apply for all eligible active subscribers.\nobject MassExtendRenewalDateResponse\nA response that indicates the server successfully received the subscription-renewal-date extension request.\nobject MassExtendRenewalDateStatusResponse\nA response that indicates the current status of a request to extend the subscription renewal date to all eligible subscribers.\nApp Store Server Notifications history\nGet Notification History\nGet a list of notifications that the App Store server attempted to send to your server.\nobject NotificationHistoryRequest\nThe request body for notification history.\nobject NotificationHistoryResponse\nA response that contains the App Store Server Notifications history for your app.\nobject notificationHistoryResponseItem\nThe App Store server notification history record, including the signed notification payload and the result of the server’s first send attempt.\nApp Store Server Notifications testing\nRequest a Test Notification\nAsk App Store Server Notifications to send a test notification to your server.\nGet Test Notification Status\nCheck the status of the test App Store server notification sent to your server.\nobject SendTestNotificationResponse\nA response that contains the test notification token.\nobject CheckTestNotificationResponse\nA response that contains the contents of the App Store server's test notification and the result from your server.\nJWS headers and payloads\ntype JWSTransaction\nTransaction information signed by the App Store, in JSON Web Signature (JWS) format.\ntype JWSRenewalInfo\nSubscription renewal information, signed by the App Store, in JSON Web Signature (JWS) format.\nobject JWSDecodedHeader\nA decoded JSON Web Signature (JWS) header containing transaction or renewal information.\nobject JWSTransactionDecodedPayload\nA decoded payload that contains transaction information.\nobject JWSRenewalInfoDecodedPayload\nA decoded payload containing subscription renewal information for an auto-renewable subscription.\nData types\nData types to use in decoded transaction payloads and renewal info payloads.\nError information\nError codes\nError codes that App Store Server API responses return."
  }
]