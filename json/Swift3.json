[
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/bidirectionalcollection/index(_:offsetby:)-3cj6r",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position.\n\nlet numbers = [10, 20, 30, 40, 50]\nlet i = numbers.index(numbers.startIndex, offsetBy: 4)\nprint(numbers[i])\n// Prints \"50\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "last | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/last",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let lastNumber = numbers.last {\n    print(lastNumber)\n}\n// Prints \"50\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "difference(from:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/difference(from:by:)",
    "html": "Parameters\nother\n\nThe base state.\n\nareEquivalent\n\nA closure that returns a Boolean value indicating whether two elements are equivalent.\n\nReturn Value\n\nThe difference needed to produce the receiver’s state from the parameter’s state.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity\n\nWorst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements."
  },
  {
    "title": "withUnsafeBytes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/withunsafebytes(_:)",
    "html": "Discussion\n\nNote\n\nCalling withUnsafeBytes multiple times does not guarantee that the same buffer pointer will be passed in every time.\n\nWarning\n\nThe buffer argument to the body should not be stored or used outside of the lifetime of the call to the closure."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/joined(separator:)-9k2fw",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "last(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/last(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThis example uses the last(where:) method to find the last negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let lastNegative = numbers.last(where: { $0 < 0 }) {\n    print(\"The last negative number is \\(lastNegative).\")\n}\n// Prints \"The last negative number is -6.\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "lastIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/lastindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the last element in the collection that matches predicate, or nil if no elements match.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. This example finds the index of the last name that begins with the letter A:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.lastIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Akosua starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "popLast() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/poplast()-3t0h0",
    "html": "Return Value\n\nThe last element of the collection if the collection has one or more elements; otherwise, nil.\n\nDiscussion\n\nYou can use popLast() to remove the last element of a collection that might be empty. The removeLast() method must be used only on a nonempty collection.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/suffix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence terminating at the end of the collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains the entire collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength."
  },
  {
    "title": "removeLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removelast(_:)-8vsvg",
    "html": "Parameters\nk\n\nThe number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.\n\nDiscussion\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to remove."
  },
  {
    "title": "init(arrayLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/init(arrayliteral:)",
    "html": "Parameters\nelements\n\nA variadic list of elements of the new array.\n\nDiscussion\n\nDo not call this initializer directly. It is used by the compiler when you use an array literal. Instead, create a new array by using an array literal as its value. To do this, enclose a comma-separated list of values in square brackets.\n\nHere, an array of strings is created from an array literal holding only strings:\n\nlet ingredients: ArraySlice =\n      [\"cocoa beans\", \"sugar\", \"cocoa butter\", \"salt\"]\n"
  },
  {
    "title": "removeLast() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removelast()-2ndpz",
    "html": "Return Value\n\nThe last element of the collection.\n\nDiscussion\n\nThe collection must not be empty. To remove the last element of a collection that might be empty, use the popLast() method instead.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "partition(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mutablecollection/partition(by:)-8g62j",
    "html": "Parameters\nbelongsInSecondPartition\n\nA predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.\n\nReturn Value\n\nThe index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.\n\nDiscussion\n\nAfter partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition. This operation isn’t guaranteed to be stable, so the relative ordering of elements within the partitions might change.\n\nIn the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.\n\nvar numbers = [30, 40, 20, 30, 30, 60, 10]\nlet p = numbers.partition(by: { $0 > 30 })\n// p == 5\n// numbers == [30, 10, 20, 30, 30, 60, 40]\n\n\nThe numbers array is now arranged in two partitions. The first partition, numbers[..<p], is made up of the elements that are not greater than 30. The second partition, numbers[p...], is made up of the elements that are greater than 30.\n\nlet first = numbers[..<p]\n// first == [30, 10, 20, 30, 30]\nlet second = numbers[p...]\n// second == [60, 40]\n\n\nNote that the order of elements in both partitions changed. That is, 40 appears before 60 in the original collection, but, after calling partition(by:), 60 appears before 40.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "init(stringInterpolation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/expressiblebystringinterpolation/init(stringinterpolation:)-hhnp",
    "html": "Discussion\n\nDon’t call this initializer directly. It’s used by the compiler when you create a string using string interpolation. Instead, use string interpolation to create a new string by including values, literals, variables, or expressions enclosed in parentheses, prefixed by a backslash (\\(…)).\n\nlet price = 2\nlet number = 3\nlet message = \"\"\"\n              If one cookie costs \\(price) dollars, \\\n              \\(number) cookies cost \\(price * number) dollars.\n              \"\"\"\n// message == \"If one cookie costs 2 dollars, 3 cookies cost 6 dollars.\"\n"
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/expressiblebyunicodescalarliteral/init(unicodescalarliteral:)-9khmq",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "swapAt(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mutablecollection/swapat(_:_:)-479dx",
    "html": "Parameters\ni\n\nThe index of the first value to swap.\n\nj\n\nThe index of the second value to swap.\n\nDiscussion\n\nBoth parameters must be valid indices of the collection that are not equal to endIndex. Calling swapAt(_:_:) with the same index as both i and j has no effect.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "partition(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mutablecollection/partition(by:)-4stj2",
    "html": "Parameters\nbelongsInSecondPartition\n\nA predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.\n\nReturn Value\n\nThe index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.\n\nDiscussion\n\nAfter partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition. This operation isn’t guaranteed to be stable, so the relative ordering of elements within the partitions might change.\n\nIn the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.\n\nvar numbers = [30, 40, 20, 30, 30, 60, 10]\nlet p = numbers.partition(by: { $0 > 30 })\n// p == 5\n// numbers == [30, 10, 20, 30, 30, 60, 40]\n\n\nThe numbers array is now arranged in two partitions. The first partition, numbers[..<p], is made up of the elements that are not greater than 30. The second partition, numbers[p...], is made up of the elements that are greater than 30.\n\nlet first = numbers[..<p]\n// first == [30, 10, 20, 30, 30]\nlet second = numbers[p...]\n// second == [60, 40]\n\n\nNote that the order of elements in both partitions changed. That is, 40 appears before 60 in the original collection, but, after calling partition(by:), 60 appears before 40.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/init()",
    "html": "Discussion\n\nThis is equivalent to initializing with an empty array literal. For example:\n\nvar emptyArray = Array<Int>()\nprint(emptyArray.isEmpty)\n// Prints \"true\"\n\n\nemptyArray = []\nprint(emptyArray.isEmpty)\n// Prints \"true\"\n"
  },
  {
    "title": "sorted(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/sorted(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "removeLast() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removelast()-9iuw9",
    "html": "Return Value\n\nThe last element of the collection.\n\nDiscussion\n\nThe collection must not be empty.\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "removeFirst() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removefirst()-60cu4",
    "html": "Return Value\n\nThe first element of the collection.\n\nDiscussion\n\nThe collection must not be empty.\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "removeFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removefirst(_:)-285s6",
    "html": "Parameters\nk\n\nThe number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.\n\nDiscussion\n\nAttempting to remove more elements than exist in the collection triggers a runtime error.\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the specified number of elements."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "lexicographicallyPrecedes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "symmetricDifference(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/symmetricdifference(_:)-81pzi",
    "html": "Parameters\nother\n\nAn option set.\n\nReturn Value\n\nA new option set with only the elements contained in either this set or other, but not in both."
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/bidirectionalcollection/index(before:)-2jmfj",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/withcontiguousstorageifavailable(_:)-7e6xh",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "starts(with:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/starts(with:by:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "starts(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/starts(with:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThis example tests whether one countable range begins with the elements of another countable range.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(b.starts(with: a))\n// Prints \"true\"\n\n\nPassing a sequence with no elements or an empty collection as possiblePrefix always results in true.\n\nprint(b.starts(with: []))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "init(integerLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/expressiblebyintegerliteral/init(integerliteral:)-88n2x",
    "html": "Parameters\nvalue\n\nThe value to create.\n\nDiscussion\n\nDo not call this initializer directly. Instead, initialize a variable or constant using an integer literal. For example:\n\nlet x = 23\n\n\nIn this example, the assignment to the x constant calls this integer literal initializer behind the scenes."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/split(separator:maxsplits:omittingemptysubsequences:)-4rp31",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \")\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/flatmap(_:)-85ysn",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the smallest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet lowestHeight = heights.min()\nprint(lowestHeight)\n// Prints \"Optional(58.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the largest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet greatestHeight = heights.max()\nprint(greatestHeight)\n// Prints \"Optional(67.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "UnsafeMutableBufferPointer.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafemutablebufferpointer/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "removeFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removefirst(_:)-7hplr",
    "html": "Parameters\nk\n\nThe number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.\n\nDiscussion\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the specified number of elements."
  },
  {
    "title": "insert(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/insert(_:)-9wohp",
    "html": "Parameters\nnewMember\n\nThe element to insert.\n\nReturn Value\n\n(true, newMember) if newMember was not contained in self. Otherwise, returns (false, oldMember), where oldMember is the member of the set equal to newMember.\n\nDiscussion\n\nIn the following example, the .secondDay shipping option is added to the freeOptions option set if purchasePrice is greater than 50.0. For the ShippingOptions declaration, see the OptionSet protocol discussion.\n\nlet purchasePrice = 87.55\n\n\nvar freeOptions: ShippingOptions = [.standard, .priority]\nif purchasePrice > 50 {\n    freeOptions.insert(.secondDay)\n}\nprint(freeOptions.contains(.secondDay))\n// Prints \"true\"\n"
  },
  {
    "title": "firstRange(of:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/firstrange(of:in:)",
    "html": "Discussion\n\nA default implementation is given in terms of self.regions."
  },
  {
    "title": "lastIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/lastindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe last index where element is found. If element is not found in the collection, this method returns nil.\n\nDiscussion\n\nAfter using lastIndex(of:) to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Ben\", \"Maxime\"]\nif let i = students.lastIndex(of: \"Ben\") {\n    students[i] = \"Benjamin\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Benjamin\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/droplast(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop off the end of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence that leaves off k elements from the end.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop."
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/bidirectionalcollection/distance(from:to:)-6p3we",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end.\n\nDiscussion\n\nComplexity\n\nO(1)"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/==(_:_:)",
    "html": "Parameters\nlhs\n\nAn array to compare.\n\nrhs\n\nAnother array to compare.\n\nDiscussion\n\nYou can use the equal-to operator (==) to compare any two arrays that store the same, Equatable-conforming element type."
  },
  {
    "title": "formSymmetricDifference(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/formsymmetricdifference(_:)-56m23",
    "html": "Parameters\nother\n\nAn option set.\n\nDiscussion\n\nThis method is implemented as a ^ (bitwise XOR) operation on the two sets’ raw values."
  },
  {
    "title": "shuffle(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/shuffle(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the collection.\n\nDiscussion\n\nYou use this method to randomize the elements of a collection when you are using a custom random number generator. For example, you can use the shuffle(using:) method to randomly reorder the elements of an array.\n\nvar names = [\"Alejandro\", \"Camila\", \"Diego\", \"Luciana\", \"Luis\", \"Sofía\"]\nnames.shuffle(using: &myGenerator)\n// names == [\"Sofía\", \"Alejandro\", \"Camila\", \"Luis\", \"Diego\", \"Luciana\"]\n\n\nComplexity\n\nO(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to shuffle a collection may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/subscript(_:)-7xg8e",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe accessed slice uses the same indices for the same elements as the original collection. Always use the slice’s startIndex property instead of assuming that its indices start at a particular value.\n\nThis example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2 ..< streets.endIndex]\nprint(streetsSlice)\n// Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"\n\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nstreets[index!] = \"Eustace\"\nprint(streets[index!])\n// Prints \"Eustace\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "formIndex(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/formindex(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": "reserveCapacity(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/reservecapacity(_:)-11kse",
    "html": "Parameters\nn\n\nThe requested number of elements to store.\n\nDiscussion\n\nIf you will be adding a known number of elements to a collection, use this method to avoid multiple reallocations. A type that conforms to RangeReplaceableCollection can choose how to respond when this method is called. Depending on the type, it may make sense to allocate more or less storage than requested or to take no action at all."
  },
  {
    "title": "remove(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/remove(_:)-1pj2m",
    "html": "Parameters\nmember\n\nThe element of the set to remove.\n\nReturn Value\n\nThe intersection of [member] and the set, if the intersection was nonempty; otherwise, nil.\n\nDiscussion\n\nIn the following example, the .priority shipping option is removed from the options option set. Attempting to remove the same shipping option a second time results in nil, because options no longer contains .priority as a member.\n\nvar options: ShippingOptions = [.secondDay, .priority]\nlet priorityOption = options.remove(.priority)\nprint(priorityOption == .priority)\n// Prints \"true\"\n\n\nprint(options.remove(.priority))\n// Prints \"nil\"\n\n\nIn the next example, the .express element is passed to remove(_:). Although .express is not a member of options, .express subsumes the remaining .secondDay element of the option set. Therefore, options is emptied and the intersection between .express and options is returned.\n\nlet expressOption = options.remove(.express)\nprint(expressOption == .express)\n// Prints \"false\"\nprint(expressOption == .secondDay)\n// Prints \"true\"\n"
  },
  {
    "title": "shuffled(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/shuffled(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity\n\nO(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "shuffled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/shuffled()",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "removeLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removelast(_:)-5oepe",
    "html": "Parameters\nk\n\nThe number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.\n\nDiscussion\n\nAttempting to remove more elements than exist in the collection triggers a runtime error.\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(k), where k is the specified number of elements."
  },
  {
    "title": "replaceSubrange(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/replacesubrange(_:with:)-rh3e",
    "html": "Parameters\nsubrange\n\nThe subrange of the array to replace. The start and end of a subrange must be valid indices of the array.\n\nnewElements\n\nThe new elements to add to the array.\n\nDiscussion\n\nThis method has the effect of removing the specified range of elements from the array and inserting the new elements at the same location. The number of new elements need not match the number of elements being removed.\n\nIn this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated<Int> instance.\n\n var nums = [10, 20, 30, 40, 50]\n nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))\n print(nums)\n // Prints \"[10, 1, 1, 1, 1, 1, 50]\"\n\n\nIf you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex. Calling the insert(contentsOf:at:) method instead is preferred.\n\nLikewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement. Calling the removeSubrange(_:) method instead is preferred.\n\nComplexity\n\nO(n + m), where n is length of the array and m is the length of newElements. If the call to this method simply appends the contents of newElements to the array, this method is equivalent to append(contentsOf:)."
  },
  {
    "title": "replaceSubrange(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/replacesubrange(_:with:)-9rz4g",
    "html": "Parameters\nsubrange\n\nThe subrange of the collection to replace. The bounds of the range must be valid indices of the collection.\n\nnewElements\n\nThe new elements to add to the collection.\n\nDiscussion\n\nThis method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location. The number of new elements need not match the number of elements being removed.\n\nIn this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated<Int> instance.\n\n var nums = [10, 20, 30, 40, 50]\n nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))\n print(nums)\n // Prints \"[10, 1, 1, 1, 1, 1, 50]\"\n\n\nIf you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex. Calling the insert(contentsOf:at:) method instead is preferred.\n\nLikewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement. Calling the removeSubrange(_:) method instead is preferred.\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n + m), where n is length of this collection and m is the length of newElements. If the call to this method simply appends the contents of newElements to the collection, this method is equivalent to append(contentsOf:)."
  },
  {
    "title": "replaceSubrange(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/replacesubrange(_:with:)-5g1qk",
    "html": "Parameters\nsubrange\n\nThe subrange of the collection to replace. The bounds of the range must be valid indices of the collection.\n\nnewElements\n\nThe new elements to add to the collection.\n\nDiscussion\n\nThis method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location. The number of new elements need not match the number of elements being removed.\n\nIn this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated<Int> instance.\n\n var nums = [10, 20, 30, 40, 50]\n nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))\n print(nums)\n // Prints \"[10, 1, 1, 1, 1, 1, 50]\"\n\n\nIf you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex. Calling the insert(contentsOf:at:) method instead is preferred.\n\nLikewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement. Calling the removeSubrange(_:) method instead is preferred.\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n + m), where n is length of this collection and m is the length of newElements. If the call to this method simply appends the contents of newElements to the collection, the complexity is O(m)."
  },
  {
    "title": "removeSubrange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removesubrange(_:)-celt",
    "html": "Parameters\nbounds\n\nThe range of the collection to be removed. The bounds of the range must be valid indices of the collection.\n\nDiscussion\n\nAll the elements following the specified position are moved to close the gap. This example removes three elements from the middle of an array of measurements.\n\nvar measurements = [1.2, 1.5, 2.9, 1.2, 1.5]\nmeasurements.removeSubrange(1..<4)\nprint(measurements)\n// Prints \"[1.2, 1.5]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeSubrange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removesubrange(_:)-2zu9f",
    "html": "Parameters\nbounds\n\nThe range of the collection to be removed. The bounds of the range must be valid indices of the collection.\n\nDiscussion\n\nAll the elements following the specified position are moved to close the gap. This example removes three elements from the middle of an array of measurements.\n\nvar measurements = [1.2, 1.5, 2.9, 1.2, 1.5]\nmeasurements.removeSubrange(1..<4)\nprint(measurements)\n// Prints \"[1.2, 1.5]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removelast(_:)-33c55",
    "html": "Parameters\nk\n\nThe number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.\n\nDiscussion\n\nAttempting to remove more elements than exist in the collection triggers a runtime error.\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(k), where k is the specified number of elements."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/+(_:_:)-3xq1b",
    "html": "Parameters\nlhs\n\nA collection or finite sequence.\n\nrhs\n\nA range-replaceable collection.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of a Range<Int> instance and an integer array.\n\nlet numbers = [7, 8, 9, 10]\nlet moreNumbers = (1...6) + numbers\nprint(moreNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of argument on the right-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int]."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/+(_:_:)-2jvah",
    "html": "Parameters\nlhs\n\nA range-replaceable collection.\n\nrhs\n\nAnother range-replaceable collection.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of two integer arrays.\n\nlet lowerNumbers = [1, 2, 3, 4]\nlet higherNumbers: ContiguousArray = [5, 6, 7, 8, 9, 10]\nlet allNumbers = lowerNumbers + higherNumbers\nprint(allNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of the argument on the left-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int]."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/+(_:_:)-8elcw",
    "html": "Parameters\nlhs\n\nA range-replaceable collection.\n\nrhs\n\nA collection or finite sequence.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of an integer array and a Range<Int> instance.\n\nlet numbers = [1, 2, 3, 4]\nlet moreNumbers = numbers + (5...10)\nprint(moreNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of the argument on the left-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int]."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/init(_:)-4qauj",
    "html": "Parameters\nelements\n\nThe sequence of elements for the new collection."
  },
  {
    "title": "init(repeating:count:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/init(repeating:count:)-95f9t",
    "html": "Parameters\nrepeatedValue\n\nThe element to repeat.\n\ncount\n\nThe number of times to repeat the value passed in the repeating parameter. count must be zero or greater.\n\nDiscussion\n\nHere’s an example of creating an array initialized with five strings containing the letter Z.\n\nlet fiveZs = Array(repeating: \"Z\", count: 5)\nprint(fiveZs)\n// Prints \"[\"Z\", \"Z\", \"Z\", \"Z\", \"Z\"]\"\n"
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/+=(_:_:)",
    "html": "Parameters\nlhs\n\nThe array to append to.\n\nrhs\n\nA collection or finite sequence.\n\nDiscussion\n\nUse this operator to append the elements of a sequence to the end of range-replaceable collection with same Element type. This example appends the elements of a Range<Int> instance to an array of integers.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers += 10...15\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n\nComplexity\n\nO(m), where m is the length of the right-hand-side argument."
  },
  {
    "title": "init(repeating:count:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/init(repeating:count:)-qi09",
    "html": "Parameters\nrepeatedValue\n\nThe element to repeat.\n\ncount\n\nThe number of times to repeat the value passed in the repeating parameter. count must be zero or greater.\n\nDiscussion\n\nHere’s an example of creating an array initialized with five strings containing the letter Z.\n\nlet fiveZs = Array(repeating: \"Z\", count: 5)\nprint(fiveZs)\n// Prints \"[\"Z\", \"Z\", \"Z\", \"Z\", \"Z\"]\"\n"
  },
  {
    "title": "append(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/append(_:)-3ox9j",
    "html": "Parameters\nnewElement\n\nThe element to append to the array.\n\nDiscussion\n\nUse this method to append a single element to the end of a mutable array.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(100)\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 100]\"\n\n\nBecause arrays increase their allocated capacity using an exponential strategy, appending a single element to an array is an O(1) operation when averaged over many calls to the append(_:) method. When an array has additional capacity and is not sharing its storage with another instance, appending an element is O(1). When an array needs to reallocate storage before appending or its storage is shared with another copy, appending is O(n), where n is the length of the array.\n\nComplexity\n\nO(1) on average, over many calls to append(_:) on the same array."
  },
  {
    "title": "append(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/append(contentsof:)-5qcei",
    "html": "Parameters\nnewElements\n\nThe elements to append to the array.\n\nDiscussion\n\nUse this method to append the elements of a sequence to the end of this array. This example appends the elements of a Range<Int> instance to an array of integers.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(contentsOf: 10...15)\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n\nComplexity\n\nO(m) on average, where m is the length of newElements, over many calls to append(contentsOf:) on the same array."
  },
  {
    "title": "append(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/append(_:)-88nog",
    "html": "Parameters\nnewElement\n\nThe element to append to the collection.\n\nDiscussion\n\nIf the collection does not have sufficient capacity for another element, additional storage is allocated before appending newElement. The following example adds a new number to an array of integers:\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(100)\n\n\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 100]\"\n\n\nComplexity\n\nO(1) on average, over many calls to append(_:) on the same collection."
  },
  {
    "title": "append(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/append(contentsof:)-6pxfb",
    "html": "Parameters\nnewElements\n\nThe elements to append to the collection.\n\nDiscussion\n\nThe collection being appended to allocates any additional necessary storage to hold the new elements.\n\nThe following example appends the elements of a Range<Int> instance to an array of integers:\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(contentsOf: 10...15)\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n\nComplexity\n\nO(m), where m is the length of newElements."
  },
  {
    "title": "popLast() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/poplast()-225tk",
    "html": "Return Value\n\nThe last element of the collection if the collection is not empty; otherwise, nil.\n\nDiscussion\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "applying(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/applying(_:)",
    "html": "Parameters\ndifference\n\nThe difference to be applied.\n\nReturn Value\n\nAn instance representing the state of the receiver with the difference applied, or nil if the difference is incompatible with the receiver’s state.\n\nDiscussion\n\nComplexity\n\nO(n + c), where n is self.count and c is the number of changes contained by the parameter."
  },
  {
    "title": "removeAll(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removeall(where:)-10tcx",
    "html": "Parameters\nshouldBeRemoved\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.\n\nDiscussion\n\nUse this method to remove every element in a collection that meets particular criteria. The order of the remaining elements is preserved. This example removes all the vowels from a string:\n\nvar phrase = \"The rain in Spain stays mainly in the plain.\"\n\n\nlet vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\nphrase.removeAll(where: { vowels.contains($0) })\n// phrase == \"Th rn n Spn stys mnly n th pln.\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeAll(keepingCapacity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removeall(keepingcapacity:)-1wh07",
    "html": "Parameters\nkeepCapacity\n\nPass true to request that the collection avoid releasing its storage. Retaining the collection’s storage can be a useful optimization when you’re planning to grow the collection again. The default value is false.\n\nDiscussion\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "remove(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/remove(at:)-8p8nf",
    "html": "Parameters\nposition\n\nThe position of the element to remove. position must be a valid index of the collection that is not equal to the collection’s end index.\n\nReturn Value\n\nThe removed element.\n\nDiscussion\n\nAll the elements following the specified position are moved to close the gap. This example removes the middle element from an array of measurements.\n\nvar measurements = [1.2, 1.5, 2.9, 1.2, 1.6]\nlet removed = measurements.remove(at: 2)\nprint(measurements)\n// Prints \"[1.2, 1.5, 1.2, 1.6]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeAll(keepingCapacity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removeall(keepingcapacity:)-558rq",
    "html": "Parameters\nkeepCapacity\n\nPass true to keep the existing capacity of the array after removing its elements. The default value is false.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the array."
  },
  {
    "title": "removeAll(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removeall(where:)-23c5i",
    "html": "Parameters\nshouldBeRemoved\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.\n\nDiscussion\n\nUse this method to remove every element in a collection that meets particular criteria. The order of the remaining elements is preserved. This example removes all the odd values from an array of numbers:\n\nvar numbers = [5, 6, 7, 8, 9, 10, 11]\nnumbers.removeAll(where: { $0 % 2 != 0 })\n// numbers == [6, 8, 10]\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeFirst() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removefirst()-svki",
    "html": "Return Value\n\nThe removed element.\n\nDiscussion\n\nThe collection must not be empty.\n\nvar bugs = [\"Aphid\", \"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]\nbugs.removeFirst()\nprint(bugs)\n// Prints \"[\"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeLast() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removelast()-67p7c",
    "html": "Return Value\n\nThe last element of the collection.\n\nDiscussion\n\nThe collection must not be empty.\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "removeFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/removefirst(_:)-3up7n",
    "html": "Parameters\nk\n\nThe number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.\n\nDiscussion\nvar bugs = [\"Aphid\", \"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]\nbugs.removeFirst(3)\nprint(bugs)\n// Prints \"[\"Damselfly\", \"Earwig\"]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "reserveCapacity(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/reservecapacity(_:)-1lhqi",
    "html": "Parameters\nminimumCapacity\n\nThe requested number of elements to store.\n\nDiscussion\n\nIf you are adding a known number of elements to an array, use this method to avoid multiple reallocations. This method ensures that the array has unique, mutable, contiguous storage, with space allocated for at least the requested number of elements.\n\nCalling the reserveCapacity(_:) method on an array with bridged storage triggers a copy to contiguous storage even if the existing storage has room to store minimumCapacity elements.\n\nFor performance reasons, the size of the newly allocated storage might be greater than the requested capacity. Use the array’s capacity property to determine the size of the new storage.\n\nPreserving an Array’s Geometric Growth Strategy\n\nIf you implement a custom data structure backed by an array that grows dynamically, naively calling the reserveCapacity(_:) method can lead to worse than expected performance. Arrays need to follow a geometric allocation pattern for appending elements to achieve amortized constant-time performance. The Array type’s append(_:) and append(contentsOf:) methods take care of this detail for you, but reserveCapacity(_:) allocates only as much space as you tell it to (padded to a round value), and no more. This avoids over-allocation, but can result in insertion not having amortized constant-time performance.\n\nThe following code declares values, an array of integers, and the addTenQuadratic() function, which adds ten more values to the values array on each call.\n\n  var values: [Int] = [0, 1, 2, 3]\n\n\n  // Don't use 'reserveCapacity(_:)' like this\n  func addTenQuadratic() {\n      let newCount = values.count + 10\n      values.reserveCapacity(newCount)\n      for n in values.count..<newCount {\n          values.append(n)\n      }\n  }\n\n\nThe call to reserveCapacity(_:) increases the values array’s capacity by exactly 10 elements on each pass through addTenQuadratic(), which is linear growth. Instead of having constant time when averaged over many calls, the function may decay to performance that is linear in values.count. This is almost certainly not what you want.\n\nIn cases like this, the simplest fix is often to simply remove the call to reserveCapacity(_:), and let the append(_:) method grow the array for you.\n\n  func addTen() {\n      let newCount = values.count + 10\n      for n in values.count..<newCount {\n          values.append(n)\n      }\n  }\n\n\nIf you need more control over the capacity of your array, implement your own geometric growth strategy, passing the size you compute to reserveCapacity(_:).\n\nComplexity\n\nO(n), where n is the number of elements in the array."
  },
  {
    "title": "remove(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/remove(at:)-apf3",
    "html": "Parameters\nindex\n\nThe position of the element to remove. index must be a valid index of the array.\n\nReturn Value\n\nThe element at the specified index.\n\nDiscussion\n\nAll the elements following the specified position are moved up to close the gap.\n\nvar measurements: [Double] = [1.1, 1.5, 2.9, 1.2, 1.5, 1.3, 1.2]\nlet removed = measurements.remove(at: 2)\nprint(measurements)\n// Prints \"[1.1, 1.5, 1.2, 1.5, 1.3, 1.2]\"\n\n\nComplexity\n\nO(n), where n is the length of the array."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/withcontiguousstorageifavailable(_:)-52x48",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/contains(_:)",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/map(_:)-6hz0u",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/joined()",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/joined(separator:)-9u907",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "subtracting(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/subtracting(_:)-648yh",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\nA new set.\n\nDiscussion\n\nIn the following example, the nonNeighbors set is made up of the elements of the employees set that are not elements of neighbors:\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet neighbors: Set = [\"Bethany\", \"Eric\", \"Forlani\", \"Greta\"]\nlet nonNeighbors = employees.subtracting(neighbors)\nprint(nonNeighbors)\n// Prints \"[\"Diana\", \"Chris\", \"Alicia\"]\"\n"
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/range/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/closedrange/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "capacity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/capacity",
    "html": "Discussion\n\nEvery array reserves a specific amount of memory to hold its contents. When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage. The new storage is a multiple of the old storage’s size. This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations. Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger.\n\nThe following example creates an array of integers from an array literal, then appends the elements of another collection. Before appending, the array allocates new storage that is large enough store the resulting elements.\n\nvar numbers = [10, 20, 30, 40, 50]\n// numbers.count == 5\n// numbers.capacity == 5\n\n\nnumbers.append(contentsOf: stride(from: 60, through: 100, by: 10))\n// numbers.count == 10\n// numbers.capacity == 10\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/init(_:)-9quv1",
    "html": "Parameters\ns\n\nThe sequence of elements to turn into an array.\n\nDiscussion\n\nYou can use this initializer to create an array from any other type that conforms to the Sequence protocol. For example, you might want to create an array with the integers from 1 through 7. Use this initializer around a range instead of typing all those numbers in an array literal.\n\nlet numbers = Array(1...7)\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7]\"\n\n\nYou can also use this initializer to convert a complex sequence or collection type back to an array. For example, the keys property of a dictionary isn’t an array with its own storage, it’s a collection that maps its elements from the dictionary only when they’re accessed, saving the time and space needed to allocate an array. If you need to pass those keys to a method that takes an array, however, use this initializer to convert that list from its type of LazyMapCollection<Dictionary<String, Int>, Int> to a simple [String].\n\nfunc cacheImagesWithNames(names: [String]) {\n    // custom image loading and caching\n }\n\n\nlet namedHues: [String: Int] = [\"Vermillion\": 18, \"Magenta\": 302,\n        \"Gold\": 50, \"Cerise\": 320]\nlet colorNames = Array(namedHues.keys)\ncacheImagesWithNames(colorNames)\n\n\nprint(colorNames)\n// Prints \"[\"Gold\", \"Cerise\", \"Magenta\", \"Vermillion\"]\"\n"
  },
  {
    "title": "sort() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/sort()",
    "html": "Discussion\n\nYou can sort any mutable collection of elements that conform to the Comparable protocol by calling this method. Elements are sorted in ascending order.\n\nHere’s an example of sorting a list of students’ names. Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (<).\n\nvar students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nstudents.sort()\nprint(students)\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nTo sort the elements of your collection in descending order, pass the greater-than operator (>) to the sort(by:) method.\n\nstudents.sort(by: >)\nprint(students)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements that compare as equal.\n\nComplexity\n\nO(n log n), where n is the length of the collection."
  },
  {
    "title": "swapAt(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/swapat(_:_:)",
    "html": "Parameters\ni\n\nThe index of the first value to swap.\n\nj\n\nThe index of the second value to swap.\n\nDiscussion\n\nBoth parameters must be valid indices of the collection that are not equal to endIndex. Calling swapAt(_:_:) with the same index as both i and j has no effect.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "withContiguousMutableStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/withcontiguousmutablestorageifavailable(_:)-1zhph",
    "html": "Parameters\nbody\n\nA closure that receives an in-out UnsafeMutableBufferPointer to the collection’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the collection doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer provides access to the contiguous mutable storage of the entire collection. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in the form of contiguous mutable storage, this method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nAlways perform any necessary cleanup in the closure, because the method makes no guarantees about the state of the collection if the closure throws an error. Your changes to the collection may be absent from the collection after throwing the error, because the closure could receive a temporary copy rather than direct access to the collection’s storage.\n\nWarning\n\nYour body closure must not replace buffer. This leads to a crash in all implementations of this method within the standard library.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/startindex",
    "html": "Discussion\n\nArraySlice instances are not always indexed from zero. Use startIndex and endIndex as the bounds for any element access, instead of 0 and count.\n\nIf the array is empty, startIndex is equal to endIndex."
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/distance(from:to:)",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end."
  },
  {
    "title": "formIndex(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/formindex(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex."
  },
  {
    "title": "update(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/update(with:)-2oa9l",
    "html": "Return Value\n\nThe intersection of [newMember] and the set if the intersection was nonempty; otherwise, nil.\n\nDiscussion\n\nIf newMember is not contained in the set but subsumes current members of the set, the subsumed members are returned.\n\nvar options: ShippingOptions = [.secondDay, .priority]\nlet replaced = options.update(with: .express)\nprint(replaced == .secondDay)\n// Prints \"true\"\n"
  },
  {
    "title": "formUnion(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/formunion(_:)-4ht9l",
    "html": "Parameters\nother\n\nAn option set.\n\nDiscussion\n\nThis method is implemented as a | (bitwise OR) operation on the two sets’ raw values."
  },
  {
    "title": "union(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/union(_:)-7mfo6",
    "html": "Parameters\nother\n\nAn option set.\n\nReturn Value\n\nA new option set made up of the elements contained in this set, in other, or in both.\n\nDiscussion\n\nThis example uses the union(_:) method to add two more shipping options to the default set.\n\nlet defaultShipping = ShippingOptions.standard\nlet memberShipping = defaultShipping.union([.secondDay, .priority])\nprint(memberShipping.contains(.priority))\n// Prints \"true\"\n"
  },
  {
    "title": "intersection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/intersection(_:)-73uhs",
    "html": "Parameters\nother\n\nAn option set.\n\nReturn Value\n\nA new option set with only the elements contained in both this set and other.\n\nDiscussion\n\nThis example uses the intersection(_:) method to limit the available shipping options to what can be used with a PO Box destination.\n\n// Can only ship standard or priority to PO Boxes\nlet poboxShipping: ShippingOptions = [.standard, .priority]\nlet memberShipping: ShippingOptions =\n        [.standard, .priority, .secondDay]\n\n\nlet availableOptions = memberShipping.intersection(poboxShipping)\nprint(availableOptions.contains(.priority))\n// Prints \"true\"\nprint(availableOptions.contains(.secondDay))\n// Prints \"false\"\n"
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/contains(_:)-xkyd",
    "html": "Parameters\nmember\n\nThe element to look for in the option set.\n\nReturn Value\n\ntrue if the option set contains member; otherwise, false.\n\nDiscussion\n\nThis example uses the contains(_:) method to check whether next-day shipping is in the availableOptions instance.\n\nlet availableOptions = ShippingOptions.express\nif availableOptions.contains(.nextDay) {\n    print(\"Next day shipping available\")\n}\n// Prints \"Next day shipping available\"\n"
  },
  {
    "title": "isSubset(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/issubset(of:)-5y3lj",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set is a subset of other; otherwise, false.\n\nDiscussion\n\nSet A is a subset of another set B if every member of A is also a member of B.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet attendees: Set = [\"Alicia\", \"Bethany\", \"Diana\"]\nprint(attendees.isSubset(of: employees))\n// Prints \"true\"\n"
  },
  {
    "title": "sorted() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/sorted()",
    "html": "Return Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nYou can sort any sequence of elements that conform to the Comparable protocol by calling this method. Elements are sorted in ascending order.\n\nHere’s an example of sorting a list of students’ names. Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (<).\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet sortedStudents = students.sorted()\nprint(sortedStudents)\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nTo sort the elements of your sequence in descending order, pass the greater-than operator (>) to the sorted(by:) method.\n\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements that compare as equal.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "insert(contentsOf:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/insert(contentsof:at:)",
    "html": "Parameters\nnewElements\n\nThe new elements to insert into the collection.\n\ni\n\nThe position at which to insert the new elements. index must be a valid index of the collection.\n\nDiscussion\n\nThe new elements are inserted before the element currently at the specified index. If you pass the collection’s endIndex property as the index parameter, the new elements are appended to the collection.\n\nHere’s an example of inserting a range of integers into an array of the same type:\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.insert(contentsOf: 100...103, at: 3)\nprint(numbers)\n// Prints \"[1, 2, 3, 100, 101, 102, 103, 4, 5]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n + m), where n is length of this collection and m is the length of newElements. If i == endIndex, this method is equivalent to append(contentsOf:)."
  },
  {
    "title": "insert(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/insert(_:at:)-2orxu",
    "html": "Parameters\nnewElement\n\nThe new element to insert into the collection.\n\ni\n\nThe position at which to insert the new element. index must be a valid index into the collection.\n\nDiscussion\n\nThe new element is inserted before the element currently at the specified index. If you pass the collection’s endIndex property as the index parameter, the new element is appended to the collection.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.insert(100, at: 3)\nnumbers.insert(200, at: numbers.endIndex)\n\n\nprint(numbers)\n// Prints \"[1, 2, 3, 100, 4, 5, 200]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection. If i == endIndex, this method is equivalent to append(_:)."
  },
  {
    "title": "popLast() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/poplast()-ftzx",
    "html": "Return Value\n\nThe last element of the collection if the collection is not empty; otherwise, nil.\n\nDiscussion\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "insert(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/insert(_:at:)-4gliu",
    "html": "Parameters\nnewElement\n\nThe new element to insert into the array.\n\ni\n\nThe position at which to insert the new element. index must be a valid index of the array or equal to its endIndex property.\n\nDiscussion\n\nThe new element is inserted before the element currently at the specified index. If you pass the array’s endIndex property as the index parameter, the new element is appended to the array.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.insert(100, at: 3)\nnumbers.insert(200, at: numbers.endIndex)\n\n\nprint(numbers)\n// Prints \"[1, 2, 3, 100, 4, 5, 200]\"\n\n\nComplexity\n\nO(n), where n is the length of the array. If i == endIndex, this method is equivalent to append(_:)."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "zero | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/zero",
    "html": "Discussion\n\nZero is the identity element for addition. For any value, x + .zero == x and .zero + x == x."
  },
  {
    "title": "insert(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/insert(_:at:)-2czam",
    "html": "Parameters\nnewElement\n\nThe new element to insert into the array.\n\ni\n\nThe position at which to insert the new element. index must be a valid index of the array or equal to its endIndex property.\n\nDiscussion\n\nThe new element is inserted before the element currently at the specified index. If you pass the array’s endIndex property as the index parameter, the new element is appended to the array.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.insert(100, at: 3)\nnumbers.insert(200, at: numbers.endIndex)\n\n\nprint(numbers)\n// Prints \"[1, 2, 3, 100, 4, 5, 200]\"\n\n\nComplexity\n\nO(n), where n is the length of the array. If i == endIndex, this method is equivalent to append(_:)."
  },
  {
    "title": "isDisjoint(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/isdisjoint(with:)-59c10",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set has no elements in common with other; otherwise, false.\n\nDiscussion\n\nIn the following example, the employees set is disjoint with the visitors set because no name appears in both sets.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet visitors: Set = [\"Marcia\", \"Nathaniel\", \"Olivia\"]\nprint(employees.isDisjoint(with: visitors))\n// Prints \"true\"\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/init(_:)-5ink1",
    "html": "Parameters\nsequence\n\nThe elements to use as members of the new set.\n\nDiscussion\n\nUse this initializer to create a new set from an existing sequence, like an array or a range:\n\nlet validIndices = Set(0..<7).subtracting([2, 4, 5])\nprint(validIndices)\n// Prints \"[6, 0, 1, 3]\"\n"
  },
  {
    "title": "subtract(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/subtract(_:)-7l337",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nDiscussion\n\nIn the following example, the elements of the employees set that are also members of the neighbors set are removed. In particular, the names \"Bethany\" and \"Eric\" are removed from employees.\n\nvar employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet neighbors: Set = [\"Bethany\", \"Eric\", \"Forlani\", \"Greta\"]\nemployees.subtract(neighbors)\nprint(employees)\n// Prints \"[\"Diana\", \"Chris\", \"Alicia\"]\"\n"
  },
  {
    "title": "isSuperset(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/issuperset(of:)-88ovx",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nReturn Value\n\ntrue if the set is a superset of other; otherwise, false.\n\nDiscussion\n\nSet A is a superset of another set B if every member of B is also a member of A.\n\nlet employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet attendees: Set = [\"Alicia\", \"Bethany\", \"Diana\"]\nprint(employees.isSuperset(of: attendees))\n// Prints \"true\"\n"
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/range/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/range/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/range/index(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.\n\nlet s = \"Swift\"\nlet i = s.index(s.startIndex, offsetBy: 4)\nprint(s[i])\n// Prints \"t\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/range/distance(from:to:)",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nUnless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/range/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/range/subscript(_:)-358vm",
    "html": "Parameters\nbounds\n\nA range of the range’s indices. The upper and lower bounds of the bounds range must be valid indices of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/range/subscript(_:)-84ykx",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the range, and must not equal the range’s end index.\n\nOverview\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element."
  },
  {
    "title": "Range.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/range/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "formIntersection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/formintersection(_:)-9h7lm",
    "html": "Parameters\nother\n\nAn option set.\n\nDiscussion\n\nThis method is implemented as a & (bitwise AND) operation on the two sets’ raw values."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/joined(separator:)-cdql",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/closedrange/index(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.\n\nlet s = \"Swift\"\nlet i = s.index(s.startIndex, offsetBy: 4)\nprint(s[i])\n// Prints \"t\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "lastIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/lastindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the last element in the collection that matches predicate, or nil if no elements match.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. This example finds the index of the last name that begins with the letter A:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.lastIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Akosua starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "reversed() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/reversed()",
    "html": "Discussion\n\nYou can reverse a collection without allocating new space for its elements by calling this reversed() method. A ReversedCollection instance wraps an underlying collection and provides access to its elements in reverse order. This example prints the characters of a string in reverse order:\n\nlet word = \"Backwards\"\nfor char in word.reversed() {\n    print(char, terminator: \"\")\n}\n// Prints \"sdrawkcaB\"\n\n\nIf you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer. For example, to get the reversed version of a string, reverse its characters and initialize a new String instance from the result.\n\nlet reversedWord = String(word.reversed())\nprint(reversedWord)\n// Prints \"sdrawkcaB\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "lastIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/lastindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe last index where element is found. If element is not found in the collection, this method returns nil.\n\nDiscussion\n\nAfter using lastIndex(of:) to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Ben\", \"Maxime\"]\nif let i = students.lastIndex(of: \"Ben\") {\n    students[i] = \"Benjamin\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Benjamin\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/droplast(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop off the end of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence that leaves off k elements from the end.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop."
  },
  {
    "title": "last(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/last(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThis example uses the last(where:) method to find the last negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let lastNegative = numbers.last(where: { $0 < 0 }) {\n    print(\"The last negative number is \\(lastNegative).\")\n}\n// Prints \"The last negative number is -6.\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "difference(from:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/difference(from:by:)",
    "html": "Parameters\nother\n\nThe base state.\n\nareEquivalent\n\nA closure that returns a Boolean value indicating whether two elements are equivalent.\n\nReturn Value\n\nThe difference needed to produce the receiver’s state from the parameter’s state.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity\n\nWorst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance."
  },
  {
    "title": "shuffle() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/shuffle()",
    "html": "Discussion\n\nUse the shuffle() method to randomly reorder the elements of an array.\n\nvar names = [\"Alejandro\", \"Camila\", \"Diego\", \"Luciana\", \"Luis\", \"Sofía\"]\nnames.shuffle()\n// names == [\"Luis\", \"Camila\", \"Luciana\", \"Sofía\", \"Alejandro\", \"Diego\"]\n\n\nThis method is equivalent to calling shuffle(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "partition(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/partition(by:)-706dh",
    "html": "Parameters\nbelongsInSecondPartition\n\nA predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.\n\nReturn Value\n\nThe index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.\n\nDiscussion\n\nAfter partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition. This operation isn’t guaranteed to be stable, so the relative ordering of elements within the partitions might change.\n\nIn the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.\n\nvar numbers = [30, 40, 20, 30, 30, 60, 10]\nlet p = numbers.partition(by: { $0 > 30 })\n// p == 5\n// numbers == [30, 10, 20, 30, 30, 60, 40]\n\n\nThe numbers array is now arranged in two partitions. The first partition, numbers[..<p], is made up of the elements that are not greater than 30. The second partition, numbers[p...], is made up of the elements that are greater than 30.\n\nlet first = numbers[..<p]\n// first == [30, 10, 20, 30, 30]\nlet second = numbers[p...]\n// second == [60, 40]\n\n\nNote that the order of elements in both partitions changed. That is, 40 appears before 60 in the original collection, but, after calling partition(by:), 60 appears before 40.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "partition(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/partition(by:)-2s919",
    "html": "Parameters\nbelongsInSecondPartition\n\nA predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.\n\nReturn Value\n\nThe index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.\n\nDiscussion\n\nAfter partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition. This operation isn’t guaranteed to be stable, so the relative ordering of elements within the partitions might change.\n\nIn the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.\n\nvar numbers = [30, 40, 20, 30, 30, 60, 10]\nlet p = numbers.partition(by: { $0 > 30 })\n// p == 5\n// numbers == [30, 10, 20, 30, 30, 60, 40]\n\n\nThe numbers array is now arranged in two partitions. The first partition, numbers[..<p], is made up of the elements that are not greater than 30. The second partition, numbers[p...], is made up of the elements that are greater than 30.\n\nlet first = numbers[..<p]\n// first == [30, 10, 20, 30, 30]\nlet second = numbers[p...]\n// second == [60, 40]\n\n\nNote that the order of elements in both partitions changed. That is, 40 appears before 60 in the original collection, but, after calling partition(by:), 60 appears before 40.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "reverse() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/reverse()",
    "html": "Discussion\n\nThe following example reverses the elements of an array of characters:\n\nvar characters: [Character] = [\"C\", \"a\", \"f\", \"é\"]\ncharacters.reverse()\nprint(characters)\n// Prints \"[\"é\", \"f\", \"a\", \"C\"]\"\n\n\nComplexity\n\nO(n), where n is the number of elements in the collection."
  },
  {
    "title": "sort(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/sort(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. If areInIncreasingOrder throws an error during the sort, the elements may be in a different order, but none will be lost.\n\nDiscussion\n\nWhen you want to sort a collection of elements that don’t conform to the Comparable protocol, pass a closure to this method that returns true when the first element should be ordered before the second.\n\nIn the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nvar responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nresponses.sort {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(responses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nAlternatively, use this method to sort a collection of elements that do conform to Comparable when you want the sort to be descending instead of ascending. Pass the greater-than operator (>) operator as the predicate.\n\nvar students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nstudents.sort(by: >)\nprint(students)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nareInIncreasingOrder must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the collection."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of an array, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let i = numbers.firstIndex(of: 30) {\n    print(numbers[i ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the array is empty, endIndex is equal to startIndex."
  },
  {
    "title": "withContiguousMutableStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/withcontiguousmutablestorageifavailable(_:)-5vekj",
    "html": "Parameters\nbody\n\nA closure that receives an in-out UnsafeMutableBufferPointer to the collection’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the collection doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer provides access to the contiguous mutable storage of the entire collection. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in the form of contiguous mutable storage, this method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nAlways perform any necessary cleanup in the closure, because the method makes no guarantees about the state of the collection if the closure throws an error. Your changes to the collection may be absent from the collection after throwing the error, because the closure could receive a temporary copy rather than direct access to the collection’s storage.\n\nWarning\n\nYour body closure must not replace buffer. This leads to a crash in all implementations of this method within the standard library.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index immediately after i."
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/index(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the array.\n\ndistance\n\nThe distance to offset i.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position.\n\nlet numbers = [10, 20, 30, 40, 50]\nlet i = numbers.index(numbers.startIndex, offsetBy: 4)\nprint(numbers[i])\n// Prints \"50\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/subscript(_:)-4e8d9",
    "html": "Parameters\nindex\n\nThe position of the element to access. index must be greater than or equal to startIndex and less than endIndex.\n\nOverview\n\nThe following example uses indexed subscripting to update an array’s second element. After assigning the new value (\"Butler\") at a specific position, that value is immediately available at that same position.\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nstreets[1] = \"Butler\"\nprint(streets[1])\n// Prints \"Butler\"\n\n\nComplexity\n\nReading an element from an array is O(1). Writing is O(1) unless the array’s storage is shared with another array or uses a bridged NSArray instance as its storage, in which case writing is O(n), where n is the length of the array."
  },
  {
    "title": "ArraySlice.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/index",
    "html": "Discussion\n\nArraySlice instances are not always indexed from zero. Use startIndex and endIndex as the bounds for any element access, instead of 0 and count."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/subscript(_:)-63qca",
    "html": "Parameters\nbounds\n\nA range of integers. The bounds of the range must be valid indices of the array.\n\nOverview\n\nThe returned ArraySlice instance uses the same indices for the same elements as the original array. In particular, that slice, unlike an array, may have a nonzero startIndex and an endIndex that is not equal to count. Always use the slice’s startIndex and endIndex properties instead of assuming that its indices start or end at a particular value.\n\nThis example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2 ..< streets.endIndex]\nprint(streetsSlice)\n// Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"\n\n\nlet i = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[i!])\n// Prints \"Evarts\"\n"
  },
  {
    "title": "index(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/index(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the array.\n\ndistance\n\nThe distance to offset i.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, limit has no effect if it is less than i. Likewise, if distance < 0, limit has no effect if it is greater than i.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position. The operation doesn’t require going beyond the limiting numbers.endIndex value, so it succeeds.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let i = numbers.index(numbers.startIndex,\n                         offsetBy: 4,\n                         limitedBy: numbers.endIndex) {\n    print(numbers[i])\n}\n// Prints \"50\"\n\n\nThe next example attempts to retrieve an index ten positions from numbers.startIndex, but fails, because that distance is beyond the index passed as limit.\n\nlet j = numbers.index(numbers.startIndex,\n                      offsetBy: 10,\n                      limitedBy: numbers.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/arrayslice/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index immediately before i."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/setalgebra/init()-3obov",
    "html": "Discussion\n\nThis initializer creates an option set with a raw value of zero."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "difference(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/difference(from:)",
    "html": "Parameters\nother\n\nThe base state.\n\nReturn Value\n\nThe difference needed to produce this collection’s ordered elements from the given collection.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity\n\nWorst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements, or if Element conforms to Hashable."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "...(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/'...(_:_:)",
    "html": "Parameters\nminimum\n\nThe lower bound for the range.\n\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol. This example creates a ClosedRange<Character> from “a” up to, and including, “z”.\n\nlet lowercase = \"a\"...\"z\"\nprint(lowercase.contains(\"z\"))\n// Prints \"true\"\n\n\nPrecondition\n\nminimum <= maximum."
  },
  {
    "title": "...(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/'...(_:)-9h7ny",
    "html": "Parameters\nminimum\n\nThe lower bound for the range.\n\nDiscussion\n\nUse the postfix range operator (postfix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeFrom<Double> instance that includes any value greater than or equal to 5.0.\n\nlet atLeastFive = 5.0...\n\n\natLeastFive.contains(4.0)     // false\natLeastFive.contains(5.0)     // true\natLeastFive.contains(6.0)     // true\n\n\nYou can use this type of partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.\n\nlet numbers = [10, 20, 30, 40, 50, 60, 70]\nprint(numbers[3...])\n// Prints \"[40, 50, 60, 70]\"\n\n\nPrecondition\n\nminimum must compare equal to itself (i.e. cannot be NaN)."
  },
  {
    "title": "...(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/'...(_:)-1a3h",
    "html": "Parameters\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the prefix closed range operator (prefix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeThrough<Double> instance that includes any value less than or equal to 5.0.\n\nlet throughFive = ...5.0\n\n\nthroughFive.contains(4.0)     // true\nthroughFive.contains(5.0)     // true\nthroughFive.contains(6.0)     // false\n\n\nYou can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.\n\nlet numbers = [10, 20, 30, 40, 50, 60, 70]\nprint(numbers[...3])\n// Prints \"[10, 20, 30, 40]\"\n\n\nPrecondition\n\nmaximum must compare equal to itself (i.e. cannot be NaN)."
  },
  {
    "title": "..<(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/'.._(_:)",
    "html": "Parameters\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the prefix half-open range operator (prefix ..<) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeUpTo<Double> instance that includes any value less than 5.0.\n\nlet upToFive = ..<5.0\n\n\nupToFive.contains(3.14)       // true\nupToFive.contains(6.28)       // false\nupToFive.contains(5.0)        // false\n\n\nYou can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.\n\nlet numbers = [10, 20, 30, 40, 50, 60, 70]\nprint(numbers[..<3])\n// Prints \"[10, 20, 30]\"\n\n\nPrecondition\n\nmaximum must compare equal to itself (i.e. cannot be NaN)."
  },
  {
    "title": "..<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/'.._(_:_:)",
    "html": "Parameters\nminimum\n\nThe lower bound for the range.\n\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the half-open range operator (..<) to create a range of any type that conforms to the Comparable protocol. This example creates a Range<Double> from zero up to, but not including, 5.0.\n\nlet lessThanFive = 0.0..<5.0\nprint(lessThanFive.contains(3.14))  // Prints \"true\"\nprint(lessThanFive.contains(5.0))   // Prints \"false\"\n\n\nPrecondition\n\nminimum <= maximum."
  },
  {
    "title": "<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/_(_:_:)-ijui",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nThis function is the only requirement of the Comparable protocol. The remainder of the relational operator functions are implemented by the standard library for any type that conforms to Comparable."
  },
  {
    "title": "<=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/_=(_:_:)-2hktt",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nThis is the default implementation of the less-than-or-equal-to operator (<=) for any type that conforms to Comparable."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/+(_:_:)",
    "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDiscussion\n\nThe addition operator (+) calculates the sum of its two arguments. For example:\n\n1 + 2                   // 3\n-10 + 15                // 5\n-15 + -5                // -20\n21.5 + 3.25             // 24.75\n\n\nYou cannot use + with arguments of different types. To add values of different types, convert one of the values to the other value’s type.\n\nlet x: Int8 = 21\nlet y: Int = 1000000\nInt(x) + y              // 1000021\n"
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/+=(_:_:)-4dm12",
    "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add."
  },
  {
    "title": "capacity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/capacity",
    "html": "Discussion\n\nEvery array reserves a specific amount of memory to hold its contents. When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage. The new storage is a multiple of the old storage’s size. This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations. Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger.\n\nThe following example creates an array of integers from an array literal, then appends the elements of another collection. Before appending, the array allocates new storage that is large enough store the resulting elements.\n\nvar numbers = [10, 20, 30, 40, 50]\n// numbers.count == 5\n// numbers.capacity == 5\n\n\nnumbers.append(contentsOf: stride(from: 60, through: 100, by: 10))\n// numbers.count == 10\n// numbers.capacity == 10\n"
  },
  {
    "title": "-(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/-(_:_:)",
    "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDiscussion\n\nThe subtraction operator (-) calculates the difference of its two arguments. For example:\n\n8 - 3                   // 5\n-10 - 5                 // -15\n100 - -5                // 105\n10.5 - 100.0            // -89.5\n\n\nYou cannot use - with arguments of different types. To subtract values of different types, convert one of the values to the other value’s type.\n\nlet x: UInt8 = 21\nlet y: UInt = 1000000\ny - UInt(x)             // 999979\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/init(_:)-6j6lx",
    "html": "Parameters\ns\n\nThe sequence of elements to turn into an array.\n\nDiscussion\n\nYou can use this initializer to create an array from any other type that conforms to the Sequence protocol. For example, you might want to create an array with the integers from 1 through 7. Use this initializer around a range instead of typing all those numbers in an array literal.\n\nlet numbers = Array(1...7)\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7]\"\n\n\nYou can also use this initializer to convert a complex sequence or collection type back to an array. For example, the keys property of a dictionary isn’t an array with its own storage, it’s a collection that maps its elements from the dictionary only when they’re accessed, saving the time and space needed to allocate an array. If you need to pass those keys to a method that takes an array, however, use this initializer to convert that list from its type of LazyMapCollection<Dictionary<String, Int>, Int> to a simple [String].\n\nfunc cacheImagesWithNames(names: [String]) {\n    // custom image loading and caching\n }\n\n\nlet namedHues: [String: Int] = [\"Vermillion\": 18, \"Magenta\": 302,\n        \"Gold\": 50, \"Cerise\": 320]\nlet colorNames = Array(namedHues.keys)\ncacheImagesWithNames(colorNames)\n\n\nprint(colorNames)\n// Prints \"[\"Gold\", \"Cerise\", \"Magenta\", \"Vermillion\"]\"\n"
  },
  {
    "title": "-=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/-=(_:_:)-8vzo7",
    "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs."
  },
  {
    "title": "remove(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/remove(at:)-4t5td",
    "html": "Parameters\nindex\n\nThe position of the element to remove. index must be a valid index of the array.\n\nReturn Value\n\nThe element at the specified index.\n\nDiscussion\n\nAll the elements following the specified position are moved up to close the gap.\n\nvar measurements: [Double] = [1.1, 1.5, 2.9, 1.2, 1.5, 1.3, 1.2]\nlet removed = measurements.remove(at: 2)\nprint(measurements)\n// Prints \"[1.1, 1.5, 1.2, 1.5, 1.3, 1.2]\"\n\n\nComplexity\n\nO(n), where n is the length of the array."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "suspending | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/suspendingclock/suspending",
    "html": "Discussion\n  try await Task.sleep(until: .now + .seconds(3), clock: .suspending)\n"
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/closedrange/distance(from:to:)",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nUnless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance."
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/suffix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence terminating at the end of the collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains the entire collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/withcontiguousstorageifavailable(_:)-8phra",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "lexicographicallyPrecedes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the smallest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet lowestHeight = heights.min()\nprint(lowestHeight)\n// Prints \"Optional(58.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the largest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet greatestHeight = heights.max()\nprint(greatestHeight)\n// Prints \"Optional(67.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/subscript(_:)-899p6",
    "html": "Parameters\nindex\n\nThe position of the element to access. index must be greater than or equal to startIndex and less than endIndex.\n\nOverview\n\nThe following example uses indexed subscripting to update an array’s second element. After assigning the new value (\"Butler\") at a specific position, that value is immediately available at that same position.\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nstreets[1] = \"Butler\"\nprint(streets[1])\n// Prints \"Butler\"\n\n\nComplexity\n\nReading an element from an array is O(1). Writing is O(1) unless the array’s storage is shared with another array, in which case writing is O(n), where n is the length of the array."
  },
  {
    "title": "sleep(until:tolerance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/suspendingclock/sleep(until:tolerance:)",
    "html": "Discussion\n\nIf the task is canceled before the time ends, this function throws CancellationError.\n\nThis function doesn’t block the underlying thread."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/isempty-17zoy",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "index(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/index(_:offsetby:limitedby:)-4m1pi",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.\n\nlet s = \"Swift\"\nif let i = s.index(s.startIndex, offsetBy: 4, limitedBy: s.endIndex) {\n    print(s[i])\n}\n// Prints \"t\"\n\n\nThe next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.\n\nlet j = s.index(s.startIndex, offsetBy: 6, limitedBy: s.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/count-34z72",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "continuous | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/continuousclock/continuous",
    "html": "Discussion\n  try await Task.sleep(until: .now + .seconds(3), clock: .continuous)\n"
  },
  {
    "title": "measure(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/continuousclock/measure(_:)",
    "html": "Discussion\n  let clock = ContinuousClock()\n  let elapsed = clock.measure {\n     someWork()\n  }\n"
  },
  {
    "title": "sleep(until:tolerance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/continuousclock/sleep(until:tolerance:)",
    "html": "Discussion\n\nIf the task is canceled before the time ends, this function throws CancellationError.\n\nThis function doesn’t block the underlying thread."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/joined(separator:)-1cko4",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/joined(separator:)-7ubey",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/joined()",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "lexicographicallyPrecedes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "reversed() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/reversed()",
    "html": "Return Value\n\nAn array containing the elements of this sequence in reverse order.\n\nDiscussion\n\nThe sequence must be finite.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "starts(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/starts(with:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThis example tests whether one countable range begins with the elements of another countable range.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(b.starts(with: a))\n// Prints \"true\"\n\n\nPassing a sequence with no elements or an empty collection as possiblePrefix always results in true.\n\nprint(b.starts(with: []))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "formIndex(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/formindex(after:)-1qwjp",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": ">(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/_(_:_:)-1710k",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nThis is the default implementation of the greater-than operator (>) for any type that conforms to Comparable."
  },
  {
    "title": ">=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/_=(_:_:)-6wrs8",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nReturn Value\n\ntrue if lhs is greater than or equal to rhs; otherwise, false.\n\nDiscussion\n\nThis is the default implementation of the greater-than-or-equal-to operator (>=) for any type that conforms to Comparable."
  },
  {
    "title": "+(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/+(_:)",
    "html": "Return Value\n\nThe given argument without any changes.\n\nDiscussion\n\nYou can use the unary plus operator (+) to provide symmetry in your code for positive numbers when also using the unary minus operator.\n\nlet x = -21\nlet y = +21\n// x == -21\n// y == 21\n"
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/==(_:_:)",
    "html": "Parameters\nlhs\n\nAn array to compare.\n\nrhs\n\nAnother array to compare.\n\nDiscussion\n\nYou can use the equal-to operator (==) to compare any two arrays that store the same, Equatable-conforming element type."
  },
  {
    "title": "reserveCapacity(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/reservecapacity(_:)-b9lh",
    "html": "Parameters\nminimumCapacity\n\nThe requested number of elements to store.\n\nDiscussion\n\nIf you are adding a known number of elements to an array, use this method to avoid multiple reallocations. This method ensures that the array has unique, mutable, contiguous storage, with space allocated for at least the requested number of elements.\n\nFor performance reasons, the size of the newly allocated storage might be greater than the requested capacity. Use the array’s capacity property to determine the size of the new storage.\n\nPreserving an Array’s Geometric Growth Strategy\n\nIf you implement a custom data structure backed by an array that grows dynamically, naively calling the reserveCapacity(_:) method can lead to worse than expected performance. Arrays need to follow a geometric allocation pattern for appending elements to achieve amortized constant-time performance. The Array type’s append(_:) and append(contentsOf:) methods take care of this detail for you, but reserveCapacity(_:) allocates only as much space as you tell it to (padded to a round value), and no more. This avoids over-allocation, but can result in insertion not having amortized constant-time performance.\n\nThe following code declares values, an array of integers, and the addTenQuadratic() function, which adds ten more values to the values array on each call.\n\n  var values: [Int] = [0, 1, 2, 3]\n\n\n  // Don't use 'reserveCapacity(_:)' like this\n  func addTenQuadratic() {\n      let newCount = values.count + 10\n      values.reserveCapacity(newCount)\n      for n in values.count..<newCount {\n          values.append(n)\n      }\n  }\n\n\nThe call to reserveCapacity(_:) increases the values array’s capacity by exactly 10 elements on each pass through addTenQuadratic(), which is linear growth. Instead of having constant time when averaged over many calls, the function may decay to performance that is linear in values.count. This is almost certainly not what you want.\n\nIn cases like this, the simplest fix is often to simply remove the call to reserveCapacity(_:), and let the append(_:) method grow the array for you.\n\n  func addTen() {\n      let newCount = values.count + 10\n      for n in values.count..<newCount {\n          values.append(n)\n      }\n  }\n\n\nIf you need more control over the capacity of your array, implement your own geometric growth strategy, passing the size you compute to reserveCapacity(_:).\n\nComplexity\n\nO(n), where n is the number of elements in the array."
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/+=(_:_:)-9z1y5",
    "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add."
  },
  {
    "title": "-=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/-=(_:_:)-42z1o",
    "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anykeypath/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "popFirst() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/popfirst()",
    "html": "Return Value\n\nA member of the set. If the set is empty, returns nil.\n\nDiscussion\n\nBecause a set is not an ordered collection, the “first” element may not be the first element that was added to the set.\n\nSee Also\nExcluding Elements\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements."
  },
  {
    "title": "starts(with:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/starts(with:by:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "starts(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/starts(with:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThis example tests whether one countable range begins with the elements of another countable range.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(b.starts(with: a))\n// Prints \"true\"\n\n\nPassing a sequence with no elements or an empty collection as possiblePrefix always results in true.\n\nprint(b.starts(with: []))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "starts(with:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/starts(with:by:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/split(separator:maxsplits:omittingemptysubsequences:)-3wzsn",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \")\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/withcontiguousstorageifavailable(_:)-17uda",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/contains(_:)",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/joined()",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/joined(separator:)-7bjrf",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/map(_:)-3f6lk",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "shuffled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/shuffled()",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "shuffled(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/shuffled(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity\n\nO(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "sorted(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/sorted(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "sorted() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/sorted()",
    "html": "Return Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nYou can sort any sequence of elements that conform to the Comparable protocol by calling this method. Elements are sorted in ascending order.\n\nHere’s an example of sorting a list of students’ names. Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (<).\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet sortedStudents = students.sorted()\nprint(sortedStudents)\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nTo sort the elements of your sequence in descending order, pass the greater-than operator (>) to the sorted(by:) method.\n\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements that compare as equal.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of an array, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let i = numbers.firstIndex(of: 30) {\n    print(numbers[i ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the array is empty, endIndex is equal to startIndex."
  },
  {
    "title": "formIndex(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/formindex(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex."
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/distance(from:to:)",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end."
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/index(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the array.\n\ndistance\n\nThe distance to offset i.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position.\n\nlet numbers = [10, 20, 30, 40, 50]\nlet i = numbers.index(numbers.startIndex, offsetBy: 4)\nprint(numbers[i])\n// Prints \"50\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/startindex",
    "html": "Discussion\n\nFor an instance of ContiguousArray, startIndex is always zero. If the array is empty, startIndex is equal to endIndex."
  },
  {
    "title": "formIndex(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/formindex(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": "index(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/index(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the array.\n\ndistance\n\nThe distance to offset i.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, limit has no effect if it is less than i. Likewise, if distance < 0, limit has no effect if it is greater than i.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position. The operation doesn’t require going beyond the limiting numbers.endIndex value, so it succeeds.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let i = numbers.index(numbers.startIndex,\n                         offsetBy: 4,\n                         limitedBy: numbers.endIndex) {\n    print(numbers[i])\n}\n// Prints \"50\"\n\n\nThe next example attempts to retrieve an index ten positions from numbers.startIndex, but fails, because that distance is beyond the index passed as limit.\n\nlet j = numbers.index(numbers.startIndex,\n                      offsetBy: 10,\n                      limitedBy: numbers.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index immediately before i."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/subscript(_:)-41wt7",
    "html": "Parameters\nbounds\n\nA range of integers. The bounds of the range must be valid indices of the array.\n\nOverview\n\nThe returned ArraySlice instance uses the same indices for the same elements as the original array. In particular, that slice, unlike an array, may have a nonzero startIndex and an endIndex that is not equal to count. Always use the slice’s startIndex and endIndex properties instead of assuming that its indices start or end at a particular value.\n\nThis example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2 ..< streets.endIndex]\nprint(streetsSlice)\n// Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"\n\n\nlet i = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[i!])\n// Prints \"Evarts\"\n"
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index immediately after i."
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/index(_:offsetby:)-1q8nu",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.\n\nlet s = \"Swift\"\nlet i = s.index(s.startIndex, offsetBy: 4)\nprint(s[i])\n// Prints \"t\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/index(_:offsetby:)-9qzbn",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.\n\nlet s = \"Swift\"\nlet i = s.index(s.startIndex, offsetBy: 4)\nprint(s[i])\n// Prints \"t\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "sleep(for:tolerance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/suspendingclock/sleep(for:tolerance:)",
    "html": "Discussion\n\nPrefer to use the sleep(until:tolerance:) method on Clock if you have access to an absolute instant."
  },
  {
    "title": "measure(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/suspendingclock/measure(_:)",
    "html": "Discussion\n  let clock = ContinuousClock()\n  let elapsed = clock.measure {\n     someWork()\n  }\n"
  },
  {
    "title": "index(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/index(_:offsetby:limitedby:)-7713p",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.\n\nlet s = \"Swift\"\nif let i = s.index(s.startIndex, offsetBy: 4, limitedBy: s.endIndex) {\n    print(s[i])\n}\n// Prints \"t\"\n\n\nThe next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.\n\nlet j = s.index(s.startIndex, offsetBy: 6, limitedBy: s.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "sleep(for:tolerance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/continuousclock/sleep(for:tolerance:)",
    "html": "Discussion\n\nPrefer to use the sleep(until:tolerance:) method on Clock if you have access to an absolute instant."
  },
  {
    "title": "appending(path:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anykeypath/appending(path:)",
    "html": "Parameters\npath\n\nThe key path to append.\n\nReturn Value\n\nA key path from the root of this key path and the value type of path, if path can be appended. If path can’t be appended, returns nil.\n\nDiscussion\n\nUse this method to extend this key path to the value type of another key path. Appending the key path passed as path is successful only if the root type for path matches this key path’s value type. This example creates key paths from Array<Int> to String and from String to Int, and then tries appending each to the other:\n\nlet arrayDescription: AnyKeyPath = \\Array<Int>.description\nlet stringLength: AnyKeyPath = \\String.count\n\n\n// Creates a key path from `Array<Int>` to `Int`\nlet arrayDescriptionLength = arrayDescription.appending(path: stringLength)\n\n\nlet invalidKeyPath = stringLength.appending(path: arrayDescription)\n// invalidKeyPath == nil\n\n\nThe second call to appending(path:) returns nil because the root type of arrayDescription, Array<Int>, does not match the value type of stringLength, Int."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "append(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/append(_:)-4na3g",
    "html": "Parameters\nnewElement\n\nThe element to append to the collection.\n\nDiscussion\n\nIf the collection does not have sufficient capacity for another element, additional storage is allocated before appending newElement. The following example adds a new number to an array of integers:\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(100)\n\n\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 100]\"\n\n\nComplexity\n\nO(1) on average, over many calls to append(_:) on the same collection."
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/distance(from:to:)-2rytr",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nUnless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/endindex",
    "html": "Discussion\n\nIf the set is empty, endIndex is equal to startIndex."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/split(separator:maxsplits:omittingemptysubsequences:)",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/droplast(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop off the end of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence that leaves off the specified number of elements at the end.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/+(_:_:)-3ntif",
    "html": "Parameters\nlhs\n\nA collection or finite sequence.\n\nrhs\n\nA range-replaceable collection.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of a Range<Int> instance and an integer array.\n\nlet numbers = [7, 8, 9, 10]\nlet moreNumbers = (1...6) + numbers\nprint(moreNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of argument on the right-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int]."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "withUnsafeBytes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/withunsafebytes(_:)",
    "html": "Parameters\nbody\n\nA closure with an UnsafeRawBufferPointer parameter that points to the contiguous storage for the array. If no such storage exists, it is created. If body has a return value, that value is also used as the return value for the withUnsafeBytes(_:) method. The argument is valid only for the duration of the closure’s execution.\n\nReturn Value\n\nThe return value, if any, of the body closure parameter.\n\nDiscussion\n\nThe array’s Element type must be a trivial type, which can be copied with just a bit-for-bit copy without any indirection or reference-counting operations. Generally, native Swift types that do not contain strong or weak references are trivial, as are imported C structs and enums.\n\nThe following example copies the bytes of the numbers array into a buffer of UInt8:\n\nvar numbers: [Int32] = [1, 2, 3]\nvar byteBuffer: [UInt8] = []\nnumbers.withUnsafeBytes {\n    byteBuffer.append(contentsOf: $0)\n}\n// byteBuffer == [1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0]\n\n\nNote\n\nThis example shows the behavior on a little-endian platform."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "first | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/first",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let firstNumber = numbers.first {\n    print(firstNumber)\n}\n// Prints \"10\"\n"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/duration/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/isempty",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/underestimatedcount",
    "html": "Discussion\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection."
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/formindex(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting at the beginning of this collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/map(_:)-8k1hz",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n"
  },
  {
    "title": "prefix(through:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/prefix(through:)",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "formIndex(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/formindex(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/split(separator:maxsplits:omittingemptysubsequences:)-3y2q6",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/subscript(_:)-997ec",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2...]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "suffix(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/suffix(from:)",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "ContiguousArray.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "lastRange(of:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/lastrange(of:in:)",
    "html": "Discussion\n\nA default implementation is given in terms of self.regions."
  },
  {
    "title": "nameAlias | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/namealias",
    "html": "Discussion\n\nThe name of a scalar is immutable and never changed in future versions of the Unicode Standard. The nameAlias property is provided to issue corrections if a name was issued erroneously. For example, the name of U+FE18 is “PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET” (note that “BRAKCET” is misspelled). The nameAlias property then contains the corrected name.\n\nIf a scalar has no alias, this property is nil.\n\nThis property corresponds to the “Name_Alias” property in the Unicode Standard."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/flatmap(_:)-7rx5w",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/joined(separator:)-3fljd",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "titlecaseMapping | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/titlecasemapping",
    "html": "Discussion\n\nThis property is a String, not a Unicode.Scalar or Character, because some mappings may transform a scalar into multiple scalars or graphemes. For example, the ligature “ﬁ” (U+FB01 LATIN SMALL LIGATURE FI) becomes “Fi” (U+0046 LATIN CAPITAL LETTER F, U+0069 LATIN SMALL LETTER I) when converted to titlecase.\n\nThis property corresponds to the “Titlecase_Mapping” property in the Unicode Standard."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/init(_:)-19zub",
    "html": "Parameters\nelements\n\nThe sequence of elements for the new collection."
  },
  {
    "title": "append(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/append(contentsof:)-79u63",
    "html": "Parameters\nnewElements\n\nThe elements to append to the array.\n\nDiscussion\n\nUse this method to append the elements of a sequence to the end of this array. This example appends the elements of a Range<Int> instance to an array of integers.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(contentsOf: 10...15)\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n\nComplexity\n\nO(m) on average, where m is the length of newElements, over many calls to append(contentsOf:) on the same array."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/name",
    "html": "Discussion\n\nSome scalars, such as control characters, do not have a value for this property in the Unicode Character Database. For such scalars, this property is nil.\n\nThis property corresponds to the “Name” property in the Unicode Standard."
  },
  {
    "title": "applying(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/applying(_:)",
    "html": "Parameters\ndifference\n\nThe difference to be applied.\n\nReturn Value\n\nAn instance representing the state of the receiver with the difference applied, or nil if the difference is incompatible with the receiver’s state.\n\nDiscussion\n\nComplexity\n\nO(n + c), where n is self.count and c is the number of changes contained by the parameter."
  },
  {
    "title": "init(arrayLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/init(arrayliteral:)",
    "html": "Parameters\nelements\n\nA variadic list of elements of the new array.\n\nDiscussion\n\nDo not call this initializer directly. It is used by the compiler when you use an array literal. Instead, create a new array by using an array literal as its value. To do this, enclose a comma-separated list of values in square brackets.\n\nHere, an array of strings is created from an array literal holding only strings:\n\nlet ingredients: ContiguousArray =\n      [\"cocoa beans\", \"sugar\", \"cocoa butter\", \"salt\"]\n"
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/indices-wkbb",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/distance(from:to:)-zoy0",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nUnless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance."
  },
  {
    "title": "init(arrayLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/init(arrayliteral:)-85a3x",
    "html": "Parameters\narrayLiteral\n\nA list of elements of the new set.\n\nDiscussion\n\nDo not call this initializer directly. It is used by the compiler when you use an array literal. Instead, create a new set using an array literal as its value by enclosing a comma-separated list of values in square brackets. You can use an array literal anywhere a set is expected by the type context.\n\nHere, a set of strings is created from an array literal holding only strings:\n\nlet ingredients: Set = [\"cocoa beans\", \"sugar\", \"cocoa butter\", \"salt\"]\nif ingredients.isSuperset(of: [\"sugar\", \"salt\"]) {\n    print(\"Whatever it is, it's bound to be delicious!\")\n}\n// Prints \"Whatever it is, it's bound to be delicious!\"\n"
  },
  {
    "title": "subtract(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/subtract(_:)-7uaak",
    "html": "Parameters\nother\n\nA set of the same type as the current set.\n\nDiscussion\n\nIn the following example, the elements of the employees set that are also members of the neighbors set are removed. In particular, the names \"Bethany\" and \"Eric\" are removed from employees.\n\nvar employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]\nlet neighbors: Set = [\"Bethany\", \"Eric\", \"Forlani\", \"Greta\"]\nemployees.subtract(neighbors)\nprint(employees)\n// Prints \"[\"Diana\", \"Chris\", \"Alicia\"]\"\n"
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "Set.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/suffix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. The value of maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence terminating at the end of the collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "suffix(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/suffix(from:)",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/startindex",
    "html": "Discussion\n\nIf the set is empty, startIndex is equal to endIndex."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/distance(from:to:)",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nUnless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection."
  },
  {
    "title": "formIndex(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/formindex(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/index(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.\n\nlet s = \"Swift\"\nlet i = s.index(s.startIndex, offsetBy: 4)\nprint(s[i])\n// Prints \"t\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "formIndex(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/formindex(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/formindex(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "index(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/index(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.\n\nlet s = \"Swift\"\nif let i = s.index(s.startIndex, offsetBy: 4, limitedBy: s.endIndex) {\n    print(s[i])\n}\n// Prints \"t\"\n\n\nThe next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.\n\nlet j = s.index(s.startIndex, offsetBy: 6, limitedBy: s.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting at the beginning of this collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/+(_:_:)-1rz1t",
    "html": "Parameters\nlhs\n\nA range-replaceable collection.\n\nrhs\n\nA collection or finite sequence.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of an integer array and a Range<Int> instance.\n\nlet numbers = [1, 2, 3, 4]\nlet moreNumbers = numbers + (5...10)\nprint(moreNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of the argument on the left-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int]."
  },
  {
    "title": "prefix(through:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/prefix(through:)",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(upTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/prefix(upto:)",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "randomElement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/randomelement()",
    "html": "Return Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement()!\n// randomName == \"Amani\"\n\n\nThis method is equivalent to calling randomElement(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "randomElement(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/randomelement(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when choosing a random element.\n\nReturn Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement(using: &myGenerator)!\n// randomName == \"Amani\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "prefix(upTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/prefix(upto:)",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.\n\nisSeparator\n\nA closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "firstIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/firstindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe first index where element is found. If element is not found in the collection, returns nil.\n\nDiscussion\n\nAfter using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "firstIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/firstindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "firstRange(of:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/firstrange(of:in:)",
    "html": "Discussion\n\nA default implementation is given in terms of self.regions."
  },
  {
    "title": "regions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/regions-swift.property",
    "html": "Discussion\n\nThe sum of the lengths of the associated regions must equal self.count (such that iterating regions and iterating self produces the same sequence of indices in the same number of index advancements)."
  },
  {
    "title": "isAlphabetic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isalphabetic",
    "html": "Discussion\n\nAlphabetic scalars are the primary units of alphabets and/or syllabaries.\n\nThis property corresponds to the “Alphabetic” and the “Other_Alphabetic” properties in the Unicode Standard."
  },
  {
    "title": "changesWhenNFKCCaseFolded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/changeswhennfkccasefolded",
    "html": "Discussion\n\nThis property corresponds to the “Changes_When_NFKC_Casefolded” property in the Unicode Standard."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/+(_:_:)-5igl",
    "html": "Parameters\nlhs\n\nA range-replaceable collection.\n\nrhs\n\nAnother range-replaceable collection.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of two integer arrays.\n\nlet lowerNumbers = [1, 2, 3, 4]\nlet higherNumbers: ContiguousArray = [5, 6, 7, 8, 9, 10]\nlet allNumbers = lowerNumbers + higherNumbers\nprint(allNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of the argument on the left-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int]."
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/+=(_:_:)",
    "html": "Parameters\nlhs\n\nThe array to append to.\n\nrhs\n\nA collection or finite sequence.\n\nDiscussion\n\nUse this operator to append the elements of a sequence to the end of range-replaceable collection with same Element type. This example appends the elements of a Range<Int> instance to an array of integers.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers += 10...15\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n\nComplexity\n\nO(m), where m is the length of the right-hand-side argument."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/init()",
    "html": "Discussion\n\nThis is equivalent to initializing with an empty array literal. For example:\n\nvar emptyArray = Array<Int>()\nprint(emptyArray.isEmpty)\n// Prints \"true\"\n\n\nemptyArray = []\nprint(emptyArray.isEmpty)\n// Prints \"true\"\n"
  },
  {
    "title": "init(repeating:count:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/init(repeating:count:)-47x84",
    "html": "Parameters\nrepeatedValue\n\nThe element to repeat.\n\ncount\n\nThe number of times to repeat the value passed in the repeating parameter. count must be zero or greater.\n\nDiscussion\n\nHere’s an example of creating an array initialized with five strings containing the letter Z.\n\nlet fiveZs = Array(repeating: \"Z\", count: 5)\nprint(fiveZs)\n// Prints \"[\"Z\", \"Z\", \"Z\", \"Z\", \"Z\"]\"\n"
  },
  {
    "title": "uppercaseMapping | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/uppercasemapping",
    "html": "Discussion\n\nThis property is a String, not a Unicode.Scalar or Character, because some mappings may transform a scalar into multiple scalars or graphemes. For example, the German letter “ß” (U+00DF LATIN SMALL LETTER SHARP S) becomes “SS” (U+0053 LATIN CAPITAL LETTER S, U+0053 LATIN CAPITAL LETTER S) when converted to uppercase.\n\nThis property corresponds to the “Uppercase_Mapping” property in the Unicode Standard."
  },
  {
    "title": "init(repeating:count:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/init(repeating:count:)-6u7j1",
    "html": "Parameters\nrepeatedValue\n\nThe element to repeat.\n\ncount\n\nThe number of times to repeat the value passed in the repeating parameter. count must be zero or greater.\n\nDiscussion\n\nHere’s an example of creating an array initialized with five strings containing the letter Z.\n\nlet fiveZs = Array(repeating: \"Z\", count: 5)\nprint(fiveZs)\n// Prints \"[\"Z\", \"Z\", \"Z\", \"Z\", \"Z\"]\"\n"
  },
  {
    "title": "append(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/append(_:)-oczy",
    "html": "Parameters\nnewElement\n\nThe element to append to the array.\n\nDiscussion\n\nUse this method to append a single element to the end of a mutable array.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(100)\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 100]\"\n\n\nBecause arrays increase their allocated capacity using an exponential strategy, appending a single element to an array is an O(1) operation when averaged over many calls to the append(_:) method. When an array has additional capacity and is not sharing its storage with another instance, appending an element is O(1). When an array needs to reallocate storage before appending or its storage is shared with another copy, appending is O(n), where n is the length of the array.\n\nComplexity\n\nO(1) on average, over many calls to append(_:) on the same array."
  },
  {
    "title": "numericType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/numerictype",
    "html": "Discussion\n\nFor scalars that represent a number, numericType is the numeric type of the scalar. For all other scalars, this property is nil.\n\nlet scalars: [Unicode.Scalar] = [\"4\", \"④\", \"⅕\", \"X\"]\nfor scalar in scalars {\n    print(scalar, \"-->\", scalar.properties.numericType)\n}\n// 4 --> Optional(Swift.Unicode.NumericType.decimal)\n// ④ --> Optional(Swift.Unicode.NumericType.digit)\n// ⅕ --> Optional(Swift.Unicode.NumericType.numeric)\n// X --> nil\n\n\nThis property corresponds to the “Numeric_Type” property in the Unicode Standard."
  },
  {
    "title": "lowercaseMapping | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/lowercasemapping",
    "html": "Discussion\n\nThis property is a String, not a Unicode.Scalar or Character, because some mappings may transform a scalar into multiple scalars or graphemes. For example, the character “İ” (U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE) becomes two scalars (U+0069 LATIN SMALL LETTER I, U+0307 COMBINING DOT ABOVE) when converted to lowercase.\n\nThis property corresponds to the “Lowercase_Mapping” property in the Unicode Standard."
  },
  {
    "title": "isXIDStart | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isxidstart",
    "html": "Discussion\n\nThe set of scalars [:XID_Start:] closes the set [:ID_Start:] under NFKC normalization by removing any scalars whose normalized form is not of the form [:ID_Start:] [:ID_Continue:]*.\n\nThis property corresponds to the “XID_Start” property in the Unicode Standard."
  },
  {
    "title": "isWhitespace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/iswhitespace",
    "html": "Discussion\n\nThis property is true for scalars that are spaces, separator characters, and other control characters that should be treated as whitespace for the purposes of parsing text elements.\n\nThis property corresponds to the “White_Space” property in the Unicode Standard."
  },
  {
    "title": "insert(_:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/insert(_:at:)-81ye7",
    "html": "Parameters\nnewElement\n\nThe new element to insert into the collection.\n\ni\n\nThe position at which to insert the new element. index must be a valid index into the collection.\n\nDiscussion\n\nThe new element is inserted before the element currently at the specified index. If you pass the collection’s endIndex property as the index parameter, the new element is appended to the collection.\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.insert(100, at: 3)\nnumbers.insert(200, at: numbers.endIndex)\n\n\nprint(numbers)\n// Prints \"[1, 2, 3, 100, 4, 5, 200]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection. If i == endIndex, this method is equivalent to append(_:)."
  },
  {
    "title": "isXIDContinue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isxidcontinue",
    "html": "Discussion\n\nThe set of scalars [:XID_Continue:] closes the set [:ID_Continue:] under NFKC normalization by removing any scalars whose normalized form is not of the form [:ID_Continue:]*.\n\nThis property corresponds to the “XID_Continue” property in the Unicode Standard."
  },
  {
    "title": "isUnifiedIdeograph | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isunifiedideograph",
    "html": "Discussion\n\nThis property is false for CJK punctuation and symbols, as well as for compatibility ideographs (which canonically decompose to unified ideographs).\n\nThis property corresponds to the “Unified_Ideograph” property in the Unicode Standard."
  },
  {
    "title": "isVariationSelector | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isvariationselector",
    "html": "Discussion\n\nVariation selectors allow rendering engines that support them to choose different glyphs to display for a particular code point.\n\nThis property corresponds to the “Variation_Selector” property in the Unicode Standard."
  },
  {
    "title": "removeAll(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/removeall(where:)-44y75",
    "html": "Parameters\nshouldBeRemoved\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.\n\nDiscussion\n\nUse this method to remove every element in a collection that meets particular criteria. The order of the remaining elements is preserved. This example removes all the vowels from a string:\n\nvar phrase = \"The rain in Spain stays mainly in the plain.\"\n\n\nlet vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\nphrase.removeAll(where: { vowels.contains($0) })\n// phrase == \"Th rn n Spn stys mnly n th pln.\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/removefirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.\n\nDiscussion\nvar bugs = [\"Aphid\", \"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]\nbugs.removeFirst(3)\nprint(bugs)\n// Prints \"[\"Damselfly\", \"Earwig\"]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "isRadical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isradical",
    "html": "Discussion\n\nThese scalars are often the components of ideographic description sequences, as defined by the isIDSBinaryOperator and isIDSTrinaryOperator properties.\n\nThis property corresponds to the “Radical” property in the Unicode Standard."
  },
  {
    "title": "isQuotationMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isquotationmark",
    "html": "Discussion\n\nThis property corresponds to the “Quotation_Mark” property in the Unicode Standard."
  },
  {
    "title": "removeFirst() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/removefirst()",
    "html": "Return Value\n\nThe removed element.\n\nDiscussion\n\nThe collection must not be empty.\n\nvar bugs = [\"Aphid\", \"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]\nbugs.removeFirst()\nprint(bugs)\n// Prints \"[\"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "isSentenceTerminal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/issentenceterminal",
    "html": "Discussion\n\nThis property corresponds to the “Sentence_Terminal” property in the Unicode Standard."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.\n\nisSeparator\n\nA closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "isIDStart | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isidstart",
    "html": "Discussion\n\nApplications that store identifiers in NFKC normalized form should instead use isXIDStart to check whether a scalar is a valid identifier character.\n\nThis property corresponds to the “ID_Start” and the “Other_ID_Start” properties in the Unicode Standard."
  },
  {
    "title": "isHexDigit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/ishexdigit",
    "html": "Discussion\n\nThis property is true for all scalars for which isASCIIHexDigit is true as well as for their CJK halfwidth and fullwidth variants.\n\nThis property corresponds to the “Hex_Digit” property in the Unicode Standard."
  },
  {
    "title": "partition(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/partition(by:)-2g3t0",
    "html": "Parameters\nbelongsInSecondPartition\n\nA predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.\n\nReturn Value\n\nThe index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.\n\nDiscussion\n\nAfter partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition. This operation isn’t guaranteed to be stable, so the relative ordering of elements within the partitions might change.\n\nIn the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.\n\nvar numbers = [30, 40, 20, 30, 30, 60, 10]\nlet p = numbers.partition(by: { $0 > 30 })\n// p == 5\n// numbers == [30, 10, 20, 30, 30, 60, 40]\n\n\nThe numbers array is now arranged in two partitions. The first partition, numbers[..<p], is made up of the elements that are not greater than 30. The second partition, numbers[p...], is made up of the elements that are greater than 30.\n\nlet first = numbers[..<p]\n// first == [30, 10, 20, 30, 30]\nlet second = numbers[p...]\n// second == [60, 40]\n\n\nNote that the order of elements in both partitions changed. That is, 40 appears before 60 in the original collection, but, after calling partition(by:), 60 appears before 40.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "write(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/textoutputstreamable/write(to:)",
    "html": "Required"
  },
  {
    "title": "reverse() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/reverse()",
    "html": "Discussion\n\nThe following example reverses the elements of an array of characters:\n\nvar characters: [Character] = [\"C\", \"a\", \"f\", \"é\"]\ncharacters.reverse()\nprint(characters)\n// Prints \"[\"é\", \"f\", \"a\", \"C\"]\"\n\n\nComplexity\n\nO(n), where n is the number of elements in the collection."
  },
  {
    "title": "sort(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/sort(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. If areInIncreasingOrder throws an error during the sort, the elements may be in a different order, but none will be lost.\n\nDiscussion\n\nWhen you want to sort a collection of elements that don’t conform to the Comparable protocol, pass a closure to this method that returns true when the first element should be ordered before the second.\n\nIn the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nvar responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nresponses.sort {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(responses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nAlternatively, use this method to sort a collection of elements that do conform to Comparable when you want the sort to be descending instead of ascending. Pass the greater-than operator (>) operator as the predicate.\n\nvar students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nstudents.sort(by: >)\nprint(students)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nareInIncreasingOrder must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the collection."
  },
  {
    "title": "isMath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/ismath",
    "html": "Discussion\n\nThe set of scalars for which this property is true includes mathematical operators and symbols as well as specific Greek and Hebrew letter variants that are categorized as symbols. Notably, it does not contain the standard digits or Latin/Greek letter blocks; instead, it contains the mathematical Latin, Greek, and Arabic letters and numbers defined in the Supplemental Multilingual Plane.\n\nThis property corresponds to the “Math” and the “Other_Math” properties in the Unicode Standard."
  },
  {
    "title": "resetBytes(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/resetbytes(in:)",
    "html": "Discussion\n\nA default implementation is given in terms of replaceSubrange(_:with:)."
  },
  {
    "title": "isLowercase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/islowercase",
    "html": "Discussion\n\nThis property corresponds to the “Lowercase” and the “Other_Lowercase” properties in the Unicode Standard."
  },
  {
    "title": "replaceSubrange(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/replacesubrange(_:with:)-4iomk",
    "html": "Parameters\nsubrange\n\nThe subrange of the collection to replace. The bounds of the range must be valid indices of the collection.\n\nnewElements\n\nThe new elements to add to the collection.\n\nDiscussion\n\nThis method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location. The number of new elements need not match the number of elements being removed.\n\nIn this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated<Int> instance.\n\n var nums = [10, 20, 30, 40, 50]\n nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))\n print(nums)\n // Prints \"[10, 1, 1, 1, 1, 1, 50]\"\n\n\nIf you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex. Calling the insert(contentsOf:at:) method instead is preferred.\n\nLikewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement. Calling the removeSubrange(_:) method instead is preferred.\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n + m), where n is length of this collection and m is the length of newElements. If the call to this method simply appends the contents of newElements to the collection, the complexity is O(m)."
  },
  {
    "title": "replaceSubrange(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/replacesubrange(_:with:)-95xhb",
    "html": "Parameters\nsubrange\n\nThe subrange of the collection to replace. The bounds of the range must be valid indices of the collection.\n\nnewElements\n\nThe new elements to add to the collection.\n\nDiscussion\n\nThis method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location. The number of new elements need not match the number of elements being removed.\n\nIn this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated<Int> instance.\n\n var nums = [10, 20, 30, 40, 50]\n nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))\n print(nums)\n // Prints \"[10, 1, 1, 1, 1, 1, 50]\"\n\n\nIf you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex. Calling the insert(contentsOf:at:) method instead is preferred.\n\nLikewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement. Calling the removeSubrange(_:) method instead is preferred.\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n + m), where n is length of this collection and m is the length of newElements. If the call to this method simply appends the contents of newElements to the collection, this method is equivalent to append(contentsOf:)."
  },
  {
    "title": "reserveCapacity(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/reservecapacity(_:)-4601w",
    "html": "Parameters\nn\n\nThe requested number of elements to store.\n\nDiscussion\n\nIf you will be adding a known number of elements to a collection, use this method to avoid multiple reallocations. A type that conforms to RangeReplaceableCollection can choose how to respond when this method is called. Depending on the type, it may make sense to allocate more or less storage than requested or to take no action at all."
  },
  {
    "title": "age | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/age",
    "html": "Discussion\n\nThis value is nil for code points that have not yet been assigned.\n\nThis property corresponds to the “Age” property in the Unicode Standard."
  },
  {
    "title": "canonicalCombiningClass | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/canonicalcombiningclass",
    "html": "Discussion\n\nThis property corresponds to the “Canonical_Combining_Class” property in the Unicode Standard."
  },
  {
    "title": "changesWhenCaseMapped | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/changeswhencasemapped",
    "html": "Discussion\n\nThis property is true whenever one or more of changesWhenLowercased, changesWhenUppercased, or changesWhenTitlecased are true.\n\nThis property corresponds to the “Changes_When_Casemapped” property in the Unicode Standard."
  },
  {
    "title": "changesWhenUppercased | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/changeswhenuppercased",
    "html": "Discussion\n\nThis property corresponds to the “Changes_When_Uppercased” property in the Unicode Standard."
  },
  {
    "title": "generalCategory | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/generalcategory",
    "html": "Discussion\n\nThis property corresponds to the “General_Category” property in the Unicode Standard."
  },
  {
    "title": "isASCIIHexDigit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isasciihexdigit",
    "html": "Discussion\n\nThe only scalars for which this property is true are:\n\nU+0030…U+0039: DIGIT ZERO…DIGIT NINE\n\nU+0041…U+0046: LATIN CAPITAL LETTER A…LATIN CAPITAL LETTER F\n\nU+0061…U+0066: LATIN SMALL LETTER A…LATIN SMALL LETTER F\n\nThis property corresponds to the “ASCII_Hex_Digit” property in the Unicode Standard."
  },
  {
    "title": "changesWhenTitlecased | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/changeswhentitlecased",
    "html": "Discussion\n\nThis property corresponds to the “Changes_When_Titlecased” property in the Unicode Standard."
  },
  {
    "title": "append(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/append(contentsof:)-66qjk",
    "html": "Parameters\nnewElements\n\nThe elements to append to the collection.\n\nDiscussion\n\nThe collection being appended to allocates any additional necessary storage to hold the new elements.\n\nThe following example appends the elements of a Range<Int> instance to an array of integers:\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(contentsOf: 10...15)\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n\nComplexity\n\nO(m), where m is the length of newElements."
  },
  {
    "title": "isBidiControl | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isbidicontrol",
    "html": "Discussion\n\nThis property corresponds to the “Bidi_Control” property in the Unicode Standard."
  },
  {
    "title": "isBidiMirrored | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isbidimirrored",
    "html": "Discussion\n\nThis property corresponds to the “Bidi_Mirrored” property in the Unicode Standard."
  },
  {
    "title": "isCaseIgnorable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/iscaseignorable",
    "html": "Discussion\n\nThis property corresponds to the “Case_Ignorable” property in the Unicode Standard."
  },
  {
    "title": "numericValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/numericvalue",
    "html": "Discussion\n\nFor scalars that represent a numeric value, numericValue is the whole or fractional value. For all other scalars, this property is nil.\n\nlet scalars: [Unicode.Scalar] = [\"4\", \"④\", \"⅕\", \"X\"]\nfor scalar in scalars {\n    print(scalar, \"-->\", scalar.properties.numericValue)\n}\n// 4 --> Optional(4.0)\n// ④ --> Optional(4.0)\n// ⅕ --> Optional(0.2)\n// X --> nil\n\n\nThis property corresponds to the “Numeric_Value” property in the Unicode Standard."
  },
  {
    "title": "insert(contentsOf:at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/insert(contentsof:at:)",
    "html": "Parameters\nnewElements\n\nThe new elements to insert into the collection.\n\ni\n\nThe position at which to insert the new elements. index must be a valid index of the collection.\n\nDiscussion\n\nThe new elements are inserted before the element currently at the specified index. If you pass the collection’s endIndex property as the index parameter, the new elements are appended to the collection.\n\nHere’s an example of inserting a range of integers into an array of the same type:\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.insert(contentsOf: 100...103, at: 3)\nprint(numbers)\n// Prints \"[1, 2, 3, 100, 101, 102, 103, 4, 5]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n + m), where n is length of this collection and m is the length of newElements. If i == endIndex, this method is equivalent to append(contentsOf:)."
  },
  {
    "title": "isSoftDotted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/issoftdotted",
    "html": "Discussion\n\nFor example, “i” is soft dotted because the dot disappears when adding an accent mark, as in “í”.\n\nThis property corresponds to the “Soft_Dotted” property in the Unicode Standard."
  },
  {
    "title": "isTerminalPunctuation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isterminalpunctuation",
    "html": "Discussion\n\nThis property corresponds to the “Terminal_Punctuation” property in the Unicode Standard."
  },
  {
    "title": "remove(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/remove(at:)-6yx8z",
    "html": "Parameters\nposition\n\nThe position of the element to remove. position must be a valid index of the collection that is not equal to the collection’s end index.\n\nReturn Value\n\nThe removed element.\n\nDiscussion\n\nAll the elements following the specified position are moved to close the gap. This example removes the middle element from an array of measurements.\n\nvar measurements = [1.2, 1.5, 2.9, 1.2, 1.6]\nlet removed = measurements.remove(at: 2)\nprint(measurements)\n// Prints \"[1.2, 1.5, 1.2, 1.6]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeAll(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/removeall(where:)-3or72",
    "html": "Parameters\nshouldBeRemoved\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be removed from the collection.\n\nDiscussion\n\nUse this method to remove every element in a collection that meets particular criteria. The order of the remaining elements is preserved. This example removes all the odd values from an array of numbers:\n\nvar numbers = [5, 6, 7, 8, 9, 10, 11]\nnumbers.removeAll(where: { $0 % 2 != 0 })\n// numbers == [6, 8, 10]\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeAll(keepingCapacity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/removeall(keepingcapacity:)-7jiz9",
    "html": "Parameters\nkeepCapacity\n\nPass true to keep the existing capacity of the array after removing its elements. The default value is false.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the array."
  },
  {
    "title": "popLast() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/poplast()",
    "html": "Return Value\n\nThe last element of the collection if the collection is not empty; otherwise, nil.\n\nDiscussion\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "isUppercase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isuppercase",
    "html": "Discussion\n\nThis property corresponds to the “Uppercase” and the “Other_Uppercase” properties in the Unicode Standard."
  },
  {
    "title": "removeAll(keepingCapacity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/removeall(keepingcapacity:)-2onkd",
    "html": "Parameters\nkeepCapacity\n\nPass true to request that the collection avoid releasing its storage. Retaining the collection’s storage can be a useful optimization when you’re planning to grow the collection again. The default value is false.\n\nDiscussion\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "isCased | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/iscased",
    "html": "Discussion\n\nThough similar in name, this property is not equivalent to changesWhenCaseMapped. The set of scalars for which isCased is true is a superset of those for which changesWhenCaseMapped is true. For example, the Latin small capitals that are used by the International Phonetic Alphabet have a case, but do not change when they are mapped to any of the other cases.\n\nThis property corresponds to the “Cased” property in the Unicode Standard."
  },
  {
    "title": "isDeprecated | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isdeprecated",
    "html": "Discussion\n\nScalars are never removed from the Unicode Standard, but the usage of deprecated scalars is strongly discouraged.\n\nThis property corresponds to the “Deprecated” property in the Unicode Standard."
  },
  {
    "title": "isDiacritic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isdiacritic",
    "html": "Discussion\n\nDiacritics are scalars that linguistically modify the meaning of another scalar to which they apply. Scalars for which this property is true are frequently, but not always, combining marks or modifiers.\n\nThis property corresponds to the “Diacritic” property in the Unicode Standard."
  },
  {
    "title": "isEmoji | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isemoji",
    "html": "Discussion\n\nThis property is true for scalars that are rendered as emoji by default and also for scalars that have a non-default emoji rendering when followed by U+FE0F VARIATION SELECTOR-16. This includes some scalars that are not typically considered to be emoji:\n\nlet scalars: [Unicode.Scalar] = [\"😎\", \"$\", \"0\"]\nfor s in scalars {\n    print(s, \"-->\", s.properties.isEmoji)\n}\n// 😎 --> true\n// $ --> false\n// 0 --> true\n\n\nThe final result is true because the ASCII digits have non-default emoji presentations; some platforms render these with an alternate appearance.\n\nBecause of this behavior, testing isEmoji alone on a single scalar is insufficient to determine if a unit of text is rendered as an emoji; a correct test requires inspecting multiple scalars in a Character. In addition to checking whether the base scalar has isEmoji == true, you must also check its default presentation (see isEmojiPresentation) and determine whether it is followed by a variation selector that would modify the presentation.\n\nThis property corresponds to the “Emoji” property in the Unicode Standard."
  },
  {
    "title": "isEmojiModifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isemojimodifier",
    "html": "Discussion\n\nThe Fitzpatrick skin types are examples of emoji modifiers; they change the appearance of the preceding emoji base (that is, a scalar for which isEmojiModifierBase is true) by rendering it with a different skin tone.\n\nThis property corresponds to the “Emoji_Modifier” property in the Unicode Standard."
  },
  {
    "title": "isExtender | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isextender",
    "html": "Discussion\n\nTypical extenders are length and iteration marks.\n\nThis property corresponds to the “Extender” property in the Unicode Standard."
  },
  {
    "title": "isFullCompositionExclusion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isfullcompositionexclusion",
    "html": "Discussion\n\nThis property corresponds to the “Full_Composition_Exclusion” property in the Unicode Standard."
  },
  {
    "title": "isLogicalOrderException | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/islogicalorderexception",
    "html": "Discussion\n\nThis property applies to a small number of spacing vowel letters occurring in some Southeast Asian scripts like Thai and Lao, which use a visual order display model. Such letters are stored in text ahead of syllable-initial consonants.\n\nThis property corresponds to the “Logical_Order_Exception” property in the Unicode Standard."
  },
  {
    "title": "isGraphemeBase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isgraphemebase",
    "html": "Discussion\n\nA grapheme base can be thought of as a space-occupying glyph above or below which other non-spacing modifying glyphs can be applied. For example, when the character é is represented in its decomposed form, the grapheme base is “e” (U+0065 LATIN SMALL LETTER E) and it is followed by a single grapheme extender, U+0301 COMBINING ACUTE ACCENT.\n\nThe set of scalars for which isGraphemeBase is true is disjoint by definition from the set for which isGraphemeExtend is true.\n\nThis property corresponds to the “Grapheme_Base” property in the Unicode Standard."
  },
  {
    "title": "isGraphemeExtend | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isgraphemeextend",
    "html": "Discussion\n\nA grapheme extender can be thought of primarily as a non-spacing glyph that is applied above or below another glyph. For example, when the character é is represented in its decomposed form, the grapheme base is “e” (U+0065 LATIN SMALL LETTER E) and it is followed by a single grapheme extender, U+0301 COMBINING ACUTE ACCENT.\n\nThe set of scalars for which isGraphemeExtend is true is disjoint by definition from the set for which isGraphemeBase is true.\n\nThis property corresponds to the “Grapheme_Extend” and the “Other_Grapheme_Extend” properties in the Unicode Standard."
  },
  {
    "title": "shuffle() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/shuffle()",
    "html": "Discussion\n\nUse the shuffle() method to randomly reorder the elements of an array.\n\nvar names = [\"Alejandro\", \"Camila\", \"Diego\", \"Luciana\", \"Luis\", \"Sofía\"]\nnames.shuffle()\n// names == [\"Luis\", \"Camila\", \"Luciana\", \"Sofía\", \"Alejandro\", \"Diego\"]\n\n\nThis method is equivalent to calling shuffle(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "partition(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/partition(by:)-2uabq",
    "html": "Parameters\nbelongsInSecondPartition\n\nA predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it.\n\nReturn Value\n\nThe index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection’s endIndex.\n\nDiscussion\n\nAfter partitioning a collection, there is a pivot index p where no element before p satisfies the belongsInSecondPartition predicate and every element at or after p satisfies belongsInSecondPartition. This operation isn’t guaranteed to be stable, so the relative ordering of elements within the partitions might change.\n\nIn the following example, an array of numbers is partitioned by a predicate that matches elements greater than 30.\n\nvar numbers = [30, 40, 20, 30, 30, 60, 10]\nlet p = numbers.partition(by: { $0 > 30 })\n// p == 5\n// numbers == [30, 10, 20, 30, 30, 60, 40]\n\n\nThe numbers array is now arranged in two partitions. The first partition, numbers[..<p], is made up of the elements that are not greater than 30. The second partition, numbers[p...], is made up of the elements that are greater than 30.\n\nlet first = numbers[..<p]\n// first == [30, 10, 20, 30, 30]\nlet second = numbers[p...]\n// second == [60, 40]\n\n\nNote that the order of elements in both partitions changed. That is, 40 appears before 60 in the original collection, but, after calling partition(by:), 60 appears before 40.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "shuffle(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/shuffle(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the collection.\n\nDiscussion\n\nYou use this method to randomize the elements of a collection when you are using a custom random number generator. For example, you can use the shuffle(using:) method to randomly reorder the elements of an array.\n\nvar names = [\"Alejandro\", \"Camila\", \"Diego\", \"Luciana\", \"Luis\", \"Sofía\"]\nnames.shuffle(using: &myGenerator)\n// names == [\"Sofía\", \"Alejandro\", \"Camila\", \"Luis\", \"Diego\", \"Luciana\"]\n\n\nComplexity\n\nO(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to shuffle a collection may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "sort() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/sort()",
    "html": "Discussion\n\nYou can sort any mutable collection of elements that conform to the Comparable protocol by calling this method. Elements are sorted in ascending order.\n\nHere’s an example of sorting a list of students’ names. Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (<).\n\nvar students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nstudents.sort()\nprint(students)\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nTo sort the elements of your collection in descending order, pass the greater-than operator (>) to the sort(by:) method.\n\nstudents.sort(by: >)\nprint(students)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements that compare as equal.\n\nComplexity\n\nO(n log n), where n is the length of the collection."
  },
  {
    "title": "swapAt(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/swapat(_:_:)",
    "html": "Parameters\ni\n\nThe index of the first value to swap.\n\nj\n\nThe index of the second value to swap.\n\nDiscussion\n\nBoth parameters must be valid indices of the collection that are not equal to endIndex. Calling swapAt(_:_:) with the same index as both i and j has no effect.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "withContiguousMutableStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/withcontiguousmutablestorageifavailable(_:)-564v7",
    "html": "Parameters\nbody\n\nA closure that receives an in-out UnsafeMutableBufferPointer to the collection’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the collection doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer provides access to the contiguous mutable storage of the entire collection. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in the form of contiguous mutable storage, this method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nAlways perform any necessary cleanup in the closure, because the method makes no guarantees about the state of the collection if the closure throws an error. Your changes to the collection may be absent from the collection after throwing the error, because the closure could receive a temporary copy rather than direct access to the collection’s storage.\n\nWarning\n\nYour body closure must not replace buffer. This leads to a crash in all implementations of this method within the standard library.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/subscript(_:)-6knxt",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe accessed slice uses the same indices for the same elements as the original collection. Always use the slice’s startIndex property instead of assuming that its indices start at a particular value.\n\nThis example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2 ..< streets.endIndex]\nprint(streetsSlice)\n// Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"\n\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nstreets[index!] = \"Eustace\"\nprint(streets[index!])\n// Prints \"Eustace\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance."
  },
  {
    "title": "removeSubrange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/removesubrange(_:)-8cd5m",
    "html": "Parameters\nbounds\n\nThe range of the collection to be removed. The bounds of the range must be valid indices of the collection.\n\nDiscussion\n\nAll the elements following the specified position are moved to close the gap. This example removes three elements from the middle of an array of measurements.\n\nvar measurements = [1.2, 1.5, 2.9, 1.2, 1.5]\nmeasurements.removeSubrange(1..<4)\nprint(measurements)\n// Prints \"[1.2, 1.5]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "removeLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/removelast(_:)",
    "html": "Parameters\nk\n\nThe number of elements to remove from the collection. k must be greater than or equal to zero and must not exceed the number of elements in the collection.\n\nDiscussion\n\nAttempting to remove more elements than exist in the collection triggers a runtime error.\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(k), where k is the specified number of elements."
  },
  {
    "title": "isNoncharacterCodePoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isnoncharactercodepoint",
    "html": "Discussion\n\nThis property corresponds to the “Noncharacter_Code_Point” property in the Unicode Standard."
  },
  {
    "title": "isPatternSyntax | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/ispatternsyntax",
    "html": "Discussion\n\nThis property corresponds to the “Pattern_Syntax” property in the Unicode Standard."
  },
  {
    "title": "replaceSubrange(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/replacesubrange(_:with:)-1gkro",
    "html": "Parameters\nsubrange\n\nThe subrange of the array to replace. The start and end of a subrange must be valid indices of the array.\n\nnewElements\n\nThe new elements to add to the array.\n\nDiscussion\n\nThis method has the effect of removing the specified range of elements from the array and inserting the new elements at the same location. The number of new elements need not match the number of elements being removed.\n\nIn this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated<Int> instance.\n\n var nums = [10, 20, 30, 40, 50]\n nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))\n print(nums)\n // Prints \"[10, 1, 1, 1, 1, 1, 50]\"\n\n\nIf you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex. Calling the insert(contentsOf:at:) method instead is preferred.\n\nLikewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement. Calling the removeSubrange(_:) method instead is preferred.\n\nComplexity\n\nO(n + m), where n is length of the array and m is the length of newElements. If the call to this method simply appends the contents of newElements to the array, this method is equivalent to append(contentsOf:)."
  },
  {
    "title": "removeSubrange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/removesubrange(_:)-3k98x",
    "html": "Parameters\nbounds\n\nThe range of the collection to be removed. The bounds of the range must be valid indices of the collection.\n\nDiscussion\n\nAll the elements following the specified position are moved to close the gap. This example removes three elements from the middle of an array of measurements.\n\nvar measurements = [1.2, 1.5, 2.9, 1.2, 1.5]\nmeasurements.removeSubrange(1..<4)\nprint(measurements)\n// Prints \"[1.2, 1.5]\"\n\n\nCalling this method may invalidate any existing indices for use with this collection.\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "isPatternWhitespace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/ispatternwhitespace",
    "html": "Discussion\n\nThis property corresponds to the “Pattern_White_Space” property in the Unicode Standard."
  },
  {
    "title": "removeLast() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/removelast()",
    "html": "Return Value\n\nThe last element of the collection.\n\nDiscussion\n\nThe collection must not be empty.\n\nCalling this method may invalidate all saved indices of this collection. Do not rely on a previously stored index value after altering a collection with any operation that can change its length.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "changesWhenCaseFolded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/changeswhencasefolded",
    "html": "Discussion\n\nThis property corresponds to the “Changes_When_Casefolded” property in the Unicode Standard."
  },
  {
    "title": "changesWhenLowercased | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/changeswhenlowercased",
    "html": "Discussion\n\nThis property corresponds to the “Changes_When_Lowercased” property in the Unicode Standard."
  },
  {
    "title": "pointwiseMin(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/pointwisemin(_:_:)-8v95p",
    "html": "Discussion\n\nEach element of the result is the minimum of the corresponding elements of the inputs.\n\nSee Also\nSupporting Functions\nfunc all<Storage>(SIMDMask<Storage>) -> Bool\nTrue if every lane of mask is true.\nfunc any<Storage>(SIMDMask<Storage>) -> Bool\nTrue if any lane of mask is true.\nfunc pointwiseMax<T>(T, T) -> T\nThe lanewise maximum of two vectors.\nfunc pointwiseMax<T>(T, T) -> T\nThe lanewise maximum of two vectors.\nfunc pointwiseMin<T>(T, T) -> T\nThe lanewise minimum of two vectors."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/subscript(_:)-5x88v",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2...]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/split(separator:maxsplits:omittingemptysubsequences:)",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/subscript(_:)-2ew5d",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2...]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/subscript(_:)-6nizk",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe accessed slice uses the same indices for the same elements as the original collection. Always use the slice’s startIndex property instead of assuming that its indices start at a particular value.\n\nThis example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2 ..< streets.endIndex]\nprint(streetsSlice)\n// Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"\n\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// Prints \"Evarts\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collection/subscript(_:)-2qem1",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe accessed slice uses the same indices for the same elements as the original collection. Always use the slice’s startIndex property instead of assuming that its indices start at a particular value.\n\nThis example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2 ..< streets.endIndex]\nprint(streetsSlice)\n// Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"\n\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nstreets[index!] = \"Eustace\"\nprint(streets[index!])\n// Prints \"Eustace\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "_UnicodeParser Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/forwardparser/_unicodeparser-implementations",
    "html": "Topics\nType Aliases\ntypealias Encoding\nThe encoding with which this parser is associated"
  },
  {
    "title": "_UTFParser Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/forwardparser/_utfparser-implementations",
    "html": "Topics\nInstance Methods\nfunc parseScalar<I>(from: inout I) -> Unicode.ParseResult<Self.Encoding.EncodedScalar>\nAvailable when Encoding.EncodedScalar conforms to RangeReplaceableCollection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/min(_:_:)",
    "html": "Parameters\nx\n\nA value to compare.\n\ny\n\nAnother value to compare.\n\nReturn Value\n\nThe lesser of x and y. If x is equal to y, returns x.\n\nSee Also\nChoosing the Smallest and Largest Value\nfunc min<T>(T, T, T, T...) -> T\nReturns the least argument passed.\nfunc max<T>(T, T) -> T\nReturns the greater of two comparable values.\nfunc max<T>(T, T, T, T...) -> T\nReturns the greatest argument passed."
  },
  {
    "title": "write(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/textoutputstream/write(_:)",
    "html": "Required"
  },
  {
    "title": "min(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/min(_:_:_:_:)",
    "html": "Parameters\nx\n\nA value to compare.\n\ny\n\nAnother value to compare.\n\nz\n\nA third value to compare.\n\nrest\n\nZero or more additional values.\n\nReturn Value\n\nThe least of all the arguments. If there are multiple equal least arguments, the result is the first one.\n\nSee Also\nChoosing the Smallest and Largest Value\nfunc min<T>(T, T) -> T\nReturns the lesser of two comparable values.\nfunc max<T>(T, T) -> T\nReturns the greater of two comparable values.\nfunc max<T>(T, T, T, T...) -> T\nReturns the greatest argument passed."
  },
  {
    "title": "isDash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isdash",
    "html": "Discussion\n\nThis property corresponds to the “Dash” property in the Unicode Standard."
  },
  {
    "title": "isDefaultIgnorableCodePoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isdefaultignorablecodepoint",
    "html": "Discussion\n\nDefault-ignorable code points are those that should be ignored by default in rendering (unless explicitly supported). They have no visible glyph or advance width in and of themselves, although they may affect the display, positioning, or adornment of adjacent or surrounding characters.\n\nThis property corresponds to the “Default_Ignorable_Code_Point” and the “Other_Default_Ignorable_Code_point” properties in the Unicode Standard."
  },
  {
    "title": "isEmojiModifierBase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isemojimodifierbase",
    "html": "Discussion\n\nThis property corresponds to the “Emoji_Modifier_Base” property in the Unicode Standard."
  },
  {
    "title": "isJoinControl | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isjoincontrol",
    "html": "Discussion\n\nThere are two scalars for which this property is true:\n\nWhen U+200C ZERO WIDTH NON-JOINER is inserted between two characters, it directs the rendering engine to render them separately/disconnected when it might otherwise render them as a ligature. For example, a rendering engine might display “fl” in English as a connected glyph; inserting the zero width non-joiner would force them to be rendered as disconnected glyphs.\n\nWhen U+200D ZERO WIDTH JOINER is inserted between two characters, it directs the rendering engine to render them as a connected glyph when it would otherwise render them independently. The zero width joiner is also used to construct complex emoji from sequences of base emoji characters. For example, the various “family” emoji are encoded as sequences of man, woman, or child emoji that are interleaved with zero width joiners.\n\nThis property corresponds to the “Join_Control” property in the Unicode Standard."
  },
  {
    "title": "isIdeographic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isideographic",
    "html": "Discussion\n\nThis property roughly defines the class of “Chinese characters” and does not include characters of other logographic scripts such as Cuneiform or Egyptian Hieroglyphs.\n\nThis property corresponds to the “Ideographic” property in the Unicode Standard."
  },
  {
    "title": "isEmojiPresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isemojipresentation",
    "html": "Discussion\n\nScalars that have default to emoji presentation can be followed by U+FE0E VARIATION SELECTOR-15 to request the text presentation of the scalar instead. Likewise, scalars that default to text presentation can be followed by U+FE0F VARIATION SELECTOR-16 to request the emoji presentation.\n\nThis property corresponds to the “Emoji_Presentation” property in the Unicode Standard."
  },
  {
    "title": "isIDSBinaryOperator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isidsbinaryoperator",
    "html": "Discussion\n\nIdeographic description characters are technically printable characters, but advanced rendering engines may use them to approximate ideographs that are otherwise unrepresentable.\n\nThis property corresponds to the “IDS_Binary_Operator” property in the Unicode Standard."
  },
  {
    "title": "isIDContinue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isidcontinue",
    "html": "Discussion\n\nApplications that store identifiers in NFKC normalized form should instead use isXIDContinue to check whether a scalar is a valid identifier character.\n\nThis property corresponds to the “ID_Continue” and the “Other_ID_Continue” properties in the Unicode Standard."
  },
  {
    "title": "isIDSTrinaryOperator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/properties-swift.struct/isidstrinaryoperator",
    "html": "Discussion\n\nIdeographic description characters are technically printable characters, but advanced rendering engines may use them to approximate ideographs that are otherwise unrepresentable.\n\nThis property corresponds to the “IDS_Trinary_Operator” property in the Unicode Standard."
  },
  {
    "title": "withContiguousMutableStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/withcontiguousmutablestorageifavailable(_:)-5k8vo",
    "html": "Parameters\nbody\n\nA closure that receives an in-out UnsafeMutableBufferPointer to the collection’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the collection doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer provides access to the contiguous mutable storage of the entire collection. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in the form of contiguous mutable storage, this method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nAlways perform any necessary cleanup in the closure, because the method makes no guarantees about the state of the collection if the closure throws an error. Your changes to the collection may be absent from the collection after throwing the error, because the closure could receive a temporary copy rather than direct access to the collection’s storage.\n\nWarning\n\nYour body closure must not replace buffer. This leads to a crash in all implementations of this method within the standard library.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/contiguousarray/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "randomElement(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/randomelement(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when choosing a random element.\n\nReturn Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement(using: &myGenerator)!\n// randomName == \"Amani\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "max(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/max(_:_:_:_:)",
    "html": "Parameters\nx\n\nA value to compare.\n\ny\n\nAnother value to compare.\n\nz\n\nA third value to compare.\n\nrest\n\nZero or more additional values.\n\nReturn Value\n\nThe greatest of all the arguments. If there are multiple equal greatest arguments, the result is the last one.\n\nSee Also\nChoosing the Smallest and Largest Value\nfunc min<T>(T, T) -> T\nReturns the lesser of two comparable values.\nfunc min<T>(T, T, T, T...) -> T\nReturns the least argument passed.\nfunc max<T>(T, T) -> T\nReturns the greater of two comparable values."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/max(_:_:)",
    "html": "Parameters\nx\n\nA value to compare.\n\ny\n\nAnother value to compare.\n\nReturn Value\n\nThe greater of x and y. If x is equal to y, returns y.\n\nSee Also\nChoosing the Smallest and Largest Value\nfunc min<T>(T, T) -> T\nReturns the lesser of two comparable values.\nfunc min<T>(T, T, T, T...) -> T\nReturns the least argument passed.\nfunc max<T>(T, T, T, T...) -> T\nReturns the greatest argument passed."
  },
  {
    "title": "init(codingPath:debugDescription:underlyingError:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/encodingerror/context/init(codingpath:debugdescription:underlyingerror:)",
    "html": "Parameters\ncodingPath\n\nThe path of coding keys taken to get to the point of the failing encode call.\n\ndebugDescription\n\nA description of what went wrong, for debugging purposes.\n\nunderlyingError\n\nThe underlying error which caused this error, if any."
  },
  {
    "title": "pointwiseMin(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/pointwisemin(_:_:)-39txi",
    "html": "Discussion\n\nEach element of the result is the minimum of the corresponding elements of the inputs.\n\nSee Also\nSupporting Functions\nfunc all<Storage>(SIMDMask<Storage>) -> Bool\nTrue if every lane of mask is true.\nfunc any<Storage>(SIMDMask<Storage>) -> Bool\nTrue if any lane of mask is true.\nfunc pointwiseMax<T>(T, T) -> T\nThe lanewise maximum of two vectors.\nfunc pointwiseMax<T>(T, T) -> T\nThe lanewise maximum of two vectors.\nfunc pointwiseMin<T>(T, T) -> T\nThe lanewise minimum of two vectors."
  },
  {
    "title": "pointwiseMax(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/pointwisemax(_:_:)-2k6er",
    "html": "Discussion\n\nEach element of the result is the minimum of the corresponding elements of the inputs.\n\nSee Also\nSupporting Functions\nfunc all<Storage>(SIMDMask<Storage>) -> Bool\nTrue if every lane of mask is true.\nfunc any<Storage>(SIMDMask<Storage>) -> Bool\nTrue if any lane of mask is true.\nfunc pointwiseMax<T>(T, T) -> T\nThe lanewise maximum of two vectors.\nfunc pointwiseMin<T>(T, T) -> T\nThe lanewise minimum of two vectors.\nfunc pointwiseMin<T>(T, T) -> T\nThe lanewise minimum of two vectors."
  },
  {
    "title": "pointwiseMax(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/pointwisemax(_:_:)-29hn2",
    "html": "Discussion\n\nEach element of the result is the maximum of the corresponding elements of the inputs.\n\nSee Also\nSupporting Functions\nfunc all<Storage>(SIMDMask<Storage>) -> Bool\nTrue if every lane of mask is true.\nfunc any<Storage>(SIMDMask<Storage>) -> Bool\nTrue if any lane of mask is true.\nfunc pointwiseMax<T>(T, T) -> T\nThe lanewise maximum of two vectors.\nfunc pointwiseMin<T>(T, T) -> T\nThe lanewise minimum of two vectors.\nfunc pointwiseMin<T>(T, T) -> T\nThe lanewise minimum of two vectors."
  },
  {
    "title": "any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/any(_:)",
    "html": "See Also\nSupporting Functions\nfunc all<Storage>(SIMDMask<Storage>) -> Bool\nTrue if every lane of mask is true.\nfunc pointwiseMax<T>(T, T) -> T\nThe lanewise maximum of two vectors.\nfunc pointwiseMax<T>(T, T) -> T\nThe lanewise maximum of two vectors.\nfunc pointwiseMin<T>(T, T) -> T\nThe lanewise minimum of two vectors.\nfunc pointwiseMin<T>(T, T) -> T\nThe lanewise minimum of two vectors."
  },
  {
    "title": "String.UTF16View.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "suffix(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/suffix(from:)",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "String.UTF16View.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/all(_:)",
    "html": "See Also\nSupporting Functions\nfunc any<Storage>(SIMDMask<Storage>) -> Bool\nTrue if any lane of mask is true.\nfunc pointwiseMax<T>(T, T) -> T\nThe lanewise maximum of two vectors.\nfunc pointwiseMax<T>(T, T) -> T\nThe lanewise maximum of two vectors.\nfunc pointwiseMin<T>(T, T) -> T\nThe lanewise minimum of two vectors.\nfunc pointwiseMin<T>(T, T) -> T\nThe lanewise minimum of two vectors."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "transcode(_:from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/transcode(_:from:)-rq34",
    "html": "Discussion\n\nA default implementation of this method will be provided automatically for any conforming type that does not implement one."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.\n\nisSeparator\n\nA closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "randomElement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/randomelement()",
    "html": "Return Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement()!\n// randomName == \"Amani\"\n\n\nThis method is equivalent to calling randomElement(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "prefix(upTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/prefix(upto:)",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(through:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/prefix(through:)",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting at the beginning of this collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/map(_:)-3lvy9",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n"
  },
  {
    "title": "formIndex(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/formindex(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/formindex(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "formIndex(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/formindex(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/underestimatedcount",
    "html": "Discussion\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "firstIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/firstindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe first index where element is found. If element is not found in the collection, returns nil.\n\nDiscussion\n\nAfter using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\"]\nif let i = students.firstIndex(of: \"Maxime\") {\n    students[i] = \"Max\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "firstIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/firstindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.firstIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Abena starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/iterator/next()",
    "html": "Return Value\n\nThe next element in the underlying sequence, if a next element exists; otherwise, nil.\n\nDiscussion\n\nRepeatedly calling this method returns, in order, all the elements of the underlying sequence. As soon as the sequence has run out of elements, all subsequent calls return nil.\n\nYou must not call this method if any other copy of this iterator has been advanced with a call to its next() method.\n\nThe following example shows how an iterator can be used explicitly to emulate a for-in loop. First, retrieve a sequence’s iterator, and then call the iterator’s next() method until it returns nil.\n\nlet numbers = [2, 3, 5, 7]\nvar numbersIterator = numbers.makeIterator()\n\n\nwhile let num = numbersIterator.next() {\n    print(num)\n}\n// Prints \"2\"\n// Prints \"3\"\n// Prints \"5\"\n// Prints \"7\"\n"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncThrowingStream<Element, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Failure conforms to Error.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Failure conforms to Error."
  },
  {
    "title": "makeStream(of:throwing:bufferingPolicy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/makestream(of:throwing:bufferingpolicy:)",
    "html": "Parameters\nelementType\n\nThe element type of the stream.\n\nfailureType\n\nThe failure type of the stream.\n\nlimit\n\nThe buffering policy that the stream should use.\n\nReturn Value\n\nA tuple containing the stream and its continuation. The continuation should be passed to the producer while the stream should be passed to the consumer."
  },
  {
    "title": "_UTFParser Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/reverseparser/_utfparser-implementations",
    "html": "Topics\nInstance Methods\nfunc parseScalar<I>(from: inout I) -> Unicode.ParseResult<Self.Encoding.EncodedScalar>\nAvailable when Encoding.EncodedScalar conforms to RangeReplaceableCollection."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/makeasynciterator()",
    "html": "See Also\nCreating an Iterator\nstruct Iterator\nThe asynchronous iterator for iterating an asynchronous stream.\nAvailable when Failure conforms to Error."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/isempty",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "first | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/first",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let firstNumber = numbers.first {\n    print(firstNumber)\n}\n// Prints \"10\"\n"
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "init(unfolding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/init(unfolding:)",
    "html": "Parameters\nproduce\n\nA closure that asynchronously produces elements for the stream.\n\nDiscussion\n\nUse this convenience initializer when you have an asynchronous function that can produce elements for the stream, and don’t want to invoke a continuation manually. This initializer “unfolds” your closure into a full-blown asynchronous stream. The created stream handles adherence to the AsyncSequence protocol automatically. To terminate the stream with an error, throw the error from your closure.\n\nThe following example shows an AsyncThrowingStream created with this initializer that produces random numbers on a one-second interval. If the random number is divisible by 5 with no remainder, the stream throws a MyRandomNumberError.\n\nlet stream = AsyncThrowingStream<Int, Error> {\n    await Task.sleep(1 * 1_000_000_000)\n    let random = Int.random(in: 1...10)\n    if random % 5 == 0 {\n        throw MyRandomNumberError()\n    }\n    return random\n}\n\n\n// Call point:\ndo {\n    for try await random in stream {\n        print(random)\n    }\n} catch {\n    print(error)\n}\n"
  },
  {
    "title": "AsyncThrowingStream.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/iterator",
    "html": "Overview\n\nThis type is not Sendable. Don’t use it from multiple concurrent contexts. It is a programmer error to invoke next() from a concurrent context that contends with another such call, which results in a call to fatalError().\n\nTopics\nIterating over Elements\nfunc next() async throws -> Element?\nThe next value from the asynchronous stream.\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> AsyncThrowingStream<Element, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Failure conforms to Error."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/systemrandomnumbergenerator/next()-1ljq7",
    "html": "Return Value\n\nAn unsigned 64-bit random value.\n\nSee Also\nGenerating Random Binary Data\nfunc next<T>() -> T\nReturns a value from a uniform, independent distribution of binary data.\nfunc next<T>(upperBound: T) -> T\nReturns a random value that is less than the given upper bound."
  },
  {
    "title": "transcode(_:from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/transcode(_:from:)-3t594",
    "html": "Discussion\n\nA default implementation of this method will be provided automatically for any conforming type that does not implement one."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "encodedReplacementCharacter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/encodedreplacementcharacter",
    "html": "Discussion\n\nIf the Unicode replacement character U+FFFD is representable in this encoding, encodedReplacementCharacter encodes that scalar value."
  },
  {
    "title": "_UnicodeParser Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/reverseparser/_unicodeparser-implementations",
    "html": "Topics\nType Aliases\ntypealias Encoding\nThe encoding with which this parser is associated"
  },
  {
    "title": "Unicode.ParseResult.error(length:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/parseresult/error(length:)",
    "html": "Discussion\n\nlength is the number of underlying code units consumed by this error, guaranteed to be greater than 0."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "_CustomPlaygroundQuickLookable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/_customplaygroundquicklookable-implementations",
    "html": "Topics\nInstance Properties\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for the Int instance.\nDeprecated"
  },
  {
    "title": "formSquareRoot() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/formsquareroot()",
    "html": "See Also\nPerforming Calculations\nFloating-Point Operators for Double\nPerform arithmetic and bitwise operations or compare values.\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding.\nfunc addProduct(Double, Double)\nAdds the product of the two given values to this value in place, computed without intermediate rounding.\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value.\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value.\nfunc formRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value.\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division.\nfunc formTruncatingRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value using truncating division.\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "isLeadSurrogate(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/isleadsurrogate(_:)",
    "html": "Parameters\nx\n\nA UTF-16 code unit.\n\nReturn Value\n\ntrue if x is a high-surrogate code unit; otherwise, false.\n\nDiscussion\n\nHere’s an example of checking whether each code unit in a string’s utf16 view is a lead surrogate. The apple string contains a single emoji character made up of a surrogate pair when encoded in UTF-16.\n\nlet apple = \"🍎\"\nfor unit in apple.utf16 {\n    print(UTF16.isLeadSurrogate(unit))\n}\n// Prints \"true\"\n// Prints \"false\"\n\n\nThis method does not validate the encoding of a UTF-16 sequence beyond the specified code unit. Specifically, it does not validate that a low-surrogate code unit follows x."
  },
  {
    "title": "isTrailSurrogate(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/istrailsurrogate(_:)",
    "html": "Parameters\nx\n\nA UTF-16 code unit.\n\nReturn Value\n\ntrue if x is a low-surrogate code unit; otherwise, false.\n\nDiscussion\n\nHere’s an example of checking whether each code unit in a string’s utf16 view is a trailing surrogate. The apple string contains a single emoji character made up of a surrogate pair when encoded in UTF-16.\n\nlet apple = \"🍎\"\nfor unit in apple.utf16 {\n    print(UTF16.isTrailSurrogate(unit))\n}\n// Prints \"false\"\n// Prints \"true\"\n\n\nThis method does not validate the encoding of a UTF-16 sequence beyond the specified code unit. Specifically, it does not validate that a high-surrogate code unit precedes x."
  },
  {
    "title": "leadSurrogate(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/leadsurrogate(_:)",
    "html": "Parameters\nx\n\nA Unicode scalar value. x must be represented by a surrogate pair when encoded in UTF-16. To check whether x is represented by a surrogate pair, use UTF16.width(x) == 2.\n\nReturn Value\n\nThe leading surrogate code unit of x when encoded in UTF-16.\n\nDiscussion\n\nBecause a Unicode scalar value can require up to 21 bits to store its value, some Unicode scalars are represented in UTF-16 by a pair of 16-bit code units. The first and second code units of the pair, designated leading and trailing surrogates, make up a surrogate pair.\n\nlet apple: Unicode.Scalar = \"🍎\"\nprint(UTF16.leadSurrogate(apple))\n// Prints \"55356\"\n"
  },
  {
    "title": "trailSurrogate(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/trailsurrogate(_:)",
    "html": "Parameters\nx\n\nA Unicode scalar value. x must be represented by a surrogate pair when encoded in UTF-16. To check whether x is represented by a surrogate pair, use UTF16.width(x) == 2.\n\nReturn Value\n\nThe trailing surrogate code unit of x when encoded in UTF-16.\n\nDiscussion\n\nBecause a Unicode scalar value can require up to 21 bits to store its value, some Unicode scalars are represented in UTF-16 by a pair of 16-bit code units. The first and second code units of the pair, designated leading and trailing surrogates, make up a surrogate pair.\n\nlet apple: Unicode.Scalar = \"🍎\"\nprint(UTF16.trailSurrogate(apple))\n// Prints \"57166\"\n"
  },
  {
    "title": "transcodedLength(of:decodedAs:repairingIllFormedSequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/transcodedlength(of:decodedas:repairingillformedsequences:)",
    "html": "Parameters\ninput\n\nAn iterator of code units to be translated, encoded as sourceEncoding. If repairingIllFormedSequences is true, the entire iterator will be exhausted. Otherwise, iteration will stop if an ill-formed sequence is detected.\n\nsourceEncoding\n\nThe Unicode encoding of input.\n\nrepairingIllFormedSequences\n\nPass true to measure the length of input even when input contains ill-formed sequences. Each ill-formed sequence is replaced with a Unicode replacement character (\"\\u{FFFD}\") and is measured as such. Pass false to immediately stop measuring input when an ill-formed sequence is encountered.\n\nReturn Value\n\nA tuple containing the number of UTF-16 code units required to encode input and a Boolean value that indicates whether the input contained only ASCII characters. If repairingIllFormedSequences is false and an ill-formed sequence is detected, this method returns nil.\n\nDiscussion\n\nThe following example finds the length of the UTF-16 encoding of the string \"Fermata 𝄐\", starting with its UTF-8 representation.\n\nlet fermata = \"Fermata 𝄐\"\nlet bytes = fermata.utf8\nprint(Array(bytes))\n// Prints \"[70, 101, 114, 109, 97, 116, 97, 32, 240, 157, 132, 144]\"\n\n\nlet result = UTF16.transcodedLength(of: bytes.makeIterator(),\n                                    decodedAs: UTF8.self,\n                                    repairingIllFormedSequences: false)\nprint(result)\n// Prints \"Optional((count: 10, isASCII: false))\"\n"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/contains(_:)",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nFinding Elements\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "_UnicodeEncoding Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/_unicodeencoding-implementations",
    "html": "Topics\nStructures\nstruct ForwardParser\nA type that can be used to parse CodeUnits into EncodedScalars.\nstruct ReverseParser\nA type that can be used to parse a reversed sequence of CodeUnits into EncodedScalars.\nType Aliases\ntypealias CodeUnit\nThe basic unit of encoding\ntypealias EncodedScalar\nA valid scalar value as represented in this encoding\nType Properties\nstatic var encodedReplacementCharacter: Unicode.UTF16.EncodedScalar\nA unicode scalar value to be used when repairing encoding/decoding errors, as represented in this encoding.\nType Methods\nstatic func decode(Unicode.UTF16.EncodedScalar) -> Unicode.Scalar\nConverts from encoded to encoding-independent representation\nstatic func encode(Unicode.Scalar) -> Unicode.UTF16.EncodedScalar?\nConverts from encoding-independent to encoded representation, returning nil if the scalar can’t be represented in this encoding.\nstatic func transcode<FromEncoding>(FromEncoding.EncodedScalar, from: FromEncoding.Type) -> Unicode.UTF16.EncodedScalar?\nConverts a scalar from another encoding’s representation, returning nil if the scalar can’t be represented in this encoding.\nstatic func transcode<FromEncoding>(FromEncoding.EncodedScalar, from: FromEncoding.Type) -> Self.EncodedScalar?\nConverts a scalar from another encoding’s representation, returning nil if the scalar can’t be represented in this encoding."
  },
  {
    "title": "width(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/width(_:)",
    "html": "Parameters\nx\n\nA Unicode scalar value.\n\nReturn Value\n\nThe width of x when encoded in UTF-16, either 1 or 2.\n\nDiscussion\n\nBecause a Unicode scalar value can require up to 21 bits to store its value, some Unicode scalars are represented in UTF-16 by a pair of 16-bit code units. The first and second code units of the pair, designated leading and trailing surrogates, make up a surrogate pair.\n\nlet anA: Unicode.Scalar = \"A\"\nprint(anA.value)\n// Prints \"65\"\nprint(UTF16.width(anA))\n// Prints \"1\"\n\n\nlet anApple: Unicode.Scalar = \"🍎\"\nprint(anApple.value)\n// Prints \"127822\"\nprint(UTF16.width(anApple))\n// Prints \"2\"\n"
  },
  {
    "title": "UnicodeCodec Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf16/unicodecodec-implementations",
    "html": "Topics\nInitializers\ninit()\nCreates an instance of the UTF-16 codec.\nInstance Methods\nfunc decode<I>(inout I) -> UnicodeDecodingResult\nStarts or continues decoding a UTF-16 sequence.\nType Methods\nstatic func encode(Unicode.Scalar, into: (Unicode.UTF16.CodeUnit) -> Void)\nEncodes a Unicode scalar as a series of code units by calling the given closure on each code unit."
  },
  {
    "title": "SIMDScalar Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/simdscalar-implementations",
    "html": "Topics\nStructures\nstruct SIMD16Storage\nStorage for a vector of 16 integers.\nstruct SIMD2Storage\nStorage for a vector of two integers.\nstruct SIMD32Storage\nStorage for a vector of 32 integers.\nstruct SIMD4Storage\nStorage for a vector of four integers.\nstruct SIMD64Storage\nStorage for a vector of 64 integers.\nstruct SIMD8Storage\nStorage for a vector of eight integers.\nType Aliases\ntypealias SIMDMaskScalar"
  },
  {
    "title": "SignedInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/signedinteger-implementations",
    "html": "Topics\nOperators\nstatic func &+ (Self, Self) -> Self\nAvailable when Self conforms to FixedWidthInteger.\nDeprecated\nstatic func &- (Self, Self) -> Self\nAvailable when Self conforms to FixedWidthInteger.\nDeprecated\nInitializers\ninit<T>(T)\nCreates a new instance from the given integer.\nAvailable when Self conforms to FixedWidthInteger.\ninit?<T>(exactly: T)\nCreates a new instance from the given integer, if it can be represented exactly.\nAvailable when Self conforms to FixedWidthInteger.\nType Properties\nstatic var isSigned: Bool\nA Boolean value indicating whether this type is a signed integer type.\nstatic var max: Self\nThe maximum representable integer in this type.\nAvailable when Self conforms to FixedWidthInteger.\nstatic var min: Self\nThe minimum representable integer in this type.\nAvailable when Self conforms to FixedWidthInteger."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "MLIdentifier Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/mlidentifier-implementations",
    "html": "Topics\nInstance Properties\nvar identifierValue: MLDataValue\nThe value of the unique identifier wrapped in a data value."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "RandomNumberGenerator Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/systemrandomnumbergenerator/randomnumbergenerator-implementations",
    "html": "Topics\nInstance Methods\nfunc next<T>() -> T\nReturns a value from a uniform, independent distribution of binary data.\nfunc next() -> UInt64\nReturns a value from a uniform, independent distribution of binary data.\nDeprecated\nfunc next<T>(upperBound: T) -> T\nReturns a random value that is less than the given upper bound."
  },
  {
    "title": "next(upperBound:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/systemrandomnumbergenerator/next(upperbound:)",
    "html": "Parameters\nupperBound\n\nThe upper bound for the randomly generated value. Must be non-zero.\n\nReturn Value\n\nA random value of T in the range 0..<upperBound. Every value in the range 0..<upperBound is equally likely to be returned.\n\nDiscussion\n\nUse this method when you need random binary data to generate another value. If you need an integer value within a specific range, use the static random(in:using:) method on that integer type instead of this method.\n\nSee Also\nGenerating Random Binary Data\nfunc next() -> UInt64\nReturns a value from a uniform, independent distribution of binary data.\nfunc next<T>() -> T\nReturns a value from a uniform, independent distribution of binary data."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/systemrandomnumbergenerator/next()-2x0ly",
    "html": "Return Value\n\nA random value of T. Bits are randomly distributed so that every value of T is equally likely to be returned.\n\nDiscussion\n\nUse this method when you need random binary data to generate another value. If you need an integer value within a specific range, use the static random(in:using:) method on that integer type instead of this method.\n\nSee Also\nGenerating Random Binary Data\nfunc next() -> UInt64\nReturns a value from a uniform, independent distribution of binary data.\nfunc next<T>(upperBound: T) -> T\nReturns a random value that is less than the given upper bound."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "SignedNumeric Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/signednumeric-implementations",
    "html": "Topics\nOperators\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nInstance Methods\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "Strideable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/strideable-implementations",
    "html": "Topics\nInstance Methods\nfunc advanced(by: Int) -> Int\nReturns a value that is offset the specified distance from this value.\nfunc distance(to: Int) -> Int\nReturns the distance from this value to the given value, expressed as a stride."
  },
  {
    "title": "_IntentValue Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/_intentvalue-implementations",
    "html": "Topics\nType Aliases\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nType Properties\nstatic var defaultResolverSpecification: some ResolverSpecification"
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingdiscardingtaskgroup/isempty",
    "html": "Return Value\n\ntrue if the group has no pending tasks; otherwise false.\n\nDiscussion\n\nAt the start of the body of a withThrowingDiscardingTaskGroup(returning:body:) call, the task group is always empty.\n\nIt’s guaranteed to be empty when returning from that body because a task group waits for all child tasks to complete before returning."
  },
  {
    "title": "isCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingdiscardingtaskgroup/iscancelled",
    "html": "Discussion\n\nTo cancel a group, call the ThrowingDiscardingTaskGroup.cancelAll() method.\n\nIf the task that’s currently running this group is canceled, the group is also implicitly canceled, which is also reflected in this property’s value."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "_IntentValue Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/_intentvalue-implementations",
    "html": "Topics\nType Aliases\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nType Properties\nstatic var defaultResolverSpecification: some ResolverSpecification"
  },
  {
    "title": "rounded(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/rounded(_:)",
    "html": "Parameters\nrule\n\nThe rounding rule to use.\n\nReturn Value\n\nThe integral value found by rounding using rule.\n\nDiscussion\n\nThe following example rounds a value using four different rounding rules:\n\nlet x = 6.5\n\n\n// Equivalent to the C 'round' function:\nprint(x.rounded(.toNearestOrAwayFromZero))\n// Prints \"7.0\"\n\n\n// Equivalent to the C 'trunc' function:\nprint(x.rounded(.towardZero))\n// Prints \"6.0\"\n\n\n// Equivalent to the C 'ceil' function:\nprint(x.rounded(.up))\n// Prints \"7.0\"\n\n\n// Equivalent to the C 'floor' function:\nprint(x.rounded(.down))\n// Prints \"6.0\"\n\n\nFor more information about the available rounding rules, see the FloatingPointRoundingRule enumeration. To round a value using the default “schoolbook rounding”, you can use the shorter rounded() method instead.\n\nprint(x.rounded())\n// Prints \"7.0\"\n\nSee Also\nRounding Values\nfunc rounded() -> Self\nfunc round()\nfunc round(FloatingPointRoundingRule)\nRounds the value to an integral value using the specified rounding rule."
  },
  {
    "title": "negate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/negate()-43dca",
    "html": "Discussion\n\nThe result is always exact. This example uses the negate() method to negate the value of the variable x:\n\nvar x = 21.5\nx.negate()\n// x == -21.5\n\nSee Also\nPerforming Calculations\nFloating-Point Operators for Double\nPerform arithmetic and bitwise operations or compare values.\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding.\nfunc addProduct(Double, Double)\nAdds the product of the two given values to this value in place, computed without intermediate rounding.\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value.\nfunc formSquareRoot()\nReplaces this value with its square root, rounded to a representable value.\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value.\nfunc formRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value.\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division.\nfunc formTruncatingRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value using truncating division."
  },
  {
    "title": "squareRoot() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/squareroot()",
    "html": "Return Value\n\nThe square root of the value.\n\nDiscussion\n\nThe following example declares a function that calculates the length of the hypotenuse of a right triangle given its two perpendicular sides.\n\nfunc hypotenuse(_ a: Double, _ b: Double) -> Double {\n    return (a * a + b * b).squareRoot()\n}\n\n\nlet (dx, dy) = (3.0, 4.0)\nlet distance = hypotenuse(dx, dy)\n// distance == 5.0\n\nSee Also\nPerforming Calculations\nFloating-Point Operators for Double\nPerform arithmetic and bitwise operations or compare values.\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding.\nfunc addProduct(Double, Double)\nAdds the product of the two given values to this value in place, computed without intermediate rounding.\nfunc formSquareRoot()\nReplaces this value with its square root, rounded to a representable value.\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value.\nfunc formRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value.\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division.\nfunc formTruncatingRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value using truncating division.\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "formTruncatingRemainder(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/formtruncatingremainder(dividingby:)",
    "html": "Parameters\nother\n\nThe value to use when dividing this value.\n\nDiscussion\n\nPerforming truncating division with floating-point values results in a truncated integer quotient and a remainder. For values x and y and their truncated integer quotient q, the remainder r satisfies x == y * q + r.\n\nThe following example calculates the truncating remainder of dividing 8.625 by 0.75:\n\nvar x = 8.625\nprint(x / 0.75)\n// Prints \"11.5\"\n\n\nlet q = (x / 0.75).rounded(.towardZero)\n// q == 11.0\nx.formTruncatingRemainder(dividingBy: 0.75)\n// x == 0.375\n\n\nlet x1 = 0.75 * q + x\n// x1 == 8.625\n\n\nIf this value and other are both finite numbers, the truncating remainder has the same sign as this value and is strictly smaller in magnitude than other. The formTruncatingRemainder(dividingBy:) method is always exact.\n\nSee Also\nPerforming Calculations\nFloating-Point Operators for Double\nPerform arithmetic and bitwise operations or compare values.\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding.\nfunc addProduct(Double, Double)\nAdds the product of the two given values to this value in place, computed without intermediate rounding.\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value.\nfunc formSquareRoot()\nReplaces this value with its square root, rounded to a representable value.\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value.\nfunc formRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value.\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division.\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "rounded() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/rounded()",
    "html": "See Also\nRounding Values\nfunc rounded(FloatingPointRoundingRule) -> Self\nReturns this value rounded to an integral value using the specified rounding rule.\nfunc round()\nfunc round(FloatingPointRoundingRule)\nRounds the value to an integral value using the specified rounding rule."
  },
  {
    "title": "remainder(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/remainder(dividingby:)",
    "html": "Parameters\nother\n\nThe value to use when dividing this value.\n\nReturn Value\n\nThe remainder of this value divided by other.\n\nDiscussion\n\nFor two finite values x and y, the remainder r of dividing x by y satisfies x == y * q + r, where q is the integer nearest to x / y. If x / y is exactly halfway between two integers, q is chosen to be even. Note that q is not x / y computed in floating-point arithmetic, and that q may not be representable in any available integer type.\n\nThe following example calculates the remainder of dividing 8.625 by 0.75:\n\nlet x = 8.625\nprint(x / 0.75)\n// Prints \"11.5\"\n\n\nlet q = (x / 0.75).rounded(.toNearestOrEven)\n// q == 12.0\nlet r = x.remainder(dividingBy: 0.75)\n// r == -0.375\n\n\nlet x1 = 0.75 * q + r\n// x1 == 8.625\n\n\nIf this value and other are finite numbers, the remainder is in the closed range -abs(other / 2)...abs(other / 2). The remainder(dividingBy:) method is always exact. This method implements the remainder operation defined by the IEEE 754 specification.\n\nSee Also\nPerforming Calculations\nFloating-Point Operators for Double\nPerform arithmetic and bitwise operations or compare values.\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding.\nfunc addProduct(Double, Double)\nAdds the product of the two given values to this value in place, computed without intermediate rounding.\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value.\nfunc formSquareRoot()\nReplaces this value with its square root, rounded to a representable value.\nfunc formRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value.\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division.\nfunc formTruncatingRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value using truncating division.\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "truncatingRemainder(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/truncatingremainder(dividingby:)",
    "html": "Parameters\nother\n\nThe value to use when dividing this value.\n\nReturn Value\n\nThe remainder of this value divided by other using truncating division.\n\nDiscussion\n\nPerforming truncating division with floating-point values results in a truncated integer quotient and a remainder. For values x and y and their truncated integer quotient q, the remainder r satisfies x == y * q + r.\n\nThe following example calculates the truncating remainder of dividing 8.625 by 0.75:\n\nlet x = 8.625\nprint(x / 0.75)\n// Prints \"11.5\"\n\n\nlet q = (x / 0.75).rounded(.towardZero)\n// q == 11.0\nlet r = x.truncatingRemainder(dividingBy: 0.75)\n// r == 0.375\n\n\nlet x1 = 0.75 * q + r\n// x1 == 8.625\n\n\nIf this value and other are both finite numbers, the truncating remainder has the same sign as this value and is strictly smaller in magnitude than other. The truncatingRemainder(dividingBy:) method is always exact.\n\nSee Also\nPerforming Calculations\nFloating-Point Operators for Double\nPerform arithmetic and bitwise operations or compare values.\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding.\nfunc addProduct(Double, Double)\nAdds the product of the two given values to this value in place, computed without intermediate rounding.\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value.\nfunc formSquareRoot()\nReplaces this value with its square root, rounded to a representable value.\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value.\nfunc formRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value.\nfunc formTruncatingRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value using truncating division.\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "formRemainder(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/formremainder(dividingby:)",
    "html": "Parameters\nother\n\nThe value to use when dividing this value.\n\nDiscussion\n\nFor two finite values x and y, the remainder r of dividing x by y satisfies x == y * q + r, where q is the integer nearest to x / y. If x / y is exactly halfway between two integers, q is chosen to be even. Note that q is not x / y computed in floating-point arithmetic, and that q may not be representable in any available integer type.\n\nThe following example calculates the remainder of dividing 8.625 by 0.75:\n\nvar x = 8.625\nprint(x / 0.75)\n// Prints \"11.5\"\n\n\nlet q = (x / 0.75).rounded(.toNearestOrEven)\n// q == 12.0\nx.formRemainder(dividingBy: 0.75)\n// x == -0.375\n\n\nlet x1 = 0.75 * q + x\n// x1 == 8.625\n\n\nIf this value and other are finite numbers, the remainder is in the closed range -abs(other / 2)...abs(other / 2). The formRemainder(dividingBy:) method is always exact.\n\nSee Also\nPerforming Calculations\nFloating-Point Operators for Double\nPerform arithmetic and bitwise operations or compare values.\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding.\nfunc addProduct(Double, Double)\nAdds the product of the two given values to this value in place, computed without intermediate rounding.\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value.\nfunc formSquareRoot()\nReplaces this value with its square root, rounded to a representable value.\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value.\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division.\nfunc formTruncatingRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value using truncating division.\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "round() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/round()",
    "html": "See Also\nRounding Values\nfunc rounded() -> Self\nfunc rounded(FloatingPointRoundingRule) -> Self\nReturns this value rounded to an integral value using the specified rounding rule.\nfunc round(FloatingPointRoundingRule)\nRounds the value to an integral value using the specified rounding rule."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "_UnicodeParser Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/ascii/parser/_unicodeparser-implementations",
    "html": "Topics\nInstance Methods\nfunc parseScalar<I>(from: inout I) -> Unicode.ParseResult<Unicode.ASCII.Parser.Encoding.EncodedScalar>\nParses a single Unicode scalar value from input.\nType Aliases\ntypealias Encoding\nThe encoding with which this parser is associated"
  },
  {
    "title": "AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/asynciterator",
    "html": "Required\n\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> Self.AsyncIterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\n\nRequired\n\nprotocol AsyncIteratorProtocol\nA type that asynchronously supplies the values of a sequence one at a time.\nassociatedtype Element\nThe type of element produced by this asynchronous sequence.\n\nRequired"
  },
  {
    "title": "Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/element",
    "html": "Required\n\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> Self.AsyncIterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\n\nRequired\n\nassociatedtype AsyncIterator : AsyncIteratorProtocol\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\n\nRequired\n\nprotocol AsyncIteratorProtocol\nA type that asynchronously supplies the values of a sequence one at a time."
  },
  {
    "title": "_UnicodeParser Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf32/parser/_unicodeparser-implementations",
    "html": "Topics\nInstance Methods\nfunc parseScalar<I>(from: inout I) -> Unicode.ParseResult<Unicode.UTF32.Parser.Encoding.EncodedScalar>\nParses a single Unicode scalar value from input.\nType Aliases\ntypealias Encoding\nThe encoding with which this parser is associated"
  },
  {
    "title": "playgroundDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/customplaygrounddisplayconvertible/playgrounddescription",
    "html": "Required"
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/map(_:)-6yah1",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n"
  },
  {
    "title": "formIndex(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/formindex(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": "firstIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/firstindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe first index where element is found. If element is not found in the collection, returns nil.\n\nDiscussion\n\nAfter using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\"]\nif let i = students.firstIndex(of: \"Maxime\") {\n    students[i] = \"Max\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "String.UnicodeScalarView.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/subscript(_:)-4i2sy",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2...]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/iterator/next()",
    "html": "Return Value\n\nThe next element in the underlying sequence, if a next element exists; otherwise, nil.\n\nDiscussion\n\nRepeatedly calling this method returns, in order, all the elements of the underlying sequence. As soon as the sequence has run out of elements, all subsequent calls return nil.\n\nYou must not call this method if any other copy of this iterator has been advanced with a call to its next() method.\n\nThe following example shows how an iterator can be used explicitly to emulate a for-in loop. First, retrieve a sequence’s iterator, and then call the iterator’s next() method until it returns nil.\n\nlet numbers = [2, 3, 5, 7]\nvar numbersIterator = numbers.makeIterator()\n\n\nwhile let num = numbersIterator.next() {\n    print(num)\n}\n// Prints \"2\"\n// Prints \"3\"\n// Prints \"5\"\n// Prints \"7\"\n"
  },
  {
    "title": "String.UnicodeScalarView.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "cancelAll() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingdiscardingtaskgroup/cancelall()",
    "html": "Discussion\n\nIf you add a task to a group after canceling the group, that task is canceled immediately after being added to the group.\n\nImmediately cancelled child tasks should therefore cooperatively check for and react to cancellation, e.g. by throwing an CancellationError at their earliest convenience, or otherwise handling the cancellation.\n\nThere are no restrictions on where you can call this method. Code inside a child task or even another task can cancel a group, however one should be very careful to not keep a reference to the group longer than the with...TaskGroup(...) { ... } method body is executing.\n\nSee Also\n\nTask.isCancelled\n\nSee Also\n\nThrowingDiscardingTaskGroup.isCancelled"
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/partialrangefrom/iterator/next()",
    "html": "Return Value\n\nThe next element in the underlying sequence, if a next element exists; otherwise, nil.\n\nDiscussion\n\nOnce nil has been returned, all subsequent calls return nil."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/split(separator:maxsplits:omittingemptysubsequences:)",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.\n\nisSeparator\n\nA closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "suffix(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/suffix(from:)",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting at the beginning of this collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection."
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/formindex(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "firstIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/firstindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.firstIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Abena starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "formIndex(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/formindex(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/isempty",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/underestimatedcount",
    "html": "Discussion\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "init(codingPath:debugDescription:underlyingError:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/decodingerror/context/init(codingpath:debugdescription:underlyingerror:)",
    "html": "Parameters\ncodingPath\n\nThe path of coding keys taken to get to the point of the failing decode call.\n\ndebugDescription\n\nA description of what went wrong, for debugging purposes.\n\nunderlyingError\n\nThe underlying error which caused this error, if any."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "assertIsolated(_:file:line:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/serialexecutor/assertisolated(_:file:line:)",
    "html": "Discussion\n\nIn playgrounds and -Onone builds (the default for Xcode’s Debug configuration): If condition evaluates to false, stop program execution in a debuggable state after printing message.\n\nIn -O builds (the default for Xcode’s Release configuration), condition is not evaluated, and there are no effects.\n\nIn -Ounchecked builds, condition is not evaluated, but the optimizer may assume that it always evaluates to true. Failure to satisfy that assumption is a serious programming error."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stridetoiterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Element conforms to Strideable."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/flatmap(_:)-i3m8",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/iterator/next()",
    "html": "Return Value\n\nThe next element in the underlying sequence, if a next element exists; otherwise, nil.\n\nDiscussion\n\nRepeatedly calling this method returns, in order, all the elements of the underlying sequence. As soon as the sequence has run out of elements, all subsequent calls return nil.\n\nYou must not call this method if any other copy of this iterator has been advanced with a call to its next() method.\n\nThe following example shows how an iterator can be used explicitly to emulate a for-in loop. First, retrieve a sequence’s iterator, and then call the iterator’s next() method until it returns nil.\n\nlet numbers = [2, 3, 5, 7]\nvar numbersIterator = numbers.makeIterator()\n\n\nwhile let num = numbersIterator.next() {\n    print(num)\n}\n// Prints \"2\"\n// Prints \"3\"\n// Prints \"5\"\n// Prints \"7\"\n"
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stridethroughiterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Element conforms to Strideable."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Element conforms to Hashable."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "randomElement(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/randomelement(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when choosing a random element.\n\nReturn Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement(using: &myGenerator)!\n// randomName == \"Amani\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "randomElement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/randomelement()",
    "html": "Return Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement()!\n// randomName == \"Amani\"\n\n\nThis method is equivalent to calling randomElement(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "prefix(upTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/prefix(upto:)",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(through:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/prefix(through:)",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "first | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/first",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let firstNumber = numbers.first {\n    print(firstNumber)\n}\n// Prints \"10\"\n"
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unfoldsequence/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "shuffled(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/shuffled(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity\n\nO(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unfoldsequence/next()",
    "html": "Return Value\n\nThe next element in the underlying sequence, if a next element exists; otherwise, nil.\n\nDiscussion\n\nRepeatedly calling this method returns, in order, all the elements of the underlying sequence. As soon as the sequence has run out of elements, all subsequent calls return nil.\n\nYou must not call this method if any other copy of this iterator has been advanced with a call to its next() method.\n\nThe following example shows how an iterator can be used explicitly to emulate a for-in loop. First, retrieve a sequence’s iterator, and then call the iterator’s next() method until it returns nil.\n\nlet numbers = [2, 3, 5, 7]\nvar numbersIterator = numbers.makeIterator()\n\n\nwhile let num = numbersIterator.next() {\n    print(num)\n}\n// Prints \"2\"\n// Prints \"3\"\n// Prints \"5\"\n// Prints \"7\"\n"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "preconditionIsolated(_:file:line:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/serialexecutor/preconditionisolated(_:file:line:)",
    "html": "Discussion\n\nThis function’s effect varies depending on the build flag used:\n\nIn playgrounds and -Onone builds (the default for Xcode’s Debug configuration), stops program execution in a debuggable state after printing message.\n\nIn -O builds (the default for Xcode’s Release configuration), stops program execution.\n\nIn -Ounchecked builds, the optimizer may assume that this function is never called. Failure to satisfy that assumption is a serious programming error."
  },
  {
    "title": "enqueue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/serialexecutor/enqueue(_:)-7sypu",
    "html": "Required"
  },
  {
    "title": "asUnownedSerialExecutor() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/serialexecutor/asunownedserialexecutor()-6drzh",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nSerialExecutor Implementations\nfunc asUnownedSerialExecutor() -> UnownedSerialExecutor\nConvert this executor value to the optimized form of borrowed executor references."
  },
  {
    "title": "isSameExclusiveExecutionContext(other:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/serialexecutor/issameexclusiveexecutioncontext(other:)-3ptya",
    "html": "Required Default implementation provided.\n\nParameters\nother\n\nthe executor to compare with.\n\nReturn Value\n\ntrue, if self and the other executor actually are mutually exclusive and it is safe–from a concurrency perspective–to execute code assuming one on the other.\n\nDiscussion\n\nThis method must be implemented with great care, as wrongly returning true would allow code from a different execution context (e.g. thread) to execute code which was intended to be isolated by another actor.\n\nThis check is not used when performing executor switching.\n\nThis check is used when performing Actor/assertIsolated(), Actor/preconditionIsolated(), Actor/assumeIsolated() and similar APIs which assert about the same “exclusive serial execution context”.\n\nDefault Implementations\nSerialExecutor Implementations\nfunc isSameExclusiveExecutionContext(other: Self) -> Bool\nIf this executor has complex equality semantics, and the runtime needs to compare two executors, it will first attempt the usual pointer-based equality check, and if it fails it will compare the types of both executors, if they are the same, it will finally invoke this method, in an attempt to let the executor itself decide if this and the other executor represent the same serial, exclusive, isolation context."
  },
  {
    "title": "UnfoldSequence.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unfoldsequence/iterator",
    "html": "See Also\nType Aliases\ntypealias UnfoldFirstSequence\nThe return type of sequence(first:next:)."
  },
  {
    "title": "enqueue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/serialexecutor/enqueue(_:)-229km",
    "html": "Required\n\nDeprecated\n\nImplement 'enqueue(_: __owned ExecutorJob)' instead"
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/contains(_:)",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/joined(separator:)-1ckny",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/joined(separator:)-7ubg0",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "lexicographicallyPrecedes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/joined()",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/iterator/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nA mirror that reflects the iterator.\nAvailable when Element conforms to Hashable."
  },
  {
    "title": "_UTFParser Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/forwardparser/_utfparser-implementations",
    "html": "Topics\nInstance Methods\nfunc parseScalar<I>(from: inout I) -> Unicode.ParseResult<Self.Encoding.EncodedScalar>\nAvailable when Encoding.EncodedScalar conforms to RangeReplaceableCollection."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "shuffled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/shuffled()",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "sorted() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/sorted()",
    "html": "Return Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nYou can sort any sequence of elements that conform to the Comparable protocol by calling this method. Elements are sorted in ascending order.\n\nHere’s an example of sorting a list of students’ names. Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (<).\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet sortedStudents = students.sorted()\nprint(sortedStudents)\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nTo sort the elements of your sequence in descending order, pass the greater-than operator (>) to the sorted(by:) method.\n\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements that compare as equal.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/split(separator:maxsplits:omittingemptysubsequences:)-9bdw7",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \")\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "shuffled(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/shuffled(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity\n\nO(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "_UnicodeEncoding Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/_unicodeencoding-implementations",
    "html": "Topics\nStructures\nstruct ForwardParser\nA type that can be used to parse CodeUnits into EncodedScalars.\nstruct ReverseParser\nA type that can be used to parse a reversed sequence of CodeUnits into EncodedScalars.\nType Aliases\ntypealias CodeUnit\nThe basic unit of encoding\ntypealias EncodedScalar\nA valid scalar value as represented in this encoding\nType Properties\nstatic var encodedReplacementCharacter: Unicode.UTF8.EncodedScalar\nA unicode scalar value to be used when repairing encoding/decoding errors, as represented in this encoding.\nType Methods\nstatic func decode(Unicode.UTF8.EncodedScalar) -> Unicode.Scalar\nConverts from encoded to encoding-independent representation\nstatic func encode(Unicode.Scalar) -> Unicode.UTF8.EncodedScalar?\nConverts from encoding-independent to encoded representation, returning nil if the scalar can’t be represented in this encoding.\nstatic func transcode<FromEncoding>(FromEncoding.EncodedScalar, from: FromEncoding.Type) -> Self.EncodedScalar?\nConverts a scalar from another encoding’s representation, returning nil if the scalar can’t be represented in this encoding.\nstatic func transcode<FromEncoding>(FromEncoding.EncodedScalar, from: FromEncoding.Type) -> Unicode.UTF8.EncodedScalar?\nConverts a scalar from another encoding’s representation, returning nil if the scalar can’t be represented in this encoding."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/flatmap(_:)-8h6h8",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "sorted(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/sorted(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the sequence satisfying the isSeparator predicate. If true, only nonempty subsequences are returned. The default value is true.\n\nisSeparator\n\nA closure that returns true if its argument should be used to split the sequence; otherwise, false.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" })\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(\n   line.split(maxSplits: 1, whereSeparator: { $0 == \" \" })\n                  .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes true for the allowEmptySlices parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(\n    line.split(\n        omittingEmptySubsequences: false,\n        whereSeparator: { $0 == \" \" }\n    ).map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "starts(with:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/starts(with:by:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/suffix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. The value of maxLength must be greater than or equal to zero.\n\nDiscussion\n\nThe sequence must be finite. If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/dictionary/iterator/next()",
    "html": "Discussion\n\nOnce nil has been returned, all subsequent calls return nil."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Element?\nAdvances to the next element and returns it, or nil if no next element exists."
  },
  {
    "title": "enqueue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/serialexecutor/enqueue(_:)-2xi5n",
    "html": "Required\n\nDeprecated\n\nImplement 'enqueue(_: __owned ExecutorJob)' instead"
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/map(_:)-9dpwo",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the smallest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet lowestHeight = heights.min()\nprint(lowestHeight)\n// Prints \"Optional(58.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "makeIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/makeiterator()",
    "html": "Return Value\n\nAn iterator over the elements of this buffer."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the largest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet greatestHeight = heights.max()\nprint(greatestHeight)\n// Prints \"Optional(67.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "_UnicodeEncoding Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/ascii/_unicodeencoding-implementations",
    "html": "Topics\nType Aliases\ntypealias CodeUnit\nThe basic unit of encoding\ntypealias EncodedScalar\nA valid scalar value as represented in this encoding\ntypealias ForwardParser\nA type that can be used to parse CodeUnits into EncodedScalars.\ntypealias ReverseParser\nA type that can be used to parse a reversed sequence of CodeUnits into EncodedScalars.\nType Properties\nstatic var encodedReplacementCharacter: Unicode.ASCII.EncodedScalar\nA unicode scalar value to be used when repairing encoding/decoding errors, as represented in this encoding.\nType Methods\nstatic func decode(Unicode.ASCII.EncodedScalar) -> Unicode.Scalar\nConverts from encoded to encoding-independent representation\nstatic func encode(Unicode.Scalar) -> Unicode.ASCII.EncodedScalar?\nConverts from encoding-independent to encoded representation, returning nil if the scalar can’t be represented in this encoding.\nstatic func transcode<FromEncoding>(FromEncoding.EncodedScalar, from: FromEncoding.Type) -> Self.EncodedScalar?\nConverts a scalar from another encoding’s representation, returning nil if the scalar can’t be represented in this encoding.\nstatic func transcode<FromEncoding>(FromEncoding.EncodedScalar, from: FromEncoding.Type) -> Unicode.ASCII.EncodedScalar?\nConverts a scalar from another encoding’s representation, returning nil if the scalar can’t be represented in this encoding."
  },
  {
    "title": "UnboundedRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unboundedrange",
    "html": "See Also\nCreating an Unbounded Range\nstatic func ... (UnboundedRange_)\nCreates an unbounded range expression."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingfiltersequence/iterator/next()",
    "html": "Discussion\n\nThis iterator calls next() on its base iterator; if this call returns nil, next() returns nil. Otherwise, next() evaluates the result with the predicate closure. If the closure returns true, next() returns the received element; otherwise it awaits the next element from the base iterator. If calling the closure throws an error, the sequence ends and next() rethrows the error."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/utf8view/randomaccesscollection-implementations",
    "html": "Topics\nInstance Properties\nvar endIndex: Int\nThe “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar startIndex: Int\nThe position of the first code unit.\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nSubscripts\nsubscript(Int) -> UTF8.CodeUnit\nAccesses the code unit at the specified position."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "_UnicodeParser Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/forwardparser/_unicodeparser-implementations",
    "html": "Topics\nType Aliases\ntypealias Encoding\nThe encoding with which this parser is associated"
  },
  {
    "title": "width(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/width(_:)",
    "html": "Parameters\nx\n\nA Unicode scalar value.\n\nReturn Value\n\nThe width of x when encoded in UTF-8, from 1 to 4.\n\nDiscussion\n\nBecause a Unicode scalar value can require up to 21 bits to store its value, some Unicode scalars are represented in UTF-8 by a sequence of up to 4 code units. The first code unit is designated a lead byte and the rest are continuation bytes.\n\nlet anA: Unicode.Scalar = \"A\"\nprint(anA.value)\n// Prints \"65\"\nprint(UTF8.width(anA))\n// Prints \"1\"\n\n\nlet anApple: Unicode.Scalar = \"🍎\"\nprint(anApple.value)\n// Prints \"127822\"\nprint(UTF8.width(anApple))\n// Prints \"4\"\n"
  },
  {
    "title": "isContinuation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/iscontinuation(_:)",
    "html": "Parameters\nbyte\n\nA UTF-8 code unit.\n\nReturn Value\n\ntrue if byte is a continuation byte; otherwise, false.\n\nDiscussion\n\nContinuation bytes take the form 0b10xxxxxx. For example, a lowercase “e” with an acute accent above it (\"é\") uses 2 bytes for its UTF-8 representation: 0b11000011 (195) and 0b10101001 (169). The second byte is a continuation byte.\n\nlet eAcute = \"é\"\nfor codeUnit in eAcute.utf8 {\n    print(codeUnit, UTF8.isContinuation(codeUnit))\n}\n// Prints \"195 false\"\n// Prints \"169 true\"\n"
  },
  {
    "title": "_UnicodeParser Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/reverseparser/_unicodeparser-implementations",
    "html": "Topics\nType Aliases\ntypealias Encoding\nThe encoding with which this parser is associated"
  },
  {
    "title": "encodedReplacementCharacter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/encodedreplacementcharacter",
    "html": "Discussion\n\nIf the Unicode replacement character U+FFFD is representable in this encoding, encodedReplacementCharacter encodes that scalar value."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.\n\nReturn Value\n\nA sequence starting after the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nThe following example uses the drop(while:) method to skip over the positive numbers at the beginning of the numbers array. The result begins with the first element of numbers that does not satisfy predicate.\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nlet startingWithNegative = numbers.drop(while: { $0 > 0 })\n// startingWithNegative == [-2, 9, -6, 10, 1]\n\n\nIf predicate matches every element in the sequence, the result is an empty sequence.\n\nComplexity\n\nO(k), where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Zip2Sequence<Sequence1, Sequence2>.Iterator.Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Sequence1 conforms to Sequence and Sequence2 conforms to Sequence.\nType Aliases\ntypealias Element\nThe type of element returned by next().\nAvailable when Sequence1 conforms to Sequence and Sequence2 conforms to Sequence."
  },
  {
    "title": "sorted(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafebufferpointer/sorted(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/underestimatedcount",
    "html": "Discussion\n\nThe default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively.\n\nComplexity\n\nO(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the sequence. k must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/droplast(_:)",
    "html": "Parameters\nn\n\nThe number of elements to drop off the end of the sequence. n must be greater than or equal to zero.\n\nReturn Value\n\nA sequence leaving off the specified number of elements.\n\nDiscussion\n\nThe sequence must be finite. If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. The value of maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting at the beginning of this sequence with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/map(_:)",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.\n\nReturn Value\n\nA sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nThe following example uses the prefix(while:) method to find the positive numbers at the beginning of the numbers array. Every element of numbers up to, but not including, the first negative value is included in the result.\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nlet positivePrefix = numbers.prefix(while: { $0 > 0 })\n// positivePrefix == [3, 7, 4]\n\n\nIf predicate matches every element in the sequence, the resulting sequence contains every element of the sequence.\n\nComplexity\n\nO(k), where k is the length of the result."
  },
  {
    "title": "reversed() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/reversed()",
    "html": "Return Value\n\nAn array containing the elements of this sequence in reverse order.\n\nDiscussion\n\nThe sequence must be finite.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "shuffled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/shuffled()",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingfiltersequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncThrowingFilterSequence<Base>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "transcode(_:from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/transcode(_:from:)-317th",
    "html": "Discussion\n\nA default implementation of this method will be provided automatically for any conforming type that does not implement one."
  },
  {
    "title": "transcode(_:from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/transcode(_:from:)-588ax",
    "html": "Discussion\n\nA default implementation of this method will be provided automatically for any conforming type that does not implement one."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "...(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unboundedrange_/'...(_:)",
    "html": "Discussion\n\nThe unbounded range operator (...) is valid only within a collection’s subscript.\n\nSee Also\nCreating an Unbounded Range\ntypealias UnboundedRange\nThe type of an unbounded range operator."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/utf8view/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "UnicodeCodec Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/unicodecodec-implementations",
    "html": "Topics\nInitializers\ninit()\nCreates an instance of the UTF-8 codec.\nInstance Methods\nfunc decode<I>(inout I) -> UnicodeDecodingResult\nStarts or continues decoding a UTF-8 sequence.\nType Methods\nstatic func encode(Unicode.Scalar, into: (Unicode.UTF8.CodeUnit) -> Void)\nEncodes a Unicode scalar as a series of code units by calling the given closure on each code unit."
  },
  {
    "title": "_UTFParser Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf8/reverseparser/_utfparser-implementations",
    "html": "Topics\nInstance Methods\nfunc parseScalar<I>(from: inout I) -> Unicode.ParseResult<Self.Encoding.EncodedScalar>\nAvailable when Encoding.EncodedScalar conforms to RangeReplaceableCollection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/utf8view/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anybidirectionalcollection/init(_:)-1hwm5",
    "html": "Discussion\n\nIf the underlying collection stored by other does not satisfy BidirectionalCollection, the result is nil.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncdropfirstsequence/iterator/next()",
    "html": "Discussion\n\nUntil reaching the number of elements to drop, this iterator calls next() on its base iterator and discards the result. If the base iterator returns nil, indicating the end of the sequence, this iterator returns nil. After reaching the number of elements to drop, this iterator passes along the result of calling next() on the base iterator."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncflatmapsequence/iterator/next()",
    "html": "Discussion\n\nThis iterator calls next() on its base iterator; if this call returns nil, next() returns nil. Otherwise, next() calls the transforming closure on the received element, takes the resulting asynchronous sequence, and creates an asynchronous iterator from it. next() then consumes values from this iterator until it terminates. At this point, next() is ready to receive the next value from the base sequence."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "argc | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/commandline/argc",
    "html": "See Also\nAccessing Raw Argument Data\nstatic var unsafeArgv: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>\nAccess to the raw argv value from C."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float16/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float16/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anybidirectionalcollection/init(_:)-2kvez",
    "html": "Parameters\nbase\n\nThe collection to wrap.\n\nDiscussion\n\nComplexity\n\nO(1)."
  },
  {
    "title": "yield(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/continuation/yield(_:)",
    "html": "Parameters\nvalue\n\nThe value to yield from the continuation.\n\nReturn Value\n\nA YieldResult that indicates the success or failure of the yield operation.\n\nDiscussion\n\nIf nothing is awaiting the next value, the method attempts to buffer the result’s element.\n\nThis can be called more than once and returns to the caller immediately without blocking for any awaiting consumption from the iteration.\n\nSee Also\nProducing Elements\nfunc yield(with: Result<Element, Failure>) -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally or throw, based on a given result.\nAvailable when Failure conforms to Error.\nfunc yield() -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point.\nAvailable when Failure conforms to Error.\nenum YieldResult\nA type that indicates the result of yielding a value to a client, by way of the continuation."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "randomElement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/randomelement()",
    "html": "Return Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement()!\n// randomName == \"Amani\"\n\n\nThis method is equivalent to calling randomElement(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting at the beginning of this collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/map(_:)-4ohds",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n"
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anybidirectionalcollection/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements.\nvar first: Self.Element?\nThe first element of the collection.\nvar indices: DefaultIndices<Self>\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Indices is DefaultIndices<Self>.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nInstance Methods\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> AnyBidirectionalCollection<Element>.Iterator\nReturns an iterator over the elements of this collection.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc popFirst() -> Self.Element?\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nAvailable when Self is Self.SubSequence.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anybidirectionalcollection/init(_:)-4hewp",
    "html": "Discussion\n\nComplexity\n\nO(1)"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anybidirectionalcollection/init(_:)-61joz",
    "html": "Discussion\n\nComplexity\n\nO(1)"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anybidirectionalcollection/init(_:)-5lybd",
    "html": "Parameters\nbase\n\nThe collection to wrap.\n\nDiscussion\n\nComplexity\n\nO(1)."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "spawnUnlessCancelled(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/spawnunlesscancelled(priority:operation:)",
    "html": "See Also\nDeprecated\nfunc add(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) async -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc async(priority: TaskPriority?, operation: () async throws -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc asyncUnlessCancelled(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc spawn(priority: TaskPriority?, operation: () async throws -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "onTermination | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/continuation/ontermination",
    "html": "Discussion\n\nIf an onTermination callback is set, using task cancellation to terminate iteration of an AsyncThrowingStream results in a call to this callback.\n\nCanceling an active iteration invokes the onTermination callback first, and then resumes by yielding nil or throwing an error from the iterator. This means that you can perform needed cleanup in the cancellation handler. After reaching a terminal state, the AsyncThrowingStream disposes of the callback.\n\nSee Also\nHandling Termination\nenum Termination\nA type that indicates how the stream terminated."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float16/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "randomElement(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/randomelement(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when choosing a random element.\n\nReturn Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement(using: &myGenerator)!\n// randomName == \"Amani\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.\n\nisSeparator\n\nA closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "suffix(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/suffix(from:)",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/split(separator:maxsplits:omittingemptysubsequences:)-1a0oe",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "unsafeArgv | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/commandline/unsafeargv",
    "html": "Discussion\n\nThe value of this property is a nil-terminated C array. Including the trailing nil, there are argc + 1 elements in the array.\n\nNote\n\nAccessing the argument vector through this pointer is unsafe. Where possible, use arguments instead.\n\nSee Also\nAccessing Raw Argument Data\nstatic var argc: Int32\nAccess to the raw argc value from C."
  },
  {
    "title": "prefix(upTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/prefix(upto:)",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(through:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/prefix(through:)",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/formindex(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anybidirectionalcollection/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anybidirectionalcollection/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar endIndex: AnyBidirectionalCollection<Element>.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar last: Self.Element?\nThe last element of the collection.\nvar startIndex: AnyBidirectionalCollection<Element>.Index\nThe position of the first element in a non-empty collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc distance(from: AnyBidirectionalCollection<Element>.Index, to: AnyBidirectionalCollection<Element>.Index) -> Int\nReturns the distance between two indices.\nfunc formIndex(after: inout AnyBidirectionalCollection<Element>.Index)\nReplaces the given index with its successor.\nfunc formIndex(before: inout AnyBidirectionalCollection<Element>.Index)\nReplaces the given index with its predecessor.\nfunc index(AnyBidirectionalCollection<Element>.Index, offsetBy: Int) -> AnyBidirectionalCollection<Element>.Index\nReturns an index that is the specified distance from the given index.\nfunc index(AnyBidirectionalCollection<Element>.Index, offsetBy: Int, limitedBy: AnyBidirectionalCollection<Element>.Index) -> AnyBidirectionalCollection<Element>.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: AnyBidirectionalCollection<Element>.Index) -> AnyBidirectionalCollection<Element>.Index\nReturns the position immediately after the given index.\nfunc index(before: AnyBidirectionalCollection<Element>.Index) -> AnyBidirectionalCollection<Element>.Index\nReturns the position immediately before the given index.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element is String.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nAvailable when Self is Self.SubSequence.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nSubscripts\nsubscript(AnyBidirectionalCollection<Element>.Index) -> Element\nAccesses the element indicated by position.\nsubscript(Range<AnyBidirectionalCollection<Element>.Index>) -> AnyBidirectionalCollection<Element>.SubSequence\nAccesses a contiguous subrange of the collection’s elements."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float16/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "firstIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/firstindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.firstIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Abena starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "firstIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/firstindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe first index where element is found. If element is not found in the collection, returns nil.\n\nDiscussion\n\nAfter using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\"]\nif let i = students.firstIndex(of: \"Maxime\") {\n    students[i] = \"Max\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/underestimatedcount",
    "html": "Discussion\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "AsyncThrowingStream.Continuation.BufferingPolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/continuation/bufferingpolicy",
    "html": "Topics\nBuffering Policies\ncase unbounded\nContinue to add to the buffer, treating its capacity as infinite.\ncase bufferingOldest(Int)\nWhen the buffer is full, discard the newly received element.\ncase bufferingNewest(Int)\nWhen the buffer is full, discard the oldest element in the buffer.\nSee Also\nCreating a Continuation-Based Stream\ninit(Element.Type, bufferingPolicy: AsyncThrowingStream<Element, Failure>.Continuation.BufferingPolicy, (AsyncThrowingStream<Element, Failure>.Continuation) -> Void)\nConstructs an asynchronous stream for an element type, using the specified buffering policy and element-producing closure.\nstruct Continuation\nA mechanism to interface between synchronous code and an asynchronous stream."
  },
  {
    "title": "yield(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/continuation/yield(with:)",
    "html": "Parameters\nresult\n\nA result to yield from the continuation. In the .success(_:) case, this returns the associated value from the iterator’s next() method. If the result is the failure(_:) case, this call terminates the stream with the result’s error, by calling finish(throwing:).\n\nReturn Value\n\nA YieldResult that indicates the success or failure of the yield operation.\n\nDiscussion\n\nIf nothing is awaiting the next value and the result is success, this call attempts to buffer the result’s element.\n\nIf you call this method repeatedly, each call returns immediately, without blocking for any awaiting consumption from the iteration.\n\nSee Also\nProducing Elements\nfunc yield(Element) -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point with a given element.\nfunc yield() -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point.\nAvailable when Failure conforms to Error.\nenum YieldResult\nA type that indicates the result of yielding a value to a client, by way of the continuation."
  },
  {
    "title": "yield() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/continuation/yield()",
    "html": "Return Value\n\nA YieldResult that indicates the success or failure of the yield operation.\n\nDiscussion\n\nUse this method with AsyncThrowingStream instances whose Element type is Void. In this case, the yield() call unblocks the awaiting iteration; there is no value to return.\n\nIf you call this method repeatedly, each call returns immediately, without blocking for any awaiting consumption from the iteration.\n\nSee Also\nProducing Elements\nfunc yield(Element) -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point with a given element.\nfunc yield(with: Result<Element, Failure>) -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally or throw, based on a given result.\nAvailable when Failure conforms to Error.\nenum YieldResult\nA type that indicates the result of yielding a value to a client, by way of the continuation."
  },
  {
    "title": "AsyncThrowingStream.Continuation.YieldResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/continuation/yieldresult",
    "html": "Overview\n\nThe various yield methods of AsyncThrowingStream.Continuation return this type to indicate the success or failure of yielding an element to the continuation.\n\nTopics\nYield Results\ncase enqueued(remaining: Int)\nThe stream successfully enqueued the element.\ncase dropped(Element)\nThe stream didn’t enqueue the element because the buffer was full.\ncase terminated\nThe stream didn’t enqueue the element because the stream was in a terminal state.\nSee Also\nProducing Elements\nfunc yield(Element) -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point with a given element.\nfunc yield(with: Result<Element, Failure>) -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally or throw, based on a given result.\nAvailable when Failure conforms to Error.\nfunc yield() -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point.\nAvailable when Failure conforms to Error."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/contains(_:)",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nFinding Elements\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The min() method returns the minimum value of the sequence.\n\nlet min = await Counter(howHigh: 10)\n    .min()\nprint(min ?? \"none\")\n// Prints \"1\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The max() method returns the max value of the sequence.\n\nlet max = await Counter(howHigh: 10)\n    .max()\nprint(max ?? \"none\")\n// Prints \"10\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/prefix(_:)",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/dropfirst(_:)",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/compactmap(_:)-7mgih",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/compactmap(_:)-944nt",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/flatmap(_:)-4a0j",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/flatmap(_:)-vhin",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/subscript(_:)-3dvjk",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2...]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The max() method returns the max value of the sequence.\n\nlet max = await Counter(howHigh: 10)\n    .max()\nprint(max ?? \"none\")\n// Prints \"10\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/prefix(_:)",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "formIndex(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/formindex(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "formIndex(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/formindex(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "ThrowingTaskGroup.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/iterator",
    "html": "Overview\n\nThe elements returned by this iterator appear in the order that the tasks completed, not in the order that those tasks were added to the task group.\n\nThis iterator terminates after all tasks have completed successfully, or after any task completes by throwing an error. If a task completes by throwing an error, it doesn’t return any further task results. After iterating over the results of each task, it’s valid to make a new iterator for the task group, which you can use to iterate over the results of new tasks you add to the group. You can also make a new iterator to resume iteration after a child task throws an error. For example:\n\ngroup.addTask { 1 }\ngroup.addTask { throw SomeError }\ngroup.addTask { 2 }\n\n\ndo {\n    // Assuming the child tasks complete in order, this prints \"1\"\n    // and then throws an error.\n    for try await r in group { print(r) }\n} catch {\n    // Resolve the error.\n}\n\n\n// Assuming the child tasks complete in order, this prints \"2\".\nfor try await r in group { print(r) }\n\n\nSee Also\n\nThrowingTaskGroup.next()\n\nTopics\nInstance Methods\nfunc cancel()\nfunc next() async throws -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator.Element?\nAdvances to and returns the result of the next child task.\nType Aliases\ntypealias Element\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nSupporting Types\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "asyncUnlessCancelled(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/asyncunlesscancelled(priority:operation:)",
    "html": "See Also\nDeprecated\nfunc add(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) async -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc async(priority: TaskPriority?, operation: () async throws -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc spawn(priority: TaskPriority?, operation: () async throws -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc spawnUnlessCancelled(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated"
  },
  {
    "title": "add(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/add(priority:operation:)",
    "html": "See Also\nDeprecated\nfunc async(priority: TaskPriority?, operation: () async throws -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc asyncUnlessCancelled(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc spawn(priority: TaskPriority?, operation: () async throws -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc spawnUnlessCancelled(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated"
  },
  {
    "title": "spawn(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/spawn(priority:operation:)",
    "html": "See Also\nDeprecated\nfunc add(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) async -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc async(priority: TaskPriority?, operation: () async throws -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc asyncUnlessCancelled(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc spawnUnlessCancelled(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated"
  },
  {
    "title": "ThrowingTaskGroup.AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/asynciterator",
    "html": "See Also\nSupporting Types\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nstruct Iterator\nA type that provides an iteration interface over the results of tasks added to the group.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "async(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/async(priority:operation:)",
    "html": "See Also\nDeprecated\nfunc add(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) async -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc asyncUnlessCancelled(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc spawn(priority: TaskPriority?, operation: () async throws -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc spawnUnlessCancelled(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nDeprecated"
  },
  {
    "title": "init(_:bufferingPolicy:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/init(_:bufferingpolicy:_:)",
    "html": "Parameters\nelementType\n\nThe type of element the AsyncThrowingStream produces.\n\nlimit\n\nThe maximum number of elements to hold in the buffer. By default, this value is unlimited. Use a Continuation.BufferingPolicy to buffer a specified number of oldest or newest elements.\n\nbuild\n\nA custom closure that yields values to the AsyncThrowingStream. This closure receives an AsyncThrowingStream.Continuation instance that it uses to provide elements to the stream and terminate the stream when finished.\n\nDiscussion\n\nThe AsyncStream.Continuation received by the build closure is appropriate for use in concurrent contexts. It is thread safe to send and finish; all calls are to the continuation are serialized. However, calling this from multiple concurrent contexts could result in out-of-order delivery.\n\nThe following example shows an AsyncStream created with this initializer that produces 100 random numbers on a one-second interval, calling yield(_:) to deliver each element to the awaiting call point. When the for loop exits, the stream finishes by calling the continuation’s finish() method. If the random number is divisible by 5 with no remainder, the stream throws a MyRandomNumberError.\n\nlet stream = AsyncThrowingStream<Int, Error>(Int.self,\n                                             bufferingPolicy: .bufferingNewest(5)) { continuation in\n    Task.detached {\n        for _ in 0..<100 {\n            await Task.sleep(1 * 1_000_000_000)\n            let random = Int.random(in: 1...10)\n            if random % 5 == 0 {\n                continuation.finish(throwing: MyRandomNumberError())\n                return\n            } else {\n                continuation.yield(random)\n            }\n        }\n        continuation.finish()\n    }\n}\n\n\n// Call point:\ndo {\n    for try await random in stream {\n        print(random)\n    }\n} catch {\n    print(error)\n}\n\nSee Also\nCreating a Continuation-Based Stream\nenum BufferingPolicy\nA strategy that handles exhaustion of a buffer’s capacity.\nstruct Continuation\nA mechanism to interface between synchronous code and an asynchronous stream."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/isempty",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "first | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/first",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let firstNumber = numbers.first {\n    print(firstNumber)\n}\n// Prints \"10\"\n"
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Element?\nAdvances to the next element and returns it, or nil if no next element exists."
  },
  {
    "title": "finish(throwing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/continuation/finish(throwing:)",
    "html": "Parameters\nerror\n\nThe error to throw, or nil, to finish normally.\n\nDiscussion\n\nCalling this function more than once has no effect. After calling finish, the stream enters a terminal state and doesn’t produce any additional elements."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectionofone/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/map(_:)-58nrj",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/map(_:)-4a4ke",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements."
  },
  {
    "title": "AsyncThrowingStream.Continuation.Termination | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingstream/continuation/termination",
    "html": "Overview\n\nThe onTermination closure receives an instance of this type.\n\nTopics\nTermination States\ncase finished(Failure?)\nThe stream finished as a result of calling the continuation’s finish method.\ncase cancelled\nThe stream finished as a result of cancellation.\nSee Also\nHandling Termination\nvar onTermination: ((AsyncThrowingStream<Element, Failure>.Continuation.Termination) -> Void)?\nA callback to invoke when canceling iteration of an asynchronous stream."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The min() method returns the minimum value of the sequence.\n\nlet min = await Counter(howHigh: 10)\n    .min()\nprint(min ?? \"none\")\n// Prints \"1\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/map(_:)-4a4ju",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/map(_:)-58nrv",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/flatmap(_:)-4a07",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/flatmap(_:)-vhiz",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/dropfirst(_:)",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/compactmap(_:)-7mgi5",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/contains(_:)",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/compactmap(_:)-944nh",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/makeasynciterator()",
    "html": "Return Value\n\nAn instance of the AsyncIterator type used to produce elements of the asynchronous sequence.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "cancelAll() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/cancelall()",
    "html": "Discussion\n\nIf you add a task to a group after canceling the group, that task is canceled immediately after being added to the group.\n\nImmediately cancelled child tasks should therefore cooperatively check for and react to cancellation, e.g. by throwing an CancellationError at their earliest convenience, or otherwise handling the cancellation.\n\nThere are no restrictions on where you can call this method. Code inside a child task or even another task can cancel a group, however one should be very careful to not keep a reference to the group longer than the with...TaskGroup(...) { ... } method body is executing.\n\nSee Also\n\nTask.isCancelled\n\nSee Also\n\nThrowingTaskGroup.isCancelled\n\nSee Also\nCanceling Tasks\nvar isCancelled: Bool\nA Boolean value that indicates whether the group was canceled."
  },
  {
    "title": "waitForAll() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/waitforall()",
    "html": "Discussion\n\nIf any of the tasks throw, the first error thrown is captured and re-thrown by this method although the task group is not cancelled when this happens.\n\nCancelling the task group on first error\n\nIf you want to cancel the task group, and all “sibling” tasks, whenever any of child tasks throws an error, use the following pattern instead:\n\nwhile !group.isEmpty {\n    do {\n        try await group.next()\n    } catch is CancellationError {\n        // we decide that cancellation errors thrown by children,\n        // should not cause cancellation of the entire group.\n        continue;\n    } catch {\n        // other errors though we print and cancel the group,\n        // and all of the remaining child tasks within it.\n        print(\"Error: \\(error)\")\n        group.cancelAll()\n    }\n}\nassert(group.isEmpty())\n\n\nThrows\n\nThe first error that was thrown by a child task during draining all the tasks. This first error is stored until all other tasks have completed, and is re-thrown afterwards.\n\nSee Also\nAccessing Individual Results\nfunc next() async throws -> ChildTaskResult?\nWait for the next child task to complete, and return the value it returned or rethrow the error it threw.\nfunc nextResult() async -> Result<ChildTaskResult, Failure>?\nWait for the next child task to complete, and return a result containing either the value that the child task returned or the error that it threw.\nvar isEmpty: Bool\nA Boolean value that indicates whether the group has any remaining tasks."
  },
  {
    "title": "nextResult() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/nextresult()",
    "html": "Return Value\n\nA Result.success value containing the value that the child task returned, or a Result.failure value containing the error that the child task threw.\n\nDiscussion\n\nThe values returned by successive calls to this method appear in the order that the tasks completed, not in the order that those tasks were added to the task group. For example:\n\ngroup.addTask { 1 }\ngroup.addTask { 2 }\n\n\nguard let result = await group.nextResult() else {\n    return  // No task to wait on, which won't happen in this example.\n}\n\n\nswitch result {\ncase .success(let value): print(value)\ncase .failure(let error): print(\"Failure: \\(error)\")\n}\n// Prints either \"2\" or \"1\".\n\n\nIf the next child task throws an error and you propagate that error from this method out of the body of a call to the ThrowingTaskGroup.withThrowingTaskGroup(of:returning:body:) method, then all remaining child tasks in that group are implicitly canceled.\n\nSee Also\n\nnext()\n\nSee Also\nAccessing Individual Results\nfunc next() async throws -> ChildTaskResult?\nWait for the next child task to complete, and return the value it returned or rethrow the error it threw.\nvar isEmpty: Bool\nA Boolean value that indicates whether the group has any remaining tasks.\nfunc waitForAll() async throws\nWait for all of the group’s remaining tasks to complete."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/next()",
    "html": "Return Value\n\nThe value returned by the next child task that completes.\n\nDiscussion\n\nThe values returned by successive calls to this method appear in the order that the tasks completed, not in the order that those tasks were added to the task group. For example:\n\ngroup.addTask { 1 }\ngroup.addTask { 2 }\n\n\nprint(await group.next())\n// Prints either \"2\" or \"1\".\n\n\nIf there aren’t any pending tasks in the task group, this method returns nil, which lets you write the following to wait for a single task to complete:\n\nif let first = try await group.next() {\n   return first\n}\n\n\nIt also lets you write code like the following to wait for all the child tasks to complete, collecting the values they returned:\n\nwhile let first = try await group.next() {\n   collected += value\n}\nreturn collected\n\n\nAwaiting on an empty group immediately returns nil without suspending.\n\nYou can also use a for-await-in loop to collect results of a task group:\n\nfor try await value in group {\n    collected += value\n}\n\n\nIf the next child task throws an error and you propagate that error from this method out of the body of a call to the ThrowingTaskGroup.withThrowingTaskGroup(of:returning:body:) method, then all remaining child tasks in that group are implicitly canceled.\n\nDon’t call this method from outside the task where this task group was created. In most cases, the Swift type system prevents this mistake; for example, because the add(priority:operation:) method is mutating, that method can’t be called from a concurrent execution context like a child task.\n\nThrows\n\nThe error thrown by the next child task that completes.\n\nSee Also\n\nnextResult()\n\nSee Also\nAccessing Individual Results\nfunc nextResult() async -> Result<ChildTaskResult, Failure>?\nWait for the next child task to complete, and return a result containing either the value that the child task returned or the error that it threw.\nvar isEmpty: Bool\nA Boolean value that indicates whether the group has any remaining tasks.\nfunc waitForAll() async throws\nWait for all of the group’s remaining tasks to complete."
  },
  {
    "title": "addTaskUnlessCancelled(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/addtaskunlesscancelled(priority:operation:)",
    "html": "Parameters\noverridingPriority\n\nThe priority of the operation task. Omit this parameter or pass .unspecified to set the child task’s priority to the priority of the group.\n\noperation\n\nThe operation to execute as part of the task group.\n\nReturn Value\n\ntrue if the child task was added to the group; otherwise false.\n\nDiscussion\n\nThis method doesn’t throw an error, even if the child task does. Instead, the corresponding call to ThrowingTaskGroup.next() rethrows that error.\n\nSee Also\nAdding Tasks to a Throwing Task Group\nfunc addTask(priority: TaskPriority?, operation: () async throws -> ChildTaskResult)\nAdds a child task to the group."
  },
  {
    "title": "addTask(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/addtask(priority:operation:)",
    "html": "Parameters\noverridingPriority\n\nThe priority of the operation task. Omit this parameter or pass .unspecified to set the child task’s priority to the priority of the group.\n\noperation\n\nThe operation to execute as part of the task group.\n\nDiscussion\n\nThis method doesn’t throw an error, even if the child task does. Instead, the corresponding call to ThrowingTaskGroup.next() rethrows that error.\n\nSee Also\nAdding Tasks to a Throwing Task Group\nfunc addTaskUnlessCancelled(priority: TaskPriority?, operation: () async throws -> ChildTaskResult) -> Bool\nAdds a child task to the group, unless the group has been canceled."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "Double.IntegerLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/integerliteraltype",
    "html": "Discussion\n\nThe standard library integer and floating-point types are all valid types for IntegerLiteralType.\n\nSee Also\nInfrequently Used Functionality\ninit()\ninit(floatLiteral: Double)\nCreates an instance initialized to the specified floating-point value.\ninit(integerLiteral: Int64)\nCreates an instance initialized to the specified integer value.\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral.\ntypealias FloatLiteralType\nA type that represents a floating-point literal.\nfunc advanced(by: Double) -> Double\nReturns a value that is offset the specified distance from this value.\nfunc distance(to: Double) -> Double\nReturns the distance from this value to the given value, expressed as a stride.\ntypealias Stride\nA type that represents the distance between two values.\nfunc write<Target>(to: inout Target)\nWrites a textual representation of this instance into the given output stream.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "resume(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/checkedcontinuation/resume(with:)-3gh60",
    "html": "Parameters\nresult\n\nA value to either return or throw from the continuation.\n\nDiscussion\n\nA continuation must be resumed exactly once. If the continuation has already been resumed through this object, then the attempt to resume the continuation will trap.\n\nAfter resume enqueues the task, control immediately returns to the caller. The task continues executing when its executor is able to reschedule it."
  },
  {
    "title": "resume() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecontinuation/resume()",
    "html": "Discussion\n\nA continuation must be resumed exactly once. If the continuation has already resumed, then calling this method results in undefined behavior.\n\nAfter calling this method, control immediately returns to the caller. The task continues executing when its executor schedules it."
  },
  {
    "title": "resume(returning:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecontinuation/resume(returning:)-41kka",
    "html": "Parameters\nvalue\n\nThe value to return from the continuation.\n\nDiscussion\n\nA continuation must be resumed exactly once. If the continuation has already resumed, then calling this method results in undefined behavior.\n\nAfter calling this method, control immediately returns to the caller. The task continues executing when its executor schedules it."
  },
  {
    "title": "shared | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mainactor/shared",
    "html": "Discussion\n\nThe value of this property must always evaluate to the same actor instance."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection."
  },
  {
    "title": "UInt.Words.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "RangeReplaceableCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/unicodescalarview/rangereplaceablecollection-implementations",
    "html": "Topics\nOperators\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection.\nInitializers\ninit()\nCreates a new, empty collection.\ninit<S>(S)\nCreates a new instance of a collection containing the elements of a sequence.\ninit(repeating: Self.Element, count: Int)\nCreates a new collection containing the specified number of a single, repeated value.\nInstance Methods\nfunc append(Self.Element)\nAdds an element to the end of the collection.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc applying(CollectionDifference<Self.Element>) -> Self?\nApplies the given difference to this collection.\nfunc filter((Self.Element) throws -> Bool) rethrows -> Self\nReturns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate.\nfunc insert(Self.Element, at: Self.Index)\nInserts a new element into the collection at the specified position.\nfunc insert<C>(contentsOf: C, at: Self.Index)\nInserts the elements of a sequence into the collection at the specified position.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection and Self is Self.SubSequence.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc remove(at: Self.Index) -> Self.Element\nRemoves and returns the element at the specified position.\nfunc removeAll(keepingCapacity: Bool)\nRemoves all elements from the collection.\nfunc removeAll(where: (Self.Element) throws -> Bool) rethrows\nRemoves all the elements that satisfy the given predicate.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection and Self is Self.SubSequence.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc removeLast(Int)\nRemoves the specified number of elements from the end of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc removeLast(Int)\nRemoves the specified number of elements from the end of the collection.\nAvailable when Self conforms to BidirectionalCollection and Self is Self.SubSequence.\nfunc removeSubrange<R>(R)\nRemoves the elements in the specified subrange from the collection.\nfunc removeSubrange(Range<Self.Index>)\nRemoves the elements in the specified subrange from the collection.\nfunc replaceSubrange<C>(Range<Self.Index>, with: C)\nReplaces the specified subrange of elements with the given collection.\nDeprecated\nfunc replaceSubrange<C, R>(R, with: C)\nReplaces the specified subrange of elements with the given collection.\nfunc replaceSubrange<C>(Range<Substring.UnicodeScalarView.Index>, with: C)\nReplaces the specified subrange of elements with the given collection.\nfunc reserveCapacity(Int)\nPrepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/unicodescalarview/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar indices: Substring.UnicodeScalarView.Indices\nThe indices that are valid for subscripting the collection, in ascending order.\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc distance(from: Substring.UnicodeScalarView.Index, to: Substring.UnicodeScalarView.Index) -> Int\nReturns the distance between two indices.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(after: inout Substring.UnicodeScalarView.Index)\nReplaces the given index with its successor.\nfunc formIndex(before: inout Substring.UnicodeScalarView.Index)\nReplaces the given index with its predecessor.\nfunc index(Substring.UnicodeScalarView.Index, offsetBy: Int) -> Substring.UnicodeScalarView.Index\nReturns an index that is the specified distance from the given index.\nfunc index(Substring.UnicodeScalarView.Index, offsetBy: Int, limitedBy: Substring.UnicodeScalarView.Index) -> Substring.UnicodeScalarView.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: Substring.UnicodeScalarView.Index) -> Substring.UnicodeScalarView.Index\nReturns the position immediately after the given index.\nfunc index(before: Substring.UnicodeScalarView.Index) -> Substring.UnicodeScalarView.Index\nReturns the position immediately before the given index.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nAvailable when Self is Self.SubSequence.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nSubscripts\nsubscript(Range<Substring.UnicodeScalarView.Index>) -> Substring.UnicodeScalarView\nAccesses a contiguous subrange of the collection’s elements."
  },
  {
    "title": "UInt.Words.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/unicodescalarview/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: Substring.UnicodeScalarView.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: Substring.UnicodeScalarView.Index\nThe position of the first element in a nonempty collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc popFirst() -> Self.Element?\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nAvailable when Self is Self.SubSequence.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript(Substring.UnicodeScalarView.Index) -> Substring.UnicodeScalarView.Element\nAccesses the element at the specified position.\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingdropwhilesequence/iterator/next()",
    "html": "Discussion\n\nThis iterator calls next() on its base iterator and evaluates the result with the predicate closure. As long as the predicate returns true, this method returns nil. After the predicate returns false, for a value received from the base iterator, this method returns that value. After that, the iterator returns values received from its base iterator as-is, and never executes the predicate closure again. If calling the closure throws an error, the sequence ends and next() rethrows the error."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/unicodescalarview/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> ThrowingTaskGroup<ChildTaskResult, Failure>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingprefixwhilesequence/iterator/next()",
    "html": "Discussion\n\nIf the predicate hasn’t failed yet, this method gets the next element from the base sequence and calls the predicate with it. If this call succeeds, this method passes along the element. Otherwise, it returns nil, ending the sequence. If calling the predicate closure throws an error, the sequence ends and next() rethrows the error."
  },
  {
    "title": "ThrowingTaskGroup.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/element",
    "html": "See Also\nSupporting Types\nstruct Iterator\nA type that provides an iteration interface over the results of tasks added to the group.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error.\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/sequence/underestimatedcount-9oyup",
    "html": "Discussion\n\nThe default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively.\n\nComplexity\n\nO(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount."
  },
  {
    "title": "isCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/iscancelled",
    "html": "Discussion\n\nTo cancel a group, call the ThrowingTaskGroup.cancelAll() method.\n\nIf the task that’s currently running this group is canceled, the group is also implicitly canceled, which is also reflected in this property’s value.\n\nSee Also\nCanceling Tasks\nfunc cancelAll()\nCancel all of the remaining tasks in the group."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/throwingtaskgroup/isempty",
    "html": "Return Value\n\ntrue if the group has no pending tasks; otherwise false.\n\nDiscussion\n\nAt the start of the body of a withThrowingTaskGroup(of:returning:body:) call, the task group is always empty.\n\nIt’s guaranteed to be empty when returning from that body because a task group waits for all child tasks to complete before returning.\n\nSee Also\nAccessing Individual Results\nfunc next() async throws -> ChildTaskResult?\nWait for the next child task to complete, and return the value it returned or rethrow the error it threw.\nfunc nextResult() async -> Result<ChildTaskResult, Failure>?\nWait for the next child task to complete, and return a result containing either the value that the child task returned or the error that it threw.\nfunc waitForAll() async throws\nWait for all of the group’s remaining tasks to complete."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float/simd64storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncdropwhilesequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncDropWhileSequence<Base>.Iterator\nCreates an instance of the drop-while sequence iterator.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncdropfirstsequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncDropFirstSequence<Base>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asynccompactmapsequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncCompactMapSequence<Base, ElementOfResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "resume() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/checkedcontinuation/resume()",
    "html": "Discussion\n\nA continuation must be resumed exactly once. If the continuation has already been resumed through this object, then the attempt to resume the continuation will trap.\n\nAfter resume enqueues the task, control immediately returns to the caller. The task continues executing when its executor is able to reschedule it."
  },
  {
    "title": "resume(returning:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/checkedcontinuation/resume(returning:)",
    "html": "Parameters\nvalue\n\nThe value to return from the continuation.\n\nDiscussion\n\nA continuation must be resumed exactly once. If the continuation has already been resumed through this object, then the attempt to resume the continuation will trap.\n\nAfter resume enqueues the task, control immediately returns to the caller. The task continues executing when its executor is able to reschedule it."
  },
  {
    "title": "init(continuation:function:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/checkedcontinuation/init(continuation:function:)",
    "html": "Parameters\ncontinuation\n\nAn instance of UnsafeContinuation that hasn’t yet been resumed. After passing the unsafe continuation to this initializer, don’t use it outside of this object.\n\nfunction\n\nA string identifying the declaration that is the notional source for the continuation, used to identify the continuation in runtime diagnostics related to misuse of this continuation.\n\nDiscussion\n\nInstead of calling this initializer, most code calls the withCheckedContinuation(function:_:) or withCheckedThrowingContinuation(function:_:) function instead. You only need to initialize your own CheckedContinuation<T, E> if you already have an UnsafeContinuation you want to impose checking on."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/makeasynciterator()",
    "html": "Required\n\nReturn Value\n\nAn instance of the AsyncIterator type used to produce elements of the asynchronous sequence.\n\nSee Also\nCreating an Iterator\nassociatedtype AsyncIterator : AsyncIteratorProtocol\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\n\nRequired\n\nprotocol AsyncIteratorProtocol\nA type that asynchronously supplies the values of a sequence one at a time.\nassociatedtype Element\nThe type of element produced by this asynchronous sequence.\n\nRequired"
  },
  {
    "title": "preconditionIsolated(_:file:line:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/actor/preconditionisolated(_:file:line:)",
    "html": "Discussion\n\nThis function’s effect varies depending on the build flag used:\n\nIn playgrounds and -Onone builds (the default for Xcode’s Debug configuration), stops program execution in a debuggable state after printing message.\n\nIn -O builds (the default for Xcode’s Release configuration), stops program execution.\n\nIn -Ounchecked builds, the optimizer may assume that this function is never called. Failure to satisfy that assumption is a serious programming error."
  },
  {
    "title": "sharedUnownedExecutor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/globalactor/sharedunownedexecutor-53t6",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nThe value of this property must be equivalent to shared.unownedExecutor.\n\nDefault Implementations\nGlobalActor Implementations\nstatic var sharedUnownedExecutor: UnownedSerialExecutor\nThe shared executor instance that will be used to provide mutually-exclusive access for the global actor."
  },
  {
    "title": "assertIsolated(_:file:line:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/globalactor/assertisolated(_:file:line:)",
    "html": "Discussion\n\nIn playgrounds and -Onone builds (the default for Xcode’s Debug configuration): If condition evaluates to false, stop program execution in a debuggable state after printing message.\n\nIn -O builds (the default for Xcode’s Release configuration), condition is not evaluated, and there are no effects.\n\nIn -Ounchecked builds, condition is not evaluated, but the optimizer may assume that it always evaluates to true. Failure to satisfy that assumption is a serious programming error."
  },
  {
    "title": "assumeIsolated(_:file:line:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/actor/assumeisolated(_:file:line:)",
    "html": "Discussion\n\nThis API should only be used as last resort, when it is not possible to express the current execution context definitely belongs to the specified actor in other ways. E.g. one may need to use this in a delegate style API, where a synchronous method is guaranteed to be called by the specified actor, however it is not possible to move this method as being declared on the specified actor.\n\nWarning\n\nIf the current executor is not the expected serial executor, this function will crash.\n\nNote that this check is performed against the passed in actor’s serial executor, meaning that if another actor uses the same serial executor–by using that actor’s unownedExecutor as its own unownedExecutor–this check will succeed, as from a concurrency safety perspective, the serial executor guarantees mutual exclusion of those two actors."
  },
  {
    "title": "unownedExecutor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/actor/unownedexecutor",
    "html": "Required\n\nDiscussion\n\nThis property must always evaluate to the same executor for a given actor instance, and holding on to the actor must keep the executor alive.\n\nThis property will be implicitly accessed when work needs to be scheduled onto this actor. These accesses may be merged, eliminated, and rearranged with other work, and they may even be introduced when not strictly required. Visible side effects are therefore strongly discouraged within this property."
  },
  {
    "title": "assertIsolated(_:file:line:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/actor/assertisolated(_:file:line:)",
    "html": "Discussion\n\nIn playgrounds and -Onone builds (the default for Xcode’s Debug configuration): If condition evaluates to false, stop program execution in a debuggable state after printing message.\n\nIn -O builds (the default for Xcode’s Release configuration), condition is not evaluated, and there are no effects.\n\nIn -Ounchecked builds, condition is not evaluated, but the optimizer may assume that it always evaluates to true. Failure to satisfy that assumption is a serious programming error."
  },
  {
    "title": "resume(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/checkedcontinuation/resume(with:)-5n1a5",
    "html": "Parameters\nresult\n\nA value to either return or throw from the continuation.\n\nDiscussion\n\nA continuation must be resumed exactly once. If the continuation has already been resumed through this object, then the attempt to resume the continuation will trap.\n\nAfter resume enqueues the task, control immediately returns to the caller. The task continues executing when its executor is able to reschedule it."
  },
  {
    "title": "resume(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecontinuation/resume(with:)-7t959",
    "html": "Parameters\nresult\n\nThe result. If it contains a .success value, the continuation returns that value; otherwise, it throws the .error value.\n\nDiscussion\n\nA continuation must be resumed exactly once. If the continuation has already resumed, then calling this method results in undefined behavior.\n\nAfter calling this method, control immediately returns to the caller. The task continues executing when its executor schedules it."
  },
  {
    "title": "shared | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/globalactor/shared",
    "html": "Required\n\nDiscussion\n\nThe value of this property must always evaluate to the same actor instance."
  },
  {
    "title": "ActorType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/globalactor/actortype",
    "html": "Required"
  },
  {
    "title": "resume(returning:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecontinuation/resume(returning:)-8rtni",
    "html": "Parameters\nvalue\n\nThe value to return from the continuation.\n\nDiscussion\n\nA continuation must be resumed exactly once. If the continuation has already resumed, then calling this method results in undefined behavior.\n\nAfter calling this method, control immediately returns to the caller. The task continues executing when its executor schedules it."
  },
  {
    "title": "sharedUnownedExecutor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mainactor/sharedunownedexecutor-8ymny",
    "html": "Discussion\n\nThe value of this property must be equivalent to shared.unownedExecutor."
  },
  {
    "title": "Actor Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mainactor/actor-implementations",
    "html": "Topics\nInstance Methods\nfunc assertIsolated(() -> String, file: StaticString, line: UInt)\nPerforms an executor check in debug builds.\nfunc assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T\nA safe way to synchronously assume that the current execution context belongs to the passed in actor.\nfunc preconditionIsolated(() -> String, file: StaticString, line: UInt)\nUnconditionally if the current task is executing on the serial executor of the passed in actor, and if not crash the program offering information about the executor mismatch."
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "UInt.Words.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/words-swift.struct/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingdropwhilesequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncThrowingDropWhileSequence<Base>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncprefixwhilesequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncPrefixWhileSequence<Base>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncdropwhilesequence/iterator/next()",
    "html": "Discussion\n\nThis iterator calls next() on its base iterator and evaluates the result with the predicate closure. As long as the predicate returns true, this method returns nil. After the predicate returns false, for a value received from the base iterator, this method returns that value. After that, the iterator returns values received from its base iterator as-is, and never executes the predicate closure again."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/sequence/underestimatedcount-3n9ne",
    "html": "Discussion\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncprefixwhilesequence/iterator/next()",
    "html": "Discussion\n\nIf the predicate hasn’t yet failed, this method gets the next element from the base sequence and calls the predicate with it. If this call succeeds, this method passes along the element. Otherwise, it returns nil, ending the sequence."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asynccompactmapsequence/iterator/next()",
    "html": "Discussion\n\nThis iterator calls next() on its base iterator; if this call returns nil, next() returns nil. Otherwise, next() calls the transforming closure on the received element, returning it if the transform returns a non-nil value. If the transform returns nil, this method continues to wait for further elements until it gets one that transforms to a non-nil value."
  },
  {
    "title": "Strideable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/strideable-implementations",
    "html": "Topics\nInstance Methods\nfunc advanced(by: Double) -> Double\nReturns a value that is offset the specified distance from this value.\nfunc distance(to: Double) -> Double\nReturns the distance from this value to the given value, expressed as a stride.\nType Aliases\ntypealias Stride\nA type that represents the distance between two values."
  },
  {
    "title": "write(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/write(to:)",
    "html": "See Also\nInfrequently Used Functionality\ninit()\ninit(floatLiteral: Double)\nCreates an instance initialized to the specified floating-point value.\ninit(integerLiteral: Int64)\nCreates an instance initialized to the specified integer value.\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral.\ntypealias FloatLiteralType\nA type that represents a floating-point literal.\ntypealias IntegerLiteralType\nA type that represents an integer literal.\nfunc advanced(by: Double) -> Double\nReturns a value that is offset the specified distance from this value.\nfunc distance(to: Double) -> Double\nReturns the distance from this value to the given value, expressed as a stride.\ntypealias Stride\nA type that represents the distance between two values.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func < (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func < (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "enqueue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/executor/enqueue(_:)-2sc5t",
    "html": "Required Default implementations provided.\n\nDeprecated\n\nImplement 'enqueue(_: __owned ExecutorJob)' instead\n\nDefault Implementations\nExecutor Implementations\nfunc enqueue(consuming ExecutorJob)\nfunc enqueue(UnownedJob)\nfunc enqueue(consuming Job)"
  },
  {
    "title": "runSynchronously(on:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/executorjob/runsynchronously(on:)",
    "html": "Parameters\nexecutor\n\nthe executor this job will be semantically running on.\n\nDiscussion\n\nThis operation runs the job on the calling thread and blocks until the job completes. The intended use of this method is for an executor to determine when and where it wants to run the job and then call this method on it.\n\nThe passed in executor reference is used to establish the executor context for the job, and should be the same executor as the one semantically calling the runSynchronously method.\n\nThis operation consumes the job, preventing it accidental use after it has ben run.\n\nConverting a ExecutorJob to an UnownedJob and invoking ``UnownedJob/runSynchronously(_:)` on it multiple times is undefined behavior, as a job can only ever be run once, and must not be accessed after it has been run."
  },
  {
    "title": "enqueue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/executor/enqueue(_:)-55qpq",
    "html": "Required Default implementations provided.\n\nDefault Implementations\nExecutor Implementations\nfunc enqueue(consuming Job)\nfunc enqueue(consuming ExecutorJob)\nfunc enqueue(UnownedJob)"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "Float64 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float64",
    "html": "See Also\nFloating-Point Type Aliases\ntypealias Float32\nA 32-bit floating point type."
  },
  {
    "title": "_CustomPlaygroundQuickLookable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/_customplaygroundquicklookable-implementations",
    "html": "Topics\nInstance Properties\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for the Double instance.\nDeprecated"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/simd32storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "distance(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/distance(to:)",
    "html": "Parameters\nother\n\nThe value to calculate the distance to.\n\nReturn Value\n\nThe distance from this value to other.\n\nDiscussion\n\nIf this type’s Stride type conforms to BinaryInteger, then for two values x and y, and a distance n = x.distance(to: y), x.advanced(by: n) == y. Using this method with types that have a noninteger Stride may result in an approximation.\n\nComplexity\n\nO(1)\n\nSee Also\nInfrequently Used Functionality\ninit()\ninit(floatLiteral: Double)\nCreates an instance initialized to the specified floating-point value.\ninit(integerLiteral: Int64)\nCreates an instance initialized to the specified integer value.\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral.\ntypealias FloatLiteralType\nA type that represents a floating-point literal.\ntypealias IntegerLiteralType\nA type that represents an integer literal.\nfunc advanced(by: Double) -> Double\nReturns a value that is offset the specified distance from this value.\ntypealias Stride\nA type that represents the distance between two values.\nfunc write<Target>(to: inout Target)\nWrites a textual representation of this instance into the given output stream.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "advanced(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/advanced(by:)",
    "html": "Parameters\nn\n\nThe distance to advance this value.\n\nReturn Value\n\nA value that is offset from this value by n.\n\nDiscussion\n\nUse the advanced(by:) method in generic code to offset a value by a specified distance. If you’re working directly with numeric values, use the addition operator (+) instead of this method.\n\nfunc addOne<T: Strideable>(to x: T) -> T\n    where T.Stride: ExpressibleByIntegerLiteral\n{\n    return x.advanced(by: 1)\n}\n\n\nlet x = addOne(to: 5)\n// x == 6\nlet y = addOne(to: 3.5)\n// y = 4.5\n\n\nIf this type’s Stride type conforms to BinaryInteger, then for a value x, a distance n, and a value y = x.advanced(by: n), x.distance(to: y) == n. Using this method with types that have a noninteger Stride may result in an approximation. If the result of advancing by n is not representable as a value of this type, then a runtime error may occur.\n\nComplexity\n\nO(1)\n\nSee Also\nInfrequently Used Functionality\ninit()\ninit(floatLiteral: Double)\nCreates an instance initialized to the specified floating-point value.\ninit(integerLiteral: Int64)\nCreates an instance initialized to the specified integer value.\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral.\ntypealias FloatLiteralType\nA type that represents a floating-point literal.\ntypealias IntegerLiteralType\nA type that represents an integer literal.\nfunc distance(to: Double) -> Double\nReturns the distance from this value to the given value, expressed as a stride.\ntypealias Stride\nA type that represents the distance between two values.\nfunc write<Target>(to: inout Target)\nWrites a textual representation of this instance into the given output stream.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float/simd8storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncdropfirstsequence/dropfirst(_:)",
    "html": "Discussion\n\nWhen you call dropFirst(_:) on an asynchronous sequence that is already an AsyncDropFirstSequence, the returned sequence simply adds the new drop count to the current drop count."
  },
  {
    "title": "unownedExecutor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mainactor/unownedexecutor",
    "html": "Discussion\n\nThis property must always evaluate to the same executor for a given actor instance, and holding on to the actor must keep the executor alive.\n\nThis property will be implicitly accessed when work needs to be scheduled onto this actor. These accesses may be merged, eliminated, and rearranged with other work, and they may even be introduced when not strictly required. Visible side effects are therefore strongly discouraged within this property."
  },
  {
    "title": "resume(throwing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/checkedcontinuation/resume(throwing:)",
    "html": "Parameters\nerror\n\nThe error to throw from the continuation.\n\nDiscussion\n\nA continuation must be resumed exactly once. If the continuation has already been resumed through this object, then the attempt to resume the continuation will trap.\n\nAfter resume enqueues the task, control immediately returns to the caller. The task continues executing when its executor is able to reschedule it."
  },
  {
    "title": "preconditionIsolated(_:file:line:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/globalactor/preconditionisolated(_:file:line:)",
    "html": "Discussion\n\nThis function’s effect varies depending on the build flag used:\n\nIn playgrounds and -Onone builds (the default for Xcode’s Debug configuration), stops program execution in a debuggable state after printing message.\n\nIn -O builds (the default for Xcode’s Release configuration), stops program execution.\n\nIn -Ounchecked builds, the optimizer may assume that this function is never called. Failure to satisfy that assumption is a serious programming error."
  },
  {
    "title": "resume(throwing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecontinuation/resume(throwing:)",
    "html": "Parameters\nerror\n\nThe error to throw from the continuation.\n\nDiscussion\n\nA continuation must be resumed exactly once. If the continuation has already resumed, then calling this method results in undefined behavior.\n\nAfter calling this method, control immediately returns to the caller. The task continues executing when its executor schedules it."
  },
  {
    "title": "assumeIsolated(_:file:line:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mainactor/assumeisolated(_:file:line:)-swift.type.method",
    "html": "Discussion\n\nThis API should only be used as last resort, when it is not possible to express the current execution context definitely belongs to the main actor in other ways. E.g. one may need to use this in a delegate style API, where a synchronous method is guaranteed to be called by the main actor, however it is not possible to annotate this legacy API with @MainActor.\n\nWarning\n\nIf the current executor is not the MainActor’s serial executor, this function will crash.\n\nNote that this check is performed against the MainActor’s serial executor, meaning that if another actor uses the same serial executor–by using sharedUnownedExecutor as its own unownedExecutor–this check will succeed, as from a concurrency safety perspective, the serial executor guarantees mutual exclusion of those two actors."
  },
  {
    "title": "resume(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecontinuation/resume(with:)-4t59h",
    "html": "Parameters\nresult\n\nThe result. If it contains a .success value, the continuation returns that value; otherwise, it throws the .error value.\n\nDiscussion\n\nA continuation must be resumed exactly once. If the continuation has already resumed, then calling this method results in undefined behavior.\n\nAfter calling this method, control immediately returns to the caller. The task continues executing when its executor schedules it."
  },
  {
    "title": "GlobalActor Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mainactor/globalactor-implementations",
    "html": "Topics\nType Properties\nstatic var sharedUnownedExecutor: UnownedSerialExecutor\nThe shared executor instance that will be used to provide mutually-exclusive access for the global actor."
  },
  {
    "title": "Double.Stride | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/stride",
    "html": "See Also\nInfrequently Used Functionality\ninit()\ninit(floatLiteral: Double)\nCreates an instance initialized to the specified floating-point value.\ninit(integerLiteral: Int64)\nCreates an instance initialized to the specified integer value.\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral.\ntypealias FloatLiteralType\nA type that represents a floating-point literal.\ntypealias IntegerLiteralType\nA type that represents an integer literal.\nfunc advanced(by: Double) -> Double\nReturns a value that is offset the specified distance from this value.\nfunc distance(to: Double) -> Double\nReturns the distance from this value to the given value, expressed as a stride.\nfunc write<Target>(to: inout Target)\nWrites a textual representation of this instance into the given output stream.\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you.\n\nSee Also\nInfrequently Used Functionality\ninit()\ninit(floatLiteral: Double)\nCreates an instance initialized to the specified floating-point value.\ninit(integerLiteral: Int64)\nCreates an instance initialized to the specified integer value.\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral.\ntypealias FloatLiteralType\nA type that represents a floating-point literal.\ntypealias IntegerLiteralType\nA type that represents an integer literal.\nfunc advanced(by: Double) -> Double\nReturns a value that is offset the specified distance from this value.\nfunc distance(to: Double) -> Double\nReturns the distance from this value to the given value, expressed as a stride.\ntypealias Stride\nA type that represents the distance between two values.\nfunc write<Target>(to: inout Target)\nWrites a textual representation of this instance into the given output stream."
  },
  {
    "title": "Double.SIMDMaskScalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/simdmaskscalar",
    "html": "See Also\nSIMD-Supporting Types\nstruct SIMD2Storage\nStorage for a vector of two floating-point values.\nstruct SIMD4Storage\nStorage for a vector of four floating-point values.\nstruct SIMD8Storage\nStorage for a vector of eight floating-point values.\nstruct SIMD16Storage\nStorage for a vector of 16 floating-point values.\nstruct SIMD32Storage\nStorage for a vector of 32 floating-point values.\nstruct SIMD64Storage\nStorage for a vector of 64 floating-point values."
  },
  {
    "title": "customPlaygroundQuickLook | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/customplaygroundquicklook",
    "html": "Deprecated\n\nDouble.customPlaygroundQuickLook will be removed in a future Swift version\n\nSee Also\nDeprecated\ninit(NSNumber)"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nA mirror that reflects the Double instance."
  },
  {
    "title": "CustomStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of the value."
  },
  {
    "title": "Decodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "FloatingPoint Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/floatingpoint-implementations",
    "html": "Topics\nOperators\nstatic func * (Double, Double) -> Double\nMultiplies two values and produces their product, rounding to a representable value.\nstatic func *= (inout Double, Double)\nMultiplies two values and stores the result in the left-hand-side variable, rounding to a representable value.\nstatic func + (Double, Double) -> Double\nAdds two values and produces their sum, rounded to a representable value.\nstatic func += (inout Double, Double)\nAdds two values and stores the result in the left-hand-side variable, rounded to a representable value.\nstatic func - (Double) -> Double\nCalculates the additive inverse of a value.\nstatic func - (Double, Double) -> Double\nSubtracts one value from another and produces their difference, rounded to a representable value.\nstatic func -= (inout Double, Double)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable, rounding to a representable value.\nstatic func / (Double, Double) -> Double\nReturns the quotient of dividing the first value by the second, rounded to a representable value.\nstatic func /= (inout Double, Double)\nDivides the first value by the second and stores the quotient in the left-hand-side variable, rounding to a representable value.\nInitializers\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\ninit(Int)\nCreates a new value, rounded to the closest possible representation.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\ninit(sign: FloatingPointSign, exponent: Int, significand: Double)\nCreates a new value from the given sign, exponent, and significand.\ninit(signOf: Double, magnitudeOf: Double)\nCreates a new floating-point value using the sign of one value and the magnitude of another.\ninit(signOf: Self, magnitudeOf: Self)\nCreates a new floating-point value using the sign of one value and the magnitude of another.\nInstance Properties\nvar exponent: Int\nThe exponent of the floating-point value.\nvar floatingPointClass: FloatingPointClassification\nThe classification of this value.\nvar isCanonical: Bool\nA Boolean value indicating whether the instance’s representation is in its canonical form.\nvar isFinite: Bool\nA Boolean value indicating whether this instance is finite.\nvar isInfinite: Bool\nA Boolean value indicating whether the instance is infinite.\nvar isNaN: Bool\nA Boolean value indicating whether the instance is NaN (“not a number”).\nvar isNormal: Bool\nA Boolean value indicating whether this instance is normal.\nvar isSignalingNaN: Bool\nA Boolean value indicating whether the instance is a signaling NaN.\nvar isSubnormal: Bool\nA Boolean value indicating whether the instance is subnormal.\nvar isZero: Bool\nA Boolean value indicating whether the instance is equal to zero.\nvar nextDown: Self\nThe greatest representable value that compares less than this value.\nvar nextUp: Double\nThe least representable value that compares greater than this value.\nvar sign: FloatingPointSign\nThe sign of the floating-point value.\nvar significand: Double\nThe significand of the floating-point value.\nvar ulp: Double\nThe unit in the last place of this value.\nInstance Methods\nfunc addProduct(Double, Double)\nAdds the product of the two given values to this value in place, computed without intermediate rounding.\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding.\nfunc formRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value.\nfunc formSquareRoot()\nReplaces this value with its square root, rounded to a representable value.\nfunc formTruncatingRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value using truncating division.\nfunc isEqual(to: Double) -> Bool\nReturns a Boolean value indicating whether this instance is equal to the given value.\nfunc isLess(than: Double) -> Bool\nReturns a Boolean value indicating whether this instance is less than the given value.\nfunc isLessThanOrEqualTo(Double) -> Bool\nReturns a Boolean value indicating whether this instance is less than or equal to the given value.\nfunc isTotallyOrdered(belowOrEqualTo: Self) -> Bool\nReturns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.\nfunc negate()\nReplaces this value with its additive inverse.\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value.\nfunc round()\nfunc round(FloatingPointRoundingRule)\nRounds the value to an integral value using the specified rounding rule.\nfunc rounded() -> Self\nfunc rounded(FloatingPointRoundingRule) -> Self\nReturns this value rounded to an integral value using the specified rounding rule.\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value.\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division.\nType Aliases\ntypealias Exponent\nA type that can represent any written exponent.\nType Properties\nstatic var greatestFiniteMagnitude: Double\nThe greatest finite number representable by this type.\nstatic var infinity: Double\nPositive infinity.\nstatic var leastNonzeroMagnitude: Double\nThe least positive number.\nstatic var leastNormalMagnitude: Double\nThe least positive normal number.\nstatic var nan: Double\nA quiet NaN (“not a number”).\nstatic var pi: Double\nThe mathematical constant pi (π), approximately equal to 3.14159.\nstatic var radix: Int\nThe radix, or base of exponentiation, for a floating-point type.\nstatic var signalingNaN: Double\nA signaling NaN (“not a number”).\nstatic var ulpOfOne: Self\nThe unit in the last place of 1.0.\nstatic var ulpOfOne: Double\nThe unit in the last place of 1.0.\nType Methods\nstatic func maximum(Self, Self) -> Self\nReturns the greater of the two given values.\nstatic func maximumMagnitude(Self, Self) -> Self\nReturns the value with greater magnitude.\nstatic func minimum(Self, Self) -> Self\nReturns the lesser of the two given values.\nstatic func minimumMagnitude(Self, Self) -> Self\nReturns the value with lesser magnitude."
  },
  {
    "title": "Encodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "ExpressibleByFloatLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/expressiblebyfloatliteral-implementations",
    "html": "Topics\nInitializers\ninit(floatLiteral: Double)\nCreates an instance initialized to the specified floating-point value.\nType Aliases\ntypealias FloatLiteralType\nA type that represents a floating-point literal."
  },
  {
    "title": "ExpressibleByIntegerLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/expressiblebyintegerliteral-implementations",
    "html": "Topics\nInitializers\ninit(integerLiteral: Int64)\nCreates an instance initialized to the specified integer value.\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral.\nType Aliases\ntypealias IntegerLiteralType\nA type that represents an integer literal."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "SignedNumeric Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/signednumeric-implementations",
    "html": "Topics\nOperators\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nInstance Methods\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "SIMDScalar Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/simdscalar-implementations",
    "html": "Topics\nStructures\nstruct SIMD16Storage\nStorage for a vector of 16 floating-point values.\nstruct SIMD2Storage\nStorage for a vector of two floating-point values.\nstruct SIMD32Storage\nStorage for a vector of 32 floating-point values.\nstruct SIMD4Storage\nStorage for a vector of four floating-point values.\nstruct SIMD64Storage\nStorage for a vector of 64 floating-point values.\nstruct SIMD8Storage\nStorage for a vector of eight floating-point values.\nType Aliases\ntypealias SIMDMaskScalar"
  },
  {
    "title": "TextOutputStreamable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/textoutputstreamable-implementations",
    "html": "Topics\nInstance Methods\nfunc write<Target>(to: inout Target)\nWrites a textual representation of this instance into the given output stream."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-1488d",
    "html": "Parameters\nvalue\n\nA floating-point value to be converted.\n\nDiscussion\n\nIf two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.\n\nSee Also\nConverting Floating-Point Values\ninit(Double)\nCreates a new instance initialized to the given value.\ninit(Float)\nCreates a new instance that approximates the given value.\ninit(Float16)\nCreates a new instance that approximates the given value.\ninit(Float80)\nCreates a new instance that approximates the given value.\ninit(sign: FloatingPointSign, exponent: Int, significand: Double)\nCreates a new value from the given sign, exponent, and significand.\ninit(signOf: Double, magnitudeOf: Double)\nCreates a new floating-point value using the sign of one value and the magnitude of another.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit(truncating: NSNumber)"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-5blrp",
    "html": "Parameters\nvalue\n\nThe integer to convert to a floating-point value.\n\nDiscussion\n\nIf two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.\n\nSee Also\nConverting Integers\ninit(Int)\nCreates a new value, rounded to the closest possible representation."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-15kej",
    "html": "See Also\nConverting Strings\ninit?<S>(S)\nCreates a new instance from the given string."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-5wmm8",
    "html": "Parameters\ntext\n\nAn input string to convert to a Double? instance.\n\nDiscussion\n\nThe string passed as text can represent a real number in decimal or hexadecimal format or can be in a special format representing infinity or NaN (“not a number”). If text is not in a recognized format, the optional initializer will fail and return nil.\n\nThe text string consists of an optional plus or minus sign character (+ or -) followed by one of the following:\n\nA decimal string contains a significand consisting of one or more decimal digits that may include a decimal point:\n\nlet c = Double(\"-1.0\")\n// c == -1.0\n\n\nlet d = Double(\"28.375\")\n// d == 28.375\n\n\nA decimal string may also include an exponent following the significand, indicating the power of 10 by which the significand should be multiplied. If included, the exponent is separated by a single character, e or E, and consists of an optional plus or minus sign character and a sequence of decimal digits.\n\nlet e = Double(\"2837.5e-2\")\n// e == 28.375\n\n\nA hexadecimal string contains a significand consisting of 0X or 0x followed by one or more hexadecimal digits that may include a decimal point.\n\nlet f = Double(\"0x1c.6\")\n// f == 28.375\n\n\nA hexadecimal string may also include an exponent indicating the power of 2 by which the significand should be multiplied. If included, the exponent is separated by a single character, p or P, and consists of an optional plus or minus sign character and a sequence of decimal digits.\n\nlet g = Double(\"0x1.c6p4\")\n// g == 28.375\n\n\nThe input strings \"inf\" or \"infinity\" (case insensitive) are converted to an infinite result:\n\nlet i = Double(\"inf\")\n// i == Double.infinity\n\n\nlet j = Double(\"-Infinity\")\n// j == -Double.infinity\n\n\nAn input string of \"nan\" (case insensitive) is converted into a NaN value:\n\nlet n = Double(\"-nan\")\n// n?.isNaN == true\n// n?.sign == .minus\n\n\nA NaN string may also include a payload in parentheses following the \"nan\" keyword. The payload consists of a sequence of decimal digits, or the characters 0X or 0x followed by a sequence of hexadecimal digits. If the payload contains any other characters, it is ignored. If the value of the payload is larger than can be stored as the payload of a Double.nan, the least significant bits are used.\n\nlet p = Double(\"nan(0x10)\")\n// p?.isNaN == true\n// String(p!) == \"nan(0x10)\"\n\n\nA string in any other format than those described above or containing additional characters results in a nil value. For example, the following conversions result in nil:\n\n  Double(\" 5.0\")      // Includes whitespace\n  Double(\"±2.0\")      // Invalid character\n  Double(\"0x1.25e4\")  // Incorrect exponent format\n\n\nA decimal or hexadecimal string is converted to a Double instance using the IEEE 754 roundTiesToEven (default) rounding attribute. Values with absolute value smaller than Double.leastNonzeroMagnitude are rounded to plus or minus zero. Values with absolute value larger than Double.greatestFiniteMagnitude are rounded to plus or minus infinity.\n\n  let y = Double(\"1.23e-9999\")\n  // y == 0.0\n  // y?.sign == .plus\n\n\n  let z = Double(\"-7.89e-7206\")\n  // z == -0.0\n  // z?.sign == .minus\n\n\n  let r = Double(\"1.23e17802\")\n  // r == Double.infinity\n\n\n  let s = Double(\"-7.89e7206\")\n  // s == Double.-infinity\n\n\nNote\n\nPrior to Swift 5.4, a decimal or hexadecimal input string whose value was too large to represent as a finite Double instance returned nil instead of Double.infinity.\n\nSee Also\nConverting Strings\ninit?(Substring)"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float16/simd16storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float16/simd2storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float/simd4storage/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "Float32 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/float32",
    "html": "See Also\nFloating-Point Type Aliases\ntypealias Float64\nA 64-bit floating point type."
  },
  {
    "title": "enqueue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/executor/enqueue(_:)-b90u",
    "html": "Required Default implementations provided.\n\nDeprecated\n\nImplement 'enqueue(_: __owned ExecutorJob)' instead\n\nDefault Implementations\nExecutor Implementations\nfunc enqueue(UnownedJob)\nfunc enqueue(consuming ExecutorJob)\nfunc enqueue(consuming Job)"
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/dictionary/keys-swift.struct/iterator/next()",
    "html": "Return Value\n\nThe next element in the underlying sequence, if a next element exists; otherwise, nil.\n\nDiscussion\n\nRepeatedly calling this method returns, in order, all the elements of the underlying sequence. As soon as the sequence has run out of elements, all subsequent calls return nil.\n\nYou must not call this method if any other copy of this iterator has been advanced with a call to its next() method.\n\nThe following example shows how an iterator can be used explicitly to emulate a for-in loop. First, retrieve a sequence’s iterator, and then call the iterator’s next() method until it returns nil.\n\nlet numbers = [2, 3, 5, 7]\nvar numbersIterator = numbers.makeIterator()\n\n\nwhile let num = numbersIterator.next() {\n    print(num)\n}\n// Prints \"2\"\n// Prints \"3\"\n// Prints \"5\"\n// Prints \"7\"\n"
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "shuffled(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/shuffled(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity\n\nO(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "sorted(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/sorted(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-5h7qh",
    "html": "Parameters\nother\n\nThe value to use for the new instance.\n\nDiscussion\n\nThe value of other is rounded to a representable value, if necessary. A NaN passed as other results in another NaN, with a signaling NaN value converted to quiet NaN.\n\nlet x: Float = 21.25\nlet y = Double(x)\n// y == 21.25\n\n\nlet z = Double(Float.nan)\n// z.isNaN == true\n\nSee Also\nConverting Floating-Point Values\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit(Double)\nCreates a new instance initialized to the given value.\ninit(Float16)\nCreates a new instance that approximates the given value.\ninit(Float80)\nCreates a new instance that approximates the given value.\ninit(sign: FloatingPointSign, exponent: Int, significand: Double)\nCreates a new value from the given sign, exponent, and significand.\ninit(signOf: Double, magnitudeOf: Double)\nCreates a new floating-point value using the sign of one value and the magnitude of another.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit(truncating: NSNumber)"
  },
  {
    "title": "init(sign:exponent:significand:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(sign:exponent:significand:)",
    "html": "Parameters\nsign\n\nThe sign to use for the new value.\n\nexponent\n\nThe new value’s exponent.\n\nsignificand\n\nThe new value’s significand.\n\nDiscussion\n\nThe following example uses this initializer to create a new Double instance. Double is a binary floating-point type that has a radix of 2.\n\nlet x = Double(sign: .plus, exponent: -2, significand: 1.5)\n// x == 0.375\n\n\nThis initializer is equivalent to the following calculation, where ** is exponentiation, computed as if by a single, correctly rounded, floating-point operation:\n\nlet sign: FloatingPointSign = .plus\nlet exponent = -2\nlet significand = 1.5\nlet y = (sign == .minus ? -1 : 1) * significand * Double.radix ** exponent\n// y == 0.375\n\n\nAs with any basic operation, if this value is outside the representable range of the type, overflow or underflow occurs, and zero, a subnormal value, or infinity may result. In addition, there are two other edge cases:\n\nIf the value you pass to significand is zero or infinite, the result is zero or infinite, regardless of the value of exponent.\n\nIf the value you pass to significand is NaN, the result is NaN.\n\nFor any floating-point value x of type F, the result of the following is equal to x, with the distinction that the result is canonicalized if x is in a noncanonical encoding:\n\nlet x0 = F(sign: x.sign, exponent: x.exponent, significand: x.significand)\n\n\nThis initializer implements the scaleB operation defined by the IEEE 754 specification.\n\nSee Also\nConverting Floating-Point Values\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit(Double)\nCreates a new instance initialized to the given value.\ninit(Float)\nCreates a new instance that approximates the given value.\ninit(Float16)\nCreates a new instance that approximates the given value.\ninit(Float80)\nCreates a new instance that approximates the given value.\ninit(signOf: Double, magnitudeOf: Double)\nCreates a new floating-point value using the sign of one value and the magnitude of another.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit(truncating: NSNumber)"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-o1k9",
    "html": "Parameters\nother\n\nThe value to use for the new instance.\n\nDiscussion\n\nThe value of other is represented exactly by the new instance. A NaN passed as other results in another NaN, with a signaling NaN value converted to quiet NaN.\n\nlet x: Double = 21.25\nlet y = Double(x)\n// y == 21.25\n\n\nlet z = Double(Double.nan)\n// z.isNaN == true\n\nSee Also\nConverting Floating-Point Values\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit(Float)\nCreates a new instance that approximates the given value.\ninit(Float16)\nCreates a new instance that approximates the given value.\ninit(Float80)\nCreates a new instance that approximates the given value.\ninit(sign: FloatingPointSign, exponent: Int, significand: Double)\nCreates a new value from the given sign, exponent, and significand.\ninit(signOf: Double, magnitudeOf: Double)\nCreates a new floating-point value using the sign of one value and the magnitude of another.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit(truncating: NSNumber)"
  },
  {
    "title": "init(signOf:magnitudeOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(signof:magnitudeof:)-4olpd",
    "html": "Parameters\nsignOf\n\nA value from which to use the sign. The result of the initializer has the same sign as signOf.\n\nmagnitudeOf\n\nA value from which to use the magnitude. The result of the initializer has the same magnitude as magnitudeOf.\n\nDiscussion\n\nThe following example uses this initializer to create a new Double instance with the sign of a and the magnitude of b:\n\nlet a = -21.5\nlet b = 305.15\nlet c = Double(signOf: a, magnitudeOf: b)\nprint(c)\n// Prints \"-305.15\"\n\n\nThis initializer implements the IEEE 754 copysign operation.\n\nSee Also\nConverting Floating-Point Values\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit(Double)\nCreates a new instance initialized to the given value.\ninit(Float)\nCreates a new instance that approximates the given value.\ninit(Float16)\nCreates a new instance that approximates the given value.\ninit(Float80)\nCreates a new instance that approximates the given value.\ninit(sign: FloatingPointSign, exponent: Int, significand: Double)\nCreates a new value from the given sign, exponent, and significand.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit(truncating: NSNumber)"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-aeox",
    "html": "Parameters\nother\n\nThe value to use for the new instance.\n\nDiscussion\n\nThe value of other is rounded to a representable value, if necessary. A NaN passed as other results in another NaN, with a signaling NaN value converted to quiet NaN.\n\nlet x: Float16 = 21.25\nlet y = Double(x)\n// y == 21.25\n\n\nlet z = Double(Float16.nan)\n// z.isNaN == true\n\nSee Also\nConverting Floating-Point Values\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit(Double)\nCreates a new instance initialized to the given value.\ninit(Float)\nCreates a new instance that approximates the given value.\ninit(Float80)\nCreates a new instance that approximates the given value.\ninit(sign: FloatingPointSign, exponent: Int, significand: Double)\nCreates a new value from the given sign, exponent, and significand.\ninit(signOf: Double, magnitudeOf: Double)\nCreates a new floating-point value using the sign of one value and the magnitude of another.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit(truncating: NSNumber)"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-1oh9r",
    "html": "Parameters\nvalue\n\nThe integer to convert to a floating-point value.\n\nDiscussion\n\nIf two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.\n\nSee Also\nConverting Floating-Point Values\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit(Double)\nCreates a new instance initialized to the given value.\ninit(Float)\nCreates a new instance that approximates the given value.\ninit(Float16)\nCreates a new instance that approximates the given value.\ninit(Float80)\nCreates a new instance that approximates the given value.\ninit(sign: FloatingPointSign, exponent: Int, significand: Double)\nCreates a new value from the given sign, exponent, and significand.\ninit(signOf: Double, magnitudeOf: Double)\nCreates a new floating-point value using the sign of one value and the magnitude of another.\ninit(truncating: NSNumber)"
  },
  {
    "title": "init(truncating:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(truncating:)",
    "html": "See Also\nConverting Floating-Point Values\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit(Double)\nCreates a new instance initialized to the given value.\ninit(Float)\nCreates a new instance that approximates the given value.\ninit(Float16)\nCreates a new instance that approximates the given value.\ninit(Float80)\nCreates a new instance that approximates the given value.\ninit(sign: FloatingPointSign, exponent: Int, significand: Double)\nCreates a new value from the given sign, exponent, and significand.\ninit(signOf: Double, magnitudeOf: Double)\nCreates a new floating-point value using the sign of one value and the magnitude of another.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "random(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/random(in:)-6idef",
    "html": "Parameters\nrange\n\nThe range in which to create a random value. range must be finite and non-empty.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate a floating-point value within a specific range. This example creates three new values in the range 10.0 ..< 20.0.\n\nfor _ in 1...3 {\n    print(Double.random(in: 10.0 ..< 20.0))\n}\n// Prints \"18.1900709259179\"\n// Prints \"14.2286325689993\"\n// Prints \"13.1485686260762\"\n\n\nThe random() static method chooses a random value from a continuous uniform distribution in range, and then converts that value to the nearest representable value in this type. Depending on the size and span of range, some concrete values may be represented more frequently than others.\n\nThis method is equivalent to calling random(in:using:), passing in the system’s default random generator.\n\nSee Also\nCreating a Random Value\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(exactly:)-8esra",
    "html": "Parameters\nvalue\n\nA floating-point value to be converted.\n\nDiscussion\n\nIf the given floating-point value cannot be represented exactly, the result is nil.\n\nSee Also\nConverting with No Loss of Precision\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\ninit?(exactly: Double)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float16)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float80)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: NSNumber)"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(exactly:)-1h1oc",
    "html": "Parameters\nvalue\n\nThe integer to convert to a floating-point value.\n\nDiscussion\n\nIf the given integer cannot be represented exactly, the result is nil.\n\nSee Also\nConverting with No Loss of Precision\ninit?<Source>(exactly: Source)\nCreates a new instance from the given value, if it can be represented exactly.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\ninit?(exactly: Double)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float16)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float80)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: NSNumber)"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(exactly:)-2l6p1",
    "html": "Parameters\nother\n\nThe value to use for the new instance.\n\nDiscussion\n\nIf other can’t be represented as an instance of Double without rounding, the result of this initializer is nil. In particular, passing NaN as other always results in nil.\n\nlet x: Double = 21.25\nlet y = Double(exactly: x)\n// y == Optional.some(21.25)\n\n\nlet z = Double(exactly: Double.nan)\n// z == nil\n\nSee Also\nConverting with No Loss of Precision\ninit?<Source>(exactly: Source)\nCreates a new instance from the given value, if it can be represented exactly.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\ninit?(exactly: Float)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float16)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float80)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: NSNumber)"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(exactly:)-2uexo",
    "html": "Parameters\nvalue\n\nThe integer to convert to a floating-point value.\n\nDiscussion\n\nIf the given integer cannot be represented exactly, the result is nil.\n\nSee Also\nConverting with No Loss of Precision\ninit?<Source>(exactly: Source)\nCreates a new instance from the given value, if it can be represented exactly.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit?(exactly: Double)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float16)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float80)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: NSNumber)"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(exactly:)-7cl0t",
    "html": "Parameters\nother\n\nThe value to use for the new instance.\n\nDiscussion\n\nIf other can’t be represented as an instance of Double without rounding, the result of this initializer is nil. In particular, passing NaN as other always results in nil.\n\nlet x: Float = 21.25\nlet y = Double(exactly: x)\n// y == Optional.some(21.25)\n\n\nlet z = Double(exactly: Float.nan)\n// z == nil\n\nSee Also\nConverting with No Loss of Precision\ninit?<Source>(exactly: Source)\nCreates a new instance from the given value, if it can be represented exactly.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\ninit?(exactly: Double)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float16)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float80)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: NSNumber)"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(exactly:)-50ofc",
    "html": "Parameters\nother\n\nThe value to use for the new instance.\n\nDiscussion\n\nIf other can’t be represented as an instance of Double without rounding, the result of this initializer is nil. In particular, passing NaN as other always results in nil.\n\nlet x: Float16 = 21.25\nlet y = Double(exactly: x)\n// y == Optional.some(21.25)\n\n\nlet z = Double(exactly: Float16.nan)\n// z == nil\n\nSee Also\nConverting with No Loss of Precision\ninit?<Source>(exactly: Source)\nCreates a new instance from the given value, if it can be represented exactly.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\ninit?(exactly: Double)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float80)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: NSNumber)"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(exactly:)-63925",
    "html": "Parameters\nother\n\nThe value to use for the new instance.\n\nDiscussion\n\nIf other can’t be represented as an instance of Double without rounding, the result of this initializer is nil. In particular, passing NaN as other always results in nil.\n\nlet x: Float80 = 21.25\nlet y = Double(exactly: x)\n// y == Optional.some(21.25)\n\n\nlet z = Double(exactly: Float80.nan)\n// z == nil\n\nSee Also\nConverting with No Loss of Precision\ninit?<Source>(exactly: Source)\nCreates a new instance from the given value, if it can be represented exactly.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\ninit?(exactly: Double)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float16)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: NSNumber)"
  },
  {
    "title": "random(in:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/random(in:using:)-1m6gd",
    "html": "Parameters\nrange\n\nThe range in which to create a random value. range must be finite and non-empty.\n\ngenerator\n\nThe random number generator to use when creating the new random value.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate a floating-point value within a specific range when you are using a custom random number generator. This example creates three new values in the range 10.0 ..< 20.0.\n\nfor _ in 1...3 {\n    print(Double.random(in: 10.0 ..< 20.0, using: &myGenerator))\n}\n// Prints \"18.1900709259179\"\n// Prints \"14.2286325689993\"\n// Prints \"13.1485686260762\"\n\n\nThe random(in:using:) static method chooses a random value from a continuous uniform distribution in range, and then converts that value to the nearest representable value in this type. Depending on the size and span of range, some concrete values may be represented more frequently than others.\n\nNote\n\nThe algorithm used to create random values may change in a future version of Swift. If you’re passing a generator that results in the same sequence of floating-point values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.\n\nSee Also\nCreating a Random Value\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(exactly:)-8e00y",
    "html": "See Also\nConverting with No Loss of Precision\ninit?<Source>(exactly: Source)\nCreates a new instance from the given value, if it can be represented exactly.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\ninit?(exactly: Double)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float16)\nCreates a new instance initialized to the given value, if it can be represented without rounding.\ninit?(exactly: Float80)\nCreates a new instance initialized to the given value, if it can be represented without rounding."
  },
  {
    "title": "random(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/random(in:)-5o5ha",
    "html": "Parameters\nrange\n\nThe range in which to create a random value. Must be finite.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate a floating-point value within a specific range. This example creates three new values in the range 10.0 ... 20.0.\n\nfor _ in 1...3 {\n    print(Double.random(in: 10.0 ... 20.0))\n}\n// Prints \"18.1900709259179\"\n// Prints \"14.2286325689993\"\n// Prints \"13.1485686260762\"\n\n\nThe random() static method chooses a random value from a continuous uniform distribution in range, and then converts that value to the nearest representable value in this type. Depending on the size and span of range, some concrete values may be represented more frequently than others.\n\nThis method is equivalent to calling random(in:using:), passing in the system’s default random generator.\n\nSee Also\nCreating a Random Value\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/dictionary/values-swift.struct/iterator/next()",
    "html": "Return Value\n\nThe next element in the underlying sequence, if a next element exists; otherwise, nil.\n\nDiscussion\n\nRepeatedly calling this method returns, in order, all the elements of the underlying sequence. As soon as the sequence has run out of elements, all subsequent calls return nil.\n\nYou must not call this method if any other copy of this iterator has been advanced with a call to its next() method.\n\nThe following example shows how an iterator can be used explicitly to emulate a for-in loop. First, retrieve a sequence’s iterator, and then call the iterator’s next() method until it returns nil.\n\nlet numbers = [2, 3, 5, 7]\nvar numbersIterator = numbers.makeIterator()\n\n\nwhile let num = numbersIterator.next() {\n    print(num)\n}\n// Prints \"2\"\n// Prints \"3\"\n// Prints \"5\"\n// Prints \"7\"\n"
  },
  {
    "title": "random(in:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/random(in:using:)-613hz",
    "html": "Parameters\nrange\n\nThe range in which to create a random value. Must be finite.\n\ngenerator\n\nThe random number generator to use when creating the new random value.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate a floating-point value within a specific range when you are using a custom random number generator. This example creates three new values in the range 10.0 ... 20.0.\n\nfor _ in 1...3 {\n    print(Double.random(in: 10.0 ... 20.0, using: &myGenerator))\n}\n// Prints \"18.1900709259179\"\n// Prints \"14.2286325689993\"\n// Prints \"13.1485686260762\"\n\n\nThe random(in:using:) static method chooses a random value from a continuous uniform distribution in range, and then converts that value to the nearest representable value in this type. Depending on the size and span of range, some concrete values may be represented more frequently than others.\n\nNote\n\nThe algorithm used to create random values may change in a future version of Swift. If you’re passing a generator that results in the same sequence of floating-point values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.\n\nSee Also\nCreating a Random Value\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/iterator/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "addProduct(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/addproduct(_:_:)",
    "html": "Parameters\nlhs\n\nOne of the values to multiply before adding to this value.\n\nrhs\n\nThe other value to multiply.\n\nSee Also\nPerforming Calculations\nFloating-Point Operators for Double\nPerform arithmetic and bitwise operations or compare values.\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding.\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value.\nfunc formSquareRoot()\nReplaces this value with its square root, rounded to a representable value.\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value.\nfunc formRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value.\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division.\nfunc formTruncatingRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value using truncating division.\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "addingProduct(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/addingproduct(_:_:)",
    "html": "Parameters\nlhs\n\nOne of the values to multiply before adding to this value.\n\nrhs\n\nThe other value to multiply.\n\nReturn Value\n\nThe product of lhs and rhs, added to this value.\n\nDiscussion\n\nThis method is equivalent to the C fma function and implements the fusedMultiplyAdd operation defined by the IEEE 754 specification.\n\nSee Also\nPerforming Calculations\nFloating-Point Operators for Double\nPerform arithmetic and bitwise operations or compare values.\nfunc addProduct(Double, Double)\nAdds the product of the two given values to this value in place, computed without intermediate rounding.\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value.\nfunc formSquareRoot()\nReplaces this value with its square root, rounded to a representable value.\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value.\nfunc formRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value.\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division.\nfunc formTruncatingRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value using truncating division.\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> EnumeratedSequence<Base>.Iterator.Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Base conforms to Sequence.\nType Aliases\ntypealias Element\nThe type of element returned by next().\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "Floating-Point Operators for Double | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floating-point-operators-for-double",
    "html": "Topics\nArithmetic\nstatic func + (Double, Double) -> Double\nAdds two values and produces their sum, rounded to a representable value.\nstatic func - (Double, Double) -> Double\nSubtracts one value from another and produces their difference, rounded to a representable value.\nstatic func * (Double, Double) -> Double\nMultiplies two values and produces their product, rounding to a representable value.\nArithmetic with Assignment\nstatic func += (inout Double, Double)\nAdds two values and stores the result in the left-hand-side variable, rounded to a representable value.\nstatic func *= (inout Double, Double)\nMultiplies two values and stores the result in the left-hand-side variable, rounding to a representable value.\nComparison\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func != (Self, Self) -> Bool\nNegation\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nRange Expressions\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nSee Also\nPerforming Calculations\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding.\nfunc addProduct(Double, Double)\nAdds the product of the two given values to this value in place, computed without intermediate rounding.\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value.\nfunc formSquareRoot()\nReplaces this value with its square root, rounded to a representable value.\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value.\nfunc formRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value.\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division.\nfunc formTruncatingRemainder(dividingBy: Double)\nReplaces this value with the remainder of itself divided by the given value using truncating division.\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/underestimatedcount",
    "html": "Discussion\n\nThe default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively.\n\nComplexity\n\nO(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.\n\nReturn Value\n\nA sequence starting after the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nThe following example uses the drop(while:) method to skip over the positive numbers at the beginning of the numbers array. The result begins with the first element of numbers that does not satisfy predicate.\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nlet startingWithNegative = numbers.drop(while: { $0 > 0 })\n// startingWithNegative == [-2, 9, -6, 10, 1]\n\n\nIf predicate matches every element in the sequence, the result is an empty sequence.\n\nComplexity\n\nO(k), where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the sequence. k must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/droplast(_:)",
    "html": "Parameters\nn\n\nThe number of elements to drop off the end of the sequence. n must be greater than or equal to zero.\n\nReturn Value\n\nA sequence leaving off the specified number of elements.\n\nDiscussion\n\nThe sequence must be finite. If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "BinaryFloatingPoint Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/binaryfloatingpoint-implementations",
    "html": "Topics\nInitializers\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit(Float)\nCreates a new instance that approximates the given value.\ninit(Float80)\nCreates a new instance that approximates the given value.\ninit(Double)\nCreates a new instance initialized to the given value.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit?<Source>(exactly: Source)\nCreates a new instance from the given value, if it can be represented exactly.\ninit(sign: FloatingPointSign, exponentBitPattern: UInt, significandBitPattern: UInt64)\nCreates a new instance from the specified sign and bit patterns.\nInstance Properties\nvar binade: Double\nThe floating-point value with the same sign and exponent as this value, but with a significand of 1.0.\nvar exponentBitPattern: UInt\nThe raw encoding of the value’s exponent field.\nvar significandBitPattern: UInt64\nThe raw encoding of the value’s significand field.\nvar significandWidth: Int\nThe number of bits required to represent the value’s significand.\nType Aliases\ntypealias RawExponent\nA type that represents the encoded exponent of a value.\ntypealias RawSignificand\nA type that represents the encoded significand of a value.\nType Properties\nstatic var exponentBitCount: Int\nThe number of bits used to represent the type’s exponent.\nstatic var significandBitCount: Int\nThe available number of fractional significand bits.\nType Methods\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-8kme5",
    "html": "See Also\nDeprecated\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for the Double instance.\nDeprecated"
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of the value, suitable for debugging."
  },
  {
    "title": "AdditiveArithmetic Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/additivearithmetic-implementations",
    "html": "Topics\nOperators\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func += (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func -= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable.\nType Properties\nstatic var zero: Self\nThe zero value.\nAvailable when Self conforms to ExpressibleByIntegerLiteral."
  },
  {
    "title": "Numeric Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/numeric-implementations",
    "html": "Topics\nInstance Properties\nvar magnitude: Double\nThe magnitude of this value.\nType Aliases\ntypealias Magnitude\nA type that can represent the absolute value of any possible value of the conforming type."
  },
  {
    "title": "MLDataValueConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/mldatavalueconvertible-implementations",
    "html": "Topics\nInitializers\ninit?(from: MLDataValue)\nCreates an instance of the conforming type from a data value.\nInstance Properties\nvar dataValue: MLDataValue\nThe value of the conforming type’s instance wrapped in a data value.\nType Properties\nstatic var dataValueType: MLDataValue.ValueType\nThe underlying type the conforming type uses when it wraps itself in a data value."
  },
  {
    "title": "LosslessStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/losslessstringconvertible-implementations",
    "html": "Topics\nInitializers\ninit?<S>(S)\nCreates a new instance from the given string."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-84ohu",
    "html": "Parameters\nvalue\n\nThe integer to convert to a floating-point value.\n\nDiscussion\n\nIf two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.\n\nSee Also\nConverting Integers\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation."
  },
  {
    "title": "TaskGroup.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/iterator",
    "html": "Overview\n\nThe elements returned by this iterator appear in the order that the tasks completed, not in the order that those tasks were added to the task group.\n\nThis iterator terminates after all tasks have completed. After iterating over the results of each task, it’s valid to make a new iterator for the task group, which you can use to iterate over the results of new tasks you add to the group. For example:\n\ngroup.addTask { 1 }\nfor await r in group { print(r) }\n\n\n// Add a new child task and iterate again.\ngroup.addTask { 2 }\nfor await r in group { print(r) }\n\n\nSee Also\n\nTaskGroup.next()\n\nTopics\nInstance Methods\nfunc cancel()\nfunc next() async -> TaskGroup<ChildTaskResult>.Iterator.Element?\nAdvances to and returns the result of the next child task.\nType Aliases\ntypealias Element\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nSupporting Types\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable."
  },
  {
    "title": "async(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/async(priority:operation:)",
    "html": "See Also\nDeprecated\nfunc add(priority: TaskPriority?, operation: () async -> ChildTaskResult) async -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc asyncUnlessCancelled(priority: TaskPriority?, operation: () async -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc spawn(priority: TaskPriority?, operation: () async -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc spawnUnlessCancelled(priority: TaskPriority?, operation: () async -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated"
  },
  {
    "title": "runSynchronously(on:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/job/runsynchronously(on:)",
    "html": "Parameters\nexecutor\n\nthe executor this job will be semantically running on.\n\nDiscussion\n\nThis operation runs the job on the calling thread and blocks until the job completes. The intended use of this method is for an executor to determine when and where it wants to run the job and then call this method on it.\n\nThe passed in executor reference is used to establish the executor context for the job, and should be the same executor as the one semantically calling the runSynchronously method.\n\nThis operation consumes the job, preventing it accidental use after it has ben run.\n\nConverting a ExecutorJob to an UnownedJob and invoking ``UnownedJob/runSynchronously(_:)` on it multiple times is undefined behavior, as a job can only ever be run once, and must not be accessed after it has been run."
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/suffix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. The value of maxLength must be greater than or equal to zero.\n\nDiscussion\n\nThe sequence must be finite. If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anycollection/init(_:)-8k2a5",
    "html": "Parameters\nbase\n\nThe collection to wrap.\n\nDiscussion\n\nComplexity\n\nO(1)."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/flatmap(_:)-4t5x2",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/map(_:)",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anycollection/init(_:)-1jdmb",
    "html": "Discussion\n\nComplexity\n\nO(1)"
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. The value of maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting at the beginning of this sequence with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.\n\nReturn Value\n\nA sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nThe following example uses the prefix(while:) method to find the positive numbers at the beginning of the numbers array. Every element of numbers up to, but not including, the first negative value is included in the result.\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nlet positivePrefix = numbers.prefix(while: { $0 > 0 })\n// positivePrefix == [3, 7, 4]\n\n\nIf predicate matches every element in the sequence, the resulting sequence contains every element of the sequence.\n\nComplexity\n\nO(k), where k is the length of the result."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/withcontiguousstorageifavailable(_:)",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "reversed() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/reversed()",
    "html": "Return Value\n\nAn array containing the elements of this sequence in reverse order.\n\nDiscussion\n\nThe sequence must be finite.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anycollection/init(_:)-9mgej",
    "html": "Parameters\nbase\n\nThe collection to wrap.\n\nDiscussion\n\nComplexity\n\nO(1)."
  },
  {
    "title": "shuffled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/shuffled()",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/double/init(_:)-9z7ob",
    "html": "Parameters\nother\n\nThe value to use for the new instance.\n\nDiscussion\n\nThe value of other is rounded to a representable value, if necessary. A NaN passed as other results in another NaN, with a signaling NaN value converted to quiet NaN.\n\nlet x: Float80 = 21.25\nlet y = Double(x)\n// y == 21.25\n\n\nlet z = Double(Float80.nan)\n// z.isNaN == true\n\nSee Also\nConverting Floating-Point Values\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit(Double)\nCreates a new instance initialized to the given value.\ninit(Float)\nCreates a new instance that approximates the given value.\ninit(Float16)\nCreates a new instance that approximates the given value.\ninit(sign: FloatingPointSign, exponent: Int, significand: Double)\nCreates a new value from the given sign, exponent, and significand.\ninit(signOf: Double, magnitudeOf: Double)\nCreates a new floating-point value using the sign of one value and the magnitude of another.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit(truncating: NSNumber)"
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/compactmap(_:)-7mgj1",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/next()",
    "html": "Return Value\n\nThe value returned by the next child task that completes.\n\nDiscussion\n\nThe values returned by successive calls to this method appear in the order that the tasks completed, not in the order that those tasks were added to the task group. For example:\n\ngroup.addTask { 1 }\ngroup.addTask { 2 }\n\n\nprint(await group.next())\n// Prints either \"2\" or \"1\".\n\n\nIf there aren’t any pending tasks in the task group, this method returns nil, which lets you write the following to wait for a single task to complete:\n\nif let first = try await group.next() {\n   return first\n}\n\n\nIt also lets you write code like the following to wait for all the child tasks to complete, collecting the values they returned:\n\nwhile let first = try await group.next() {\n   collected += value\n}\nreturn collected\n\n\nAwaiting on an empty group immediate returns nil without suspending.\n\nYou can also use a for-await-in loop to collect results of a task group:\n\nfor await try value in group {\n    collected += value\n}\n\n\nDon’t call this method from outside the task where you created this task group. In most cases, the Swift type system prevents this mistake. For example, because the add(priority:operation:) method is mutating, that method can’t be called from a concurrent execution context like a child task.\n\nSee Also\nAccessing Individual Results\nvar isEmpty: Bool\nA Boolean value that indicates whether the group has any remaining tasks.\nfunc waitForAll() async\nWait for all of the group’s remaining tasks to complete."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/isempty",
    "html": "Return Value\n\ntrue if the group has no pending tasks; otherwise false.\n\nDiscussion\n\nAt the start of the body of a withTaskGroup(of:returning:body:) call, the task group is always empty. It`s guaranteed to be empty when returning from that body because a task group waits for all child tasks to complete before returning.\n\nSee Also\nAccessing Individual Results\nfunc next() async -> ChildTaskResult?\nWait for the next child task to complete, and return the value it returned.\nfunc waitForAll() async\nWait for all of the group’s remaining tasks to complete."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "addTaskUnlessCancelled(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/addtaskunlesscancelled(priority:operation:)",
    "html": "Parameters\npriority\n\nThe priority of the operation task. Omit this parameter or pass .unspecified to set the child task’s priority to the priority of the group.\n\noperation\n\nThe operation to execute as part of the task group.\n\nReturn Value\n\ntrue if the child task was added to the group; otherwise false.\n\nSee Also\nAdding Tasks to a Task Group\nfunc addTask(priority: TaskPriority?, operation: () async -> ChildTaskResult)\nAdds a child task to the group."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "init(complexEquality:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unownedserialexecutor/init(complexequality:)",
    "html": "Discussion\n\nThis means what when asserting or assuming executors, and the current and expected executor are not the same instance (by object equality), the runtime may invoke isSameExclusiveExecutionContext in order to compare the executors for equality.\n\nImplementing such complex equality can be useful if multiple executor instances actually use the same underlying serialization context and can be therefore safely treated as the same serial exclusive execution context (e.g. multiple dispatch queues targeting the same serial queue)."
  },
  {
    "title": "cancelAll() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/discardingtaskgroup/cancelall()",
    "html": "Discussion\n\nIf you add a task to a group after canceling the group, that task is canceled immediately after being added to the group.\n\nImmediately cancelled child tasks should therefore cooperatively check for and react to cancellation, e.g. by throwing an CancellationError at their earliest convenience, or otherwise handling the cancellation.\n\nThere are no restrictions on where you can call this method. Code inside a child task or even another task can cancel a group, however one should be very careful to not keep a reference to the group longer than the with...TaskGroup(...) { ... } method body is executing.\n\nSee Also\n\nTask.isCancelled\n\nSee Also\n\nDiscardingTaskGroup.isCancelled"
  },
  {
    "title": "addTask(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/discardingtaskgroup/addtask(priority:operation:)",
    "html": "Parameters\npriority\n\nThe priority of the operation task. Omit this parameter or pass .unspecified to set the child task’s priority to the priority of the group.\n\noperation\n\nThe operation to execute as part of the task group."
  },
  {
    "title": "addTaskUnlessCancelled(operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/discardingtaskgroup/addtaskunlesscancelled(operation:)",
    "html": "Parameters\noperation\n\nThe operation to execute as part of the task group.\n\nReturn Value\n\ntrue if the child task was added to the group; otherwise false."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/zip2sequence/sequence-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nAn iterator for Zip2Sequence.\nAvailable when Sequence1 conforms to Sequence and Sequence2 conforms to Sequence.\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nAvailable when Sequence1 conforms to Sequence and Sequence2 conforms to Sequence.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Zip2Sequence<Sequence1, Sequence2>.Iterator\nReturns an iterator over the elements of this sequence.\nAvailable when Sequence1 conforms to Sequence and Sequence2 conforms to Sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements.\nAvailable when Sequence1 conforms to Sequence and Sequence2 conforms to Sequence."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/discardingtaskgroup/isempty",
    "html": "Return Value\n\ntrue if the group has no pending tasks; otherwise false.\n\nDiscussion\n\nAt the start of the body of a withDiscardingTaskGroup(of:returning:body:) call, the task group is always empty.\n\nIt’s guaranteed to be empty when returning from that body because a task group waits for all child tasks to complete before returning."
  },
  {
    "title": "spawn(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/spawn(priority:operation:)",
    "html": "See Also\nDeprecated\nfunc add(priority: TaskPriority?, operation: () async -> ChildTaskResult) async -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc async(priority: TaskPriority?, operation: () async -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc asyncUnlessCancelled(priority: TaskPriority?, operation: () async -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc spawnUnlessCancelled(priority: TaskPriority?, operation: () async -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated"
  },
  {
    "title": "add(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/add(priority:operation:)",
    "html": "See Also\nDeprecated\nfunc async(priority: TaskPriority?, operation: () async -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc asyncUnlessCancelled(priority: TaskPriority?, operation: () async -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc spawn(priority: TaskPriority?, operation: () async -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc spawnUnlessCancelled(priority: TaskPriority?, operation: () async -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated"
  },
  {
    "title": "spawnUnlessCancelled(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/spawnunlesscancelled(priority:operation:)",
    "html": "See Also\nDeprecated\nfunc add(priority: TaskPriority?, operation: () async -> ChildTaskResult) async -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc async(priority: TaskPriority?, operation: () async -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc asyncUnlessCancelled(priority: TaskPriority?, operation: () async -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc spawn(priority: TaskPriority?, operation: () async -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated"
  },
  {
    "title": "TaskGroup.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/element",
    "html": "See Also\nSupporting Types\nstruct Iterator\nA type that provides an iteration interface over the results of tasks added to the group.\nAvailable when ChildTaskResult conforms to Sendable.\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable."
  },
  {
    "title": "asyncUnlessCancelled(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/asyncunlesscancelled(priority:operation:)",
    "html": "See Also\nDeprecated\nfunc add(priority: TaskPriority?, operation: () async -> ChildTaskResult) async -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc async(priority: TaskPriority?, operation: () async -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc spawn(priority: TaskPriority?, operation: () async -> ChildTaskResult)\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated\nfunc spawnUnlessCancelled(priority: TaskPriority?, operation: () async -> ChildTaskResult) -> Bool\nAvailable when ChildTaskResult conforms to Sendable.\nDeprecated"
  },
  {
    "title": "isCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/discardingtaskgroup/iscancelled",
    "html": "Discussion\n\nTo cancel a group, call the DiscardingTaskGroup.cancelAll() method.\n\nIf the task that’s currently running this group is canceled, the group is also implicitly canceled, which is also reflected in this property’s value."
  },
  {
    "title": "TaskGroup.AsyncIterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/asynciterator",
    "html": "See Also\nSupporting Types\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nstruct Iterator\nA type that provides an iteration interface over the results of tasks added to the group.\nAvailable when ChildTaskResult conforms to Sendable."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the sequence satisfying the isSeparator predicate. If true, only nonempty subsequences are returned. The default value is true.\n\nisSeparator\n\nA closure that returns true if its argument should be used to split the sequence; otherwise, false.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" })\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(\n   line.split(maxSplits: 1, whereSeparator: { $0 == \" \" })\n                  .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes true for the allowEmptySlices parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(\n    line.split(\n        omittingEmptySubsequences: false,\n        whereSeparator: { $0 == \" \" }\n    ).map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "starts(with:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/enumeratedsequence/starts(with:by:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anycollection/init(_:)-33dcu",
    "html": "Parameters\nbase\n\nThe collection to wrap.\n\nDiscussion\n\nComplexity\n\nO(1)."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anycollection/init(_:)-598x3",
    "html": "Discussion\n\nComplexity\n\nO(1)"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anycollection/init(_:)-91xl3",
    "html": "Discussion\n\nComplexity\n\nO(1)"
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/utf8view/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: Substring.UTF8View.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar first: Self.Element?\nThe first element of the collection.\nvar indices: Substring.UTF8View.Indices\nThe indices that are valid for subscripting the collection, in ascending order.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: Substring.UTF8View.Index\nThe position of the first element in a nonempty collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc distance(from: Substring.UTF8View.Index, to: Substring.UTF8View.Index) -> Int\nReturns the distance between two indices.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Substring.UTF8View.Index)\nReplaces the given index with its successor.\nfunc index(Substring.UTF8View.Index, offsetBy: Int) -> Substring.UTF8View.Index\nReturns an index that is the specified distance from the given index.\nfunc index(Substring.UTF8View.Index, offsetBy: Int, limitedBy: Substring.UTF8View.Index) -> Substring.UTF8View.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: Substring.UTF8View.Index) -> Substring.UTF8View.Index\nReturns the position immediately after the given index.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc popFirst() -> Self.Element?\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nAvailable when Self is Self.SubSequence.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript(Range<Substring.UTF8View.Index>) -> Substring.UTF8View\nAccesses a contiguous subrange of the collection’s elements.\nsubscript(Substring.UTF8View.Index) -> Substring.UTF8View.Element\nAccesses the element at the specified position.\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc formIndex(before: inout Slice<Base>.Index)\nReplaces the given index with its predecessor.\nAvailable when Base conforms to BidirectionalCollection.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc index(before: Slice<Base>.Index) -> Slice<Base>.Index\nReturns the position immediately before the given index.\nAvailable when Base conforms to BidirectionalCollection.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element is String.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nAvailable when Self is Self.SubSequence."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/utf8view/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Substring.UTF8View.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The max() method returns the max value of the sequence.\n\nlet max = await Counter(howHigh: 10)\n    .max()\nprint(max ?? \"none\")\n// Prints \"10\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The min() method returns the minimum value of the sequence.\n\nlet min = await Counter(howHigh: 10)\n    .min()\nprint(min ?? \"none\")\n// Prints \"1\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/map(_:)-4a4kq",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/map(_:)-58nsr",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "cancelAll() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/cancelall()",
    "html": "Discussion\n\nIf you add a task to a group after canceling the group, that task is canceled immediately after being added to the group.\n\nImmediately cancelled child tasks should therefore cooperatively check for and react to cancellation, e.g. by throwing an CancellationError at their earliest convenience, or otherwise handling the cancellation.\n\nThere are no restrictions on where you can call this method. Code inside a child task or even another task can cancel a group, however one should be very careful to not keep a reference to the group longer than the with...TaskGroup(...) { ... } method body is executing.\n\nSee Also\n\nTask.isCancelled\n\nSee Also\n\nTaskGroup.isCancelled\n\nSee Also\nCanceling Tasks\nvar isCancelled: Bool\nA Boolean value that indicates whether the group was canceled."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/flatmap(_:)-49zb",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/flatmap(_:)-vhi3",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/dropfirst(_:)",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/compactmap(_:)-944od",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/contains(_:)",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/makeasynciterator()",
    "html": "Return Value\n\nAn instance of the AsyncIterator type used to produce elements of the asynchronous sequence.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "addTask(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/addtask(priority:operation:)",
    "html": "Parameters\npriority\n\nThe priority of the operation task. Omit this parameter or pass .unspecified to set the child task’s priority to the priority of the group.\n\noperation\n\nThe operation to execute as part of the task group.\n\nSee Also\nAdding Tasks to a Task Group\nfunc addTaskUnlessCancelled(priority: TaskPriority?, operation: () async -> ChildTaskResult) -> Bool\nAdds a child task to the group, unless the group has been canceled."
  },
  {
    "title": "waitForAll() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/waitforall()",
    "html": "See Also\nAccessing Individual Results\nfunc next() async -> ChildTaskResult?\nWait for the next child task to complete, and return the value it returned.\nvar isEmpty: Bool\nA Boolean value that indicates whether the group has any remaining tasks."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/utf16view/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/utf16view/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/utf16view/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anycollection/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anycollection/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements.\nvar endIndex: AnyCollection<Element>.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar first: Self.Element?\nThe first element of the collection.\nvar indices: DefaultIndices<Self>\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Indices is DefaultIndices<Self>.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: AnyCollection<Element>.Index\nThe position of the first element in a non-empty collection.\nInstance Methods\nfunc distance(from: AnyCollection<Element>.Index, to: AnyCollection<Element>.Index) -> Int\nReturns the distance between two indices.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(after: inout AnyCollection<Element>.Index)\nReplaces the given index with its successor.\nfunc index(AnyCollection<Element>.Index, offsetBy: Int) -> AnyCollection<Element>.Index\nReturns an index that is the specified distance from the given index.\nfunc index(AnyCollection<Element>.Index, offsetBy: Int, limitedBy: AnyCollection<Element>.Index) -> AnyCollection<Element>.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: AnyCollection<Element>.Index) -> AnyCollection<Element>.Index\nReturns the position immediately after the given index.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> AnyCollection<Element>.Iterator\nReturns an iterator over the elements of this collection.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc popFirst() -> Self.Element?\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nAvailable when Self is Self.SubSequence.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript(AnyCollection<Element>.Index) -> Element\nAccesses the element indicated by position.\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript(Range<AnyCollection<Element>.Index>) -> AnyCollection<Element>.SubSequence\nAccesses a contiguous subrange of the collection’s elements.\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "UInt8.Words.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "UInt16.Words.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "addTaskUnlessCancelled(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/discardingtaskgroup/addtaskunlesscancelled(priority:operation:)",
    "html": "Parameters\npriority\n\nThe priority of the operation task. Omit this parameter or pass .unspecified to set the child task’s priority to the priority of the group.\n\noperation\n\nThe operation to execute as part of the task group.\n\nReturn Value\n\ntrue if the child task was added to the group; otherwise false."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/utf16view/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: Substring.UTF16View.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: Substring.UTF16View.Index\nThe position of the first element in a nonempty collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc popFirst() -> Self.Element?\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nAvailable when Self is Self.SubSequence.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript(Substring.UTF16View.Index) -> Substring.UTF16View.Element\nAccesses the element at the specified position.\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "storeBytes(of:toByteOffset:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/storebytes(of:tobyteoffset:as:)",
    "html": "Parameters\nvalue\n\nThe value to store as raw bytes.\n\noffset\n\nThe offset in bytes into the buffer pointer slice’s memory to begin writing bytes from the value. The default is zero.\n\ntype\n\nThe type to use for the newly constructed instance. The memory must be initialized to a value of a type that is layout compatible with type.\n\nDiscussion\n\nThe type T to be stored must be a trivial type. The memory must also be uninitialized, initialized to T, or initialized to another trivial type that is layout compatible with T.\n\nThe memory written to must not extend beyond the memory region represented by the buffer pointer slice—that is, offset + MemoryLayout<T>.size must be less than or equal to the slice’s count.\n\nAfter calling storeBytes(of:toByteOffset:as:), the memory is initialized to the raw bytes of value. If the memory is bound to a type U that is layout compatible with T, then it contains a value of type U. Calling storeBytes(of:toByteOffset:as:) does not change the bound type of the memory.\n\nNote\n\nA trivial type can be copied with just a bit-for-bit copy without any indirection or reference-counting operations. Generally, native Swift types that do not contain strong or weak references or other forms of indirection are trivial, as are imported C structs and enums.\n\nIf you need to store into memory a copy of a value of a type that isn’t trivial, you cannot use the storeBytes(of:toByteOffset:as:) method. Instead, you must know either initialize the memory or, if you know the memory was already bound to type, assign to the memory."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Slice<Base>.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nAvailable when Base conforms to Collection.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements.\nAvailable when Base conforms to Collection."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/compactmap(_:)-2ra13",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "UInt32.Words.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "UInt32.Words.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "UInt32.Words.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/utf8view/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Substring.UTF8View.Index)\nReplaces the given index with its predecessor.\nfunc index(before: Substring.UTF8View.Index) -> Substring.UTF8View.Index\nReturns the position immediately before the given index.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nAvailable when Self is Self.SubSequence.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/prefix(_:)",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nAccessing an Asynchronous Sequence of Results\nfunc makeAsyncIterator() -> TaskGroup<ChildTaskResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when ChildTaskResult conforms to Sendable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "isCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/taskgroup/iscancelled",
    "html": "Discussion\n\nTo cancel a group, call the TaskGroup.cancelAll() method.\n\nIf the task that’s currently running this group is canceled, the group is also implicitly canceled, which is also reflected in this property’s value.\n\nSee Also\nCanceling Tasks\nfunc cancelAll()\nCancel all of the remaining tasks in the group."
  },
  {
    "title": "TicTacFish: Implementing a game using distributed actors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/tictacfish_implementing_a_game_using_distributed_actors",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC22 session 110356: Meet distributed actors in Swift.\n\nConfigure the sample code project\n\nBecause the sample app uses new Swift language features introduced in Swift 5.7, you need at least the following versions of iOS, macOS, and Xcode to edit and run the samples:\n\nTo run the iOS app:\n\niOS 16\n\nmacOS 13\n\nXcode 14\n\nTo run the server-side application on your local Mac:\n\nmacOS 13\n\nXcode 14\n\nTo run the server-side application on a Linux server, compile and run the Server package using:\n\nAny supported Linux distribution\n\nSwift 5.7\n\nYou can try out the peer-to-peer local networking part of the sample app by starting multiple simulators (such as an iPhone 13 and an iPhone 13 Pro) from the same Xcode project.\n\nSee Also\nStandard Library\nstruct Int\nA signed integer value type.\nstruct Double\nA double-precision, floating-point value type.\nstruct String\nA Unicode string value that is a collection of characters.\nstruct Array\nAn ordered, random-access collection.\nstruct Dictionary\nA collection whose elements are key-value pairs.\nSwift Standard Library\nSolve complex problems and write high-performance, readable code.\nUpdating an App to Use Swift Concurrency\nImprove your app’s performance by refactoring your code to take advantage of asynchronous functions in Swift."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/scalar/utf16view/randomaccesscollection-implementations",
    "html": "Topics\nInstance Properties\nvar endIndex: Int\nThe “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar startIndex: Int\nThe position of the first code unit.\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nSubscripts\nsubscript(Int) -> UTF16.CodeUnit\nAccesses the code unit at the specified position."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "UInt8.Words.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "UInt8.Words.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/words-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "moveInitialize(fromContentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/moveinitialize(fromcontentsof:)-iasq",
    "html": "Parameters\nsource\n\nA buffer slice containing the values to copy. The memory region underlying source must be initialized.\n\nReturn Value\n\nThe index one past the last element of the buffer slice initialized by this function.\n\nDiscussion\n\nPrior to calling the moveInitialize(fromContentsOf:) method on a buffer slice, the memory it references must be uninitialized, or its Element type must be a trivial type. After the call, the memory referenced by the buffer slice up to, but not including, the returned index is initialized. The memory referenced by source is uninitialized after the function returns. The buffer slice must reference enough memory to accommodate source.count elements.\n\nThe returned index is the position of the next uninitialized element in the buffer slice, one past the index of the last element written. If source contains no elements, the returned index is equal to the slice’s startIndex. If source contains as many elements as the slice can hold, the returned index is equal to the slice’s endIndex.\n\nNote\n\nThe memory regions referenced by source and this buffer slice may overlap.\n\nPrecondition\n\nself.count >= source.count"
  },
  {
    "title": "moveInitialize(fromContentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/moveinitialize(fromcontentsof:)-82ebd",
    "html": "Parameters\nsource\n\nA buffer containing the values to copy. The memory region underlying source must be initialized.\n\nReturn Value\n\nThe index one past the last element of the buffer slice initialized by this function.\n\nDiscussion\n\nPrior to calling the moveInitialize(fromContentsOf:) method on a buffer slice, the memory it references must be uninitialized, or its Element type must be a trivial type. After the call, the memory referenced by the buffer slice up to, but not including, the returned index is initialized. The memory referenced by source is uninitialized after the function returns. The buffer slice must reference enough memory to accommodate source.count elements.\n\nThe returned index is the position of the next uninitialized element in the buffer slice, one past the index of the last element written. If source contains no elements, the returned index is equal to the slice’s startIndex. If source contains as many elements as the slice can hold, the returned index is equal to the slice’s endIndex.\n\nNote\n\nThe memory regions referenced by source and this buffer slice may overlap.\n\nPrecondition\n\nself.count >= source.count"
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "UInt16.Words.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/utf16view/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar indices: Substring.UTF16View.Indices\nThe indices that are valid for subscripting the collection, in ascending order.\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc distance(from: Substring.UTF16View.Index, to: Substring.UTF16View.Index) -> Int\nReturns the distance between two indices.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(after: inout Substring.UTF16View.Index)\nReplaces the given index with its successor.\nfunc formIndex(before: inout Substring.UTF16View.Index)\nReplaces the given index with its predecessor.\nfunc index(Substring.UTF16View.Index, offsetBy: Int) -> Substring.UTF16View.Index\nReturns an index that is the specified distance from the given index.\nfunc index(Substring.UTF16View.Index, offsetBy: Int, limitedBy: Substring.UTF16View.Index) -> Substring.UTF16View.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: Substring.UTF16View.Index) -> Substring.UTF16View.Index\nReturns the position immediately after the given index.\nfunc index(before: Substring.UTF16View.Index) -> Substring.UTF16View.Index\nReturns the position immediately before the given index.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nAvailable when Self is Self.SubSequence.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nSubscripts\nsubscript(Range<Substring.UTF16View.Index>) -> Substring.UTF16View\nAccesses a contiguous subrange of the collection’s elements."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/utf16view/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements."
  },
  {
    "title": "hasSuffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/hassuffix(_:)",
    "html": "Parameters\nsuffix\n\nA possible suffix to test against this string.\n\nReturn Value\n\ntrue if the string ends with suffix; otherwise, false.\n\nDiscussion\n\nThe comparison is both case sensitive and Unicode safe. The case-sensitive comparison will only match strings whose corresponding characters have the same case.\n\nlet plans = \"Let's meet at the café\"\n\n\n// Case sensitive\nprint(plans.hasSuffix(\"Café\"))\n// Prints \"false\"\n\n\nThe Unicode-safe comparison matches Unicode extended grapheme clusters rather than the code points used to compose them. The example below uses two strings with different forms of the \"é\" character—the first uses the composed form and the second uses the decomposed form.\n\n// Unicode safe\nlet composedCafe = \"café\"\nlet decomposedCafe = \"cafe\\u{0301}\"\n\n\nprint(plans.hasSuffix(composedCafe))\n// Prints \"true\"\nprint(plans.hasSuffix(decomposedCafe))\n// Prints \"true\"\n"
  },
  {
    "title": "init(cString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/init(cstring:)",
    "html": "Parameters\nnullTerminatedUTF8\n\nA pointer to a sequence of contiguous, UTF-8 encoded bytes ending just before the first zero byte."
  },
  {
    "title": "hasPrefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/hasprefix(_:)",
    "html": "Parameters\nprefix\n\nA possible prefix to test against this string.\n\nReturn Value\n\ntrue if the string begins with prefix; otherwise, false.\n\nDiscussion\n\nThe comparison is both case sensitive and Unicode safe. The case-sensitive comparison will only match strings whose corresponding characters have the same case.\n\nlet cafe = \"Café du Monde\"\n\n\n// Case sensitive\nprint(cafe.hasPrefix(\"café\"))\n// Prints \"false\"\n\n\nThe Unicode-safe comparison matches Unicode extended grapheme clusters rather than the code points used to compose them. The example below uses two strings with different forms of the \"é\" character—the first uses the composed form and the second uses the decomposed form.\n\n// Unicode safe\nlet composedCafe = \"Café\"\nlet decomposedCafe = \"Cafe\\u{0301}\"\n\n\nprint(cafe.hasPrefix(composedCafe))\n// Prints \"true\"\nprint(cafe.hasPrefix(decomposedCafe))\n// Prints \"true\"\n"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance."
  },
  {
    "title": "RangeReplaceableCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/rangereplaceablecollection-implementations",
    "html": "Topics\nOperators\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection.\nInitializers\ninit()\nCreates a new, empty collection.\nAvailable when Base conforms to RangeReplaceableCollection.\ninit<S>(S)\nCreates a new instance of a collection containing the elements of a sequence.\nAvailable when Base conforms to RangeReplaceableCollection.\ninit<S>(S)\nCreates a new instance of a collection containing the elements of a sequence.\ninit(repeating: Self.Element, count: Int)\nCreates a new collection containing the specified number of a single, repeated value.\ninit(repeating: Base.Element, count: Int)\nCreates a new collection containing the specified number of a single, repeated value.\nAvailable when Base conforms to RangeReplaceableCollection.\nInstance Methods\nfunc append(Self.Element)\nAdds an element to the end of the collection.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc applying(CollectionDifference<Self.Element>) -> Self?\nApplies the given difference to this collection.\nfunc insert(Base.Element, at: Slice<Base>.Index)\nInserts a new element into the collection at the specified position.\nAvailable when Base conforms to RangeReplaceableCollection.\nfunc insert(Self.Element, at: Self.Index)\nInserts a new element into the collection at the specified position.\nfunc insert<S>(contentsOf: S, at: Slice<Base>.Index)\nInserts the elements of a sequence into the collection at the specified position.\nAvailable when Base conforms to RangeReplaceableCollection.\nfunc insert<C>(contentsOf: C, at: Self.Index)\nInserts the elements of a sequence into the collection at the specified position.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection and Self is Self.SubSequence.\nfunc remove(at: Slice<Base>.Index) -> Base.Element\nRemoves and returns the element at the specified position.\nAvailable when Base conforms to RangeReplaceableCollection.\nfunc remove(at: Self.Index) -> Self.Element\nRemoves and returns the element at the specified position.\nfunc removeAll(keepingCapacity: Bool)\nRemoves all elements from the collection.\nfunc removeAll(where: (Self.Element) throws -> Bool) rethrows\nRemoves all the elements that satisfy the given predicate.\nfunc removeAll(where: (Self.Element) throws -> Bool) rethrows\nRemoves all the elements that satisfy the given predicate.\nAvailable when Self conforms to MutableCollection.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection and Self is Self.SubSequence.\nfunc removeLast(Int)\nRemoves the specified number of elements from the end of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc removeLast(Int)\nRemoves the specified number of elements from the end of the collection.\nAvailable when Self conforms to BidirectionalCollection and Self is Self.SubSequence.\nfunc removeSubrange<R>(R)\nRemoves the elements in the specified subrange from the collection.\nfunc removeSubrange(Range<Slice<Base>.Index>)\nRemoves the specified subrange of elements from the collection.\nAvailable when Base conforms to RangeReplaceableCollection.\nfunc removeSubrange(Range<Self.Index>)\nRemoves the elements in the specified subrange from the collection.\nfunc replaceSubrange<C>(Range<Self.Index>, with: C)\nReplaces the specified subrange of elements with the given collection.\nDeprecated\nfunc replaceSubrange<C, R>(R, with: C)\nReplaces the specified subrange of elements with the given collection.\nfunc replaceSubrange<C>(Range<Slice<Base>.Index>, with: C)\nReplaces the specified subrange of elements with the given collection.\nAvailable when Base conforms to RangeReplaceableCollection.\nfunc reserveCapacity(Int)\nPrepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type."
  },
  {
    "title": "withCString(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/withcstring(_:)",
    "html": "Parameters\nbody\n\nA closure with a pointer parameter that points to a null-terminated sequence of UTF-8 code units. If body has a return value, that value is also used as the return value for the withCString(_:) method. The pointer argument is valid only for the duration of the method’s execution.\n\nReturn Value\n\nThe return value, if any, of the body closure parameter.\n\nDiscussion\n\nThe pointer passed as an argument to body is valid only during the execution of withCString(_:). Do not store or return the pointer for later use."
  },
  {
    "title": "MutableCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/mutablecollection-implementations",
    "html": "Topics\nInstance Methods\nfunc partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nfunc partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index\nReorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.\nAvailable when Self conforms to BidirectionalCollection.\nfunc reverse()\nReverses the elements of the collection in place.\nAvailable when Self conforms to BidirectionalCollection.\nfunc shuffle()\nShuffles the collection in place.\nAvailable when Self conforms to RandomAccessCollection.\nfunc shuffle<T>(using: inout T)\nShuffles the collection in place, using the given generator as a source for randomness.\nAvailable when Self conforms to RandomAccessCollection.\nfunc sort()\nSorts the collection in place.\nAvailable when Self conforms to RandomAccessCollection and Element conforms to Comparable.\nfunc sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows\nSorts the collection in place, using the given predicate as the comparison between elements.\nAvailable when Self conforms to RandomAccessCollection.\nfunc swapAt(Self.Index, Self.Index)\nExchanges the values at the specified indices of the collection.\nfunc withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Slice<Base>.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the collection’s contiguous storage.\nAvailable when Base conforms to MutableCollection.\nSubscripts\nsubscript(Range<Self.Index>) -> Self.SubSequence\nDeprecated\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript<R>(R) -> Self.SubSequence\nsubscript(Range<Slice<Base>.Index>) -> Slice<Base>\nAccesses a contiguous subrange of the collection’s elements.\nAvailable when Base conforms to MutableCollection.\nsubscript(Range<Self.Index>) -> Slice<Self>\nAccesses a contiguous subrange of the collection’s elements.\nDeprecated\nsubscript(Range<Self.Index>) -> Slice<Self>\nAccesses a contiguous subrange of the collection’s elements.\nAvailable when SubSequence is Slice<Self>.\nsubscript(Slice<Base>.Index) -> Base.Element\nAccesses the element at the specified position.\nAvailable when Base conforms to MutableCollection."
  },
  {
    "title": "withCString(encodedAs:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/withcstring(encodedas:_:)",
    "html": "Parameters\nbody\n\nA closure with a pointer parameter that points to a null-terminated sequence of code units. If body has a return value, that value is also used as the return value for the withCString(encodedAs:_:) method. The pointer argument is valid only for the duration of the method’s execution.\n\ntargetEncoding\n\nThe encoding in which the code units should be interpreted.\n\nReturn Value\n\nThe return value, if any, of the body closure parameter.\n\nDiscussion\n\nThe pointer passed as an argument to body is valid only during the execution of withCString(encodedAs:_:). Do not store or return the pointer for later use."
  },
  {
    "title": "DataProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/dataprotocol-implementations",
    "html": "Topics\nInstance Properties\nvar regions: [Base.Regions.Element.SubSequence]\nA BidirectionalCollection of DataProtocol elements which compose a discontiguous buffer of memory. Each region is a contiguous buffer of bytes.\nAvailable when Base conforms to DataProtocol.\nInstance Methods\nfunc copyBytes(to: UnsafeMutableRawBufferPointer) -> Int\nfunc copyBytes<DestinationType>(to: UnsafeMutableBufferPointer<DestinationType>) -> Int\nfunc copyBytes(to: UnsafeMutableRawBufferPointer, count: Int) -> Int\nfunc copyBytes<DestinationType>(to: UnsafeMutableBufferPointer<DestinationType>, count: Int) -> Int\nfunc copyBytes<DestinationType, R>(to: UnsafeMutableBufferPointer<DestinationType>, from: R) -> Int\nfunc copyBytes<DestinationType, R>(to: UnsafeMutableBufferPointer<DestinationType>, from: R)\nAvailable when Self conforms to ContiguousBytes.\nfunc copyBytes<R>(to: UnsafeMutableRawBufferPointer, from: R) -> Int\nfunc firstRange<D>(of: D) -> Range<Self.Index>?\nfunc firstRange<D, R>(of: D, in: R) -> Range<Self.Index>?\nReturns the first found range of the given data buffer.\nfunc lastRange<D>(of: D) -> Range<Self.Index>?\nfunc lastRange<D, R>(of: D, in: R) -> Range<Self.Index>?\nReturns the last found range of the given data buffer.\nType Aliases\ntypealias Regions\nAvailable when Base conforms to DataProtocol."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: Slice<Base>.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nAvailable when Base conforms to Collection.\nvar first: Self.Element?\nThe first element of the collection.\nvar indices: Slice<Base>.Indices\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Base conforms to Collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: Slice<Base>.Index\nThe position of the first element in a nonempty collection.\nAvailable when Base conforms to Collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc distance(from: Slice<Base>.Index, to: Slice<Base>.Index) -> Int\nReturns the distance between two indices.\nAvailable when Base conforms to Collection.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Slice<Base>.Index)\nReplaces the given index with its successor.\nAvailable when Base conforms to Collection.\nfunc index(Slice<Base>.Index, offsetBy: Int) -> Slice<Base>.Index\nReturns an index that is the specified distance from the given index.\nAvailable when Base conforms to Collection.\nfunc index(Slice<Base>.Index, offsetBy: Int, limitedBy: Slice<Base>.Index) -> Slice<Base>.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nAvailable when Base conforms to Collection.\nfunc index(after: Slice<Base>.Index) -> Slice<Base>.Index\nReturns the position immediately after the given index.\nAvailable when Base conforms to Collection.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc popFirst() -> Self.Element?\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nAvailable when Self is Self.SubSequence.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript(Slice<Base>.Index) -> Base.Element\nAccesses the element at the specified position.\nAvailable when Base conforms to Collection.\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript(Range<Slice<Base>.Index>) -> Slice<Base>\nAccesses a contiguous subrange of the collection’s elements.\nAvailable when Base conforms to Collection.\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript(Range<Self.Index>) -> Slice<Self>\nAccesses a contiguous subrange of the collection’s elements.\nAvailable when SubSequence is Slice<Self>.\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\nAvailable when Base conforms to Collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\nAvailable when Base conforms to Collection.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Collection.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection.\nAvailable when Base conforms to Collection."
  },
  {
    "title": "LazySequenceProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/lazysequenceprotocol-implementations",
    "html": "Topics\nInstance Properties\nvar elements: Self\nIdentical to self.\nAvailable when Self is Self.Elements.\nInstance Methods\nfunc compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>\nReturns the concatenated results of mapping the given transformation over this sequence.\nfunc flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc joined() -> LazySequence<FlattenSequence<Self.Elements>>\nReturns a lazy sequence that concatenates the elements of this sequence of sequences.\nAvailable when Element conforms to Sequence.\nfunc map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>\nReturns a LazyMapSequence over this Sequence. The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.\nType Aliases\ntypealias Elements\nA Sequence that can contain the same elements as this one, possibly with a simpler type.\nAvailable when Base conforms to Collection and LazySequenceProtocol."
  },
  {
    "title": "ContiguousBytes Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/contiguousbytes-implementations",
    "html": "Topics\nInstance Methods\nfunc withUnsafeBytes<ResultType>((UnsafeRawBufferPointer) throws -> ResultType) rethrows -> ResultType\nCalls the given closure with the contents of underlying storage.\nAvailable when Base conforms to ContiguousBytes and Collection."
  },
  {
    "title": "withMemoryRebound(to:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/withmemoryrebound(to:_:)-6nviy",
    "html": "Parameters\ntype\n\nThe type to temporarily bind the memory referenced by this buffer slice. The type T must be layout compatible with the pointer’s Element type.\n\nbody\n\nA closure that takes a typed buffer to the same memory as this buffer slice, only bound to type T. The buffer parameter contains a number of complete instances of T based on the capacity of the original buffer and the stride of Element. The closure’s buffer argument is valid only for the duration of the closure’s execution. If body has a return value, that value is also used as the return value for the withMemoryRebound(to:_:) method.\n\nbuffer\n\nThe buffer temporarily bound to T.\n\nReturn Value\n\nThe return value, if any, of the body closure parameter.\n\nDiscussion\n\nUse this method when you have a buffer slice of memory bound to one type and you need to access that memory as a buffer of another type. Accessing memory as type T requires that the memory be bound to that type. A memory location may only be bound to one type at a time, so accessing the same memory as an unrelated type without first rebinding the memory is undefined.\n\nThe number of instances of T referenced by the rebound buffer may be different than the number of instances of Element referenced by the original buffer slice. The number of instances of T will be calculated at runtime.\n\nAny instance of T within the re-bound region may be initialized or uninitialized. Every instance of Pointee overlapping with a given instance of T should have the same initialization state (i.e. initialized or uninitialized.) Accessing a T whose underlying Pointee storage is in a mixed initialization state shall be undefined behaviour.\n\nBecause this range of memory is no longer bound to its Element type while the body closure executes, do not access memory using the original buffer slice from within body. Instead, use the body closure’s buffer argument to access the values in memory as instances of type T.\n\nAfter executing body, this method rebinds memory back to the original Element type.\n\nNote\n\nOnly use this method to rebind the buffer slice’s memory to a type that is layout compatible with the currently bound Element type. The stride of the temporary type (T) may be an integer multiple or a whole fraction of Element’s stride. To bind a region of memory to a type that does not match these requirements, convert the buffer to a raw buffer and use the withMemoryRebound(to:) method on the raw buffer. If T and Element have different alignments, this buffer slice must be aligned with the larger of the two alignments."
  },
  {
    "title": "withMemoryRebound(to:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/withmemoryrebound(to:_:)-2ark5",
    "html": "Parameters\ntype\n\nThe type to temporarily bind the memory referenced by this buffer slice.\n\nbody\n\nA closure that takes a typed pointer to the same memory as this pointer, only bound to type T. The closure’s pointer argument is valid only for the duration of the closure’s execution. If body has a return value, that value is also used as the return value for the withMemoryRebound(to:capacity:_:) method.\n\nbuffer\n\nThe buffer temporarily bound to instances of T.\n\nReturn Value\n\nThe return value, if any, of the body closure parameter.\n\nDiscussion\n\nUse this method when you have a buffer slice to raw memory and you need to access that memory as instances of a given type T. Accessing memory as a type T requires that the memory be bound to that type. A memory location may only be bound to one type at a time, so accessing the same memory as an unrelated type without first rebinding the memory is undefined.\n\nAny instance of T within the re-bound region may be initialized or uninitialized. The memory underlying any individual instance of T must have the same initialization state (i.e. initialized or uninitialized.) Accessing a T whose underlying memory is in a mixed initialization state shall be undefined behaviour.\n\nIf the byte count of the original buffer slice is not a multiple of the stride of T, then the re-bound buffer is shorter than the original buffer.\n\nAfter executing body, this method rebinds memory back to its original binding state. This can be unbound memory, or bound to a different type.\n\nNote\n\nThe buffer slice’s start address must match the alignment of T (as reported by MemoryLayout<T>.alignment). That is, Int(bitPattern: base.baseAddress+startIndex) % MemoryLayout<T>.alignment must equal zero.\n\nNote\n\nA raw buffer slice may represent memory that has been bound to a type. If that is the case, then T must be layout compatible with the type to which the memory has been bound. This requirement does not apply if the raw buffer represents memory that has not been bound to any type."
  },
  {
    "title": "withMemoryRebound(to:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/withmemoryrebound(to:_:)-2hfy7",
    "html": "Parameters\ntype\n\nThe type to temporarily bind the memory referenced by this buffer slice. The type T must be layout compatible with the pointer’s Element type.\n\nbody\n\nA closure that takes a typed buffer to the same memory as this buffer slice, only bound to type T. The buffer parameter contains a number of complete instances of T based on the capacity of the original buffer and the stride of Element. The closure’s buffer argument is valid only for the duration of the closure’s execution. If body has a return value, that value is also used as the return value for the withMemoryRebound(to:_:) method.\n\nbuffer\n\nThe buffer temporarily bound to T.\n\nReturn Value\n\nThe return value, if any, of the body closure parameter.\n\nDiscussion\n\nUse this method when you have a buffer slice of memory bound to one type and you need to access that memory as a buffer of another type. Accessing memory as type T requires that the memory be bound to that type. A memory location may only be bound to one type at a time, so accessing the same memory as an unrelated type without first rebinding the memory is undefined.\n\nThe number of instances of T referenced by the rebound buffer may be different than the number of instances of Element referenced by the original buffer slice. The number of instances of T will be calculated at runtime.\n\nAny instance of T within the re-bound region may be initialized or uninitialized. Every instance of Pointee overlapping with a given instance of T should have the same initialization state (i.e. initialized or uninitialized.) Accessing a T whose underlying Pointee storage is in a mixed initialization state shall be undefined behaviour.\n\nBecause this range of memory is no longer bound to its Element type while the body closure executes, do not access memory using the original buffer slice from within body. Instead, use the body closure’s buffer argument to access the values in memory as instances of type T.\n\nAfter executing body, this method rebinds memory back to the original Element type.\n\nNote\n\nOnly use this method to rebind the buffer slice’s memory to a type that is layout compatible with the currently bound Element type. The stride of the temporary type (T) may be an integer multiple or a whole fraction of Element‘s stride. To bind a region of memory to a type that does not match these requirements, convert the buffer slice to a raw buffer and use the raw buffer’s withMemoryRebound(to:) method. If T and Element have different alignments, this buffer slice must be aligned with the larger of the two alignments."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable."
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/words-swift.struct/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "moveUpdate(fromContentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/moveupdate(fromcontentsof:)-ou4d",
    "html": "Parameters\nsource\n\nA buffer slice containing the values to move. The memory region underlying source must be initialized.\n\nReturn Value\n\nAn index one past the index of the last element updated.\n\nDiscussion\n\nThe region of memory starting at the beginning of this buffer slice and covering source.count instances of its Element type must be initialized, or its Element type must be a trivial type. After calling moveUpdate(fromContentsOf:), the region of memory underlying source is uninitialized. The buffer slice must reference enough initialized memory to accommodate source.count elements.\n\nThe returned index is one past the index of the last element updated. If source contains no elements, the returned index is equal to the buffer’s startIndex. If source contains as many elements as the buffer slice can hold, the returned index is equal to the slice’s endIndex.\n\nNote\n\nThe memory regions referenced by source and this buffer slice must not overlap.\n\nPrecondition\n\nself.count >= source.count"
  },
  {
    "title": "update(repeating:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/update(repeating:)",
    "html": "Parameters\nrepeatedValue\n\nThe value used when updating this pointer’s memory.\n\nDiscussion\n\nThe buffer slice’s memory must be initialized or its Element must be a trivial type.\n\nNote\n\nAll buffer elements must already be initialized."
  },
  {
    "title": "deinitialize() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/deinitialize()",
    "html": "Return Value\n\nA raw buffer to the same range of memory as this buffer. The range of memory is still bound to Element.\n\nDiscussion\n\nThe region of memory underlying this buffer slice must be fully initialized. After calling deinitialize(count:), the memory is uninitialized, but still bound to the Element type.\n\nNote\n\nAll buffer elements must already be initialized."
  },
  {
    "title": "deinitializeElement(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/deinitializeelement(at:)",
    "html": "Parameters\nindex\n\nThe index of the buffer element to deinitialize.\n\nDiscussion\n\nThe memory underlying the element at index must be initialized. After calling deinitializeElement(), the memory underlying this element of the buffer slice is uninitialized, and still bound to type Element."
  },
  {
    "title": "initialize(fromContentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/initialize(fromcontentsof:)",
    "html": "Parameters\nsource\n\nA collection of elements to be used to initialize the buffer slice’s storage.\n\nReturn Value\n\nThe index one past the last element of the buffer slice initialized by this function.\n\nDiscussion\n\nPrior to calling the initialize(fromContentsOf:) method on a buffer slice, the memory it references must be uninitialized, or the Element type must be a trivial type. After the call, the memory referenced by the buffer slice up to, but not including, the returned index is initialized. The buffer slice must reference enough memory to accommodate source.count elements.\n\nThe returned index is the index of the next uninitialized element in the buffer slice, one past the index of the last element written. If source contains no elements, the returned index is equal to the buffer slice’s startIndex. If source contains as many elements as the buffer slice can hold, the returned index is equal to to the slice’s endIndex.\n\nPrecondition\n\nself.count >= source.count\n\nNote\n\nThe memory regions referenced by source and this buffer slice must not overlap."
  },
  {
    "title": "initialize(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/initialize(from:)",
    "html": "Parameters\nsource\n\nA sequence of elements with which to initialize the buffer.\n\nReturn Value\n\nAn iterator to any elements of source that didn’t fit in the buffer, and an index to the next uninitialized element in the buffer.\n\nDiscussion\n\nPrior to calling the initialize(from:) method on a buffer slice, the memory it references must be uninitialized, or the Element type must be a trivial type. After the call, the memory referenced by the buffer slice up to, but not including, the returned index is initialized. The buffer slice must contain sufficient memory to accommodate source.underestimatedCount.\n\nThe returned index is the position of the next uninitialized element in the buffer slice, which is one past the last element written. If source contains no elements, the returned index is equal to the buffer’s startIndex. If source contains an equal or greater number of elements than the buffer slice can hold, the returned index is equal to the buffer’s endIndex."
  },
  {
    "title": "initializeMemory(as:fromContentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/initializememory(as:fromcontentsof:)",
    "html": "Parameters\ntype\n\nThe type of element to which this buffer’s memory will be bound.\n\nsource\n\nA collection of elements to be used to initialize the buffer slice’s storage.\n\nReturn Value\n\nA typed buffer referencing the initialized elements. The returned buffer references memory starting at the same base address as this slice, and its count is equal to source.count\n\nDiscussion\n\nWhen calling the initializeMemory(as:fromContentsOf:) method, the memory referenced by the buffer slice must be uninitialized, or initialized to a trivial type. The buffer slice must reference enough memory to store source.count elements, and it must be properly aligned for accessing C.Element.\n\nThis method initializes the buffer with the contents of source until source is exhausted. After calling initializeMemory(as:fromContentsOf:), the memory referenced by the returned UnsafeMutableBufferPointer instance is bound to the type of C.Element and is initialized. This method does not change the binding state of the unused portion of the buffer slice, if any."
  },
  {
    "title": "initialize(repeating:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/initialize(repeating:)",
    "html": "Parameters\nrepeatedValue\n\nThe value with which to initialize this buffer slice’s memory.\n\nDiscussion\n\nThe destination memory must be uninitialized or the buffer’s Element must be a trivial type. After a call to initialize(repeating:), the entire region of memory referenced by this buffer slice is initialized."
  },
  {
    "title": "initializeMemory(as:from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/initializememory(as:from:)",
    "html": "Parameters\ntype\n\nThe type of element to which this buffer’s memory will be bound.\n\nsource\n\nA sequence of elements with which to initialize the buffer.\n\nReturn Value\n\nAn iterator to any elements of source that didn’t fit in the buffer, and a typed buffer of the written elements. The returned buffer references memory starting at the same base address as this buffer.\n\nDiscussion\n\nWhen calling the initializeMemory(as:from:) method on a buffer slice, the memory referenced by the slice must be uninitialized or initialised to a trivial type, and must be properly aligned for accessing S.Element. The buffer must contain sufficient memory to accommodate source.underestimatedCount.\n\nThis method initializes the buffer slice with elements from source until source is exhausted or, if source is a sequence but not a collection, the buffer slice has no more room for source’s elements. After calling initializeMemory(as:from:), the memory referenced by the returned UnsafeMutableBufferPointer instance is bound and initialized to type S.Element."
  },
  {
    "title": "initializeMemory(as:repeating:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/initializememory(as:repeating:)",
    "html": "Parameters\ntype\n\nThe type to bind this buffer’s memory to.\n\nrepeatedValue\n\nThe instance to copy into memory.\n\nReturn Value\n\nA typed buffer of the memory referenced by this raw buffer. The typed buffer contains self.count / MemoryLayout<T>.stride instances of T.\n\nDiscussion\n\nThe memory referenced by this buffer slice must be uninitialized or initialized to a trivial type, and must be properly aligned for accessing T.\n\nAfter calling this method on a raw buffer slice referencing memory starting at b = base.baseAddress + startIndex, the region starting at b and continuing up to b + self.count - self.count % MemoryLayout<T>.stride is bound to type T and is initialized. If T is a nontrivial type, you must eventually deinitialize or move the values in this region to avoid leaks. If base.baseAddress is nil, this function does nothing and returns an empty buffer pointer."
  },
  {
    "title": "initializeElement(at:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/initializeelement(at:to:)",
    "html": "Parameters\nvalue\n\nThe value used to initialize the buffer element’s memory.\n\nindex\n\nThe index of the element to initialize\n\nDiscussion\n\nThe memory underlying the destination element must be uninitialized, or Element must be a trivial type. After a call to initialize(to:), the memory underlying this element of the buffer slice is initialized."
  },
  {
    "title": "load(fromByteOffset:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/load(frombyteoffset:as:)-3vjps",
    "html": "Parameters\noffset\n\nThe offset into the slice’s memory, in bytes, at which to begin reading data for the new instance. The default is zero.\n\ntype\n\nThe type to use for the newly constructed instance. The memory must be initialized to a value of a type that is layout compatible with type.\n\nReturn Value\n\nA new instance of type T, copied from the buffer pointer slice’s memory.\n\nDiscussion\n\nThe memory at offset bytes into this buffer pointer slice must be properly aligned for accessing T and initialized to T or another type that is layout compatible with T.\n\nYou can use this method to create new values from the underlying buffer pointer’s bytes. The following example creates two new Int32 instances from the memory referenced by the buffer pointer someBytes. The bytes for a are copied from the first four bytes of someBytes, and the bytes for b are copied from the next four bytes.\n\nlet a = someBytes[0..<4].load(as: Int32.self)\nlet b = someBytes[4..<8].load(as: Int32.self)\n\n\nThe memory to read for the new instance must not extend beyond the memory region represented by the buffer pointer slice—that is, offset + MemoryLayout<T>.size must be less than or equal to the slice’s count."
  },
  {
    "title": "load(fromByteOffset:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/load(frombyteoffset:as:)-45bko",
    "html": "Parameters\noffset\n\nThe offset into the slice’s memory, in bytes, at which to begin reading data for the new instance. The default is zero.\n\ntype\n\nThe type to use for the newly constructed instance. The memory must be initialized to a value of a type that is layout compatible with type.\n\nReturn Value\n\nA new instance of type T, copied from the buffer pointer slice’s memory.\n\nDiscussion\n\nThe memory at offset bytes into this buffer pointer slice must be properly aligned for accessing T and initialized to T or another type that is layout compatible with T.\n\nYou can use this method to create new values from the underlying buffer pointer’s bytes. The following example creates two new Int32 instances from the memory referenced by the buffer pointer someBytes. The bytes for a are copied from the first four bytes of someBytes, and the bytes for b are copied from the next four bytes.\n\nlet a = someBytes[0..<4].load(as: Int32.self)\nlet b = someBytes[4..<8].load(as: Int32.self)\n\n\nThe memory to read for the new instance must not extend beyond the memory region represented by the buffer pointer slice—that is, offset + MemoryLayout<T>.size must be less than or equal to the slice’s count."
  },
  {
    "title": "loadUnaligned(fromByteOffset:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/loadunaligned(frombyteoffset:as:)-6jvd4",
    "html": "Parameters\noffset\n\nThe offset into the slice’s memory, in bytes, at which to begin reading data for the new instance. The default is zero.\n\ntype\n\nThe type to use for the newly constructed instance. The memory must be initialized to a value of a type that is layout compatible with type.\n\nReturn Value\n\nA new instance of type T, copied from the buffer pointer’s memory.\n\nDiscussion\n\nThis function only supports loading trivial types. A trivial type does not contain any reference-counted property within its in-memory stored representation. The memory at offset bytes into the buffer slice must be laid out identically to the in-memory representation of T.\n\nYou can use this method to create new values from the buffer pointer’s underlying bytes. The following example creates two new Int32 instances from the memory referenced by the buffer pointer someBytes. The bytes for a are copied from the first four bytes of someBytes, and the bytes for b are copied from the fourth through seventh bytes.\n\nlet a = someBytes[..<4].loadUnaligned(as: Int32.self)\nlet b = someBytes[3...].loadUnaligned(as: Int32.self)\n\n\nThe memory to read for the new instance must not extend beyond the memory region represented by the buffer pointer slice—that is, offset + MemoryLayout<T>.size must be less than or equal to the slice’s count."
  },
  {
    "title": "loadUnaligned(fromByteOffset:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/loadunaligned(frombyteoffset:as:)-9gtr0",
    "html": "Parameters\noffset\n\nThe offset into the slice’s memory, in bytes, at which to begin reading data for the new instance. The default is zero.\n\ntype\n\nThe type to use for the newly constructed instance. The memory must be initialized to a value of a type that is layout compatible with type.\n\nReturn Value\n\nA new instance of type T, copied from the buffer pointer’s memory.\n\nDiscussion\n\nThis function only supports loading trivial types. A trivial type does not contain any reference-counted property within its in-memory stored representation. The memory at offset bytes into the buffer slice must be laid out identically to the in-memory representation of T.\n\nYou can use this method to create new values from the buffer pointer’s underlying bytes. The following example creates two new Int32 instances from the memory referenced by the buffer pointer someBytes. The bytes for a are copied from the first four bytes of someBytes, and the bytes for b are copied from the fourth through seventh bytes.\n\nlet a = someBytes[..<4].loadUnaligned(as: Int32.self)\nlet b = someBytes[3...].loadUnaligned(as: Int32.self)\n\n\nThe memory to read for the new instance must not extend beyond the memory region represented by the buffer pointer slice—that is, offset + MemoryLayout<T>.size must be less than or equal to the slice’s count."
  },
  {
    "title": "moveElement(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/moveelement(from:)",
    "html": "Parameters\nindex\n\nThe index of the buffer element to retrieve and deinitialize.\n\nReturn Value\n\nThe instance referenced by this index in this buffer.\n\nDiscussion\n\nThe memory underlying the element at index must be initialized. After calling moveElement(from:), the memory underlying this element of the buffer slice is uninitialized, and still bound to type Element."
  },
  {
    "title": "moveInitializeMemory(as:fromContentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/moveinitializememory(as:fromcontentsof:)-1uz4a",
    "html": "Parameters\ntype\n\nThe type of element to which this buffer’s memory will be bound.\n\nsource\n\nA buffer referencing the values to copy. The memory region underlying source must be initialized. The memory regions referenced by source and this buffer may overlap.\n\nReturn Value\n\nA typed buffer referencing the initialized elements. The returned buffer references memory starting at the same base address as this slice, and its count is equal to source.count.\n\nDiscussion\n\nWhen calling the moveInitializeMemory(as:fromContentsOf:) method, the memory referenced by the buffer slice must be uninitialized, or initialized to a trivial type. The buffer slice must reference enough memory to store source.count elements, and it must be properly aligned for accessing C.Element. After the method returns, the memory referenced by the returned buffer is initialized and the memory region underlying source is uninitialized.\n\nThis method initializes the buffer slice with the contents of source until source is exhausted. After calling initializeMemory(as:fromContentsOf:), the memory referenced by the returned UnsafeMutableBufferPointer instance is bound to the type of T and is initialized. This method does not change the binding state of the unused portion of the buffer slice, if any."
  },
  {
    "title": "moveUpdate(fromContentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/moveupdate(fromcontentsof:)-5i98g",
    "html": "Parameters\nsource\n\nA buffer containing the values to move. The memory region underlying source must be initialized.\n\nReturn Value\n\nAn index one past the index of the last element updated.\n\nDiscussion\n\nThe region of memory starting at the beginning of this buffer slice and covering source.count instances of its Element type must be initialized, or its Element type must be a trivial type. After calling moveUpdate(fromContentsOf:), the region of memory underlying source is uninitialized. The buffer slice must reference enough initialized memory to accommodate source.count elements.\n\nThe returned index is one past the index of the last element updated. If source contains no elements, the returned index is equal to the buffer’s startIndex. If source contains as many elements as the buffer slice can hold, the returned index is equal to the slice’s endIndex.\n\nNote\n\nThe memory regions referenced by source and this buffer slice must not overlap.\n\nPrecondition\n\nself.count >= source.count"
  },
  {
    "title": "moveInitializeMemory(as:fromContentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/moveinitializememory(as:fromcontentsof:)-4gqrz",
    "html": "Parameters\ntype\n\nThe type of element to which this buffer’s memory will be bound.\n\nsource\n\nA buffer referencing the values to copy. The memory region underlying source must be initialized. The memory regions referenced by source and this slice may overlap.\n\nReturn Value\n\nA typed buffer referencing the initialized elements. The returned buffer references memory starting at the same base address as this slice, and its count is equal to source.count.\n\nDiscussion\n\nWhen calling the moveInitializeMemory(as:fromContentsOf:) method, the memory referenced by the buffer slice must be uninitialized, or initialized to a trivial type. The buffer slice must reference enough memory to store source.count elements, and it must be properly aligned for accessing C.Element. After the method returns, the memory referenced by the returned buffer is initialized and the memory region underlying source is uninitialized.\n\nThis method initializes the buffer slice with the contents of source until source is exhausted. After calling initializeMemory(as:fromContentsOf:), the memory referenced by the returned UnsafeMutableBufferPointer instance is bound to the type of T and is initialized. This method does not change the binding state of the unused portion of the buffer slice, if any."
  },
  {
    "title": "update(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/update(from:)",
    "html": "Parameters\nsource\n\nA sequence of elements to be used to update the contents of the buffer slice.\n\nReturn Value\n\nAn iterator to any elements of source that didn’t fit in the buffer slice, and the index one past the last updated element.\n\nDiscussion\n\nThe buffer slice’s memory must be initialized or its Element type must be a trivial type."
  },
  {
    "title": "init(decoding:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/init(decoding:as:)",
    "html": "Parameters\ncodeUnits\n\nA collection of code units encoded in the encoding specified in sourceEncoding.\n\nsourceEncoding\n\nThe encoding in which codeUnits should be interpreted."
  },
  {
    "title": "init(decodingCString:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/substring/init(decodingcstring:as:)",
    "html": "Parameters\nnullTerminatedCodeUnits\n\nA pointer to a sequence of contiguous code units in the encoding specified in sourceEncoding, ending just before the first zero code unit.\n\nsourceEncoding\n\nThe encoding in which the code units should be interpreted."
  },
  {
    "title": "UInt16.Words.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint16/words-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "withMemoryRebound(to:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/withmemoryrebound(to:_:)-4ei03",
    "html": "Parameters\ntype\n\nThe type to temporarily bind the memory referenced by this buffer slice.\n\nbody\n\nA closure that takes a typed pointer to the same memory as this pointer, only bound to type T. The closure’s pointer argument is valid only for the duration of the closure’s execution. If body has a return value, that value is also used as the return value for the withMemoryRebound(to:capacity:_:) method.\n\nbuffer\n\nThe buffer temporarily bound to instances of T.\n\nReturn Value\n\nThe return value, if any, of the body closure parameter.\n\nDiscussion\n\nUse this method when you have a buffer slice to raw memory and you need to access that memory as instances of a given type T. Accessing memory as a type T requires that the memory be bound to that type. A memory location may only be bound to one type at a time, so accessing the same memory as an unrelated type without first rebinding the memory is undefined.\n\nAny instance of T within the re-bound region may be initialized or uninitialized. The memory underlying any individual instance of T must have the same initialization state (i.e. initialized or uninitialized.) Accessing a T whose underlying memory is in a mixed initialization state shall be undefined behaviour.\n\nIf the byte count of the original buffer slice is not a multiple of the stride of T, then the re-bound buffer is shorter than the original buffer.\n\nAfter executing body, this method rebinds memory back to its original binding state. This can be unbound memory, or bound to a different type.\n\nNote\n\nThe buffer slice’s start address must match the alignment of T (as reported by MemoryLayout<T>.alignment). That is, Int(bitPattern: base.baseAddress+startIndex) % MemoryLayout<T>.alignment must equal zero.\n\nNote\n\nA raw buffer slice may represent memory that has been bound to a type. If that is the case, then T must be layout compatible with the type to which the memory has been bound. This requirement does not apply if the raw buffer represents memory that has not been bound to any type."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/strideto/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nAvailable when Element conforms to Strideable.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> StrideToIterator<Element>\nReturns an iterator over the elements of this sequence.\nAvailable when Element conforms to Strideable.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Element conforms to Strideable."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stridethrough/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nThe custom mirror for this instance.\nAvailable when Element conforms to Strideable."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stridethrough/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nAvailable when Element conforms to Strideable.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> StrideThroughIterator<Element>\nReturns an iterator over the elements of this sequence.\nAvailable when Element conforms to Strideable.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Element conforms to Strideable."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/repeated/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element is String.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/repeated/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nType Aliases\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "DataProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/repeated/dataprotocol-implementations",
    "html": "Topics\nInstance Properties\nvar regions: Repeated<Data>\nA BidirectionalCollection of DataProtocol elements which compose a discontiguous buffer of memory. Each region is a contiguous buffer of bytes.\nAvailable when Element is UInt8.\nInstance Methods\nfunc copyBytes<DestinationType>(to: UnsafeMutableBufferPointer<DestinationType>) -> Int\nfunc copyBytes(to: UnsafeMutableRawBufferPointer) -> Int\nfunc copyBytes(to: UnsafeMutableRawBufferPointer, count: Int) -> Int\nfunc copyBytes<DestinationType>(to: UnsafeMutableBufferPointer<DestinationType>, count: Int) -> Int\nfunc copyBytes<R>(to: UnsafeMutableRawBufferPointer, from: R) -> Int\nfunc copyBytes<DestinationType, R>(to: UnsafeMutableBufferPointer<DestinationType>, from: R) -> Int\nfunc firstRange<D>(of: D) -> Range<Self.Index>?\nfunc firstRange<D, R>(of: D, in: R) -> Range<Self.Index>?\nReturns the first found range of the given data buffer.\nfunc lastRange<D>(of: D) -> Range<Self.Index>?\nfunc lastRange<D, R>(of: D, in: R) -> Range<Self.Index>?\nReturns the last found range of the given data buffer.\nType Aliases\ntypealias Regions\nAvailable when Element is UInt8."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/repeated/randomaccesscollection-implementations",
    "html": "Topics\nInstance Properties\nvar endIndex: Repeated<Element>.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar startIndex: Repeated<Element>.Index\nThe position of the first element in a nonempty collection.\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nSubscripts\nsubscript(Int) -> Element\nAccesses the element at the specified position.\nType Aliases\ntypealias Index\nA type that represents a valid position in the collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/iterator/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to BidirectionalCollection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/repeated/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/joined(separator:)-xipx",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> ReversedCollection<Base>.Iterator.Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Base conforms to BidirectionalCollection.\nType Aliases\ntypealias Element\nThe type of element traversed by the iterator.\nAvailable when Base conforms to BidirectionalCollection."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/joined()-448f",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/joined(separator:)-1ijrz",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the largest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet greatestHeight = heights.max()\nprint(greatestHeight)\n// Prints \"Optional(67.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "lexicographicallyPrecedes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/map(_:)-smak",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the smallest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet lowestHeight = heights.min()\nprint(lowestHeight)\n// Prints \"Optional(58.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "sorted() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/sorted()",
    "html": "Return Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nYou can sort any sequence of elements that conform to the Comparable protocol by calling this method. Elements are sorted in ascending order.\n\nHere’s an example of sorting a list of students’ names. Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (<).\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet sortedStudents = students.sorted()\nprint(sortedStudents)\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nTo sort the elements of your sequence in descending order, pass the greater-than operator (>) to the sorted(by:) method.\n\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements that compare as equal.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "update(fromContentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/update(fromcontentsof:)",
    "html": "Parameters\nsource\n\nA collection of elements to be used to update the buffer’s contents.\n\nReturn Value\n\nAn index one past the index of the last element updated.\n\nDiscussion\n\nPrior to calling the update(fromContentsOf:) method on a buffer slice, the first source.count elements of the referenced memory must be initialized, or the Element type must be a trivial type. The buffer slice must reference enough initialized memory to accommodate source.count elements.\n\nThe returned index is one past the index of the last element updated. If source contains no elements, the returned index is the buffer slice’s startIndex. If source contains as many elements as the buffer slice can hold, the returned index is the buffer slice’s endIndex.\n\nNote\n\nThe memory regions referenced by source and this buffer slice may overlap.\n\nPrecondition\n\nself.count >= source.count"
  },
  {
    "title": "shuffled(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/shuffled(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity\n\nO(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "shuffled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/shuffled()",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "bindMemory(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/bindmemory(to:)-jmit",
    "html": "Parameters\ntype\n\nThe type T to bind the memory to.\n\nReturn Value\n\nA typed buffer of the newly bound memory. The memory in this region is bound to T, but has not been modified in any other way. The typed buffer references self.count / MemoryLayout<T>.stride instances of T.\n\nDiscussion\n\nUse the bindMemory(to:) method to bind the memory referenced by this buffer slice to the type T. The memory must be uninitialized or initialized to a type that is layout compatible with T. If the memory is uninitialized, it is still uninitialized after being bound to T.\n\nWarning\n\nA memory location may only be bound to one type at a time. The behavior of accessing memory as a type unrelated to its bound type is undefined."
  },
  {
    "title": "sorted(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/sorted(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "assumingMemoryBound(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/assumingmemorybound(to:)-3f579",
    "html": "Parameters\nto\n\nThe type T that the memory has already been bound to.\n\nReturn Value\n\nA typed pointer to the same memory as this raw pointer.\n\nDiscussion\n\nUse this method when you have a raw buffer to memory that has already been bound to the specified type. The memory starting at this pointer must be bound to the type T. Accessing memory through the returned pointer is undefined if the memory has not been bound to T. To bind memory to T, use bindMemory(to:capacity:) instead of this method.\n\nNote\n\nThe buffer slice’s start address must match the alignment of T (as reported by MemoryLayout<T>.alignment). That is, Int(bitPattern: base.baseAddress+startIndex) % MemoryLayout<T>.alignment must equal zero."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/split(separator:maxsplits:omittingemptysubsequences:)-59vb5",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \")\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false)\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "bindMemory(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/bindmemory(to:)-2brpa",
    "html": "Parameters\ntype\n\nThe type T to bind the memory to.\n\nReturn Value\n\nA typed buffer of the newly bound memory. The memory in this region is bound to T, but has not been modified in any other way. The typed buffer references self.count / MemoryLayout<T>.stride instances of T.\n\nDiscussion\n\nUse the bindMemory(to:) method to bind the memory referenced by this buffer slice to the type T. The memory must be uninitialized or initialized to a type that is layout compatible with T. If the memory is uninitialized, it is still uninitialized after being bound to T.\n\nWarning\n\nA memory location may only be bound to one type at a time. The behavior of accessing memory as a type unrelated to its bound type is undefined."
  },
  {
    "title": "base | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/base",
    "html": "Discussion\n\nYou can use a slice’s base property to access its base collection. The following example declares singleDigits, a range of single digit integers, and then drops the first element to create a slice of that range, singleNonZeroDigits. The base property of the slice is equal to singleDigits.\n\nlet singleDigits = 0..<10\nlet singleNonZeroDigits = singleDigits.dropFirst()\n// singleNonZeroDigits is a Slice<Range<Int>>\n\n\nprint(singleNonZeroDigits.count)\n// Prints \"9\"\nprint(singleNonZeroDigits.base.count)\n// Prints \"10\"\nprint(singleDigits == singleNonZeroDigits.base)\n// Prints \"true\"\n"
  },
  {
    "title": "starts(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/starts(with:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThis example tests whether one countable range begins with the elements of another countable range.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(b.starts(with: a))\n// Prints \"true\"\n\n\nPassing a sequence with no elements or an empty collection as possiblePrefix always results in true.\n\nprint(b.starts(with: []))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "copyBytes(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/copybytes(from:)",
    "html": "Parameters\nsource\n\nA collection of UInt8 elements. source.count must be less than or equal to this buffer slice’s count.\n\nDiscussion\n\nIf the first source.count bytes of memory referenced by this buffer slice are bound to a type T, then T must be a trivial type, the underlying pointer must be properly aligned for accessing T, and source.count must be a multiple of MemoryLayout<T>.stride.\n\nAfter calling copyBytes(from:), the first source.count bytes of memory referenced by this buffer slice are initialized to raw bytes. If the memory is bound to type T, then it contains values of type T."
  },
  {
    "title": "assumingMemoryBound(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/assumingmemorybound(to:)-48vo9",
    "html": "Parameters\nto\n\nThe type T that the memory has already been bound to.\n\nReturn Value\n\nA typed pointer to the same memory as this raw pointer.\n\nDiscussion\n\nUse this method when you have a raw buffer to memory that has already been bound to the specified type. The memory starting at this pointer must be bound to the type T. Accessing memory through the returned pointer is undefined if the memory has not been bound to T. To bind memory to T, use bindMemory(to:capacity:) instead of this method.\n\nNote\n\nThe buffer slice’s start address must match the alignment of T (as reported by MemoryLayout<T>.alignment). That is, Int(bitPattern: base.baseAddress+startIndex) % MemoryLayout<T>.alignment must equal zero."
  },
  {
    "title": "init(base:bounds:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/slice/init(base:bounds:)",
    "html": "Parameters\nbase\n\nThe collection to create a view into.\n\nbounds\n\nThe range of indices to allow access to in the new slice.\n\nDiscussion\n\nIt is unusual to need to call this method directly. Instead, create a slice of a collection by using the collection’s range-based subscript or by using methods that return a subsequence.\n\nlet singleDigits = 0...9\nlet subSequence = singleDigits.dropFirst(5)\nprint(Array(subSequence))\n// Prints \"[5, 6, 7, 8, 9]\"\n\n\nIn this example, the expression singleDigits.dropFirst(5)) is equivalent to calling this initializer with singleDigits and a range covering the last five items of singleDigits.indices."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/map(_:)-1q1k3",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Sequence\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the largest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet greatestHeight = heights.max()\nprint(greatestHeight)\n// Prints \"Optional(67.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/joined(separator:)-7hl5i",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingflatmapsequence/iterator/next()",
    "html": "Discussion\n\nThis iterator calls next() on its base iterator; if this call returns nil, next() returns nil. Otherwise, next() calls the transforming closure on the received element, takes the resulting asynchronous sequence, and creates an asynchronous iterator from it. next() then consumes values from this iterator until it terminates. At this point, next() is ready to receive the next value from the base sequence. If transform throws an error, the sequence terminates."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingflatmapsequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncThrowingFlatMapSequence<Base, SegmentOfResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence and SegmentOfResult conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence and SegmentOfResult conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence and SegmentOfResult conforms to AsyncSequence."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingmapsequence/iterator/next()",
    "html": "Discussion\n\nThis iterator calls next() on its base iterator; if this call returns nil, next() returns nil. Otherwise, next() returns the result of calling the transforming closure on the received element. If calling the closure throws an error, the sequence ends and next() rethrows the error."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingmapsequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncThrowingMapSequence<Base, Transformed>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncflatmapsequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncFlatMapSequence<Base, SegmentOfResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence and SegmentOfResult conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence and SegmentOfResult conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence and SegmentOfResult conforms to AsyncSequence."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncmapsequence/iterator/next()",
    "html": "Discussion\n\nThis iterator calls next() on its base iterator; if this call returns nil, next() returns nil. Otherwise, next() returns the result of calling the transforming closure on the received element."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingcompactmapsequence/iterator/next()",
    "html": "Discussion\n\nThis iterator calls next() on its base iterator; if this call returns nil, next() returns nil. Otherwise, next() calls the transforming closure on the received element, returning it if the transform returns a non-nil value. If the transform returns nil, this method continues to wait for further elements until it gets one that transforms to a non-nil value. If calling the closure throws an error, the sequence ends and next() rethrows the error."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncthrowingcompactmapsequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncThrowingCompactMapSequence<Base, ElementOfResult>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncStream<Element>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "makeStream(of:bufferingPolicy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/makestream(of:bufferingpolicy:)",
    "html": "Parameters\nelementType\n\nThe element type of the stream.\n\nlimit\n\nThe buffering policy that the stream should use.\n\nReturn Value\n\nA tuple containing the stream and its continuation. The continuation should be passed to the producer while the stream should be passed to the consumer."
  },
  {
    "title": "AsyncStream.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/iterator",
    "html": "Overview\n\nThis type doesn’t conform to Sendable. Don’t use it from multiple concurrent contexts. It is a programmer error to invoke next() from a concurrent context that contends with another such call, which results in a call to fatalError().\n\nTopics\nIterating over Elements\nfunc next() async -> Element?\nThe next value from the asynchronous stream.\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> AsyncStream<Element>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence."
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/makeasynciterator()",
    "html": "See Also\nCreating an Iterator\nstruct Iterator\nThe asynchronous iterator for iterating an asynchronous stream."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/flatmap(_:)-5j8ra",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/compactmap(_:)-944op",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure."
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The min() method returns the minimum value of the sequence.\n\nlet min = await Counter(howHigh: 10)\n    .min()\nprint(min ?? \"none\")\n// Prints \"1\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary.\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/flatmap(_:)-30ren",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "init(_:bufferingPolicy:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/init(_:bufferingpolicy:_:)",
    "html": "Parameters\nelementType\n\nThe type of element the AsyncStream produces.\n\nbufferingPolicy\n\nA Continuation.BufferingPolicy value to set the stream’s buffering behavior. By default, the stream buffers an unlimited number of elements. You can also set the policy to buffer a specified number of oldest or newest elements.\n\nbuild\n\nA custom closure that yields values to the AsyncStream. This closure receives an AsyncStream.Continuation instance that it uses to provide elements to the stream and terminate the stream when finished.\n\nDiscussion\n\nThe AsyncStream.Continuation received by the build closure is appropriate for use in concurrent contexts. It is thread safe to send and finish; all calls to the continuation are serialized. However, calling this from multiple concurrent contexts could result in out-of-order delivery.\n\nThe following example shows an AsyncStream created with this initializer that produces 100 random numbers on a one-second interval, calling yield(_:) to deliver each element to the awaiting call point. When the for loop exits, the stream finishes by calling the continuation’s finish() method.\n\nlet stream = AsyncStream<Int>(Int.self,\n                              bufferingPolicy: .bufferingNewest(5)) { continuation in\n    Task.detached {\n        for _ in 0..<100 {\n            await Task.sleep(1 * 1_000_000_000)\n            continuation.yield(Int.random(in: 1...10))\n        }\n        continuation.finish()\n    }\n}\n\n\n// Call point:\nfor await random in stream {\n    print(random)\n}\n\nSee Also\nCreating a Continuation-Based Stream\nenum BufferingPolicy\nA strategy that handles exhaustion of a buffer’s capacity.\nstruct Continuation\nA mechanism to interface between synchronous code and an asynchronous stream."
  },
  {
    "title": "characters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/characters",
    "html": "See Also\nAdapting Textual Sequences\nvar unicodeScalars: AsyncUnicodeScalarSequence<Self>\nA non-blocking sequence of UnicodeScalars created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nvar lines: AsyncLineSequence<Self>\nA non-blocking sequence of newline-separated Strings created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8."
  },
  {
    "title": "AsyncStream.Continuation.BufferingPolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/bufferingpolicy",
    "html": "Topics\nBuffering Policies\ncase unbounded\nContinue to add to the buffer, without imposing a limit on the number of buffered elements.\ncase bufferingOldest(Int)\nWhen the buffer is full, discard the newly received element.\ncase bufferingNewest(Int)\nWhen the buffer is full, discard the oldest element in the buffer.\nSee Also\nCreating a Continuation-Based Stream\ninit(Element.Type, bufferingPolicy: AsyncStream<Element>.Continuation.BufferingPolicy, (AsyncStream<Element>.Continuation) -> Void)\nConstructs an asynchronous stream for an element type, using the specified buffering policy and element-producing closure.\nstruct Continuation\nA mechanism to interface between synchronous code and an asynchronous stream."
  },
  {
    "title": "unicodeScalars | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/unicodescalars",
    "html": "See Also\nAdapting Textual Sequences\nvar characters: AsyncCharacterSequence<Self>\nA non-blocking sequence of Characters created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nvar lines: AsyncLineSequence<Self>\nA non-blocking sequence of newline-separated Strings created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The max() method returns the max value of the sequence.\n\nlet max = await Counter(howHigh: 10)\n    .max()\nprint(max ?? \"none\")\n// Prints \"10\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/contains(_:)",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/flatmap(_:)-17mz1",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/strideto/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nThe custom mirror for this instance.\nAvailable when Element conforms to Strideable."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/underestimatedcount-1cznw",
    "html": "Discussion\n\nThe default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively.\n\nComplexity\n\nO(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/iterator/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence and Base.Element conforms to Sequence."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncprefixsequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncPrefixSequence<Base>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/prefix(while:)-6yp5n",
    "html": "Parameters\npredicate\n\nA error-throwing closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate. If the predicate throws an error, the sequence contains only values produced prior to the error.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false or throws an error.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through values less than 8, but throws an error when it receives a value that’s divisible by 5:\n\ndo {\n    let stream = try Counter(howHigh: 10)\n        .prefix {\n            if $0 % 5 == 0 {\n                throw MyError()\n            }\n            return $0 < 8\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"1 2 3 4 Error: MyError() \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nstruct AsyncPrefixSequence\nAn asynchronous sequence, up to a specified maximum length, containing the initial elements of a base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nstruct AsyncPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy a given predicate.\nstruct AsyncThrowingPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/prefix(_:)",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nstruct AsyncPrefixSequence\nAn asynchronous sequence, up to a specified maximum length, containing the initial elements of a base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nstruct AsyncPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy a given predicate.\nfunc prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncprefixsequence/iterator/next()",
    "html": "Discussion\n\nUntil reaching the number of elements to include, this iterator calls next() on its base iterator and passes through the result. After reaching the maximum number of elements, subsequent calls to next() return nil."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/drop(while:)-9sp3b",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>\nOmits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nfunc filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/prefix(while:)-2xy95",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nstruct AsyncPrefixSequence\nAn asynchronous sequence, up to a specified maximum length, containing the initial elements of a base asynchronous sequence.\nstruct AsyncPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy a given predicate.\nfunc prefix(while: (Self.Element) async throws -> Bool) rethrows -> AsyncThrowingPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingPrefixWhileSequence\nAn asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/dropfirst(_:)",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>\nOmits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nfunc filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/drop(while:)-67kgo",
    "html": "Parameters\npredicate\n\nAn error-throwing closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values until the provided closure returns false or throws an error.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify. If the closure you provide throws an error, the sequence produces no elements and throws the error instead.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The predicate passed to the drop(while:) method throws an error if it encounters an even number, and otherwise returns true while it receives elements less than 5. Because the predicate throws when it receives 2 from the base sequence, this example throws without ever printing anything.\n\ndo {\n    let stream = Counter(howHigh: 10)\n        .drop {\n            if $0 % 2 == 0 {\n                throw EvenError()\n            }\n            return $0 < 5\n        }\n    for try await number in stream {\n        print(number)\n    }\n} catch {\n    print(error)\n}\n// Prints \"EvenError()\"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence. A predicate that throws an error also never executes again.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nfunc filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/filter(_:)-435af",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>\nOmits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nfunc filter((Self.Element) async throws -> Bool) -> AsyncThrowingFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/filter(_:)-2cc0l",
    "html": "Parameters\nisIncluded\n\nAn error-throwing closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate. If the predicate throws an error, the sequence contains only values produced prior to the error.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values, but also throws an error for values divisible by 5:\n\ndo {\n    let stream = Counter(howHigh: 10)\n        .filter {\n            if $0 % 5 == 0 {\n                throw MyError()\n            }\n            return $0 % 2 == 0\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"2 4 Error: MyError() \"\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nstruct AsyncDropFirstSequence\nAn asynchronous sequence which omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nstruct AsyncDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc drop(while: (Self.Element) async throws -> Bool) -> AsyncThrowingDropWhileSequence<Self>\nOmits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nstruct AsyncThrowingDropWhileSequence\nAn asynchronous sequence which omits elements from the base sequence until a given error-throwing closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nstruct AsyncFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy a given predicate.\nstruct AsyncThrowingFilterSequence\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given error-throwing predicate."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/map(_:)-70wgb",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/compactmap(_:)-gfdq",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/compactmap(_:)-1f8zn",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nstruct AsyncMapSequence\nAn asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nstruct AsyncThrowingMapSequence\nAn asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncCompactMapSequence\nAn asynchronous sequence that maps a given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nstruct AsyncThrowingCompactMapSequence\nAn asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nstruct AsyncFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nstruct AsyncThrowingFlatMapSequence\nAn asynchronous sequence that concatenates the results of calling a given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/map(_:)-9j29g",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/flatmap(_:)-8kd85",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/joined()-1secb",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "makeIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/makeiterator()",
    "html": "Discussion\n\nComplexity\n\nO(1)."
  },
  {
    "title": "lexicographicallyPrecedes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/joined(separator:)-8964t",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/flatmap(_:)-49zn",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncfiltersequence/iterator/next()",
    "html": "Discussion\n\nThis iterator calls next() on its base iterator; if this call returns nil, next() returns nil. Otherwise, next() evaluates the result with the predicate closure. If the closure returns true, next() returns the received element; otherwise it awaits the next element from the base iterator."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncmapsequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncMapSequence<Base, Transformed>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "AsyncSequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncfiltersequence/asyncsequence-implementations",
    "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc makeAsyncIterator() -> AsyncFilterSequence<Base>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nType Aliases\ntypealias AsyncIterator\nThe type of iterator that produces elements of the sequence.\nAvailable when Base conforms to AsyncSequence.\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nAvailable when Base conforms to AsyncSequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/flatmap(_:)-vhhr",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "lines | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncsequence/lines",
    "html": "See Also\nAdapting Textual Sequences\nvar characters: AsyncCharacterSequence<Self>\nA non-blocking sequence of Characters created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8.\nvar unicodeScalars: AsyncUnicodeScalarSequence<Self>\nA non-blocking sequence of UnicodeScalars created by decoding the elements of self as UTF8.\nAvailable when Element is UInt8."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/iteratorsequence/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to IteratorProtocol."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/joined(separator:)-53e90",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/underestimatedcount",
    "html": "Discussion\n\nThe default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively.\n\nComplexity\n\nO(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/iterator/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/droplast(_:)",
    "html": "Parameters\nn\n\nThe number of elements to drop off the end of the sequence. n must be greater than or equal to zero.\n\nReturn Value\n\nA sequence leaving off the specified number of elements.\n\nDiscussion\n\nThe sequence must be finite. If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/contains(_:)",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the sequence. k must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/compactmap(_:)-9rnux",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the largest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet greatestHeight = heights.max()\nprint(greatestHeight)\n// Prints \"Optional(67.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/map(_:)-83ggh",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/joined()",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/droplast(_:)",
    "html": "Parameters\nn\n\nThe number of elements to drop off the end of the sequence. n must be greater than or equal to zero.\n\nReturn Value\n\nA sequence leaving off the specified number of elements.\n\nDiscussion\n\nThe sequence must be finite. If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.\n\nReturn Value\n\nA sequence starting after the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nThe following example uses the drop(while:) method to skip over the positive numbers at the beginning of the numbers array. The result begins with the first element of numbers that does not satisfy predicate.\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nlet startingWithNegative = numbers.drop(while: { $0 > 0 })\n// startingWithNegative == [-2, 9, -6, 10, 1]\n\n\nIf predicate matches every element in the sequence, the result is an empty sequence.\n\nComplexity\n\nO(k), where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/flatmap(_:)-731v7",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the sequence. k must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/joined()",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/indexingiterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Elements.Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Elements conforms to Collection.\nType Aliases\ntypealias Element\nThe type of element traversed by the iterator.\nAvailable when Elements conforms to Collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/sequence-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence and Base.Element conforms to Sequence.\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> FlattenSequence<Base>.Iterator\nReturns an iterator over the elements of this sequence.\nAvailable when Base conforms to Sequence and Base.Element conforms to Sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements.\nAvailable when Base conforms to Sequence and Base.Element conforms to Sequence."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/iterator/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/contains(_:)",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Element?\nReturns nil, indicating that there are no more elements."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/flatmap(_:)-2c6m",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> LazyFilterSequence<Base>.Iterator.Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Base conforms to Sequence.\nType Aliases\ntypealias Element\nThe type of element traversed by the iterator.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/joined(separator:)-8az16",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "lexicographicallyPrecedes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/contains(_:)",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "makeIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/makeiterator()",
    "html": "Discussion\n\nComplexity\n\nO(1)."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/flattensequence/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> FlattenSequence<Base>.Iterator.Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Base conforms to Sequence and Base.Element conforms to Sequence.\nType Aliases\ntypealias Element\nThe type of element traversed by the iterator.\nAvailable when Base conforms to Sequence and Base.Element conforms to Sequence."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/joined(separator:)-7oert",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/joined(separator:)-91j18",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "lexicographicallyPrecedes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the largest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet greatestHeight = heights.max()\nprint(greatestHeight)\n// Prints \"Optional(67.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/map(_:)-1c49v",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/indexingiterator/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Elements conforms to Collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anysequence/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> AnySequence<Element>.Iterator\nReturns an iterator over the elements of this sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/dropwhilesequence/sequence-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence.\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> DropWhileSequence<Base>.Iterator\nReturns an iterator over the elements of this sequence.\nAvailable when Base conforms to Sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "Int8.Words.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "Int8.Words.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/iteratorsequence/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Base.Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Base conforms to IteratorProtocol.\nType Aliases\ntypealias Element\nThe type of element traversed by the iterator.\nAvailable when Base conforms to IteratorProtocol."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "Int64.Words.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "Int64.Words.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "Int32.Words.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "Int32.Words.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "Int32.Words.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/dropfirstsequence/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> DropFirstSequence<Base>.Iterator\nReturns an iterator over the elements of this sequence.\nAvailable when Base conforms to Sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements.\nAvailable when Base conforms to Sequence.\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyrandomaccesscollection/init(_:)-2j41k",
    "html": "Discussion\n\nIf the underlying collection stored by other does not satisfy RandomAccessCollection, the result is nil.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyrandomaccesscollection/init(_:)-66pkb",
    "html": "Discussion\n\nIf the underlying collection stored by other does not satisfy RandomAccessCollection, the result is nil.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/emptycollection/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the smallest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet lowestHeight = heights.min()\nprint(lowestHeight)\n// Prints \"Optional(58.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "Int8.Words.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int32/words-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequenceprotocol/flatmap(_:)-9blrr",
    "html": "Discussion\n\nUse this method to receive a single-level sequence when your transformation produces a sequence or collection for each element. Calling flatMap(_:) on a sequence s is equivalent to calling s.map(transform).joined().\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequenceprotocol/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false otherwise. Once predicate returns false it will not be called again."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequenceprotocol/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nDiscussion\n\nUse this method to receive a sequence of non-optional values when your transformation produces an optional value.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequenceprotocol/flatmap(_:)-11y2e",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nDiscussion\n\nUse this method to receive a sequence of non-optional values when your transformation produces an optional value.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequenceprotocol/filter(_:)",
    "html": "Discussion\n\nNote\n\nThe elements of the result are computed on-demand, as the result is used. No buffering storage is allocated and each traversal step invokes predicate on one or more underlying elements."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyrandomaccesscollection/randomaccesscollection-implementations",
    "html": "Topics\nInstance Properties\nvar endIndex: AnyRandomAccessCollection<Element>.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar startIndex: AnyRandomAccessCollection<Element>.Index\nThe position of the first element in a non-empty collection.\nInstance Methods\nfunc distance(from: AnyRandomAccessCollection<Element>.Index, to: AnyRandomAccessCollection<Element>.Index) -> Int\nReturns the distance between two indices.\nfunc formIndex(after: inout AnyRandomAccessCollection<Element>.Index)\nReplaces the given index with its successor.\nfunc formIndex(before: inout AnyRandomAccessCollection<Element>.Index)\nReplaces the given index with its predecessor.\nfunc index(AnyRandomAccessCollection<Element>.Index, offsetBy: Int) -> AnyRandomAccessCollection<Element>.Index\nReturns an index that is the specified distance from the given index.\nfunc index(AnyRandomAccessCollection<Element>.Index, offsetBy: Int, limitedBy: AnyRandomAccessCollection<Element>.Index) -> AnyRandomAccessCollection<Element>.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: AnyRandomAccessCollection<Element>.Index) -> AnyRandomAccessCollection<Element>.Index\nReturns the position immediately after the given index.\nfunc index(before: AnyRandomAccessCollection<Element>.Index) -> AnyRandomAccessCollection<Element>.Index\nReturns the position immediately before the given index.\nSubscripts\nsubscript(AnyRandomAccessCollection<Element>.Index) -> Element\nAccesses the element indicated by position.\nsubscript(Range<AnyRandomAccessCollection<Element>.Index>) -> AnyRandomAccessCollection<Element>.SubSequence\nAccesses a contiguous subrange of the collection’s elements."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequenceprotocol/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false otherwise. Once predicate returns false it will not be called again."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyrandomaccesscollection/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element is String.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeLast(Int)\nRemoves the given number of elements from the end of the collection.\nAvailable when Self is Self.SubSequence.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyrandomaccesscollection/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements.\nvar first: Self.Element?\nThe first element of the collection.\nvar indices: DefaultIndices<Self>\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Indices is DefaultIndices<Self>.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nInstance Methods\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> AnyRandomAccessCollection<Element>.Iterator\nReturns an iterator over the elements of this collection.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc popFirst() -> Self.Element?\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nAvailable when Self is Self.SubSequence.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nAvailable when Self is Self.SubSequence.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "Int64.Words.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "Int16.Words.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyrandomaccesscollection/init(_:)-1qlza",
    "html": "Parameters\nbase\n\nThe collection to wrap.\n\nDiscussion\n\nComplexity\n\nO(1)."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyrandomaccesscollection/init(_:)-60sab",
    "html": "Discussion\n\nComplexity\n\nO(1)"
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "Int16.Words.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.struct/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-xuqk",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "Elements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequenceprotocol/elements-swift.associatedtype",
    "html": "Required\n\nDiscussion\n\nSee also: elements"
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "elements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequenceprotocol/elements-6570c",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nWhen implementing lazy operations, wrapping elements instead of self can prevent result types from growing an extra LazySequence layer.\n\nNote: this property need not be implemented by conforming types, it has a default implementation in a protocol extension that just returns self.\n\nDefault Implementations\nLazySequenceProtocol Implementations\nvar elements: Self\nIdentical to self.\nAvailable when Self is Self.Elements."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyiterator/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyrandomaccesscollection/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyiterator/init(_:)-3m1u6",
    "html": "Parameters\nbase\n\nAn iterator to type-erase.\n\nDiscussion\n\nYou can use AnyIterator to hide the type signature of a more complex iterator. For example, the digits() function in the following example creates an iterator over a collection that lazily maps the elements of a Range<Int> instance to strings. Instead of returning an iterator with a type that encapsulates the implementation of the collection, the digits() function first wraps the iterator in an AnyIterator instance.\n\nfunc digits() -> AnyIterator<String> {\n    let lazyStrings = (0..<10).lazy.map { String($0) }\n    let iterator:\n        LazyMapSequence<Range<Int>, String>.Iterator\n        = lazyStrings.makeIterator()\n\n\n    return AnyIterator(iterator)\n}\n"
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-decq",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyiterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Element?\nAdvances to the next element and returns it, or nil if no next element exists."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyiterator/init(_:)-5l6js",
    "html": "Parameters\nbody\n\nA closure that returns an optional element. body is executed each time the next() method is called on the resulting iterator.\n\nDiscussion\n\nThe following example creates an iterator that counts up from the initial value of an integer x to 15:\n\nvar x = 7\nlet iterator: AnyIterator<Int> = AnyIterator {\n    defer { x += 1 }\n    return x < 15 ? x : nil\n}\nlet a = Array(iterator)\n// a == [7, 8, 9, 10, 11, 12, 13, 14]\n"
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int64/words-swift.struct/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "Int16.Words.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int16/words-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-3zluy",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-7opy8",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?"
  },
  {
    "title": "UInt64.Words.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "~=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/rangeexpression/~=(_:_:)",
    "html": "Parameters\npattern\n\nA range.\n\nbound\n\nA value to match against pattern.\n\nDiscussion\n\nYou can use the pattern-matching operator (~=) to test whether a value is included in a range. The pattern-matching operator is used internally in case statements for pattern matching. The following example uses the ~= operator to test whether an integer is included in a range of single-digit numbers:\n\nlet chosenNumber = 3\nif 0..<10 ~= chosenNumber {\n    print(\"\\(chosenNumber) is a single digit.\")\n}\n// Prints \"3 is a single digit.\"\n"
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/rangeexpression/contains(_:)",
    "html": "Required\n\nParameters\nelement\n\nThe element to check for containment.\n\nReturn Value\n\ntrue if element is contained in the range expression; otherwise, false."
  },
  {
    "title": "Bound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/rangeexpression/bound",
    "html": "Required"
  },
  {
    "title": "relative(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/rangeexpression/relative(to:)",
    "html": "Required\n\nParameters\ncollection\n\nThe collection to evaluate this range expression in relation to.\n\nReturn Value\n\nA range suitable for slicing collection. The returned range is not guaranteed to be inside the bounds of collection. Callers should apply the same preconditions to the return value as they would to a range provided directly by the user.\n\nDiscussion\n\nYou can use the relative(to:) method to convert a range expression, which could be missing one or both of its endpoints, into a concrete range that is bounded on both sides. The following example uses this method to convert a partial range up to 4 into a half-open range, using an array instance to add the range’s lower bound.\n\nlet numbers = [10, 20, 30, 40, 50, 60, 70]\nlet upToFour = ..<4\n\n\nlet r1 = upToFour.relative(to: numbers)\n// r1 == 0..<4\n\n\nThe r1 range is bounded on the lower end by 0 because that is the starting index of the numbers array. When the collection passed to relative(to:) starts with a different index, that index is used as the lower bound instead. The next example creates a slice of numbers starting at index 2, and then uses the slice with relative(to:) to convert upToFour to a concrete range.\n\nlet numbersSuffix = numbers[2...]\n// numbersSuffix == [30, 40, 50, 60, 70]\n\n\nlet r2 = upToFour.relative(to: numbersSuffix)\n// r2 == 2..<4\n\n\nUse this method only if you need the concrete range it produces. To access a slice of a collection using a range expression, use the collection’s generic subscript that uses a range expression as its parameter.\n\nlet numbersPrefix = numbers[upToFour]\n// numbersPrefix == [10, 20, 30, 40]\n"
  },
  {
    "title": "superDecoder(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/superdecoder(forkey:)",
    "html": "Required\n\nParameters\nkey\n\nThe key to decode super for.\n\nReturn Value\n\nA new Decoder to pass to super.init(from:).\n\nDiscussion\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "superDecoder() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/superdecoder()",
    "html": "Required\n\nReturn Value\n\nA new Decoder to pass to super.init(from:).\n\nDiscussion\n\nEquivalent to calling superDecoder(forKey:) with Key(stringValue: \"super\", intValue: 0).\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the default super key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the default super key."
  },
  {
    "title": "nestedContainer(keyedBy:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/nestedcontainer(keyedby:forkey:)",
    "html": "Required\n\nParameters\ntype\n\nThe key type to use for the container.\n\nkey\n\nThe key that the nested container is associated with.\n\nReturn Value\n\nA keyed decoding container view into self.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered stored value is not a keyed container."
  },
  {
    "title": "nestedUnkeyedContainer(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/nestedunkeyedcontainer(forkey:)",
    "html": "Required\n\nParameters\nkey\n\nThe key that the nested container is associated with.\n\nReturn Value\n\nAn unkeyed decoding container view into self.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered stored value is not an unkeyed container."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-7p1j1",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-lc54",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-3pes5",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-6n52q",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-5k5md",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-5ymbd",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-375xf",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-5bqjw",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-17w89",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-39kc6",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-1saky",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-1qynx",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?"
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-kecy",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "Publisher Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/publisher-swift.struct/publisher-implementations",
    "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher’s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher’s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don’t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/joined()-1ob4c",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-880hl",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-3cyg",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-1pd5k",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "codingPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/codingpath",
    "html": "Required"
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/contains(_:)",
    "html": "Required\n\nParameters\nkey\n\nThe key to search for.\n\nReturn Value\n\nWhether the Decoder has an entry for the given key.\n\nDiscussion\n\nThe value associated with key may be a null value as appropriate for the data format."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/publisher-swift.struct/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Result<Result<Success, Failure>.Publisher.Output, Failure>.Publisher, Result<Result<Success, Failure>.Publisher.Output, Failure>.Publisher) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Success conforms to Equatable, Failure conforms to Equatable, and Failure conforms to Error."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/publisher-swift.struct/init(_:)-516t",
    "html": "Parameters\nresult\n\nThe result to deliver to each subscriber.\n\nDiscussion\n\nIf result is doc://com.apple.documentation/documentation/Swift/Result/success, then the publisher waits until it receives a request for at least one value, then sends the output to all subscribers and finishes normally. If result is doc://com.apple.documentation/documentation/Swift/Result/failure, then the publisher sends the failure immediately upon subscription.\n\nSee Also\nCreating a Result Publisher\ninit(Failure)\nCreates a publisher that immediately terminates upon subscription with the given failure.\ninit(Result<Success, Failure>.Publisher.Output)\nCreates a publisher that sends the specified output to all subscribers and finishes normally."
  },
  {
    "title": "receive(subscriber:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/publisher-swift.struct/receive(subscriber:)",
    "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Result.Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Result.Publisher must implement this method.\n\nThe provided implementation of Publisher/subscribe(_:)-4u8kncalls this method."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/publisher-swift.struct/init(_:)-7t2tt",
    "html": "Parameters\noutput\n\nThe output to deliver to each subscriber.\n\nSee Also\nCreating a Result Publisher\ninit(Result<Result<Success, Failure>.Publisher.Output, Failure>)\nCreates a publisher that delivers the specified result.\ninit(Failure)\nCreates a publisher that immediately terminates upon subscription with the given failure."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/publisher-swift.struct/init(_:)-69fv4",
    "html": "Parameters\nfailure\n\nThe failure to send when terminating.\n\nSee Also\nCreating a Result Publisher\ninit(Result<Result<Success, Failure>.Publisher.Output, Failure>)\nCreates a publisher that delivers the specified result.\ninit(Result<Success, Failure>.Publisher.Output)\nCreates a publisher that sends the specified output to all subscribers and finishes normally."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "UInt64.Words.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "UInt64.Words.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/words-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-8qp1h",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodeifpresent(_:forkey:)-7jjj2",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nKeyedDecodingContainerProtocol Implementations\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?"
  },
  {
    "title": "decodeNil(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decodenil(forkey:)",
    "html": "Required\n\nParameters\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nWhether the encountered value was null.\n\nDiscussion\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-p613",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the largest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet greatestHeight = heights.max()\nprint(greatestHeight)\n// Prints \"Optional(67.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/map(_:)-8gpfs",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "lexicographicallyPrecedes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/joined(separator:)-1n2gn",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-4k53i",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/joined(separator:)-26tel",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-873gm",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-8h5vd",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-5jtvg",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-5kzmf",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-62kn6",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/decode(_:forkey:)-43hen",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "Key | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/key",
    "html": "Required"
  },
  {
    "title": "allKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainerprotocol/allkeys",
    "html": "Required\n\nDiscussion\n\nDifferent keyed containers from the same Decoder may return different keys here; it is possible to encode with multiple key types which are not convertible to one another. This should report all keys present which are convertible to the requested type."
  },
  {
    "title": "lexicographicallyPrecedes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/lexicographicallyprecedes(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering; otherwise, false.\n\nDiscussion\n\nThis example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.\n\nlet a = [1, 2, 2, 2]\nlet b = [1, 2, 3, 4]\n\n\nprint(a.lexicographicallyPrecedes(b))\n// Prints \"true\"\nprint(b.lexicographicallyPrecedes(b))\n// Prints \"false\"\n\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: LazyFilterSequence<Base>.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nAvailable when Base conforms to Collection.\nvar indices: DefaultIndices<Self>\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Indices is DefaultIndices<Self>.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: LazyFilterSequence<Base>.Index\nThe position of the first element in a non-empty collection.\nAvailable when Base conforms to Collection.\nInstance Methods\nfunc distance(from: LazyFilterSequence<Base>.Index, to: LazyFilterSequence<Base>.Index) -> Int\nReturns the distance between two indices.\nAvailable when Base conforms to Collection.\nfunc distance(from: Self.Index, to: Self.Index) -> Int\nReturns the distance between two indices.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout LazyFilterSequence<Base>.Index)\nReplaces the given index with its successor.\nAvailable when Base conforms to Collection.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(LazyFilterSequence<Base>.Index, offsetBy: Int) -> LazyFilterSequence<Base>.Index\nReturns an index that is the specified distance from the given index.\nAvailable when Base conforms to Collection.\nfunc index(Self.Index, offsetBy: Int) -> Self.Index\nReturns an index that is the specified distance from the given index.\nfunc index(LazyFilterSequence<Base>.Index, offsetBy: Int, limitedBy: LazyFilterSequence<Base>.Index) -> LazyFilterSequence<Base>.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nAvailable when Base conforms to Collection.\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: LazyFilterSequence<Base>.Index) -> LazyFilterSequence<Base>.Index\nReturns the position immediately after the given index.\nAvailable when Base conforms to Collection.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript(Range<LazyFilterSequence<Base>.Index>) -> LazyFilterSequence<Base>.SubSequence\nAccesses a contiguous subrange of the collection’s elements.\nAvailable when Base conforms to Collection.\nsubscript(LazyFilterSequence<Base>.Index) -> LazyFilterSequence<Base>.Element\nAccesses the element at position.\nAvailable when Base conforms to Collection.\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nType Aliases\ntypealias Index\nA type that represents a valid position in the collection.\nAvailable when Base conforms to Collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\nAvailable when Base conforms to Collection.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection.\nAvailable when Base conforms to Collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/sequence-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence.\nInstance Properties\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nAvailable when Base conforms to Sequence.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> LazyMapSequence<Base, Element>.Iterator\nReturns an iterator over the elements of this sequence.\nAvailable when Base conforms to Sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nAvailable when Base conforms to Collection.\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: Base.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nAvailable when Base conforms to Collection.\nvar indices: LazyMapSequence<Base, Element>.Indices\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Base conforms to Collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nAvailable when Base conforms to Collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: Base.Index\nThe position of the first element in a nonempty collection.\nAvailable when Base conforms to Collection.\nInstance Methods\nfunc distance(from: Self.Index, to: Self.Index) -> Int\nReturns the distance between two indices.\nfunc distance(from: LazyMapSequence<Base, Element>.Index, to: LazyMapSequence<Base, Element>.Index) -> Int\nReturns the distance between two indices.\nAvailable when Base conforms to Collection.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout LazyMapSequence<Base, Element>.Index)\nReplaces the given index with its successor.\nAvailable when Base conforms to Collection.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(LazyMapSequence<Base, Element>.Index, offsetBy: Int) -> LazyMapSequence<Base, Element>.Index\nReturns an index that is the specified distance from the given index.\nAvailable when Base conforms to Collection.\nfunc index(Self.Index, offsetBy: Int) -> Self.Index\nReturns an index that is the specified distance from the given index.\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(LazyMapSequence<Base, Element>.Index, offsetBy: Int, limitedBy: LazyMapSequence<Base, Element>.Index) -> LazyMapSequence<Base, Element>.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nAvailable when Base conforms to Collection.\nfunc index(after: LazyMapSequence<Base, Element>.Index) -> LazyMapSequence<Base, Element>.Index\nReturns the position immediately after the given index.\nAvailable when Base conforms to Collection.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript(Base.Index) -> Element\nAccesses the element at position.\nAvailable when Base conforms to Collection.\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript(Range<Base.Index>) -> LazyMapSequence<Base, Element>.SubSequence\nAccesses a contiguous subrange of the collection’s elements.\nAvailable when Base conforms to Collection.\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\nAvailable when Base conforms to Collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\nAvailable when Base conforms to Collection.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection.\nAvailable when Base conforms to Collection."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/flatmap(_:)-9fckz",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/iterator/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/droplast(_:)",
    "html": "Parameters\nn\n\nThe number of elements to drop off the end of the sequence. n must be greater than or equal to zero.\n\nReturn Value\n\nA sequence leaving off the specified number of elements.\n\nDiscussion\n\nThe sequence must be finite. If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/underestimatedcount",
    "html": "Discussion\n\nThe default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively.\n\nComplexity\n\nO(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> LazyPrefixWhileSequence<Base>.Iterator.Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "init(base:separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/joinedsequence/init(base:separator:)",
    "html": "Discussion\n\nComplexity\n\nO(separator.count)."
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/map(_:)-6vozg",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "Optional.Publisher.Failure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/publisher-swift.struct/failure",
    "html": "Discussion\n\nThe optional publisher never produces errors.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of value published by this publisher."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/joinedsequence/sequence-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nAn iterator that presents the elements of the sequences traversed by a base iterator, concatenated using a given separator.\nAvailable when Base conforms to Sequence and Base.Element conforms to Sequence.\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> JoinedSequence<Base>.Iterator\nReturn an iterator over the elements of this sequence.\nAvailable when Base conforms to Sequence and Base.Element conforms to Sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc distance(from: Self.Index, to: Self.Index) -> Int\nfunc formIndex(before: inout LazyFilterSequence<Base>.Index)\nReplaces the given index with its predecessor.\nAvailable when Base conforms to BidirectionalCollection.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc index(Self.Index, offsetBy: Int) -> Self.Index\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nfunc index(before: LazyFilterSequence<Base>.Index) -> LazyFilterSequence<Base>.Index\nReturns the position immediately before the given index.\nAvailable when Base conforms to BidirectionalCollection.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element is String.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/sequence-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nAn iterator over the elements traversed by some base iterator that also satisfy a given predicate.\nAvailable when Base conforms to Sequence.\nInstance Properties\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> LazyFilterSequence<Base>.Iterator\nReturns an iterator over the elements of this sequence.\nAvailable when Base conforms to Sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "LazySequenceProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyfiltersequence/lazysequenceprotocol-implementations",
    "html": "Topics\nInstance Properties\nvar elements: Self\nIdentical to self.\nAvailable when Self is Self.Elements.\nvar lazy: Self.Elements\nInstance Methods\nfunc compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>\nReturns a lazy sequence that skips any initial elements that satisfy predicate.\nfunc flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>\nReturns the concatenated results of mapping the given transformation over this sequence.\nfunc flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc joined() -> LazySequence<FlattenSequence<Self.Elements>>\nReturns a lazy sequence that concatenates the elements of this sequence of sequences.\nAvailable when Element conforms to Sequence.\nfunc map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>\nReturns a LazyMapSequence over this Sequence. The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.\nfunc prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>\nReturns a lazy sequence of the initial consecutive elements that satisfy predicate.\nType Aliases\ntypealias Elements\nA Sequence that can contain the same elements as this one, possibly with a simpler type.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/prefixsequence/sequence-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence.\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> PrefixSequence<Base>.Iterator\nReturns an iterator over the elements of this sequence.\nAvailable when Base conforms to Sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "LazyMapSequence.Elements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/elements-swift.typealias",
    "html": "Discussion\n\nSee also: elements"
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc distance(from: Self.Index, to: Self.Index) -> Int\nfunc formIndex(before: inout LazyMapSequence<Base, Element>.Index)\nReplaces the given index with its predecessor.\nAvailable when Base conforms to BidirectionalCollection.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc index(Self.Index, offsetBy: Int) -> Self.Index\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nfunc index(before: LazyMapSequence<Base, Element>.Index) -> LazyMapSequence<Base, Element>.Index\nA value less than or equal to the number of elements in the collection.\nAvailable when Base conforms to BidirectionalCollection.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element is String.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate."
  },
  {
    "title": "LazySequenceProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/lazysequenceprotocol-implementations",
    "html": "Topics\nInstance Properties\nvar elements: Self\nIdentical to self.\nAvailable when Self is Self.Elements.\nvar lazy: Self.Elements\nInstance Methods\nfunc compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>\nReturns a lazy sequence that skips any initial elements that satisfy predicate.\nfunc filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>\nReturns the elements of self that satisfy isIncluded.\nfunc flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>\nReturns the concatenated results of mapping the given transformation over this sequence.\nfunc joined() -> LazySequence<FlattenSequence<Self.Elements>>\nReturns a lazy sequence that concatenates the elements of this sequence of sequences.\nAvailable when Element conforms to Sequence.\nfunc map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>\nReturns a LazyMapSequence over this Sequence. The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.\nfunc prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>\nReturns a lazy sequence of the initial consecutive elements that satisfy predicate."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/iterator/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> Self\nReturns an iterator over the elements of this sequence.\nAvailable when Self is Self.Iterator.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "IteratorProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/iterator/iteratorprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc next() -> Element?\nAdvances to the next element and returns it, or nil if no next element exists.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/compactmap(_:)-8vlm9",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/contains(_:)",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "elementsEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/elementsequal(_:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nReturn Value\n\ntrue if this sequence and other contain the same elements in the same order.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThis example tests whether one countable range shares the same elements as another countable range and an array.\n\nlet a = 1...3\nlet b = 1...10\n\n\nprint(a.elementsEqual(b))\n// Prints \"false\"\nprint(a.elementsEqual([1, 2, 3]))\n// Prints \"true\"\n\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the sequence. k must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/contains(_:)",
    "html": "Parameters\nelement\n\nThe element to find in the sequence.\n\nReturn Value\n\ntrue if the element was found in the sequence; otherwise, false.\n\nDiscussion\n\nThis example checks to see whether a favorite actor is in an array storing a movie’s cast.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nprint(cast.contains(\"Marlon\"))\n// Prints \"true\"\nprint(cast.contains(\"James\"))\n// Prints \"false\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/compactmap(_:)-29nfp",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "header | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbufferpointer/header",
    "html": "See Also\nInspecting a Buffer\nvar capacity: Int\nThe actual number of elements that can be stored in this object.\nvar buffer: AnyObject\nReturns the object instance being used for storage.\nfunc isUniqueReference() -> Bool\nReturns true if self holds the only strong reference to its buffer; otherwise, returns false."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/sequence/withcontiguousstorageifavailable(_:)-2gxj0",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "buffer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbufferpointer/buffer",
    "html": "See Also\nInspecting a Buffer\nvar capacity: Int\nThe actual number of elements that can be stored in this object.\nvar header: Header\nThe stored Header instance.\nfunc isUniqueReference() -> Bool\nReturns true if self holds the only strong reference to its buffer; otherwise, returns false."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the sequence. k must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/flatmap(_:)-1kjs0",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/joined(separator:)-vht5",
    "html": "Parameters\nseparator\n\nA sequence to insert between each of this sequence’s elements.\n\nReturn Value\n\nThe joined sequence of elements.\n\nDiscussion\n\nThis example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator:\n\nlet nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlet joined = nestedNumbers.joined(separator: [-1, -2])\nprint(Array(joined))\n// Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\"\n"
  },
  {
    "title": "joined() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/joined()-28y7l",
    "html": "Return Value\n\nA flattened view of the elements of this sequence of sequences.\n\nDiscussion\n\nIn this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn.\n\nlet ranges = [0..<3, 8..<10, 15..<17]\n\n\n// A for-in loop over 'ranges' accesses each range:\nfor range in ranges {\n  print(range)\n}\n// Prints \"0..<3\"\n// Prints \"8..<10\"\n// Prints \"15..<17\"\n\n\n// Use 'joined()' to access each element of each range:\nfor index in ranges.joined() {\n    print(index, terminator: \" \")\n}\n// Prints: \"0 1 2 8 9 15 16\"\n"
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/joined(separator:)-vz9k",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/publisher-swift.struct/init(_:)",
    "html": "Parameters\noutput\n\nThe result to deliver to each subscriber."
  },
  {
    "title": "receive(subscriber:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/publisher-swift.struct/receive(subscriber:)",
    "html": "Parameters\nsubscriber\n\nThe subscriber to add."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/underestimatedcount",
    "html": "Discussion\n\nThe default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively.\n\nComplexity\n\nO(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount."
  },
  {
    "title": "Publisher Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/publisher-swift.struct/publisher-implementations",
    "html": "Topics\nInstance Properties\nvar values: AsyncPublisher<Self>\nThe elements produced by the publisher, as an asynchronous sequence.\nAvailable when Failure is Never.\nInstance Methods\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher’s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher’s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don’t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don’t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
  },
  {
    "title": "iso8601 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/iso8601",
    "html": "Discussion\n\nThis property matches date substrings in accordance with the formatting of Foundation’s Date.ISO8601FormatStyle. This matches the default format of the ISO 8601 format style.\n\nThe following example creates a Regex that matches a date formatted with the base ISO 8601 format. It then matches this regex against a source string containing a date and time with this format (using the default UTC time zone, which Z indicates), some whitespace, a substring, more whitespace, and a currency value.\n\nlet iso860Source = \"2022-07-14T21:10:15Z   Lemon-lime slushie      $1.99\"\nlet matcher = Regex {\n    Capture {\n        One(.iso8601)\n    }\n    OneOrMore(.horizontalWhitespace)\n    OneOrMore(.any)\n    OneOrMore(.horizontalWhitespace)\n    One(.localizedCurrency(code:Locale.Currency(\"USD\"),\n                           locale:Locale(identifier: \"en_US\")))\n}\nlet match = iso860Source.firstMatch(of: matcher)\nlet date = match?.1 // date == Jul 14, 2022 at 2:10 PM PST\n\nSee Also\nMatching dates and times\nstatic func date(Date.FormatStyle.DateStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date string formatted in accordance with a style, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func date(format: Date.FormatString, locale: Locale, timeZone: TimeZone, calendar: Calendar?, twoDigitStartDate: Date) -> Self\nCreates a regex component that matches a localized date string formatted in accordance with a format string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func dateTime(date: Date.FormatStyle.DateStyle, time: Date.FormatStyle.TimeStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date and time string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func iso8601Date(timeZone: TimeZone, dateSeparator: Date.ISO8601FormatStyle.DateSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing it as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601(timeZone: TimeZone, includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing the matched substring as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601WithTimeZone(includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator, timeZoneSeparator: Date.ISO8601FormatStyle.TimeZoneSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string that includes a time zone component, capturing the matched substring as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle."
  },
  {
    "title": "localizedCurrency(code:locale:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/localizedcurrency(code:locale:)",
    "html": "Parameters\ncode\n\nThe currency code that indicates the currency symbol or name to match against.\n\nlocale\n\nThe locale that specifies formatting conventions to use when matching currency strings.\n\nReturn Value\n\nA RegexComponent that matches localized currency substrings as Int instances.\n\nDiscussion\n\nThis method matches currency substrings in accordance with the provided currency code and locale. For example, the currency code USD matches U.S. dollars, which use the symbol $, and JPY matches Japanese yen, which use the symbol ¥. The locale determines formatting conventions for number separators in the currency value. The regex uses both of these to match currency substrings.\n\nThe method preserves fractional parts in currency strings. To match currency strings without fractional parts, you may use localizedIntegerCurrency(code:locale:) to capture integer values.\n\nThe following example creates a Regex that matches a date and time followed by whitespace and a currency value that uses U.S. dollars and the en_US locale. It then matches this regex against a source string containing a date with this format, some whitespace, and a currency value in dollars.\n\nlet enUSLocale = Locale(languageCode: .english, languageRegion: .unitedStates)\nlet source = \"7/31/2022, 5:15:12 AM    $39,739.45\"\nlet matcher = Regex {\n    One(.dateTime(date: .numeric,\n                  time: .standard,\n                  locale: enUSLocale,\n                  timeZone: TimeZone(identifier: \"PST\")!))\n    OneOrMore(.horizontalWhitespace)\n    Capture {\n        One(.localizedCurrency(code: Locale.Currency(\"USD\"),\n                               locale: enUSLocale))\n    }\n}\n\n\nguard let match = source.firstMatch(of: matcher) else { return }\nlet currency = match?.1 // currency = 39739.45\n\nSee Also\nMatching numeric formats\nstatic func localizedInteger(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.\nstatic func localizedDouble(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.\nstatic func localizedDecimal(locale: Locale) -> Self\nCreates a regex component that matches a localized decimal string, capturing it as a Foundation decimal.\nAvailable when Self is Decimal.FormatStyle.\nstatic func localizedIntegerCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.Currency.\nstatic func localizedIntegerPercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is IntegerFormatStyle<Int>.Percent.\nstatic func localizedDoublePercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.Percent."
  },
  {
    "title": "iso8601Date(timeZone:dateSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/iso8601date(timezone:dateseparator:)",
    "html": "Parameters\ntimeZone\n\nThe time zone to use when returning a captured Date. The returned date’s time value is 00:00:00 in this time zone.\n\ndateSeparator\n\nThe character that separates year, month, and day sections of the date substring.\n\nReturn Value\n\nA RegexComponent that matches ISO 8601-formatted date substrings as Foundation Date instances.\n\nDiscussion\n\nThis method matches an ISO 8601 date string using the provided date separator. This method only matches a date substring. If the source string also contains a time, this method doesn’t match it. To match both date and time in an ISO 8601-formatted string, use iso8601(timeZone:includingFractionalSeconds:dateSeparator:dateTimeSeparator:timeSeparator:).\n\nThe returned date’s time is midnight in the provided time zone.\n\nThe following example creates a Regex that matches a date formatted with the base ISO 8601 format and dashes for date separators. It then matches this regex against a source string containing a date with this format, some whitespace, a substring, more whitespace, and a currency value.\n\nlet iso860Source = \"2022-07-14   Lemon-lime slushie      $1.99\"\nlet matcher = Regex {\n    Capture {\n        One(.iso8601Date(timeZone: TimeZone(identifier: \"PST\")!,\n                         dateSeparator: .dash))\n    }\n    OneOrMore(.horizontalWhitespace)\n    OneOrMore(.any)\n    OneOrMore(.horizontalWhitespace)\n    One(.localizedCurrency(code:Locale.Currency(\"USD\"),\n                           locale:Locale(identifier: \"en_US\")))\n}\nlet match = iso860Source.firstMatch(of: matcher)\nlet date = match?.1 // date == Jul 14, 2022 at 12:00 AM PST\n\nSee Also\nMatching dates and times\nstatic func date(Date.FormatStyle.DateStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date string formatted in accordance with a style, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func date(format: Date.FormatString, locale: Locale, timeZone: TimeZone, calendar: Calendar?, twoDigitStartDate: Date) -> Self\nCreates a regex component that matches a localized date string formatted in accordance with a format string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func dateTime(date: Date.FormatStyle.DateStyle, time: Date.FormatStyle.TimeStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date and time string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic var iso8601: Date.ISO8601FormatStyle\nA regex component that matches a default ISO 8601-formatted date string, capturing it as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601(timeZone: TimeZone, includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing the matched substring as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601WithTimeZone(includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator, timeZoneSeparator: Date.ISO8601FormatStyle.TimeZoneSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string that includes a time zone component, capturing the matched substring as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle."
  },
  {
    "title": "dateTime(date:time:locale:timeZone:calendar:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/datetime(date:time:locale:timezone:calendar:)",
    "html": "Parameters\ndate\n\nA Date.FormatStyle.DateStyle to use when matching date substrings. Pass omitted to match a time-only substring.\n\ntime\n\nA Date.FormatStyle.TimeStyle to use when matching time substrings. Pass omitted to match a date-only substring.\n\nlocale\n\nThe locale to use when matching date substrings. Matching uses this locale to evaluate the order of date components. It also uses the locale’s language for date format styles that use words.\n\ntimeZone\n\nThe time zone to use when capturing the date and time values. The regex component ignores this parameter if the source string contains a time zone substring that the format style supports.\n\ncalendar\n\nThe calendar to use when matching date substrings. If nil, matching uses the default calendar of the specified locale.\n\nReturn Value\n\nA RegexComponent that matches date substrings as Foundation Date instances.\n\nDiscussion\n\nThis method matches date substrings in accordance with the formatting of Foundation’s Date.FormatStyle. If your source contains only a date or a time, use the .omitted value for the date or time style parameter to ignore the missing part.\n\nThe following example creates a Regex that matches a date and time formatted with the numeric style in the en_US locale. It then matches this regex against a source string containing a date with this format, some whitespace, a substring, more whitespace, and a currency value.\n\nlet enUSLocale = Locale(languageCode: .english, languageRegion: .unitedStates)\nlet source = \"7/31/2022, 5:15:12 PM  Lemon-lime slushie      $1.99\"\nlet matcher = Regex {\n    Capture {\n        One(.dateTime(date: .numeric,\n                      time: .standard,\n                      locale: enUSLocale,\n                      timeZone: TimeZone(identifier: \"PST\")!))\n    }\n    OneOrMore(.horizontalWhitespace)\n    OneOrMore(.any)\n    OneOrMore(.horizontalWhitespace)\n    One(.localizedCurrency(code: Locale.Currency(\"USD\"),\n                           locale: enUSLocale))\n}\n\n\nguard let match = source.firstMatch(of: matcher) else { return }\nlet date = match.1 // date == Jul 31, 2022 at 5:15 PM PST\n\nSee Also\nMatching dates and times\nstatic func date(Date.FormatStyle.DateStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date string formatted in accordance with a style, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func date(format: Date.FormatString, locale: Locale, timeZone: TimeZone, calendar: Calendar?, twoDigitStartDate: Date) -> Self\nCreates a regex component that matches a localized date string formatted in accordance with a format string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic var iso8601: Date.ISO8601FormatStyle\nA regex component that matches a default ISO 8601-formatted date string, capturing it as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601Date(timeZone: TimeZone, dateSeparator: Date.ISO8601FormatStyle.DateSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing it as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601(timeZone: TimeZone, includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing the matched substring as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601WithTimeZone(includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator, timeZoneSeparator: Date.ISO8601FormatStyle.TimeZoneSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string that includes a time zone component, capturing the matched substring as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle."
  },
  {
    "title": "date(_:locale:timeZone:calendar:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/date(_:locale:timezone:calendar:)",
    "html": "Parameters\nstyle\n\nA Date.FormatStyle.DateStyle to use when matching date substrings.\n\nlocale\n\nThe locale to use when matching date substrings. Matching uses this locale to evaluate the order of date components. It also uses the locale’s language for date format styles that use words.\n\ntimeZone\n\nThe time zone to use when returning a captured Date. The returned date’s time value is 00:00:00 in this time zone.\n\ncalendar\n\nThe calendar to use when matching date substrings. If nil, matching uses the default calendar of the specified locale.\n\nReturn Value\n\nA RegexComponent that matches date substrings as Foundation Date instances.\n\nDiscussion\n\nThis method matches date substrings in accordance with the formatting of Foundation’s Date.FormatStyle.\n\nIf a time value follows the date substring, the matcher ignores it, treating it as any other character sequence. To match date and time substrings, use dateTime(date:time:locale:timeZone:calendar:).\n\nThe following example creates a Regex that matches a date formatted with the numeric style in the en_US locale. It then matches this regex against a source string containing a date with this format, some whitespace, a substring, more whitespace, and a currency value.\n\nlet source = \"7/31/2022  Lemon-lime slushie      $1.99\"\nlet matcher = Regex {\n    Capture {\n        One(.date(.numeric,\n                  locale: Locale(identifier: \"en_US\"),\n                  timeZone: TimeZone(identifier: \"PST\")!))\n    }\n}\nguard let match = source.firstMatch(of: matcher) else { return }\nlet date = match.1 // date == Jul 31, 2022 at 12:00 AM PST\n\nSee Also\nMatching dates and times\nstatic func date(format: Date.FormatString, locale: Locale, timeZone: TimeZone, calendar: Calendar?, twoDigitStartDate: Date) -> Self\nCreates a regex component that matches a localized date string formatted in accordance with a format string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func dateTime(date: Date.FormatStyle.DateStyle, time: Date.FormatStyle.TimeStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date and time string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic var iso8601: Date.ISO8601FormatStyle\nA regex component that matches a default ISO 8601-formatted date string, capturing it as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601Date(timeZone: TimeZone, dateSeparator: Date.ISO8601FormatStyle.DateSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing it as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601(timeZone: TimeZone, includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing the matched substring as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601WithTimeZone(includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator, timeZoneSeparator: Date.ISO8601FormatStyle.TimeZoneSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string that includes a time zone component, capturing the matched substring as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/publisher-swift.struct/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Optional<Wrapped>.Publisher, Optional<Wrapped>.Publisher) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Wrapped conforms to Equatable."
  },
  {
    "title": "newlineSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/newlinesequence",
    "html": "Discussion\n\nThis character class is equivalent to \\R or \\n in regex syntax.\n\nSee Also\nMatching whitespace and line endings\nstatic var horizontalWhitespace: CharacterClass\nA character class that matches any element that is classified as horizontal whitespace.\nAvailable when Self is CharacterClass.\nstatic var verticalWhitespace: CharacterClass\nA character class that matches any element that is classified as vertical whitespace.\nAvailable when Self is CharacterClass.\nstatic var whitespace: CharacterClass\nA character class that matches any element that is classified as whitespace.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "whitespace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/whitespace",
    "html": "Discussion\n\nThis character class is equivalent to \\s in regex syntax.\n\nSee Also\nMatching whitespace and line endings\nstatic var horizontalWhitespace: CharacterClass\nA character class that matches any element that is classified as horizontal whitespace.\nAvailable when Self is CharacterClass.\nstatic var newlineSequence: CharacterClass\nA character class that matches any newline sequence.\nAvailable when Self is CharacterClass.\nstatic var verticalWhitespace: CharacterClass\nA character class that matches any element that is classified as vertical whitespace.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "withUnsafeMutablePointers(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbufferpointer/withunsafemutablepointers(_:)",
    "html": "Discussion\n\nNote\n\nThese pointers are valid only for the duration of the call to body.\n\nSee Also\nAccessing Buffer Contents\nfunc withUnsafeMutablePointerToElements<R>((UnsafeMutablePointer<Element>) throws -> R) rethrows -> R\nCall body with an UnsafeMutablePointer to the Element storage.\nfunc withUnsafeMutablePointerToHeader<R>((UnsafeMutablePointer<Header>) throws -> R) rethrows -> R\nCall body with an UnsafeMutablePointer to the stored Header."
  },
  {
    "title": "withUnsafeMutablePointerToElements(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbufferpointer/withunsafemutablepointertoelements(_:)",
    "html": "Discussion\n\nNote\n\nThis pointer is valid only for the duration of the call to body.\n\nSee Also\nAccessing Buffer Contents\nfunc withUnsafeMutablePointerToHeader<R>((UnsafeMutablePointer<Header>) throws -> R) rethrows -> R\nCall body with an UnsafeMutablePointer to the stored Header.\nfunc withUnsafeMutablePointers<R>((UnsafeMutablePointer<Header>, UnsafeMutablePointer<Element>) throws -> R) rethrows -> R\nCall body with UnsafeMutablePointers to the stored Header and raw Element storage."
  },
  {
    "title": "init(unsafeBufferObject:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbufferpointer/init(unsafebufferobject:)",
    "html": "Discussion\n\nPrecondition\n\nbuffer is an instance of a non-@objc class whose deinit destroys its stored Header and any constructed Elements.\n\nSee Also\nCreating a Buffer\ninit(bufferClass: AnyClass, minimumCapacity: Int, makingHeaderWith: (AnyObject, (AnyObject) -> Int) throws -> Header) rethrows\nCreate with new storage containing an initial Header and space for at least minimumCapacity elements."
  },
  {
    "title": "isUniqueReference() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbufferpointer/isuniquereference()",
    "html": "Discussion\n\nSee isKnownUniquelyReferenced for details.\n\nSee Also\nInspecting a Buffer\nvar capacity: Int\nThe actual number of elements that can be stored in this object.\nvar header: Header\nThe stored Header instance.\nvar buffer: AnyObject\nReturns the object instance being used for storage."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyindex/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (AnyIndex, AnyIndex) -> Bool\nReturns a Boolean value indicating whether two indices wrap equal underlying indices."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyindex/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func < (AnyIndex, AnyIndex) -> Bool\nReturns a Boolean value indicating whether the first argument represents a position before the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/droplast(_:)",
    "html": "Parameters\nn\n\nThe number of elements to drop off the end of the sequence. n must be greater than or equal to zero.\n\nReturn Value\n\nA sequence leaving off the specified number of elements.\n\nDiscussion\n\nThe sequence must be finite. If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "init(bufferClass:minimumCapacity:makingHeaderWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbufferpointer/init(bufferclass:minimumcapacity:makingheaderwith:)",
    "html": "Parameters\nbufferClass\n\nThe class of the object used for storage.\n\nminimumCapacity\n\nThe minimum number of Elements that must be able to be stored in the new buffer.\n\nfactory\n\nA function that produces the initial Header instance stored in the buffer, given the buffer object and a function that can be called on it to get the actual number of allocated elements.\n\nDiscussion\n\nPrecondition\n\nminimumCapacity >= 0, and the type indicated by bufferClass is a non-@objc class with no declared stored properties. The deinit of bufferClass must destroy its stored Header and any constructed Elements.\n\nSee Also\nCreating a Buffer\ninit(unsafeBufferObject: AnyObject)\nManage the given buffer."
  },
  {
    "title": "capacity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbufferpointer/capacity",
    "html": "Discussion\n\nThis value may be nontrivial to compute; it is usually a good idea to store this information in the “header” area when an instance is created.\n\nSee Also\nInspecting a Buffer\nvar header: Header\nThe stored Header instance.\nvar buffer: AnyObject\nReturns the object instance being used for storage.\nfunc isUniqueReference() -> Bool\nReturns true if self holds the only strong reference to its buffer; otherwise, returns false."
  },
  {
    "title": "Stride | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/strideable/stride",
    "html": "Required"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/strideable/equatable-implementations",
    "html": "Topics\nOperators\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "distance(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/strideable/distance(to:)-82vvc",
    "html": "Required Default implementation provided.\n\nParameters\nother\n\nThe value to calculate the distance to.\n\nReturn Value\n\nThe distance from this value to other.\n\nDiscussion\n\nIf this type’s Stride type conforms to BinaryInteger, then for two values x and y, and a distance n = x.distance(to: y), x.advanced(by: n) == y. Using this method with types that have a noninteger Stride may result in an approximation.\n\nComplexity\n\nO(1)\n\nDefault Implementations\nStrideable Implementations\nfunc distance(to: Self) -> Int\nReturns the distance from this value to the given value, expressed as a stride."
  },
  {
    "title": "advanced(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/strideable/advanced(by:)-7ezvv",
    "html": "Required Default implementation provided.\n\nParameters\nn\n\nThe distance to advance this value.\n\nReturn Value\n\nA value that is offset from this value by n.\n\nDiscussion\n\nUse the advanced(by:) method in generic code to offset a value by a specified distance. If you’re working directly with numeric values, use the addition operator (+) instead of this method.\n\nfunc addOne<T: Strideable>(to x: T) -> T\n    where T.Stride: ExpressibleByIntegerLiteral\n{\n    return x.advanced(by: 1)\n}\n\n\nlet x = addOne(to: 5)\n// x == 6\nlet y = addOne(to: 3.5)\n// y = 4.5\n\n\nIf this type’s Stride type conforms to BinaryInteger, then for a value x, a distance n, and a value y = x.advanced(by: n), x.distance(to: y) == n. Using this method with types that have a noninteger Stride may result in an approximation. If the result of advancing by n is not representable as a value of this type, then a runtime error may occur.\n\nComplexity\n\nO(1)\n\nDefault Implementations\nStrideable Implementations\nfunc advanced(by: Int) -> Self\nReturns a value that is offset the specified distance from this value.\nSee Also\nGetting an Offset Value\nstatic func + (Self, Self.Stride) -> Self\nAvailable when Self conforms to _Pointer.\nstatic func + (Self.Stride, Self) -> Self\nAvailable when Self conforms to _Pointer."
  },
  {
    "title": "digit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/digit",
    "html": "Discussion\n\nThis character class is equivalent to \\d in regex syntax.\n\nSee Also\nMatching substring sequences\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any Unicode scalar in the given sequence.\nAvailable when Self is CharacterClass.\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any character in the given string or sequence.\nAvailable when Self is CharacterClass.\nstatic var any: CharacterClass\nA character class that matches any element.\nAvailable when Self is CharacterClass.\nstatic var anyGraphemeCluster: CharacterClass\nA character class that matches any single Character, or extended grapheme cluster, regardless of the current semantic level.\nAvailable when Self is CharacterClass.\nstatic var anyNonNewline: CharacterClass\nA character class that matches any element that isn’t a newline.\nAvailable when Self is CharacterClass.\nstatic var hexDigit: CharacterClass\nA character class that matches any hexadecimal digit.\nAvailable when Self is CharacterClass.\nstatic var word: CharacterClass\nA character class that matches any element that is a “word character”.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/strideable/+(_:_:)-94mlm",
    "html": "See Also\nGetting an Offset Value\nfunc advanced(by: Self.Stride) -> Self\nReturns a value that is offset the specified distance from this value.\n\nRequired Default implementation provided.\n\nstatic func + (Self, Self.Stride) -> Self\nAvailable when Self conforms to _Pointer."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThis example finds the largest value in an array of height measurements.\n\nlet heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]\nlet greatestHeight = heights.max()\nprint(greatestHeight)\n// Prints \"Optional(67.5)\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "makeIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazymapsequence/makeiterator()",
    "html": "Discussion\n\nComplexity\n\nO(1)."
  },
  {
    "title": "Optional.Publisher.Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/publisher-swift.struct/output-swift.typealias",
    "html": "Discussion\n\nThis publisher produces the type wrapped by the optional.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of error this publisher might publish."
  },
  {
    "title": "LazyDropWhileSequence.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazydropwhilesequence/iterator",
    "html": "Overview\n\nThis is the associated iterator for the LazyDropWhileSequence, LazyDropWhileCollection, and LazyDropWhileBidirectionalCollection types.\n\nTopics\nType Aliases\ntypealias Element\nThe type of element traversed by the iterator.\nDefault Implementations\nIteratorProtocol Implementations\nRelationships\nConforms To\nIteratorProtocol\nConforms when Base conforms to Sequence."
  },
  {
    "title": "firstMatch(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/firstmatch(in:)-45hz7",
    "html": "Parameters\nstring\n\nThe substring to match this regular expression against.\n\nReturn Value\n\nThe match, if one is found; otherwise, nil.\n\nDiscussion\n\nUse the firstMatch(in:) method to search for the first occurrence of this regular expression in string. This example searches for the first sequence of digits that occurs in a string:\n\nlet digits = /[0-9]+/\n\n\nif let digitsMatch = try digits.firstMatch(in: \"The year is 2022; last year was 2021.\") {\n    print(digitsMatch.0)\n} else {\n    print(\"No match.\")\n}\n// Prints \"2022\"\n\n\nThe firstMatch(in:) method can throw an error if this regex includes a transformation closure that throws an error."
  },
  {
    "title": "magnitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/numeric/magnitude-swift.property",
    "html": "Required\n\nDiscussion\n\nFor any numeric value x, x.magnitude is the absolute value of x. You can use the magnitude property in operations that are simpler to implement in terms of unsigned values, such as printing the value of an integer, which is just printing a ‘-’ character in front of an absolute value.\n\nlet x = -200\n// x.magnitude == 200\n\n\nThe global abs(_:) function provides more familiar syntax when you need to find an absolute value. In addition, because abs(_:) always returns a value of the same type, even in a generic context, using the function instead of the magnitude property is encouraged."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/numeric/init(exactly:)",
    "html": "Required\n\nParameters\nsource\n\nA value to convert to this type.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 100, while the attempt to initialize the constant y from 1_000 fails because the Int8 type can represent 127 at maximum:\n\nlet x = Int8(exactly: 100)\n// x == Optional(100)\nlet y = Int8(exactly: 1_000)\n// y == nil\n"
  },
  {
    "title": "localizedInteger(locale:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/localizedinteger(locale:)",
    "html": "Parameters\nlocale\n\nThe locale that specifies formatting conventions to use when matching numeric strings.\n\nReturn Value\n\nA RegexComponent that matches localized substrings as Int instances.\n\nDiscussion\n\nThis method matches decimal substrings in accordance with the provided locale. For example, the value 1234567890 formats as 1,234,567,890 in the en_US locale, as 1 234 567 890 in the FR locale, and as 1234567890 in the JP locale. Because of this, the regex needs to know what locale convention to match against.\n\nThe following example creates a Regex that matches a date and time followed by whitespace and an integer formatted in the en_US locale. It then matches this regex against a source string containing a date with this format, some whitespace, and an integer value.\n\nlet enUSLocale = Locale(languageCode: .english, languageRegion: .unitedStates)\nlet source = \"7/31/2022, 5:15:12 AM  49,525\"\nlet matcher = Regex {\n    One(.dateTime(date: .numeric,\n                  time: .standard,\n                  locale: enUSLocale,\n                  timeZone: TimeZone(identifier: \"PST\")!))\n    OneOrMore(.horizontalWhitespace)\n    Capture {\n        One(.localizedInteger(locale: enUSLocale))\n    }\n}\nguard let match = source.firstMatch(of: matcher) else { return }\nlet matchedInteger = match?.1 // matchedInteger == 49525\n\nSee Also\nMatching numeric formats\nstatic func localizedDouble(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.\nstatic func localizedDecimal(locale: Locale) -> Self\nCreates a regex component that matches a localized decimal string, capturing it as a Foundation decimal.\nAvailable when Self is Decimal.FormatStyle.\nstatic func localizedCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as a decimal value.\nAvailable when Self is Decimal.FormatStyle.Currency.\nstatic func localizedIntegerCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.Currency.\nstatic func localizedIntegerPercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is IntegerFormatStyle<Int>.Percent.\nstatic func localizedDoublePercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.Percent."
  },
  {
    "title": "Magnitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/numeric/magnitude-swift.associatedtype",
    "html": "Required"
  },
  {
    "title": "zero | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/additivearithmetic/zero-2rcxw",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nZero is the identity element for addition. For any value, x + .zero == x and .zero + x == x.\n\nDefault Implementations\nAdditiveArithmetic Implementations\nstatic var zero: Self\nThe zero value.\nAvailable when Self conforms to ExpressibleByIntegerLiteral."
  },
  {
    "title": "*=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/numeric/*=(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply."
  },
  {
    "title": "-=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/additivearithmetic/-=(_:_:)-61h5x",
    "html": "Required Default implementation provided.\n\nParameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDefault Implementations\nAdditiveArithmetic Implementations\nstatic func -= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/additivearithmetic/+(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDiscussion\n\nThe addition operator (+) calculates the sum of its two arguments. For example:\n\n1 + 2                   // 3\n-10 + 15                // 5\n-15 + -5                // -20\n21.5 + 3.25             // 24.75\n\n\nYou cannot use + with arguments of different types. To add values of different types, convert one of the values to the other value’s type.\n\nlet x: Int8 = 21\nlet y: Int = 1000000\nInt(x) + y              // 1000021\n"
  },
  {
    "title": "*(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/numeric/*(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply.\n\nDiscussion\n\nThe multiplication operator (*) calculates the product of its two arguments. For example:\n\n2 * 3                   // 6\n100 * 21                // 2100\n-10 * 15                // -150\n3.5 * 2.25              // 7.875\n\n\nYou cannot use * with arguments of different types. To multiply values of different types, convert one of the values to the other value’s type.\n\nlet x: Int8 = 21\nlet y: Int = 1000000\nInt(x) * y              // 21000000\n"
  },
  {
    "title": "+(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/additivearithmetic/+(_:)",
    "html": "Return Value\n\nThe given argument without any changes.\n\nDiscussion\n\nYou can use the unary plus operator (+) to provide symmetry in your code for positive numbers when also using the unary minus operator.\n\nlet x = -21\nlet y = +21\n// x == -21\n// y == 21\n"
  },
  {
    "title": "-(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/additivearithmetic/-(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDiscussion\n\nThe subtraction operator (-) calculates the difference of its two arguments. For example:\n\n8 - 3                   // 5\n-10 - 5                 // -15\n100 - -5                // 105\n10.5 - 100.0            // -89.5\n\n\nYou cannot use - with arguments of different types. To subtract values of different types, convert one of the values to the other value’s type.\n\nlet x: UInt8 = 21\nlet y: UInt = 1000000\ny - UInt(x)             // 999979\n"
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/additivearithmetic/+=(_:_:)-2ddr5",
    "html": "Required Default implementation provided.\n\nParameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDefault Implementations\nAdditiveArithmetic Implementations\nstatic func += (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable."
  },
  {
    "title": "url(scheme:user:password:host:port:path:query:fragment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/url(scheme:user:password:host:port:path:query:fragment:)",
    "html": "Parameters\nscheme\n\nA URL.ParseStrategy.ComponentParseStrategy for matching the URL scheme component.\n\nuser\n\nA URL.ParseStrategy.ComponentParseStrategy for matching the user component.\n\npassword\n\nA URL.ParseStrategy.ComponentParseStrategy for matching the password component.\n\nhost\n\nA URL.ParseStrategy.ComponentParseStrategy for matching the host component.\n\nport\n\nA URL.ParseStrategy.ComponentParseStrategy for matching the port component.\n\npath\n\nA URL.ParseStrategy.ComponentParseStrategy for matching the path component.\n\nquery\n\nA URL.ParseStrategy.ComponentParseStrategy for matching the query component.\n\nfragment\n\nA URL.ParseStrategy.ComponentParseStrategy for matching the fragment component.\n\nReturn Value\n\nA RegexComponent that matches a URL.\n\nDiscussion\n\nAll the parameters to this method take a URL.ParseStrategy.ComponentParseStrategy value to configure the matching behavior for one component of the URL. The three possible values are:\n\nURL.ParseStrategy.ComponentParseStrategy.required — The URL component needs to be present for matching to succeed.\n\nURL.ParseStrategy.ComponentParseStrategy.optional — The URL component doesn’t need to be present for matching to succeed.\n\nURL.ParseStrategy.ComponentParseStrategy.defaultValue(_:) — If the URL component is absent, the captured URL contains the provided default value for the component.\n\nThe following example creates a Regex that matches a URL, when it contains a scheme and a host. It then matches against a source string that contains a date formatted in the en_US locale, some whitespace, and a valid URL. The regex defines a default value for the port with URL.ParseStrategy.ComponentParseStrategy.defaultValue(_:), and because the source URL doesn’t include a port, the captured URL adds it.\n\nlet source = \"7/31/2022, 5:15:12 AM  https://www.example.com/productList?query=slushie\"\nlet matcher = Regex {\n    One(.dateTime(date: .numeric,\n                  time: .standard,\n                  locale: Locale(identifier: \"en_US\"),\n                  timeZone: TimeZone(identifier: \"PST\")!))\n    OneOrMore(.horizontalWhitespace)\n    Capture {\n        One(.url(scheme: .required,\n                 user: .optional,\n                 password: .optional,\n                 host: .required,\n                 port: .defaultValue(8088),\n                 path: .optional,\n                 query: .optional,\n                 fragment: .optional))\n    }\n}\nguard let match = source.firstMatch(of: matcher) else { return }\nlet url = match.1 // url = https://www.example.com:8088/productList?query=slushie\n"
  },
  {
    "title": "RegexComponent.DateStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/datestyle",
    "html": "See Also\nSupporting types\nassociatedtype RegexOutput\nThe output type for this regular expression.\n\nRequired\n\ntypealias TimeStyle\nA type alias to use when matching time components in a regular expression.\nAvailable when Self is Date.ParseStrategy."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexsemanticlevel/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "unicodeScalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexsemanticlevel/unicodescalar",
    "html": "Discussion\n\nAt this semantic level, the string’s UnicodeScalarView is used for matching, and each matched element is a UnicodeScalar value."
  },
  {
    "title": "localizedIntegerCurrency(code:locale:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/localizedintegercurrency(code:locale:)",
    "html": "Parameters\ncode\n\nThe currency code that indicates the currency symbol or name to match against.\n\nlocale\n\nThe locale that specifies formatting conventions to use when matching currency strings.\n\nReturn Value\n\nA RegexComponent that matches localized currency substrings as Int instances.\n\nDiscussion\n\nThis method matches currency substrings in accordance with the provided currency code and locale. For example, the currency code USD matches U.S. dollars, which use the symbol $, and JPY matches Japanese yen, which use the symbol ¥. The locale determines formatting conventions for number separators in the currency value. The regex uses both of these to match currency substrings.\n\nThe method truncates fractional parts in currency strings. To match currency strings with fractional parts, use localizedCurrency(code:locale:) instead.\n\nThe following example creates a Regex that matches a date and time followed by whitespace and a currency value that uses U.S. dollars and the en_US locale. It then matches this regex against a source string containing a date with this format, some whitespace, and a currency value in dollars.\n\nlet enUSLocale = Locale(languageCode: .english, languageRegion: .unitedStates)\nlet source = \"7/31/2022, 5:15:12 AM    $39,739\"\nlet matcher = Regex {\n    One(.dateTime(date: .numeric,\n                  time: .standard,\n                  locale: enUSLocale,\n                  timeZone: TimeZone(identifier: \"PST\")!))\n    OneOrMore(.horizontalWhitespace)\n    Capture {\n        One(.localizedIntegerCurrency(code: Locale.Currency(\"USD\"),\n                                      locale: enUSLocale))\n    }\n}\n\n\nguard let match = source.firstMatch(of: matcher) else { return }\nlet currency = match?.1 // currency == 39739\n\nSee Also\nMatching numeric formats\nstatic func localizedInteger(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.\nstatic func localizedDouble(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.\nstatic func localizedDecimal(locale: Locale) -> Self\nCreates a regex component that matches a localized decimal string, capturing it as a Foundation decimal.\nAvailable when Self is Decimal.FormatStyle.\nstatic func localizedCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as a decimal value.\nAvailable when Self is Decimal.FormatStyle.Currency.\nstatic func localizedIntegerPercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is IntegerFormatStyle<Int>.Percent.\nstatic func localizedDoublePercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.Percent."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicodedecodingresult/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "localizedDoublePercentage(locale:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/localizeddoublepercentage(locale:)",
    "html": "Parameters\nlocale\n\nThe locale that specifies formatting conventions to use when matching percentage strings.\n\nReturn Value\n\nA RegexComponent that matches localized percentage substrings as Double instances.\n\nDiscussion\n\nThis method matches percentage substrings in accordance with the provided locale. For example, in the en_US locale, 0.75 formats as 75%, and 12345.67 formats as 1,234,567%. Other locales use different separators, or omit them entirely. Because of this, the regex needs to know what locale convention to match against.\n\nThe following example creates a Regex that matches a date and time followed by whitespace and a percentage string formatted in the en_US locale. It then matches this regex against a source string containing a date with this format, some whitespace, and a percentage string.\n\nlet enUSLocale = Locale(languageCode: .english, languageRegion: .unitedStates)\nlet source = \"7/31/2022, 5:15:12 AM  75.3%\"\nlet matcher = Regex {\n    One(.dateTime(date: .numeric,\n                  time: .standard,\n                  locale: enUSLocale,\n                  timeZone: TimeZone(identifier: \"PST\")!))\n    OneOrMore(.horizontalWhitespace)\n    Capture {\n        One(.localizedDoublePercentage(locale: enUSLocale))\n    }\n}\nguard let match = source.firstMatch(of: matcher) else { return }\nlet percentage = match.1 // percentage == 0.753\n\nSee Also\nMatching numeric formats\nstatic func localizedInteger(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.\nstatic func localizedDouble(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.\nstatic func localizedDecimal(locale: Locale) -> Self\nCreates a regex component that matches a localized decimal string, capturing it as a Foundation decimal.\nAvailable when Self is Decimal.FormatStyle.\nstatic func localizedCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as a decimal value.\nAvailable when Self is Decimal.FormatStyle.Currency.\nstatic func localizedIntegerCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.Currency.\nstatic func localizedIntegerPercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is IntegerFormatStyle<Int>.Percent."
  },
  {
    "title": "iso8601(timeZone:includingFractionalSeconds:dateSeparator:dateTimeSeparator:timeSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/iso8601(timezone:includingfractionalseconds:dateseparator:datetimeseparator:timeseparator:)",
    "html": "Parameters\ntimeZone\n\nThe time zone to use when returning a captured Date. The returned date’s time value is 00:00:00 in this time zone.\n\nincludingFractionalSeconds\n\nA Boolean value that specifies whether the source string contains fractional seconds. The default is false.\n\ndateSeparator\n\nThe character that separates year, month, and day sections of the date substring. The default is Date.ISO8601FormatStyle.DateSeparator.dash.\n\ndateTimeSeparator\n\nThe character that separates the date and time sections of the substring. The default is Date.ISO8601FormatStyle.DateTimeSeparator.standard.\n\ntimeSeparator\n\nThe character that separates the date and time sections of the substring. The default is Date.ISO8601FormatStyle.TimeSeparator.colon.\n\nReturn Value\n\nA RegexComponent that matches ISO 8601-formatted date substrings as Foundation Date instances.\n\nDiscussion\n\nThis method matches an ISO 8601 date string using the provided separator characters. It doesn’t look for a time zone in the source string, and the match doesn’t include time zone characters if they’re present. Instead, the matcher interprets the string as being in the provided timeZone.\n\nThe following example creates a Regex that matches an ISO 8601-formatted date. The format looks for a dash for the date separator, the standard date/time separator (none), and a colon for the time separator. It also interprets the source string as being in the current time zone. The example then matches this regex against a source string containing a date with this format, some whitespace, a substring, more whitespace, and a currency value.\n\nlet iso860Source = \"2022-07-14T21:10:15   Lemon-lime slushie      $1.99\"\nlet matcher = Regex {\n    Capture {\n        One(.iso8601(timeZone: .current,\n                     includingFractionalSeconds: false,\n                     dateSeparator: .dash,\n                     dateTimeSeparator: .standard,\n                     timeSeparator: .colon))\n    }\n    OneOrMore(.horizontalWhitespace)\n    OneOrMore(.any)\n    OneOrMore(.horizontalWhitespace)\n    One(.localizedCurrency(code:Locale.Currency(\"USD\"),\n                               locale:Locale(identifier: \"en_US\")))\n}\nlet match = iso860Source.firstMatch(of: matcher)\nlet date = match?.1 // date == Jul 14, 2022 at 9:10 PM (may vary depending on current locale)\n\nSee Also\nMatching dates and times\nstatic func date(Date.FormatStyle.DateStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date string formatted in accordance with a style, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func date(format: Date.FormatString, locale: Locale, timeZone: TimeZone, calendar: Calendar?, twoDigitStartDate: Date) -> Self\nCreates a regex component that matches a localized date string formatted in accordance with a format string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func dateTime(date: Date.FormatStyle.DateStyle, time: Date.FormatStyle.TimeStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date and time string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic var iso8601: Date.ISO8601FormatStyle\nA regex component that matches a default ISO 8601-formatted date string, capturing it as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601Date(timeZone: TimeZone, dateSeparator: Date.ISO8601FormatStyle.DateSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing it as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601WithTimeZone(includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator, timeZoneSeparator: Date.ISO8601FormatStyle.TimeZoneSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string that includes a time zone component, capturing the matched substring as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle."
  },
  {
    "title": "date(format:locale:timeZone:calendar:twoDigitStartDate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/date(format:locale:timezone:calendar:twodigitstartdate:)",
    "html": "Parameters\nformat\n\nA Date.FormatString to use when matching date substrings.\n\nlocale\n\nThe locale to use when matching date substrings. Matching uses this locale to evaluate the order of date components. It also uses the locale’s language for date format styles that use words.\n\ntimeZone\n\nThe time zone to use when returning a captured Date. The returned date’s time value is 00:00:00 in this time zone.\n\ncalendar\n\nThe calendar to use when matching date substrings. If nil, matching uses the default calendar of the specified locale.\n\ntwoDigitStartDate\n\nThe earliest date a matched two-year date can represent. For example, with the default value of Date(timeIntervalSince1970: 0), the matcher treats 22 as 2022, and 84 as 1984. The matcher ignores this parameter for date substrings that contain year components with more than two digits.\n\nReturn Value\n\nA RegexComponent that matches date substrings as Foundation Date instances.\n\nDiscussion\n\nThis method matches date substrings in accordance with a format from a Date.FormatString.\n\nIf a time value follows the date substring, the matcher ignores it, treating it as any other character sequence. To match date and time substrings, use dateTime(date:time:locale:timeZone:calendar:).\n\nIf the date substring uses a two-digit year, the matcher uses the twoDigitStartDate parameter, which defines the earliest date a string with a two-digit year can denote. The matcher ignores this parameter if the year contains more than two digits.\n\nThe following example creates a Regex that matches a date formatted with two-digit month, day, and year fields, and slash (/) separator characters. It sets midnight on January 1, 1970, as the twoDigitStartDate, and PST as the time zone. It then matches this regex against a source string containing a date with this format and a two-digit year, some whitespace, a substring, more whitespace, and a currency value. Because the source year 76 is after thetwoDigitStartDate, the date substring matches as 1976.\n\nlet enUSLocale = Locale(languageCode: .english, languageRegion: .unitedStates)\nlet source = \"4/1/76  Lemon-lime slushie      $0.40\"\nlet matcher = Regex {\n    Capture {\n        One(.date(format: \"\\(month: .twoDigits)/\\(day: .twoDigits)/\\(year: .twoDigits)\",\n                  locale: enUSLocale,\n                  timeZone: TimeZone(identifier: \"PST\")!,\n                  twoDigitStartDate: try! Date(\"1970-01-01T00:00:00-0800\", strategy: .iso8601)))\n    }\n    OneOrMore(.horizontalWhitespace)\n    OneOrMore(.any)\n    OneOrMore(.horizontalWhitespace)\n    One(.localizedCurrency(code: Locale.Currency(\"USD\"),\n                           locale: enUSLocale))\n}\n\n\nlet match = source.firstMatch(of: matcher)\nlet date = match?.1 // date == Mar 1, 1976 at 12:00 AM (may vary based on current locale)\n\nSee Also\nMatching dates and times\nstatic func date(Date.FormatStyle.DateStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date string formatted in accordance with a style, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func dateTime(date: Date.FormatStyle.DateStyle, time: Date.FormatStyle.TimeStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date and time string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic var iso8601: Date.ISO8601FormatStyle\nA regex component that matches a default ISO 8601-formatted date string, capturing it as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601Date(timeZone: TimeZone, dateSeparator: Date.ISO8601FormatStyle.DateSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing it as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601(timeZone: TimeZone, includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing the matched substring as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601WithTimeZone(includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator, timeZoneSeparator: Date.ISO8601FormatStyle.TimeZoneSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string that includes a time zone component, capturing the matched substring as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle."
  },
  {
    "title": "RegexOutput | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/regexoutput",
    "html": "Required\n\nDiscussion\n\nA Regex instance’s output type depends on whether the Regex has captures and how it is created.\n\nA Regex created from a string using the init(_:) initializer has an output type of AnyRegexOutput, whether it has captures or not.\n\nA Regex without captures created from a regex literal, the init(_:as:) initializer, or a RegexBuilder closure has a Substring output type, where the substring is the portion of the string that was matched.\n\nA Regex with captures created from a regex literal or the init(_:as:) initializer has a tuple of substrings as its output type. The first component of the tuple is the full portion of the string that was matched, with the remaining components holding the captures.\n\nSee Also\nSupporting types\ntypealias DateStyle\nA type alias to use when matching date components in a regular expression.\nAvailable when Self is Date.ParseStrategy.\ntypealias TimeStyle\nA type alias to use when matching time components in a regular expression.\nAvailable when Self is Date.ParseStrategy."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexsemanticlevel/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "verticalWhitespace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/verticalwhitespace",
    "html": "Discussion\n\nThis character class is equivalent to \\v in regex syntax.\n\nSee Also\nMatching whitespace and line endings\nstatic var horizontalWhitespace: CharacterClass\nA character class that matches any element that is classified as horizontal whitespace.\nAvailable when Self is CharacterClass.\nstatic var newlineSequence: CharacterClass\nA character class that matches any newline sequence.\nAvailable when Self is CharacterClass.\nstatic var whitespace: CharacterClass\nA character class that matches any element that is classified as whitespace.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "word | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/word",
    "html": "Discussion\n\nThis character class is equivalent to \\w in regex syntax.\n\nSee Also\nMatching substring sequences\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any Unicode scalar in the given sequence.\nAvailable when Self is CharacterClass.\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any character in the given string or sequence.\nAvailable when Self is CharacterClass.\nstatic var any: CharacterClass\nA character class that matches any element.\nAvailable when Self is CharacterClass.\nstatic var anyGraphemeCluster: CharacterClass\nA character class that matches any single Character, or extended grapheme cluster, regardless of the current semantic level.\nAvailable when Self is CharacterClass.\nstatic var anyNonNewline: CharacterClass\nA character class that matches any element that isn’t a newline.\nAvailable when Self is CharacterClass.\nstatic var digit: CharacterClass\nA character class that matches any digit.\nAvailable when Self is CharacterClass.\nstatic var hexDigit: CharacterClass\nA character class that matches any hexadecimal digit.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/jobpriority/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func < (JobPriority, JobPriority) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func > (JobPriority, JobPriority) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func >= (JobPriority, JobPriority) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (JobPriority, JobPriority) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "withUnsafeMutablePointerToHeader(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbufferpointer/withunsafemutablepointertoheader(_:)",
    "html": "Discussion\n\nNote\n\nThis pointer is valid only for the duration of the call to body.\n\nSee Also\nAccessing Buffer Contents\nfunc withUnsafeMutablePointerToElements<R>((UnsafeMutablePointer<Element>) throws -> R) rethrows -> R\nCall body with an UnsafeMutablePointer to the Element storage.\nfunc withUnsafeMutablePointers<R>((UnsafeMutablePointer<Header>, UnsafeMutablePointer<Element>) throws -> R) rethrows -> R\nCall body with UnsafeMutablePointers to the stored Header and raw Element storage."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/jobpriority/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (JobPriority, JobPriority) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbufferpointer/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (ManagedBufferPointer<Header, Element>, ManagedBufferPointer<Header, Element>) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "Unicode.GeneralCategory.otherPunctuation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/otherpunctuation",
    "html": "Discussion\n\nThis value corresponds to the category Other_Punctuation (abbreviated Po) in the Unicode Standard."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-9gfvr",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "Unicode.GeneralCategory.nonspacingMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/nonspacingmark",
    "html": "Discussion\n\nThis value corresponds to the category Nonspacing_Mark (abbreviated Mn) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.decimalNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/decimalnumber",
    "html": "Discussion\n\nThis value corresponds to the category Decimal_Number (abbreviated Nd) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.lowercaseLetter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/lowercaseletter",
    "html": "Discussion\n\nThis value corresponds to the category Lowercase_Letter (abbreviated Ll) in the Unicode Standard."
  },
  {
    "title": "hexDigit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/hexdigit",
    "html": "Discussion\n\nhexDigit matches the ASCII characters 0 through 9, and upper- or lowercase a through f. The corresponding characters in the “Halfwidth and Fullwidth Forms” Unicode block are not matched by this character class.\n\nSee Also\nMatching substring sequences\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any Unicode scalar in the given sequence.\nAvailable when Self is CharacterClass.\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any character in the given string or sequence.\nAvailable when Self is CharacterClass.\nstatic var any: CharacterClass\nA character class that matches any element.\nAvailable when Self is CharacterClass.\nstatic var anyGraphemeCluster: CharacterClass\nA character class that matches any single Character, or extended grapheme cluster, regardless of the current semantic level.\nAvailable when Self is CharacterClass.\nstatic var anyNonNewline: CharacterClass\nA character class that matches any element that isn’t a newline.\nAvailable when Self is CharacterClass.\nstatic var digit: CharacterClass\nA character class that matches any digit.\nAvailable when Self is CharacterClass.\nstatic var word: CharacterClass\nA character class that matches any element that is a “word character”.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "Unicode.GeneralCategory.modifierLetter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/modifierletter",
    "html": "Discussion\n\nThis value corresponds to the category Modifier_Letter (abbreviated Lm) in the Unicode Standard."
  },
  {
    "title": "anyNonNewline | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/anynonnewline",
    "html": "Discussion\n\nThis character class is unaffected by the dotMatchesNewlines() method. To match any character, including newlines, see any.\n\nThis character class is equivalent to the regex syntax “dot” metacharacter with single-line mode disabled: (?-s:.).\n\nSee Also\nMatching substring sequences\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any Unicode scalar in the given sequence.\nAvailable when Self is CharacterClass.\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any character in the given string or sequence.\nAvailable when Self is CharacterClass.\nstatic var any: CharacterClass\nA character class that matches any element.\nAvailable when Self is CharacterClass.\nstatic var anyGraphemeCluster: CharacterClass\nA character class that matches any single Character, or extended grapheme cluster, regardless of the current semantic level.\nAvailable when Self is CharacterClass.\nstatic var digit: CharacterClass\nA character class that matches any digit.\nAvailable when Self is CharacterClass.\nstatic var hexDigit: CharacterClass\nA character class that matches any hexadecimal digit.\nAvailable when Self is CharacterClass.\nstatic var word: CharacterClass\nA character class that matches any element that is a “word character”.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "anyGraphemeCluster | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/anygraphemecluster",
    "html": "Discussion\n\nThis character class is equivalent to \\X in regex syntax.\n\nSee Also\nMatching substring sequences\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any Unicode scalar in the given sequence.\nAvailable when Self is CharacterClass.\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any character in the given string or sequence.\nAvailable when Self is CharacterClass.\nstatic var any: CharacterClass\nA character class that matches any element.\nAvailable when Self is CharacterClass.\nstatic var anyNonNewline: CharacterClass\nA character class that matches any element that isn’t a newline.\nAvailable when Self is CharacterClass.\nstatic var digit: CharacterClass\nA character class that matches any digit.\nAvailable when Self is CharacterClass.\nstatic var hexDigit: CharacterClass\nA character class that matches any hexadecimal digit.\nAvailable when Self is CharacterClass.\nstatic var word: CharacterClass\nA character class that matches any element that is a “word character”.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "prefixMatch(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/prefixmatch(in:)-5oh8i",
    "html": "Parameters\nstring\n\nThe string to match this regular expression against.\n\nReturn Value\n\nThe match, if this regex matches at the start of string; otherwise, nil.\n\nDiscussion\n\nCall this method if you want the regular expression to succeed only when it matches only at the start of the given string. This example uses prefixMatch(in:) and a regex that matches a title-case word to search for such a word at the start of different strings:\n\nlet titleCaseWord = /[A-Z][A-Za-z]+/\n\n\nif let wordMatch = try titleCaseWord.prefixMatch(in: \"Searching in a Regex\") {\n    print(wordMatch.0)\n} else {\n    print(\"No match.\")\n}\n// Prints \"Searching\"\n\n\nif let wordMatch = try titleCaseWord.prefixMatch(in: \"title case word at the End\") {\n    print(wordMatch.0)\n} else {\n    print(\"No match.\")\n}\n// Prints \"No match.\"\n\n\nThe prefixMatch(in:) method can throw an error if this regex includes a transformation closure that throws an error."
  },
  {
    "title": "wholeMatch(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/wholematch(in:)-9do8t",
    "html": "Parameters\nstring\n\nThe string to match this regular expression against.\n\nReturn Value\n\nThe match, if this regex matches the entirety of string; otherwise, nil.\n\nDiscussion\n\nCall this method if you want the regular expression to succeed only when it matches the entire string you pass as string. The following example shows matching a regular expression that only matches digits, with different candidate strings.\n\nlet digits = /[0-9]+/\n\n\nif let digitsMatch = try digits.wholeMatch(in: \"2022\") {\n    print(digitsMatch.0)\n} else {\n    print(\"No match.\")\n}\n// Prints \"2022\"\n\n\nif let digitsMatch = try digits.wholeMatch(in: \"The year is 2022.\") {\n    print(digitsMatch.0)\n} else {\n    print(\"No match.\")\n}\n// Prints \"No match.\"\n\n\nThe wholeMatch(in:) method can throw an error if this regex includes a transformation closure that throws an error."
  },
  {
    "title": "Regex.RegexOutput | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/regexoutput",
    "html": "Discussion\n\nA Regex instance’s output type depends on whether the Regex has captures and how it is created.\n\nA Regex created from a string using the init(_:) initializer has an output type of AnyRegexOutput, whether it has captures or not.\n\nA Regex without captures created from a regex literal, the init(_:as:) initializer, or a RegexBuilder closure has a Substring output type, where the substring is the portion of the string that was matched.\n\nA Regex with captures created from a regex literal or the init(_:as:) initializer has a tuple of substrings as its output type. The first component of the tuple is the full portion of the string that was matched, with the remaining components holding the captures."
  },
  {
    "title": "any | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/any",
    "html": "Discussion\n\nThis character class is unaffected by the dotMatchesNewlines() method. To match any character that isn’t a newline, see anyNonNewline.\n\nThis character class is equivalent to the regex syntax “dot” metacharacter in single-line mode: (?s:.).\n\nSee Also\nMatching substring sequences\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any Unicode scalar in the given sequence.\nAvailable when Self is CharacterClass.\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any character in the given string or sequence.\nAvailable when Self is CharacterClass.\nstatic var anyGraphemeCluster: CharacterClass\nA character class that matches any single Character, or extended grapheme cluster, regardless of the current semantic level.\nAvailable when Self is CharacterClass.\nstatic var anyNonNewline: CharacterClass\nA character class that matches any element that isn’t a newline.\nAvailable when Self is CharacterClass.\nstatic var digit: CharacterClass\nA character class that matches any digit.\nAvailable when Self is CharacterClass.\nstatic var hexDigit: CharacterClass\nA character class that matches any hexadecimal digit.\nAvailable when Self is CharacterClass.\nstatic var word: CharacterClass\nA character class that matches any element that is a “word character”.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "anyOf(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/anyof(_:)-4xgea",
    "html": "Discussion\n\nCalling this method with a group of characters is equivalent to listing those characters in a custom character class in regex syntax. For example, the two regexes in this example are equivalent:\n\nlet regex1 = /[abcd]+/\nlet regex2 = OneOrMore(.anyOf(\"abcd\"))\n\nSee Also\nMatching substring sequences\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any Unicode scalar in the given sequence.\nAvailable when Self is CharacterClass.\nstatic var any: CharacterClass\nA character class that matches any element.\nAvailable when Self is CharacterClass.\nstatic var anyGraphemeCluster: CharacterClass\nA character class that matches any single Character, or extended grapheme cluster, regardless of the current semantic level.\nAvailable when Self is CharacterClass.\nstatic var anyNonNewline: CharacterClass\nA character class that matches any element that isn’t a newline.\nAvailable when Self is CharacterClass.\nstatic var digit: CharacterClass\nA character class that matches any digit.\nAvailable when Self is CharacterClass.\nstatic var hexDigit: CharacterClass\nA character class that matches any hexadecimal digit.\nAvailable when Self is CharacterClass.\nstatic var word: CharacterClass\nA character class that matches any element that is a “word character”.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "anyOf(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/anyof(_:)-3pexl",
    "html": "Discussion\n\nCalling this method with a group of Unicode scalars is equivalent to listing them in a custom character class in regex syntax.\n\nSee Also\nMatching substring sequences\nstatic func anyOf<S>(S) -> CharacterClass\nReturns a character class that matches any character in the given string or sequence.\nAvailable when Self is CharacterClass.\nstatic var any: CharacterClass\nA character class that matches any element.\nAvailable when Self is CharacterClass.\nstatic var anyGraphemeCluster: CharacterClass\nA character class that matches any single Character, or extended grapheme cluster, regardless of the current semantic level.\nAvailable when Self is CharacterClass.\nstatic var anyNonNewline: CharacterClass\nA character class that matches any element that isn’t a newline.\nAvailable when Self is CharacterClass.\nstatic var digit: CharacterClass\nA character class that matches any digit.\nAvailable when Self is CharacterClass.\nstatic var hexDigit: CharacterClass\nA character class that matches any hexadecimal digit.\nAvailable when Self is CharacterClass.\nstatic var word: CharacterClass\nA character class that matches any element that is a “word character”.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "prefixMatch(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/prefixmatch(in:)-1an24",
    "html": "Parameters\nstring\n\nThe substring to match this regular expression against.\n\nReturn Value\n\nThe match, if this regex matches at the start of string; otherwise, nil.\n\nDiscussion\n\nCall this method if you want the regular expression to succeed only when it matches only at the start of the given string. This example uses prefixMatch(in:) and a regex that matches a title-case word to search for such a word at the start of different strings:\n\nlet titleCaseWord = /[A-Z][A-Za-z]+/\n\n\nif let wordMatch = try titleCaseWord.prefixMatch(in: \"Searching in a Regex\") {\n    print(wordMatch.0)\n} else {\n    print(\"No match.\")\n}\n// Prints \"Searching\"\n\n\nif let wordMatch = try titleCaseWord.prefixMatch(in: \"title case word at the End\") {\n    print(wordMatch.0)\n} else {\n    print(\"No match.\")\n}\n// Prints \"No match.\"\n\n\nThe prefixMatch(in:) method can throw an error if this regex includes a transformation closure that throws an error."
  },
  {
    "title": "matchingSemantics(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/matchingsemantics(_:)",
    "html": "Parameters\nsemanticLevel\n\nThe semantics to use during matching.\n\nReturn Value\n\nThe modified regular expression.\n\nDiscussion\n\nWhen matching with grapheme cluster semantics (the default), metacharacters like . and \\w, custom character classes, and character class instances like .any match a grapheme cluster when possible, corresponding with the default string representation. In addition, matching with grapheme cluster semantics compares characters using their canonical representation, corresponding with how strings comparison works.\n\nWhen matching with Unicode scalar semantics, metacharacters and character classes always match a single Unicode scalar value, even if that scalar comprises part of a grapheme cluster.\n\nThese semantic levels can lead to different results, especially when working with strings that have decomposed characters. In the following example, queRegex matches any 3-character string that begins with \"q\".\n\nlet composed = \"qué\"\nlet decomposed = \"que\\u{301}\"\n\n\nlet queRegex = /^q..$/\n\n\nprint(composed.contains(queRegex))\n// Prints \"true\"\nprint(decomposed.contains(queRegex))\n// Prints \"true\"\n\n\nWhen using Unicode scalar semantics, however, the regular expression only matches the composed version of the string, because each . matches a single Unicode scalar value.\n\nlet queRegexScalar = queRegex.matchingSemantics(.unicodeScalar)\nprint(composed.contains(queRegexScalar))\n// Prints \"true\"\nprint(decomposed.contains(queRegexScalar))\n// Prints \"false\"\n"
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-gn40",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "ignoresCase(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/ignorescase(_:)",
    "html": "Parameters\nignoresCase\n\nA Boolean value indicating whether to ignore case.\n\nReturn Value\n\nThe modified regular expression."
  },
  {
    "title": "firstMatch(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/firstmatch(in:)-6s8x0",
    "html": "Parameters\nstring\n\nThe string to match this regular expression against.\n\nReturn Value\n\nThe match, if one is found; otherwise, nil.\n\nDiscussion\n\nUse the firstMatch(in:) method to search for the first occurrence of this regular expression in string. This example searches for the first sequence of digits that occurs in a string:\n\nlet digits = /[0-9]+/\n\n\nif let digitsMatch = try digits.firstMatch(in: \"The year is 2022; last year was 2021.\") {\n    print(digitsMatch.0)\n} else {\n    print(\"No match.\")\n}\n// Prints \"2022\"\n\n\nThe firstMatch(in:) method can throw an error if this regex includes a transformation closure that throws an error."
  },
  {
    "title": "dotMatchesNewlines(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/dotmatchesnewlines(_:)",
    "html": "Parameters\ndotMatchesNewlines\n\nA Boolean value indicating whether . should match a newline character.\n\nReturn Value\n\nThe modified regular expression."
  },
  {
    "title": "contains(captureNamed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/contains(capturenamed:)",
    "html": "Parameters\nname\n\nThe name to look for among the regular expression’s capture groups. Capture group names are case sensitive.\n\nDiscussion\n\nThis example shows a regular expression that includes capture groups named key and value:\n\nlet regex = try Regex(\"(?'key'.+?): (?'value'.+)\")\nregex.contains(captureNamed: \"key\")       // true\nregex.contains(captureNamed: \"VALUE\")     // false\nregex.contains(captureNamed: \"1\")         // false\n"
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-6uoka",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?"
  },
  {
    "title": "asciiOnlyWordCharacters(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/asciionlywordcharacters(_:)",
    "html": "Parameters\nuseASCII\n\nA Boolean value indicating whether to match only ASCII characters as word characters.\n\nReturn Value\n\nThe modified regular expression."
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-6aqhk",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(String.Type) throws -> String?"
  },
  {
    "title": "asciiOnlyWhitespace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/asciionlywhitespace(_:)",
    "html": "Parameters\nasciiOnlyWhitespace\n\nA Boolean value indicating whether to match only ASCII characters as space characters.\n\nReturn Value\n\nThe modified regular expression."
  },
  {
    "title": "asciiOnlyDigits(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/asciionlydigits(_:)",
    "html": "Parameters\nuseasciiOnlyDigits\n\nA Boolean value indicating whether to match only ASCII characters as digits.\n\nReturn Value\n\nThe modified regular expression."
  },
  {
    "title": "anchorsMatchLineEndings(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/anchorsmatchlineendings(_:)",
    "html": "Parameters\nmatchLineEndings\n\nA Boolean value indicating whether ^ and $ should match the start and end of lines, respectively.\n\nReturn Value\n\nThe modified regular expression.\n\nDiscussion\n\nThis method corresponds to applying the m option in regex syntax. For this behavior in the RegexBuilder syntax, see Anchor.startOfLine, Anchor.endOfLine, Anchor.startOfSubject, and Anchor.endOfSubject."
  },
  {
    "title": "consuming(_:startingAt:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/customconsumingregexcomponent/consuming(_:startingat:in:)",
    "html": "Required\n\nParameters\ninput\n\nThe string in which the match is performed.\n\nindex\n\nAn index of input at which to begin matching.\n\nbounds\n\nThe bounds in input in which the match is performed.\n\nReturn Value\n\nThe upper bound where the match terminates and a matched instance, or nil if there isn’t a match."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/init(_:)-92siq",
    "html": "Parameters\nregex\n\nA regular expression to convert to use a dynamic capture list.\n\nDiscussion\n\nYou can use this initializer to convert a Regex with strongly-typed captures into a Regex with AnyRegexOutput as its output type."
  },
  {
    "title": "Regex.Match | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/match",
    "html": "Overview\n\nA Match forwards API to the Output generic parameter, providing direct access to captures.\n\nTopics\nInitializers\ninit<OtherOutput>(Regex<OtherOutput>.Match)\nCreates a regular expression match with a dynamic capture list from the given match.\nAvailable when Output is AnyRegexOutput.\nInstance Properties\nvar output: Output\nThe output produced from the match operation.\nlet range: Range<String.Index>\nThe range of the overall match.\nSubscripts\nsubscript(String) -> AnyRegexOutput.Element?\nAccesses the capture with the specified name, if a capture with that name exists.\nAvailable when Output is AnyRegexOutput.\nsubscript<Capture>(Reference<Capture>) -> Capture\nAccesses this match’s capture by the given reference.\nsubscript<T>(dynamicMember _: KeyPath<Output, T>) -> T\nAccesses a capture by its name or number."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/init(_:)-52kg",
    "html": "Parameters\npattern\n\nA string with regular expression syntax.\n\nDiscussion\n\nUse this initializer to create a Regex instance from a regular expression that you have stored in pattern.\n\nlet simpleDigits = try Regex(\"[0-9]+\")\n\n\nThis initializer throws an error if pattern uses invalid regular expression syntax.\n\nThe output type of the new Regex is the dynamic AnyRegexOutput. If you know the capture structure of pattern ahead of time, use the init(_:as:) initializer instead."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicodedecodingresult/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexsemanticlevel/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "graphemeCluster | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexsemanticlevel/graphemecluster",
    "html": "Discussion\n\nAt this semantic level, each matched element is a Character value. This is the default semantic level."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexsemanticlevel/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "iso8601WithTimeZone(includingFractionalSeconds:dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/iso8601withtimezone(includingfractionalseconds:dateseparator:datetimeseparator:timeseparator:timezoneseparator:)",
    "html": "Parameters\nincludingFractionalSeconds\n\nA Boolean value that specifies whether the source string contains fractional seconds. The default is false.\n\ndateSeparator\n\nThe character that separates year, month, and day sections of the date substring. The default is Date.ISO8601FormatStyle.DateSeparator.dash.\n\ndateTimeSeparator\n\nThe character that separates the date and time sections of the substring. The default is Date.ISO8601FormatStyle.DateTimeSeparator.standard.\n\ntimeSeparator\n\nThe character that separates the date and time sections of the substring. The default is Date.ISO8601FormatStyle.TimeSeparator.colon.\n\ntimeZoneSeparator\n\nThe character that separates the hour, minute, and second sections of the substring. The default is Date.ISO8601FormatStyle.TimeSeparator.colon\n\nReturn Value\n\nA RegexComponent that matches ISO 8601-formatted date substrings as Foundation Date instances.\n\nDiscussion\n\nThis method matches an ISO 8601 date string using the provided separator characters.\n\nThe following example creates a Regex that matches an ISO 8601-formatted date. The format looks for a dash for the date separator, the standard date/time separator (none), a colon for the time separator, and no separator for the time zone. It then matches this regex against a source string containing a date with this format (specifying a time zone five hours behind UTC), some whitespace, a substring, more whitespace, and a currency value.\n\nlet iso860Source = \"2022-07-14T21:10:15-05:00   Lemon-lime slushie      $1.99\"\nlet matcher = Regex {\n    Capture {\n        One(.iso8601WithTimeZone(includingFractionalSeconds: false,\n                                 dateSeparator: .dash,\n                                 dateTimeSeparator: .standard,\n                                 timeSeparator: .colon,\n                                 timeZoneSeparator: .omitted))\n    }\n    OneOrMore(.horizontalWhitespace)\n    OneOrMore(.any)\n    OneOrMore(.horizontalWhitespace)\n    One(.localizedCurrency(code:Locale.Currency(\"USD\"),\n                           locale:Locale(identifier: \"en_US\")))\n}\nlet match = iso860Source.firstMatch(of: matcher)\nlet date = match?.1 // date == Jul 14, 2022 at 7:10 PM (may vary depending on current locale)\n\nSee Also\nMatching dates and times\nstatic func date(Date.FormatStyle.DateStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date string formatted in accordance with a style, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func date(format: Date.FormatString, locale: Locale, timeZone: TimeZone, calendar: Calendar?, twoDigitStartDate: Date) -> Self\nCreates a regex component that matches a localized date string formatted in accordance with a format string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic func dateTime(date: Date.FormatStyle.DateStyle, time: Date.FormatStyle.TimeStyle, locale: Locale, timeZone: TimeZone, calendar: Calendar?) -> Date.ParseStrategy\nCreates a regex component that matches a localized date and time string, capturing it as a Foundation date.\nAvailable when Self is Date.ParseStrategy.\nstatic var iso8601: Date.ISO8601FormatStyle\nA regex component that matches a default ISO 8601-formatted date string, capturing it as a Foundation date.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601Date(timeZone: TimeZone, dateSeparator: Date.ISO8601FormatStyle.DateSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing it as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle.\nstatic func iso8601(timeZone: TimeZone, includingFractionalSeconds: Bool, dateSeparator: Date.ISO8601FormatStyle.DateSeparator, dateTimeSeparator: Date.ISO8601FormatStyle.DateTimeSeparator, timeSeparator: Date.ISO8601FormatStyle.TimeSeparator) -> Self\nCreates a regex component that matches an ISO 8601-formatted date string, capturing the matched substring as a Foundation date in the specified time zone.\nAvailable when Self is Date.ISO8601FormatStyle."
  },
  {
    "title": "localizedDecimal(locale:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/localizeddecimal(locale:)",
    "html": "Parameters\nlocale\n\nThe locale that specifies formatting conventions to use when matching decimal strings.\n\nReturn Value\n\nA RegexComponent that matches localized decimal substrings as Foundation Decimal instances.\n\nDiscussion\n\nThis method matches decimal substrings in accordance with the provided locale. For example, the value 1234567890.1234 formats as 1,234,567,890.1234 in the en_US locale, as 1 234 567 890,1234 in the FR locale, and as 1234567890.1234 in the JP locale. Because of this, the regex needs to know what locale convention to match against.\n\nThe following example creates a Regex that matches a date and time followed by whitespace and a decimal formatted in the en_US locale. It then matches this regex against a source string containing a date with this format, some whitespace, and a decimal value.\n\nlet enUSLocale = Locale(languageCode: .english, languageRegion: .unitedStates)\nlet source = \"7/31/2022, 5:15:12 AM  1,234,567,890.1234\"\nlet matcher = Regex {\n    One(.dateTime(date: .numeric,\n                  time: .standard,\n                  locale: enUSLocale,\n                  timeZone: TimeZone(identifier: \"PST\")!))\n    OneOrMore(.horizontalWhitespace)\n    Capture {\n        One(.localizedDecimal(locale: enUSLocale))\n    }\n}\nguard let match = source.firstMatch(of: matcher) else { return }\nlet decimal = match.1 // decimal == 1234567890.1234\n\nSee Also\nMatching numeric formats\nstatic func localizedInteger(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.\nstatic func localizedDouble(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.\nstatic func localizedCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as a decimal value.\nAvailable when Self is Decimal.FormatStyle.Currency.\nstatic func localizedIntegerCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.Currency.\nstatic func localizedIntegerPercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is IntegerFormatStyle<Int>.Percent.\nstatic func localizedDoublePercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.Percent."
  },
  {
    "title": "localizedIntegerPercentage(locale:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/localizedintegerpercentage(locale:)",
    "html": "Parameters\nlocale\n\nThe locale that specifies formatting conventions to use when matching percentage strings.\n\nReturn Value\n\nA RegexComponent that matches percentage substrings as Int instances.\n\nDiscussion\n\nThis method matches percentage substrings in accordance with the provided locale. For example, in the en_US locale, 75 formats as 75%, and 1234 formats as 1,234%. Other locales use different separators, or omit them entirely. Because of this, the regex needs to know what locale convention to match against.\n\nThe following example creates a Regex that matches a date and time followed by whitespace and a percentage string formatted in the en_US locale. It then matches this regex against a source string containing a date with this format, some whitespace, and a percentage string.\n\nlet enUSLocale = Locale(languageCode: .english, languageRegion: .unitedStates)\nlet source = \"7/31/2022, 5:15:12 AM  75%\"\nlet matcher = Regex {\n    One(.dateTime(date: .numeric,\n                  time: .standard,\n                  locale: enUSLocale,\n                  timeZone: TimeZone(identifier: \"PST\")!))\n    OneOrMore(.horizontalWhitespace)\n    Capture {\n        One(.localizedIntegerPercentage(locale: enUSLocale))\n    }\n}\nguard let match = source.firstMatch(of: matcher) else { return }\nlet percentage = match?.1 // percentage == 75\n\nSee Also\nMatching numeric formats\nstatic func localizedInteger(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.\nstatic func localizedDouble(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.\nstatic func localizedDecimal(locale: Locale) -> Self\nCreates a regex component that matches a localized decimal string, capturing it as a Foundation decimal.\nAvailable when Self is Decimal.FormatStyle.\nstatic func localizedCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as a decimal value.\nAvailable when Self is Decimal.FormatStyle.Currency.\nstatic func localizedIntegerCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.Currency.\nstatic func localizedDoublePercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.Percent."
  },
  {
    "title": "localizedDouble(locale:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/localizeddouble(locale:)",
    "html": "Parameters\nlocale\n\nThe locale that specifies formatting conventions to use when matching numeric strings.\n\nReturn Value\n\nA RegexComponent that matches localized decimal substrings as Double instances.\n\nDiscussion\n\nThis method matches numeric substrings in accordance with the provided locale. For example, the value 1234567890.1234 formats as 1,234,567,890.1234 in the en_US locale, as 1 234 567 890,1234 in the FR locale, and as 1234567890.1234 in the JP locale. Because of this, the regex needs to know what locale convention to match against.\n\nThe following example creates a Regex that matches a date and time followed by whitespace and a double formatted in the en_US locale. It then matches this regex against a source string containing a date with this format, some whitespace, and a numeric value.\n\nlet enUSLocale = Locale(languageCode: .english, languageRegion: .unitedStates)\nlet source = \"7/31/2022, 5:15:12 AM  1,234,567,890.1234\"\nlet matcher = Regex {\n    One(.dateTime(date: .numeric,\n                  time: .standard,\n                  locale: enUSLocale,\n                  timeZone: TimeZone(identifier: \"PST\")!))\n    OneOrMore(.horizontalWhitespace)\n    Capture {\n        One(.localizedDouble(locale: enUSLocale))\n    }\n}\nguard let match = source.firstMatch(of: matcher) else { return }\nlet double = match?.1 // double == 1234567890.1234\n\nSee Also\nMatching numeric formats\nstatic func localizedInteger(locale: Locale) -> Self\nCreates a regex component that matches a localized numeric string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.\nstatic func localizedDecimal(locale: Locale) -> Self\nCreates a regex component that matches a localized decimal string, capturing it as a Foundation decimal.\nAvailable when Self is Decimal.FormatStyle.\nstatic func localizedCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as a decimal value.\nAvailable when Self is Decimal.FormatStyle.Currency.\nstatic func localizedIntegerCurrency(code: Locale.Currency, locale: Locale) -> Self\nCreates a regex component that matches a localized currency string, capturing it as an integer value.\nAvailable when Self is IntegerFormatStyle<Int>.Currency.\nstatic func localizedIntegerPercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is IntegerFormatStyle<Int>.Percent.\nstatic func localizedDoublePercentage(locale: Locale) -> Self\nCreates a regex component that matches a localized percentage string, capturing it as a double-precision floating-point value.\nAvailable when Self is FloatingPointFormatStyle<Double>.Percent."
  },
  {
    "title": "RegexComponent.TimeStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/timestyle",
    "html": "See Also\nSupporting types\nassociatedtype RegexOutput\nThe output type for this regular expression.\n\nRequired\n\ntypealias DateStyle\nA type alias to use when matching date components in a regular expression.\nAvailable when Self is Date.ParseStrategy."
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-62i7k",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(Int.Type) throws -> Int?"
  },
  {
    "title": "horizontalWhitespace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/horizontalwhitespace",
    "html": "Discussion\n\nThis character class is equivalent to \\h in regex syntax.\n\nSee Also\nMatching whitespace and line endings\nstatic var newlineSequence: CharacterClass\nA character class that matches any newline sequence.\nAvailable when Self is CharacterClass.\nstatic var verticalWhitespace: CharacterClass\nA character class that matches any element that is classified as vertical whitespace.\nAvailable when Self is CharacterClass.\nstatic var whitespace: CharacterClass\nA character class that matches any element that is classified as whitespace.\nAvailable when Self is CharacterClass."
  },
  {
    "title": "nestedContainer(keyedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/nestedcontainer(keyedby:)",
    "html": "Required\n\nParameters\ntype\n\nThe key type to use for the container.\n\nReturn Value\n\nA keyed decoding container view into self.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered stored value is not a keyed container."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Unicode.GeneralCategory.unassigned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/unassigned",
    "html": "Discussion\n\nThis value corresponds to the category Unassigned (abbreviated Cn) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.uppercaseLetter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/uppercaseletter",
    "html": "Discussion\n\nThis value corresponds to the category Uppercase_Letter (abbreviated Lu) in the Unicode Standard."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/cvalistpointer/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of the pointer, suitable for debugging."
  },
  {
    "title": "Unicode.GeneralCategory.currencySymbol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/currencysymbol",
    "html": "Discussion\n\nThis value corresponds to the category Currency_Symbol (abbreviated Sc) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.finalPunctuation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/finalpunctuation",
    "html": "Discussion\n\nThis value corresponds to the category Final_Punctuation (abbreviated Pf) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.dashPunctuation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/dashpunctuation",
    "html": "Discussion\n\nThis value corresponds to the category Dash_Punctuation (abbreviated Pd) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.enclosingMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/enclosingmark",
    "html": "Discussion\n\nThis value corresponds to the category Enclosing_Mark (abbreviated Me) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.format | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/format",
    "html": "Discussion\n\nThis value corresponds to the category Format (abbreviated Cf) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.mathSymbol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/mathsymbol",
    "html": "Discussion\n\nThis value corresponds to the category Math_Symbol (abbreviated Sm) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.initialPunctuation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/initialpunctuation",
    "html": "Discussion\n\nThis value corresponds to the category Initial_Punctuation (abbreviated Pi) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.openPunctuation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/openpunctuation",
    "html": "Discussion\n\nThis value corresponds to the category Open_Punctuation (abbreviated Ps) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.otherNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/othernumber",
    "html": "Discussion\n\nThis value corresponds to the category Other_Number (abbreviated No) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.otherLetter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/otherletter",
    "html": "Discussion\n\nThis value corresponds to the category Other_Letter (abbreviated Lo) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.letterNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/letternumber",
    "html": "Discussion\n\nThis value corresponds to the category Letter_Number (abbreviated Nl) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.privateUse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/privateuse",
    "html": "Discussion\n\nThis value corresponds to the category Private_Use (abbreviated Co) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.paragraphSeparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/paragraphseparator",
    "html": "Discussion\n\nThis value corresponds to the category Paragraph_Separator (abbreviated Zp) in the Unicode Standard."
  },
  {
    "title": "regex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexcomponent/regex-wvwp",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nRegexComponent Implementations\nvar regex: Regex<Self.RegexOutput>\nThe regular expression represented by this component."
  },
  {
    "title": "wholeMatch(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/wholematch(in:)-8hr88",
    "html": "Parameters\nstring\n\nThe substring to match this regular expression against.\n\nReturn Value\n\nThe match, if this regex matches the entirety of string; otherwise, nil.\n\nDiscussion\n\nCall this method if you want the regular expression to succeed only when it matches the entire string you pass as string. The following example shows matching a regular expression that only matches digits, with different candidate strings.\n\nlet digits = /[0-9]+/\n\n\nif let digitsMatch = try digits.wholeMatch(in: \"2022\") {\n    print(digitsMatch.0)\n} else {\n    print(\"No match.\")\n}\n// Prints \"2022\"\n\n\nif let digitsMatch = try digits.wholeMatch(in: \"The year is 2022.\") {\n    print(digitsMatch.0)\n} else {\n    print(\"No match.\")\n}\n// Prints \"No match.\"\n\n\nThe wholeMatch(in:) method can throw an error if this regex includes a transformation closure that throws an error."
  },
  {
    "title": "asciiOnlyCharacterClasses(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/asciionlycharacterclasses(_:)",
    "html": "Parameters\nuseASCII\n\nA Boolean value indicating whether to match only ASCII characters when matching character classes.\n\nReturn Value\n\nThe modified regular expression."
  },
  {
    "title": "init(_:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/init(_:as:)-5z5nu",
    "html": "Parameters\npattern\n\nA string with regular expression syntax.\n\noutputType\n\nThe desired type for the output captures.\n\nDiscussion\n\nYou can use this initializer to create a Regex instance from a regular expression that you have stored in pattern when you know the capture structure of the regular expression in advance.\n\nIn this example, the regular expression includes two parenthesized capture groups, so the capture type is (Substring, Substring, Substring). The first substring in the tuple represents the entire match, while the second and third substrings represent the first and second capture group, respectively.\n\nlet keyAndValue = try Regex(\"(.+): (.+)\", as: (Substring, Substring, Substring).self)\n\n\nThis initializer throws an error if pattern uses invalid regular expression syntax, or if outputType does not match the capture structure declared by pattern. If you don’t know the capture structure in advance, use the init(_:) initializer instead."
  },
  {
    "title": "init(verbatim:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/init(verbatim:)",
    "html": "Parameters\nverbatimString\n\nA string to convert into a regular expression exactly, escaping any metacharacters.\n\nDiscussion\n\nThis example creates a regular expression that matches the string \"(adj)\", including the parentheses. Although parentheses are regular expression metacharacters, they do not need escaping in the string passed as verbatimString.\n\nlet adjectiveDesignator = Regex<Substring>(verbatim: \"(adj.)\")\n\n\nprint(\"awesome (adj.)\".contains(adjectiveDesignator))\n// Prints \"true\"\nprint(\"apple (n.)\".contains(adjectiveDesignator))\n// Prints \"false\"\n"
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-86f1g",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?"
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-5eszo",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-6d53",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?"
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-30psn",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/count",
    "html": "Required\n\nDiscussion\n\nIf the number of elements is unknown, the value is nil."
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-2n0nb",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(Double.Type) throws -> Double?"
  },
  {
    "title": "init(_:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/init(_:as:)-2ucu7",
    "html": "Parameters\nregex\n\nA regular expression to convert to use a strongly-typed capture list.\n\noutputType\n\nThe capture structure to use.\n\nDiscussion\n\nYou can use this initializer to convert a regular expression with a dynamic capture list to one with a strongly-typed capture list. If the type you provide as outputType doesn’t match the capture structure of regex, the initializer returns nil.\n\nlet dynamicRegex = try Regex(\"(.+?): (.+)\")\nif let stronglyTypedRegex = Regex(dynamicRegex, as: (Substring, Substring, Substring).self) {\n    print(\"Converted properly\")\n}\n// Prints \"Converted properly\"\n"
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-2jd5t",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-7dfq",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?"
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-80st4",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?"
  },
  {
    "title": "UTF16 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/utf16",
    "html": "See Also\nDeprecated\ntypealias UnicodeScalar\ntypealias UTF8\ntypealias UTF32"
  },
  {
    "title": "UTF32 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/utf32",
    "html": "See Also\nDeprecated\ntypealias UnicodeScalar\ntypealias UTF8\ntypealias UTF16"
  },
  {
    "title": "transcode(_:from:to:stoppingOnError:into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/transcode(_:from:to:stoppingonerror:into:)",
    "html": "Parameters\ninput\n\nAn iterator of code units to be translated, encoded as inputEncoding. If stopOnError is false, the entire iterator will be exhausted. Otherwise, iteration will stop if an encoding error is detected.\n\ninputEncoding\n\nThe Unicode encoding of input.\n\noutputEncoding\n\nThe destination Unicode encoding.\n\nstopOnError\n\nPass true to stop translation when an encoding error is detected in input. Otherwise, a Unicode replacement character (\"\\u{FFFD}\") is inserted for each detected error.\n\nprocessCodeUnit\n\nA closure that processes one outputEncoding code unit at a time.\n\nReturn Value\n\ntrue if the translation detected encoding errors in input; otherwise, false.\n\nDiscussion\n\nThe following example transcodes the UTF-8 representation of the string \"Fermata 𝄐\" into UTF-32.\n\nlet fermata = \"Fermata 𝄐\"\nlet bytes = fermata.utf8\nprint(Array(bytes))\n// Prints \"[70, 101, 114, 109, 97, 116, 97, 32, 240, 157, 132, 144]\"\n\n\nvar codeUnits: [UTF32.CodeUnit] = []\nlet sink = { codeUnits.append($0) }\ntranscode(bytes.makeIterator(), from: UTF8.self, to: UTF32.self,\n          stoppingOnError: false, into: sink)\nprint(codeUnits)\n// Prints \"[70, 101, 114, 109, 97, 116, 97, 32, 119056]\"\n\n\nThe sink closure is called with each resulting UTF-32 code unit as the function iterates over its input."
  },
  {
    "title": "UnicodeScalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicodescalar",
    "html": "See Also\nDeprecated\ntypealias UTF8\ntypealias UTF16\ntypealias UTF32"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/intentinputoptions/capitalizationtype-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Unicode.GeneralCategory.surrogate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/surrogate",
    "html": "Discussion\n\nThis value corresponds to the category Surrogate (abbreviated Cs) in the Unicode Standard."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/intentinputoptions/capitalizationtype-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/intentinputoptions/capitalizationtype-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/intentinputoptions/capitalizationtype-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/numerictype/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/numerictype/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Unicode.NumericType.decimal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/numerictype/decimal",
    "html": "Discussion\n\nSpecifically, scalars have this numeric type if they occupy a contiguous range of code points representing numeric values 0...9."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/numerictype/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Unicode.NumericType.digit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/numerictype/digit",
    "html": "Discussion\n\nScalars with this numeric type are often those that represent a decimal digit but would not typically be used to write a base-10 number, such as “④” (U+2463 CIRCLED DIGIT FOUR).\n\nAs of Unicode 6.3, any new scalars that represent numbers but do not meet the requirements of decimal will have numeric type numeric, and programs can treat digit and numeric equivalently."
  },
  {
    "title": "Unicode.NumericType.numeric | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/numerictype/numeric",
    "html": "Discussion\n\nThis numeric type includes fractions such as “⅕” (U+2155 VULGAR FRACTION ONE FIFTH), numerical CJK ideographs like “兆” (U+5146 CJK UNIFIED IDEOGRAPH-5146), and other scalars that are not decimal digits used positionally in the writing of base-10 numbers.\n\nAs of Unicode 6.3, any new scalars that represent numbers but do not meet the requirements of decimal will have numeric type numeric, and programs can treat digit and numeric equivalently."
  },
  {
    "title": "wordBoundaryKind(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regex/wordboundarykind(_:)",
    "html": "Parameters\nwordBoundaryKind\n\nThe algorithm to use for determining word boundaries.\n\nReturn Value\n\nThe modified regular expression."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/numerictype/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-n5tj",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(Float.Type) throws -> Float?"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexwordboundarykind/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexwordboundarykind/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "decodeNil() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodenil()",
    "html": "Required\n\nReturn Value\n\nWhether the encountered value was null.\n\nDiscussion\n\nIf the value is not null, does not increment currentIndex.\n\nThrows\n\nDecodingError.valueNotFound if there are no more values to decode."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func > (UInt, UInt) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func < (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func <= (UInt, UInt) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func >= (UInt, UInt) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexwordboundarykind/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Unicode.GeneralCategory.control | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/control",
    "html": "Discussion\n\nThis value corresponds to the category Control (abbreviated Cc) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.connectorPunctuation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/connectorpunctuation",
    "html": "Discussion\n\nThis value corresponds to the category Connector_Punctuation (abbreviated Pc) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.closePunctuation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/closepunctuation",
    "html": "Discussion\n\nThis value corresponds to the category Close_Punctuation (abbreviated Pe) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.spacingMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/spacingmark",
    "html": "Discussion\n\nThis value corresponds to the category Spacing_Mark (abbreviated Mc) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.titlecaseLetter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/titlecaseletter",
    "html": "Discussion\n\nThis value corresponds to the category Titlecase_Letter (abbreviated Lt) in the Unicode Standard."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/comparable-implementations",
    "html": "Topics\nOperators\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "Unicode.GeneralCategory.lineSeparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/lineseparator",
    "html": "Discussion\n\nThis value corresponds to the category Line_Separator (abbreviated Zl) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.modifierSymbol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/modifiersymbol",
    "html": "Discussion\n\nThis value corresponds to the category Modifier_Symbol (abbreviated Sk) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.otherSymbol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/othersymbol",
    "html": "Discussion\n\nThis value corresponds to the category Other_Symbol (abbreviated So) in the Unicode Standard."
  },
  {
    "title": "Unicode.GeneralCategory.spaceSeparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/generalcategory/spaceseparator",
    "html": "Discussion\n\nThis value corresponds to the category Space_Separator (abbreviated Zs) in the Unicode Standard."
  },
  {
    "title": "signum() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/signum()-7hog6",
    "html": "Required Default implementation provided.\n\nReturn Value\n\nThe sign of this number, expressed as an integer of the same type.\n\nDefault Implementations\nBinaryInteger Implementations\nfunc signum() -> Self\nReturns -1 if this value is negative and 1 if it’s positive; otherwise, 0."
  },
  {
    "title": "isMultiple(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/ismultiple(of:)-4vcaa",
    "html": "Required Default implementations provided.\n\nParameters\nother\n\nThe value to test.\n\nDiscussion\n\nFor two integers a and b, a is a multiple of b if there exists a third integer q such that a = q*b. For example, 6 is a multiple of 3 because 6 = 2*3. Zero is a multiple of everything because 0 = 0*x for any integer x.\n\nTwo edge cases are worth particular attention:\n\nx.isMultiple(of: 0) is true if x is zero and false otherwise.\n\nT.min.isMultiple(of: -1) is true for signed integer T, even though the quotient T.min / -1 isn’t representable in type T.\n\nDefault Implementations\nBinaryInteger Implementations\nfunc isMultiple(of: Self) -> Bool\nReturns true if this value is a multiple of the given value, and false otherwise.\nAvailable when Self conforms to FixedWidthInteger.\nfunc isMultiple(of: Self) -> Bool\nReturns true if this value is a multiple of the given value, and false otherwise.\nSee Also\nPerforming Calculations\nBinary Integer Operators\nPerform arithmetic and bitwise operations or compare values.\nfunc quotientAndRemainder(dividingBy: Self) -> (quotient: Self, remainder: Self)\nReturns the quotient and remainder of this value divided by the given value.\n\nRequired Default implementation provided."
  },
  {
    "title": "codingPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/codingpath",
    "html": "Required"
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-1jjjp",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "currentIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/currentindex",
    "html": "Required"
  },
  {
    "title": "isAtEnd | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/isatend",
    "html": "Required"
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-1oxo9",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(Float.Type) throws -> Float?"
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-276l5",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-1lbyq",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?"
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-499mt",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-599d9",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?"
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-5t8p7",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?"
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-24deb",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent(Float.Type) throws -> Float?"
  },
  {
    "title": "decodeIfPresent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decodeifpresent(_:)-4d6xc",
    "html": "Required Default implementations provided.\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the value is a null value, or if there are no more elements to decode.\n\nDiscussion\n\nThis method returns nil if the container has no elements left to decode, or if the value is null. The difference between these states can be distinguished by checking isAtEnd.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nDefault Implementations\nUnkeyedDecodingContainer Implementations\nfunc decodeIfPresent(Int8.Type) throws -> Int8?\nfunc decodeIfPresent(UInt64.Type) throws -> UInt64?\nfunc decodeIfPresent(Int32.Type) throws -> Int32?\nfunc decodeIfPresent(UInt8.Type) throws -> UInt8?\nfunc decodeIfPresent(UInt32.Type) throws -> UInt32?\nfunc decodeIfPresent(Int.Type) throws -> Int?\nfunc decodeIfPresent(Int64.Type) throws -> Int64?\nfunc decodeIfPresent(UInt.Type) throws -> UInt?\nfunc decodeIfPresent(Double.Type) throws -> Double?\nfunc decodeIfPresent<T>(T.Type) throws -> T?\nfunc decodeIfPresent(Float.Type) throws -> Float?\nfunc decodeIfPresent(Bool.Type) throws -> Bool?\nfunc decodeIfPresent(String.Type) throws -> String?\nfunc decodeIfPresent(UInt16.Type) throws -> UInt16?\nfunc decodeIfPresent(Int16.Type) throws -> Int16?"
  },
  {
    "title": "UTF8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/utf8",
    "html": "See Also\nDeprecated\ntypealias UnicodeScalar\ntypealias UTF16\ntypealias UTF32"
  },
  {
    "title": "superDecoder() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/superdecoder()",
    "html": "Required\n\nReturn Value\n\nA new Decoder to pass to super.init(from:).\n\nDiscussion\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexwordboundarykind/default",
    "html": "Discussion\n\nDefault word boundaries use a Unicode algorithm that handles some cases better than simple word boundaries, such as words with internal punctuation, changes in script, and Emoji."
  },
  {
    "title": "simple | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexwordboundarykind/simple",
    "html": "Discussion\n\nA simple word boundary is a position in the input between two characters that match /\\w\\W/ or /\\W\\w/, or between the start or end of the input and a \\w character. Word boundaries therefore depend on the option- defined behavior of \\w."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/regexwordboundarykind/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "RangeReplaceableCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/rangereplaceablecollection-implementations",
    "html": "Topics\nOperators\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection.\nInitializers\ninit()\nCreates an empty view instance.\ninit<S>(S)\nCreates a new instance of a collection containing the elements of a sequence.\ninit(repeating: Self.Element, count: Int)\nCreates a new collection containing the specified number of a single, repeated value.\nInstance Methods\nfunc append(Self.Element)\nAdds an element to the end of the collection.\nfunc append(Unicode.Scalar)\nAppends the given Unicode scalar to the view.\nfunc append<S>(contentsOf: S)\nAppends the Unicode scalar values in the given sequence to the view.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc applying(CollectionDifference<Self.Element>) -> Self?\nApplies the given difference to this collection.\nfunc filter((Self.Element) throws -> Bool) rethrows -> Self\nReturns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate.\nfunc insert(Self.Element, at: Self.Index)\nInserts a new element into the collection at the specified position.\nfunc insert<C>(contentsOf: C, at: Self.Index)\nInserts the elements of a sequence into the collection at the specified position.\nfunc popLast() -> Self.Element?\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc remove(at: Self.Index) -> Self.Element\nRemoves and returns the element at the specified position.\nfunc removeAll(keepingCapacity: Bool)\nRemoves all elements from the collection.\nfunc removeAll(where: (Self.Element) throws -> Bool) rethrows\nRemoves all the elements that satisfy the given predicate.\nfunc removeFirst() -> Self.Element\nRemoves and returns the first element of the collection.\nfunc removeFirst(Int)\nRemoves the specified number of elements from the beginning of the collection.\nfunc removeLast() -> Self.Element\nRemoves and returns the last element of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc removeLast(Int)\nRemoves the specified number of elements from the end of the collection.\nAvailable when Self conforms to BidirectionalCollection.\nfunc removeSubrange<R>(R)\nRemoves the elements in the specified subrange from the collection.\nfunc removeSubrange(Range<Self.Index>)\nRemoves the elements in the specified subrange from the collection.\nfunc replaceSubrange<C, R>(R, with: C)\nReplaces the specified subrange of elements with the given collection.\nfunc replaceSubrange<C>(Range<Self.Index>, with: C)\nReplaces the specified subrange of elements with the given collection.\nDeprecated\nfunc replaceSubrange<C>(Range<String.UnicodeScalarView.Index>, with: C)\nReplaces the elements within the specified bounds with the given Unicode scalar values.\nfunc reserveCapacity(Int)\nReserves enough space in the view’s underlying storage to store the specified number of ASCII characters.\nfunc reserveCapacity(Int)\nPrepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type."
  },
  {
    "title": "nestedUnkeyedContainer() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/nestedunkeyedcontainer()",
    "html": "Required\n\nReturn Value\n\nAn unkeyed decoding container view into self.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered stored value is not an unkeyed container."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Encodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "CustomStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "_CustomPlaygroundQuickLookable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/_customplaygroundquicklookable-implementations",
    "html": "Topics\nInstance Properties\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for this instance."
  },
  {
    "title": "Decodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nReturns a mirror that reflects the Unicode scalars view of a string."
  },
  {
    "title": "<<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/__(_:_:)-28lmu",
    "html": "Required Default implementations provided.\n\nParameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the left.\n\nDiscussion\n\nThe << operator performs a smart shift, which defines a result for a shift of any value.\n\nUsing a negative value for rhs performs a right shift using abs(rhs).\n\nUsing a value for rhs that is greater than or equal to the bit width of lhs is an overshift, resulting in zero.\n\nUsing any other value for rhs performs a left shift on lhs by that amount.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the value is shifted left by two bits.\n\nlet x: UInt8 = 30                 // 0b00011110\nlet y = x << 2\n// y == 120                       // 0b01111000\n\n\nIf you use 11 as rhs, x is overshifted such that all of its bits are set to zero.\n\nlet z = x << 11\n// z == 0                         // 0b00000000\n\n\nUsing a negative value as rhs is the same as performing a right shift with abs(rhs).\n\nlet a = x << -3\n// a == 3                         // 0b00000011\nlet b = x >> 3\n// b == 3                         // 0b00000011\n\nDefault Implementations\nBinaryInteger Implementations\nstatic func << <RHS>(Self, RHS) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left.\nstatic func << <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left."
  },
  {
    "title": "<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/_(_:_:)-z2os",
    "html": "Parameters\nlhs\n\nAn integer to compare.\n\nrhs\n\nAnother integer to compare.\n\nDiscussion\n\nYou can compare instances of any BinaryInteger types using the less-than operator (<), even if the two instances are of different types."
  },
  {
    "title": "<<=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/__=(_:_:)-9pzpp",
    "html": "Required Default implementation provided.\n\nParameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the left.\n\nDiscussion\n\nThe << operator performs a smart shift, which defines a result for a shift of any value.\n\nUsing a negative value for rhs performs a right shift using abs(rhs).\n\nUsing a value for rhs that is greater than or equal to the bit width of lhs is an overshift, resulting in zero.\n\nUsing any other value for rhs performs a left shift on lhs by that amount.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the value is shifted left by two bits.\n\nvar x: UInt8 = 30                 // 0b00011110\nx <<= 2\n// x == 120                       // 0b01111000\n\n\nIf you use 11 as rhs, x is overshifted such that all of its bits are set to zero.\n\nvar y: UInt8 = 30                 // 0b00011110\ny <<= 11\n// y == 0                         // 0b00000000\n\n\nUsing a negative value as rhs is the same as performing a right shift with abs(rhs).\n\nvar a: UInt8 = 30                 // 0b00011110\na <<= -3\n// a == 3                         // 0b00000011\n\n\nvar b: UInt8 = 30                 // 0b00011110\nb >>= 3\n// b == 3                         // 0b00000011\n\nDefault Implementations\nBinaryInteger Implementations\nstatic func <<= <Other>(inout Self, Other)\nStores the result of shifting a value’s binary representation the specified number of digits to the left in the left-hand-side variable."
  },
  {
    "title": ">>=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/__=(_:_:)-5lhky",
    "html": "Required Default implementation provided.\n\nParameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the right.\n\nDiscussion\n\nThe >>= operator performs a smart shift, which defines a result for a shift of any value.\n\nUsing a negative value for rhs performs a left shift using abs(rhs).\n\nUsing a value for rhs that is greater than or equal to the bit width of lhs is an overshift. An overshift results in -1 for a negative value of lhs or 0 for a nonnegative value.\n\nUsing any other value for rhs performs a right shift on lhs by that amount.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the value is shifted right by two bits.\n\nvar x: UInt8 = 30                 // 0b00011110\nx >>= 2\n// x == 7                         // 0b00000111\n\n\nIf you use 11 as rhs, x is overshifted such that all of its bits are set to zero.\n\nvar y: UInt8 = 30                 // 0b00011110\ny >>= 11\n// y == 0                         // 0b00000000\n\n\nUsing a negative value as rhs is the same as performing a left shift using abs(rhs).\n\nvar a: UInt8 = 30                 // 0b00011110\na >>= -3\n// a == 240                       // 0b11110000\n\n\nvar b: UInt8 = 30                 // 0b00011110\nb <<= 3\n// b == 240                       // 0b11110000\n\n\nRight shift operations on negative values “fill in” the high bits with ones instead of zeros.\n\nvar q: Int8 = -30                 // 0b11100010\nq >>= 2\n// q == -8                        // 0b11111000\n\n\nvar r: Int8 = -30                 // 0b11100010\nr >>= 11\n// r == -1                        // 0b11111111\n\nDefault Implementations\nBinaryInteger Implementations\nstatic func >>= <Other>(inout Self, Other)\nStores the result of shifting a value’s binary representation the specified number of digits to the right in the left-hand-side variable."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/init(_:)-8gmdl",
    "html": "Required Default implementations provided.\n\nParameters\nsource\n\nAn integer to convert. source must be representable in this type.\n\nDiscussion\n\nIf the value passed as source is not representable in this type, a runtime error may occur.\n\nlet x = -500 as Int\nlet y = Int32(x)\n// y == -500\n\n\n// -500 is not representable as a 'UInt32' instance\nlet z = UInt32(x)\n// Error\n\nDefault Implementations\nBinaryInteger Implementations\ninit<T>(T)\nCreates a new instance from the given integer.\nAvailable when Self conforms to FixedWidthInteger.\ninit<T>(T)\nCreates a new instance from the given integer.\nAvailable when Self conforms to FixedWidthInteger.\nLosslessStringConvertible Implementations\ninit<T>(T)\nCreates an integer from the given floating-point value, rounding toward zero. Any fractional part of the value passed as source is removed.\ninit?(String)\nCreates a new integer value from the given string.\nSee Also\nConverting Integers\ninit<T>(clamping: T)\nCreates a new instance with the representable value that’s closest to the given integer.\n\nRequired Default implementation provided.\n\ninit<T>(truncatingIfNeeded: T)\nCreates a new instance from the bit pattern of the given instance by sign-extending or truncating to fit this type.\n\nRequired Default implementation provided."
  },
  {
    "title": "init(truncatingIfNeeded:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/init(truncatingifneeded:)-5b20c",
    "html": "Required Default implementation provided.\n\nParameters\nsource\n\nAn integer to convert to this type.\n\nDiscussion\n\nWhen the bit width of T (the type of source) is equal to or greater than this type’s bit width, the result is the truncated least-significant bits of source. For example, when converting a 16-bit value to an 8-bit type, only the lower 8 bits of source are used.\n\nlet p: Int16 = -500\n// 'p' has a binary representation of 11111110_00001100\nlet q = Int8(truncatingIfNeeded: p)\n// q == 12\n// 'q' has a binary representation of 00001100\n\n\nWhen the bit width of T is less than this type’s bit width, the result is sign-extended to fill the remaining bits. That is, if source is negative, the result is padded with ones; otherwise, the result is padded with zeros.\n\nlet u: Int8 = 21\n// 'u' has a binary representation of 00010101\nlet v = Int16(truncatingIfNeeded: u)\n// v == 21\n// 'v' has a binary representation of 00000000_00010101\n\n\nlet w: Int8 = -21\n// 'w' has a binary representation of 11101011\nlet x = Int16(truncatingIfNeeded: w)\n// x == -21\n// 'x' has a binary representation of 11111111_11101011\nlet y = UInt16(truncatingIfNeeded: w)\n// y == 65515\n// 'y' has a binary representation of 11111111_11101011\n\nDefault Implementations\nBinaryInteger Implementations\ninit<T>(truncatingIfNeeded: T)\nCreates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type.\nSee Also\nConverting Integers\ninit<T>(T)\nCreates a new instance from the given integer.\n\nRequired Default implementations provided.\n\ninit<T>(clamping: T)\nCreates a new instance with the representable value that’s closest to the given integer.\n\nRequired Default implementation provided."
  },
  {
    "title": "init(clamping:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/init(clamping:)-6ewp0",
    "html": "Required Default implementation provided.\n\nParameters\nsource\n\nAn integer to convert to this type.\n\nDiscussion\n\nIf the value passed as source is greater than the maximum representable value in this type, the result is the type’s max value. If source is less than the smallest representable value in this type, the result is the type’s min value.\n\nIn this example, x is initialized as an Int8 instance by clamping 500 to the range -128...127, and y is initialized as a UInt instance by clamping -500 to the range 0...UInt.max.\n\nlet x = Int8(clamping: 500)\n// x == 127\n// x == Int8.max\n\n\nlet y = UInt(clamping: -500)\n// y == 0\n\nDefault Implementations\nBinaryInteger Implementations\ninit<Other>(clamping: Other)\nCreates a new instance with the representable value that’s closest to the given integer.\nSee Also\nConverting Integers\ninit<T>(T)\nCreates a new instance from the given integer.\n\nRequired Default implementations provided.\n\ninit<T>(truncatingIfNeeded: T)\nCreates a new instance from the bit pattern of the given instance by sign-extending or truncating to fit this type.\n\nRequired Default implementation provided."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/init(_:)-2ln0u",
    "html": "Required Default implementations provided.\n\nParameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n\nDefault Implementations\nBinaryInteger Implementations\ninit<T>(T)\nCreates a new instance from the given integer.\nAvailable when Self conforms to FixedWidthInteger.\ninit<T>(T)\nCreates a new instance from the given integer.\nAvailable when Self conforms to FixedWidthInteger.\nLosslessStringConvertible Implementations\ninit<T>(T)\nCreates an integer from the given floating-point value, rounding toward zero. Any fractional part of the value passed as source is removed.\ninit?(String)\nCreates a new integer value from the given string."
  },
  {
    "title": "isSigned | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/issigned-2nca7",
    "html": "Required Default implementations provided.\n\nDiscussion\n\nSigned integer types can represent both positive and negative values. Unsigned integer types can represent only nonnegative values.\n\nDefault Implementations\nBinaryInteger Implementations\nstatic var isSigned: Bool\nA Boolean value indicating whether this type is a signed integer type.\nstatic var isSigned: Bool\nA Boolean value indicating whether this type is a signed integer type."
  },
  {
    "title": "bitWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/bitwidth-4xo21",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nThis property is a constant for instances of fixed-width integer types.\n\nDefault Implementations\nBinaryInteger Implementations\nvar bitWidth: Int\nThe number of bits in the binary representation of this value.\nSee Also\nWorking with Binary Representation\nvar trailingZeroBitCount: Int\nThe number of trailing zeros in this value’s binary representation.\n\nRequired\n\nvar words: Self.Words\nA collection containing the words of this value’s binary representation, in order from the least significant to most significant.\n\nRequired\n\nassociatedtype Words : RandomAccessCollection\nA type that represents the words of a binary integer.\n\nRequired"
  },
  {
    "title": "Binary Integer Operators | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binary-integer-operators",
    "html": "Topics\nArithmetic\nstatic func + (Self, Self) -> Self\nAdds two values and produces their sum.\n\nRequired\n\nstatic func - (Self, Self) -> Self\nSubtracts one value from another and produces their difference.\n\nRequired\n\nstatic func * (Self, Self) -> Self\nMultiplies two values and produces their product.\n\nRequired\n\nArithmetic with Assignment\nstatic func += (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable.\n\nRequired\n\nstatic func -= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable.\n\nRequired\n\nstatic func *= (inout Self, Self)\nMultiplies two values and stores the result in the left-hand-side variable.\n\nRequired\n\nBitwise Operations\nstatic func & (Self, Self) -> Self\nReturns the result of performing a bitwise AND operation on the two given values.\n\nRequired Default implementation provided.\n\nstatic func &= (inout Self, Self)\nStores the result of performing a bitwise AND operation on the two given values in the left-hand-side variable.\n\nRequired\n\nstatic func ~ (Self) -> Self\nReturns the inverse of the bits set in the argument.\n\nRequired Default implementation provided.\n\nComparison\nstatic func == <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the two given values are equal.\nstatic func != <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the two given values are not equal.\nstatic func != (Self, Self) -> Bool\nSee Also\nPerforming Calculations\nfunc quotientAndRemainder(dividingBy: Self) -> (quotient: Self, remainder: Self)\nReturns the quotient and remainder of this value divided by the given value.\n\nRequired Default implementation provided.\n\nfunc isMultiple(of: Self) -> Bool\nReturns true if this value is a multiple of the given value, and false otherwise.\n\nRequired Default implementations provided."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/init(exactly:)-9f53j",
    "html": "Required Default implementations provided.\n\nParameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n\nDefault Implementations\nBinaryInteger Implementations\ninit?<T>(exactly: T)\nCreates a new instance from the given integer, if it can be represented exactly.\nAvailable when Self conforms to FixedWidthInteger.\ninit?<T>(exactly: T)\nCreates an integer from the given floating-point value, if it can be represented exactly.\ninit?<T>(exactly: T)\nCreates a new instance from the given integer, if it can be represented exactly.\nAvailable when Self conforms to FixedWidthInteger."
  },
  {
    "title": "quotientAndRemainder(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/quotientandremainder(dividingby:)-2n3uu",
    "html": "Required Default implementation provided.\n\nParameters\nrhs\n\nThe value to divide this value by.\n\nReturn Value\n\nA tuple containing the quotient and remainder of this value divided by rhs. The remainder has the same sign as lhs.\n\nDiscussion\n\nUse this method to calculate the quotient and remainder of a division at the same time.\n\nlet x = 1_000_000\nlet (q, r) = x.quotientAndRemainder(dividingBy: 933)\n// q == 1071\n// r == 757\n\nDefault Implementations\nBinaryInteger Implementations\nfunc quotientAndRemainder(dividingBy: Self) -> (quotient: Self, remainder: Self)\nReturns the quotient and remainder of this value divided by the given value.\nSee Also\nPerforming Calculations\nBinary Integer Operators\nPerform arithmetic and bitwise operations or compare values.\nfunc isMultiple(of: Self) -> Bool\nReturns true if this value is a multiple of the given value, and false otherwise.\n\nRequired Default implementations provided."
  },
  {
    "title": "trailingZeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/trailingzerobitcount",
    "html": "Required\n\nDiscussion\n\nFor example, in a fixed-width integer type with a bitWidth value of 8, the number -8 has three trailing zeros.\n\nlet x = Int8(bitPattern: 0b1111_1000)\n// x == -8\n// x.trailingZeroBitCount == 3\n\n\nIf the value is zero, then trailingZeroBitCount is equal to bitWidth.\n\nSee Also\nWorking with Binary Representation\nvar bitWidth: Int\nThe number of bits in the current binary representation of this value.\n\nRequired Default implementation provided.\n\nvar words: Self.Words\nA collection containing the words of this value’s binary representation, in order from the least significant to most significant.\n\nRequired\n\nassociatedtype Words : RandomAccessCollection\nA type that represents the words of a binary integer.\n\nRequired"
  },
  {
    "title": "Words | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/words-swift.associatedtype",
    "html": "Required\n\nDiscussion\n\nThe Words type must conform to the RandomAccessCollection protocol with an Element type of UInt and Index type of Int.\n\nSee Also\nWorking with Binary Representation\nvar bitWidth: Int\nThe number of bits in the current binary representation of this value.\n\nRequired Default implementation provided.\n\nvar trailingZeroBitCount: Int\nThe number of trailing zeros in this value’s binary representation.\n\nRequired\n\nvar words: Self.Words\nA collection containing the words of this value’s binary representation, in order from the least significant to most significant.\n\nRequired"
  },
  {
    "title": "/=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger//=(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nFor integer types, any remainder of the division is discarded.\n\nvar x = 21\nx /= 5\n// x == 4\n"
  },
  {
    "title": "words | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/words-swift.property",
    "html": "Required\n\nDiscussion\n\nNegative values are returned in two’s complement representation, regardless of the type’s underlying implementation.\n\nSee Also\nWorking with Binary Representation\nvar bitWidth: Int\nThe number of bits in the current binary representation of this value.\n\nRequired Default implementation provided.\n\nvar trailingZeroBitCount: Int\nThe number of trailing zeros in this value’s binary representation.\n\nRequired\n\nassociatedtype Words : RandomAccessCollection\nA type that represents the words of a binary integer.\n\nRequired"
  },
  {
    "title": "/(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger//(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nFor integer types, any remainder of the division is discarded.\n\nlet x = 21 / 5\n// x == 4\n"
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-6o9j1",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-4cm6k",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-83ekt",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-7gp3y",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-5kbz9",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-nztw",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/decode(_:)-8g0io",
    "html": "Required\n\nParameters\ntype\n\nThe type of value to decode.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null, or of there are no more values to decode."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(_:)-8jtgk",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/_=(_:_:)-2p0vs",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise XOR operation, also known as an exclusive OR operation, results in a value that has each bit set to 1 where one or the other but not both of its arguments had that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx ^= y                    // 0b00001011\n"
  },
  {
    "title": "JoinedSequence.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/joinedsequence/iterator",
    "html": "Topics\nInitializers\ninit<Separator>(base: Base.Iterator, separator: Separator)\nCreates an iterator that presents the elements of base sequences concatenated using separator.\nDefault Implementations\nIteratorProtocol Implementations\nRelationships\nConforms To\nIteratorProtocol\nConforms when Base conforms to Sequence and Base.Element conforms to Sequence."
  },
  {
    "title": "UnsignedInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/unsignedinteger-implementations",
    "html": "Topics\nInitializers\ninit<T>(T)\nCreates a new instance from the given integer.\nAvailable when Self conforms to FixedWidthInteger.\ninit?<T>(exactly: T)\nCreates a new instance from the given integer, if it can be represented exactly.\nAvailable when Self conforms to FixedWidthInteger.\nInstance Properties\nvar magnitude: Self\nThe magnitude of this value.\nType Properties\nstatic var isSigned: Bool\nA Boolean value indicating whether this type is a signed integer type.\nstatic var max: Self\nThe maximum representable integer in this type.\nAvailable when Self conforms to FixedWidthInteger.\nstatic var min: Self\nThe minimum representable integer in this type.\nAvailable when Self conforms to FixedWidthInteger."
  },
  {
    "title": "%(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/_(_:_:)-30ngi",
    "html": "Required\n\nParameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nThe result of the remainder operator (%) has the same sign as lhs and has a magnitude less than rhs.magnitude.\n\nlet x = 22 % 5\n// x == 2\nlet y = 22 % -5\n// y == 2\nlet z = -22 % -5\n// z == -2\n\n\nFor any two integers a and b, their quotient q, and their remainder r, a == b * q + r."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(exactly:)-wmyv",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/_(_:_:)-3qw5d",
    "html": "Required Default implementation provided.\n\nParameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise XOR operation, also known as an exclusive OR operation, results in a value that has each bit set to 1 where one or the other but not both of its arguments had that bit set to 1. For example:\n\nlet x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nlet z = x ^ y             // 0b00001011\n// z == 11\n\nDefault Implementations\nBinaryInteger Implementations\nstatic func ^ (Self, Self) -> Self\nReturns the result of performing a bitwise XOR operation on the two given values."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements."
  },
  {
    "title": ">(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/_(_:_:)-2lu7e",
    "html": "Parameters\nlhs\n\nAn integer to compare.\n\nrhs\n\nAnother integer to compare.\n\nDiscussion\n\nYou can compare instances of any BinaryInteger types using the greater-than operator (>), even if the two instances are of different types."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar endIndex: String.UnicodeScalarView.Index\nThe “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar last: Self.Element?\nThe last element of the collection.\nvar startIndex: String.UnicodeScalarView.Index\nThe position of the first Unicode scalar value if the string is nonempty.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc distance(from: String.UnicodeScalarView.Index, to: String.UnicodeScalarView.Index) -> Int\nReturns the distance between two indices.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc index(String.UnicodeScalarView.Index, offsetBy: Int) -> String.UnicodeScalarView.Index\nReturns an index that is the specified distance from the given index.\nfunc index(String.UnicodeScalarView.Index, offsetBy: Int, limitedBy: String.UnicodeScalarView.Index) -> String.UnicodeScalarView.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: String.UnicodeScalarView.Index) -> String.UnicodeScalarView.Index\nReturns the next consecutive location after i.\nfunc index(before: String.UnicodeScalarView.Index) -> String.UnicodeScalarView.Index\nReturns the previous consecutive location before i.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nSubscripts\nsubscript(String.UnicodeScalarView.Index) -> Unicode.Scalar\nAccesses the Unicode scalar value at the given position.\nsubscript(Range<String.UnicodeScalarView.Index>) -> String.UnicodeScalarView.SubSequence\nAccesses a contiguous subrange of the collection’s elements."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/unicodescalarview/collection-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar first: Self.Element?\nThe first element of the collection.\nvar indices: DefaultIndices<Self>\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Indices is DefaultIndices<Self>.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> String.UnicodeScalarView.Iterator\nReturns an iterator over the elements of the collection.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/_(_:_:)-6qhsw",
    "html": "Required Default implementation provided.\n\nParameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise OR operation results in a value that has each bit set to 1 where one or both of its arguments have that bit set to 1. For example:\n\nlet x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nlet z = x | y             // 0b00001111\n// z == 15\n\nDefault Implementations\nBinaryInteger Implementations\nstatic func | (Self, Self) -> Self\nReturns the result of performing a bitwise OR operation on the two given values."
  },
  {
    "title": "Encodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "FixedWidthInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/fixedwidthinteger-implementations",
    "html": "Topics\nOperators\nstatic func &* (Self, Self) -> Self\nReturns the product of the two given values, wrapping the result in case of any overflow.\nstatic func &*= (inout Self, Self)\nMultiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.\nstatic func &+ (Self, Self) -> Self\nReturns the sum of the two given values, wrapping the result in case of any overflow.\nstatic func &+= (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable, wrapping any overflow.\nstatic func &- (Self, Self) -> Self\nReturns the difference of the two given values, wrapping the result in case of any overflow.\nstatic func &-= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.\nstatic func &<< (Self, Self) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &<< (UInt, UInt) -> UInt\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &>> (Self, Self) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &>> <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &>> (UInt, UInt) -> UInt\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &<< <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &<<= <Other>(inout Self, Other)\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.\nstatic func &>>= <Other>(inout Self, Other)\nCalculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.\nstatic func << <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left.\nstatic func >> <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right.\nstatic func ~ (Self) -> Self\nReturns the inverse of the bits set in the argument.\nInitializers\ninit?(String)\nCreates a new integer value from the given string.\ninit<T>(T)\nCreates an integer from the given floating-point value, rounding toward zero. Any fractional part of the value passed as source is removed.\ninit?<S>(S, radix: Int)\nCreates a new integer value from the given string and radix.\ninit(bigEndian: Self)\nCreates an integer from its big-endian representation, changing the byte order if necessary.\ninit<Other>(clamping: Other)\nCreates a new instance with the representable value that’s closest to the given integer.\ninit?<T>(exactly: T)\nCreates an integer from the given floating-point value, if it can be represented exactly.\ninit(littleEndian: Self)\nCreates an integer from its little-endian representation, changing the byte order if necessary.\ninit<T>(truncatingIfNeeded: T)\nCreates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type.\nInstance Properties\nvar bigEndian: Self\nThe big-endian representation of this integer.\nvar bitWidth: Int\nThe number of bits in the binary representation of this value.\nvar littleEndian: Self\nThe little-endian representation of this integer.\nType Methods\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "ExpressibleByIntegerLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/expressiblebyintegerliteral-implementations",
    "html": "Topics\nInitializers\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nA mirror that reflects the UInt instance."
  },
  {
    "title": "BinaryInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/binaryinteger-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func != <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the two given values are not equal.\nstatic func & (Self, Self) -> Self\nReturns the result of performing a bitwise AND operation on the two given values.\nstatic func & (UInt, UInt) -> UInt\nReturns the result of performing a bitwise AND operation on the two given values.\nstatic func * (UInt, UInt) -> UInt\nMultiplies two values and produces their product.\nstatic func + (UInt, UInt) -> UInt\nAdds two values and produces their sum.\nstatic func - (UInt, UInt) -> UInt\nSubtracts one value from another and produces their difference.\nstatic func / (UInt, UInt) -> UInt\nReturns the quotient of dividing the first value by the second.\nstatic func == <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the two given values are equal.\nstatic func | (Self, Self) -> Self\nReturns the result of performing a bitwise OR operation on the two given values.\nstatic func ^ (Self, Self) -> Self\nReturns the result of performing a bitwise XOR operation on the two given values.\nstatic func < <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func % (UInt, UInt) -> UInt\nReturns the remainder of dividing the first value by the second.\nstatic func | (UInt, UInt) -> UInt\nReturns the result of performing a bitwise OR operation on the two given values.\nstatic func > <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func ^ (UInt, UInt) -> UInt\nReturns the result of performing a bitwise XOR operation on the two given values.\nstatic func >= <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func << <RHS>(Self, RHS) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left.\nstatic func >> <RHS>(Self, RHS) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right.\nstatic func <<= <Other>(inout Self, Other)\nStores the result of shifting a value’s binary representation the specified number of digits to the left in the left-hand-side variable.\nstatic func >>= <Other>(inout Self, Other)\nStores the result of shifting a value’s binary representation the specified number of digits to the right in the left-hand-side variable.\nInitializers\ninit()\nCreates a new value equal to zero.\ninit(String, format: IntegerFormatStyle<Self>, lenient: Bool) throws\ninit(String, format: IntegerFormatStyle<Self>.Percent, lenient: Bool) throws\ninit(String, format: IntegerFormatStyle<Self>.Currency, lenient: Bool) throws\ninit<S>(S.ParseInput, strategy: S) throws\nInitialize an instance by parsing value with the given strategy.\ninit<S>(S.ParseInput, strategy: S) throws\nInstance Properties\nvar description: String\nA textual representation of this value.\nInstance Methods\nfunc advanced(by: Int) -> Self\nReturns a value that is offset the specified distance from this value.\nfunc distance(to: Self) -> Int\nReturns the distance from this value to the given value, expressed as a stride.\nfunc formatted() -> String\nFormat self using IntegerFormatStyle()\nfunc formatted<S>(S) -> S.FormatOutput\nFormat self with the given format.\nfunc formatted<S>(S) -> S.FormatOutput\nFormat self with the given format. self is first converted to S.FormatInput type, then format with the given format.\nfunc isMultiple(of: Self) -> Bool\nReturns true if this value is a multiple of the given value, and false otherwise.\nfunc quotientAndRemainder(dividingBy: Self) -> (quotient: Self, remainder: Self)\nReturns the quotient and remainder of this value divided by the given value."
  },
  {
    "title": "AdditiveArithmetic Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/additivearithmetic-implementations",
    "html": "Topics\nOperators\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func += (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func -= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable.\nType Properties\nstatic var zero: Self\nThe zero value.\nAvailable when Self conforms to ExpressibleByIntegerLiteral."
  },
  {
    "title": "bitWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/bitwidth-swift.type.property",
    "html": "Discussion\n\nThe bit width of a UInt instance is 32 on 32-bit platforms and 64 on 64-bit platforms."
  },
  {
    "title": "subtractingReportingOverflow(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/subtractingreportingoverflow(_:)",
    "html": "Parameters\nrhs\n\nThe value to subtract from this value.\n\nReturn Value\n\nA tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire difference. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated result of rhs subtracted from this value."
  },
  {
    "title": "multipliedFullWidth(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/multipliedfullwidth(by:)",
    "html": "Parameters\nother\n\nThe value to multiply this value by.\n\nReturn Value\n\nA tuple containing the high and low parts of the result of multiplying this value and other.\n\nDiscussion\n\nUse this method to calculate the full result of a product that would otherwise overflow. Unlike traditional truncating multiplication, the multipliedFullWidth(by:) method returns a tuple containing both the high and low parts of the product of this value and other. The following example uses this method to multiply two UInt8 values that normally overflow when multiplied:\n\nlet x: UInt8 = 100\nlet y: UInt8 = 20\nlet result = x.multipliedFullWidth(by: y)\n// result.high == 0b00000111\n// result.low  == 0b11010000\n\n\nThe product of x and y is 2000, which is too large to represent in a UInt8 instance. The high and low properties of the result value represent 2000 when concatenated to form a double-width integer; that is, using result.high as the high byte and result.low as the low byte of a UInt16 instance.\n\nlet z = UInt16(result.high) << 8 | UInt16(result.low)\n// z == 2000\n"
  },
  {
    "title": "multipliedReportingOverflow(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/multipliedreportingoverflow(by:)",
    "html": "Parameters\nrhs\n\nThe value to multiply by this value.\n\nReturn Value\n\nA tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire product. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs."
  },
  {
    "title": "remainderReportingOverflow(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/remainderreportingoverflow(dividingby:)",
    "html": "Parameters\nrhs\n\nThe value to divide this value by.\n\nReturn Value\n\nA tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire remainder. If the overflow component is true, an overflow occurred during division and the partialValue component contains either the entire remainder or, if the remainder is undefined, the dividend.\n\nDiscussion\n\nDividing by zero is not an error when using this method. For a value x, the result of x.remainderReportingOverflow(dividingBy: 0) is (x, true)."
  },
  {
    "title": ">=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/_=(_:_:)-6cgpr",
    "html": "Parameters\nlhs\n\nAn integer to compare.\n\nrhs\n\nAnother integer to compare.\n\nDiscussion\n\nYou can compare instances of any BinaryInteger types using the greater-than-or-equal-to operator (>=), even if the two instances are of different types."
  },
  {
    "title": ">>(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/__(_:_:)-4vnij",
    "html": "Required Default implementations provided.\n\nParameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the right.\n\nDiscussion\n\nThe >> operator performs a smart shift, which defines a result for a shift of any value.\n\nUsing a negative value for rhs performs a left shift using abs(rhs).\n\nUsing a value for rhs that is greater than or equal to the bit width of lhs is an overshift. An overshift results in -1 for a negative value of lhs or 0 for a nonnegative value.\n\nUsing any other value for rhs performs a right shift on lhs by that amount.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the value is shifted right by two bits.\n\nlet x: UInt8 = 30                 // 0b00011110\nlet y = x >> 2\n// y == 7                         // 0b00000111\n\n\nIf you use 11 as rhs, x is overshifted such that all of its bits are set to zero.\n\nlet z = x >> 11\n// z == 0                         // 0b00000000\n\n\nUsing a negative value as rhs is the same as performing a left shift using abs(rhs).\n\nlet a = x >> -3\n// a == 240                       // 0b11110000\nlet b = x << 3\n// b == 240                       // 0b11110000\n\n\nRight shift operations on negative values “fill in” the high bits with ones instead of zeros.\n\nlet q: Int8 = -30                 // 0b11100010\nlet r = q >> 2\n// r == -8                        // 0b11111000\n\n\nlet s = q >> 11\n// s == -1                        // 0b11111111\n\nDefault Implementations\nBinaryInteger Implementations\nstatic func >> <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right.\nstatic func >> <RHS>(Self, RHS) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right."
  },
  {
    "title": "^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/_=(_:_:)-1fatv",
    "html": "Required\n\nParameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise XOR operation, also known as an exclusive OR operation, results in a value that has each bit set to 1 where one or the other but not both of its arguments had that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx ^= y                    // 0b00001011\n"
  },
  {
    "title": "|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/_=(_:_:)-4vfmj",
    "html": "Required\n\nParameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise OR operation results in a value that has each bit set to 1 where one or both of its arguments have that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx |= y                    // 0b00001111\n"
  },
  {
    "title": "%=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/_=(_:_:)-79wgi",
    "html": "Required\n\nParameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nThe result has the same sign as lhs and has a magnitude less than rhs.magnitude.\n\nvar x = 22\nx %= 5\n// x == 2\n\n\nvar y = 22\ny %= -5\n// y == 2\n\n\nvar z = -22\nz %= -5\n// z == -2\n"
  },
  {
    "title": "<=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryinteger/_=(_:_:)-7a44t",
    "html": "Parameters\nlhs\n\nAn integer to compare.\n\nrhs\n\nAnother integer to compare.\n\nDiscussion\n\nYou can compare instances of any BinaryInteger types using the less-than-or-equal-to operator (<=), even if the two instances are of different types."
  },
  {
    "title": "Decodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/&=(_:_:)",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise AND operation results in a value that has each bit set to 1 where both of its arguments have that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx &= y                    // 0b00000100\n"
  },
  {
    "title": "dividedReportingOverflow(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/dividedreportingoverflow(by:)",
    "html": "Parameters\nrhs\n\nThe value to divide this value by.\n\nReturn Value\n\nA tuple containing the result of the division along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire quotient. If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend.\n\nDiscussion\n\nDividing by zero is not an error when using this method. For a value x, the result of x.dividedReportingOverflow(by: 0) is (x, true)."
  },
  {
    "title": "dividingFullWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/dividingfullwidth(_:)",
    "html": "Parameters\ndividend\n\nA tuple containing the high and low parts of a double-width integer. The high component of the value carries the sign, if the type is signed.\n\nReturn Value\n\nA tuple containing the quotient and remainder of dividend divided by this value.\n\nDiscussion\n\nThe resulting quotient must be representable within the bounds of the type. If the quotient of dividing dividend by this value is too large to represent in the type, a runtime error may occur."
  },
  {
    "title": "leadingZeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/leadingzerobitcount",
    "html": "Discussion\n\nFor example, in an integer type with a bitWidth value of 8, the number 31 has three leading zeros.\n\nlet x: Int8 = 0b0001_1111\n// x == 31\n// x.leadingZeroBitCount == 3\n"
  },
  {
    "title": "nonzeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/nonzerobitcount",
    "html": "Discussion\n\nFor example, in a fixed-width integer type with a bitWidth value of 8, the number 31 has five bits equal to 1.\n\nlet x: Int8 = 0b0001_1111\n// x == 31\n// x.nonzeroBitCount == 5\n"
  },
  {
    "title": "addingReportingOverflow(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/addingreportingoverflow(_:)",
    "html": "Parameters\nrhs\n\nThe value to add to this value.\n\nReturn Value\n\nA tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire sum. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated sum of this value and rhs."
  },
  {
    "title": "trailingZeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/trailingzerobitcount",
    "html": "Discussion\n\nFor example, the number -8 has three trailing zeros.\n\nlet x = Int8(bitPattern: 0b1111_1000)\n// x == -8\n// x.trailingZeroBitCount == 3\n"
  },
  {
    "title": "-=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/-=(_:_:)-8rwbe",
    "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDiscussion\n\nThe difference of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 - 50 is less than zero, the minimum representable UInt8 value:\n\nvar x: UInt8 = 21\nx - 50\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "*=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/*=(_:_:)",
    "html": "Parameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply.\n\nDiscussion\n\nThe product of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 * 21 is greater than the maximum representable Int8 value:\n\nvar x: Int8 = 21\nx * 21\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "&>>=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/&__=(_:_:)-69f19",
    "html": "Parameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nThe &>>= operator performs a masking shift, where the value passed as rhs is masked to produce a value in the range 0..<lhs.bitWidth. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nvar x: UInt8 = 30                 // 0b00011110\nx &>>= 2\n// x == 7                         // 0b00000111\n\n\nHowever, if you use 19 as rhs, the operation first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.\n\nvar y: UInt8 = 30                 // 0b00011110\ny &>>= 19\n// y == 3                         // 0b00000011\n"
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/+=(_:_:)-6565m",
    "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDiscussion\n\nThe sum of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 + 120 is greater than the maximum representable Int8 value:\n\nvar x: Int8 = 21\nx += 120\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/==(_:_:)-366en",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "init(bitPattern:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(bitpattern:)-7sd72",
    "html": "Parameters\npointer\n\nThe pointer to use as the source for the new integer.\n\nDiscussion\n\nThe new value represents the address of the pointer passed as pointer. If pointer is nil, the result is 0."
  },
  {
    "title": "<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/_(_:_:)-9v225",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nThis function is the only requirement of the Comparable protocol. The remainder of the relational operator functions are implemented by the standard library for any type that conforms to Comparable."
  },
  {
    "title": "SIMDScalar Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/simdscalar-implementations",
    "html": "Topics\nStructures\nstruct SIMD16Storage\nStorage for a vector of 16 integers.\nstruct SIMD2Storage\nStorage for a vector of two integers.\nstruct SIMD32Storage\nStorage for a vector of 32 integers.\nstruct SIMD4Storage\nStorage for a vector of four integers.\nstruct SIMD64Storage\nStorage for a vector of 64 integers.\nstruct SIMD8Storage\nStorage for a vector of eight integers.\nType Aliases\ntypealias SIMDMaskScalar"
  },
  {
    "title": "/=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint//=(_:_:)",
    "html": "Parameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nFor integer types, any remainder of the division is discarded.\n\nvar x = 21\nx /= 5\n// x == 4\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(_:)-9lrzt",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/_=(_:_:)-4bs9t",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise OR operation results in a value that has each bit set to 1 where one or both of its arguments have that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx |= y                    // 0b00001111\n"
  },
  {
    "title": "init(bitPattern:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(bitpattern:)-3qf8b",
    "html": "Parameters\npointer\n\nThe pointer to use as the source for the new integer.\n\nDiscussion\n\nThe new value represents the address of the pointer passed as pointer. If pointer is nil, the result is 0."
  },
  {
    "title": "init(bitPattern:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(bitpattern:)-9qvv7",
    "html": "Parameters\nx\n\nA value to use as the source of the new instance’s binary representation.\n\nDiscussion\n\nThis initializer does not perform any range or overflow checking. The resulting instance may not have the same numeric value as bitPattern—it is only guaranteed to use the same pattern of bits in its binary representation."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(exactly:)-8zm2w",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(exactly:)-9cl5x",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(exactly:)-9ve7w",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "FixedWidthInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/fixedwidthinteger-implementations",
    "html": "Topics\nOperators\nstatic func &* (Self, Self) -> Self\nReturns the product of the two given values, wrapping the result in case of any overflow.\nstatic func &*= (inout Self, Self)\nMultiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.\nstatic func &+ (Self, Self) -> Self\nReturns the sum of the two given values, wrapping the result in case of any overflow.\nstatic func &+= (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable, wrapping any overflow.\nstatic func &- (Self, Self) -> Self\nReturns the difference of the two given values, wrapping the result in case of any overflow.\nstatic func &-= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.\nstatic func &<< <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &>> <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &>> (UInt64, UInt64) -> UInt64\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &<< (Self, Self) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &<< (UInt64, UInt64) -> UInt64\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &>> (Self, Self) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &<<= <Other>(inout Self, Other)\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.\nstatic func &>>= <Other>(inout Self, Other)\nCalculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.\nstatic func >> <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right.\nstatic func << <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left.\nstatic func ~ (Self) -> Self\nReturns the inverse of the bits set in the argument.\nInitializers\ninit<T>(T)\nCreates an integer from the given floating-point value, rounding toward zero. Any fractional part of the value passed as source is removed.\ninit?(String)\nCreates a new integer value from the given string.\ninit?<S>(S, radix: Int)\nCreates a new integer value from the given string and radix.\ninit(bigEndian: Self)\nCreates an integer from its big-endian representation, changing the byte order if necessary.\ninit<Other>(clamping: Other)\nCreates a new instance with the representable value that’s closest to the given integer.\ninit?<T>(exactly: T)\nCreates an integer from the given floating-point value, if it can be represented exactly.\ninit(littleEndian: Self)\nCreates an integer from its little-endian representation, changing the byte order if necessary.\ninit<T>(truncatingIfNeeded: T)\nCreates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type.\nInstance Properties\nvar bigEndian: Self\nThe big-endian representation of this integer.\nvar bitWidth: Int\nThe number of bits in the binary representation of this value.\nvar littleEndian: Self\nThe little-endian representation of this integer.\nInstance Methods\nfunc multipliedFullWidth(by: Self) -> (high: Self, low: Self.Magnitude)\nReturns a tuple containing the high and low parts of the result of multiplying this value by the given value.\nType Methods\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness."
  },
  {
    "title": "_CustomPlaygroundQuickLookable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/_customplaygroundquicklookable-implementations",
    "html": "Topics\nInstance Properties\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for the UInt64 instance.\nDeprecated"
  },
  {
    "title": "UnsignedInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/unsignedinteger-implementations",
    "html": "Topics\nInitializers\ninit<T>(T)\nCreates a new instance from the given integer.\nAvailable when Self conforms to FixedWidthInteger.\ninit?<T>(exactly: T)\nCreates a new instance from the given integer, if it can be represented exactly.\nAvailable when Self conforms to FixedWidthInteger.\nInstance Properties\nvar magnitude: Self\nThe magnitude of this value.\nType Properties\nstatic var isSigned: Bool\nA Boolean value indicating whether this type is a signed integer type.\nstatic var max: Self\nThe maximum representable integer in this type.\nAvailable when Self conforms to FixedWidthInteger.\nstatic var min: Self\nThe minimum representable integer in this type.\nAvailable when Self conforms to FixedWidthInteger."
  },
  {
    "title": "ExpressibleByIntegerLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/expressiblebyintegerliteral-implementations",
    "html": "Topics\nInitializers\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "_CustomPlaygroundQuickLookable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/_customplaygroundquicklookable-implementations",
    "html": "Topics\nInstance Properties\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for the UInt instance.\nDeprecated"
  },
  {
    "title": "SIMDScalar Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/simdscalar-implementations",
    "html": "Topics\nStructures\nstruct SIMD16Storage\nStorage for a vector of 16 integers.\nstruct SIMD2Storage\nStorage for a vector of two integers.\nstruct SIMD32Storage\nStorage for a vector of 32 integers.\nstruct SIMD4Storage\nStorage for a vector of four integers.\nstruct SIMD64Storage\nStorage for a vector of 64 integers.\nstruct SIMD8Storage\nStorage for a vector of eight integers.\nType Aliases\ntypealias SIMDMaskScalar"
  },
  {
    "title": "signum() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/signum()",
    "html": "Return Value\n\nThe sign of this number, expressed as an integer of the same type."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "init(bitPattern:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/init(bitpattern:)",
    "html": "Parameters\nx\n\nA value to use as the source of the new instance’s binary representation.\n\nDiscussion\n\nThis initializer does not perform any range or overflow checking. The resulting instance may not have the same numeric value as bitPattern—it is only guaranteed to use the same pattern of bits in its binary representation."
  },
  {
    "title": "multipliedReportingOverflow(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/multipliedreportingoverflow(by:)",
    "html": "Parameters\nrhs\n\nThe value to multiply by this value.\n\nReturn Value\n\nA tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire product. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs."
  },
  {
    "title": "bitWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/bitwidth-swift.type.property",
    "html": "Discussion\n\nThe bit width of a UInt64 instance is 64."
  },
  {
    "title": "signum() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/signum()",
    "html": "Return Value\n\nThe sign of this number, expressed as an integer of the same type."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/opaquepointer/init(_:)-4t9x5",
    "html": "Discussion\n\nThe result is nil if from is nil."
  },
  {
    "title": "remainderReportingOverflow(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/remainderreportingoverflow(dividingby:)",
    "html": "Parameters\nrhs\n\nThe value to divide this value by.\n\nReturn Value\n\nA tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire remainder. If the overflow component is true, an overflow occurred during division and the partialValue component contains either the entire remainder or, if the remainder is undefined, the dividend.\n\nDiscussion\n\nDividing by zero is not an error when using this method. For a value x, the result of x.remainderReportingOverflow(dividingBy: 0) is (x, true)."
  },
  {
    "title": "multipliedFullWidth(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/multipliedfullwidth(by:)-491qg",
    "html": "Parameters\nother\n\nThe value to multiply this value by.\n\nReturn Value\n\nA tuple containing the high and low parts of the result of multiplying this value and other.\n\nDiscussion\n\nUse this method to calculate the full result of a product that would otherwise overflow. Unlike traditional truncating multiplication, the multipliedFullWidth(by:) method returns a tuple containing both the high and low parts of the product of this value and other. The following example uses this method to multiply two UInt8 values that normally overflow when multiplied:\n\nlet x: UInt8 = 100\nlet y: UInt8 = 20\nlet result = x.multipliedFullWidth(by: y)\n// result.high == 0b00000111\n// result.low  == 0b11010000\n\n\nThe product of x and y is 2000, which is too large to represent in a UInt8 instance. The high and low properties of the result value represent 2000 when concatenated to form a double-width integer; that is, using result.high as the high byte and result.low as the low byte of a UInt16 instance.\n\nlet z = UInt16(result.high) << 8 | UInt16(result.low)\n// z == 2000\n"
  },
  {
    "title": "dividingFullWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/dividingfullwidth(_:)",
    "html": "Parameters\ndividend\n\nA tuple containing the high and low parts of a double-width integer. The high component of the value carries the sign, if the type is signed.\n\nReturn Value\n\nA tuple containing the quotient and remainder of dividend divided by this value.\n\nDiscussion\n\nThe resulting quotient must be representable within the bounds of the type. If the quotient of dividing dividend by this value is too large to represent in the type, a runtime error may occur."
  },
  {
    "title": "addingReportingOverflow(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/addingreportingoverflow(_:)",
    "html": "Parameters\nrhs\n\nThe value to add to this value.\n\nReturn Value\n\nA tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire sum. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated sum of this value and rhs."
  },
  {
    "title": "trailingZeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/trailingzerobitcount",
    "html": "Discussion\n\nFor example, the number -8 has three trailing zeros.\n\nlet x = Int8(bitPattern: 0b1111_1000)\n// x == -8\n// x.trailingZeroBitCount == 3\n"
  },
  {
    "title": "dividedReportingOverflow(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/dividedreportingoverflow(by:)",
    "html": "Parameters\nrhs\n\nThe value to divide this value by.\n\nReturn Value\n\nA tuple containing the result of the division along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire quotient. If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend.\n\nDiscussion\n\nDividing by zero is not an error when using this method. For a value x, the result of x.dividedReportingOverflow(by: 0) is (x, true)."
  },
  {
    "title": "nonzeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/nonzerobitcount",
    "html": "Discussion\n\nFor example, in a fixed-width integer type with a bitWidth value of 8, the number 31 has five bits equal to 1.\n\nlet x: Int8 = 0b0001_1111\n// x == 31\n// x.nonzeroBitCount == 5\n"
  },
  {
    "title": "leadingZeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/leadingzerobitcount",
    "html": "Discussion\n\nFor example, in an integer type with a bitWidth value of 8, the number 31 has three leading zeros.\n\nlet x: Int8 = 0b0001_1111\n// x == 31\n// x.leadingZeroBitCount == 3\n"
  },
  {
    "title": "&<<=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/&__=(_:_:)-p2fc",
    "html": "Parameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nThe &<<= operator performs a masking shift, where the value used as rhs is masked to produce a value in the range 0..<lhs.bitWidth. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nvar x: UInt8 = 30                 // 0b00011110\nx &<<= 2\n// x == 120                       // 0b01111000\n\n\nHowever, if you pass 19 as rhs, the method first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.\n\nvar y: UInt8 = 30                 // 0b00011110\ny &<<= 19\n// y == 240                       // 0b11110000\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/init(_:)-71bjo",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/+=(_:_:)-38bug",
    "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDiscussion\n\nThe sum of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 + 120 is greater than the maximum representable Int8 value:\n\nvar x: Int8 = 21\nx += 120\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/_=(_:_:)-7dm2a",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise XOR operation, also known as an exclusive OR operation, results in a value that has each bit set to 1 where one or the other but not both of its arguments had that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx ^= y                    // 0b00001011\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/init(_:)-6bhfg",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "%=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/_=(_:_:)-20phr",
    "html": "Parameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nThe result has the same sign as lhs and has a magnitude less than rhs.magnitude.\n\nvar x = 22\nx %= 5\n// x == 2\n\n\nvar y = 22\ny %= -5\n// y == 2\n\n\nvar z = -22\nz %= -5\n// z == -2\n"
  },
  {
    "title": "<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/_(_:_:)-1zzq5",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nThis function is the only requirement of the Comparable protocol. The remainder of the relational operator functions are implemented by the standard library for any type that conforms to Comparable."
  },
  {
    "title": "|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/_=(_:_:)-3oy72",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise OR operation results in a value that has each bit set to 1 where one or both of its arguments have that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx |= y                    // 0b00001111\n"
  },
  {
    "title": "&<<=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/&__=(_:_:)-5hags",
    "html": "Parameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nThe &<<= operator performs a masking shift, where the value used as rhs is masked to produce a value in the range 0..<lhs.bitWidth. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nvar x: UInt8 = 30                 // 0b00011110\nx &<<= 2\n// x == 120                       // 0b01111000\n\n\nHowever, if you pass 19 as rhs, the method first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.\n\nvar y: UInt8 = 30                 // 0b00011110\ny &<<= 19\n// y == 240                       // 0b11110000\n"
  },
  {
    "title": "&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/&=(_:_:)",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise AND operation results in a value that has each bit set to 1 where both of its arguments have that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx &= y                    // 0b00000100\n"
  },
  {
    "title": "%=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/_=(_:_:)-85oek",
    "html": "Parameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nThe result has the same sign as lhs and has a magnitude less than rhs.magnitude.\n\nvar x = 22\nx %= 5\n// x == 2\n\n\nvar y = 22\ny %= -5\n// y == 2\n\n\nvar z = -22\nz %= -5\n// z == -2\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(_:)-117g",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint/init(_:)-7mzx8",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequence/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc distance(from: Self.Index, to: Self.Index) -> Int\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc index(Self.Index, offsetBy: Int) -> Self.Index\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nfunc index(before: LazySequence<Base>.Index) -> LazySequence<Base>.Index\nReturns the position immediately before the given index.\nAvailable when Base conforms to BidirectionalCollection.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element is String.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequence/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nAvailable when Base conforms to Sequence.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequence/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequence/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar count: Int\nReturns the number of elements.\nAvailable when Base conforms to Collection.\nvar endIndex: LazySequence<Base>.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nAvailable when Base conforms to Collection.\nvar indices: LazySequence<Base>.Indices\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Base conforms to Collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nAvailable when Base conforms to Collection.\nvar startIndex: LazySequence<Base>.Index\nThe position of the first element in a non-empty collection.\nAvailable when Base conforms to Collection.\nInstance Methods\nfunc distance(from: Self.Index, to: Self.Index) -> Int\nReturns the distance between two indices.\nfunc distance(from: LazySequence<Base>.Index, to: LazySequence<Base>.Index) -> Int\nReturns the distance between two indices.\nAvailable when Base conforms to Collection.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(Self.Index, offsetBy: Int) -> Self.Index\nReturns an index that is the specified distance from the given index.\nfunc index(LazySequence<Base>.Index, offsetBy: Int) -> LazySequence<Base>.Index\nReturns an index that is the specified distance from the given index.\nAvailable when Base conforms to Collection.\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(LazySequence<Base>.Index, offsetBy: Int, limitedBy: LazySequence<Base>.Index) -> LazySequence<Base>.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nAvailable when Base conforms to Collection.\nfunc index(after: LazySequence<Base>.Index) -> LazySequence<Base>.Index\nReturns the position immediately after the given index.\nAvailable when Base conforms to Collection.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> LazySequence<Base>.Iterator\nReturns an iterator over the elements of the collection.\nAvailable when Base conforms to Sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript(LazySequence<Base>.Index) -> LazySequence<Base>.Element\nAccesses the element at position.\nAvailable when Base conforms to Collection.\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript(Range<Self.Index>) -> Slice<Self>\nAccesses a contiguous subrange of the collection’s elements.\nAvailable when SubSequence is Slice<Self>.\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nType Aliases\ntypealias Index\nA type that represents a valid position in the collection.\nAvailable when Base conforms to Collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\nAvailable when Base conforms to Collection.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to Sequence.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection.\nAvailable when Base conforms to Collection."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/opaquepointer/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "LazySequenceProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazysequence/lazysequenceprotocol-implementations",
    "html": "Topics\nInstance Properties\nvar elements: LazySequence<Base>.Elements\nThe Base (presumably non-lazy) sequence from which self was created.\nAvailable when Base conforms to Sequence.\nvar lazy: LazySequence<Self.Elements>\nInstance Methods\nfunc compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>\nReturns a lazy sequence that skips any initial elements that satisfy predicate.\nfunc filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>\nReturns the elements of self that satisfy isIncluded.\nfunc flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>\nReturns the concatenated results of mapping the given transformation over this sequence.\nfunc joined() -> LazySequence<FlattenSequence<Self.Elements>>\nReturns a lazy sequence that concatenates the elements of this sequence of sequences.\nAvailable when Element conforms to Sequence.\nfunc map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>\nReturns a LazyMapSequence over this Sequence. The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.\nfunc prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>\nReturns a lazy sequence of the initial consecutive elements that satisfy predicate.\nType Aliases\ntypealias Elements\nA Sequence that can contain the same elements as this one, possibly with a simpler type.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "withUnsafeCurrentTask(body:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/withunsafecurrenttask(body:)",
    "html": "Parameters\nbody\n\nA closure that takes an UnsafeCurrentTask parameter. If body has a return value, that value is also used as the return value for the withUnsafeCurrentTask(body:) function.\n\nReturn Value\n\nThe return value, if any, of the body closure.\n\nDiscussion\n\nIf you call this function from the body of an asynchronous function, the unsafe task handle passed to the closure is always non-nil because an asynchronous function always runs in the context of a task. However, if you call this function from the body of a synchronous function, and that function isn’t executing in the context of any task, the unsafe task handle is nil.\n\nDon’t store an unsafe task reference for use outside this method’s closure. Storing an unsafe reference doesn’t affect the task’s actual life cycle, and the behavior of accessing an unsafe task reference outside of the withUnsafeCurrentTask(body:) method’s closure isn’t defined. There’s no safe way to retrieve a reference to the current task and save it for long-term use. To query the current task without saving a reference to it, use properties like currentPriority. If you need to store a reference to a task, create an unstructured task using Task.detached(priority:operation:) instead."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecurrenttask/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "sleep(for:tolerance:clock:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/sleep(for:tolerance:clock:)",
    "html": "Discussion\n\nIf the task is cancelled before the time ends, this function throws CancellationError.\n\nThis function doesn’t block the underlying thread.\n\n  try await Task.sleep(for: .seconds(3))\n"
  },
  {
    "title": "withCancellationHandler(handler:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/withcancellationhandler(handler:operation:)",
    "html": "Deprecated\n\n`Task.withCancellationHandler` has been replaced by `withTaskCancellationHandler` and will be removed shortly.\n\nSee Also\nDeprecated\ntypealias Group\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Handle\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Priority\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func CancellationError() -> CancellationError\nAvailable when Success is Never and Failure is Never.\nDeprecated\nfunc getResult() async -> Result<Success, Failure>\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc get() async throws -> Success\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nstatic func sleep(UInt64) async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func suspend() async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func runDetached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nAvailable when Success conforms to Sendable and Failure is Error.\nDeprecated"
  },
  {
    "title": "CancellationError() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/cancellationerror()",
    "html": "Deprecated\n\nTask.CancellationError has been removed; use CancellationError\n\nSee Also\nDeprecated\ntypealias Group\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Handle\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Priority\nAvailable when Success is Never and Failure is Never.\nDeprecated\nfunc getResult() async -> Result<Success, Failure>\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc get() async throws -> Success\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nstatic func sleep(UInt64) async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func suspend() async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func runDetached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nAvailable when Success conforms to Sendable and Failure is Error.\nDeprecated\nstatic func withCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nAvailable when Success is Never and Failure is Never.\nDeprecated"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/init(_:)-86c9y",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/init(exactly:)-1laz5",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/init(_:)-8hpyb",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/hashable-implementations",
    "html": "Topics\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func < (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/!=(_:_:)-1bazr",
    "html": "See Also\nComparing Pointers\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/==(_:_:)-4wfti",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nComparing Pointers\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "pointee | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/pointee",
    "html": "Discussion\n\nAutoreleasingUnsafeMutablePointer is assumed to reference a value with __autoreleasing ownership semantics, like NSFoo ** declarations in ARC. Setting the pointee autoreleases the new value before trivially storing it in the referenced memory.\n\nPrecondition\n\nthe pointee has been initialized with an instance of type Pointee.\n\nSee Also\nAccessing a Pointer’s Memory\nsubscript(Int) -> Pointee\nAccess the ith element of the raw array pointed to by self."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/subscript(_:)",
    "html": "Overview\n\nPrecondition\n\nself != nil.\n\nSee Also\nAccessing a Pointer’s Memory\nvar pointee: Pointee\nRetrieve or set the Pointee instance referenced by self."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/init(_:)-7rndr",
    "html": "Discussion\n\nReturns nil if from is nil.\n\nThis is inherently unsafe; UnsafeMutablePointer assumes the referenced memory has +1 strong ownership semantics, whereas AutoreleasingUnsafeMutablePointer implies +0 semantics.\n\nWarning\n\nAccessing pointee as a type that is unrelated to the underlying memory’s bound type is undefined.\n\nSee Also\nConverting Pointers\ninit<U>(UnsafeMutablePointer<U>)\nExplicit construction from an UnsafeMutablePointer."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/opaquepointer/init(_:)-8cjza",
    "html": "Discussion\n\nThe result is nil if from is nil."
  },
  {
    "title": "BinaryInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/binaryinteger-implementations",
    "html": "Topics\nOperators\nstatic func != <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the two given values are not equal.\nstatic func != (Self, Self) -> Bool\nstatic func & (Self, Self) -> Self\nReturns the result of performing a bitwise AND operation on the two given values.\nstatic func & (UInt64, UInt64) -> UInt64\nReturns the result of performing a bitwise AND operation on the two given values.\nstatic func * (UInt64, UInt64) -> UInt64\nMultiplies two values and produces their product.\nstatic func + (UInt64, UInt64) -> UInt64\nAdds two values and produces their sum.\nstatic func - (UInt64, UInt64) -> UInt64\nSubtracts one value from another and produces their difference.\nstatic func / (UInt64, UInt64) -> UInt64\nReturns the quotient of dividing the first value by the second.\nstatic func == <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the two given values are equal.\nstatic func ^ (Self, Self) -> Self\nReturns the result of performing a bitwise XOR operation on the two given values.\nstatic func | (Self, Self) -> Self\nReturns the result of performing a bitwise OR operation on the two given values.\nstatic func ^ (UInt64, UInt64) -> UInt64\nReturns the result of performing a bitwise XOR operation on the two given values.\nstatic func % (UInt64, UInt64) -> UInt64\nReturns the remainder of dividing the first value by the second.\nstatic func | (UInt64, UInt64) -> UInt64\nReturns the result of performing a bitwise OR operation on the two given values.\nstatic func < <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func > <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func <= <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func >> <RHS>(Self, RHS) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right.\nstatic func << <RHS>(Self, RHS) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left.\nstatic func >>= <Other>(inout Self, Other)\nStores the result of shifting a value’s binary representation the specified number of digits to the right in the left-hand-side variable.\nstatic func <<= <Other>(inout Self, Other)\nStores the result of shifting a value’s binary representation the specified number of digits to the left in the left-hand-side variable.\nInitializers\ninit()\nCreates a new value equal to zero.\ninit(String, format: IntegerFormatStyle<Self>, lenient: Bool) throws\ninit(String, format: IntegerFormatStyle<Self>.Currency, lenient: Bool) throws\ninit(String, format: IntegerFormatStyle<Self>.Percent, lenient: Bool) throws\ninit<S>(S.ParseInput, strategy: S) throws\nInitialize an instance by parsing value with the given strategy.\ninit<S>(S.ParseInput, strategy: S) throws\nInstance Properties\nvar description: String\nA textual representation of this value.\nInstance Methods\nfunc advanced(by: Int) -> Self\nReturns a value that is offset the specified distance from this value.\nfunc distance(to: Self) -> Int\nReturns the distance from this value to the given value, expressed as a stride.\nfunc formatted() -> String\nFormat self using IntegerFormatStyle()\nfunc formatted<S>(S) -> S.FormatOutput\nFormat self with the given format.\nfunc formatted<S>(S) -> S.FormatOutput\nFormat self with the given format. self is first converted to S.FormatInput type, then format with the given format.\nfunc isMultiple(of: Self) -> Bool\nReturns true if this value is a multiple of the given value, and false otherwise.\nfunc quotientAndRemainder(dividingBy: Self) -> (quotient: Self, remainder: Self)\nReturns the quotient and remainder of this value divided by the given value."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func < (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func > (UInt64, UInt64) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (UInt64, UInt64) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (UInt64, UInt64) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "subtractingReportingOverflow(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/subtractingreportingoverflow(_:)",
    "html": "Parameters\nrhs\n\nThe value to subtract from this value.\n\nReturn Value\n\nA tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire difference. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated result of rhs subtracted from this value."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nA mirror that reflects the UInt64 instance."
  },
  {
    "title": "AdditiveArithmetic Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/additivearithmetic-implementations",
    "html": "Topics\nOperators\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func += (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func -= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable.\nType Properties\nstatic var zero: Self\nThe zero value.\nAvailable when Self conforms to ExpressibleByIntegerLiteral."
  },
  {
    "title": "/=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64//=(_:_:)",
    "html": "Parameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nFor integer types, any remainder of the division is discarded.\n\nvar x = 21\nx /= 5\n// x == 4\n"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/==(_:_:)-7a0u0",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "&>>=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/&__=(_:_:)-9z0pp",
    "html": "Parameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nThe &>>= operator performs a masking shift, where the value passed as rhs is masked to produce a value in the range 0..<lhs.bitWidth. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nvar x: UInt8 = 30                 // 0b00011110\nx &>>= 2\n// x == 7                         // 0b00000111\n\n\nHowever, if you use 19 as rhs, the operation first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.\n\nvar y: UInt8 = 30                 // 0b00011110\ny &>>= 19\n// y == 3                         // 0b00000011\n"
  },
  {
    "title": "-=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/-=(_:_:)-994ek",
    "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDiscussion\n\nThe difference of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 - 50 is less than zero, the minimum representable UInt8 value:\n\nvar x: UInt8 = 21\nx - 50\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "*=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/*=(_:_:)",
    "html": "Parameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply.\n\nDiscussion\n\nThe product of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 * 21 is greater than the maximum representable Int8 value:\n\nvar x: Int8 = 21\nx * 21\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "Task.Group | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/group",
    "html": "Deprecated\n\n`Task.Group` was replaced by `ThrowingTaskGroup` and `TaskGroup` and will be removed shortly.\n\nSee Also\nDeprecated\ntypealias Handle\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Priority\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func CancellationError() -> CancellationError\nAvailable when Success is Never and Failure is Never.\nDeprecated\nfunc getResult() async -> Result<Success, Failure>\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc get() async throws -> Success\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nstatic func sleep(UInt64) async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func suspend() async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func runDetached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nAvailable when Success conforms to Sendable and Failure is Error.\nDeprecated\nstatic func withCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nAvailable when Success is Never and Failure is Never.\nDeprecated"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future.\n\nSee Also\nComparing Tasks\nstatic func == (Task<Success, Failure>, Task<Success, Failure>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nstatic func != (Self, Self) -> Bool\nvar hashValue: Int\nThe hash value.\nAvailable when Success conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/!=(_:_:)",
    "html": "See Also\nComparing Tasks\nstatic func == (Task<Success, Failure>, Task<Success, Failure>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nvar hashValue: Int\nThe hash value.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Success conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/opaquepointer/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of the pointer, suitable for debugging."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/opaquepointer/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (OpaquePointer, OpaquePointer) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "isCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecurrenttask/iscancelled",
    "html": "Discussion\n\nAfter the value of this property becomes true, it remains true indefinitely. There is no way to uncancel a task.\n\nSee Also\n\ncheckCancellation()"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Task<Success, Failure>, Task<Success, Failure>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Success conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "withGroup(resultType:returning:body:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/withgroup(resulttype:returning:body:)",
    "html": "Deprecated\n\n`Task.withGroup` was replaced by `withThrowingTaskGroup` and `withTaskGroup` and will be removed shortly."
  },
  {
    "title": "sleep(until:tolerance:clock:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/sleep(until:tolerance:clock:)",
    "html": "Discussion\n\nIf the task is canceled before the time ends, this function throws CancellationError.\n\nThis function doesn’t block the underlying thread.\n\n  try await Task.sleep(until: .now + .seconds(3))\n"
  },
  {
    "title": "get() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/get()-4ohks",
    "html": "Deprecated\n\nget() has been replaced by .value"
  },
  {
    "title": "suspend() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/suspend()",
    "html": "See Also\nDeprecated\ntypealias Group\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Handle\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Priority\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func CancellationError() -> CancellationError\nAvailable when Success is Never and Failure is Never.\nDeprecated\nfunc getResult() async -> Result<Success, Failure>\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc get() async throws -> Success\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nstatic func sleep(UInt64) async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func runDetached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nAvailable when Success conforms to Sendable and Failure is Error.\nDeprecated\nstatic func withCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nAvailable when Success is Never and Failure is Never.\nDeprecated"
  },
  {
    "title": "getResult() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/getresult()",
    "html": "Deprecated\n\ngetResult() has been replaced by .result\n\nSee Also\nDeprecated\ntypealias Group\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Handle\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Priority\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func CancellationError() -> CancellationError\nAvailable when Success is Never and Failure is Never.\nDeprecated\nfunc get() async throws -> Success\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nstatic func sleep(UInt64) async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func suspend() async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func runDetached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nAvailable when Success conforms to Sendable and Failure is Error.\nDeprecated\nstatic func withCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nAvailable when Success is Never and Failure is Never.\nDeprecated"
  },
  {
    "title": "sleep(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/sleep(_:)",
    "html": "See Also\nDeprecated\ntypealias Group\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Handle\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Priority\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func CancellationError() -> CancellationError\nAvailable when Success is Never and Failure is Never.\nDeprecated\nfunc getResult() async -> Result<Success, Failure>\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc get() async throws -> Success\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nstatic func suspend() async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func runDetached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nAvailable when Success conforms to Sendable and Failure is Error.\nDeprecated\nstatic func withCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nAvailable when Success is Never and Failure is Never.\nDeprecated"
  },
  {
    "title": "get() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/get()-4i2gt",
    "html": "Deprecated\n\nget() has been replaced by .value\n\nSee Also\nDeprecated\ntypealias Group\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Handle\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Priority\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func CancellationError() -> CancellationError\nAvailable when Success is Never and Failure is Never.\nDeprecated\nfunc getResult() async -> Result<Success, Failure>\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nstatic func sleep(UInt64) async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func suspend() async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func runDetached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nAvailable when Success conforms to Sendable and Failure is Error.\nDeprecated\nstatic func withCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nAvailable when Success is Never and Failure is Never.\nDeprecated"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/init(exactly:)-92on5",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/init(exactly:)-gsjs",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/suffix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence terminating at the end of the collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains the entire collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint64/init(exactly:)-4pdnv",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "_Pointer Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/_pointer-implementations",
    "html": "Topics\nOperators\nstatic func != <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether two pointers represent different memory addresses.\nstatic func == <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether two pointers represent the same memory address.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two pointers are equal.\nstatic func < <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the first pointer references a memory location earlier than the second pointer references.\nstatic func < (Self, Self) -> Bool\nReturns a Boolean value indicating whether the first pointer references a memory location earlier than the second pointer references.\nstatic func > <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the first pointer references a memory location later than the second pointer references.\nstatic func <= <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the first pointer references a memory location earlier than or same as the second pointer references.\nstatic func >= <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the first pointer references a memory location later than or same as the second pointer references.\nInitializers\ninit(OpaquePointer)\nCreates a new typed pointer from the given opaque pointer.\ninit?(Self?)\nCreates a new pointer from the given pointer.\ninit(Self)\nCreates a new pointer from the given pointer.\ninit?(OpaquePointer?)\nCreates a new typed pointer from the given opaque pointer.\ninit?(bitPattern: Int)\nCreates a new pointer from the given address, specified as a bit pattern.\ninit?(bitPattern: UInt)\nCreates a new pointer from the given address, specified as a bit pattern.\nInstance Properties\nvar debugDescription: String\nA textual representation of the pointer, suitable for debugging.\nInstance Methods\nfunc advanced(by: Int) -> Self\nReturns a pointer offset from this pointer by the specified number of instances.\nfunc distance(to: Self) -> Int\nReturns the distance from this pointer to the given pointer, counted as instances of the pointer’s Pointee type.\nfunc predecessor() -> Self\nReturns a pointer to the previous consecutive instance.\nfunc successor() -> Self\nReturns a pointer to the next consecutive instance."
  },
  {
    "title": "Strideable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/strideable-implementations",
    "html": "Topics\nOperators\nstatic func + (Self, Self.Stride) -> Self\nAvailable when Self conforms to _Pointer.\nstatic func + (Self.Stride, Self) -> Self\nAvailable when Self conforms to _Pointer.\nstatic func += (inout Self, Self.Stride)\nAvailable when Self conforms to _Pointer.\nstatic func - (Self, Self) -> Self.Stride\nAvailable when Self conforms to _Pointer.\nstatic func - (Self, Self.Stride) -> Self\nAvailable when Self conforms to _Pointer.\nstatic func -= (inout Self, Self.Stride)\nAvailable when Self conforms to _Pointer."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/autoreleasingunsafemutablepointer/init(_:)-4mrz1",
    "html": "Discussion\n\nThis is inherently unsafe; UnsafeMutablePointer assumes the referenced memory has +1 strong ownership semantics, whereas AutoreleasingUnsafeMutablePointer implies +0 semantics.\n\nWarning\n\nAccessing pointee as a type that is unrelated to the underlying memory’s bound type is undefined.\n\nSee Also\nConverting Pointers\ninit?<U>(UnsafeMutablePointer<U>?)\nExplicit construction from an UnsafeMutablePointer."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func < (String.Index, String.Index) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/intentinputoptions/keyboardtype-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "reversed() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/reversed()",
    "html": "Discussion\n\nComplexity\n\nO(1)"
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/index/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Base conforms to BidirectionalCollection and Base.Index conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Base conforms to BidirectionalCollection and Base.Index conforms to Hashable."
  },
  {
    "title": "formIndex(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/formindex(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex."
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/distance(from:to:)",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nUnless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance."
  },
  {
    "title": "Task.Priority | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/priority",
    "html": "Deprecated\n\nTask.Priority has been removed; use TaskPriority\n\nSee Also\nDeprecated\ntypealias Group\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Handle\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func CancellationError() -> CancellationError\nAvailable when Success is Never and Failure is Never.\nDeprecated\nfunc getResult() async -> Result<Success, Failure>\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc get() async throws -> Success\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nstatic func sleep(UInt64) async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func suspend() async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func runDetached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nAvailable when Success conforms to Sendable and Failure is Error.\nDeprecated\nstatic func withCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nAvailable when Success is Never and Failure is Never.\nDeprecated"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you.\n\nSee Also\nComparing Tasks\nstatic func == (Task<Success, Failure>, Task<Success, Failure>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nstatic func != (Self, Self) -> Bool\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Success conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "Task.Handle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/handle",
    "html": "Deprecated\n\nTask.Handle has been removed; use Task\n\nSee Also\nDeprecated\ntypealias Group\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Priority\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func CancellationError() -> CancellationError\nAvailable when Success is Never and Failure is Never.\nDeprecated\nfunc getResult() async -> Result<Success, Failure>\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc get() async throws -> Success\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nstatic func sleep(UInt64) async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func suspend() async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func runDetached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nAvailable when Success conforms to Sendable and Failure is Error.\nDeprecated\nstatic func withCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nAvailable when Success is Never and Failure is Never.\nDeprecated"
  },
  {
    "title": "withTaskCancellationHandler(operation:onCancel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/withtaskcancellationhandler(operation:oncancel:)",
    "html": "Discussion\n\nThis differs from the operation cooperatively checking for cancellation and reacting to it in that the cancellation handler is always and immediately invoked when the task is canceled. For example, even if the operation is running code that never checks for cancellation, a cancellation handler still runs and provides a chance to run some cleanup code.\n\nDoesn’t check for cancellation, and always executes the passed operation.\n\nThe operation executes on the calling execution context and does not suspend by itself, unless the code contained within the closure does. If cancellation occurs while the operation is running, the cancellation handler will execute concurrently with the operation.\n\nAlready cancelled tasks\n\nWhen withTaskCancellationHandler is used in a Task that has already been cancelled, the onCancel cancellation handler will be executed immediately before operation gets to execute. This allows the cancellation handler to set some external “cancelled” flag that the operation may be atomically checking for in order to avoid performing any actual work once the operation gets to run.\n\nSee Also\nCanceling Tasks\nstruct CancellationError\nAn error that indicates a task was canceled.\nfunc cancel()\nIndicates that the task should stop running.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nvar isCancelled: Bool\nA Boolean value that indicates whether the task should stop executing.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nstatic var isCancelled: Bool\nA Boolean value that indicates whether the task should stop executing.\nAvailable when Success is Never and Failure is Never.\nstatic func checkCancellation() throws\nThrows an error if the task was canceled.\nAvailable when Success is Never and Failure is Never.\nfunc withTaskCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nDeprecated"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nComparing Tasks\nstatic func != (Self, Self) -> Bool\nvar hashValue: Int\nThe hash value.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Success conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "sleep(nanoseconds:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/sleep(nanoseconds:)",
    "html": "Discussion\n\nIf the task is canceled before the time ends, this function throws CancellationError.\n\nThis function doesn’t block the underlying thread.\n\nSee Also\nSuspending Execution\nstatic func yield() async\nSuspends the current task and allows other tasks to execute.\nAvailable when Success is Never and Failure is Never."
  },
  {
    "title": "withTaskCancellationHandler(handler:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/withtaskcancellationhandler(handler:operation:)",
    "html": "See Also\nCanceling Tasks\nstruct CancellationError\nAn error that indicates a task was canceled.\nfunc cancel()\nIndicates that the task should stop running.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nvar isCancelled: Bool\nA Boolean value that indicates whether the task should stop executing.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nstatic var isCancelled: Bool\nA Boolean value that indicates whether the task should stop executing.\nAvailable when Success is Never and Failure is Never.\nstatic func checkCancellation() throws\nThrows an error if the task was canceled.\nAvailable when Success is Never and Failure is Never.\nfunc withTaskCancellationHandler<T>(operation: () async throws -> T, onCancel: () -> Void) async rethrows -> T\nExecute an operation with a cancellation handler that’s immediately invoked if the current task is canceled."
  },
  {
    "title": "yield() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/yield()",
    "html": "Discussion\n\nA task can voluntarily suspend itself in the middle of a long-running operation that doesn’t contain any suspension points, to let other tasks run for a while before execution returns to this task.\n\nIf this task is the highest-priority task in the system, the executor immediately resumes execution of the same task. As such, this method isn’t necessarily a way to avoid resource starvation.\n\nSee Also\nSuspending Execution\nstatic func sleep(nanoseconds: UInt64) async throws\nSuspends the current task for at least the given duration in nanoseconds.\nAvailable when Success is Never and Failure is Never."
  },
  {
    "title": "checkCancellation() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/checkcancellation()",
    "html": "Discussion\n\nThe error is always an instance of CancellationError.\n\nSee Also\n\nisCancelled()\n\nSee Also\nCanceling Tasks\nstruct CancellationError\nAn error that indicates a task was canceled.\nfunc cancel()\nIndicates that the task should stop running.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nvar isCancelled: Bool\nA Boolean value that indicates whether the task should stop executing.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nstatic var isCancelled: Bool\nA Boolean value that indicates whether the task should stop executing.\nAvailable when Success is Never and Failure is Never.\nfunc withTaskCancellationHandler<T>(operation: () async throws -> T, onCancel: () -> Void) async rethrows -> T\nExecute an operation with a cancellation handler that’s immediately invoked if the current task is canceled.\nfunc withTaskCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nDeprecated"
  },
  {
    "title": "value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/value-40dtq",
    "html": "Discussion\n\nIf the task hasn’t completed yet, accessing this property waits for it to complete and its priority increases to that of the current task. Note that this might not be as effective as creating the task with the correct priority, depending on the executor’s scheduling details.\n\nTasks that never throw an error can still check for cancellation, but they need to use an approach like returning nil instead of throwing an error.\n\nSee Also\nAccessing Results\nvar value: Success\nThe result from a throwing task, after it completes.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nvar result: Result<Success, Failure>\nThe result or error from a throwing task, after it completes.\nAvailable when Success conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/value-60t02",
    "html": "Return Value\n\nThe task’s result.\n\nDiscussion\n\nIf the task hasn’t completed, accessing this property waits for it to complete and its priority increases to that of the current task. Note that this might not be as effective as creating the task with the correct priority, depending on the executor’s scheduling details.\n\nIf the task throws an error, this property propagates that error. Tasks that respond to cancellation by throwing CancellationError have that error propagated here upon cancellation.\n\nSee Also\nAccessing Results\nvar value: Success\nThe result from a nonthrowing task, after it completes.\nAvailable when Success conforms to Sendable and Failure is Never.\nvar result: Result<Success, Failure>\nThe result or error from a throwing task, after it completes.\nAvailable when Success conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "runDetached(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/rundetached(priority:operation:)",
    "html": "Deprecated\n\n`Task.runDetached` was replaced by `Task.detached` and will be removed shortly.\n\nSee Also\nDeprecated\ntypealias Group\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Handle\nAvailable when Success is Never and Failure is Never.\nDeprecated\ntypealias Priority\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func CancellationError() -> CancellationError\nAvailable when Success is Never and Failure is Never.\nDeprecated\nfunc getResult() async -> Result<Success, Failure>\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nfunc get() async throws -> Success\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nDeprecated\nstatic func sleep(UInt64) async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func suspend() async\nAvailable when Success is Never and Failure is Never.\nDeprecated\nstatic func withCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nAvailable when Success is Never and Failure is Never.\nDeprecated"
  },
  {
    "title": "init(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/init(priority:operation:)-5k89c",
    "html": "Parameters\npriority\n\nThe priority of the task. Pass nil to use the priority from Task.currentPriority.\n\noperation\n\nThe operation to perform.\n\nDiscussion\n\nUse this function when creating asynchronous work that operates on behalf of the synchronous function that calls it. Like Task.detached(priority:operation:), this function creates a separate, top-level task. Unlike detach(priority:operation:), the task created by Task.init(priority:operation:) inherits the priority and actor context of the caller, so the operation is treated more like an asynchronous extension to the synchronous operation.\n\nYou need to keep a reference to the task if you want to cancel it by calling the Task.cancel() method. Discarding your reference to a detached task doesn’t implicitly cancel that task, it only makes it impossible for you to explicitly cancel the task.\n\nSee Also\nCreating a Task\ninit(priority: TaskPriority?, operation: () async -> Success)\nRuns the given nonthrowing operation asynchronously as part of a new top-level task on behalf of the current actor.\nAvailable when Success conforms to Sendable and Failure is Never.\nstatic func detached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nRuns the given throwing operation asynchronously as part of a new top-level task.\nAvailable when Success conforms to Sendable and Failure is Error.\nstatic func detached(priority: TaskPriority?, operation: () async -> Success) -> Task<Success, Failure>\nRuns the given nonthrowing operation asynchronously as part of a new top-level task.\nAvailable when Success conforms to Sendable and Failure is Never.\nstatic var currentPriority: TaskPriority\nThe current task’s priority.\nAvailable when Success is Never and Failure is Never."
  },
  {
    "title": "currentPriority | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/currentpriority",
    "html": "Discussion\n\nIf you access this property outside of any task, this queries the system to determine the priority at which the current function is running. If the system can’t provide a priority, this property’s value is Priority.default.\n\nSee Also\nCreating a Task\ninit(priority: TaskPriority?, operation: () async -> Success)\nRuns the given nonthrowing operation asynchronously as part of a new top-level task on behalf of the current actor.\nAvailable when Success conforms to Sendable and Failure is Never.\ninit(priority: TaskPriority?, operation: () async throws -> Success)\nRuns the given throwing operation asynchronously as part of a new top-level task on behalf of the current actor.\nAvailable when Success conforms to Sendable and Failure is Error.\nstatic func detached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nRuns the given throwing operation asynchronously as part of a new top-level task.\nAvailable when Success conforms to Sendable and Failure is Error.\nstatic func detached(priority: TaskPriority?, operation: () async -> Success) -> Task<Success, Failure>\nRuns the given nonthrowing operation asynchronously as part of a new top-level task.\nAvailable when Success conforms to Sendable and Failure is Never."
  },
  {
    "title": "detached(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/detached(priority:operation:)-8a4p6",
    "html": "Parameters\npriority\n\nThe priority of the task.\n\noperation\n\nThe operation to perform.\n\nReturn Value\n\nA reference to the task.\n\nDiscussion\n\nIf the operation throws an error, this method propagates that error.\n\nDon’t use a detached task if it’s possible to model the operation using structured concurrency features like child tasks. Child tasks inherit the parent task’s priority and task-local storage, and canceling a parent task automatically cancels all of its child tasks. You need to handle these considerations manually with a detached task.\n\nYou need to keep a reference to the detached task if you want to cancel it by calling the Task.cancel() method. Discarding your reference to a detached task doesn’t implicitly cancel that task, it only makes it impossible for you to explicitly cancel the task.\n\nSee Also\nCreating a Task\ninit(priority: TaskPriority?, operation: () async -> Success)\nRuns the given nonthrowing operation asynchronously as part of a new top-level task on behalf of the current actor.\nAvailable when Success conforms to Sendable and Failure is Never.\ninit(priority: TaskPriority?, operation: () async throws -> Success)\nRuns the given throwing operation asynchronously as part of a new top-level task on behalf of the current actor.\nAvailable when Success conforms to Sendable and Failure is Error.\nstatic func detached(priority: TaskPriority?, operation: () async -> Success) -> Task<Success, Failure>\nRuns the given nonthrowing operation asynchronously as part of a new top-level task.\nAvailable when Success conforms to Sendable and Failure is Never.\nstatic var currentPriority: TaskPriority\nThe current task’s priority.\nAvailable when Success is Never and Failure is Never."
  },
  {
    "title": "detached(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/detached(priority:operation:)-3lvix",
    "html": "Parameters\npriority\n\nThe priority of the task.\n\noperation\n\nThe operation to perform.\n\nReturn Value\n\nA reference to the task.\n\nDiscussion\n\nDon’t use a detached task if it’s possible to model the operation using structured concurrency features like child tasks. Child tasks inherit the parent task’s priority and task-local storage, and canceling a parent task automatically cancels all of its child tasks. You need to handle these considerations manually with a detached task.\n\nYou need to keep a reference to the detached task if you want to cancel it by calling the Task.cancel() method. Discarding your reference to a detached task doesn’t implicitly cancel that task, it only makes it impossible for you to explicitly cancel the task.\n\nSee Also\nCreating a Task\ninit(priority: TaskPriority?, operation: () async -> Success)\nRuns the given nonthrowing operation asynchronously as part of a new top-level task on behalf of the current actor.\nAvailable when Success conforms to Sendable and Failure is Never.\ninit(priority: TaskPriority?, operation: () async throws -> Success)\nRuns the given throwing operation asynchronously as part of a new top-level task on behalf of the current actor.\nAvailable when Success conforms to Sendable and Failure is Error.\nstatic func detached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nRuns the given throwing operation asynchronously as part of a new top-level task.\nAvailable when Success conforms to Sendable and Failure is Error.\nstatic var currentPriority: TaskPriority\nThe current task’s priority.\nAvailable when Success is Never and Failure is Never."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (String.Index, String.Index) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "init(priority:operation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/init(priority:operation:)-5ltye",
    "html": "Parameters\npriority\n\nThe priority of the task. Pass nil to use the priority from Task.currentPriority.\n\noperation\n\nThe operation to perform.\n\nDiscussion\n\nUse this function when creating asynchronous work that operates on behalf of the synchronous function that calls it. Like Task.detached(priority:operation:), this function creates a separate, top-level task. Unlike Task.detached(priority:operation:), the task created by Task.init(priority:operation:) inherits the priority and actor context of the caller, so the operation is treated more like an asynchronous extension to the synchronous operation.\n\nYou need to keep a reference to the task if you want to cancel it by calling the Task.cancel() method. Discarding your reference to a detached task doesn’t implicitly cancel that task, it only makes it impossible for you to explicitly cancel the task.\n\nSee Also\nCreating a Task\ninit(priority: TaskPriority?, operation: () async throws -> Success)\nRuns the given throwing operation asynchronously as part of a new top-level task on behalf of the current actor.\nAvailable when Success conforms to Sendable and Failure is Error.\nstatic func detached(priority: TaskPriority?, operation: () async throws -> Success) -> Task<Success, Failure>\nRuns the given throwing operation asynchronously as part of a new top-level task.\nAvailable when Success conforms to Sendable and Failure is Error.\nstatic func detached(priority: TaskPriority?, operation: () async -> Success) -> Task<Success, Failure>\nRuns the given nonthrowing operation asynchronously as part of a new top-level task.\nAvailable when Success conforms to Sendable and Failure is Never.\nstatic var currentPriority: TaskPriority\nThe current task’s priority.\nAvailable when Success is Never and Failure is Never."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecurrenttask/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (UnsafeCurrentTask, UnsafeCurrentTask) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "priority | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecurrenttask/priority",
    "html": "Discussion\n\nSee Also\n\nTaskPriority\n\nSee Also\n\nTask.currentPriority"
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: ReversedCollection<Base>.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nAvailable when Base conforms to BidirectionalCollection.\nvar first: Self.Element?\nThe first element of the collection.\nvar indices: DefaultIndices<Self>\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Indices is DefaultIndices<Self>.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: ReversedCollection<Base>.Index\nThe position of the first element in a nonempty collection.\nAvailable when Base conforms to BidirectionalCollection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript(ReversedCollection<Base>.Index) -> ReversedCollection<Base>.Element\nAccesses the element at the specified position.\nAvailable when Base conforms to BidirectionalCollection.\nType Aliases\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\nAvailable when Base conforms to BidirectionalCollection.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection.\nAvailable when Base conforms to BidirectionalCollection."
  },
  {
    "title": "basePriority | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsafecurrenttask/basepriority",
    "html": "Discussion\n\nSee Also\n\nTaskPriority\n\nSee Also\n\nTask.basePriority"
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Success conforms to Sendable and Failure conforms to Error."
  },
  {
    "title": "_UnicodeEncoding Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf32/_unicodeencoding-implementations",
    "html": "Topics\nType Aliases\ntypealias CodeUnit\nThe basic unit of encoding\ntypealias EncodedScalar\nA valid scalar value as represented in this encoding\ntypealias ForwardParser\nA type that can be used to parse CodeUnits into EncodedScalars.\ntypealias ReverseParser\nA type that can be used to parse a reversed sequence of CodeUnits into EncodedScalars.\nType Properties\nstatic var encodedReplacementCharacter: Unicode.UTF32.EncodedScalar\nA unicode scalar value to be used when repairing encoding/decoding errors, as represented in this encoding.\nType Methods\nstatic func decode(Unicode.UTF32.EncodedScalar) -> Unicode.Scalar\nConverts from encoded to encoding-independent representation\nstatic func encode(Unicode.Scalar) -> Unicode.UTF32.EncodedScalar?\nConverts from encoding-independent to encoded representation, returning nil if the scalar can’t be represented in this encoding.\nstatic func transcode<FromEncoding>(FromEncoding.EncodedScalar, from: FromEncoding.Type) -> Self.EncodedScalar?\nConverts a scalar from another encoding’s representation, returning nil if the scalar can’t be represented in this encoding."
  },
  {
    "title": "basePriority | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/basepriority",
    "html": "Discussion\n\nIf you access this property outside of any task, this returns nil"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf32/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/canonicalcombiningclass/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "samePosition(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/sameposition(in:)-86cct",
    "html": "Parameters\nutf16\n\nThe view to use for the index conversion. This index must be a valid index of at least one view of the string shared by utf16.\n\nReturn Value\n\nThe position in utf16 that corresponds exactly to this index. If this index does not have an exact corresponding position in utf16, this method returns nil. For example, an attempt to convert the position of a UTF-8 continuation byte returns nil.\n\nDiscussion\n\nThe index must be a valid index of String(utf16).\n\nThis example first finds the position of the character \"é\" and then uses this method find the same position in the string’s utf16 view.\n\nlet cafe = \"Café\"\nif let i = cafe.firstIndex(of: \"é\") {\n    let j = i.samePosition(in: cafe.utf16)!\n    print(cafe.utf16[j])\n}\n// Prints \"233\"\n"
  },
  {
    "title": "samePosition(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/sameposition(in:)-3mz95",
    "html": "Parameters\nutf8\n\nThe view to use for the index conversion. This index must be a valid index of at least one view of the string shared by utf8.\n\nReturn Value\n\nThe position in utf8 that corresponds exactly to this index. If this index does not have an exact corresponding position in utf8, this method returns nil. For example, an attempt to convert the position of a UTF-16 trailing surrogate returns nil.\n\nDiscussion\n\nThis example first finds the position of the character \"é\", and then uses this method find the same position in the string’s utf8 view.\n\nlet cafe = \"Café\"\nif let i = cafe.firstIndex(of: \"é\") {\n    let j = i.samePosition(in: cafe.utf8)!\n    print(Array(cafe.utf8[j...]))\n}\n// Prints \"[195, 169]\"\n"
  },
  {
    "title": "init(_:within:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/init(_:within:)-5lb6l",
    "html": "Parameters\nsourcePosition\n\nA position in a String or one of its views.\n\ntarget\n\nThe UTF8View in which to find the new position.\n\nDiscussion\n\nThe following example finds the position of a space in a string’s utf16 view and then converts that position to an index in the string’s utf8 view.\n\nlet cafe = \"Café 🍵\"\n\n\nlet utf16Index = cafe.utf16.firstIndex(of: 32)!\nlet utf8Index = String.UTF8View.Index(utf16Index, within: cafe.utf8)!\n\n\nprint(Array(cafe.utf8[..<utf8Index]))\n// Prints \"[67, 97, 102, 195, 169]\"\n\n\nIf the position passed in utf16Index doesn’t have an exact corresponding position in utf8, the result of the initializer is nil. For example, because UTF-8 and UTF-16 represent high Unicode code points differently, an attempt to convert the position of the trailing surrogate of a UTF-16 surrogate pair fails.\n\nThe next example attempts to convert the indices of the two UTF-16 code points that represent the teacup emoji (\"🍵\"). The index of the lead surrogate is successfully converted to a position in utf8, but the index of the trailing surrogate is not.\n\nlet emojiHigh = cafe.utf16.index(after: utf16Index)\nprint(String.UTF8View.Index(emojiHigh, within: cafe.utf8))\n// Prints \"Optional(String.Index(...))\"\n\n\nlet emojiLow = cafe.utf16.index(after: emojiHigh)\nprint(String.UTF8View.Index(emojiLow, within: cafe.utf8))\n// Prints \"nil\"\n"
  },
  {
    "title": "init(_:within:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/init(_:within:)-7e1rw",
    "html": "Parameters\nsourcePosition\n\nA position in the utf16 view of a string. utf16Index must be an element of String(unicodeScalars).utf16.indices.\n\nunicodeScalars\n\nThe UnicodeScalarView in which to find the new position.\n\nDiscussion\n\nThe following example finds the position of a space in a string’s utf16 view and then converts that position to an index in the string’s unicodeScalars view:\n\nlet cafe = \"Café 🍵\"\n\n\nlet utf16Index = cafe.utf16.firstIndex(of: 32)!\nlet scalarIndex = String.Index(utf16Index, within: cafe.unicodeScalars)!\n\n\nprint(String(cafe.unicodeScalars[..<scalarIndex]))\n// Prints \"Café\"\n\n\nIf the index passed as sourcePosition doesn’t have an exact corresponding position in unicodeScalars, the result of the initializer is nil. For example, an attempt to convert the position of the trailing surrogate of a UTF-16 surrogate pair results in nil."
  },
  {
    "title": "init(_:within:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/init(_:within:)-3eir6",
    "html": "Parameters\nsourcePosition\n\nA position in a view of the target parameter. sourcePosition must be a valid index of at least one of the views of target.\n\ntarget\n\nThe string referenced by the resulting index.\n\nDiscussion\n\nIf the index passed as sourcePosition represents the start of an extended grapheme cluster—the element type of a string—then the initializer succeeds.\n\nThe following example converts the position of the Unicode scalar \"e\" into its corresponding position in the string. The character at that position is the composed \"é\" character.\n\nlet cafe = \"Cafe\\u{0301}\"\nprint(cafe)\n// Prints \"Café\"\n\n\nlet scalarsIndex = cafe.unicodeScalars.firstIndex(of: \"e\")!\nlet stringIndex = String.Index(scalarsIndex, within: cafe)!\n\n\nprint(cafe[...stringIndex])\n// Prints \"Café\"\n\n\nIf the index passed as sourcePosition doesn’t have an exact corresponding position in target, the result of the initializer is nil. For example, an attempt to convert the position of the combining acute accent (\"\\u{0301}\") fails. Combining Unicode scalars do not have their own position in a string.\n\nlet nextScalarsIndex = cafe.unicodeScalars.index(after: scalarsIndex)\nlet nextStringIndex = String.Index(nextScalarsIndex, within: cafe)\n\n\nprint(nextStringIndex)\n// Prints \"nil\"\n"
  },
  {
    "title": "init(_:within:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/init(_:within:)-2txd4",
    "html": "Parameters\nsourcePosition\n\nA position in at least one of the views of the string shared by target.\n\ntarget\n\nThe UTF16View in which to find the new position.\n\nDiscussion\n\nIf the index passed as sourcePosition represents either the start of a Unicode scalar value or the position of a UTF-16 trailing surrogate, then the initializer succeeds. If sourcePosition does not have an exact corresponding position in target, then the result is nil. For example, an attempt to convert the position of a UTF-8 continuation byte results in nil.\n\nThe following example finds the position of a space in a string and then converts that position to an index in the string’s utf16 view.\n\nlet cafe = \"Café 🍵\"\n\n\nlet stringIndex = cafe.firstIndex(of: \"é\")!\nlet utf16Index = String.Index(stringIndex, within: cafe.utf16)!\n\n\nprint(String(cafe.utf16[...utf16Index])!)\n// Prints \"Café\"\n"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/intentinputoptions/keyboardtype-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/intentinputoptions/keyboardtype-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/intentinputoptions/keyboardtype-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/bidirectionalcollection-implementations",
    "html": "Topics\nStructures\nstruct Index\nAn index that traverses the same positions as an underlying index, with inverted traversal direction.\nAvailable when Base conforms to BidirectionalCollection.\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc distance(from: ReversedCollection<Base>.Index, to: ReversedCollection<Base>.Index) -> Int\nReturns the distance between two indices.\nAvailable when Base conforms to BidirectionalCollection.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc index(ReversedCollection<Base>.Index, offsetBy: Int) -> ReversedCollection<Base>.Index\nReturns an index that is the specified distance from the given index.\nAvailable when Base conforms to BidirectionalCollection.\nfunc index(ReversedCollection<Base>.Index, offsetBy: Int, limitedBy: ReversedCollection<Base>.Index) -> ReversedCollection<Base>.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nAvailable when Base conforms to BidirectionalCollection.\nfunc index(after: ReversedCollection<Base>.Index) -> ReversedCollection<Base>.Index\nReturns the position immediately after the given index.\nAvailable when Base conforms to BidirectionalCollection.\nfunc index(before: ReversedCollection<Base>.Index) -> ReversedCollection<Base>.Index\nReturns the position immediately before the given index.\nAvailable when Base conforms to BidirectionalCollection.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element is String.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/index/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func < (ReversedCollection<Base>.Index, ReversedCollection<Base>.Index) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nAvailable when Base conforms to BidirectionalCollection.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/index/init(_:)",
    "html": "Parameters\nbase\n\nThe position after the element to create an index for.\n\nDiscussion\n\nWhen you create an index into a reversed collection using base, an index from the underlying collection, the resulting index is the position of the element before the element referenced by base. The following example creates a new ReversedIndex from the index of the \"a\" character in a string’s character view.\n\nlet name = \"Horatio\"\nlet aIndex = name.firstIndex(of: \"a\")!\n// name[aIndex] == \"a\"\n\n\nlet reversedName = name.reversed()\nlet i = ReversedCollection<String>.Index(aIndex)\n// reversedName[i] == \"r\"\n\n\nThe element at the position created using ReversedIndex<...>(aIndex) is \"r\", the character before \"a\" in the name string."
  },
  {
    "title": "base | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/index/base",
    "html": "Discussion\n\nTo find the position that corresponds with this index in the original, underlying collection, use that collection’s index(before:) method with the base property.\n\nThe following example declares a function that returns the index of the last even number in the passed array, if one is found. First, the function finds the position of the last even number as a ReversedIndex in a reversed view of the array of numbers. Next, the function calls the array’s index(before:) method to return the correct position in the passed array.\n\nfunc indexOfLastEven(_ numbers: [Int]) -> Int? {\n    let reversedNumbers = numbers.reversed()\n    guard let i = reversedNumbers.firstIndex(where: { $0 % 2 == 0 })\n        else { return nil }\n\n\n    return numbers.index(before: i.base)\n}\n\n\nlet numbers = [10, 20, 13, 19, 30, 52, 17, 40, 51]\nif let lastEven = indexOfLastEven(numbers) {\n    print(\"Last even number: \\(numbers[lastEven])\")\n}\n// Prints \"Last even number: 40\"\n"
  },
  {
    "title": "difference(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/difference(from:)",
    "html": "Parameters\nother\n\nThe base state.\n\nReturn Value\n\nThe difference needed to produce this collection’s ordered elements from the given collection.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity\n\nWorst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements, or if Element conforms to Hashable."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/index/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (ReversedCollection<Base>.Index, ReversedCollection<Base>.Index) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Base conforms to BidirectionalCollection."
  },
  {
    "title": "difference(from:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/difference(from:by:)",
    "html": "Parameters\nother\n\nThe base state.\n\nareEquivalent\n\nA closure that returns a Boolean value indicating whether two elements are equivalent.\n\nReturn Value\n\nThe difference needed to produce the receiver’s state from the parameter’s state.\n\nDiscussion\n\nThis function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference.\n\nComplexity\n\nWorst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements."
  },
  {
    "title": "last | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/last",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let lastNumber = numbers.last {\n    print(lastNumber)\n}\n// Prints \"50\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "index(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/index(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.\n\nlet s = \"Swift\"\nif let i = s.index(s.startIndex, offsetBy: 4, limitedBy: s.endIndex) {\n    print(s[i])\n}\n// Prints \"t\"\n\n\nThe next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.\n\nlet j = s.index(s.startIndex, offsetBy: 6, limitedBy: s.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/index(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.\n\nlet s = \"Swift\"\nlet i = s.index(s.startIndex, offsetBy: 4)\nprint(s[i])\n// Prints \"t\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "cancel() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/cancel()",
    "html": "Discussion\n\nTask cancellation is cooperative: a task that supports cancellation checks whether it has been canceled at various points during its work.\n\nCalling this method on a task that doesn’t support cancellation has no effect. Likewise, if the task has already run past the last point where it would stop early, calling this method has no effect.\n\nSee Also\n\nTask.checkCancellation()\n\nSee Also\nCanceling Tasks\nstruct CancellationError\nAn error that indicates a task was canceled.\nvar isCancelled: Bool\nA Boolean value that indicates whether the task should stop executing.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nstatic var isCancelled: Bool\nA Boolean value that indicates whether the task should stop executing.\nAvailable when Success is Never and Failure is Never.\nstatic func checkCancellation() throws\nThrows an error if the task was canceled.\nAvailable when Success is Never and Failure is Never.\nfunc withTaskCancellationHandler<T>(operation: () async throws -> T, onCancel: () -> Void) async rethrows -> T\nExecute an operation with a cancellation handler that’s immediately invoked if the current task is canceled.\nfunc withTaskCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nDeprecated"
  },
  {
    "title": "isCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/iscancelled-swift.type.property",
    "html": "Discussion\n\nAfter the value of this property becomes true, it remains true indefinitely. There is no way to uncancel a task.\n\nSee Also\n\ncheckCancellation()\n\nSee Also\nCanceling Tasks\nstruct CancellationError\nAn error that indicates a task was canceled.\nfunc cancel()\nIndicates that the task should stop running.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nvar isCancelled: Bool\nA Boolean value that indicates whether the task should stop executing.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nstatic func checkCancellation() throws\nThrows an error if the task was canceled.\nAvailable when Success is Never and Failure is Never.\nfunc withTaskCancellationHandler<T>(operation: () async throws -> T, onCancel: () -> Void) async rethrows -> T\nExecute an operation with a cancellation handler that’s immediately invoked if the current task is canceled.\nfunc withTaskCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nDeprecated"
  },
  {
    "title": "result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/result",
    "html": "Return Value\n\nIf the task succeeded, .success with the task’s result as the associated value; otherwise, .failure with the error as the associated value.\n\nDiscussion\n\nIf the task hasn’t completed, accessing this property waits for it to complete and its priority increases to that of the current task. Note that this might not be as effective as creating the task with the correct priority, depending on the executor’s scheduling details.\n\nSee Also\nAccessing Results\nvar value: Success\nThe result from a throwing task, after it completes.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nvar value: Success\nThe result from a nonthrowing task, after it completes.\nAvailable when Success conforms to Sendable and Failure is Never."
  },
  {
    "title": "isCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/task/iscancelled-swift.property",
    "html": "Discussion\n\nAfter the value of this property becomes true, it remains true indefinitely. There is no way to uncancel a task.\n\nSee Also\n\ncheckCancellation()\n\nSee Also\nCanceling Tasks\nstruct CancellationError\nAn error that indicates a task was canceled.\nfunc cancel()\nIndicates that the task should stop running.\nAvailable when Success conforms to Sendable and Failure conforms to Error.\nstatic var isCancelled: Bool\nA Boolean value that indicates whether the task should stop executing.\nAvailable when Success is Never and Failure is Never.\nstatic func checkCancellation() throws\nThrows an error if the task was canceled.\nAvailable when Success is Never and Failure is Never.\nfunc withTaskCancellationHandler<T>(operation: () async throws -> T, onCancel: () -> Void) async rethrows -> T\nExecute an operation with a cancellation handler that’s immediately invoked if the current task is canceled.\nfunc withTaskCancellationHandler<T>(handler: () -> Void, operation: () async throws -> T) async rethrows -> T\nDeprecated"
  },
  {
    "title": "init(catching:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/init(catching:)",
    "html": "Parameters\nbody\n\nA throwing closure to evaluate.\n\nSee Also\nConverting a Throwing Expression to a Result\nPreserving the Results of a Throwing Expression\nCall the initializer that wraps a throwing expression when you need to serialize or memoize the result."
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "joined(separator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/joined(separator:)-3e82c",
    "html": "Parameters\nseparator\n\nA string to insert between each of the elements in this sequence. The default separator is an empty string.\n\nReturn Value\n\nA single, concatenated string.\n\nDiscussion\n\nThe following example shows how an array of strings can be joined to a single, comma-separated string:\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet list = cast.joined(separator: \", \")\nprint(list)\n// Prints \"Vivien, Marlon, Kim, Karl\"\n"
  },
  {
    "title": "lastIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/lastindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the last element in the collection that matches predicate, or nil if no elements match.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. This example finds the index of the last name that begins with the letter A:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.lastIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Akosua starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "lastIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/lastindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe last index where element is found. If element is not found in the collection, this method returns nil.\n\nDiscussion\n\nAfter using lastIndex(of:) to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Ben\", \"Maxime\"]\nif let i = students.lastIndex(of: \"Ben\") {\n    students[i] = \"Benjamin\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Benjamin\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/sequence-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nAvailable when Base conforms to BidirectionalCollection.\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> ReversedCollection<Base>.Iterator\nReturns an iterator over the elements of this sequence.\nAvailable when Base conforms to BidirectionalCollection.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type that represents a valid position in the collection.\nAvailable when Base conforms to BidirectionalCollection."
  },
  {
    "title": "last(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/last(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThis example uses the last(where:) method to find the last negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let lastNegative = numbers.last(where: { $0 < 0 }) {\n    print(\"The last negative number is \\(lastNegative).\")\n}\n// Prints \"The last negative number is -6.\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "LazySequenceProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/lazysequenceprotocol-implementations",
    "html": "Topics\nInstance Properties\nvar elements: Self\nIdentical to self.\nAvailable when Self is Self.Elements.\nInstance Methods\nfunc compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>\nReturns the concatenated results of mapping the given transformation over this sequence.\nfunc flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc joined() -> LazySequence<FlattenSequence<Self.Elements>>\nReturns a lazy sequence that concatenates the elements of this sequence of sequences.\nAvailable when Element conforms to Sequence.\nfunc map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>\nReturns a LazyMapSequence over this Sequence. The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.\nType Aliases\ntypealias Elements\nA Sequence that can contain the same elements as this one, possibly with a simpler type.\nAvailable when Base conforms to BidirectionalCollection and LazySequenceProtocol."
  },
  {
    "title": "UnicodeCodec Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf32/unicodecodec-implementations",
    "html": "Topics\nInitializers\ninit()\nCreates an instance of the UTF-32 codec.\nInstance Methods\nfunc decode<I>(inout I) -> UnicodeDecodingResult\nStarts or continues decoding a UTF-32 sequence.\nType Methods\nstatic func encode(Unicode.Scalar, into: (Unicode.UTF32.CodeUnit) -> Void)\nEncodes a Unicode scalar as a UTF-32 code unit by calling the given closure."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf32/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf32/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/index/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Set<Element>.Index, Set<Element>.Index) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Element conforms to Hashable."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/index/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func < (Set<Element>.Index, Set<Element>.Index) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nAvailable when Element conforms to Hashable.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/utf32/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/set/index/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Element conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Element conforms to Hashable."
  },
  {
    "title": "UnicodeCodec | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicodecodec",
    "html": "Overview\n\nThe UnicodeCodec protocol declares methods that decode code unit sequences into Unicode scalar values and encode Unicode scalar values into code unit sequences. The standard library implements codecs for the UTF-8, UTF-16, and UTF-32 encoding schemes as the UTF8, UTF16, and UTF32 types, respectively. Use the Unicode.Scalar type to work with decoded Unicode scalar values.\n\nTopics\nInitializers\ninit()\nCreates an instance of the codec.\n\nRequired\n\nInstance Methods\nfunc decode<I>(inout I) -> UnicodeDecodingResult\nStarts or continues decoding a code unit sequence into Unicode scalar values.\n\nRequired\n\nType Methods\nstatic func encode(Unicode.Scalar, into: (Self.CodeUnit) -> Void)\nEncodes a Unicode scalar as a series of code units by calling the given closure on each code unit.\n\nRequired\n\nRelationships\nConforming Types\nUnicode.UTF16\nUnicode.UTF32\nUnicode.UTF8\nSee Also\nUnicode Codecs\nenum ASCII\nenum UTF8\nenum UTF16\nenum UTF32\nenum UnicodeDecodingResult\nThe result of one Unicode decoding step.\nenum ParseResult\nThe result of attempting to parse a T from some input."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/canonicalcombiningclass/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "samePosition(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/sameposition(in:)-4yeo1",
    "html": "Parameters\nunicodeScalars\n\nThe view to use for the index conversion. This index must be a valid index of at least one view of the string shared by unicodeScalars.\n\nReturn Value\n\nThe position in unicodeScalars that corresponds exactly to this index. If this index does not have an exact corresponding position in unicodeScalars, this method returns nil. For example, an attempt to convert the position of a UTF-16 trailing surrogate returns nil.\n\nDiscussion\n\nThis index must be a valid index of String(unicodeScalars).utf16.\n\nThis example first finds the position of a space (UTF-16 code point 32) in a string’s utf16 view and then uses this method to find the same position in the string’s unicodeScalars view.\n\nlet cafe = \"Café 🍵\"\nlet i = cafe.utf16.firstIndex(of: 32)!\nlet j = i.samePosition(in: cafe.unicodeScalars)!\nprint(String(cafe.unicodeScalars[..<j]))\n// Prints \"Café\"\n"
  },
  {
    "title": "samePosition(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/sameposition(in:)-6oxfv",
    "html": "Parameters\ncharacters\n\nThe string to use for the index conversion. This index must be a valid index of at least one view of characters.\n\nReturn Value\n\nThe position in characters that corresponds exactly to this index. If this index does not have an exact corresponding position in characters, this method returns nil. For example, an attempt to convert the position of a UTF-8 continuation byte returns nil.\n\nDiscussion\n\nThis example first finds the position of a space (UTF-8 code point 32) in a string’s utf8 view and then uses this method find the same position in the string.\n\nlet cafe = \"Café 🍵\"\nlet i = cafe.unicodeScalars.firstIndex(of: \"🍵\")!\nlet j = i.samePosition(in: cafe)!\nprint(cafe[j...])\n// Prints \"🍵\"\n"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/canonicalcombiningclass/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "init(utf16Offset:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/init(utf16offset:in:)",
    "html": "Parameters\noffset\n\nAn offset in UTF-16 code units."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/canonicalcombiningclass/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(_:within:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/init(_:within:)-2u3iq",
    "html": "Parameters\nsourcePosition\n\nA position in a view of the target parameter. sourcePosition must be a valid index of at least one of the views of target.\n\ntarget\n\nThe string referenced by the resulting index.\n\nDiscussion\n\nIf the index passed as sourcePosition represents the start of an extended grapheme cluster—the element type of a string—then the initializer succeeds.\n\nThe following example converts the position of the Unicode scalar \"e\" into its corresponding position in the string. The character at that position is the composed \"é\" character.\n\nlet cafe = \"Cafe\\u{0301}\"\nprint(cafe)\n// Prints \"Café\"\n\n\nlet scalarsIndex = cafe.unicodeScalars.firstIndex(of: \"e\")!\nlet stringIndex = String.Index(scalarsIndex, within: cafe)!\n\n\nprint(cafe[...stringIndex])\n// Prints \"Café\"\n\n\nIf the index passed as sourcePosition doesn’t have an exact corresponding position in target, the result of the initializer is nil. For example, an attempt to convert the position of the combining acute accent (\"\\u{0301}\") fails. Combining Unicode scalars do not have their own position in a string.\n\nlet nextScalarsIndex = cafe.unicodeScalars.index(after: scalarsIndex)\nlet nextStringIndex = String.Index(nextScalarsIndex, within: cafe)\n\n\nprint(nextStringIndex)\n// Prints \"nil\"\n"
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/canonicalcombiningclass/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw integer value of the canonical combining class."
  },
  {
    "title": "init(encodedOffset:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/index/init(encodedoffset:)",
    "html": "Parameters\noffset\n\nAn offset in code units."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/reversedcollection/droplast(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop off the end of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence that leaves off k elements from the end.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop."
  },
  {
    "title": "SIMD Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd4/simd-implementations",
    "html": "Topics\nOperators\nstatic func & (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func & (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func & (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &* (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &* (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &* (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &*= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &*= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+ (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+ (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+ (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &- (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &- (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &- (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &-= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &-= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<< (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>> (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<< (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<< (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>> (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>> (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>>= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>>= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<<= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<<= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func * (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func * (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func * (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func * (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func * (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func * (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func *= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func *= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func *= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func *= (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func + (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func + (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func + (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func + (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func + (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func + (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func += (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func += (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func += (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func += (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func - (Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func - (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func - (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func - (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func -= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func -= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func -= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func -= (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func .!= (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise inequality comparison.\nstatic func .!= (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise inequality comparison.\nstatic func .!= (Self, Self) -> SIMDMask<Self.MaskStorage>\nA vector mask with the result of a pointwise inequality comparison.\nstatic func .== (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise equality comparison.\nstatic func .== (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise equality comparison.\nstatic func .== (Self, Self) -> SIMDMask<Self.MaskStorage>\nA vector mask with the result of a pointwise equality comparison.\nstatic func .< (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .> (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .< (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .< (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .> (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .> (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .>= (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .<= (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .<= (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .>= (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .<= (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .>= (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func / (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func / (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func / (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func / (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func / (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func / (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func /= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func /= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func /= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func /= (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two vectors are equal.\nstatic func | (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func % (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func | (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^ (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^ (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func | (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^ (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func % (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func % (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func |= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func |= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func %= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func %= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ~ (Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nInitializers\ninit<S>(S)\nCreates a vector from the given sequence.\ninit(Self.Scalar)\ninit(arrayLiteral: Self.Scalar...)\nCreates a vector from the specified elements.\ninit(from: Decoder) throws\nCreates a new vector by decoding scalars from the given decoder.\ninit(repeating: Self.Scalar)\nA vector with the specified value in all lanes.\nInstance Properties\nvar description: String\nA textual description of the vector.\nvar indices: Range<Int>\nThe valid indices for subscripting the vector.\nvar leadingZeroBitCount: Self\nAvailable when Scalar conforms to FixedWidthInteger.\nvar nonzeroBitCount: Self\nAvailable when Scalar conforms to FixedWidthInteger.\nvar trailingZeroBitCount: Self\nAvailable when Scalar conforms to FixedWidthInteger.\nInstance Methods\nfunc addProduct(Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nfunc addProduct(Self.Scalar, Self)\nAvailable when Scalar conforms to FloatingPoint.\nfunc addProduct(Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nfunc addingProduct(Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc addingProduct(Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc addingProduct(Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc clamp(lowerBound: Self, upperBound: Self)\nAvailable when Scalar conforms to Comparable.\nfunc clamp(lowerBound: Self, upperBound: Self)\nAvailable when Scalar conforms to FloatingPoint.\nfunc clamped(lowerBound: Self, upperBound: Self) -> Self\nAvailable when Scalar conforms to Comparable.\nfunc clamped(lowerBound: Self, upperBound: Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc encode(to: Encoder) throws\nEncodes the scalars of this vector into the given encoder in an unkeyed container.\nfunc formSquareRoot()\nAvailable when Scalar conforms to FloatingPoint.\nfunc hash(into: inout Hasher)\nHashes the elements of the vector using the given hasher.\nfunc max() -> Self.Scalar\nThe greatest element in the vector.\nAvailable when Scalar conforms to Comparable.\nfunc max() -> Self.Scalar\nThe greatest scalar in the vector.\nAvailable when Scalar conforms to FloatingPoint.\nfunc min() -> Self.Scalar\nThe least scalar in the vector.\nAvailable when Scalar conforms to FloatingPoint.\nfunc min() -> Self.Scalar\nThe least element in the vector.\nAvailable when Scalar conforms to Comparable.\nfunc replace(with: Self, where: SIMDMask<Self.MaskStorage>)\nReplaces elements of this vector with elements of other in the lanes where mask is true.\nfunc replace(with: Self.Scalar, where: SIMDMask<Self.MaskStorage>)\nReplaces elements of this vector with other in the lanes where mask is true.\nfunc replacing(with: Self, where: SIMDMask<Self.MaskStorage>) -> Self\nReturns a copy of this vector, with elements replaced by elements of other in the lanes where mask is true.\nfunc replacing(with: Self.Scalar, where: SIMDMask<Self.MaskStorage>) -> Self\nReturns a copy of this vector, with elements other in the lanes where mask is true.\nfunc round(FloatingPointRoundingRule)\nAvailable when Scalar conforms to FloatingPoint.\nfunc rounded(FloatingPointRoundingRule) -> Self\nA vector formed by rounding each lane of the source vector to an integral value according to the specified rounding rule.\nAvailable when Scalar conforms to FloatingPoint.\nfunc squareRoot() -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc sum() -> Self.Scalar\nThe sum of the scalars in the vector.\nAvailable when Scalar conforms to FloatingPoint.\nfunc wrappedSum() -> Self.Scalar\nReturns the sum of the scalars in the vector, computed with wrapping addition.\nAvailable when Scalar conforms to FixedWidthInteger.\nType Properties\nstatic var one: Self\nA vector with one in all lanes.\nAvailable when Scalar conforms to FloatingPoint.\nstatic var one: Self\nA vector with one in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic var zero: Self\nA vector with zero in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic var zero: Self\nA vector with zero in all lanes.\nAvailable when Scalar conforms to FloatingPoint.\nType Methods\nstatic func random(in: ClosedRange<Self.Scalar>) -> Self\nReturns a vector with random values from within the specified range in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func random(in: Range<Self.Scalar>) -> Self\nReturns a vector with random values from within the specified range in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func random<T>(in: ClosedRange<Self.Scalar>, using: inout T) -> Self\nReturns a vector with random values from within the specified range in all lanes, using the given generator as a source for randomness.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func random<T>(in: Range<Self.Scalar>, using: inout T) -> Self\nReturns a vector with random values from within the specified range in all lanes, using the given generator as a source for randomness.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd4/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-5azw7",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd4/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when Scalar conforms to SIMDScalar."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-23u3w",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-3zbof",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-3ah76",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "codingPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/codingpath",
    "html": "Required"
  },
  {
    "title": "<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/canonicalcombiningclass/_(_:_:)-1ro2m",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nThis function is the only requirement of the Comparable protocol. The remainder of the relational operator functions are implemented by the standard library for any type that conforms to Comparable."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/canonicalcombiningclass/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "mapError(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/maperror(_:)",
    "html": "Parameters\ntransform\n\nA closure that takes the failure value of the instance.\n\nReturn Value\n\nA Result instance with the result of evaluating transform as the new failure value if this instance represents a failure.\n\nDiscussion\n\nUse this method when you need to transform the value of a Result instance when it represents a failure. The following example transforms the error value of a result by wrapping it in a custom Error type:\n\nstruct DatedError: Error {\n    var error: Error\n    var date: Date\n\n\n    init(_ error: Error) {\n        self.error = error\n        self.date = Date()\n    }\n}\n\n\nlet result: Result<Int, Error> = // ...\n// result == .failure(<error value>)\nlet resultWithDatedError = result.mapError { DatedError($0) }\n// result == .failure(DatedError(error: <error value>, date: <date>))\n\nSee Also\nTransforming a Result\nfunc map<NewSuccess>((Success) -> NewSuccess) -> Result<NewSuccess, Failure>\nReturns a new result, mapping any success value using the given transformation.\nfunc flatMap<NewSuccess>((Success) -> Result<NewSuccess, Failure>) -> Result<NewSuccess, Failure>\nReturns a new result, mapping any success value using the given transformation and unwrapping the produced result.\nfunc flatMapError<NewFailure>((Failure) -> Result<Success, NewFailure>) -> Result<Success, NewFailure>\nReturns a new result, mapping any failure value using the given transformation and unwrapping the produced result."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/map(_:)",
    "html": "Parameters\ntransform\n\nA closure that takes the success value of this instance.\n\nReturn Value\n\nA Result instance with the result of evaluating transform as the new success value if this instance represents a success.\n\nDiscussion\n\nUse this method when you need to transform the value of a Result instance when it represents a success. The following example transforms the integer success value of a result into a string:\n\nfunc getNextInteger() -> Result<Int, Error> { /* ... */ }\n\n\nlet integerResult = getNextInteger()\n// integerResult == .success(5)\nlet stringResult = integerResult.map { String($0) }\n// stringResult == .success(\"5\")\n\nSee Also\nTransforming a Result\nfunc mapError<NewFailure>((Failure) -> NewFailure) -> Result<Success, NewFailure>\nReturns a new result, mapping any failure value using the given transformation.\nfunc flatMap<NewSuccess>((Success) -> Result<NewSuccess, Failure>) -> Result<NewSuccess, Failure>\nReturns a new result, mapping any success value using the given transformation and unwrapping the produced result.\nfunc flatMapError<NewFailure>((Failure) -> Result<Success, NewFailure>) -> Result<Success, NewFailure>\nReturns a new result, mapping any failure value using the given transformation and unwrapping the produced result."
  },
  {
    "title": "flatMapError(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/flatmaperror(_:)",
    "html": "Parameters\ntransform\n\nA closure that takes the failure value of the instance.\n\nReturn Value\n\nA Result instance, either from the closure or the previous .success.\n\nSee Also\nTransforming a Result\nfunc map<NewSuccess>((Success) -> NewSuccess) -> Result<NewSuccess, Failure>\nReturns a new result, mapping any success value using the given transformation.\nfunc mapError<NewFailure>((Failure) -> NewFailure) -> Result<Success, NewFailure>\nReturns a new result, mapping any failure value using the given transformation.\nfunc flatMap<NewSuccess>((Success) -> Result<NewSuccess, Failure>) -> Result<NewSuccess, Failure>\nReturns a new result, mapping any success value using the given transformation and unwrapping the produced result."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/!=(_:_:)",
    "html": "See Also\nComparing Results\nstatic func == (Result<Success, Failure>, Result<Success, Failure>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Success conforms to Equatable, Failure conforms to Equatable, and Failure conforms to Error."
  },
  {
    "title": "get() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/get()",
    "html": "Return Value\n\nThe success value, if the instance represents a success.\n\nDiscussion\n\nUse this method to retrieve the value of this result if it represents a success, or to catch the value if it represents a failure.\n\nlet integerResult: Result<Int, Error> = .success(5)\ndo {\n    let value = try integerResult.get()\n    print(\"The value is \\(value).\")\n} catch {\n    print(\"Error retrieving the value: \\(error)\")\n}\n// Prints \"The value is 5.\"\n\n\nThrows\n\nThe failure value, if the instance represents a failure."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nComparing Results\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "publisher | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/publisher-swift.property",
    "html": "Discussion\n\nIn the following example, goodResult provides a successful result with the integer value 1. A sink subscriber connected to the result’s publisher receives the output 1, followed by a normal completion (Combine/Subscribers/Completion/finished).\n\n let goodResult: Result<Int, MyError> = .success(1)\n goodResult.publisher\n     .sink(receiveCompletion: { print(\"goodResult done: \\($0)\")},\n           receiveValue: { print(\"goodResult value: \\($0)\")} )\n // Prints:\n // goodResult value: 1\n // goodResult done: finished\n\n\nIn contrast with the Combine/Just publisher, which always publishes a single value, this publisher might not send any values and instead terminate with an error, if the result is doc://com.apple.documentation/documentation/Swift/Result/failure. In the next example, badResult is a failure result that wraps a custom error. A sink subscriber connected to this result’s publisher immediately receives a termination (Combine/Subscribers/Completion/failure(_:)).\n\n struct MyError: Error, CustomDebugStringConvertible {\n     var debugDescription: String = \"MyError\"\n }\n let badResult: Result<Int, MyError> = .failure(MyError())\n badResult.publisher\n     .sink(receiveCompletion: { print(\"badResult done: \\($0)\")},\n           receiveValue: { print(\"badResult value: \\($0)\")} )\n // Prints:\n // badResult done: failure(MyError)\n\nSee Also\nPublishing a Result\nstruct Publisher\nThe type of a Combine publisher that publishes this instance’s result to each subscriber exactly once, or fails immediately if the result indicates failure.\nAvailable when Failure conforms to Error."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/flatmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that takes the success value of the instance.\n\nReturn Value\n\nA Result instance, either from the closure or the previous .failure.\n\nDiscussion\n\nUse this method to avoid a nested result when your transformation produces another Result type.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an result type.\n\nfunc getNextInteger() -> Result<Int, Error> {\n    .success(4)\n}\nfunc getNextAfterInteger(_ n: Int) -> Result<Int, Error> {\n    .success(n + 1)\n}\n\n\nlet result = getNextInteger().map { getNextAfterInteger($0) }\n// result == .success(.success(5))\n\n\nlet result = getNextInteger().flatMap { getNextAfterInteger($0) }\n// result == .success(5)\n\nSee Also\nTransforming a Result\nfunc map<NewSuccess>((Success) -> NewSuccess) -> Result<NewSuccess, Failure>\nReturns a new result, mapping any success value using the given transformation.\nfunc mapError<NewFailure>((Failure) -> NewFailure) -> Result<Success, NewFailure>\nReturns a new result, mapping any failure value using the given transformation.\nfunc flatMapError<NewFailure>((Failure) -> Result<Success, NewFailure>) -> Result<Success, NewFailure>\nReturns a new result, mapping any failure value using the given transformation and unwrapping the produced result."
  },
  {
    "title": "Writing Failable Asynchronous APIs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/writing-failable-asynchronous-apis",
    "html": "Overview\n\nWhen writing a function, method, or other API that might fail, you use the throws keyword on the declaration to indicate that the API call can throw an error. However, you can’t use the throws keyword to model APIs that return asynchronously. Instead, use the Result enumeration to capture information about whether an asychronous call succeeds or fails, and use the associated values for the Result.success(_:) and Result.failure(_:) cases to carry information about the result of the call.\n\nReturn Result Instances Asynchronously\n\nThe following example models an asynchronous source of random numbers. The fetchRemoteRandomNumber(completion:) method returns Void synchronously, and asynchronously calls a completion handler with a Result<Int, EntropyError> instance that contains either a random result or information about the failure.\n\nlet queue = DispatchQueue(label: \"com.example.queue\")\n\n\nenum EntropyError: Error {\n    case entropyDepleted\n}\n\n\nstruct AsyncRandomGenerator {\n    static let entropyLimit = 5\n    var count = 0\n\n\n    mutating func fetchRemoteRandomNumber(\n        completion: @escaping (Result<Int, EntropyError>) -> Void\n    ) {\n        let result: Result<Int, EntropyError>\n        if count < AsyncRandomGenerator.entropyLimit {\n            // Produce numbers until reaching the entropy limit.\n            result = .success(Int.random(in: 1...100))\n        } else {\n            // Supply a failure reason when the caller hits the limit.\n            result = .failure(.entropyDepleted)\n        }\n\n\n        count += 1\n\n\n        // Delay to simulate an asynchronous source of entropy.\n        queue.asyncAfter(deadline: .now() + 2) {\n            completion(result)\n        }\n    }\n}\n\n\nUsers of your remote random number generator can decide how to handle both the success and failure cases:\n\nvar generator = AsyncRandomGenerator()\n\n\n// Request one more number than the limit to trigger a failure.\n(0..<AsyncRandomGenerator.entropyLimit + 1).forEach { _ in\n    generator.fetchRemoteRandomNumber { result in\n        switch result {\n        case .success(let number):\n            print(number)\n        case .failure(let error):\n            print(\"Source of randomness failed: \\(error)\")\n        }\n    }\n}\n\n\nprint(\"Waiting on some numbers.\")\n\n\ndispatchMain()\n/* Prints:\nsuccess(29)\nsuccess(46)\nsuccess(85)\nsuccess(39)\nsuccess(84)\nSource of randomness failed: entropyDepleted\n*/\n\nSee Also\nRepresenting a Result\ncase success(Success)\nA success, storing a Success value.\ncase failure(Failure)\nA failure, storing a Failure value."
  },
  {
    "title": "Result.failure(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/failure(_:)",
    "html": "See Also\nRepresenting a Result\ncase success(Success)\nA success, storing a Success value.\nWriting Failable Asynchronous APIs\nVend results as part of an API when you can’t return errors synchronously."
  },
  {
    "title": "Preserving the Results of a Throwing Expression | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/preserving-the-results-of-a-throwing-expression",
    "html": "Overview\n\nSometimes you need to preserve the entire result of a function call or other expression that can either throw or return a value. For example, you may need to serialize the result or pass it as a value to another part of your app that handles the result data. Use the Result type in these scenarios to capture the result of a potentially failing operation.\n\nIdentify a Throwing Expression to Preserve\n\nTypically, you use do-catch statements to handle throwing expressions immediately, but sometimes you need to store the whole result of the operation for later processing during tasks like analyzing a batch of calls. The following example introduces an API that generates random numbers, but that fails approximately half of the time.\n\nenum EntropyError: Error {\n    case entropyDepleted\n}\n\n\nstruct UnreliableRandomGenerator {\n    func random() throws -> Int {\n        if Bool.random() {\n            return Int.random(in: 1...100)\n        } else {\n            throw EntropyError.entropyDepleted\n        }\n    }\n}\n\nConvert the Throwing Expression to a Result\n\nYou preserve the return value or thrown error from a throwing expression using the Result enumeration’s init(catching:) initializer. Invoke the throwing expression inside the closure you pass to the initializer:\n\nlet singleSample = Result { try UnreliableRandomGenerator().random() }\n\n\nIn most scenarios, you use the preserved result as part of broader functionality in your code. For example, you may run a series of randomness tests and compute the statistical average of both a range of numbers returned from a random number generator, as well as the failure rate of calling the API. In these cases, you need to store the whole result rather than just the success value or that the API call failed.\n\nThe following example uses the init(catching:) initializer in the broader context of saving a series of calls for later statistical analysis:\n\nstruct RandomnessMonitor {\n    let randomnessSource: UnreliableRandomGenerator\n    var results: [Result<Int, Error>] = []\n\n\n    init(generator: UnreliableRandomGenerator) {\n        randomnessSource = generator\n    }\n\n\n    mutating func sample() {\n        let sample = Result { try randomnessSource.random() }\n        results.append(sample)\n    }\n\n\n    func summary() -> (Double, Double) {\n        let totals = results.reduce((sum: 0, count: 0)) { total, sample in\n            switch sample {\n            case .success(let number):\n                return (total.sum + number, total.count)\n            case .failure:\n                return (total.sum, total.count + 1)\n            }\n        }\n\n\n        return (\n            average: Double(totals.sum) / Double(results.count - totals.count),\n            failureRate: Double(totals.count) / Double(results.count)\n        )\n    }\n}\n\n\nRunning the analysis on a sufficiently large sample generates an average number near 50 and a failure rate near 50%:\n\nvar monitor = RandomnessMonitor(generator: UnreliableRandomGenerator())\n(0..<1000).forEach { _ in monitor.sample() }\nlet (average, failureRate) = monitor.summary()\nprint(\"Average value: \\(average), failure rate: \\(failureRate * 100.0)%.\")\n// Prints values such as: \"Average value: 47.95, failure rate: 48.69%.\"\n\nSee Also\nConverting a Throwing Expression to a Result\ninit(catching: () throws -> Success)\nCreates a new result by evaluating a throwing closure, capturing the returned value as a success, or any thrown error as a failure.\nAvailable when Failure is Error."
  },
  {
    "title": "Result.success(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/success(_:)",
    "html": "See Also\nRepresenting a Result\ncase failure(Failure)\nA failure, storing a Failure value.\nWriting Failable Asynchronous APIs\nVend results as part of an API when you can’t return errors synchronously."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Result<Success, Failure>, Result<Success, Failure>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Success conforms to Equatable, Failure conforms to Equatable, and Failure conforms to Error."
  },
  {
    "title": "Unicode.CanonicalCombiningClass.RawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unicode/canonicalcombiningclass/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd4/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-6wwvl",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-8rejh",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-8f2z9",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-9wdfz",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-ypkn",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-7qn1r",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-6aknx",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-2uokk",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/result/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Success conforms to Hashable, Failure conforms to Error, and Failure conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Success conforms to Hashable, Failure conforms to Error, and Failure conforms to Hashable."
  },
  {
    "title": "init(_:rounding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd4/init(_:rounding:)",
    "html": "Parameters\nother\n\nThe vector to convert.\n\nrule\n\nThe round rule to use when converting elements of other. The default is .towardZero."
  },
  {
    "title": "init(truncatingIfNeeded:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd4/init(truncatingifneeded:)",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "init(x:y:z:w:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd4/init(x:y:z:w:)",
    "html": "Parameters\nx\n\nThe first element of the vector.\n\ny\n\nThe second element of the vector.\n\nz\n\nThe third element of the vector.\n\nw\n\nThe fourth element of the vector."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-4apkx",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-2vnj6",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "decodeNil() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decodenil()",
    "html": "Required\n\nReturn Value\n\nWhether the encountered value was null."
  },
  {
    "title": "decode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer/decode(_:)-vrya",
    "html": "Required\n\nParameters\ntype\n\nThe type to decode as.\n\nReturn Value\n\nA value of the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value cannot be converted to the requested type.\n\nThrows\n\nDecodingError.valueNotFound if the encountered encoded value is null."
  },
  {
    "title": "init(clamping:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd4/init(clamping:)",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd4/init(_:)-2frw5",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd4/init(_:)-1dme2",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/comparator/init(_:)",
    "html": "Parameters\nstandardComparison\n\nThe String.StandardComparator to convert."
  },
  {
    "title": "init(stringInterpolation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/init(stringinterpolation:)",
    "html": "Parameters\nstringInterpolation\n\nAn instance of StringInterpolation which has had each segment of the string literal appended to it.\n\nDiscussion\n\nMost StringInterpolation types will store information about the literals and interpolations appended to them in one or more properties. init(stringInterpolation:) should use these properties to initialize the instance."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/comparator/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/comparator/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/placeholder/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "SortComparator Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/comparator/sortcomparator-implementations",
    "html": "Topics\nType Properties\nstatic var localized: String.Comparator\nCompares Strings using a localized comparison in the current locale.\nAvailable when Self is String.Comparator.\nstatic var localizedStandard: String.Comparator\nCompares Strings as compared by the Finder.\nAvailable when Self is String.Comparator."
  },
  {
    "title": "Encodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "Decodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "isKnownUniquelyReferenced(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/isknownuniquelyreferenced(_:)-98zpp",
    "html": "Parameters\nobject\n\nAn instance of a class. This function does not modify object; the use of inout is an implementation artifact.\n\nReturn Value\n\ntrue if object is known to have a single strong reference; otherwise, false. If object is nil, the return value is false.\n\nDiscussion\n\nThe isKnownUniquelyReferenced(_:) function is useful for implementing the copy-on-write optimization for the deep storage of value types:\n\nmutating func update(withValue value: T) {\n    if !isKnownUniquelyReferenced(&myStorage) {\n        myStorage = self.copiedStorage()\n    }\n    myStorage.update(withValue: value)\n}\n\n\nisKnownUniquelyReferenced(_:) checks only for strong references to the given object—if object has additional weak or unowned references, the result may still be true. Because weak and unowned references cannot be the only reference to an object, passing a weak or unowned reference as object always results in false.\n\nIf the instance passed as object is being accessed by multiple threads simultaneously, this function may still return true. Therefore, you must only call this function from mutating methods with appropriate thread synchronization. That will ensure that isKnownUniquelyReferenced(_:) only returns true when there is really one accessor, or when there is a race condition, which is already undefined behavior.\n\nSee Also\nUniqueness Checking\nfunc isKnownUniquelyReferenced<T>(inout T) -> Bool\nReturns a Boolean value indicating whether the given object is known to have a single strong reference."
  },
  {
    "title": "ManagedBuffer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/managedbuffer",
    "html": "Overview\n\nNote that the Element array is suitably-aligned raw memory. You are expected to construct and—if necessary—destroy objects there yourself, using the APIs on UnsafeMutablePointer<Element>. Typical usage stores a count and capacity in Header and destroys any live elements in the deinit of a subclass.\n\nNote\n\nSubclasses must not have any stored properties; any storage needed should be included in Header.\n\nTopics\nInstance Properties\nvar capacity: Int\nThe actual number of elements that can be stored in this object.\nvar header: Header\nThe stored Header instance.\nInstance Methods\nfunc withUnsafeMutablePointerToElements<R>((UnsafeMutablePointer<Element>) throws -> R) rethrows -> R\nCall body with an UnsafeMutablePointer to the Element storage.\nfunc withUnsafeMutablePointerToHeader<R>((UnsafeMutablePointer<Header>) throws -> R) rethrows -> R\nCall body with an UnsafeMutablePointer to the stored Header.\nfunc withUnsafeMutablePointers<R>((UnsafeMutablePointer<Header>, UnsafeMutablePointer<Element>) throws -> R) rethrows -> R\nCall body with UnsafeMutablePointers to the stored Header and raw Element storage.\nType Methods\nclass func create(minimumCapacity: Int, makingHeaderWith: (ManagedBuffer<Header, Element>) throws -> Header) rethrows -> ManagedBuffer<Header, Element>\nCreate a new instance of the most-derived class, calling factory on the partially-constructed object to generate an initial Header.\nSee Also\nBuffer Implementation\nstruct ManagedBufferPointer\nContains a buffer object, and provides access to an instance of Header and contiguous storage for an arbitrary number of Element instances stored in that buffer."
  },
  {
    "title": "String.CharacterView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/characterview",
    "html": "Discussion\n\nPrevious versions of Swift provided this view since String itself was not a collection. String is now a collection of characters, so this type is now just an alias for String."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/comparator/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/suffix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. The value of maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence terminating at the end of the collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "init(options:locale:order:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/comparator/init(options:locale:order:)",
    "html": "Parameters\noptions\n\nThe options to use for comparison.\n\nlocale\n\nThe locale to use for comparison. If nil, the comparison is unlocalized.\n\norder\n\nThe initial order to use for ordered comparison."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/comparator/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "formIndex(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/formindex(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": "init(utf8String:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(utf8string:)-7t980",
    "html": "Deprecated\n\nUse String(_ scalar: Unicode.Scalar)"
  },
  {
    "title": "init(validatingPlatformString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(validatingplatformstring:)-2920w",
    "html": "Parameters\nplatformString\n\nThe null-terminated platform string to be interpreted as CInterop.PlatformUnicodeEncoding.\n\nDiscussion\n\nIf the contents of the platform string isn’t well-formed Unicode, this initializer returns nil."
  },
  {
    "title": "write(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/write(_:)",
    "html": "Parameters\nother\n\nA string to append.\n\nSee Also\nWriting to a File or URL\nfunc write<Target>(to: inout Target)\nWrites the string into the given output stream."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/index/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func < (CollectionDifference<ChangeElement>.Index, CollectionDifference<ChangeElement>.Index) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
  },
  {
    "title": "init(validatingUTF8:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(validatingutf8:)-2o7g5",
    "html": "Deprecated\n\nUse String(_ scalar: Unicode.Scalar)"
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/index/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/comparator/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "compare(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/comparator/compare(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nA value to compare.\n\nDiscussion\n\nThe result of comparisons should be flipped if the current order is reverse.\n\nIf compare(lhs, rhs) is .orderedAscending, then compare(rhs, lhs) must be .orderedDescending. If compare(lhs, rhs) is .orderedDescending, then compare(rhs, lhs) must be .orderedAscending."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/comparator/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "String.LocalizationValue.ExtendedGraphemeClusterLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/extendedgraphemeclusterliteraltype",
    "html": "Discussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "String.LocalizationValue.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/stringliteraltype",
    "html": "Discussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/placeholder/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/placeholder/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/placeholder/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/placeholder/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "firstIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/firstindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe first index where element is found. If element is not found in the collection, returns nil.\n\nDiscussion\n\nAfter using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\"]\nif let i = students.firstIndex(of: \"Maxime\") {\n    students[i] = \"Max\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(platformString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(platformstring:)-341sr",
    "html": "Deprecated\n\nUse a copy of the String argument"
  },
  {
    "title": "isKnownUniquelyReferenced(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/isknownuniquelyreferenced(_:)-5kvtu",
    "html": "Parameters\nobject\n\nAn instance of a class. This function does not modify object; the use of inout is an implementation artifact.\n\nReturn Value\n\ntrue if object is known to have a single strong reference; otherwise, false.\n\nDiscussion\n\nThe isKnownUniquelyReferenced(_:) function is useful for implementing the copy-on-write optimization for the deep storage of value types:\n\nmutating func update(withValue value: T) {\n    if !isKnownUniquelyReferenced(&myStorage) {\n        myStorage = self.copiedStorage()\n    }\n    myStorage.update(withValue: value)\n}\n\n\nUse care when calling isKnownUniquelyReferenced(_:) from within a Boolean expression. In debug builds, an instance in the left-hand side of a && or || expression may still be referenced when evaluating the right-hand side, inflating the instance’s reference count. For example, this version of the update(withValue) method will re-copy myStorage on every call:\n\n// Copies too frequently:\nmutating func badUpdate(withValue value: T) {\n    if myStorage.shouldCopy || !isKnownUniquelyReferenced(&myStorage) {\n        myStorage = self.copiedStorage()\n    }\n    myStorage.update(withValue: value)\n}\n\n\nTo avoid this behavior, swap the call isKnownUniquelyReferenced(_:) to the left-hand side or store the result of the first expression in a local constant:\n\nmutating func goodUpdate(withValue value: T) {\n    let shouldCopy = myStorage.shouldCopy\n    if shouldCopy || !isKnownUniquelyReferenced(&myStorage) {\n        myStorage = self.copiedStorage()\n    }\n    myStorage.update(withValue: value)\n}\n\n\nisKnownUniquelyReferenced(_:) checks only for strong references to the given object—if object has additional weak or unowned references, the result may still be true. Because weak and unowned references cannot be the only reference to an object, passing a weak or unowned reference as object always results in false.\n\nIf the instance passed as object is being accessed by multiple threads simultaneously, this function may still return true. Therefore, you must only call this function from mutating methods with appropriate thread synchronization. That will ensure that isKnownUniquelyReferenced(_:) only returns true when there is really one accessor, or when there is a race condition, which is already undefined behavior.\n\nSee Also\nUniqueness Checking\nfunc isKnownUniquelyReferenced<T>(inout T?) -> Bool\nReturns a Boolean value indicating whether the given object is known to have a single strong reference."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "CollectionDifference.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "prefix(upTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/prefix(upto:)",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "init(platformString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(platformstring:)-5j2y3",
    "html": "Parameters\nplatformString\n\nThe null-terminated platform string to be interpreted as CInterop.PlatformUnicodeEncoding.\n\nDiscussion\n\nIf the content of the platform string isn’t well-formed Unicode, this initializer replaces invalid bytes with U+FFFD. This means that, depending on the semantics of the specific platform, conversion to a string and back might result in a value that’s different from the original platform string."
  },
  {
    "title": "init(platformString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(platformstring:)-7hjry",
    "html": "Parameters\nplatformString\n\nThe null-terminated platform string to be interpreted as CInterop.PlatformUnicodeEncoding.\n\nDiscussion\n\nNote It is a precondition that platformString must be null-terminated. The absence of a null byte will trigger a runtime error.\n\nIf the content of the platform string isn’t well-formed Unicode, this initializer replaces invalid bytes with U+FFFD. This means that, depending on the semantics of the specific platform, conversion to a string and back might result in a value that’s different from the original platform string."
  },
  {
    "title": "init(utf8String:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(utf8string:)-5v4k8",
    "html": "Deprecated\n\nUse a copy of the String argument"
  },
  {
    "title": "init(validating:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(validating:)-95n8b",
    "html": "Parameters\ncomponent\n\nThe path component to be interpreted as CInterop.PlatformUnicodeEncoding.\n\nDiscussion\n\nIf the contents of the path component isn’t a well-formed Unicode string, this initializer returns nil."
  },
  {
    "title": "init(validating:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(validating:)-6r2j9",
    "html": "Parameters\nroot\n\nThe path root to be interpreted as CInterop.PlatformUnicodeEncoding.\n\nDiscussion\n\nOn Windows, creates a string from a path root, validating its contents as UTF-16 on Windows.\n\nOn Windows, if the contents of the path root isn’t a well-formed Unicode string, this initializer returns nil."
  },
  {
    "title": "init(validating:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(validating:)-9dx2b",
    "html": "Parameters\npath\n\nThe file path to be interpreted as CInterop.PlatformUnicodeEncoding.\n\nDiscussion\n\nIf the contents of the file path isn’t a well-formed Unicode string, this initializer returns nil."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/+(_:_:)-6h59y",
    "html": "Parameters\nlhs\n\nA collection or finite sequence.\n\nrhs\n\nA range-replaceable collection.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of a Range<Int> instance and an integer array.\n\nlet numbers = [7, 8, 9, 10]\nlet moreNumbers = (1...6) + numbers\nprint(moreNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of argument on the right-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int].\n\nSee Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: String)\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func + (String, String) -> String\nstatic func += (inout String, String)\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "init(validatingPlatformString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(validatingplatformstring:)-91z6f",
    "html": "Parameters\nplatformString\n\nThe null-terminated platform string to be interpreted as CInterop.PlatformUnicodeEncoding.\n\nDiscussion\n\nNote It is a precondition that platformString must be null-terminated. The absence of a null byte will trigger a runtime error.\n\nIf the contents of the platform string isn’t well-formed Unicode, this initializer returns nil."
  },
  {
    "title": "init(validatingUTF8:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(validatingutf8:)-8awk3",
    "html": "Deprecated\n\nUse a copy of the String argument"
  },
  {
    "title": "characters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/characters",
    "html": "Discussion\n\nPrevious versions of Swift provided this view since String itself was not a collection. String is now a collection of characters, so this type is now just an alias for String."
  },
  {
    "title": "write(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/write(to:)",
    "html": "Parameters\ntarget\n\nAn output stream.\n\nSee Also\nWriting to a File or URL\nfunc write(String)\nAppends the given string to this string."
  },
  {
    "title": "append(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/append(contentsof:)-oxek",
    "html": "See Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func + (String, String) -> String\nstatic func += (inout String, String)\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "init(contentsOfFile:usedEncoding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(contentsoffile:usedencoding:)",
    "html": "See Also\nCreating a String from a File or URL\ninit(contentsOf: URL) throws\ninit(contentsOf: URL, encoding: String.Encoding) throws\nProduces a string created by reading data from a given URL interpreted using a given encoding. Errors are written into the inout error argument.\ninit(contentsOf: URL, usedEncoding: inout String.Encoding) throws\nProduces a string created by reading data from a given URL and returns by reference the encoding used to interpret the data. Errors are written into the inout error argument.\ninit(contentsOfFile: String) throws\ninit(contentsOfFile: String, encoding: String.Encoding) throws\nProduces a string created by reading data from the file at a given path interpreted using a given encoding."
  },
  {
    "title": "append(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/append(_:)-4xi3j",
    "html": "Parameters\nc\n\nThe character to append to the string.\n\nDiscussion\n\nThe following example adds an emoji globe to the end of a string.\n\nvar globe = \"Globe \"\nglobe.append(\"🌍\")\nprint(globe)\n// Prints \"Globe 🌍\"\n\nSee Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(contentsOf: String)\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func + (String, String) -> String\nstatic func += (inout String, String)\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "init(validatingPlatformString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(validatingplatformstring:)-go44",
    "html": "Deprecated\n\nUse a copy of the String argument"
  },
  {
    "title": "append(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/append(_:)-4xa8f",
    "html": "Parameters\nother\n\nAnother string.\n\nDiscussion\n\nThe following example builds a customized greeting by using the append(_:) method:\n\nvar greeting = \"Hello, \"\nif let name = getUserName() {\n    greeting.append(name)\n} else {\n    greeting.append(\"friend\")\n}\nprint(greeting)\n// Prints \"Hello, friend\"\n\nSee Also\nAppending Strings and Characters\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: String)\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func + (String, String) -> String\nstatic func += (inout String, String)\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "init(validatingPlatformString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(validatingplatformstring:)-8x1kn",
    "html": "Deprecated\n\nUse String(_ scalar: Unicode.Scalar)"
  },
  {
    "title": "init(contentsOfFile:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(contentsoffile:)",
    "html": "See Also\nCreating a String from a File or URL\ninit(contentsOf: URL) throws\ninit(contentsOf: URL, encoding: String.Encoding) throws\nProduces a string created by reading data from a given URL interpreted using a given encoding. Errors are written into the inout error argument.\ninit(contentsOf: URL, usedEncoding: inout String.Encoding) throws\nProduces a string created by reading data from a given URL and returns by reference the encoding used to interpret the data. Errors are written into the inout error argument.\ninit(contentsOfFile: String, encoding: String.Encoding) throws\nProduces a string created by reading data from the file at a given path interpreted using a given encoding.\ninit(contentsOfFile: String, usedEncoding: inout String.Encoding) throws\nProduces a string created by reading data from the file at a given path and returns by reference the encoding used to interpret the file."
  },
  {
    "title": "init(contentsOfFile:encoding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(contentsoffile:encoding:)",
    "html": "See Also\nCreating a String from a File or URL\ninit(contentsOf: URL) throws\ninit(contentsOf: URL, encoding: String.Encoding) throws\nProduces a string created by reading data from a given URL interpreted using a given encoding. Errors are written into the inout error argument.\ninit(contentsOf: URL, usedEncoding: inout String.Encoding) throws\nProduces a string created by reading data from a given URL and returns by reference the encoding used to interpret the data. Errors are written into the inout error argument.\ninit(contentsOfFile: String) throws\ninit(contentsOfFile: String, usedEncoding: inout String.Encoding) throws\nProduces a string created by reading data from the file at a given path and returns by reference the encoding used to interpret the file."
  },
  {
    "title": "init(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(contentsof:)",
    "html": "See Also\nCreating a String from a File or URL\ninit(contentsOf: URL, encoding: String.Encoding) throws\nProduces a string created by reading data from a given URL interpreted using a given encoding. Errors are written into the inout error argument.\ninit(contentsOf: URL, usedEncoding: inout String.Encoding) throws\nProduces a string created by reading data from a given URL and returns by reference the encoding used to interpret the data. Errors are written into the inout error argument.\ninit(contentsOfFile: String) throws\ninit(contentsOfFile: String, encoding: String.Encoding) throws\nProduces a string created by reading data from the file at a given path interpreted using a given encoding.\ninit(contentsOfFile: String, usedEncoding: inout String.Encoding) throws\nProduces a string created by reading data from the file at a given path and returns by reference the encoding used to interpret the file."
  },
  {
    "title": "init(contentsOf:encoding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(contentsof:encoding:)",
    "html": "See Also\nCreating a String from a File or URL\ninit(contentsOf: URL) throws\ninit(contentsOf: URL, usedEncoding: inout String.Encoding) throws\nProduces a string created by reading data from a given URL and returns by reference the encoding used to interpret the data. Errors are written into the inout error argument.\ninit(contentsOfFile: String) throws\ninit(contentsOfFile: String, encoding: String.Encoding) throws\nProduces a string created by reading data from the file at a given path interpreted using a given encoding.\ninit(contentsOfFile: String, usedEncoding: inout String.Encoding) throws\nProduces a string created by reading data from the file at a given path and returns by reference the encoding used to interpret the file."
  },
  {
    "title": "init(describing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(describing:)-67ncf",
    "html": "Discussion\n\nUse this initializer to convert an instance of any type to its preferred representation as a String instance. The initializer creates the string representation of instance in one of the following ways, depending on its protocol conformance:\n\nIf instance conforms to the TextOutputStreamable protocol, the result is obtained by calling instance.write(to: s) on an empty string s.\n\nIf instance conforms to the CustomStringConvertible protocol, the result is instance.description.\n\nIf instance conforms to the CustomDebugStringConvertible protocol, the result is instance.debugDescription.\n\nAn unspecified result is supplied automatically by the Swift standard library.\n\nFor example, this custom Point struct uses the default representation supplied by the standard library.\n\nstruct Point {\n    let x: Int, y: Int\n}\n\n\nlet p = Point(x: 21, y: 30)\nprint(String(describing: p))\n// Prints \"Point(x: 21, y: 30)\"\n\n\nAfter adding CustomStringConvertible conformance by implementing the description property, Point provides its own custom representation.\n\nextension Point: CustomStringConvertible {\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nprint(String(describing: p))\n// Prints \"(21, 30)\"\n\nSee Also\nConverting Other Types to Strings\ninit<T>(T)\nCreates an instance from the description of a given LosslessStringConvertible instance.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(reflecting: Subject)\nCreates a string with a detailed representation of the given value, suitable for debugging."
  },
  {
    "title": "init(reflecting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(reflecting:)",
    "html": "Discussion\n\nUse this initializer to convert an instance of any type to its custom debugging representation. The initializer creates the string representation of instance in one of the following ways, depending on its protocol conformance:\n\nIf subject conforms to the CustomDebugStringConvertible protocol, the result is subject.debugDescription.\n\nIf subject conforms to the CustomStringConvertible protocol, the result is subject.description.\n\nIf subject conforms to the TextOutputStreamable protocol, the result is obtained by calling subject.write(to: s) on an empty string s.\n\nAn unspecified result is supplied automatically by the Swift standard library.\n\nFor example, this custom Point struct uses the default representation supplied by the standard library.\n\nstruct Point {\n    let x: Int, y: Int\n}\n\n\nlet p = Point(x: 21, y: 30)\nprint(String(reflecting: p))\n// Prints \"p: Point = {\n//           x = 21\n//           y = 30\n//         }\"\n\n\nAfter adding CustomDebugStringConvertible conformance by implementing the debugDescription property, Point provides its own custom debugging representation.\n\nextension Point: CustomDebugStringConvertible {\n    var debugDescription: String {\n        return \"Point(x: \\(x), y: \\(y))\"\n    }\n}\n\n\nprint(String(reflecting: p))\n// Prints \"Point(x: 21, y: 30)\"\n\nSee Also\nConverting Other Types to Strings\ninit<T>(T)\nCreates an instance from the description of a given LosslessStringConvertible instance.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value."
  },
  {
    "title": "init(describing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(describing:)-6ttci",
    "html": "Discussion\n\nUse this initializer to convert an instance of any type to its preferred representation as a String instance. The initializer creates the string representation of instance in one of the following ways, depending on its protocol conformance:\n\nIf instance conforms to the TextOutputStreamable protocol, the result is obtained by calling instance.write(to: s) on an empty string s.\n\nIf instance conforms to the CustomStringConvertible protocol, the result is instance.description.\n\nIf instance conforms to the CustomDebugStringConvertible protocol, the result is instance.debugDescription.\n\nAn unspecified result is supplied automatically by the Swift standard library.\n\nFor example, this custom Point struct uses the default representation supplied by the standard library.\n\nstruct Point {\n    let x: Int, y: Int\n}\n\n\nlet p = Point(x: 21, y: 30)\nprint(String(describing: p))\n// Prints \"Point(x: 21, y: 30)\"\n\n\nAfter adding CustomStringConvertible conformance by implementing the description property, Point provides its own custom representation.\n\nextension Point: CustomStringConvertible {\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nprint(String(describing: p))\n// Prints \"(21, 30)\"\n\nSee Also\nConverting Other Types to Strings\ninit<T>(T)\nCreates an instance from the description of a given LosslessStringConvertible instance.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(reflecting: Subject)\nCreates a string with a detailed representation of the given value, suitable for debugging."
  },
  {
    "title": "init(describing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(describing:)-588wb",
    "html": "Discussion\n\nUse this initializer to convert an instance of any type to its preferred representation as a String instance. The initializer creates the string representation of instance in one of the following ways, depending on its protocol conformance:\n\nIf instance conforms to the TextOutputStreamable protocol, the result is obtained by calling instance.write(to: s) on an empty string s.\n\nIf instance conforms to the CustomStringConvertible protocol, the result is instance.description.\n\nIf instance conforms to the CustomDebugStringConvertible protocol, the result is instance.debugDescription.\n\nAn unspecified result is supplied automatically by the Swift standard library.\n\nFor example, this custom Point struct uses the default representation supplied by the standard library.\n\nstruct Point {\n    let x: Int, y: Int\n}\n\n\nlet p = Point(x: 21, y: 30)\nprint(String(describing: p))\n// Prints \"Point(x: 21, y: 30)\"\n\n\nAfter adding CustomStringConvertible conformance by implementing the description property, Point provides its own custom representation.\n\nextension Point: CustomStringConvertible {\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nprint(String(describing: p))\n// Prints \"(21, 30)\"\n\nSee Also\nConverting Other Types to Strings\ninit<T>(T)\nCreates an instance from the description of a given LosslessStringConvertible instance.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(reflecting: Subject)\nCreates a string with a detailed representation of the given value, suitable for debugging."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/index/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (CollectionDifference<ChangeElement>.Index, CollectionDifference<ChangeElement>.Index) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "String.LocalizationValue.UnicodeScalarLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/unicodescalarliteraltype",
    "html": "Discussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(_:)-1ywfq",
    "html": "See Also\nConverting Other Types to Strings\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(reflecting: Subject)\nCreates a string with a detailed representation of the given value, suitable for debugging."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/placeholder/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements."
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/init(stringliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/index/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func < (LazyPrefixWhileCollection<Base>.Index, LazyPrefixWhileCollection<Base>.Index) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nAvailable when Base conforms to Collection.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/localizationvalue/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/distance(from:to:)",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nUnless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyregexoutput/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: Int\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: Int\nThe position of the first element in a nonempty collection.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nfunc trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nSubscripts\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript(Int) -> AnyRegexOutput.Element\nAccesses the element at the specified position.\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript(Range<Self.Index>) -> Slice<Self>\nAccesses a contiguous subrange of the collection’s elements.\nAvailable when SubSequence is Slice<Self>.\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "first | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/first",
    "html": "Discussion\n\nIf the collection is empty, the value of this property is nil.\n\nlet numbers = [10, 20, 30, 40, 50]\nif let firstNumber = numbers.first {\n    print(firstNumber)\n}\n// Prints \"10\"\n"
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/isempty",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/index(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.\n\nlet s = \"Swift\"\nlet i = s.index(s.startIndex, offsetBy: 4)\nprint(s[i])\n// Prints \"t\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/droplast(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop off the end of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence that leaves off the specified number of elements at the end.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyregexoutput/subscript(_:)-6qdcr",
    "html": "Parameters\nname\n\nThe name of the capture to access.\n\nReturn Value\n\nAn element providing information about the capture, if there is a capture named name; otherwise, nil."
  },
  {
    "title": "prefix(through:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/prefix(through:)",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "index(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/index(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.\n\nlet s = \"Swift\"\nif let i = s.index(s.startIndex, offsetBy: 4, limitedBy: s.endIndex) {\n    print(s[i])\n}\n// Prints \"t\"\n\n\nThe next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.\n\nlet j = s.index(s.startIndex, offsetBy: 6, limitedBy: s.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/map(_:)-75tmo",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n"
  },
  {
    "title": "randomElement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/randomelement()",
    "html": "Return Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement()!\n// randomName == \"Amani\"\n\n\nThis method is equivalent to calling randomElement(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "suffix(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/suffix(from:)",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/split(separator:maxsplits:omittingemptysubsequences:)-1dhc",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting at the beginning of this collection with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "randomElement(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/randomelement(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when choosing a random element.\n\nReturn Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement(using: &myGenerator)!\n// randomName == \"Amani\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.\n\nDiscussion\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.\n\nisSeparator\n\nA closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "init(platformString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(platformstring:)-36ydz",
    "html": "Deprecated\n\nUse String.init(_ scalar: Unicode.Scalar)"
  },
  {
    "title": "withUTF8Buffer(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/withutf8buffer(_:)",
    "html": "Parameters\nbody\n\nA closure that takes a buffer pointer to the static string’s UTF-8 code unit sequence as its sole argument. If the closure has a return value, that value is also used as the return value of the withUTF8Buffer(_:) method. The pointer argument is valid only for the duration of the method’s execution.\n\nReturn Value\n\nThe return value, if any, of the body closure.\n\nDiscussion\n\nThis method works regardless of whether the static string stores a pointer or a single Unicode scalar value.\n\nThe pointer argument to body is valid only during the execution of withUTF8Buffer(_:). Do not store or return the pointer for later use."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/+(_:_:)-655mi",
    "html": "See Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: String)\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func += (inout String, String)\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "reserveCapacity(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/reservecapacity(_:)-1ozk3",
    "html": "Parameters\nn\n\nThe minimum number of ASCII character’s worth of storage to allocate.\n\nDiscussion\n\nBecause each character in a string can require more than a single ASCII character’s worth of storage, additional allocation may be necessary when adding characters to a string after a call to reserveCapacity(_:).\n\nComplexity\n\nO(n)\n\nSee Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: String)\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nstatic func + (String, String) -> String\nstatic func += (inout String, String)\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "append(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/append(contentsof:)-7est5",
    "html": "Parameters\nnewElements\n\nA sequence of characters.\n\nSee Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: String)\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func + (String, String) -> String\nstatic func += (inout String, String)\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/+(_:_:)-9fm57",
    "html": "Parameters\nlhs\n\nA range-replaceable collection.\n\nrhs\n\nAnother range-replaceable collection.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of two integer arrays.\n\nlet lowerNumbers = [1, 2, 3, 4]\nlet higherNumbers: ContiguousArray = [5, 6, 7, 8, 9, 10]\nlet allNumbers = lowerNumbers + higherNumbers\nprint(allNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of the argument on the left-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int].\n\nSee Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: String)\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func + (String, String) -> String\nstatic func += (inout String, String)\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "withPlatformString(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/withplatformstring(_:)",
    "html": "Parameters\nbody\n\nA closure with a pointer parameter that points to a null-terminated platform string. If body has a return value, that value is also used as the return value for this method.\n\nReturn Value\n\nThe return value, if any, of the body closure parameter.\n\nDiscussion\n\nThe pointer passed as an argument to body is valid only during the execution of this method. Don’t try to store the pointer for later use."
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/+(_:_:)-n329",
    "html": "Parameters\nlhs\n\nA range-replaceable collection.\n\nrhs\n\nA collection or finite sequence.\n\nDiscussion\n\nThe two arguments must have the same Element type. For example, you can concatenate the elements of an integer array and a Range<Int> instance.\n\nlet numbers = [1, 2, 3, 4]\nlet moreNumbers = numbers + (5...10)\nprint(moreNumbers)\n// Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\n\nThe resulting collection has the type of the argument on the left-hand side. In the example above, moreNumbers has the same type as numbers, which is [Int].\n\nSee Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: String)\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func + (String, String) -> String\nstatic func += (inout String, String)\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/+=(_:_:)-4pvxa",
    "html": "See Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: String)\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func + (String, String) -> String\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "append(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/append(contentsof:)-9foms",
    "html": "Parameters\nnewElements\n\nThe elements to append to the collection.\n\nDiscussion\n\nThe collection being appended to allocates any additional necessary storage to hold the new elements.\n\nThe following example appends the elements of a Range<Int> instance to an array of integers:\n\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.append(contentsOf: 10...15)\nprint(numbers)\n// Prints \"[1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15]\"\n\n\nComplexity\n\nO(m), where m is the length of newElements.\n\nSee Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: String)\nfunc append(contentsOf: Substring)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func + (String, String) -> String\nstatic func += (inout String, String)\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "append(contentsOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/append(contentsof:)-9vb4t",
    "html": "See Also\nAppending Strings and Characters\nfunc append(String)\nAppends the given string to this string.\nfunc append(Character)\nAppends the given character to the string.\nfunc append(contentsOf: String)\nfunc append<S>(contentsOf: S)\nAppends the characters in the given sequence to the string.\nfunc append<S>(contentsOf: S)\nAdds the elements of a sequence or collection to the end of this collection.\nfunc reserveCapacity(Int)\nReserves enough space in the string’s underlying storage to store the specified number of ASCII characters.\nstatic func + (String, String) -> String\nstatic func += (inout String, String)\nstatic func + <Other>(Other, Self) -> Self\nCreates a new collection by concatenating the elements of a sequence and a collection.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of a collection and a sequence.\nstatic func + <Other>(Self, Other) -> Self\nCreates a new collection by concatenating the elements of two collections.\nstatic func += <Other>(inout Self, Other)\nAppends the elements of a sequence to a range-replaceable collection."
  },
  {
    "title": "decodeCString(_:as:repairingInvalidCodeUnits:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/decodecstring(_:as:repairinginvalidcodeunits:)-46n2p",
    "html": "Parameters\ncString\n\nA pointer to a null-terminated code sequence encoded in encoding.\n\nencoding\n\nThe Unicode encoding of the data referenced by cString.\n\nisRepairing\n\nPass true to create a new string, even when the data referenced by cString contains ill-formed sequences. Ill-formed sequences are replaced with the Unicode replacement character (\"\\u{FFFD}\"). Pass false to interrupt the creation of the new string if an ill-formed sequence is detected.\n\nReturn Value\n\nA tuple with the new string and a Boolean value that indicates whether any repairs were made. If isRepairing is false and an ill-formed sequence is detected, this method returns nil.\n\nDiscussion\n\nWhen you pass true as isRepairing, this method replaces ill-formed sequences with the Unicode replacement character (\"\\u{FFFD}\"); otherwise, an ill-formed sequence causes this method to stop decoding and return nil.\n\nThe following example calls this method with pointers to the contents of two different CChar arrays—the first with well-formed UTF-8 code unit sequences and the second with an ill-formed sequence at the end.\n\nlet validUTF8: [UInt8] = [67, 97, 102, 195, 169, 0]\nvalidUTF8.withUnsafeBufferPointer { ptr in\n    let s = String.decodeCString(ptr.baseAddress,\n                                 as: UTF8.self,\n                                 repairingInvalidCodeUnits: true)\n    print(s)\n}\n// Prints \"Optional((result: \"Café\", repairsMade: false))\"\n\n\nlet invalidUTF8: [UInt8] = [67, 97, 102, 195, 0]\ninvalidUTF8.withUnsafeBufferPointer { ptr in\n    let s = String.decodeCString(ptr.baseAddress,\n                                 as: UTF8.self,\n                                 repairingInvalidCodeUnits: true)\n    print(s)\n}\n// Prints \"Optional((result: \"Caf�\", repairsMade: true))\"\n\nSee Also\nConverting a C String\ninit?<S>(bytes: S, encoding: String.Encoding)\nCreates a new string equivalent to the given bytes interpreted in the specified encoding.\ninit?(bytesNoCopy: UnsafeMutableRawPointer, length: Int, encoding: String.Encoding, freeWhenDone: Bool)\nCreates a new string that contains the specified number of bytes from the given buffer, interpreted in the specified encoding, and optionally frees the buffer.\ninit(cString: UnsafePointer<CChar>)\nCreates a new string by copying the null-terminated UTF-8 data referenced by the given pointer.\ninit(cString: UnsafePointer<UInt8>)\nCreates a new string by copying the null-terminated UTF-8 data referenced by the given pointer.\ninit<Encoding>(decodingCString: [Encoding.CodeUnit], as: Encoding.Type)"
  },
  {
    "title": "init(contentsOf:usedEncoding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(contentsof:usedencoding:)",
    "html": "See Also\nCreating a String from a File or URL\ninit(contentsOf: URL) throws\ninit(contentsOf: URL, encoding: String.Encoding) throws\nProduces a string created by reading data from a given URL interpreted using a given encoding. Errors are written into the inout error argument.\ninit(contentsOfFile: String) throws\ninit(contentsOfFile: String, encoding: String.Encoding) throws\nProduces a string created by reading data from the file at a given path interpreted using a given encoding.\ninit(contentsOfFile: String, usedEncoding: inout String.Encoding) throws\nProduces a string created by reading data from the file at a given path and returns by reference the encoding used to interpret the file."
  },
  {
    "title": "withMutableCharacters(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/withmutablecharacters(_:)",
    "html": "Discussion\n\nPrevious versions of Swift provided this view since String itself was not a collection. String is now a collection of characters, so this type is now just an alias for String."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/collection-implementations",
    "html": "Topics\nStructures\nstruct Index\nA position in a LazyPrefixWhileCollection or LazyPrefixWhileBidirectionalCollection instance.\nAvailable when Base conforms to Collection.\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: LazyPrefixWhileSequence<Base>.Index\nThe collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.\nAvailable when Base conforms to Collection.\nvar indices: DefaultIndices<Self>\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Indices is DefaultIndices<Self>.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: LazyPrefixWhileSequence<Base>.Index\nThe position of the first element in a nonempty collection.\nAvailable when Base conforms to Collection.\nInstance Methods\nfunc distance(from: Self.Index, to: Self.Index) -> Int\nReturns the distance between two indices.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(Self.Index, offsetBy: Int) -> Self.Index\nReturns an index that is the specified distance from the given index.\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: LazyPrefixWhileSequence<Base>.Index) -> LazyPrefixWhileSequence<Base>.Index\nReturns the position immediately after the given index.\nAvailable when Base conforms to Collection.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript(Range<Self.Index>) -> Slice<Self>\nAccesses a contiguous subrange of the collection’s elements.\nAvailable when SubSequence is Slice<Self>.\nsubscript(LazyPrefixWhileSequence<Base>.Index) -> LazyPrefixWhileSequence<Base>.Element\nAccesses the element at the specified position.\nAvailable when Base conforms to Collection.\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nType Aliases\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\nAvailable when Base conforms to Collection.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection.\nAvailable when Base conforms to Collection."
  },
  {
    "title": "init(describing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/init(describing:)-hsqw",
    "html": "Discussion\n\nUse this initializer to convert an instance of any type to its preferred representation as a String instance. The initializer creates the string representation of instance in one of the following ways, depending on its protocol conformance:\n\nIf instance conforms to the TextOutputStreamable protocol, the result is obtained by calling instance.write(to: s) on an empty string s.\n\nIf instance conforms to the CustomStringConvertible protocol, the result is instance.description.\n\nIf instance conforms to the CustomDebugStringConvertible protocol, the result is instance.debugDescription.\n\nAn unspecified result is supplied automatically by the Swift standard library.\n\nFor example, this custom Point struct uses the default representation supplied by the standard library.\n\nAfter adding CustomStringConvertible conformance by implementing the description property, Point provides its own custom representation.\n\nSee Also\nConverting Other Types to Strings\ninit<T>(T)\nCreates an instance from the description of a given LosslessStringConvertible instance.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(describing: Subject)\nCreates a string representing the given value.\ninit<Subject>(reflecting: Subject)\nCreates a string with a detailed representation of the given value, suitable for debugging."
  },
  {
    "title": "_CustomPlaygroundQuickLookable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/_customplaygroundquicklookable-implementations",
    "html": "Topics\nInstance Properties\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for this instance."
  },
  {
    "title": "addingReportingOverflow(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/addingreportingoverflow(_:)",
    "html": "Required\n\nParameters\nrhs\n\nThe value to add to this value.\n\nReturn Value\n\nA tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire sum. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated sum of this value and rhs."
  },
  {
    "title": "bitWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/bitwidth-swift.type.property",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nAn unsigned, fixed-width integer type can represent values from 0 through (2 ** bitWidth) - 1, where ** is exponentiation. A signed, fixed-width integer type can represent values from -(2 ** (bitWidth - 1)) through (2 ** (bitWidth - 1)) - 1. For example, the Int8 type has a bitWidth value of 8 and can store any integer in the range -128...127.\n\nDefault Implementations\nBinaryInteger Implementations\nvar bitWidth: Int\nThe number of bits in the binary representation of this value."
  },
  {
    "title": "dividedReportingOverflow(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/dividedreportingoverflow(by:)",
    "html": "Required\n\nParameters\nrhs\n\nThe value to divide this value by.\n\nReturn Value\n\nA tuple containing the result of the division along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire quotient. If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend.\n\nDiscussion\n\nDividing by zero is not an error when using this method. For a value x, the result of x.dividedReportingOverflow(by: 0) is (x, true)."
  },
  {
    "title": "remainderReportingOverflow(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/remainderreportingoverflow(dividingby:)",
    "html": "Required\n\nParameters\nrhs\n\nThe value to divide this value by.\n\nReturn Value\n\nA tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire remainder. If the overflow component is true, an overflow occurred during division and the partialValue component contains either the entire remainder or, if the remainder is undefined, the dividend.\n\nDiscussion\n\nDividing by zero is not an error when using this method. For a value x, the result of x.remainderReportingOverflow(dividingBy: 0) is (x, true)."
  },
  {
    "title": "CollectionDifference.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/collection-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar first: Self.Element?\nThe first element of the collection.\nvar indices: DefaultIndices<Self>\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Indices is DefaultIndices<Self>.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> String.UTF16View.Iterator\nReturns an iterator over the elements of the collection.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "CustomStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/sequence-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nAn iterator over the initial elements traversed by a base iterator that satisfy a given predicate.\nAvailable when Base conforms to Sequence.\nInstance Properties\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc joined() -> FlattenSequence<Self>\nReturns the elements of this sequence of sequences, concatenated.\nfunc joined<Separator>(separator: Separator) -> JoinedSequence<Self>\nReturns the concatenated elements of this sequence of sequences, inserting the given separator between each element.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element conforms to StringProtocol.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> LazyPrefixWhileSequence<Base>.Iterator\nReturns an iterator over the elements of this sequence.\nAvailable when Base conforms to Sequence.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "LazySequenceProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/lazysequenceprotocol-implementations",
    "html": "Topics\nInstance Properties\nvar elements: Self\nIdentical to self.\nAvailable when Self is Self.Elements.\nvar lazy: Self.Elements\nInstance Methods\nfunc compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>\nReturns a lazy sequence that skips any initial elements that satisfy predicate.\nfunc filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>\nReturns the elements of self that satisfy isIncluded.\nfunc flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>\nReturns the non-nil results of mapping the given transformation over this sequence.\nfunc flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>\nReturns the concatenated results of mapping the given transformation over this sequence.\nfunc joined() -> LazySequence<FlattenSequence<Self.Elements>>\nReturns a lazy sequence that concatenates the elements of this sequence of sequences.\nAvailable when Element conforms to Sequence.\nfunc map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>\nReturns a LazyMapSequence over this Sequence. The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.\nfunc prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>\nReturns a lazy sequence of the initial consecutive elements that satisfy predicate.\nType Aliases\ntypealias Elements\nA Sequence that can contain the same elements as this one, possibly with a simpler type.\nAvailable when Base conforms to Sequence."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar endIndex: String.UTF16View.Index\nThe “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar last: Self.Element?\nThe last element of the collection.\nvar startIndex: String.UTF16View.Index\nThe position of the first code unit if the String is nonempty; identical to endIndex otherwise.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc distance(from: String.UTF16View.Index, to: String.UTF16View.Index) -> Int\nReturns the distance between two indices.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc index(String.UTF16View.Index, offsetBy: Int) -> String.UTF16View.Index\nReturns an index that is the specified distance from the given index.\nfunc index(String.UTF16View.Index, offsetBy: Int, limitedBy: String.UTF16View.Index) -> String.UTF16View.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: String.UTF16View.Index) -> String.UTF16View.Index\nReturns the position immediately after the given index.\nfunc index(before: String.UTF16View.Index) -> String.UTF16View.Index\nReturns the position immediately before the given index.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection.\nSubscripts\nsubscript(Range<String.UTF16View.Index>) -> Substring.UTF16View\nAccesses a contiguous subrange of the collection’s elements.\nsubscript(String.UTF16View.Index) -> UTF16.CodeUnit\nAccesses the code unit at the given position."
  },
  {
    "title": "LazyPrefixWhileSequence.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "randomElement(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/randomelement(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when choosing a random element.\n\nReturn Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement(using: &myGenerator)!\n// randomName == \"Amani\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.\n\nNote\n\nThe algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/subscript(_:)-98noi",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/subscript(_:)-59k49",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe accessed slice uses the same indices for the same elements as the original collection. Always use the slice’s startIndex property instead of assuming that its indices start at a particular value.\n\nThis example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2 ..< streets.endIndex]\nprint(streetsSlice)\n// Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"\n\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// Prints \"Evarts\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(upTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/prefix(upto:)",
    "html": "Parameters\nend\n\nThe “past the end” index of the resulting subsequence. end must be a valid index of the collection.\n\nReturn Value\n\nA subsequence up to, but not including, the end position.\n\nDiscussion\n\nThe resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(upTo: i))\n}\n// Prints \"[10, 20, 30]\"\n\n\nPassing the collection’s starting index as the end parameter results in an empty subsequence.\n\nprint(numbers.prefix(upTo: numbers.startIndex))\n// Prints \"[]\"\n\n\nUsing the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[..<i])\n}\n// Prints \"[10, 20, 30]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "prefix(through:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/prefix(through:)",
    "html": "Parameters\nposition\n\nThe index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property.\n\nReturn Value\n\nA subsequence up to, and including, the given position.\n\nDiscussion\n\nThe resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.prefix(through: i))\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nUsing the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[...i])\n}\n// Prints \"[10, 20, 30, 40]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "index(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/index(_:offsetby:)-2y8r8",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nReturn Value\n\nAn index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:).\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.\n\nlet s = \"Swift\"\nlet i = s.index(s.startIndex, offsetBy: 4)\nprint(s[i])\n// Prints \"t\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/map(_:)-f55l",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n"
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "formIndex(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/formindex(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex."
  },
  {
    "title": "index(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/index(_:offsetby:limitedby:)-279cj",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\nAn index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil.\n\nDiscussion\n\nThe following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.\n\nlet s = \"Swift\"\nif let i = s.index(s.startIndex, offsetBy: 4, limitedBy: s.endIndex) {\n    print(s[i])\n}\n// Prints \"t\"\n\n\nThe next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.\n\nlet j = s.index(s.startIndex, offsetBy: 6, limitedBy: s.endIndex)\nprint(j)\n// Prints \"nil\"\n\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/formindex(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "formIndex(_:offsetBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/formindex(_:offsetby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "firstIndex(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/firstindex(of:)",
    "html": "Parameters\nelement\n\nAn element to search for in the collection.\n\nReturn Value\n\nThe first index where element is found. If element is not found in the collection, returns nil.\n\nDiscussion\n\nAfter using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.\n\nvar students = [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\"]\nif let i = students.firstIndex(of: \"Maxime\") {\n    students[i] = \"Max\"\n}\nprint(students)\n// Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Max\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "firstIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/firstindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.firstIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Abena starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "distance(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/distance(from:to:)-5ytzv",
    "html": "Parameters\nstart\n\nA valid index of the collection.\n\nend\n\nAnother valid index of the collection. If end is equal to start, the result is zero.\n\nReturn Value\n\nThe distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol.\n\nDiscussion\n\nUnless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "isEmpty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/isempty",
    "html": "Discussion\n\nWhen you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.\n\nlet horseName = \"Silver\"\nif horseName.isEmpty {\n    print(\"My horse has no name.\")\n} else {\n    print(\"Hi ho, \\(horseName)!\")\n}\n// Prints \"Hi ho, Silver!\")\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "firstIndex(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/firstindex(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\nThe index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\n\nDiscussion\n\nYou can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:\n\nlet students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nif let i = students.firstIndex(where: { $0.hasPrefix(\"A\") }) {\n    print(\"\\(students[i]) starts with 'A'!\")\n}\n// Prints \"Abena starts with 'A'!\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/underestimatedcount",
    "html": "Discussion\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "formIndex(_:offsetBy:limitedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/formindex(_:offsetby:limitedby:)",
    "html": "Parameters\ni\n\nA valid index of the collection.\n\ndistance\n\nThe distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.\n\nlimit\n\nA valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.\n\nReturn Value\n\ntrue if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit.\n\nDiscussion\n\nThe value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyhashable/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/collectiondifference/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.\n\nReturn Value\n\nA subsequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyregexoutput/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "extractValues(as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyregexoutput/extractvalues(as:)",
    "html": "Parameters\noutputType\n\nThe expected output type.\n\nReturn Value\n\nThe output, if the underlying value can be converted to outputType; otherwise, nil."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyregexoutput/randomaccesscollection-implementations",
    "html": "Topics\nStructures\nstruct Element\nAn individual match output value.\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: Int) -> Int\nReturns the position immediately after the given index.\nfunc index(before: Int) -> Int\nReturns the position immediately before the given index."
  },
  {
    "title": "random(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/random(in:)-467fr",
    "html": "Parameters\nrange\n\nThe range in which to create a random value.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate an integer within a specific range. This example creates three new values in the range 1...100.\n\nfor _ in 1...3 {\n    print(Int.random(in: 1...100))\n}\n// Prints \"53\"\n// Prints \"64\"\n// Prints \"5\"\n\n\nThis method is equivalent to calling random(in:using:), passing in the system’s default random generator."
  },
  {
    "title": "base | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyhashable/base",
    "html": "Discussion\n\nThe base property can be cast back to its original type using one of the type casting operators (as?, as!, or as).\n\nlet anyMessage = AnyHashable(\"Hello world!\")\nif let unwrappedMessage = anyMessage.base as? String {\n    print(unwrappedMessage)\n}\n// Prints \"Hello world!\"\n"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/equatable-implementations",
    "html": "Topics\nOperators\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/comparable-implementations",
    "html": "Topics\nOperators\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func < (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/closedrange/index/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func < (ClosedRange<Bound>.Index, ClosedRange<Bound>.Index) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nAvailable when Bound conforms to Strideable and Bound.Stride conforms to SignedInteger.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/closedrange/subscript(_:)-60m0l",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the range, and must not equal the range’s end index.\n\nOverview\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/closedrange/subscript(_:)-vph6",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nFor example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2..<5]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")!    // 4\nprint(streets[index])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "&*(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/&*(_:_:)",
    "html": "Parameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply.\n\nDiscussion\n\nThe overflow multiplication operator (&*) discards any bits that overflow the fixed width of the integer type. In the following example, the product of 10 and 50 is greater than the maximum representable Int8 value, so the result is the partial value after discarding the overflowing bits.\n\nlet x: Int8 = 10 &* 5\n// x == 50\nlet y: Int8 = 10 &* 50\n// y == -12 (after overflow)\n\n\nFor more about arithmetic with overflow operators, see Overflow Operators in The Swift Programming Language."
  },
  {
    "title": "&-=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/&-=(_:_:)",
    "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDiscussion\n\nThe masking subtraction assignment operator (&-=) silently wraps any overflow that occurs during the operation. In the following example, the difference of 10 and 21 is less than zero, the minimum representable UInt value, so the result is the result is the partial value after discarding the overflowing bits.\n\nvar x: Int8 = 21\nx &-= 10\n// x == 11\nvar y: UInt8 = 10\ny &-= 21\n// y == 245 (after overflow)\n\n\nFor more about arithmetic with overflow operators, see Overflow Operators in The Swift Programming Language."
  },
  {
    "title": "&+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/&+=(_:_:)",
    "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDiscussion\n\nThe masking addition assignment operator (&+=) silently wraps any overflow that occurs during the operation. In the following example, the sum of 100 and 121 is greater than the maximum representable Int8 value, so the result is the partial value after discarding the overflowing bits.\n\nvar x: Int8 = 10\nx &+= 21\n// x == 31\nvar y: Int8 = 100\ny &+= 121\n// y == -35 (after overflow)\n\n\nFor more about arithmetic with overflow operators, see Overflow Operators in The Swift Programming Language."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyregexoutput/init(_:)",
    "html": "Discussion\n\nYou can use this initializer when you need an AnyRegexOutput instance instead of the output type of a strongly-typed Regex.Match."
  },
  {
    "title": "init(bigEndian:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/init(bigendian:)-ynpy",
    "html": "Required Default implementation provided.\n\nParameters\nvalue\n\nA value to use as the big-endian representation of the new integer.\n\nDefault Implementations\nFixedWidthInteger Implementations\ninit(bigEndian: Self)\nCreates an integer from its big-endian representation, changing the byte order if necessary."
  },
  {
    "title": "&-(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/&-(_:_:)",
    "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDiscussion\n\nThe overflow subtraction operator (&-) discards any bits that overflow the fixed width of the integer type. In the following example, the difference of 10 and 21 is less than zero, the minimum representable UInt value, so the result is the partial value after discarding the overflowing bits.\n\nlet x: UInt8 = 21 &- 10\n// x == 11\nlet y: UInt8 = 10 &- 21\n// y == 245 (after overflow)\n\n\nFor more about arithmetic with overflow operators, see Overflow Operators in The Swift Programming Language."
  },
  {
    "title": "&<<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/&__(_:_:)-4j1s7",
    "html": "Required Default implementations provided.\n\nParameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nUse the masking left shift operator (&<<) when you need to perform a shift and are sure that the shift amount is in the range 0..<lhs.bitWidth. Before shifting, the masking left shift operator masks the shift to this range. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nlet x: UInt8 = 30                 // 0b00011110\nlet y = x &<< 2\n// y == 120                       // 0b01111000\n\n\nHowever, if you use 8 as the shift amount, the method first masks the shift amount to zero, and then performs the shift, resulting in no change to the original value.\n\nlet z = x &<< 8\n// z == 30                        // 0b00011110\n\n\nIf the bit width of the shifted integer type is a power of two, masking is performed using a bitmask; otherwise, masking is performed using a modulo operation.\n\nDefault Implementations\nFixedWidthInteger Implementations\nstatic func &<< <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &<< (Self, Self) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width."
  },
  {
    "title": "bigEndian | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/bigendian-6642a",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nIf necessary, the byte order of this value is reversed from the typical byte order of this integer type. On a big-endian platform, for any integer x, x == x.bigEndian.\n\nDefault Implementations\nFixedWidthInteger Implementations\nvar bigEndian: Self\nThe big-endian representation of this integer."
  },
  {
    "title": "&>>(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/&__(_:_:)-1sn91",
    "html": "Required Default implementations provided.\n\nParameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nUse the masking right shift operator (&>>) when you need to perform a shift and are sure that the shift amount is in the range 0..<lhs.bitWidth. Before shifting, the masking right shift operator masks the shift to this range. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nlet x: UInt8 = 30                 // 0b00011110\nlet y = x &>> 2\n// y == 7                         // 0b00000111\n\n\nHowever, if you use 8 as the shift amount, the method first masks the shift amount to zero, and then performs the shift, resulting in no change to the original value.\n\nlet z = x &>> 8\n// z == 30                        // 0b00011110\n\n\nIf the bit width of the shifted integer type is a power of two, masking is performed using a bitmask; otherwise, masking is performed using a modulo operation.\n\nDefault Implementations\nFixedWidthInteger Implementations\nstatic func &>> <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &>> (Self, Self) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width."
  },
  {
    "title": "&<<=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/&__=(_:_:)-q186",
    "html": "Required Default implementation provided.\n\nParameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nThe &<<= operator performs a masking shift, where the value used as rhs is masked to produce a value in the range 0..<lhs.bitWidth. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nvar x: UInt8 = 30                 // 0b00011110\nx &<<= 2\n// x == 120                       // 0b01111000\n\n\nHowever, if you pass 19 as rhs, the method first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.\n\nvar y: UInt8 = 30                 // 0b00011110\ny &<<= 19\n// y == 240                       // 0b11110000\n\nDefault Implementations\nFixedWidthInteger Implementations\nstatic func &<<= <Other>(inout Self, Other)\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable."
  },
  {
    "title": "&>>=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/&__=(_:_:)-2ffyd",
    "html": "Required Default implementation provided.\n\nParameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nThe &>>= operator performs a masking shift, where the value passed as rhs is masked to produce a value in the range 0..<lhs.bitWidth. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nvar x: UInt8 = 30                 // 0b00011110\nx &>>= 2\n// x == 7                         // 0b00000111\n\n\nHowever, if you use 19 as rhs, the operation first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.\n\nvar y: UInt8 = 30                 // 0b00011110\ny &>>= 19\n// y == 3                         // 0b00000011\n\nDefault Implementations\nFixedWidthInteger Implementations\nstatic func &>>= <Other>(inout Self, Other)\nCalculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable."
  },
  {
    "title": "init(_:radix:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/init(_:radix:)",
    "html": "Parameters\ntext\n\nThe ASCII representation of a number in the radix passed as radix.\n\nradix\n\nThe radix, or base, to use for converting text to an integer value. radix must be in the range 2...36. The default is 10.\n\nDiscussion\n\nThe string passed as text may begin with a plus or minus sign character (+ or -), followed by one or more numeric digits (0-9) or letters (a-z or A-Z). Parsing of the string is case insensitive.\n\nlet x = Int(\"123\")\n// x == 123\n\n\nlet y = Int(\"-123\", radix: 8)\n// y == -83\nlet y = Int(\"+123\", radix: 8)\n// y == +83\n\n\nlet z = Int(\"07b\", radix: 16)\n// z == 123\n\n\nIf text is in an invalid format or contains characters that are out of bounds for the given radix, or if the value it denotes in the given radix is not representable, the result is nil. For example, the following conversions result in nil:\n\nInt(\" 100\")                       // Includes whitespace\nInt(\"21-50\")                      // Invalid format\nInt(\"ff6600\")                     // Characters out of bounds\nInt(\"zzzzzzzzzzzzz\", radix: 36)   // Out of range\n"
  },
  {
    "title": "leadingZeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/leadingzerobitcount",
    "html": "Required\n\nDiscussion\n\nFor example, in a fixed-width integer type with a bitWidth value of 8, the number 31 has three leading zeros.\n\nlet x: Int8 = 0b0001_1111\n// x == 31\n// x.leadingZeroBitCount == 3\n\n\nIf the value is zero, then leadingZeroBitCount is equal to bitWidth."
  },
  {
    "title": "byteSwapped | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/byteswapped",
    "html": "Required"
  },
  {
    "title": "littleEndian | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/littleendian-4l6g0",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nIf necessary, the byte order of this value is reversed from the typical byte order of this integer type. On a little-endian platform, for any integer x, x == x.littleEndian.\n\nDefault Implementations\nFixedWidthInteger Implementations\nvar littleEndian: Self\nThe little-endian representation of this integer."
  },
  {
    "title": "multipliedFullWidth(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/multipliedfullwidth(by:)-1uech",
    "html": "Required Default implementation provided.\n\nParameters\nother\n\nThe value to multiply this value by.\n\nReturn Value\n\nA tuple containing the high and low parts of the result of multiplying this value and other.\n\nDiscussion\n\nUse this method to calculate the full result of a product that would otherwise overflow. Unlike traditional truncating multiplication, the multipliedFullWidth(by:) method returns a tuple containing both the high and low parts of the product of this value and other. The following example uses this method to multiply two Int8 values that normally overflow when multiplied:\n\nlet x: Int8 = 48\nlet y: Int8 = -40\nlet result = x.multipliedFullWidth(by: y)\n// result.high == -8\n// result.low  == 128\n\n\nThe product of x and y is -1920, which is too large to represent in an Int8 instance. The high and low components of the result value represent -1920 when concatenated to form a double-width integer; that is, using result.high as the high byte and result.low as the low byte of an Int16 instance.\n\nlet z = Int16(result.high) << 8 | Int16(result.low)\n// z == -1920\n\nDefault Implementations\nFixedWidthInteger Implementations\nfunc multipliedFullWidth(by: Self) -> (high: Self, low: Self.Magnitude)\nReturns a tuple containing the high and low parts of the result of multiplying this value by the given value."
  },
  {
    "title": "multipliedReportingOverflow(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/multipliedreportingoverflow(by:)",
    "html": "Required\n\nParameters\nrhs\n\nThe value to multiply by this value.\n\nReturn Value\n\nA tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire product. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs."
  },
  {
    "title": "nonzeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/nonzerobitcount",
    "html": "Required\n\nDiscussion\n\nFor example, in a fixed-width integer type with a bitWidth value of 8, the number 31 has five bits equal to 1.\n\nlet x: Int8 = 0b0001_1111\n// x == 31\n// x.nonzeroBitCount == 5\n"
  },
  {
    "title": "max | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/max",
    "html": "Required\n\nDiscussion\n\nFor unsigned integer types, this value is (2 ** bitWidth) - 1, where ** is exponentiation. For signed integer types, this value is (2 ** (bitWidth - 1)) - 1."
  },
  {
    "title": "subtractingReportingOverflow(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/subtractingreportingoverflow(_:)",
    "html": "Required\n\nParameters\nrhs\n\nThe value to subtract from this value.\n\nReturn Value\n\nA tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire difference. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated result of rhs subtracted from this value."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf16view/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nReturns a mirror that reflects the UTF-16 view of a string."
  },
  {
    "title": "suffix(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/suffix(from:)",
    "html": "Parameters\nstart\n\nThe index at which to start the resulting subsequence. start must be a valid index of the collection.\n\nReturn Value\n\nA subsequence starting at the start position.\n\nDiscussion\n\nThe following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:\n\nlet numbers = [10, 20, 30, 40, 50, 60]\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers.suffix(from: i))\n}\n// Prints \"[40, 50, 60]\"\n\n\nPassing the collection’s endIndex as the start parameter results in an empty subsequence.\n\nprint(numbers.suffix(from: numbers.endIndex))\n// Prints \"[]\"\n\n\nUsing the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).\n\nif let i = numbers.firstIndex(of: 40) {\n    print(numbers[i...])\n}\n// Prints \"[40, 50, 60]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/subscript(_:)-9tkrc",
    "html": "Parameters\nbounds\n\nA range of the collection’s indices. The bounds of the range must be valid indices of the collection.\n\nOverview\n\nThe range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.\n\nlet streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nlet streetsSlice = streets[2...]\nprint(streetsSlice)\n// [\"Channing\", \"Douglas\", \"Evarts\"]\n\n\nThe accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.\n\nlet index = streetsSlice.firstIndex(of: \"Evarts\")    // 4\nprint(streets[index!])\n// \"Evarts\"\n\n\nAlways use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.\n\nprint(streetsSlice.startIndex)\n// 2\nprint(streetsSlice[2])\n// \"Channing\"\n\n\nprint(streetsSlice[0])\n// error: Index out of bounds\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "randomElement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/randomelement()",
    "html": "Return Value\n\nA random element from the collection. If the collection is empty, the method returns nil.\n\nDiscussion\n\nCall randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:\n\nlet names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]\nlet randomName = names.randomElement()!\n// randomName == \"Amani\"\n\n\nThis method is equivalent to calling randomElement(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "split(separator:maxSplits:omittingEmptySubsequences:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/split(separator:maxsplits:omittingemptysubsequences:)-1na6p",
    "html": "Parameters\nseparator\n\nThe element that should be split upon.\n\nmaxSplits\n\nThe maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.\n\nReturn Value\n\nAn array of subsequences, split from this collection’s elements.\n\nDiscussion\n\nThe resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence.\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(separator: \" \"))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(line.split(separator: \" \", maxSplits: 1))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(line.split(separator: \" \", omittingEmptySubsequences: false))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the collection."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/index/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (LazyPrefixWhileCollection<Base>.Index, LazyPrefixWhileCollection<Base>.Index) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Base conforms to Collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyregexoutput/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc distance(from: Self.Index, to: Self.Index) -> Int\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc index(Self.Index, offsetBy: Int) -> Self.Index\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nfunc index(before: LazyPrefixWhileSequence<Base>.Index) -> LazyPrefixWhileSequence<Base>.Index\nReturns the position immediately before the given index.\nAvailable when Base conforms to BidirectionalCollection.\nfunc joined(separator: String) -> String\nReturns a new string by concatenating the elements of the sequence, adding the given separator between each element.\nAvailable when Element is String.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate."
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/lazyprefixwhilesequence/index/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Base conforms to Collection and Base.Index conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Base conforms to Collection and Base.Index conforms to Hashable."
  },
  {
    "title": "isLessThanOrEqualTo(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/islessthanorequalto(_:)",
    "html": "Required\n\nParameters\nother\n\nThe value to compare with this value.\n\nReturn Value\n\ntrue if other is greater than this value; otherwise, false. If either this value or other is NaN, the result of this method is false.\n\nDiscussion\n\nThis method serves as the basis for the less-than-or-equal-to operator (<=) for floating-point values. Some special cases apply:\n\nBecause NaN is incomparable with any value, this method returns false when called on NaN or when NaN is passed as other.\n\n-infinity compares less than or equal to all values except NaN.\n\nEvery value except NaN compares less than or equal to +infinity.\n\nlet x = 15.0 x.isLessThanOrEqualTo(20.0) // true x.isLessThanOrEqualTo(.nan) // false Double.nan.isLessThanOrEqualTo(x) // false\n\nThe isLessThanOrEqualTo(_:) method implements the less-than-or-equal predicate defined by the IEEE 754 specification."
  },
  {
    "title": "random(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/random(in:)-3uaq4",
    "html": "Parameters\nrange\n\nThe range in which to create a random value. range must not be empty.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate an integer within a specific range. This example creates three new values in the range 1..<100.\n\nfor _ in 1...3 {\n    print(Int.random(in: 1..<100))\n}\n// Prints \"53\"\n// Prints \"64\"\n// Prints \"5\"\n\n\nThis method is equivalent to calling the version that takes a generator, passing in the system’s default random generator."
  },
  {
    "title": "min | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/min",
    "html": "Required\n\nDiscussion\n\nFor unsigned integer types, this value is always 0. For signed integer types, this value is -(2 ** (bitWidth - 1)), where ** is exponentiation."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyhashable/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (AnyHashable, AnyHashable) -> Bool\nReturns a Boolean value indicating whether two type-erased hashable instances wrap the same value."
  },
  {
    "title": "CustomStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyhashable/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyhashable/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyhashable/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/anyhashable/init(_:)",
    "html": "Parameters\nbase\n\nA hashable value to wrap."
  },
  {
    "title": "min | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/signedinteger/min",
    "html": "Discussion\n\nFor signed integer types, this value is -(2 ** (bitWidth - 1)), where ** is exponentiation."
  },
  {
    "title": "max | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/signedinteger/max",
    "html": "Discussion\n\nFor signed integer types, this value is (2 ** (bitWidth - 1)) - 1, where ** is exponentiation."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: StaticString)\nCreates an instance initialized to a single Unicode scalar.\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType.\nType Aliases\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of the static string, suitable for debugging."
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType.\ninit(extendedGraphemeClusterLiteral: StaticString)\nCreates an instance initialized to a single character that is made up of one or more Unicode scalar values.\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "CustomStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of the static string."
  },
  {
    "title": "ulpOfOne | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/ulpofone-7hdlb",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nThe positive difference between 1.0 and the next greater representable number. ulpOfOne corresponds to the value represented by the C macros FLT_EPSILON, DBL_EPSILON, etc, and is sometimes called epsilon or machine epsilon. Swift deliberately avoids using the term “epsilon” because:\n\nHistorically “epsilon” has been used to refer to several different concepts in different languages, leading to confusion and bugs.\n\nThe name “epsilon” suggests that this quantity is a good tolerance to choose for approximate comparisons, but it is almost always unsuitable for that purpose.\n\nSee also the ulp member property.\n\nDefault Implementations\nFloatingPoint Implementations\nstatic var ulpOfOne: Self\nThe unit in the last place of 1.0."
  },
  {
    "title": "maximum(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/maximum(_:_:)-7vxwv",
    "html": "Required Default implementation provided.\n\nParameters\nx\n\nA floating-point value.\n\ny\n\nAnother floating-point value.\n\nReturn Value\n\nThe greater of x and y, or whichever is a number if the other is NaN.\n\nDiscussion\n\nThis method returns the maximum of two values, preserving order and eliminating NaN when possible. For two values x and y, the result of maximum(x, y) is x if x > y, y if x <= y, or whichever of x or y is a number if the other is a quiet NaN. If both x and y are NaN, or either x or y is a signaling NaN, the result is NaN.\n\nDouble.maximum(10.0, -25.0)\n// 10.0\nDouble.maximum(10.0, .nan)\n// 10.0\nDouble.maximum(.nan, -25.0)\n// -25.0\nDouble.maximum(.nan, .nan)\n// nan\n\n\nThe maximum method implements the maxNum operation defined by the IEEE 754 specification.\n\nDefault Implementations\nFloatingPoint Implementations\nstatic func maximum(Self, Self) -> Self\nReturns the greater of the two given values."
  },
  {
    "title": "minimum(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/minimum(_:_:)-69n9s",
    "html": "Required Default implementation provided.\n\nParameters\nx\n\nA floating-point value.\n\ny\n\nAnother floating-point value.\n\nReturn Value\n\nThe minimum of x and y, or whichever is a number if the other is NaN.\n\nDiscussion\n\nThis method returns the minimum of two values, preserving order and eliminating NaN when possible. For two values x and y, the result of minimum(x, y) is x if x <= y, y if y < x, or whichever of x or y is a number if the other is a quiet NaN. If both x and y are NaN, or either x or y is a signaling NaN, the result is NaN.\n\nDouble.minimum(10.0, -25.0)\n// -25.0\nDouble.minimum(10.0, .nan)\n// 10.0\nDouble.minimum(.nan, -25.0)\n// -25.0\nDouble.minimum(.nan, .nan)\n// nan\n\n\nThe minimum method implements the minNum operation defined by the IEEE 754 specification.\n\nDefault Implementations\nFloatingPoint Implementations\nstatic func minimum(Self, Self) -> Self\nReturns the lesser of the two given values."
  },
  {
    "title": "maximumMagnitude(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/maximummagnitude(_:_:)-820gl",
    "html": "Required Default implementation provided.\n\nParameters\nx\n\nA floating-point value.\n\ny\n\nAnother floating-point value.\n\nReturn Value\n\nWhichever of x or y has greater magnitude, or whichever is a number if the other is NaN.\n\nDiscussion\n\nThis method returns the value with greater magnitude of the two given values, preserving order and eliminating NaN when possible. For two values x and y, the result of maximumMagnitude(x, y) is x if x.magnitude > y.magnitude, y if x.magnitude <= y.magnitude, or whichever of x or y is a number if the other is a quiet NaN. If both x and y are NaN, or either x or y is a signaling NaN, the result is NaN.\n\nDouble.maximumMagnitude(10.0, -25.0)\n// -25.0\nDouble.maximumMagnitude(10.0, .nan)\n// 10.0\nDouble.maximumMagnitude(.nan, -25.0)\n// -25.0\nDouble.maximumMagnitude(.nan, .nan)\n// nan\n\n\nThe maximumMagnitude method implements the maxNumMag operation defined by the IEEE 754 specification.\n\nDefault Implementations\nFloatingPoint Implementations\nstatic func maximumMagnitude(Self, Self) -> Self\nReturns the value with greater magnitude."
  },
  {
    "title": "minimumMagnitude(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/minimummagnitude(_:_:)-2i4od",
    "html": "Required Default implementation provided.\n\nParameters\nx\n\nA floating-point value.\n\ny\n\nAnother floating-point value.\n\nReturn Value\n\nWhichever of x or y has lesser magnitude, or whichever is a number if the other is NaN.\n\nDiscussion\n\nThis method returns the value with lesser magnitude of the two given values, preserving order and eliminating NaN when possible. For two values x and y, the result of minimumMagnitude(x, y) is x if x.magnitude <= y.magnitude, y if y.magnitude < x.magnitude, or whichever of x or y is a number if the other is a quiet NaN. If both x and y are NaN, or either x or y is a signaling NaN, the result is NaN.\n\nDouble.minimumMagnitude(10.0, -25.0)\n// 10.0\nDouble.minimumMagnitude(10.0, .nan)\n// 10.0\nDouble.minimumMagnitude(.nan, -25.0)\n// -25.0\nDouble.minimumMagnitude(.nan, .nan)\n// nan\n\n\nThe minimumMagnitude method implements the minNumMag operation defined by the IEEE 754 specification.\n\nDefault Implementations\nFloatingPoint Implementations\nstatic func minimumMagnitude(Self, Self) -> Self\nReturns the value with lesser magnitude."
  },
  {
    "title": "utf8Start | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/utf8start",
    "html": "Discussion\n\nImportant\n\nAccessing this property when hasPointerRepresentation is false triggers a runtime error."
  },
  {
    "title": "utf8CodeUnitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/utf8codeunitcount",
    "html": "Discussion\n\nImportant\n\nAccessing this property when hasPointerRepresentation is false triggers a runtime error."
  },
  {
    "title": "unicodeScalar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/unicodescalar",
    "html": "Discussion\n\nImportant\n\nAccessing this property when hasPointerRepresentation is true triggers a runtime error."
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/closedrange/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "radix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/radix-4sksz",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nThe magnitude of a floating-point value x of type F can be calculated by using the following formula, where ** is exponentiation:\n\nx.significand * (F.radix ** x.exponent)\n\n\nA conforming type may use any integer radix, but values other than 2 (for binary floating-point types) or 10 (for decimal floating-point types) are extraordinarily rare in practice.\n\nDefault Implementations\nFloatingPoint Implementations\nstatic var radix: Int\nThe radix, or base of exponentiation, for a floating-point type."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/closedrange/index/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (ClosedRange<Bound>.Index, ClosedRange<Bound>.Index) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Bound conforms to Strideable and Bound.Stride conforms to SignedInteger."
  },
  {
    "title": "random(in:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/random(in:using:)-4byak",
    "html": "Parameters\nrange\n\nThe range in which to create a random value.\n\ngenerator\n\nThe random number generator to use when creating the new random value.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate an integer within a specific range when you are using a custom random number generator. This example creates three new values in the range 1...100.\n\nfor _ in 1...3 {\n    print(Int.random(in: 1...100, using: &myGenerator))\n}\n// Prints \"7\"\n// Prints \"44\"\n// Prints \"21\"\n"
  },
  {
    "title": "random(in:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/random(in:using:)-33n1n",
    "html": "Parameters\nrange\n\nThe range in which to create a random value. range must not be empty.\n\ngenerator\n\nThe random number generator to use when creating the new random value.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate an integer within a specific range when you are using a custom random number generator. This example creates three new values in the range 1..<100.\n\nfor _ in 1...3 {\n    print(Int.random(in: 1..<100, using: &myGenerator))\n}\n// Prints \"7\"\n// Prints \"44\"\n// Prints \"21\"\n\n\nNote\n\nThe algorithm used to create random values may change in a future version of Swift. If you’re passing a generator that results in the same sequence of integer values each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/closedrange/index/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Bound conforms to Hashable, Bound conforms to Strideable, and Bound.Stride conforms to SignedInteger.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Bound conforms to Hashable, Bound conforms to Strideable, and Bound.Stride conforms to SignedInteger."
  },
  {
    "title": "ClosedRange.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/closedrange/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "&*=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/&*=(_:_:)",
    "html": "Parameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply.\n\nDiscussion\n\nThe masking multiplication assignment operator (&*=) silently wraps any overflow that occurs during the operation. In the following example, the product of 10 and 50 is greater than the maximum representable Int8 value, so the result is the partial value after discarding the overflowing bits.\n\nvar x: Int8 = 10\nx &*= 5\n// x == 50\nvar y: Int8 = 10\ny &*= 50\n// y == -12 (after overflow)\n\n\nFor more about arithmetic with overflow operators, see Overflow Operators in The Swift Programming Language."
  },
  {
    "title": "&+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/&+(_:_:)",
    "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDiscussion\n\nThe overflow addition operator (&+) discards any bits that overflow the fixed width of the integer type. In the following example, the sum of 100 and 121 is greater than the maximum representable Int8 value, so the result is the partial value after discarding the overflowing bits.\n\nlet x: Int8 = 10 &+ 21\n// x == 31\nlet y: Int8 = 100 &+ 121\n// y == -35 (after overflow)\n\n\nFor more about arithmetic with overflow operators, see Overflow Operators in The Swift Programming Language."
  },
  {
    "title": "init(littleEndian:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/init(littleendian:)-3u3op",
    "html": "Required Default implementation provided.\n\nParameters\nvalue\n\nA value to use as the little-endian representation of the new integer.\n\nDefault Implementations\nFixedWidthInteger Implementations\ninit(littleEndian: Self)\nCreates an integer from its little-endian representation, changing the byte order if necessary."
  },
  {
    "title": "dividingFullWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/fixedwidthinteger/dividingfullwidth(_:)",
    "html": "Required\n\nParameters\ndividend\n\nA tuple containing the high and low parts of a double-width integer.\n\nReturn Value\n\nA tuple containing the quotient and remainder obtained by dividing dividend by this value.\n\nDiscussion\n\nThe resulting quotient must be representable within the bounds of the type. If the quotient is too large to represent in the type, a runtime error may occur.\n\nThe following example divides a value that is too large to be represented using a single Int instance by another Int value. Because the quotient is representable as an Int, the division succeeds.\n\n// 'dividend' represents the value 0x506f70652053616e74612049494949\nlet dividend = (22640526660490081, 7959093232766896457 as UInt)\nlet divisor = 2241543570477705381\n\n\nlet (quotient, remainder) = divisor.dividingFullWidth(dividend)\n// quotient == 186319822866995413\n// remainder == 0\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/init(_:)-2f8bx",
    "html": "Required Default implementations provided.\n\nParameters\nvalue\n\nThe integer to convert to a floating-point value.\n\nDiscussion\n\nIf two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.\n\nDefault Implementations\nBinaryFloatingPoint Implementations\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/init(exactly:)-3gl9z",
    "html": "Required Default implementations provided.\n\nParameters\nvalue\n\nThe integer to convert to a floating-point value.\n\nDiscussion\n\nIf the given integer cannot be represented exactly, the result is nil.\n\nDefault Implementations\nBinaryFloatingPoint Implementations\ninit?<Source>(exactly: Source)\nCreates a new instance from the given value, if it can be represented exactly.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "isZero | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/iszero",
    "html": "Required\n\nDiscussion\n\nThe isZero property of a value x is true when x represents either -0.0 or +0.0. x.isZero is equivalent to the following comparison: x == 0.0.\n\nlet x = -0.0\nx.isZero        // true\nx == 0.0        // true\n"
  },
  {
    "title": "init(sign:exponent:significand:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/init(sign:exponent:significand:)",
    "html": "Required\n\nParameters\nsign\n\nThe sign to use for the new value.\n\nexponent\n\nThe new value’s exponent.\n\nsignificand\n\nThe new value’s significand.\n\nDiscussion\n\nThe following example uses this initializer to create a new Double instance. Double is a binary floating-point type that has a radix of 2.\n\nlet x = Double(sign: .plus, exponent: -2, significand: 1.5)\n// x == 0.375\n\n\nThis initializer is equivalent to the following calculation, where ** is exponentiation, computed as if by a single, correctly rounded, floating-point operation:\n\nlet sign: FloatingPointSign = .plus\nlet exponent = -2\nlet significand = 1.5\nlet y = (sign == .minus ? -1 : 1) * significand * Double.radix ** exponent\n// y == 0.375\n\n\nAs with any basic operation, if this value is outside the representable range of the type, overflow or underflow occurs, and zero, a subnormal value, or infinity may result. In addition, there are two other edge cases:\n\nIf the value you pass to significand is zero or infinite, the result is zero or infinite, regardless of the value of exponent.\n\nIf the value you pass to significand is NaN, the result is NaN.\n\nFor any floating-point value x of type F, the result of the following is equal to x, with the distinction that the result is canonicalized if x is in a noncanonical encoding:\n\nlet x0 = F(sign: x.sign, exponent: x.exponent, significand: x.significand)\n\n\nThis initializer implements the scaleB operation defined by the IEEE 754 specification."
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-x0wd",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "random(in:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/random(in:using:)-2awm8",
    "html": "Parameters\nrange\n\nThe range in which to create a random value. range must be finite and non-empty.\n\ngenerator\n\nThe random number generator to use when creating the new random value.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate a floating-point value within a specific range when you are using a custom random number generator. This example creates three new values in the range 10.0 ..< 20.0.\n\nfor _ in 1...3 {\n    print(Double.random(in: 10.0 ..< 20.0, using: &myGenerator))\n}\n// Prints \"18.1900709259179\"\n// Prints \"14.2286325689993\"\n// Prints \"13.1485686260762\"\n\n\nThe random(in:using:) static method chooses a random value from a continuous uniform distribution in range, and then converts that value to the nearest representable value in this type. Depending on the size and span of range, some concrete values may be represented more frequently than others.\n\nNote\n\nThe algorithm used to create random values may change in a future version of Swift. If you’re passing a generator that results in the same sequence of floating-point values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.\n\nSee Also\nCreating a Random Value\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "nextUp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/nextup",
    "html": "Required\n\nDiscussion\n\nFor any finite value x, x.nextUp is greater than x. For nan or infinity, x.nextUp is x itself. The following special cases also apply:\n\nIf x is -infinity, then x.nextUp is -greatestFiniteMagnitude.\n\nIf x is -leastNonzeroMagnitude, then x.nextUp is -0.0.\n\nIf x is zero, then x.nextUp is leastNonzeroMagnitude.\n\nIf x is greatestFiniteMagnitude, then x.nextUp is infinity."
  },
  {
    "title": "significandBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/significandbitcount",
    "html": "Required\n\nDiscussion\n\nFor fixed-width floating-point types, this is the actual number of fractional significand bits.\n\nFor extensible floating-point types, significandBitCount should be the maximum allowed significand width (without counting any leading integral bit of the significand). If there is no upper limit, then significandBitCount should be Int.max.\n\nNote that Float80.significandBitCount is 63, even though 64 bits are used to store the significand in the memory representation of a Float80 (unlike other floating-point types, Float80 explicitly stores the leading integral significand bit, but the BinaryFloatingPoint APIs provide an abstraction so that users don’t need to be aware of this detail).\n\nSee Also\nWorking with Binary Representation\nvar binade: Self\nThe floating-point value with the same sign and exponent as this value, but with a significand of 1.0.\n\nRequired\n\nvar exponentBitPattern: Self.RawExponent\nThe raw encoding of the value’s exponent field.\n\nRequired\n\nvar significandBitPattern: Self.RawSignificand\nThe raw encoding of the value’s significand field.\n\nRequired\n\nvar significandWidth: Int\nThe number of bits required to represent the value’s significand.\n\nRequired\n\nstatic var exponentBitCount: Int\nThe number of bits used to represent the type’s exponent.\n\nRequired\n\ninit(sign: FloatingPointSign, exponentBitPattern: Self.RawExponent, significandBitPattern: Self.RawSignificand)\nCreates a new instance from the specified sign and bit patterns.\n\nRequired\n\nassociatedtype RawExponent : UnsignedInteger\nA type that represents the encoded exponent of a value.\n\nRequired\n\nassociatedtype RawSignificand : UnsignedInteger\nA type that represents the encoded significand of a value.\n\nRequired"
  },
  {
    "title": "pi | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/pi",
    "html": "Required\n\nDiscussion\n\nWhen measuring an angle in radians, π is equivalent to a half-turn.\n\nThis value is rounded toward zero to keep user computations with angles from inadvertently ending up in the wrong quadrant. A type that conforms to the FloatingPoint protocol provides the value for pi at its best possible precision.\n\nprint(Double.pi)\n// Prints \"3.14159265358979\"\n"
  },
  {
    "title": "nan | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/nan",
    "html": "Required\n\nDiscussion\n\nA NaN compares not equal, not greater than, and not less than every value, including itself. Passing a NaN to an operation generally results in NaN.\n\nlet x = 1.21\n// x > Double.nan == false\n// x < Double.nan == false\n// x == Double.nan == false\n\n\nBecause a NaN always compares not equal to itself, to test whether a floating-point value is NaN, use its isNaN property instead of the equal-to operator (==). In the following example, y is NaN.\n\nlet y = x + Double.nan\nprint(y == Double.nan)\n// Prints \"false\"\nprint(y.isNaN)\n// Prints \"true\"\n"
  },
  {
    "title": "leastNormalMagnitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/leastnormalmagnitude",
    "html": "Required\n\nDiscussion\n\nThis value compares less than or equal to all positive normal numbers. There may be smaller positive numbers, but they are subnormal, meaning that they are represented with less precision than normal numbers.\n\nThis value corresponds to type-specific C macros such as FLT_MIN and DBL_MIN. The naming of those macros is slightly misleading, because subnormals, zeros, and negative numbers are smaller than this value."
  },
  {
    "title": "greatestFiniteMagnitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/greatestfinitemagnitude",
    "html": "Required\n\nDiscussion\n\nThis value compares greater than or equal to all finite numbers, but less than infinity.\n\nThis value corresponds to type-specific C macros such as FLT_MAX and DBL_MAX. The naming of those macros is slightly misleading, because infinity is greater than this value."
  },
  {
    "title": "leastNonzeroMagnitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/leastnonzeromagnitude",
    "html": "Required\n\nDiscussion\n\nThis value compares less than or equal to all positive numbers, but greater than zero. If the type supports subnormal values, leastNonzeroMagnitude is smaller than leastNormalMagnitude; otherwise they are equal."
  },
  {
    "title": "infinity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/infinity",
    "html": "Required\n\nDiscussion\n\nInfinity compares greater than all finite numbers and equal to other infinite values.\n\nlet x = Double.greatestFiniteMagnitude\nlet y = x * 2\n// y == Double.infinity\n// y > x\n"
  },
  {
    "title": "+(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/+(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDiscussion\n\nThe addition operator (+) calculates the sum of its two arguments. For example:\n\nlet x = 1.5\nlet y = x + 2.25\n// y == 3.75\n\n\nThe + operator implements the addition operation defined by the IEEE 754 specification."
  },
  {
    "title": "squareRoot() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/squareroot()-1yl1x",
    "html": "Required Default implementation provided.\n\nReturn Value\n\nThe square root of the value.\n\nDiscussion\n\nThe following example declares a function that calculates the length of the hypotenuse of a right triangle given its two perpendicular sides.\n\nfunc hypotenuse(_ a: Double, _ b: Double) -> Double {\n    return (a * a + b * b).squareRoot()\n}\n\n\nlet (dx, dy) = (3.0, 4.0)\nlet distance = hypotenuse(dx, dy)\n// distance == 5.0\n\nDefault Implementations\nFloatingPoint Implementations\nfunc squareRoot() -> Self\nReturns the square root of the value, rounded to a representable value."
  },
  {
    "title": "truncatingRemainder(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/truncatingremainder(dividingby:)-7jlkk",
    "html": "Required Default implementation provided.\n\nParameters\nother\n\nThe value to use when dividing this value.\n\nReturn Value\n\nThe remainder of this value divided by other using truncating division.\n\nDiscussion\n\nPerforming truncating division with floating-point values results in a truncated integer quotient and a remainder. For values x and y and their truncated integer quotient q, the remainder r satisfies x == y * q + r.\n\nThe following example calculates the truncating remainder of dividing 8.625 by 0.75:\n\nlet x = 8.625\nprint(x / 0.75)\n// Prints \"11.5\"\n\n\nlet q = (x / 0.75).rounded(.towardZero)\n// q == 11.0\nlet r = x.truncatingRemainder(dividingBy: 0.75)\n// r == 0.375\n\n\nlet x1 = 0.75 * q + r\n// x1 == 8.625\n\n\nIf this value and other are both finite numbers, the truncating remainder has the same sign as this value and is strictly smaller in magnitude than other. The truncatingRemainder(dividingBy:) method is always exact.\n\nDefault Implementations\nFloatingPoint Implementations\nfunc truncatingRemainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value using truncating division."
  },
  {
    "title": "round(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/round(_:)",
    "html": "Required\n\nParameters\nrule\n\nThe rounding rule to use.\n\nDiscussion\n\nThe following example rounds a value using four different rounding rules:\n\n// Equivalent to the C 'round' function:\nvar w = 6.5\nw.round(.toNearestOrAwayFromZero)\n// w == 7.0\n\n\n// Equivalent to the C 'trunc' function:\nvar x = 6.5\nx.round(.towardZero)\n// x == 6.0\n\n\n// Equivalent to the C 'ceil' function:\nvar y = 6.5\ny.round(.up)\n// y == 7.0\n\n\n// Equivalent to the C 'floor' function:\nvar z = 6.5\nz.round(.down)\n// z == 6.0\n\n\nFor more information about the available rounding rules, see the FloatingPointRoundingRule enumeration. To round a value using the default “schoolbook rounding”, you can use the shorter round() method instead.\n\nvar w1 = 6.5\nw1.round()\n// w1 == 7.0\n"
  },
  {
    "title": "rounded(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/rounded(_:)-7rbik",
    "html": "Required Default implementation provided.\n\nParameters\nrule\n\nThe rounding rule to use.\n\nReturn Value\n\nThe integral value found by rounding using rule.\n\nDiscussion\n\nThe following example rounds a value using four different rounding rules:\n\nlet x = 6.5\n\n\n// Equivalent to the C 'round' function:\nprint(x.rounded(.toNearestOrAwayFromZero))\n// Prints \"7.0\"\n\n\n// Equivalent to the C 'trunc' function:\nprint(x.rounded(.towardZero))\n// Prints \"6.0\"\n\n\n// Equivalent to the C 'ceil' function:\nprint(x.rounded(.up))\n// Prints \"7.0\"\n\n\n// Equivalent to the C 'floor' function:\nprint(x.rounded(.down))\n// Prints \"6.0\"\n\n\nFor more information about the available rounding rules, see the FloatingPointRoundingRule enumeration. To round a value using the default “schoolbook rounding”, you can use the shorter rounded() method instead.\n\nprint(x.rounded())\n// Prints \"7.0\"\n\nDefault Implementations\nFloatingPoint Implementations\nfunc rounded(FloatingPointRoundingRule) -> Self\nReturns this value rounded to an integral value using the specified rounding rule."
  },
  {
    "title": "isTotallyOrdered(belowOrEqualTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/istotallyordered(beloworequalto:)-6odsl",
    "html": "Required Default implementation provided.\n\nParameters\nother\n\nA floating-point value to compare to this value.\n\nReturn Value\n\ntrue if this value is ordered below or the same as other in a total ordering of the floating-point type; otherwise, false.\n\nDiscussion\n\nThis relation is a refinement of the less-than-or-equal-to operator (<=) that provides a total order on all values of the type, including signed zeros and NaNs.\n\nThe following example uses isTotallyOrdered(belowOrEqualTo:) to sort an array of floating-point values, including some that are NaN:\n\nvar numbers = [2.5, 21.25, 3.0, .nan, -9.5]\nnumbers.sort { !$1.isTotallyOrdered(belowOrEqualTo: $0) }\nprint(numbers)\n// Prints \"[-9.5, 2.5, 3.0, 21.25, nan]\"\n\n\nThe isTotallyOrdered(belowOrEqualTo:) method implements the total order relation as defined by the IEEE 754 specification.\n\nDefault Implementations\nFloatingPoint Implementations\nfunc isTotallyOrdered(belowOrEqualTo: Self) -> Bool\nReturns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort."
  },
  {
    "title": "remainder(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/remainder(dividingby:)-4v8iq",
    "html": "Required Default implementation provided.\n\nParameters\nother\n\nThe value to use when dividing this value.\n\nReturn Value\n\nThe remainder of this value divided by other.\n\nDiscussion\n\nFor two finite values x and y, the remainder r of dividing x by y satisfies x == y * q + r, where q is the integer nearest to x / y. If x / y is exactly halfway between two integers, q is chosen to be even. Note that q is not x / y computed in floating-point arithmetic, and that q may not be representable in any available integer type.\n\nThe following example calculates the remainder of dividing 8.625 by 0.75:\n\nlet x = 8.625\nprint(x / 0.75)\n// Prints \"11.5\"\n\n\nlet q = (x / 0.75).rounded(.toNearestOrEven)\n// q == 12.0\nlet r = x.remainder(dividingBy: 0.75)\n// r == -0.375\n\n\nlet x1 = 0.75 * q + r\n// x1 == 8.625\n\n\nIf this value and other are finite numbers, the remainder is in the closed range -abs(other / 2)...abs(other / 2). The remainder(dividingBy:) method is always exact. This method implements the remainder operation defined by the IEEE 754 specification.\n\nDefault Implementations\nFloatingPoint Implementations\nfunc remainder(dividingBy: Self) -> Self\nReturns the remainder of this value divided by the given value."
  },
  {
    "title": "negate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/negate()",
    "html": "Required\n\nDiscussion\n\nThe result is always exact. This example uses the negate() method to negate the value of the variable x:\n\nvar x = 21.5\nx.negate()\n// x == -21.5\n"
  },
  {
    "title": "isEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/isequal(to:)",
    "html": "Required\n\nParameters\nother\n\nThe value to compare with this value.\n\nReturn Value\n\ntrue if other has the same value as this instance; otherwise, false. If either this value or other is NaN, the result of this method is false.\n\nDiscussion\n\nThis method serves as the basis for the equal-to operator (==) for floating-point values. When comparing two values with this method, -0 is equal to +0. NaN is not equal to any value, including itself. For example:\n\nlet x = 15.0\nx.isEqual(to: 15.0)\n// true\nx.isEqual(to: .nan)\n// false\nDouble.nan.isEqual(to: .nan)\n// false\n\n\nThe isEqual(to:) method implements the equality predicate defined by the IEEE 754 specification."
  },
  {
    "title": "isLess(than:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/isless(than:)",
    "html": "Required\n\nParameters\nother\n\nThe value to compare with this value.\n\nReturn Value\n\ntrue if this value is less than other; otherwise, false. If either this value or other is NaN, the result of this method is false.\n\nDiscussion\n\nThis method serves as the basis for the less-than operator (<) for floating-point values. Some special cases apply:\n\nBecause NaN compares not less than nor greater than any value, this method returns false when called on NaN or when NaN is passed as other.\n\n-infinity compares less than all values except for itself and NaN.\n\nEvery value except for NaN and +infinity compares less than +infinity.\n\nlet x = 15.0 x.isLess(than: 20.0) // true x.isLess(than: .nan) // false Double.nan.isLess(than: x) // false\n\nThe isLess(than:) method implements the less-than predicate defined by the IEEE 754 specification."
  },
  {
    "title": "addingProduct(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/addingproduct(_:_:)-3z17c",
    "html": "Required Default implementation provided.\n\nParameters\nlhs\n\nOne of the values to multiply before adding to this value.\n\nrhs\n\nThe other value to multiply.\n\nReturn Value\n\nThe product of lhs and rhs, added to this value.\n\nDiscussion\n\nThis method is equivalent to the C fma function and implements the fusedMultiplyAdd operation defined by the IEEE 754 specification.\n\nDefault Implementations\nFloatingPoint Implementations\nfunc addingProduct(Self, Self) -> Self\nReturns the result of adding the product of the two given values to this value, computed without intermediate rounding."
  },
  {
    "title": "formSquareRoot() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/formsquareroot()",
    "html": "Required"
  },
  {
    "title": "-(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/-(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDiscussion\n\nThe subtraction operator (-) calculates the difference of its two arguments. For example:\n\nlet x = 7.5\nlet y = x - 2.25\n// y == 5.25\n\n\nThe - operator implements the subtraction operation defined by the IEEE 754 specification."
  },
  {
    "title": "ulp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/ulp",
    "html": "Required\n\nDiscussion\n\nThis is the unit of the least significant digit in this value’s significand. For most numbers x, this is the difference between x and the next greater (in magnitude) representable number. There are some edge cases to be aware of:\n\nIf x is not a finite number, then x.ulp is NaN.\n\nIf x is very small in magnitude, then x.ulp may be a subnormal number. If a type does not support subnormals, x.ulp may be rounded to zero.\n\ngreatestFiniteMagnitude.ulp is a finite number, even though the next greater representable value is infinity.\n\nSee also the ulpOfOne static property."
  },
  {
    "title": "formRemainder(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/formremainder(dividingby:)",
    "html": "Required\n\nParameters\nother\n\nThe value to use when dividing this value.\n\nDiscussion\n\nFor two finite values x and y, the remainder r of dividing x by y satisfies x == y * q + r, where q is the integer nearest to x / y. If x / y is exactly halfway between two integers, q is chosen to be even. Note that q is not x / y computed in floating-point arithmetic, and that q may not be representable in any available integer type.\n\nThe following example calculates the remainder of dividing 8.625 by 0.75:\n\nvar x = 8.625\nprint(x / 0.75)\n// Prints \"11.5\"\n\n\nlet q = (x / 0.75).rounded(.toNearestOrEven)\n// q == 12.0\nx.formRemainder(dividingBy: 0.75)\n// x == -0.375\n\n\nlet x1 = 0.75 * q + x\n// x1 == 8.625\n\n\nIf this value and other are finite numbers, the remainder is in the closed range -abs(other / 2)...abs(other / 2). The formRemainder(dividingBy:) method is always exact."
  },
  {
    "title": "addProduct(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/addproduct(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nOne of the values to multiply before adding to this value.\n\nrhs\n\nThe other value to multiply."
  },
  {
    "title": "formTruncatingRemainder(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/formtruncatingremainder(dividingby:)",
    "html": "Required\n\nParameters\nother\n\nThe value to use when dividing this value.\n\nDiscussion\n\nPerforming truncating division with floating-point values results in a truncated integer quotient and a remainder. For values x and y and their truncated integer quotient q, the remainder r satisfies x == y * q + r.\n\nThe following example calculates the truncating remainder of dividing 8.625 by 0.75:\n\nvar x = 8.625\nprint(x / 0.75)\n// Prints \"11.5\"\n\n\nlet q = (x / 0.75).rounded(.towardZero)\n// q == 11.0\nx.formTruncatingRemainder(dividingBy: 0.75)\n// x == 0.375\n\n\nlet x1 = 0.75 * q + x\n// x1 == 8.625\n\n\nIf this value and other are both finite numbers, the truncating remainder has the same sign as this value and is strictly smaller in magnitude than other. The formTruncatingRemainder(dividingBy:) method is always exact."
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/+=(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add."
  },
  {
    "title": "-(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/-(_:)",
    "html": "Required\n\nParameters\noperand\n\nThe value to negate.\n\nDiscussion\n\nThe unary minus operator (prefix -) calculates the negation of its operand. The result is always exact.\n\nlet x = 21.5\nlet y = -x\n// y == -21.5\n"
  },
  {
    "title": "*=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/*=(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply."
  },
  {
    "title": "*(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/*(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply.\n\nDiscussion\n\nThe multiplication operator (*) calculates the product of its two arguments. For example:\n\nlet x = 7.5\nlet y = x * 2.25\n// y == 16.875\n\n\nThe * operator implements the multiplication operation defined by the IEEE 754 specification."
  },
  {
    "title": "yield() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/yield()",
    "html": "Return Value\n\nA YieldResult that indicates the success or failure of the yield operation.\n\nDiscussion\n\nUse this method with AsyncStream instances whose Element type is Void. In this case, the yield() call unblocks the awaiting iteration; there is no value to return.\n\nIf you call this method repeatedly, each call returns immediately, without blocking for any awaiting consumption from the iteration.\n\nSee Also\nProducing Elements\nfunc yield(Element) -> AsyncStream<Element>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point with a given element.\nfunc yield(with: Result<Element, Never>) -> AsyncStream<Element>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point with a given result’s success value.\nenum YieldResult\nA type that indicates the result of yielding a value to a client, by way of the continuation."
  },
  {
    "title": "-=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/-=(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs."
  },
  {
    "title": "signalingNaN | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/signalingnan",
    "html": "Required\n\nDiscussion\n\nThe default IEEE 754 behavior of operations involving a signaling NaN is to raise the Invalid flag in the floating-point environment and return a quiet NaN.\n\nOperations on types conforming to the FloatingPoint protocol should support this behavior, but they might also support other options. For example, it would be reasonable to implement alternative operations in which operating on a signaling NaN triggers a runtime error or results in a diagnostic for debugging purposes. Types that implement alternative behaviors for a signaling NaN must document the departure.\n\nOther than these signaling operations, a signaling NaN behaves in the same manner as a quiet NaN."
  },
  {
    "title": "hasPointerRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/haspointerrepresentation",
    "html": "Discussion\n\nIf hasPointerRepresentation is false, the static string stores a single Unicode scalar value."
  },
  {
    "title": "ExpressibleByStringLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/staticstring/expressiblebystringliteral-implementations",
    "html": "Topics\nInitializers\ninit(stringLiteral: StaticString)\nCreates an instance initialized to the value of a string literal.\nType Aliases\ntypealias StringLiteralType\nA type that represents a string literal."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/map(_:)-58nsf",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "Exponent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/exponent-swift.associatedtype",
    "html": "Required"
  },
  {
    "title": "/(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint//(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by.\n\nDiscussion\n\nThe division operator (/) calculates the quotient of the division if rhs is nonzero. If rhs is zero, the result of the division is infinity, with the sign of the result matching the sign of lhs.\n\nlet x = 16.875\nlet y = x / 2.25\n// y == 7.5\n\n\nlet z = x / 0\n// z.isInfinite == true\n\n\nThe / operator implements the division operation defined by the IEEE 754 specification."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/termination/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you.\n\nSee Also\nHashing\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "/=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint//=(_:_:)",
    "html": "Required\n\nParameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by."
  },
  {
    "title": "finish() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/finish()",
    "html": "Discussion\n\nCalling this function more than once has no effect. After calling finish, the stream enters a terminal state and doesn’t produce any additional elements."
  },
  {
    "title": "init(signOf:magnitudeOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/init(signof:magnitudeof:)-2yrnh",
    "html": "Required Default implementation provided.\n\nParameters\nsignOf\n\nA value from which to use the sign. The result of the initializer has the same sign as signOf.\n\nmagnitudeOf\n\nA value from which to use the magnitude. The result of the initializer has the same magnitude as magnitudeOf.\n\nDiscussion\n\nThe following example uses this initializer to create a new Double instance with the sign of a and the magnitude of b:\n\nlet a = -21.5\nlet b = 305.15\nlet c = Double(signOf: a, magnitudeOf: b)\nprint(c)\n// Prints \"-305.15\"\n\n\nThis initializer implements the IEEE 754 copysign operation.\n\nDefault Implementations\nFloatingPoint Implementations\ninit(signOf: Self, magnitudeOf: Self)\nCreates a new floating-point value using the sign of one value and the magnitude of another."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/init(_:)-2xwlo",
    "html": "Required Default implementations provided.\n\nParameters\nvalue\n\nThe integer to convert to a floating-point value.\n\nDiscussion\n\nIf two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.\n\nDefault Implementations\nBinaryFloatingPoint Implementations\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation."
  },
  {
    "title": "isNaN | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/isnan",
    "html": "Required\n\nDiscussion\n\nBecause NaN is not equal to any value, including NaN, use this property instead of the equal-to operator (==) or not-equal-to operator (!=) to test whether a value is or is not NaN. For example:\n\nlet x = 0.0\nlet y = x * .infinity\n// y is a NaN\n\n\n// Comparing with the equal-to operator never returns 'true'\nprint(x == Double.nan)\n// Prints \"false\"\nprint(y == Double.nan)\n// Prints \"false\"\n\n\n// Test with the 'isNaN' property instead\nprint(x.isNaN)\n// Prints \"false\"\nprint(y.isNaN)\n// Prints \"true\"\n\n\nThis property is true for both quiet and signaling NaNs."
  },
  {
    "title": "exponent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/exponent-swift.property",
    "html": "Required\n\nDiscussion\n\nThe exponent of a floating-point value is the integer part of the logarithm of the value’s magnitude. For a value x of a floating-point type F, the magnitude can be calculated as the following, where ** is exponentiation:\n\nx.significand * (F.radix ** x.exponent)\n\n\nIn the next example, y has a value of 21.5, which is encoded as 1.34375 * 2 ** 4. The significand of y is therefore 1.34375.\n\nlet y: Double = 21.5\n// y.significand == 1.34375\n// y.exponent == 4\n// Double.radix == 2\n\n\nThe exponent property has the following edge cases:\n\nIf x is zero, then x.exponent is Int.min.\n\nIf x is +/-infinity or NaN, then x.exponent is Int.max\n\nThis property implements the logB operation defined by the IEEE 754 specification."
  },
  {
    "title": "floatingPointClass | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/floatingpointclass-5kgla",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nA value’s floatingPointClass property describes its “class” as described by the IEEE 754 specification.\n\nDefault Implementations\nFloatingPoint Implementations\nvar floatingPointClass: FloatingPointClassification\nThe classification of this value."
  },
  {
    "title": "isCanonical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/iscanonical",
    "html": "Required\n\nDiscussion\n\nThe IEEE 754 specification defines a canonical, or preferred, encoding of a floating-point value. On platforms that fully support IEEE 754, every Float or Double value is canonical, but non-canonical values can exist on other platforms or for other types. Some examples:\n\nOn platforms that flush subnormal numbers to zero (such as armv7 with the default floating-point environment), Swift interprets subnormal Float and Double values as non-canonical zeros. (In Swift 5.1 and earlier, isCanonical is true for these values, which is the incorrect value.)\n\nOn i386 and x86_64, Float80 has a number of non-canonical encodings. “Pseudo-NaNs”, “pseudo-infinities”, and “unnormals” are interpreted as non-canonical NaN encodings. “Pseudo-denormals” are interpreted as non-canonical encodings of subnormal values.\n\nDecimal floating-point types admit a large number of non-canonical encodings. Consult the IEEE 754 standard for additional details."
  },
  {
    "title": "isSignalingNaN | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/issignalingnan",
    "html": "Required\n\nDiscussion\n\nSignaling NaNs typically raise the Invalid flag when used in general computing operations."
  },
  {
    "title": "isFinite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/isfinite",
    "html": "Required\n\nDiscussion\n\nAll values other than NaN and infinity are considered finite, whether normal or subnormal. For NaN, both isFinite and isInfinite are false."
  },
  {
    "title": "significand | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/significand",
    "html": "Required\n\nDiscussion\n\nThe magnitude of a floating-point value x of type F can be calculated by using the following formula, where ** is exponentiation:\n\nx.significand * (F.radix ** x.exponent)\n\n\nIn the next example, y has a value of 21.5, which is encoded as 1.34375 * 2 ** 4. The significand of y is therefore 1.34375.\n\nlet y: Double = 21.5\n// y.significand == 1.34375\n// y.exponent == 4\n// Double.radix == 2\n\n\nIf a type’s radix is 2, then for finite nonzero numbers, the significand is in the range 1.0 ..< 2.0. For other values of x, x.significand is defined as follows:\n\nIf x is zero, then x.significand is 0.0.\n\nIf x is infinite, then x.significand is infinity.\n\nIf x is NaN, then x.significand is NaN.\n\nNote\n\nThe significand is frequently also called the mantissa, but significand is the preferred terminology in the IEEE 754 specification, to allay confusion with the use of mantissa for the fractional part of a logarithm."
  },
  {
    "title": "isSubnormal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/issubnormal",
    "html": "Required\n\nDiscussion\n\nA subnormal value is a nonzero number that has a lesser magnitude than the smallest normal number. Subnormal values don’t use the full precision available to values of a type.\n\nZero is neither a normal nor a subnormal number. Subnormal numbers are often called denormal or denormalized—these are different names for the same concept."
  },
  {
    "title": "nextDown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/nextdown-3t7gt",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nFor any finite value x, x.nextDown is less than x. For nan or -infinity, x.nextDown is x itself. The following special cases also apply:\n\nIf x is infinity, then x.nextDown is greatestFiniteMagnitude.\n\nIf x is leastNonzeroMagnitude, then x.nextDown is 0.0.\n\nIf x is zero, then x.nextDown is -leastNonzeroMagnitude.\n\nIf x is -greatestFiniteMagnitude, then x.nextDown is -infinity.\n\nDefault Implementations\nFloatingPoint Implementations\nvar nextDown: Self\nThe greatest representable value that compares less than this value."
  },
  {
    "title": "sign | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/sign",
    "html": "Required\n\nDiscussion\n\nThe sign property is .minus if the value’s signbit is set, and .plus otherwise. For example:\n\nlet x = -33.375\n// x.sign == .minus\n\n\nDon’t use this property to check whether a floating point value is negative. For a value x, the comparison x.sign == .minus is not necessarily the same as x < 0. In particular, x.sign == .minus if x is -0, and while x < 0 is always false if x is NaN, x.sign could be either .plus or .minus."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/init(_:)-57jx7",
    "html": "Required Default implementations provided.\n\nParameters\nvalue\n\nA floating-point value to be converted.\n\nDefault Implementations\nBinaryFloatingPoint Implementations\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nSee Also\nConverting Floating-Point Values\ninit(Double)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided.\n\ninit(Float80)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided.\n\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/init(_:)-1nijh",
    "html": "Required Default implementations provided.\n\nParameters\nvalue\n\nA floating-point value to be converted.\n\nDefault Implementations\nBinaryFloatingPoint Implementations\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nSee Also\nConverting Floating-Point Values\ninit(Float)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided.\n\ninit(Double)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided.\n\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided."
  },
  {
    "title": "random(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/random(in:)-8jkjb",
    "html": "Parameters\nrange\n\nThe range in which to create a random value. range must be finite and non-empty.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate a floating-point value within a specific range. This example creates three new values in the range 10.0 ..< 20.0.\n\nfor _ in 1...3 {\n    print(Double.random(in: 10.0 ..< 20.0))\n}\n// Prints \"18.1900709259179\"\n// Prints \"14.2286325689993\"\n// Prints \"13.1485686260762\"\n\n\nThe random() static method chooses a random value from a continuous uniform distribution in range, and then converts that value to the nearest representable value in this type. Depending on the size and span of range, some concrete values may be represented more frequently than others.\n\nThis method is equivalent to calling random(in:using:), passing in the system’s default random generator.\n\nSee Also\nCreating a Random Value\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "random(in:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/random(in:using:)-6pf7f",
    "html": "Parameters\nrange\n\nThe range in which to create a random value. Must be finite.\n\ngenerator\n\nThe random number generator to use when creating the new random value.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate a floating-point value within a specific range when you are using a custom random number generator. This example creates three new values in the range 10.0 ... 20.0.\n\nfor _ in 1...3 {\n    print(Double.random(in: 10.0 ... 20.0, using: &myGenerator))\n}\n// Prints \"18.1900709259179\"\n// Prints \"14.2286325689993\"\n// Prints \"13.1485686260762\"\n\n\nThe random(in:using:) static method chooses a random value from a continuous uniform distribution in range, and then converts that value to the nearest representable value in this type. Depending on the size and span of range, some concrete values may be represented more frequently than others.\n\nNote\n\nThe algorithm used to create random values may change in a future version of Swift. If you’re passing a generator that results in the same sequence of floating-point values each time you run your program, that sequence may change when your program is compiled using a different version of Swift.\n\nSee Also\nCreating a Random Value\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "exponentBitPattern | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/exponentbitpattern",
    "html": "Required\n\nDiscussion\n\nThis value is unadjusted by the type’s exponent bias.\n\nSee Also\nWorking with Binary Representation\nvar binade: Self\nThe floating-point value with the same sign and exponent as this value, but with a significand of 1.0.\n\nRequired\n\nvar significandBitPattern: Self.RawSignificand\nThe raw encoding of the value’s significand field.\n\nRequired\n\nvar significandWidth: Int\nThe number of bits required to represent the value’s significand.\n\nRequired\n\nstatic var exponentBitCount: Int\nThe number of bits used to represent the type’s exponent.\n\nRequired\n\nstatic var significandBitCount: Int\nThe available number of fractional significand bits.\n\nRequired\n\ninit(sign: FloatingPointSign, exponentBitPattern: Self.RawExponent, significandBitPattern: Self.RawSignificand)\nCreates a new instance from the specified sign and bit patterns.\n\nRequired\n\nassociatedtype RawExponent : UnsignedInteger\nA type that represents the encoded exponent of a value.\n\nRequired\n\nassociatedtype RawSignificand : UnsignedInteger\nA type that represents the encoded significand of a value.\n\nRequired"
  },
  {
    "title": "RawExponent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/rawexponent",
    "html": "Required\n\nSee Also\nWorking with Binary Representation\nvar binade: Self\nThe floating-point value with the same sign and exponent as this value, but with a significand of 1.0.\n\nRequired\n\nvar exponentBitPattern: Self.RawExponent\nThe raw encoding of the value’s exponent field.\n\nRequired\n\nvar significandBitPattern: Self.RawSignificand\nThe raw encoding of the value’s significand field.\n\nRequired\n\nvar significandWidth: Int\nThe number of bits required to represent the value’s significand.\n\nRequired\n\nstatic var exponentBitCount: Int\nThe number of bits used to represent the type’s exponent.\n\nRequired\n\nstatic var significandBitCount: Int\nThe available number of fractional significand bits.\n\nRequired\n\ninit(sign: FloatingPointSign, exponentBitPattern: Self.RawExponent, significandBitPattern: Self.RawSignificand)\nCreates a new instance from the specified sign and bit patterns.\n\nRequired\n\nassociatedtype RawSignificand : UnsignedInteger\nA type that represents the encoded significand of a value.\n\nRequired"
  },
  {
    "title": "binade | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/binade",
    "html": "Required\n\nDiscussion\n\nA binade is a set of binary floating-point values that all have the same sign and exponent. The binade property is a member of the same binade as this value, but with a unit significand.\n\nIn this example, x has a value of 21.5, which is stored as 1.34375 * 2**4, where ** is exponentiation. Therefore, x.binade is equal to 1.0 * 2**4, or 16.0.\n\nlet x = 21.5\n// x.significand == 1.34375\n// x.exponent == 4\n\n\nlet y = x.binade\n// y == 16.0\n// y.significand == 1.0\n// y.exponent == 4\n\nSee Also\nWorking with Binary Representation\nvar exponentBitPattern: Self.RawExponent\nThe raw encoding of the value’s exponent field.\n\nRequired\n\nvar significandBitPattern: Self.RawSignificand\nThe raw encoding of the value’s significand field.\n\nRequired\n\nvar significandWidth: Int\nThe number of bits required to represent the value’s significand.\n\nRequired\n\nstatic var exponentBitCount: Int\nThe number of bits used to represent the type’s exponent.\n\nRequired\n\nstatic var significandBitCount: Int\nThe available number of fractional significand bits.\n\nRequired\n\ninit(sign: FloatingPointSign, exponentBitPattern: Self.RawExponent, significandBitPattern: Self.RawSignificand)\nCreates a new instance from the specified sign and bit patterns.\n\nRequired\n\nassociatedtype RawExponent : UnsignedInteger\nA type that represents the encoded exponent of a value.\n\nRequired\n\nassociatedtype RawSignificand : UnsignedInteger\nA type that represents the encoded significand of a value.\n\nRequired"
  },
  {
    "title": "significandWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/significandwidth",
    "html": "Required\n\nDiscussion\n\nIf this value is a finite nonzero number, significandWidth is the number of fractional bits required to represent the value of significand; otherwise, significandWidth is -1. The value of significandWidth is always -1 or between zero and significandBitCount. For example:\n\nFor any representable power of two, significandWidth is zero, because significand is 1.0.\n\nIf x is 10, x.significand is 1.01 in binary, so x.significandWidth is 2.\n\nIf x is Float.pi, x.significand is 1.10010010000111111011011 in binary, and x.significandWidth is 23.\n\nSee Also\nWorking with Binary Representation\nvar binade: Self\nThe floating-point value with the same sign and exponent as this value, but with a significand of 1.0.\n\nRequired\n\nvar exponentBitPattern: Self.RawExponent\nThe raw encoding of the value’s exponent field.\n\nRequired\n\nvar significandBitPattern: Self.RawSignificand\nThe raw encoding of the value’s significand field.\n\nRequired\n\nstatic var exponentBitCount: Int\nThe number of bits used to represent the type’s exponent.\n\nRequired\n\nstatic var significandBitCount: Int\nThe available number of fractional significand bits.\n\nRequired\n\ninit(sign: FloatingPointSign, exponentBitPattern: Self.RawExponent, significandBitPattern: Self.RawSignificand)\nCreates a new instance from the specified sign and bit patterns.\n\nRequired\n\nassociatedtype RawExponent : UnsignedInteger\nA type that represents the encoded exponent of a value.\n\nRequired\n\nassociatedtype RawSignificand : UnsignedInteger\nA type that represents the encoded significand of a value.\n\nRequired"
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/compactmap(_:)-7mgjd",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "init(sign:exponentBitPattern:significandBitPattern:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/init(sign:exponentbitpattern:significandbitpattern:)",
    "html": "Required\n\nParameters\nsign\n\nThe sign of the new value.\n\nexponentBitPattern\n\nThe bit pattern to use for the exponent field of the new value.\n\nsignificandBitPattern\n\nThe bit pattern to use for the significand field of the new value.\n\nDiscussion\n\nThe values passed as exponentBitPattern and significandBitPattern are interpreted in the binary interchange format defined by the IEEE 754 specification.\n\nSee Also\nWorking with Binary Representation\nvar binade: Self\nThe floating-point value with the same sign and exponent as this value, but with a significand of 1.0.\n\nRequired\n\nvar exponentBitPattern: Self.RawExponent\nThe raw encoding of the value’s exponent field.\n\nRequired\n\nvar significandBitPattern: Self.RawSignificand\nThe raw encoding of the value’s significand field.\n\nRequired\n\nvar significandWidth: Int\nThe number of bits required to represent the value’s significand.\n\nRequired\n\nstatic var exponentBitCount: Int\nThe number of bits used to represent the type’s exponent.\n\nRequired\n\nstatic var significandBitCount: Int\nThe available number of fractional significand bits.\n\nRequired\n\nassociatedtype RawExponent : UnsignedInteger\nA type that represents the encoded exponent of a value.\n\nRequired\n\nassociatedtype RawSignificand : UnsignedInteger\nA type that represents the encoded significand of a value.\n\nRequired"
  },
  {
    "title": "exponentBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/exponentbitcount",
    "html": "Required\n\nDiscussion\n\nA binary floating-point type’s exponentBitCount imposes a limit on the range of the exponent for normal, finite values. The exponent bias of a type F can be calculated as the following, where ** is exponentiation:\n\nlet bias = 2 ** (F.exponentBitCount - 1) - 1\n\n\nThe least normal exponent for values of the type F is 1 - bias, and the largest finite exponent is bias. An all-zeros exponent is reserved for subnormals and zeros, and an all-ones exponent is reserved for infinity and NaN.\n\nFor example, the Float type has an exponentBitCount of 8, which gives an exponent bias of 127 by the calculation above.\n\nlet bias = 2 ** (Float.exponentBitCount - 1) - 1\n// bias == 127\nprint(Float.greatestFiniteMagnitude.exponent)\n// Prints \"127\"\nprint(Float.leastNormalMagnitude.exponent)\n// Prints \"-126\"\n\nSee Also\nWorking with Binary Representation\nvar binade: Self\nThe floating-point value with the same sign and exponent as this value, but with a significand of 1.0.\n\nRequired\n\nvar exponentBitPattern: Self.RawExponent\nThe raw encoding of the value’s exponent field.\n\nRequired\n\nvar significandBitPattern: Self.RawSignificand\nThe raw encoding of the value’s significand field.\n\nRequired\n\nvar significandWidth: Int\nThe number of bits required to represent the value’s significand.\n\nRequired\n\nstatic var significandBitCount: Int\nThe available number of fractional significand bits.\n\nRequired\n\ninit(sign: FloatingPointSign, exponentBitPattern: Self.RawExponent, significandBitPattern: Self.RawSignificand)\nCreates a new instance from the specified sign and bit patterns.\n\nRequired\n\nassociatedtype RawExponent : UnsignedInteger\nA type that represents the encoded exponent of a value.\n\nRequired\n\nassociatedtype RawSignificand : UnsignedInteger\nA type that represents the encoded significand of a value.\n\nRequired"
  },
  {
    "title": "significandBitPattern | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/significandbitpattern",
    "html": "Required\n\nDiscussion\n\nThe significandBitPattern property does not include the leading integral bit of the significand, even for types like Float80 that store it explicitly.\n\nSee Also\nWorking with Binary Representation\nvar binade: Self\nThe floating-point value with the same sign and exponent as this value, but with a significand of 1.0.\n\nRequired\n\nvar exponentBitPattern: Self.RawExponent\nThe raw encoding of the value’s exponent field.\n\nRequired\n\nvar significandWidth: Int\nThe number of bits required to represent the value’s significand.\n\nRequired\n\nstatic var exponentBitCount: Int\nThe number of bits used to represent the type’s exponent.\n\nRequired\n\nstatic var significandBitCount: Int\nThe available number of fractional significand bits.\n\nRequired\n\ninit(sign: FloatingPointSign, exponentBitPattern: Self.RawExponent, significandBitPattern: Self.RawSignificand)\nCreates a new instance from the specified sign and bit patterns.\n\nRequired\n\nassociatedtype RawExponent : UnsignedInteger\nA type that represents the encoded exponent of a value.\n\nRequired\n\nassociatedtype RawSignificand : UnsignedInteger\nA type that represents the encoded significand of a value.\n\nRequired"
  },
  {
    "title": "endIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/endindex",
    "html": "Discussion\n\nWhen you need a range that includes the last element of a collection, use the half-open range operator (..<) with endIndex. The ..< operator creates a range that doesn’t include the upper bound, so it’s always safe to use with endIndex. For example:\n\nlet numbers = [10, 20, 30, 40, 50]\nif let index = numbers.firstIndex(of: 30) {\n    print(numbers[index ..< numbers.endIndex])\n}\n// Prints \"[30, 40, 50]\"\n\n\nIf the collection is empty, endIndex is equal to startIndex."
  },
  {
    "title": "startIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/startindex",
    "html": "Discussion\n\nIf the collection is empty, startIndex is equal to endIndex."
  },
  {
    "title": "Int.Words.SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/subsequence",
    "html": "Discussion\n\nThe default subsequence type for collections that don’t define their own is Slice."
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-91l51",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-9wyi2",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-515tf",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-7q8n5",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-6mn7k",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-6vk5h",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-5n09x",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "RawSignificand | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/rawsignificand",
    "html": "Required\n\nSee Also\nWorking with Binary Representation\nvar binade: Self\nThe floating-point value with the same sign and exponent as this value, but with a significand of 1.0.\n\nRequired\n\nvar exponentBitPattern: Self.RawExponent\nThe raw encoding of the value’s exponent field.\n\nRequired\n\nvar significandBitPattern: Self.RawSignificand\nThe raw encoding of the value’s significand field.\n\nRequired\n\nvar significandWidth: Int\nThe number of bits required to represent the value’s significand.\n\nRequired\n\nstatic var exponentBitCount: Int\nThe number of bits used to represent the type’s exponent.\n\nRequired\n\nstatic var significandBitCount: Int\nThe available number of fractional significand bits.\n\nRequired\n\ninit(sign: FloatingPointSign, exponentBitPattern: Self.RawExponent, significandBitPattern: Self.RawSignificand)\nCreates a new instance from the specified sign and bit patterns.\n\nRequired\n\nassociatedtype RawExponent : UnsignedInteger\nA type that represents the encoded exponent of a value.\n\nRequired"
  },
  {
    "title": "yield(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/yield(_:)",
    "html": "Parameters\nvalue\n\nThe value to yield from the continuation.\n\nReturn Value\n\nA YieldResult that indicates the success or failure of the yield operation.\n\nDiscussion\n\nIf nothing is awaiting the next value, this method attempts to buffer the result’s element.\n\nThis can be called more than once and returns to the caller immediately without blocking for any awaiting consumption from the iteration.\n\nSee Also\nProducing Elements\nfunc yield(with: Result<Element, Never>) -> AsyncStream<Element>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point with a given result’s success value.\nfunc yield() -> AsyncStream<Element>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point.\nenum YieldResult\nA type that indicates the result of yielding a value to a client, by way of the continuation."
  },
  {
    "title": "yield(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/yield(with:)",
    "html": "Parameters\nresult\n\nA result to yield from the continuation.\n\nReturn Value\n\nA YieldResult that indicates the success or failure of the yield operation.\n\nDiscussion\n\nIf nothing is awaiting the next value, the method attempts to buffer the result’s element.\n\nIf you call this method repeatedly, each call returns immediately, without blocking for any awaiting consumption from the iteration.\n\nSee Also\nProducing Elements\nfunc yield(Element) -> AsyncStream<Element>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point with a given element.\nfunc yield() -> AsyncStream<Element>.Continuation.YieldResult\nResume the task awaiting the next iteration point by having it return normally from its suspension point.\nenum YieldResult\nA type that indicates the result of yielding a value to a client, by way of the continuation."
  },
  {
    "title": "onTermination | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/ontermination",
    "html": "Discussion\n\nIf an onTermination callback is set, using task cancellation to terminate iteration of an AsyncStream results in a call to this callback.\n\nCanceling an active iteration invokes the onTermination callback first, then resumes by yielding nil. This means that you can perform needed cleanup in the cancellation handler. After reaching a terminal state as a result of cancellation, the AsyncStream sets the callback to nil.\n\nSee Also\nHandling Termination\nenum Termination\nA type that indicates how the stream terminated."
  },
  {
    "title": "AsyncStream.Continuation.Termination.finished | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/termination/finished",
    "html": "See Also\nTermination States\ncase cancelled\nThe stream finished as a result of cancellation."
  },
  {
    "title": "AsyncStream.Continuation.Termination.cancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/termination/cancelled",
    "html": "See Also\nTermination States\ncase finished\nThe stream finished as a result of calling the continuation’s finish method."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/termination/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future.\n\nSee Also\nHashing\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/min()",
    "html": "Return Value\n\nThe sequence’s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The min() method returns the minimum value of the sequence.\n\nlet min = await Counter(howHigh: 10)\n    .min()\nprint(min ?? \"none\")\n// Prints \"1\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable."
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-3firb",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "max() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/max()",
    "html": "Return Value\n\nThe sequence’s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The max() method returns the max value of the sequence.\n\nlet max = await Counter(howHigh: 10)\n    .max()\nprint(max ?? \"none\")\n// Prints \"10\"\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-4mmzd",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/prefix(_:)",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence.\n\nSee Also\nSelecting Elements\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n\nSee Also\nSelecting Elements\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/map(_:)-4a4la",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n\nSee Also\nTransforming a Sequence\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/dropfirst(_:)",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nSee Also\nExcluding Elements\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-8xdh5",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/filter(_:)",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n\nSee Also\nExcluding Elements\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements."
  },
  {
    "title": "isInfinite | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/isinfinite",
    "html": "Required\n\nDiscussion\n\nFor NaN, both isFinite and isInfinite are false."
  },
  {
    "title": "isNormal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/floatingpoint/isnormal",
    "html": "Required\n\nDiscussion\n\nA normal value is a finite number that uses the full precision available to values of a type. Zero is neither a normal nor a subnormal number."
  },
  {
    "title": "random(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/random(in:)-2j16p",
    "html": "Parameters\nrange\n\nThe range in which to create a random value. Must be finite.\n\nReturn Value\n\nA random value within the bounds of range.\n\nDiscussion\n\nUse this method to generate a floating-point value within a specific range. This example creates three new values in the range 10.0 ... 20.0.\n\nfor _ in 1...3 {\n    print(Double.random(in: 10.0 ... 20.0))\n}\n// Prints \"18.1900709259179\"\n// Prints \"14.2286325689993\"\n// Prints \"13.1485686260762\"\n\n\nThe random() static method chooses a random value from a continuous uniform distribution in range, and then converts that value to the nearest representable value in this type. Depending on the size and span of range, some concrete values may be represented more frequently than others.\n\nThis method is equivalent to calling random(in:using:), passing in the system’s default random generator.\n\nSee Also\nCreating a Random Value\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger.\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/init(exactly:)-1t0u3",
    "html": "Required Default implementations provided.\n\nParameters\nvalue\n\nA floating-point value to be converted.\n\nDiscussion\n\nIf the given floating-point value cannot be represented exactly, the result is nil. A value that is NaN (“not a number”) cannot be represented exactly if its payload cannot be encoded exactly.\n\nDefault Implementations\nBinaryFloatingPoint Implementations\ninit?<Source>(exactly: Source)\nCreates a new instance from the given value, if it can be represented exactly.\ninit?<Source>(exactly: Source)\nCreates a new value, if the given integer can be represented exactly.\nAvailable when RawSignificand conforms to FixedWidthInteger."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/init(_:)-7ft14",
    "html": "Required Default implementations provided.\n\nParameters\nvalue\n\nA floating-point value to be converted.\n\nDefault Implementations\nBinaryFloatingPoint Implementations\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\nSee Also\nConverting Floating-Point Values\ninit(Float)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided.\n\ninit(Float80)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided.\n\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/binaryfloatingpoint/init(_:)-shau",
    "html": "Required Default implementations provided.\n\nParameters\nvalue\n\nA floating-point value to be converted.\n\nDiscussion\n\nIf two representable values are equally close, the result is the value with more trailing zeros in its significand bit pattern.\n\nDefault Implementations\nBinaryFloatingPoint Implementations\ninit<Source>(Source)\nCreates a new value, rounded to the closest possible representation.\nAvailable when RawSignificand conforms to FixedWidthInteger.\ninit<Source>(Source)\nCreates a new instance from the given value, rounded to the closest possible representation.\nSee Also\nConverting Floating-Point Values\ninit(Float)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided.\n\ninit(Double)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided.\n\ninit(Float80)\nCreates a new instance from the given value, rounded to the closest possible representation.\n\nRequired Default implementations provided."
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-6b6u3",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-8gg39",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-58aw",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-7wb0w",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "count | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/count",
    "html": "Discussion\n\nTo check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation.\n\nComplexity\n\nO(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/hashable/hash(into:)-3gv4c",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "Int.Words.Index | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/index",
    "html": "Discussion\n\nValid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
  },
  {
    "title": "indices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/indices-swift.property",
    "html": "Discussion\n\nA collection’s indices property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead.\n\nvar c = MyFancyCollection([10, 20, 30, 40, 50])\nvar i = c.startIndex\nwhile i != c.endIndex {\n    c[i] /= 5\n    i = c.index(after: i)\n}\n// c == MyFancyCollection([2, 4, 6, 8, 10])\n"
  },
  {
    "title": "index(before:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/index(before:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be greater than startIndex.\n\nReturn Value\n\nThe index value immediately before i."
  },
  {
    "title": "SIMD Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/simd-implementations",
    "html": "Topics\nOperators\nstatic func .!= (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise inequality comparison.\nstatic func .!= (Self, Self) -> SIMDMask<Self.MaskStorage>\nA vector mask with the result of a pointwise inequality comparison.\nstatic func .!= (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise inequality comparison.\nstatic func .== (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise equality comparison.\nstatic func .== (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise equality comparison.\nstatic func .== (Self, Self) -> SIMDMask<Self.MaskStorage>\nA vector mask with the result of a pointwise equality comparison.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two vectors are equal.\nInitializers\ninit<S>(S)\nCreates a vector from the given sequence.\ninit(arrayLiteral: Self.Scalar...)\nCreates a vector from the specified elements.\ninit(from: Decoder) throws\nCreates a new vector by decoding scalars from the given decoder.\ninit(repeating: Self.Scalar)\nA vector with the specified value in all lanes.\nInstance Properties\nvar description: String\nA textual description of the vector.\nvar indices: Range<Int>\nThe valid indices for subscripting the vector.\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes the scalars of this vector into the given encoder in an unkeyed container.\nfunc hash(into: inout Hasher)\nHashes the elements of the vector using the given hasher.\nfunc replace(with: Self.Scalar, where: SIMDMask<Self.MaskStorage>)\nReplaces elements of this vector with other in the lanes where mask is true.\nfunc replace(with: Self, where: SIMDMask<Self.MaskStorage>)\nReplaces elements of this vector with elements of other in the lanes where mask is true.\nfunc replacing(with: Self, where: SIMDMask<Self.MaskStorage>) -> Self\nReturns a copy of this vector, with elements replaced by elements of other in the lanes where mask is true.\nfunc replacing(with: Self.Scalar, where: SIMDMask<Self.MaskStorage>) -> Self\nReturns a copy of this vector, with elements other in the lanes where mask is true."
  },
  {
    "title": "Int.Words.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/iterator",
    "html": "Discussion\n\nBy default, a collection conforms to the Sequence protocol by supplying IndexingIterator as its associated Iterator type."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/subscript(_:)",
    "html": "Parameters\nindex\n\nThe index of the element to access. index must be in the range 0..<scalarCount."
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-8kc21",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-93wj5",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-7qxdb",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-5eb2n",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-5dsdp",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-2hsah",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/contains(_:)",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n\nSee Also\nFinding Elements\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-3y37w",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends.\n\nSee Also\nFinding Elements\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/termination/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nComparing Termination Values\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(unfolding:onCancel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/init(unfolding:oncancel:)",
    "html": "Parameters\nproduce\n\nA closure that asynchronously produces elements for the stream.\n\nonCancel\n\nA closure to execute when canceling the stream’s task.\n\nDiscussion\n\nUse this convenience initializer when you have an asynchronous function that can produce elements for the stream, and don’t want to invoke a continuation manually. This initializer “unfolds” your closure into an asynchronous stream. The created stream handles conformance to the AsyncSequence protocol automatically, including termination (either by cancellation or by returning nil from the closure to finish iteration).\n\nThe following example shows an AsyncStream created with this initializer that produces random numbers on a one-second interval. This example uses the Swift multiple trailing closure syntax, which omits the unfolding parameter label.\n\nlet stream = AsyncStream<Int> {\n    await Task.sleep(1 * 1_000_000_000)\n    return Int.random(in: 1...10)\n} onCancel: { @Sendable () in print(\"Canceled.\") }\n\n\n// Call point:\nfor await random in stream {\n    print(random)\n}\n"
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/termination/!=(_:_:)",
    "html": "See Also\nComparing Termination Values\nstatic func == (AsyncStream<Element>.Continuation.Termination, AsyncStream<Element>.Continuation.Termination) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-221u7",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/asyncstream/continuation/termination/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-6ncn",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-6yxof",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-6q6ca",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-6y37h",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-68krs",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-4htdo",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-4gvh6",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-2j2hn",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-3kfo4",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-2jm3v",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-1tc07",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-1uajn",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-2h7n9",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-1vwr2",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-211v4",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-7qg9m",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-qerf",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-wt51",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-klo8",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-lhds",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-p18j",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-9pxoc",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-hn35",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-aosa",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-9nlep",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-889b7",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-7hlsy",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-6unjm",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-5wj86",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-76v5a",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-7ehzz",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-6x0g3",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-4zrb4",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-5mzr3",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-4acy9",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-11elm",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": "index(after:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/index(after:)",
    "html": "Parameters\ni\n\nA valid index of the collection. i must be less than endIndex.\n\nReturn Value\n\nThe index value immediately after i.\n\nDiscussion\n\nThe successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/subscript(_:)",
    "html": "Parameters\nposition\n\nThe position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property.\n\nOverview\n\nThe following example accesses an element of an array through its subscript to print its value:\n\nvar streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]\nprint(streets[1])\n// Prints \"Bryant\"\n\n\nYou can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.\n\nComplexity\n\nO(1)"
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/collection-implementations",
    "html": "Topics\nInstance Properties\nvar first: Self.Element?\nThe first element of the collection.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection."
  },
  {
    "title": "RandomAccessCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/randomaccesscollection-implementations",
    "html": "Topics\nInstance Methods\nfunc index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int/words-swift.struct/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-7yvsx",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-8bs2p",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-8fafz",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-7wxag",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-60cao",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-7uyp7",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replacing(with:where:)-4nikh",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-37pr7",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-9wmqe",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-11sio",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-g3jo",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-5p4g2",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-wwci",
    "html": "Discussion\n\nEquivalent to:\n\nif b { a = .!a }\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-nixb",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-gpt7",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-jiue",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-bbyz",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-9wm9x",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-dji1",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-9ybag",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-9s8nu",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-9cexc",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-91v5a",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-53c71",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-6vrul",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-6rb2k",
    "html": "Discussion\n\nEquivalent to:\n\nif b { a = SIMDMask(repeating: true) }\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-6jqlh",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-4m5ba",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-48r5d",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-5yqz0",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-55m63",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-4w85p",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-4jn7m",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-4rjbb",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-49ffo",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-4c0l2",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-4hstr",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-564rm",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-424pq",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-7qytv",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-75fbk",
    "html": "Discussion\n\nEquivalent to b ? SIMDMask(repeating: true) : a"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-4egrz",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-8z99n",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-4zc4a",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-7qdxf",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-77675",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-5qb7m",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-35gl4",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-36fwo",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-3jpjw",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-19x8",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-1bqze",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-32bpi",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-2fptv",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-3lgta",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-28avd",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-33sbw",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-17zji",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-1skak",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-1kwjk",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-gx5e",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-10b9k",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-vf27",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-rztm",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-9s54c",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-3huzu",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-9lt9f",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-1apjj",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-9t6d6",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-9i0ho",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-2l1cw",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-21nlg",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-9h7g4",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-24wgu",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-9picb",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-99sse",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-3wsfp",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/replace(with:where:)-2xv7u",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-952oz",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-3r14q",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-3n4if",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-7vb81",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-75ws5",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-7bu3y",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-7gotm",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-78qic",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-8wkee",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-8n751",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-8ts0r",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-7hjr8",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-77voy",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-7rhqy",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-6gi0j",
    "html": "Discussion\n\nEquivalent to:"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-7h67k",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-5uq1i",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-94c8y",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-3zval",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-93uww",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-93fh3",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-86pih",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-8ovj4",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-8oxhr",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-8pklp",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-8pb64",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-81c6m",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-91mg7",
    "html": "Discussion\n\nEquivalent to a ? SIMDMask(repeating: true) : b."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-5to13",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-6pru",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-865a6",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-856yj",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-87ha8",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-7tall",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-7yq75",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<${Vector}>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-78lxr",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-753hw",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-52ll8",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-9kh2c",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-521pj",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<${Vector}>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-6zusl",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-4qn8l",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-4hjau",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-4akg1",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-3wd47",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-3uhaz",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-6tmg8",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-3tj8x",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-8q5wb",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-187ym",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-3t3b6",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-962kz",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-3lp52",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-70wd4",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-3c5yv",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-6p7x3",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-3dwxc",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-6ou9w",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-36zd7",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-3l4kc",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-3dnxc",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-1l06v",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-3cq16",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._=(_:_:)-289ei",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] || b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-3qurd",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-2awxi",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-3oxz3",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-2cb7l",
    "html": "Discussion\n\nEquivalent to b ? .!a : a."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-2qbki",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-k5h7",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-1lqpw",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-979dh",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-1ke9",
    "html": "Discussion\n\nEquivalent to a ? .!b : b."
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-xxgz",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-7fdu0",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-11sjt",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-91rl9",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-riwy",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-8vssm",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-8ergy",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-71h0j",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-6vw48",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-39nci",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-42ijc",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-587zp",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-57ghp",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-45t84",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-4b0ny",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-3myzv",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-67dx6",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-5h2mq",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-2iimf",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-3hdhk",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-3kebh",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-6cck1",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-6fplg",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-145py",
    "html": "Discussion\n\nEquivalent to b ? a : SIMDMask(repeating: false)."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-63r3t",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-5ic47",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-6l9ra",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-6dhf6",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-5bq2t",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-6v0gb",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-6g5ou",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-6j7cz",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-5pu7e",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-5crsr",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-5coqj",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-skpc",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-4vik1",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-11d2d",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-7wb1u",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-1jvgs",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-1og62",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-9wv32",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-lg4i",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-icc",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-7oyep",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-63gip",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-62ajs",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-5lkct",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-5kwst",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-5jyb3",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-4ysik",
    "html": "Discussion\n\nEquivalent to:\n\nif !b { a = SIMDMask(repeating: false) }\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-252cj",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-20boa",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-2imak",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-3o5p8",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-374nn",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-2na0m",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-20xdw",
    "html": "Discussion\n\nEquivalent to a ? b : SIMDMask(repeating: false)."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-33q5z",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-2lwk7",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<${Vector}>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-1na0j",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-2ihng",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-1bstv",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-3ky5",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-1lz4p",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-2fut5",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-1lxbl",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".|(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-3bgdq",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] || b[i]\n}\n\n\nNote that unlike the scalar || operator, the SIMD .| operator always fully evaluates both arguments."
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-1zt0u",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-1orsn",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".^(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'._(_:_:)-1kfk0",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-60n7g",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-3gcbu",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-169o8",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-m7n7",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-12gkg",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-zszx",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-fq1q",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-9u9mk",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-9nff3",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-97hdm",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-9qn9n",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-9429d",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-9915i",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-7mo1z",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-8pp6f",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-892f",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-6xn07",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-5zen",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-67j",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-557cy",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-4x5gc",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-4ryow",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-4dlkk",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-4am8f",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-49px",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-2brx5",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-284j9",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-2dam3",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-431pz",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.==(_:_:)-1ubfu",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-86khr",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-8yjqn",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-85bn8",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-844uv",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-95thm",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-8ur23",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-52kbo",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-5en6",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-34ad1",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-412oe",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int64>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-4uyji",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-423h5",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-1ucx5",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-1pshx",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-1a23z",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-mac2",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-g3o1",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-eifj",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-dffz",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-9vgs4",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-a5c6",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-7c281",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-1cwox",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-1wpn1",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-6xo9v",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-9tocb",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-7i3ju",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-9qlrq",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-9pxno",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-7eoc8",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&=(_:_:)-1x3hq",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in a.indices {\n  a[i] = a[i] && b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-6k7jt",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-680i1",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-6xa9c",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-67wgv",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-1wni3",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-2s4rp",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int8>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-21iaq",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int32>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-4j1ws",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int8>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-369g7",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int64>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-69426",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-5c1ea",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-4qjq3",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-57336",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-6g155",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-4efoo",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-3ylip",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-3aavu",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-1xcmp",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-3vfg0",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-w95r",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int16>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-9oij3",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int8>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-2peib",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int64>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".&(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.&(_:_:)-3q922",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int>>()\nfor i in result.indices {\n  result[i] = a[i] && b[i]\n}\n\n\nNote that unlike the scalar && operator, the SIMD .& operator always fully evaluates both arguments."
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-y5ox",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-9gbp0",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-72ix7",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int32>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-1uoo5",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int16>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-1taxm",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int8>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-2xidg",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int8>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-37o53",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int32>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-3cez8",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int32>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-3v0wb",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int16>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-6cygw",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int32>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-5qm8v",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int16>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-5glpy",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int16>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-7iq11",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int32>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-5byae",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int64>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-4x8xz",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int16>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-4jcjq",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int8>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": "wrappedSum() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd/wrappedsum()",
    "html": "Discussion\n\nEquivalent to indices.reduce(into: 0) { $0 &+= self[$1] }."
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd/replacing(with:where:)-8vzk",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other : self[i]\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd/replace(with:where:)-91tn3",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other[i] }\n}\n"
  },
  {
    "title": "replacing(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd/replacing(with:where:)-1nga6",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = Self()\nfor i in indices {\n  result[i] = mask[i] ? other[i] : self[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-5b2tn",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": "replace(with:where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd/replace(with:where:)-6if0p",
    "html": "Discussion\n\nEquivalent to:\n\nfor i in indices {\n  if mask[i] { self[i] = other }\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-5b65c",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int16>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-4yah8",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!=(_:_:)-52wyk",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int8>>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-9j4wf",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int64>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": "MaskStorage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd/maskstorage",
    "html": "Required"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-9afyr",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int32>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd/init(_:)",
    "html": "Parameters\nscalars\n\nThe elements to use in the vector.\n\nDiscussion\n\nPrecondition\n\nscalars must have the same number of elements as the vector type."
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-9lm1f",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<${Vector}>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-8qz21",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD3<Int64>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-8qmdw",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int32>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-1i6z4",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int8>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-7odqs",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD32<Int>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-864jr",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD2<Int>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-7odl6",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-88k9y",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int64>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-8ewdk",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-7x8d0",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD64<Int>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-7oxtu",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD8<Int64>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-8ps9r",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD4<Int>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".!(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simdmask/'.!(_:)-8fdgj",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<SIMD16<Int16>>()\nfor i in result.indices {\n  result[i] = !a[i]\n}\n"
  },
  {
    "title": ".==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd/'.==(_:_:)-1nb4h",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<MaskStorage>()\nfor i in result.indices {\n  result[i] = a[i] == b[i]\n}\n"
  },
  {
    "title": "AdditiveArithmetic Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/additivearithmetic-implementations",
    "html": "Topics\nOperators\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func += (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func -= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable.\nType Properties\nstatic var zero: Self\nThe zero value.\nAvailable when Self conforms to ExpressibleByIntegerLiteral."
  },
  {
    "title": "bitWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/bitwidth-swift.type.property",
    "html": "Discussion\n\nThe bit width of an Int8 instance is 8."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nA mirror that reflects the Int8 instance."
  },
  {
    "title": "dividedReportingOverflow(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/dividedreportingoverflow(by:)",
    "html": "Parameters\nrhs\n\nThe value to divide this value by.\n\nReturn Value\n\nA tuple containing the result of the division along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire quotient. If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend.\n\nDiscussion\n\nDividing by zero is not an error when using this method. For a value x, the result of x.dividedReportingOverflow(by: 0) is (x, true)."
  },
  {
    "title": "addingReportingOverflow(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/addingreportingoverflow(_:)",
    "html": "Parameters\nrhs\n\nThe value to add to this value.\n\nReturn Value\n\nA tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire sum. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated sum of this value and rhs."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/partialrangefrom/sequence-implementations",
    "html": "Topics\nStructures\nstruct Iterator\nThe iterator for a PartialRangeFrom instance.\nAvailable when Bound conforms to Strideable and Bound.Stride conforms to SignedInteger.\nInstance Methods\nfunc makeIterator() -> PartialRangeFrom<Bound>.Iterator\nReturns an iterator for this sequence.\nAvailable when Bound conforms to Strideable and Bound.Stride conforms to SignedInteger.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements.\nAvailable when Bound conforms to Strideable and Bound.Stride conforms to SignedInteger."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/init(_:)-6g8q9",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/init(exactly:)-78es1",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "RangeExpression Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/partialrangefrom/rangeexpression-implementations",
    "html": "Topics\nOperators\nstatic func ~= (Self, Self.Bound) -> Bool\nReturns a Boolean value indicating whether a value is included in a range.\nInstance Methods\nfunc contains(Bound) -> Bool\nReturns a Boolean value indicating whether the given element is contained within the range expression.\nAvailable when Bound conforms to Comparable.\nfunc relative<C>(to: C) -> Range<Bound>\nReturns the range of indices described by this range expression within the given collection.\nAvailable when Bound conforms to Comparable."
  },
  {
    "title": "Decodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/partialrangefrom/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when Bound conforms to Comparable and Decodable."
  },
  {
    "title": "Encodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/partialrangefrom/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder.\nAvailable when Bound conforms to Comparable and Encodable."
  },
  {
    "title": "BinaryInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/binaryinteger-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func != <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the two given values are not equal.\nstatic func & (Self, Self) -> Self\nReturns the result of performing a bitwise AND operation on the two given values.\nstatic func & (Int8, Int8) -> Int8\nReturns the result of performing a bitwise AND operation on the two given values.\nstatic func * (Int8, Int8) -> Int8\nMultiplies two values and produces their product.\nstatic func + (Int8, Int8) -> Int8\nAdds two values and produces their sum.\nstatic func - (Int8, Int8) -> Int8\nSubtracts one value from another and produces their difference.\nstatic func / (Int8, Int8) -> Int8\nReturns the quotient of dividing the first value by the second.\nstatic func == <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the two given values are equal.\nstatic func ^ (Int8, Int8) -> Int8\nReturns the result of performing a bitwise XOR operation on the two given values.\nstatic func > <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func | (Int8, Int8) -> Int8\nReturns the result of performing a bitwise OR operation on the two given values.\nstatic func < <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func | (Self, Self) -> Self\nReturns the result of performing a bitwise OR operation on the two given values.\nstatic func % (Int8, Int8) -> Int8\nReturns the remainder of dividing the first value by the second.\nstatic func ^ (Self, Self) -> Self\nReturns the result of performing a bitwise XOR operation on the two given values.\nstatic func <= <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= <Other>(Self, Other) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func << <RHS>(Self, RHS) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left.\nstatic func >> <RHS>(Self, RHS) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right.\nstatic func >>= <Other>(inout Self, Other)\nStores the result of shifting a value’s binary representation the specified number of digits to the right in the left-hand-side variable.\nstatic func <<= <Other>(inout Self, Other)\nStores the result of shifting a value’s binary representation the specified number of digits to the left in the left-hand-side variable.\nInitializers\ninit()\nCreates a new value equal to zero.\ninit(String, format: IntegerFormatStyle<Self>.Currency, lenient: Bool) throws\ninit(String, format: IntegerFormatStyle<Self>, lenient: Bool) throws\ninit(String, format: IntegerFormatStyle<Self>.Percent, lenient: Bool) throws\ninit<S>(S.ParseInput, strategy: S) throws\nInitialize an instance by parsing value with the given strategy.\ninit<S>(S.ParseInput, strategy: S) throws\nInstance Properties\nvar description: String\nA textual representation of this value.\nInstance Methods\nfunc advanced(by: Int) -> Self\nReturns a value that is offset the specified distance from this value.\nfunc distance(to: Self) -> Int\nReturns the distance from this value to the given value, expressed as a stride.\nfunc formatted() -> String\nFormat self using IntegerFormatStyle()\nfunc formatted<S>(S) -> S.FormatOutput\nFormat self with the given format.\nfunc formatted<S>(S) -> S.FormatOutput\nFormat self with the given format. self is first converted to S.FormatInput type, then format with the given format.\nfunc isMultiple(of: Self) -> Bool\nReturns true if this value is a multiple of the given value, and false otherwise.\nAvailable when Self conforms to FixedWidthInteger.\nfunc quotientAndRemainder(dividingBy: Self) -> (quotient: Self, remainder: Self)\nReturns the quotient and remainder of this value divided by the given value."
  },
  {
    "title": "FixedWidthInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/fixedwidthinteger-implementations",
    "html": "Topics\nOperators\nstatic func &* (Self, Self) -> Self\nReturns the product of the two given values, wrapping the result in case of any overflow.\nstatic func &*= (inout Self, Self)\nMultiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.\nstatic func &+ (Self, Self) -> Self\nReturns the sum of the two given values, wrapping the result in case of any overflow.\nstatic func &+= (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable, wrapping any overflow.\nstatic func &- (Self, Self) -> Self\nReturns the difference of the two given values, wrapping the result in case of any overflow.\nstatic func &-= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.\nstatic func &>> (Int8, Int8) -> Int8\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &>> <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &<< <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &<< (Int8, Int8) -> Int8\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &<< (Self, Self) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &>> (Self, Self) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &<<= <Other>(inout Self, Other)\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.\nstatic func &>>= <Other>(inout Self, Other)\nCalculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.\nstatic func << <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left.\nstatic func >> <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right.\nstatic func ~ (Self) -> Self\nReturns the inverse of the bits set in the argument.\nInitializers\ninit<T>(T)\nCreates an integer from the given floating-point value, rounding toward zero. Any fractional part of the value passed as source is removed.\ninit?(String)\nCreates a new integer value from the given string.\ninit?<S>(S, radix: Int)\nCreates a new integer value from the given string and radix.\ninit(bigEndian: Self)\nCreates an integer from its big-endian representation, changing the byte order if necessary.\ninit<Other>(clamping: Other)\nCreates a new instance with the representable value that’s closest to the given integer.\ninit?<T>(exactly: T)\nCreates an integer from the given floating-point value, if it can be represented exactly.\ninit(littleEndian: Self)\nCreates an integer from its little-endian representation, changing the byte order if necessary.\ninit<T>(truncatingIfNeeded: T)\nCreates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type.\nInstance Properties\nvar bigEndian: Self\nThe big-endian representation of this integer.\nvar bitWidth: Int\nThe number of bits in the binary representation of this value.\nvar littleEndian: Self\nThe little-endian representation of this integer.\nType Methods\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness."
  },
  {
    "title": "SignedInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/signedinteger-implementations",
    "html": "Topics\nOperators\nstatic func &+ (Self, Self) -> Self\nAvailable when Self conforms to FixedWidthInteger.\nDeprecated\nstatic func &- (Self, Self) -> Self\nAvailable when Self conforms to FixedWidthInteger.\nDeprecated\nInitializers\ninit<T>(T)\nCreates a new instance from the given integer.\nAvailable when Self conforms to FixedWidthInteger.\ninit?<T>(exactly: T)\nCreates a new instance from the given integer, if it can be represented exactly.\nAvailable when Self conforms to FixedWidthInteger.\nType Properties\nstatic var isSigned: Bool\nA Boolean value indicating whether this type is a signed integer type.\nstatic var max: Self\nThe maximum representable integer in this type.\nAvailable when Self conforms to FixedWidthInteger.\nstatic var min: Self\nThe minimum representable integer in this type.\nAvailable when Self conforms to FixedWidthInteger."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func < (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func > (Int8, Int8) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func <= (Int8, Int8) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Int8, Int8) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "signum() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/signum()",
    "html": "Return Value\n\nThe sign of this number, expressed as an integer of the same type."
  },
  {
    "title": "subtractingReportingOverflow(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/subtractingreportingoverflow(_:)",
    "html": "Parameters\nrhs\n\nThe value to subtract from this value.\n\nReturn Value\n\nA tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire difference. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated result of rhs subtracted from this value."
  },
  {
    "title": "multipliedReportingOverflow(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/multipliedreportingoverflow(by:)",
    "html": "Parameters\nrhs\n\nThe value to multiply by this value.\n\nReturn Value\n\nA tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire product. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs."
  },
  {
    "title": "multipliedFullWidth(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/multipliedfullwidth(by:)",
    "html": "Parameters\nother\n\nThe value to multiply this value by.\n\nReturn Value\n\nA tuple containing the high and low parts of the result of multiplying this value and other.\n\nDiscussion\n\nUse this method to calculate the full result of a product that would otherwise overflow. Unlike traditional truncating multiplication, the multipliedFullWidth(by:) method returns a tuple containing both the high and low parts of the product of this value and other. The following example uses this method to multiply two UInt8 values that normally overflow when multiplied:\n\nlet x: UInt8 = 100\nlet y: UInt8 = 20\nlet result = x.multipliedFullWidth(by: y)\n// result.high == 0b00000111\n// result.low  == 0b11010000\n\n\nThe product of x and y is 2000, which is too large to represent in a UInt8 instance. The high and low properties of the result value represent 2000 when concatenated to form a double-width integer; that is, using result.high as the high byte and result.low as the low byte of a UInt16 instance.\n\nlet z = UInt16(result.high) << 8 | UInt16(result.low)\n// z == 2000\n"
  },
  {
    "title": "dividingFullWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/dividingfullwidth(_:)",
    "html": "Parameters\ndividend\n\nA tuple containing the high and low parts of a double-width integer. The high component of the value carries the sign, if the type is signed.\n\nReturn Value\n\nA tuple containing the quotient and remainder of dividend divided by this value.\n\nDiscussion\n\nThe resulting quotient must be representable within the bounds of the type. If the quotient of dividing dividend by this value is too large to represent in the type, a runtime error may occur."
  },
  {
    "title": "trailingZeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/trailingzerobitcount",
    "html": "Discussion\n\nFor example, the number -8 has three trailing zeros.\n\nlet x = Int8(bitPattern: 0b1111_1000)\n// x == -8\n// x.trailingZeroBitCount == 3\n"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-74ir4",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": ".!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd/'.!=(_:_:)-3m98p",
    "html": "Discussion\n\nEquivalent to:\n\nvar result = SIMDMask<MaskStorage>()\nfor i in result.indices {\n  result[i] = a[i] != b[i]\n}\n"
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-1iwt4",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "??(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/__(_:_:)-8buau",
    "html": "Parameters\noptional\n\nAn optional value.\n\ndefaultValue\n\nA value to use as a default. defaultValue is the same type as the Wrapped type of optional.\n\nDiscussion\n\nA nil-coalescing operation unwraps the left-hand side if it has a value, or it returns the right-hand side as a default. The result of this operation will have the non-optional type of the left-hand side’s Wrapped type.\n\nThis operator uses short-circuit evaluation: optional is checked first, and defaultValue is evaluated only if optional is nil. For example:\n\nfunc getDefault() -> Int {\n    print(\"Calculating default...\")\n    return 42\n}\n\n\nlet goodNumber = Int(\"100\") ?? getDefault()\n// goodNumber == 100\n\n\nlet notSoGoodNumber = Int(\"invalid-input\") ?? getDefault()\n// Prints \"Calculating default...\"\n// notSoGoodNumber == 42\n\n\nIn this example, goodNumber is assigned a value of 100 because Int(\"100\") succeeded in returning a non-nil result. When notSoGoodNumber is initialized, Int(\"invalid-input\") fails and returns nil, and so the getDefault() method is called to supply a default value.\n\nSee Also\nCoalescing Nil Values\nfunc ?? <T>(T?, () throws -> T?) rethrows -> T?\nPerforms a nil-coalescing operation, returning the wrapped value of an Optional instance or a default Optional value."
  },
  {
    "title": "publisher | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/publisher-swift.property",
    "html": "See Also\nPublishing an Optional\nstruct Publisher\nThe type of a Combine publisher that publishes the value of a Swift optional instance to each subscriber exactly once, if the instance has any value at all."
  },
  {
    "title": "*=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/*=(_:_:)",
    "html": "Parameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply.\n\nDiscussion\n\nThe product of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 * 21 is greater than the maximum representable Int8 value:\n\nvar x: Int8 = 21\nx * 21\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "nonzeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/nonzerobitcount",
    "html": "Discussion\n\nFor example, in a fixed-width integer type with a bitWidth value of 8, the number 31 has five bits equal to 1.\n\nlet x: Int8 = 0b0001_1111\n// x == 31\n// x.nonzeroBitCount == 5\n"
  },
  {
    "title": "leadingZeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/leadingzerobitcount",
    "html": "Discussion\n\nFor example, in an integer type with a bitWidth value of 8, the number 31 has three leading zeros.\n\nlet x: Int8 = 0b0001_1111\n// x == 31\n// x.leadingZeroBitCount == 3\n"
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/+=(_:_:)-113rc",
    "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDiscussion\n\nThe sum of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 + 120 is greater than the maximum representable Int8 value:\n\nvar x: Int8 = 21\nx += 120\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "&>>=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/&__=(_:_:)-17e9w",
    "html": "Parameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nThe &>>= operator performs a masking shift, where the value passed as rhs is masked to produce a value in the range 0..<lhs.bitWidth. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nvar x: UInt8 = 30                 // 0b00011110\nx &>>= 2\n// x == 7                         // 0b00000111\n\n\nHowever, if you use 19 as rhs, the operation first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.\n\nvar y: UInt8 = 30                 // 0b00011110\ny &>>= 19\n// y == 3                         // 0b00000011\n"
  },
  {
    "title": "&<<=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/&__=(_:_:)-7gdrc",
    "html": "Parameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nThe &<<= operator performs a masking shift, where the value used as rhs is masked to produce a value in the range 0..<lhs.bitWidth. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nvar x: UInt8 = 30                 // 0b00011110\nx &<<= 2\n// x == 120                       // 0b01111000\n\n\nHowever, if you pass 19 as rhs, the method first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.\n\nvar y: UInt8 = 30                 // 0b00011110\ny &<<= 19\n// y == 240                       // 0b11110000\n"
  },
  {
    "title": "<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/_(_:_:)-1kdfe",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nThis function is the only requirement of the Comparable protocol. The remainder of the relational operator functions are implemented by the standard library for any type that conforms to Comparable."
  },
  {
    "title": "-=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/-=(_:_:)-oery",
    "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDiscussion\n\nThe difference of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 - 50 is less than zero, the minimum representable UInt8 value:\n\nvar x: UInt8 = 21\nx - 50\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/_=(_:_:)-19gzu",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise OR operation results in a value that has each bit set to 1 where one or both of its arguments have that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx |= y                    // 0b00001111\n"
  },
  {
    "title": "^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/_=(_:_:)-2mpgr",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise XOR operation, also known as an exclusive OR operation, results in a value that has each bit set to 1 where one or the other but not both of its arguments had that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx ^= y                    // 0b00001011\n"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/init(exactly:)-6zkv6",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/==(_:_:)-21buw",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/init(_:)-7renq",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/init(_:)-44cer",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/init(_:)-47zy8",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "%=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/_=(_:_:)-3o9cs",
    "html": "Parameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nThe result has the same sign as lhs and has a magnitude less than rhs.magnitude.\n\nvar x = 22\nx %= 5\n// x == 2\n\n\nvar y = 22\ny %= -5\n// y == 2\n\n\nvar z = -22\nz %= -5\n// z == -2\n"
  },
  {
    "title": "_IntentValue Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/_intentvalue-implementations",
    "html": "Topics\nType Aliases\ntypealias Specification\nAvailable when Wrapped conforms to _IntentValue.\ntypealias UnwrappedType\nAvailable when Wrapped conforms to _IntentValue.\ntypealias ValueType\nAvailable when Wrapped conforms to _IntentValue.\nType Properties\nstatic var defaultResolverSpecification: Wrapped.UnwrappedType.Specification\nAvailable when Wrapped conforms to _IntentValue."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Wrapped conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Wrapped conforms to Hashable."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Wrapped?, Wrapped?) -> Bool\nReturns a Boolean value indicating whether two optional instances are equal.\nAvailable when Wrapped conforms to Equatable."
  },
  {
    "title": "DecodableWithConfiguration Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/decodablewithconfiguration-implementations",
    "html": "Topics\nInitializers\ninit(from: Decoder, configuration: Wrapped.DecodingConfiguration) throws\nAvailable when Wrapped conforms to DecodableWithConfiguration.\nType Aliases\ntypealias DecodingConfiguration\nAvailable when Wrapped conforms to DecodableWithConfiguration."
  },
  {
    "title": "Decodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when Wrapped conforms to Decodable."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "AttachmentContent Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/attachmentcontent-implementations",
    "html": "Topics\nInstance Properties\nvar body: Never\nAvailable when Wrapped conforms to AttachmentContent.\nBeta\nType Aliases\ntypealias Body\nAvailable when Wrapped conforms to AttachmentContent.\nBeta"
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/!=(_:_:)-7mfjn",
    "html": "Parameters\nlhs\n\nA value to compare to nil.\n\nrhs\n\nA nil literal.\n\nDiscussion\n\nYou can use this not-equal-to operator (!=) to test whether an optional instance is not nil even when the wrapped value’s type does not conform to the Equatable protocol.\n\nThe following example declares the stream variable as an optional instance of a hypothetical DataStream type. Although DataStream is not an Equatable type, this operator allows checking whether stream wraps a value and is therefore not nil.\n\nvar stream: DataStream? = fetchDataStream()\nif stream != nil {\n    print(\"The data stream has been configured.\")\n}\n// Prints \"The data stream has been configured.\"\n"
  },
  {
    "title": "SIMDScalar Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/simdscalar-implementations",
    "html": "Topics\nStructures\nstruct SIMD16Storage\nStorage for a vector of 16 integers.\nstruct SIMD2Storage\nStorage for a vector of two integers.\nstruct SIMD32Storage\nStorage for a vector of 32 integers.\nstruct SIMD4Storage\nStorage for a vector of four integers.\nstruct SIMD64Storage\nStorage for a vector of 64 integers.\nstruct SIMD8Storage\nStorage for a vector of eight integers.\nType Aliases\ntypealias SIMDMaskScalar"
  },
  {
    "title": "Encodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "ExpressibleByIntegerLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/expressiblebyintegerliteral-implementations",
    "html": "Topics\nInitializers\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "SIMD Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd64/simd-implementations",
    "html": "Topics\nOperators\nstatic func & (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func & (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func & (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &* (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &* (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &* (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &*= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &*= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+ (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+ (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+ (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &- (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &- (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &- (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &-= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &-= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<< (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>> (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<< (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>> (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>> (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<< (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>>= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>>= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<<= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<<= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func * (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func * (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func * (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func * (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func * (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func * (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func *= (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func *= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func *= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func *= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func + (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func + (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func + (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func + (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func + (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func + (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func += (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func += (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func += (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func += (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func - (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func - (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func -= (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func -= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func -= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func -= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func .!= (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise inequality comparison.\nstatic func .!= (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise inequality comparison.\nstatic func .!= (Self, Self) -> SIMDMask<Self.MaskStorage>\nA vector mask with the result of a pointwise inequality comparison.\nstatic func .== (Self, Self) -> SIMDMask<Self.MaskStorage>\nA vector mask with the result of a pointwise equality comparison.\nstatic func .== (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise equality comparison.\nstatic func .== (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise equality comparison.\nstatic func .< (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .> (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .> (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .< (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .> (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .< (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .>= (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .<= (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .>= (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .<= (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .<= (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .>= (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func / (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func / (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func / (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func / (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func / (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func / (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func /= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func /= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func /= (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func /= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two vectors are equal.\nstatic func | (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func | (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func % (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^ (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^ (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func | (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^ (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func % (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func % (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func %= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func |= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func %= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func |= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ~ (Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nInitializers\ninit<S>(S)\nCreates a vector from the given sequence.\ninit(arrayLiteral: Self.Scalar...)\nCreates a vector from the specified elements.\ninit(from: Decoder) throws\nCreates a new vector by decoding scalars from the given decoder.\ninit(repeating: Self.Scalar)\nA vector with the specified value in all lanes.\nInstance Properties\nvar description: String\nA textual description of the vector.\nvar indices: Range<Int>\nThe valid indices for subscripting the vector.\nvar leadingZeroBitCount: Self\nAvailable when Scalar conforms to FixedWidthInteger.\nvar nonzeroBitCount: Self\nAvailable when Scalar conforms to FixedWidthInteger.\nvar trailingZeroBitCount: Self\nAvailable when Scalar conforms to FixedWidthInteger.\nInstance Methods\nfunc addProduct(Self.Scalar, Self)\nAvailable when Scalar conforms to FloatingPoint.\nfunc addProduct(Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nfunc addProduct(Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nfunc addingProduct(Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc addingProduct(Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc addingProduct(Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc clamp(lowerBound: Self, upperBound: Self)\nAvailable when Scalar conforms to Comparable.\nfunc clamp(lowerBound: Self, upperBound: Self)\nAvailable when Scalar conforms to FloatingPoint.\nfunc clamped(lowerBound: Self, upperBound: Self) -> Self\nAvailable when Scalar conforms to Comparable.\nfunc clamped(lowerBound: Self, upperBound: Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc encode(to: Encoder) throws\nEncodes the scalars of this vector into the given encoder in an unkeyed container.\nfunc formSquareRoot()\nAvailable when Scalar conforms to FloatingPoint.\nfunc hash(into: inout Hasher)\nHashes the elements of the vector using the given hasher.\nfunc max() -> Self.Scalar\nThe greatest scalar in the vector.\nAvailable when Scalar conforms to FloatingPoint.\nfunc max() -> Self.Scalar\nThe greatest element in the vector.\nAvailable when Scalar conforms to Comparable.\nfunc min() -> Self.Scalar\nThe least element in the vector.\nAvailable when Scalar conforms to Comparable.\nfunc min() -> Self.Scalar\nThe least scalar in the vector.\nAvailable when Scalar conforms to FloatingPoint.\nfunc replace(with: Self, where: SIMDMask<Self.MaskStorage>)\nReplaces elements of this vector with elements of other in the lanes where mask is true.\nfunc replace(with: Self.Scalar, where: SIMDMask<Self.MaskStorage>)\nReplaces elements of this vector with other in the lanes where mask is true.\nfunc replacing(with: Self, where: SIMDMask<Self.MaskStorage>) -> Self\nReturns a copy of this vector, with elements replaced by elements of other in the lanes where mask is true.\nfunc replacing(with: Self.Scalar, where: SIMDMask<Self.MaskStorage>) -> Self\nReturns a copy of this vector, with elements other in the lanes where mask is true.\nfunc round(FloatingPointRoundingRule)\nAvailable when Scalar conforms to FloatingPoint.\nfunc rounded(FloatingPointRoundingRule) -> Self\nA vector formed by rounding each lane of the source vector to an integral value according to the specified rounding rule.\nAvailable when Scalar conforms to FloatingPoint.\nfunc squareRoot() -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc sum() -> Self.Scalar\nThe sum of the scalars in the vector.\nAvailable when Scalar conforms to FloatingPoint.\nfunc wrappedSum() -> Self.Scalar\nReturns the sum of the scalars in the vector, computed with wrapping addition.\nAvailable when Scalar conforms to FixedWidthInteger.\nType Properties\nstatic var one: Self\nA vector with one in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic var one: Self\nA vector with one in all lanes.\nAvailable when Scalar conforms to FloatingPoint.\nstatic var zero: Self\nA vector with zero in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic var zero: Self\nA vector with zero in all lanes.\nAvailable when Scalar conforms to FloatingPoint.\nType Methods\nstatic func random(in: ClosedRange<Self.Scalar>) -> Self\nReturns a vector with random values from within the specified range in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func random(in: Range<Self.Scalar>) -> Self\nReturns a vector with random values from within the specified range in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func random<T>(in: Range<Self.Scalar>, using: inout T) -> Self\nReturns a vector with random values from within the specified range in all lanes, using the given generator as a source for randomness.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func random<T>(in: ClosedRange<Self.Scalar>, using: inout T) -> Self\nReturns a vector with random values from within the specified range in all lanes, using the given generator as a source for randomness.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "SignedNumeric Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/signednumeric-implementations",
    "html": "Topics\nOperators\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nInstance Methods\nfunc negate()\nReplaces this value with its additive inverse."
  },
  {
    "title": "Decodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "_CustomPlaygroundQuickLookable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/_customplaygroundquicklookable-implementations",
    "html": "Topics\nInstance Properties\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for the Int8 instance.\nDeprecated"
  },
  {
    "title": "words | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/words-swift.property",
    "html": "Discussion\n\nNegative values are returned in two’s complement representation, regardless of the type’s underlying implementation."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-8tib2",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-3e257",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-7vj8e",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "encode(to:configuration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/encode(to:configuration:)",
    "html": "See Also\nEncoding and Decoding\nfunc encode(to: Encoder) throws\nEncodes this optional value into the given encoder.\nAvailable when Wrapped conforms to Encodable.\ntypealias EncodingConfiguration\nAvailable when Wrapped conforms to EncodableWithConfiguration.\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when Wrapped conforms to Decodable.\ninit(from: Decoder, configuration: Wrapped.DecodingConfiguration) throws\nAvailable when Wrapped conforms to DecodableWithConfiguration.\ntypealias DecodingConfiguration\nAvailable when Wrapped conforms to DecodableWithConfiguration."
  },
  {
    "title": "init(nilLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/init(nilliteral:)",
    "html": "Discussion\n\nDo not call this initializer directly. It is used by the compiler when you initialize an Optional instance with a nil literal. For example:\n\nvar i: Index? = nil\n\n\nIn this example, the assignment to the i variable calls this initializer behind the scenes.\n\nSee Also\nCreating a Nil Value\ncase none\nThe absence of a value."
  },
  {
    "title": "Optional.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/none",
    "html": "Discussion\n\nIn code, the absence of a value is typically written using the nil literal rather than the explicit .none enumeration case.\n\nSee Also\nCreating a Nil Value\ninit(nilLiteral: ())\nCreates an instance initialized with nil."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/map(_:)",
    "html": "Parameters\ntransform\n\nA closure that takes the unwrapped value of the instance.\n\nReturn Value\n\nThe result of the given closure. If this instance is nil, returns nil.\n\nDiscussion\n\nUse the map method with a closure that returns a non-optional value. This example performs an arithmetic operation on an optional integer.\n\nlet possibleNumber: Int? = Int(\"42\")\nlet possibleSquare = possibleNumber.map { $0 * $0 }\nprint(possibleSquare)\n// Prints \"Optional(1764)\"\n\n\nlet noNumber: Int? = nil\nlet noSquare = noNumber.map { $0 * $0 }\nprint(noSquare)\n// Prints \"nil\"\n\nSee Also\nTransforming an Optional Value\nfunc flatMap<U>((Wrapped) throws -> U?) rethrows -> U?\nEvaluates the given closure when this Optional instance is not nil, passing the unwrapped value as a parameter."
  },
  {
    "title": "Optional.EncodingConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/encodingconfiguration",
    "html": "See Also\nEncoding and Decoding\nfunc encode(to: Encoder) throws\nEncodes this optional value into the given encoder.\nAvailable when Wrapped conforms to Encodable.\nfunc encode(to: Encoder, configuration: Wrapped.EncodingConfiguration) throws\nAvailable when Wrapped conforms to EncodableWithConfiguration.\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when Wrapped conforms to Decodable.\ninit(from: Decoder, configuration: Wrapped.DecodingConfiguration) throws\nAvailable when Wrapped conforms to DecodableWithConfiguration.\ntypealias DecodingConfiguration\nAvailable when Wrapped conforms to DecodableWithConfiguration."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/flatmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that takes the unwrapped value of the instance.\n\nReturn Value\n\nThe result of the given closure. If this instance is nil, returns nil.\n\nDiscussion\n\nUse the flatMap method with a closure that returns an optional value. This example performs an arithmetic operation with an optional result on an optional integer.\n\nlet possibleNumber: Int? = Int(\"42\")\nlet nonOverflowingSquare = possibleNumber.flatMap { x -> Int? in\n    let (result, overflowed) = x.multipliedReportingOverflow(by: x)\n    return overflowed ? nil : result\n}\nprint(nonOverflowingSquare)\n// Prints \"Optional(1764)\"\n\nSee Also\nTransforming an Optional Value\nfunc map<U>((Wrapped) throws -> U) rethrows -> U?\nEvaluates the given closure when this Optional instance is not nil, passing the unwrapped value as a parameter."
  },
  {
    "title": "??(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/__(_:_:)-4co2t",
    "html": "Parameters\noptional\n\nAn optional value.\n\ndefaultValue\n\nA value to use as a default. defaultValue and optional have the same type.\n\nDiscussion\n\nA nil-coalescing operation unwraps the left-hand side if it has a value, or returns the right-hand side as a default. The result of this operation will be the same type as its arguments.\n\nThis operator uses short-circuit evaluation: optional is checked first, and defaultValue is evaluated only if optional is nil. For example:\n\nlet goodNumber = Int(\"100\") ?? Int(\"42\")\nprint(goodNumber)\n// Prints \"Optional(100)\"\n\n\nlet notSoGoodNumber = Int(\"invalid-input\") ?? Int(\"42\")\nprint(notSoGoodNumber)\n// Prints \"Optional(42)\"\n\n\nIn this example, goodNumber is assigned a value of 100 because Int(\"100\") succeeds in returning a non-nil result. When notSoGoodNumber is initialized, Int(\"invalid-input\") fails and returns nil, and so Int(\"42\") is called to supply a default value.\n\nBecause the result of this nil-coalescing operation is itself an optional value, you can chain default values by using ?? multiple times. The first optional value that isn’t nil stops the chain and becomes the result of the whole expression. The next example tries to find the correct text for a greeting in two separate dictionaries before falling back to a static default.\n\nlet greeting = userPrefs[greetingKey] ??\n    defaults[greetingKey] ?? \"Greetings!\"\n\n\nIf userPrefs[greetingKey] has a value, that value is assigned to greeting. If not, any value in defaults[greetingKey] will succeed, and if not that, greeting will be set to the non-optional default value, \"Greetings!\".\n\nSee Also\nCoalescing Nil Values\nfunc ?? <T>(T?, () throws -> T) rethrows -> T\nPerforms a nil-coalescing operation, returning the wrapped value of an Optional instance or a default value."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.\n\nSee Also\nEncoding and Decoding\nfunc encode(to: Encoder) throws\nEncodes this optional value into the given encoder.\nAvailable when Wrapped conforms to Encodable.\nfunc encode(to: Encoder, configuration: Wrapped.EncodingConfiguration) throws\nAvailable when Wrapped conforms to EncodableWithConfiguration.\ntypealias EncodingConfiguration\nAvailable when Wrapped conforms to EncodableWithConfiguration.\ninit(from: Decoder, configuration: Wrapped.DecodingConfiguration) throws\nAvailable when Wrapped conforms to DecodableWithConfiguration.\ntypealias DecodingConfiguration\nAvailable when Wrapped conforms to DecodableWithConfiguration."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/==(_:_:)-m6x",
    "html": "Parameters\nlhs\n\nAn optional value to compare.\n\nrhs\n\nAnother optional value to compare.\n\nDiscussion\n\nUse this equal-to operator (==) to compare any two optional instances of a type that conforms to the Equatable protocol. The comparison returns true if both arguments are nil or if the two arguments wrap values that are equal. Conversely, the comparison returns false if only one of the arguments is nil or if the two arguments wrap values that are not equal.\n\nlet group1 = [1, 2, 3, 4, 5]\nlet group2 = [1, 3, 5, 7, 9]\nif group1.first == group2.first {\n    print(\"The two groups start the same.\")\n}\n// Prints \"The two groups start the same.\"\n\n\nYou can also use this operator to compare a non-optional value to an optional that wraps the same type. The non-optional value is wrapped as an optional before the comparison is made. In the following example, the numberToMatch constant is wrapped as an optional before comparing to the optional numberFromString:\n\nlet numberToMatch: Int = 23\nlet numberFromString: Int? = Int(\"23\")      // Optional(23)\nif numberToMatch == numberFromString {\n    print(\"It's a match!\")\n}\n// Prints \"It's a match!\"\n\n\nAn instance that is expressed as a literal can also be used with this operator. In the next example, an integer literal is compared with the optional integer numberFromString. The literal 23 is inferred as an Int instance and then wrapped as an optional before the comparison is performed.\n\nif 23 == numberFromString {\n    print(\"It's a match!\")\n}\n// Prints \"It's a match!\"\n\nSee Also\nComparing Optional Values\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nSee Also\nInspecting an Optional\nvar unsafelyUnwrapped: Wrapped\nThe wrapped value of this instance, unwrapped without checking whether the instance is nil.\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "init(from:configuration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/init(from:configuration:)",
    "html": "See Also\nEncoding and Decoding\nfunc encode(to: Encoder) throws\nEncodes this optional value into the given encoder.\nAvailable when Wrapped conforms to Encodable.\nfunc encode(to: Encoder, configuration: Wrapped.EncodingConfiguration) throws\nAvailable when Wrapped conforms to EncodableWithConfiguration.\ntypealias EncodingConfiguration\nAvailable when Wrapped conforms to EncodableWithConfiguration.\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when Wrapped conforms to Decodable.\ntypealias DecodingConfiguration\nAvailable when Wrapped conforms to DecodableWithConfiguration."
  },
  {
    "title": "unsafelyUnwrapped | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/unsafelyunwrapped",
    "html": "Discussion\n\nThe unsafelyUnwrapped property provides the same value as the forced unwrap operator (postfix !). However, in optimized builds (-O), no check is performed to ensure that the current instance actually has a value. Accessing this property in the case of a nil value is a serious programming error and could lead to undefined behavior or a runtime error.\n\nIn debug builds (-Onone), the unsafelyUnwrapped property has the same behavior as using the postfix ! operator and triggers a runtime error if the instance is nil.\n\nThe unsafelyUnwrapped property is recommended over calling the unsafeBitCast(_:) function because the property is more restrictive and because accessing the property still performs checking in debug builds.\n\nWarning\n\nThis property trades safety for performance. Use unsafelyUnwrapped only when you are confident that this instance will never be equal to nil and only after you’ve tried using the postfix ! operator.\n\nSee Also\nInspecting an Optional\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Wrapped conforms to Hashable.\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/!=(_:_:)-1bazb",
    "html": "See Also\nComparing Optional Values\nstatic func == (Wrapped?, Wrapped?) -> Bool\nReturns a Boolean value indicating whether two optional instances are equal.\nAvailable when Wrapped conforms to Equatable."
  },
  {
    "title": "superDecoder(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/superdecoder(forkey:)",
    "html": "Parameters\nkey\n\nThe key to decode super for.\n\nReturn Value\n\nA new Decoder to pass to super.init(from:).\n\nDiscussion\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decodeNil(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodenil(forkey:)",
    "html": "Parameters\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nWhether the encountered value was null.\n\nDiscussion\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/debugdescription",
    "html": "See Also\nInspecting an Optional\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Wrapped conforms to Hashable.\nvar unsafelyUnwrapped: Wrapped\nThe wrapped value of this instance, unwrapped without checking whether the instance is nil.\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/custommirror",
    "html": "Discussion\n\nIf this type has value semantics, the mirror should be unaffected by subsequent mutations of the instance.\n\nSee Also\nInspecting an Optional\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Wrapped conforms to Hashable.\nvar unsafelyUnwrapped: Wrapped\nThe wrapped value of this instance, unwrapped without checking whether the instance is nil.\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-9fnqb",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "magnitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/magnitude-swift.property",
    "html": "Discussion\n\nFor any numeric value x, x.magnitude is the absolute value of x. You can use the magnitude property in operations that are simpler to implement in terms of unsigned values, such as printing the value of an integer, which is just printing a ‘-’ character in front of an absolute value.\n\nlet x = -200\n// x.magnitude == 200\n\n\nThe global abs(_:) function provides more familiar syntax when you need to find an absolute value. In addition, because abs(_:) always returns a value of the same type, even in a generic context, using the function instead of the magnitude property is encouraged."
  },
  {
    "title": "&=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/&=(_:_:)",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise AND operation results in a value that has each bit set to 1 where both of its arguments have that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx &= y                    // 0b00000100\n"
  },
  {
    "title": "init(bitPattern:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/init(bitpattern:)",
    "html": "Parameters\nx\n\nA value to use as the source of the new instance’s binary representation.\n\nDiscussion\n\nThis initializer does not perform any range or overflow checking. The resulting instance may not have the same numeric value as bitPattern—it is only guaranteed to use the same pattern of bits in its binary representation."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/init(exactly:)-72z4",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8/init(exactly:)-1vh5j",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "Encodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this optional value into the given encoder.\nAvailable when Wrapped conforms to Encodable."
  },
  {
    "title": "/=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/int8//=(_:_:)",
    "html": "Parameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nFor integer types, any remainder of the division is discarded.\n\nvar x = 21\nx /= 5\n// x == 4\n"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/==(_:_:)-1lxfn",
    "html": "Parameters\nlhs\n\nA value to compare to nil.\n\nrhs\n\nA nil literal.\n\nDiscussion\n\nYou can use this equal-to operator (==) to test whether an optional instance is nil even when the wrapped value’s type does not conform to the Equatable protocol.\n\nThe following example declares the stream variable as an optional instance of a hypothetical DataStream type. Although DataStream is not an Equatable type, this operator allows checking whether stream is nil.\n\nvar stream: DataStream? = nil\nif stream == nil {\n    print(\"No data stream is configured.\")\n}\n// Prints \"No data stream is configured.\"\n"
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/!=(_:_:)-4m3ae",
    "html": "Parameters\nlhs\n\nA nil literal.\n\nrhs\n\nA value to compare to nil.\n\nDiscussion\n\nYou can use this not-equal-to operator (!=) to test whether an optional instance is not nil even when the wrapped value’s type does not conform to the Equatable protocol.\n\nThe following example declares the stream variable as an optional instance of a hypothetical DataStream type. Although DataStream is not an Equatable type, this operator allows checking whether stream wraps a value and is therefore not nil.\n\nvar stream: DataStream? = fetchDataStream()\nif nil != stream {\n    print(\"The data stream has been configured.\")\n}\n// Prints \"The data stream has been configured.\"\n"
  },
  {
    "title": "~=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/~=(_:_:)",
    "html": "Parameters\nlhs\n\nA nil literal.\n\nrhs\n\nA value to match against nil.\n\nDiscussion\n\nYou can use the pattern-matching operator (~=) to test whether an optional instance is nil even when the wrapped value’s type does not conform to the Equatable protocol. The pattern-matching operator is used internally in case statements for pattern matching.\n\nThe following example declares the stream variable as an optional instance of a hypothetical DataStream type, and then uses a switch statement to determine whether the stream is nil or has a configured value. When evaluating the nil case of the switch statement, this operator is called behind the scenes.\n\nvar stream: DataStream? = nil\nswitch stream {\ncase nil:\n    print(\"No data stream is configured.\")\ncase let x?:\n    print(\"The data stream has \\(x.availableBytes) bytes available.\")\n}\n// Prints \"No data stream is configured.\"\n\n\nNote\n\nTo test whether an instance is nil in an if statement, use the equal-to operator (==) instead of the pattern-matching operator. The pattern-matching operator is primarily intended to enable case statement pattern matching."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/==(_:_:)-3poc3",
    "html": "Parameters\nlhs\n\nA nil literal.\n\nrhs\n\nA value to compare to nil.\n\nDiscussion\n\nYou can use this equal-to operator (==) to test whether an optional instance is nil even when the wrapped value’s type does not conform to the Equatable protocol.\n\nThe following example declares the stream variable as an optional instance of a hypothetical DataStream type. Although DataStream is not an Equatable type, this operator allows checking whether stream is nil.\n\nvar stream: DataStream? = nil\nif nil == stream {\n    print(\"No data stream is configured.\")\n}\n// Prints \"No data stream is configured.\"\n"
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nThe custom mirror for this instance."
  },
  {
    "title": "RelationshipCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/relationshipcollection-implementations",
    "html": "Topics\nType Aliases\ntypealias PersistentElement\nAvailable when Wrapped conforms to Sequence and Wrapped.Element conforms to PersistentModel."
  },
  {
    "title": "EncodableWithConfiguration Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/encodablewithconfiguration-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: Encoder, configuration: Wrapped.EncodingConfiguration) throws\nAvailable when Wrapped conforms to EncodableWithConfiguration.\nType Aliases\ntypealias EncodingConfiguration\nAvailable when Wrapped conforms to EncodableWithConfiguration."
  },
  {
    "title": "Optional.some(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/some(_:)",
    "html": "See Also\nCreating an Optional Value\ninit(Wrapped)\nCreates an instance that stores the given value."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/init(_:)",
    "html": "See Also\nCreating an Optional Value\ncase some(Wrapped)\nThe presence of a value, stored as Wrapped."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-91iaz",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-85fg3",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-7x3cg",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-7ucyl",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-6zxms",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-2yvgn",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/init(_:)",
    "html": "Parameters\ncontainer\n\nThe container to hold."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/contains(_:)",
    "html": "Parameters\nkey\n\nThe key to search for.\n\nReturn Value\n\nWhether the Decoder has an entry for the given key.\n\nDiscussion\n\nThe value associated with the given key may be a null value as appropriate for the data format."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-5fh1x",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-3egly",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-4mzei",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-5io1a",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-687gv",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-8foeb",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-9633o",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-1zmt1",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-2ax45",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-2hn6i",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-23pwi",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd64/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd64/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when Scalar conforms to SIMDScalar."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nThis function throws an error if any values are invalid for the given encoder’s format.\n\nSee Also\nEncoding and Decoding\nfunc encode(to: Encoder, configuration: Wrapped.EncodingConfiguration) throws\nAvailable when Wrapped conforms to EncodableWithConfiguration.\ntypealias EncodingConfiguration\nAvailable when Wrapped conforms to EncodableWithConfiguration.\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when Wrapped conforms to Decodable.\ninit(from: Decoder, configuration: Wrapped.DecodingConfiguration) throws\nAvailable when Wrapped conforms to DecodableWithConfiguration.\ntypealias DecodingConfiguration\nAvailable when Wrapped conforms to DecodableWithConfiguration."
  },
  {
    "title": "superDecoder() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/superdecoder()",
    "html": "Discussion\n\nEquivalent to calling superDecoder(forKey:) with Key(stringValue: \"super\", intValue: 0).\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the default super key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the default super key."
  },
  {
    "title": "nestedContainer(keyedBy:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/nestedcontainer(keyedby:forkey:)",
    "html": "Parameters\ntype\n\nThe key type to use for the container.\n\nkey\n\nThe key that the nested container is associated with.\n\nReturn Value\n\nA keyed decoding container view into self.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered stored value is not a keyed container."
  },
  {
    "title": "KeyedDecodingContainerProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/keyeddecodingcontainerprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc decodeIfPresent(UInt64.Type, forKey: Self.Key) throws -> UInt64?\nfunc decodeIfPresent(UInt32.Type, forKey: Self.Key) throws -> UInt32?\nfunc decodeIfPresent<T>(T.Type, forKey: Self.Key) throws -> T?\nfunc decodeIfPresent(Float.Type, forKey: Self.Key) throws -> Float?\nfunc decodeIfPresent(Int.Type, forKey: Self.Key) throws -> Int?\nfunc decodeIfPresent(Int8.Type, forKey: Self.Key) throws -> Int8?\nfunc decodeIfPresent(UInt8.Type, forKey: Self.Key) throws -> UInt8?\nfunc decodeIfPresent(Int32.Type, forKey: Self.Key) throws -> Int32?\nfunc decodeIfPresent(Int64.Type, forKey: Self.Key) throws -> Int64?\nfunc decodeIfPresent(UInt.Type, forKey: Self.Key) throws -> UInt?\nfunc decodeIfPresent(UInt16.Type, forKey: Self.Key) throws -> UInt16?\nfunc decodeIfPresent(Double.Type, forKey: Self.Key) throws -> Double?\nfunc decodeIfPresent(Int16.Type, forKey: Self.Key) throws -> Int16?\nfunc decodeIfPresent(Bool.Type, forKey: Self.Key) throws -> Bool?\nfunc decodeIfPresent(String.Type, forKey: Self.Key) throws -> String?"
  },
  {
    "title": "nestedUnkeyedContainer(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/nestedunkeyedcontainer(forkey:)",
    "html": "Parameters\nkey\n\nThe key that the nested container is associated with.\n\nReturn Value\n\nAn unkeyed decoding container view into self.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered stored value is not an unkeyed container."
  },
  {
    "title": "Optional.DecodingConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/optional/decodingconfiguration",
    "html": "See Also\nEncoding and Decoding\nfunc encode(to: Encoder) throws\nEncodes this optional value into the given encoder.\nAvailable when Wrapped conforms to Encodable.\nfunc encode(to: Encoder, configuration: Wrapped.EncodingConfiguration) throws\nAvailable when Wrapped conforms to EncodableWithConfiguration.\ntypealias EncodingConfiguration\nAvailable when Wrapped conforms to EncodableWithConfiguration.\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when Wrapped conforms to Decodable.\ninit(from: Decoder, configuration: Wrapped.DecodingConfiguration) throws\nAvailable when Wrapped conforms to DecodableWithConfiguration."
  },
  {
    "title": "withCString(encodedAs:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/withcstring(encodedas:_:)",
    "html": "Required\n\nParameters\nbody\n\nA closure with a pointer parameter that points to a null-terminated sequence of code units. If body has a return value, that value is also used as the return value for the withCString(encodedAs:_:) method. The pointer argument is valid only for the duration of the method’s execution.\n\ntargetEncoding\n\nThe encoding in which the code units should be interpreted.\n\nReturn Value\n\nThe return value, if any, of the body closure parameter.\n\nDiscussion\n\nThe pointer passed as an argument to body is valid only during the execution of withCString(encodedAs:_:). Do not store or return the pointer for later use."
  },
  {
    "title": "withCString(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/withcstring(_:)",
    "html": "Required\n\nParameters\nbody\n\nA closure with a pointer parameter that points to a null-terminated sequence of UTF-8 code units. If body has a return value, that value is also used as the return value for the withCString(_:) method. The pointer argument is valid only for the duration of the method’s execution.\n\nReturn Value\n\nThe return value, if any, of the body closure parameter.\n\nDiscussion\n\nThe pointer passed as an argument to body is valid only during the execution of withCString(_:). Do not store or return the pointer for later use."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd64/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "decodeIfPresent(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decodeifpresent(_:forkey:)-3thus",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA decoded value of the requested type, or nil if the Decoder does not have an entry associated with the given key, or if the value is a null value.\n\nDiscussion\n\nThis method returns nil if the container does not have a value associated with key, or if the value is null. The difference between these states can be distinguished with a contains(_:) call.\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-1n3v",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-1d33g",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-21ybk",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "allKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/allkeys",
    "html": "Discussion\n\nDifferent keyed containers from the same decoder may return different keys here, because it is possible to encode with multiple key types which are not convertible to one another. This should report all keys present which are convertible to the requested type."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-1u4zx",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-721nc",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "decode(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/keyeddecodingcontainer/decode(_:forkey:)-9fa2u",
    "html": "Parameters\ntype\n\nThe type of value to decode.\n\nkey\n\nThe key that the decoded value is associated with.\n\nReturn Value\n\nA value of the requested type, if present for the given key and convertible to the requested type.\n\nDiscussion\n\nThrows\n\nDecodingError.typeMismatch if the encountered encoded value is not convertible to the requested type.\n\nThrows\n\nDecodingError.keyNotFound if self does not have an entry for the given key.\n\nThrows\n\nDecodingError.valueNotFound if self has a null entry for the given key."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/equatable-implementations",
    "html": "Topics\nOperators\nstatic func == <RHS>(Self, RHS) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "init(truncatingIfNeeded:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd64/init(truncatingifneeded:)",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "init(clamping:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd64/init(clamping:)",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "init(_:rounding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd64/init(_:rounding:)",
    "html": "Parameters\nother\n\nThe vector to convert.\n\nrule\n\nThe round rule to use when converting elements of other. The default is .towardZero."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd64/init(_:)-1ogvd",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd64/init(_:)-1i716",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "uppercased() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/uppercased()",
    "html": "Required"
  },
  {
    "title": "localizedStandardRange(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/localizedstandardrange(of:)",
    "html": "Discussion\n\nThis is the most appropriate method for doing user-level string searches, similar to how searches are done generally in the system. The search is locale-aware, case and diacritic insensitive. The exact list of search options applied may change over time."
  },
  {
    "title": "localizedStandardContains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/localizedstandardcontains(_:)",
    "html": "Discussion\n\nThis is the most appropriate method for doing user-level string searches, similar to how searches are done generally in the system. The search is locale-aware, case and diacritic insensitive. The exact list of search options applied may change over time."
  },
  {
    "title": "lowercased() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/lowercased()",
    "html": "Required"
  },
  {
    "title": "init(decoding:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/init(decoding:as:)",
    "html": "Required\n\nParameters\ncodeUnits\n\nA collection of code units encoded in the encoding specified in sourceEncoding.\n\nsourceEncoding\n\nThe encoding in which codeUnits should be interpreted."
  },
  {
    "title": "localizedCaseInsensitiveContains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/localizedcaseinsensitivecontains(_:)",
    "html": "Discussion\n\nLocale-independent case-insensitive operation, and other needs, can be achieved by calling range(of:options:range:locale:).\n\nEquivalent to:\n\nrange(of: other, options: .caseInsensitiveSearch,\n      locale: Locale.current) != nil\n"
  },
  {
    "title": "hasPrefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/hasprefix(_:)-ehts",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nStringProtocol Implementations\nfunc hasPrefix<Prefix>(Prefix) -> Bool\nReturns a Boolean value indicating whether the string begins with the specified prefix."
  },
  {
    "title": "hasSuffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/hassuffix(_:)-65mvs",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nStringProtocol Implementations\nfunc hasSuffix<Suffix>(Suffix) -> Bool\nReturns a Boolean value indicating whether the string ends with the specified suffix."
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/contains(_:)-40kbf",
    "html": "Discussion\n\nEquivalent to self.range(of: other) != nil"
  },
  {
    "title": "components(separatedBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/components(separatedby:)-8gl9t",
    "html": "Parameters\nseparator\n\nThe separator string.\n\nReturn Value\n\nAn array containing substrings that have been divided from the string using separator.\n\nDiscussion\n\nThe substrings in the resulting array appear in the same order as the original string. Adjacent occurrences of the separator string produce empty strings in the result. Similarly, if the string begins or ends with the separator, the first or last substring, respectively, is empty. The following example shows this behavior:\n\nlet list1 = \"Karin, Carrie, David\"\nlet items1 = list1.components(separatedBy: \", \")\n// [\"Karin\", \"Carrie\", \"David\"]\n\n\n// Beginning with the separator:\nlet list2 = \", Norman, Stanley, Fletcher\"\nlet items2 = list2.components(separatedBy: \", \")\n// [\"\", \"Norman\", \"Stanley\", \"Fletcher\"\n\n\nIf the list has no separators, the array contains only the original string itself.\n\nlet name = \"Karin\"\nlet list = name.components(separatedBy: \", \")\n// [\"Karin\"]\n"
  },
  {
    "title": "completePath(into:caseSensitive:matchesInto:filterTypes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/completepath(into:casesensitive:matchesinto:filtertypes:)",
    "html": "Return Value\n\nThe actual number of matching paths."
  },
  {
    "title": "canBeConverted(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/canbeconverted(to:)",
    "html": "Parameters\nencoding\n\nA string encoding.\n\nReturn Value\n\ntrue if the string can be encoded in encoding without loss of information; otherwise, false."
  },
  {
    "title": "UnicodeScalarView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/unicodescalarview",
    "html": "Required"
  },
  {
    "title": "SubSequence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/subsequence",
    "html": "Required"
  },
  {
    "title": "UTF16View | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/utf16view",
    "html": "Required"
  },
  {
    "title": "init(cString:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/init(cstring:)",
    "html": "Required\n\nParameters\nnullTerminatedUTF8\n\nA pointer to a sequence of contiguous, UTF-8 encoded bytes ending just before the first zero byte."
  },
  {
    "title": "init(decodingCString:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/init(decodingcstring:as:)",
    "html": "Required\n\nParameters\nnullTerminatedCodeUnits\n\nA pointer to a sequence of contiguous code units in the encoding specified in sourceEncoding, ending just before the first zero code unit.\n\nsourceEncoding\n\nThe encoding in which the code units should be interpreted."
  },
  {
    "title": "enumerateSubstrings(in:options:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/enumeratesubstrings(in:options:_:)",
    "html": "Parameters\nrange\n\nThe range within the string to enumerate substrings.\n\nopts\n\nOptions specifying types of substrings and enumeration styles. If opts is omitted or empty, body is called a single time with the range of the string specified by range.\n\nbody\n\nThe closure executed for each substring in the enumeration. The closure takes four arguments:\n\nThe enumerated substring. If substringNotRequired is included in opts, this parameter is nil for every execution of the closure.\n\nThe range of the enumerated substring in the string that enumerate(in:options:_:) was called on.\n\nThe range that includes the substring as well as any separator or filler characters that follow. For instance, for lines, enclosingRange contains the line terminators. The enclosing range for the first string enumerated also contains any characters that occur before the string. Consecutive enclosing ranges are guaranteed not to overlap, and every single character in the enumerated range is included in one and only one enclosing range.\n\nAn inout Boolean value that the closure can use to stop the enumeration by setting stop = true.\n\nDiscussion\n\nMutation of a string value while enumerating its substrings is not supported. If you need to mutate a string from within body, convert your string to an NSMutableString instance and then call the enumerateSubstrings(in:options:using:) method."
  },
  {
    "title": "getBytes(_:maxLength:usedLength:encoding:options:range:remaining:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/getbytes(_:maxlength:usedlength:encoding:options:range:remaining:)",
    "html": "Parameters\nbuffer\n\nA buffer into which to store the bytes from the receiver. The returned bytes are not NUL-terminated.\n\nmaxBufferCount\n\nThe maximum number of bytes to write to buffer.\n\nusedBufferCount\n\nThe number of bytes used from buffer. Pass nil if you do not need this value.\n\nencoding\n\nThe encoding to use for the returned bytes.\n\noptions\n\nA mask to specify options to use for converting the receiver’s contents to encoding (if conversion is necessary).\n\nrange\n\nThe range of characters in the receiver to get.\n\nleftover\n\nThe remaining range. Pass nil If you do not need this value.\n\nReturn Value\n\ntrue if some characters were converted, false otherwise.\n\nDiscussion\n\nNote\n\nConversion stops when the buffer fills or when the conversion isn’t possible due to the chosen encoding.\n\nNote\n\nwill get a maximum of min(buffer.count, maxLength) bytes."
  },
  {
    "title": "getCString(_:maxLength:encoding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/getcstring(_:maxlength:encoding:)",
    "html": "Discussion\n\nNote\n\nwill store a maximum of min(buffer.count, maxLength) bytes."
  },
  {
    "title": "capitalized | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/capitalized",
    "html": "Discussion\n\nThis property performs the canonical (non-localized) mapping. It is suitable for programming operations that require stable results not depending on the current locale.\n\nA capitalized string is a string with the first character in each word changed to its corresponding uppercase value, and all remaining characters set to their corresponding lowercase values. A “word” is any sequence of characters delimited by spaces, tabs, or line terminators. Some common word delimiting punctuation isn’t considered, so this property may not generally produce the desired results for multiword strings. See the getLineStart(_:end:contentsEnd:for:) method for additional information.\n\nCase transformations aren’t guaranteed to be symmetrical or to produce strings of the same lengths as the originals."
  },
  {
    "title": "utf16 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/utf16",
    "html": "Required"
  },
  {
    "title": "unicodeScalars | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/unicodescalars",
    "html": "Required"
  },
  {
    "title": "utf8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/stringprotocol/utf8",
    "html": "Required"
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/encoding/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/encoding/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (String.Encoding, String.Encoding) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "CustomStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/encoding/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "runSynchronously(on:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unownedjob/runsynchronously(on:)",
    "html": "Parameters\nexecutor\n\nthe executor this job will be semantically running on.\n\nDiscussion\n\nThis operation runs the job on the calling thread and blocks until the job completes. The intended use of this method is for an executor to determine when and where it wants to run the job and then call this method on it.\n\nThe passed in executor reference is used to establish the executor context for the job, and should be the same executor as the one semantically calling the runSynchronously method."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd8/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when Scalar conforms to SIMDScalar."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd8/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd8/init(_:)-20rv4",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd8/init(_:)-8ko8m",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "init(clamping:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd8/init(clamping:)",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "SIMD Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd8/simd-implementations",
    "html": "Topics\nOperators\nstatic func & (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func & (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func & (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &* (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &* (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &* (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &*= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &*= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+ (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+ (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+ (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &+= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &- (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &- (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &- (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &-= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &-= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<< (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>> (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<< (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<< (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>> (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>> (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>>= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &>>= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<<= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func &<<= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func * (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func * (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func * (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func * (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func * (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func * (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func *= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func *= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func *= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func *= (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func + (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func + (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func + (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func + (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func + (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func + (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func += (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func += (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func += (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func += (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func - (Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func - (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func - (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func - (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func -= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func -= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func -= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nDeprecated\nstatic func -= (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func .!= (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise inequality comparison.\nstatic func .!= (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise inequality comparison.\nstatic func .!= (Self, Self) -> SIMDMask<Self.MaskStorage>\nA vector mask with the result of a pointwise inequality comparison.\nstatic func .== (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise equality comparison.\nstatic func .== (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise equality comparison.\nstatic func .== (Self, Self) -> SIMDMask<Self.MaskStorage>\nA vector mask with the result of a pointwise equality comparison.\nstatic func .< (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .> (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .< (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .< (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .> (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .> (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .>= (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .<= (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .<= (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .>= (Self, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .<= (Self.Scalar, Self) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise less than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func .>= (Self, Self.Scalar) -> SIMDMask<Self.MaskStorage>\nReturns a vector mask with the result of a pointwise greater than or equal comparison.\nAvailable when Scalar conforms to Comparable.\nstatic func / (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func / (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func / (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func / (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func / (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func / (Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nstatic func /= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func /= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func /= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func /= (inout Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two vectors are equal.\nstatic func | (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func % (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func | (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^ (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^ (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^ (Self, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func | (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func % (Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func % (Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func |= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func |= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func %= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^= (inout Self, Self)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func %= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ^= (inout Self, Self.Scalar)\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func ~ (Self) -> Self\nAvailable when Scalar conforms to FixedWidthInteger.\nInitializers\ninit<S>(S)\nCreates a vector from the given sequence.\ninit(arrayLiteral: Self.Scalar...)\nCreates a vector from the specified elements.\ninit(from: Decoder) throws\nCreates a new vector by decoding scalars from the given decoder.\ninit(repeating: Self.Scalar)\nA vector with the specified value in all lanes.\nInstance Properties\nvar description: String\nA textual description of the vector.\nvar indices: Range<Int>\nThe valid indices for subscripting the vector.\nvar leadingZeroBitCount: Self\nAvailable when Scalar conforms to FixedWidthInteger.\nvar nonzeroBitCount: Self\nAvailable when Scalar conforms to FixedWidthInteger.\nvar trailingZeroBitCount: Self\nAvailable when Scalar conforms to FixedWidthInteger.\nInstance Methods\nfunc addProduct(Self, Self)\nAvailable when Scalar conforms to FloatingPoint.\nfunc addProduct(Self.Scalar, Self)\nAvailable when Scalar conforms to FloatingPoint.\nfunc addProduct(Self, Self.Scalar)\nAvailable when Scalar conforms to FloatingPoint.\nfunc addingProduct(Self, Self.Scalar) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc addingProduct(Self.Scalar, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc addingProduct(Self, Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc clamp(lowerBound: Self, upperBound: Self)\nAvailable when Scalar conforms to Comparable.\nfunc clamp(lowerBound: Self, upperBound: Self)\nAvailable when Scalar conforms to FloatingPoint.\nfunc clamped(lowerBound: Self, upperBound: Self) -> Self\nAvailable when Scalar conforms to Comparable.\nfunc clamped(lowerBound: Self, upperBound: Self) -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc encode(to: Encoder) throws\nEncodes the scalars of this vector into the given encoder in an unkeyed container.\nfunc formSquareRoot()\nAvailable when Scalar conforms to FloatingPoint.\nfunc hash(into: inout Hasher)\nHashes the elements of the vector using the given hasher.\nfunc max() -> Self.Scalar\nThe greatest element in the vector.\nAvailable when Scalar conforms to Comparable.\nfunc max() -> Self.Scalar\nThe greatest scalar in the vector.\nAvailable when Scalar conforms to FloatingPoint.\nfunc min() -> Self.Scalar\nThe least scalar in the vector.\nAvailable when Scalar conforms to FloatingPoint.\nfunc min() -> Self.Scalar\nThe least element in the vector.\nAvailable when Scalar conforms to Comparable.\nfunc replace(with: Self, where: SIMDMask<Self.MaskStorage>)\nReplaces elements of this vector with elements of other in the lanes where mask is true.\nfunc replace(with: Self.Scalar, where: SIMDMask<Self.MaskStorage>)\nReplaces elements of this vector with other in the lanes where mask is true.\nfunc replacing(with: Self, where: SIMDMask<Self.MaskStorage>) -> Self\nReturns a copy of this vector, with elements replaced by elements of other in the lanes where mask is true.\nfunc replacing(with: Self.Scalar, where: SIMDMask<Self.MaskStorage>) -> Self\nReturns a copy of this vector, with elements other in the lanes where mask is true.\nfunc round(FloatingPointRoundingRule)\nAvailable when Scalar conforms to FloatingPoint.\nfunc rounded(FloatingPointRoundingRule) -> Self\nA vector formed by rounding each lane of the source vector to an integral value according to the specified rounding rule.\nAvailable when Scalar conforms to FloatingPoint.\nfunc squareRoot() -> Self\nAvailable when Scalar conforms to FloatingPoint.\nfunc sum() -> Self.Scalar\nThe sum of the scalars in the vector.\nAvailable when Scalar conforms to FloatingPoint.\nfunc wrappedSum() -> Self.Scalar\nReturns the sum of the scalars in the vector, computed with wrapping addition.\nAvailable when Scalar conforms to FixedWidthInteger.\nType Properties\nstatic var one: Self\nA vector with one in all lanes.\nAvailable when Scalar conforms to FloatingPoint.\nstatic var one: Self\nA vector with one in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic var zero: Self\nA vector with zero in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic var zero: Self\nA vector with zero in all lanes.\nAvailable when Scalar conforms to FloatingPoint.\nType Methods\nstatic func random(in: ClosedRange<Self.Scalar>) -> Self\nReturns a vector with random values from within the specified range in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func random(in: Range<Self.Scalar>) -> Self\nReturns a vector with random values from within the specified range in all lanes.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func random<T>(in: ClosedRange<Self.Scalar>, using: inout T) -> Self\nReturns a vector with random values from within the specified range in all lanes, using the given generator as a source for randomness.\nAvailable when Scalar conforms to FixedWidthInteger.\nstatic func random<T>(in: Range<Self.Scalar>, using: inout T) -> Self\nReturns a vector with random values from within the specified range in all lanes, using the given generator as a source for randomness.\nAvailable when Scalar conforms to FixedWidthInteger."
  },
  {
    "title": "String.Encoding.RawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/encoding/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/encoding/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/encoding/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw value to use for the new instance.\n\nDiscussion\n\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns nil. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nprint(PaperSize(rawValue: \"Legal\"))\n// Prints \"Optional(\"PaperSize.Legal\")\"\n\n\nprint(PaperSize(rawValue: \"Tabloid\"))\n// Prints \"nil\"\n"
  },
  {
    "title": "init(truncatingIfNeeded:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd8/init(truncatingifneeded:)",
    "html": "Parameters\nother\n\nThe vector to convert."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd8/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(_:rounding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/simd8/init(_:rounding:)",
    "html": "Parameters\nother\n\nThe vector to convert.\n\nrule\n\nThe round rule to use when converting elements of other. The default is .towardZero."
  },
  {
    "title": "CustomStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unownedjob/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "CustomStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf8view/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "*=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/*=(_:_:)",
    "html": "Parameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply.\n\nDiscussion\n\nThe product of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 * 21 is greater than the maximum representable Int8 value:\n\nvar x: Int8 = 21\nx * 21\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "min | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsignedinteger/min",
    "html": "Discussion\n\nFor unsigned integer types, this value is always 0."
  },
  {
    "title": "ExpressibleByIntegerLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/expressiblebyintegerliteral-implementations",
    "html": "Topics\nInitializers\ninit(integerLiteral: Self)\nCreates an instance initialized to the specified integer value.\nAvailable when Self conforms to _ExpressibleByBuiltinIntegerLiteral."
  },
  {
    "title": "Collection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf8view/collection-implementations",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of elements in the collection.\nvar endIndex: String.UTF8View.Index\nThe “past the end” position—that is, the position one greater than the last valid subscript argument.\nvar first: Self.Element?\nThe first element of the collection.\nvar indices: DefaultIndices<Self>\nThe indices that are valid for subscripting the collection, in ascending order.\nAvailable when Indices is DefaultIndices<Self>.\nvar isEmpty: Bool\nA Boolean value indicating whether the collection is empty.\nvar startIndex: String.UTF8View.Index\nThe position of the first code unit if the UTF-8 view is nonempty.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the collection.\nInstance Methods\nfunc distance(from: String.UTF8View.Index, to: String.UTF8View.Index) -> Int\nReturns the distance between two indices.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence by skipping elements while predicate returns true and returning the remaining elements.\nfunc dropFirst(Int) -> Self.SubSequence\nReturns a subsequence containing all but the given number of initial elements.\nfunc firstIndex(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the first index in which an element of the collection satisfies the given predicate.\nfunc formIndex(inout Self.Index, offsetBy: Int)\nOffsets the given index by the specified distance.\nfunc formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool\nOffsets the given index by the specified distance, or so that it equals the given limiting index.\nfunc formIndex(after: inout Self.Index)\nReplaces the given index with its successor.\nfunc index(String.UTF8View.Index, offsetBy: Int) -> String.UTF8View.Index\nReturns an index that is the specified distance from the given index.\nfunc index(String.UTF8View.Index, offsetBy: Int, limitedBy: String.UTF8View.Index) -> String.UTF8View.Index?\nReturns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.\nfunc index(after: String.UTF8View.Index) -> String.UTF8View.Index\nReturns the next consecutive position after i.\nfunc index(of: Self.Element) -> Self.Index?\nReturns the first index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc makeIterator() -> IndexingIterator<Self>\nReturns an iterator over the elements of the collection.\nAvailable when Iterator is IndexingIterator<Self>.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc prefix(Int) -> Self.SubSequence\nReturns a subsequence, up to the specified maximum length, containing the initial elements of the collection.\nfunc prefix(through: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection through the specified position.\nfunc prefix(upTo: Self.Index) -> Self.SubSequence\nReturns a subsequence from the start of the collection up to, but not including, the specified position.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence\nReturns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.\nfunc randomElement() -> Self.Element?\nReturns a random element of the collection.\nfunc randomElement<T>(using: inout T) -> Self.Element?\nReturns a random element of the collection, using the given generator as a source for randomness.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.\nfunc split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]\nReturns the longest possible subsequences of the collection, in order, around elements equal to the given element.\nAvailable when Element conforms to Equatable.\nfunc suffix(from: Self.Index) -> Self.SubSequence\nReturns a subsequence from the specified position to the end of the collection.\nSubscripts\nsubscript((UnboundedRange_) -> ()) -> Self.SubSequence\nsubscript<R>(R) -> Self.SubSequence\nAccesses the contiguous subrange of the collection’s elements specified by a range expression.\nsubscript(Range<String.UTF8View.Index>) -> String.UTF8View.SubSequence\nAccesses a contiguous subrange of the collection’s elements.\nsubscript(String.UTF8View.Index) -> UTF8.CodeUnit\nAccesses the code unit at the given position.\nType Aliases\ntypealias Index\nA type that represents a position in the collection.\ntypealias Indices\nA type that represents the indices that are valid for subscripting the collection, in ascending order.\ntypealias Iterator\nA type that provides the collection’s iteration interface and encapsulates its iteration state.\ntypealias SubSequence\nA collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf8view/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(Self.Element) -> Bool\nReturns a Boolean value indicating whether the sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc elementsEqual<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.\nAvailable when Element conforms to Equatable.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.\nAvailable when Element conforms to Comparable.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max() -> Self.Element?\nReturns the maximum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min() -> Self.Element?\nReturns the minimum element in the sequence.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted() -> [Self.Element]\nReturns the elements of the sequence, sorted.\nAvailable when Element conforms to Comparable.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc starts<PossiblePrefix>(with: PossiblePrefix) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.\nAvailable when Element conforms to Equatable.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<String.UTF8View.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements."
  },
  {
    "title": "multipliedReportingOverflow(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/multipliedreportingoverflow(by:)",
    "html": "Parameters\nrhs\n\nThe value to multiply by this value.\n\nReturn Value\n\nA tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire product. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs."
  },
  {
    "title": "%=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/_=(_:_:)-6w0fj",
    "html": "Parameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nThe result has the same sign as lhs and has a magnitude less than rhs.magnitude.\n\nvar x = 22\nx %= 5\n// x == 2\n\n\nvar y = 22\ny %= -5\n// y == 2\n\n\nvar z = -22\nz %= -5\n// z == -2\n"
  },
  {
    "title": "BidirectionalCollection Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf8view/bidirectionalcollection-implementations",
    "html": "Topics\nInstance Properties\nvar last: Self.Element?\nThe last element of the collection.\nInstance Methods\nfunc difference<C>(from: C) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection.\nAvailable when Element conforms to Equatable.\nfunc difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>\nReturns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.\nfunc dropLast(Int) -> Self.SubSequence\nReturns a subsequence containing all but the specified number of final elements.\nfunc formIndex(before: inout Self.Index)\nReplaces the given index with its predecessor.\nfunc index(before: String.UTF8View.Index) -> String.UTF8View.Index\nReturns the position immediately before the given index.\nfunc last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the last element of the sequence that satisfies the given predicate.\nfunc lastIndex(of: Self.Element) -> Self.Index?\nReturns the last index where the specified value appears in the collection.\nAvailable when Element conforms to Equatable.\nfunc lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?\nReturns the index of the last element in the collection that matches the given predicate.\nfunc reversed() -> ReversedCollection<Self>\nReturns a view presenting the elements of the collection in reverse order.\nfunc suffix(Int) -> Self.SubSequence\nReturns a subsequence, up to the given maximum length, containing the final elements of the collection."
  },
  {
    "title": "customPlaygroundQuickLook | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/customplaygroundquicklook",
    "html": "Deprecated\n\nCharacter.customPlaygroundQuickLook will be removed in a future Swift version\n\nSee Also\nDescribing a Character\nvar description: String\nA textual representation of this instance.\nvar debugDescription: String\nA textual representation of the character, suitable for debugging.\nvar customMirror: Mirror\nA mirror that reflects the Character instance.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "...(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/'...(_:_:)",
    "html": "Parameters\nminimum\n\nThe lower bound for the range.\n\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol. This example creates a ClosedRange<Character> from “a” up to, and including, “z”.\n\nlet lowercase = \"a\"...\"z\"\nprint(lowercase.contains(\"z\"))\n// Prints \"true\"\n\n\nPrecondition\n\nminimum <= maximum.\n\nSee Also\nCreating a Range Expression\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf8view/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "init(_:children:displayStyle:ancestorRepresentation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mirror/init(_:children:displaystyle:ancestorrepresentation:)-4af97",
    "html": "Parameters\nsubject\n\nThe instance to represent in the new mirror.\n\nchildren\n\nThe structure to use for the mirror. The collection traversal modeled by children is captured so that the resulting mirror’s children may be upgraded to a bidirectional or random access collection later. See the children property for details.\n\ndisplayStyle\n\nThe preferred display style for the mirror when presented in the debugger or in a playground. The default is nil.\n\nancestorRepresentation\n\nThe means of generating the subject’s ancestor representation. ancestorRepresentation is ignored if subject is not a class instance. The default is .generated.\n\nDiscussion\n\nYou use this initializer from within your type’s customMirror implementation to create a customized mirror.\n\nIf subject is a class instance, ancestorRepresentation determines whether ancestor classes will be represented and whether their customMirror implementations will be used. By default, the customMirror implementation of any ancestors is ignored. To prevent bypassing customized ancestors, pass .customized({ super.customMirror }) as the ancestorRepresentation parameter when implementing your type’s customMirror property."
  },
  {
    "title": "InstantProtocol Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/continuousclock/instant/instantprotocol-implementations",
    "html": "Topics\nInstance Methods\nfunc advanced(by: Duration) -> ContinuousClock.Instant\nfunc duration(to: ContinuousClock.Instant) -> Duration\nType Aliases\ntypealias Duration"
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/continuousclock/instant/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/continuousclock/instant/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (ContinuousClock.Instant, ContinuousClock.Instant) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "descendant(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mirror/descendant(_:_:)",
    "html": "Parameters\nfirst\n\nThe first mirror path component to access.\n\nrest\n\nAny remaining mirror path components.\n\nReturn Value\n\nThe descendant of this mirror specified by the given mirror path components if such a descendant exists; otherwise, nil.\n\nDiscussion\n\nPass a variadic list of string and integer arguments. Each string argument selects the first child with a matching label. Each integer argument selects the child at that offset. For example, passing 1, \"two\", 3 as arguments to myMirror.descendant(_:_:) is equivalent to:\n\nvar result: Any? = nil\nlet children = myMirror.children\nif let i0 = children.index(\n    children.startIndex, offsetBy: 1, limitedBy: children.endIndex),\n    i0 != children.endIndex\n{\n    let grandChildren = Mirror(reflecting: children[i0].value).children\n    if let i1 = grandChildren.firstIndex(where: { $0.label == \"two\" }) {\n        let greatGrandChildren =\n            Mirror(reflecting: grandChildren[i1].value).children\n        if let i2 = greatGrandChildren.index(\n            greatGrandChildren.startIndex,\n            offsetBy: 3,\n            limitedBy: greatGrandChildren.endIndex),\n            i2 != greatGrandChildren.endIndex\n        {\n            // Success!\n            result = greatGrandChildren[i2].value\n        }\n    }\n}\n\n\nThis function is suitable for exploring the structure of a mirror in a REPL or playground, but is not intended to be efficient. The efficiency of finding each element in the argument list depends on the argument type and the capabilities of the each level of the mirror’s children collections. Each string argument requires a linear search, and unless the underlying collection supports random-access traversal, each integer argument also requires a linear operation.\n\nSee Also\nQuerying Descendants\nprotocol MirrorPath\nA protocol for legitimate arguments to Mirror’s descendant method."
  },
  {
    "title": "MirrorPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mirrorpath",
    "html": "Overview\n\nDo not declare new conformances to this protocol; they will not work as expected.\n\nRelationships\nConforming Types\nInt\nString\nSee Also\nQuerying Descendants\nfunc descendant(MirrorPath, MirrorPath...) -> Any?\nReturns a specific descendant of the reflected subject, or nil if no such descendant exists."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/decodable/init(from:)-8cbq4",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/continuousclock/instant/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/continuousclock/instant/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func < (ContinuousClock.Instant, ContinuousClock.Instant) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "_CustomPlaygroundQuickLookable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/_customplaygroundquicklookable-implementations",
    "html": "Topics\nInstance Properties\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for the UInt32 instance.\nDeprecated"
  },
  {
    "title": "init(_:children:displayStyle:ancestorRepresentation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mirror/init(_:children:displaystyle:ancestorrepresentation:)-34d91",
    "html": "Parameters\nsubject\n\nThe instance to represent in the new mirror.\n\nchildren\n\nA dictionary literal to use as the structure for the mirror. The children collection of the resulting mirror may be upgraded to a random access collection later. See the children property for details.\n\ndisplayStyle\n\nThe preferred display style for the mirror when presented in the debugger or in a playground. The default is nil.\n\nancestorRepresentation\n\nThe means of generating the subject’s ancestor representation. ancestorRepresentation is ignored if subject is not a class instance. The default is .generated.\n\nDiscussion\n\nYou use this initializer from within your type’s customMirror implementation to create a customized mirror. Pass a dictionary literal with string keys as children. Although an actual dictionary is arbitrarily-ordered, when you create a mirror with a dictionary literal, the ordering of the mirror’s children will exactly match that of the literal you pass.\n\nIf subject is a class instance, ancestorRepresentation determines whether ancestor classes will be represented and whether their customMirror implementations will be used. By default, the customMirror implementation of any ancestors is ignored. To prevent bypassing customized ancestors, pass .customized({ super.customMirror }) as the ancestorRepresentation parameter when implementing your type’s customMirror property."
  },
  {
    "title": "init(_:unlabeledChildren:displayStyle:ancestorRepresentation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mirror/init(_:unlabeledchildren:displaystyle:ancestorrepresentation:)",
    "html": "Parameters\nsubject\n\nThe instance to represent in the new mirror.\n\nunlabeledChildren\n\nThe children to use for the mirror. The collection traversal modeled by unlabeledChildren is captured so that the resulting mirror’s children may be upgraded to a bidirectional or random access collection later. See the children property for details.\n\ndisplayStyle\n\nThe preferred display style for the mirror when presented in the debugger or in a playground. The default is nil.\n\nancestorRepresentation\n\nThe means of generating the subject’s ancestor representation. ancestorRepresentation is ignored if subject is not a class instance. The default is .generated.\n\nDiscussion\n\nYou use this initializer from within your type’s customMirror implementation to create a customized mirror, particularly for custom types that are collections. The labels of the resulting mirror’s children collection are all nil.\n\nIf subject is a class instance, ancestorRepresentation determines whether ancestor classes will be represented and whether their customMirror implementations will be used. By default, the customMirror implementation of any ancestors is ignored. To prevent bypassing customized ancestors, pass .customized({ super.customMirror }) as the ancestorRepresentation parameter when implementing your type’s customMirror property."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/init(_:)-1on5r",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "init(reflecting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/mirror/init(reflecting:)",
    "html": "Parameters\nsubject\n\nThe instance for which to create a mirror.\n\nDiscussion\n\nIf the dynamic type of subject conforms to CustomReflectable, the resulting mirror is determined by its customMirror property. Otherwise, the result is generated by the language.\n\nIf the dynamic type of subject has value semantics, subsequent mutations of subject will not observable in Mirror. In general, though, the observability of mutations is unspecified."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/init(_:)-42ptx",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "magnitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsignedinteger/magnitude",
    "html": "Discussion\n\nEvery unsigned integer is its own magnitude, so for any value x, x == x.magnitude.\n\nThe global abs(_:) function provides more familiar syntax when you need to find an absolute value. In addition, because abs(_:) always returns a value of the same type, even in a generic context, using the function instead of the magnitude property is encouraged."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/init(_:)-2w61y",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nComparing Characters\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/init(exactly:)-8qhoe",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "Comparable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/comparable-implementations",
    "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func < (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func > (UInt32, UInt32) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func <= (UInt32, UInt32) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (UInt32, UInt32) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
  },
  {
    "title": "FixedWidthInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/fixedwidthinteger-implementations",
    "html": "Topics\nOperators\nstatic func &* (Self, Self) -> Self\nReturns the product of the two given values, wrapping the result in case of any overflow.\nstatic func &*= (inout Self, Self)\nMultiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.\nstatic func &+ (Self, Self) -> Self\nReturns the sum of the two given values, wrapping the result in case of any overflow.\nstatic func &+= (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable, wrapping any overflow.\nstatic func &- (Self, Self) -> Self\nReturns the difference of the two given values, wrapping the result in case of any overflow.\nstatic func &-= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.\nstatic func &<< <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &>> <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &<< (Self, Self) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &<< (UInt32, UInt32) -> UInt32\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width.\nstatic func &>> (UInt32, UInt32) -> UInt32\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &>> (Self, Self) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width.\nstatic func &>>= <Other>(inout Self, Other)\nCalculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.\nstatic func &<<= <Other>(inout Self, Other)\nReturns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable.\nstatic func >> <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the right.\nstatic func << <Other>(Self, Other) -> Self\nReturns the result of shifting a value’s binary representation the specified number of digits to the left.\nstatic func ~ (Self) -> Self\nReturns the inverse of the bits set in the argument.\nInitializers\ninit<T>(T)\nCreates an integer from the given floating-point value, rounding toward zero. Any fractional part of the value passed as source is removed.\ninit?(String)\nCreates a new integer value from the given string.\ninit?<S>(S, radix: Int)\nCreates a new integer value from the given string and radix.\ninit(bigEndian: Self)\nCreates an integer from its big-endian representation, changing the byte order if necessary.\ninit<Other>(clamping: Other)\nCreates a new instance with the representable value that’s closest to the given integer.\ninit?<T>(exactly: T)\nCreates an integer from the given floating-point value, if it can be represented exactly.\ninit(littleEndian: Self)\nCreates an integer from its little-endian representation, changing the byte order if necessary.\ninit<T>(truncatingIfNeeded: T)\nCreates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type.\nInstance Properties\nvar bigEndian: Self\nThe big-endian representation of this integer.\nvar bitWidth: Int\nThe number of bits in the binary representation of this value.\nvar littleEndian: Self\nThe little-endian representation of this integer.\nType Methods\nstatic func random(in: ClosedRange<Self>) -> Self\nReturns a random value within the specified range.\nstatic func random(in: Range<Self>) -> Self\nReturns a random value within the specified range.\nstatic func random<T>(in: ClosedRange<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness.\nstatic func random<T>(in: Range<Self>, using: inout T) -> Self\nReturns a random value within the specified range, using the given generator as a source for randomness."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "UnsignedInteger Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/unsignedinteger-implementations",
    "html": "Topics\nInitializers\ninit<T>(T)\nCreates a new instance from the given integer.\nAvailable when Self conforms to FixedWidthInteger.\ninit?<T>(exactly: T)\nCreates a new instance from the given integer, if it can be represented exactly.\nAvailable when Self conforms to FixedWidthInteger.\nInstance Properties\nvar magnitude: Self\nThe magnitude of this value.\nType Properties\nstatic var isSigned: Bool\nA Boolean value indicating whether this type is a signed integer type.\nstatic var max: Self\nThe maximum representable integer in this type.\nAvailable when Self conforms to FixedWidthInteger.\nstatic var min: Self\nThe minimum representable integer in this type.\nAvailable when Self conforms to FixedWidthInteger."
  },
  {
    "title": "Encodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder."
  },
  {
    "title": "bitWidth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/bitwidth-swift.type.property",
    "html": "Discussion\n\nThe bit width of a UInt32 instance is 32."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nA mirror that reflects the UInt32 instance."
  },
  {
    "title": "signum() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/signum()",
    "html": "Return Value\n\nThe sign of this number, expressed as an integer of the same type."
  },
  {
    "title": "remainderReportingOverflow(dividingBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/remainderreportingoverflow(dividingby:)",
    "html": "Parameters\nrhs\n\nThe value to divide this value by.\n\nReturn Value\n\nA tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire remainder. If the overflow component is true, an overflow occurred during division and the partialValue component contains either the entire remainder or, if the remainder is undefined, the dividend.\n\nDiscussion\n\nDividing by zero is not an error when using this method. For a value x, the result of x.remainderReportingOverflow(dividingBy: 0) is (x, true)."
  },
  {
    "title": "|=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/_=(_:_:)-4hx1l",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise OR operation results in a value that has each bit set to 1 where one or both of its arguments have that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx |= y                    // 0b00001111\n"
  },
  {
    "title": "/=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32//=(_:_:)",
    "html": "Parameters\nlhs\n\nThe value to divide.\n\nrhs\n\nThe value to divide lhs by. rhs must not be zero.\n\nDiscussion\n\nFor integer types, any remainder of the division is discarded.\n\nvar x = 21\nx /= 5\n// x == 4\n"
  },
  {
    "title": "<(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/_(_:_:)-3r38p",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nThis function is the only requirement of the Comparable protocol. The remainder of the relational operator functions are implemented by the standard library for any type that conforms to Comparable."
  },
  {
    "title": "^=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/_=(_:_:)-8vgdn",
    "html": "Parameters\nlhs\n\nAn integer value.\n\nrhs\n\nAnother integer value.\n\nDiscussion\n\nA bitwise XOR operation, also known as an exclusive OR operation, results in a value that has each bit set to 1 where one or the other but not both of its arguments had that bit set to 1. For example:\n\nvar x: UInt8 = 5          // 0b00000101\nlet y: UInt8 = 14         // 0b00001110\nx ^= y                    // 0b00001011\n"
  },
  {
    "title": "multipliedFullWidth(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/multipliedfullwidth(by:)",
    "html": "Parameters\nother\n\nThe value to multiply this value by.\n\nReturn Value\n\nA tuple containing the high and low parts of the result of multiplying this value and other.\n\nDiscussion\n\nUse this method to calculate the full result of a product that would otherwise overflow. Unlike traditional truncating multiplication, the multipliedFullWidth(by:) method returns a tuple containing both the high and low parts of the product of this value and other. The following example uses this method to multiply two UInt8 values that normally overflow when multiplied:\n\nlet x: UInt8 = 100\nlet y: UInt8 = 20\nlet result = x.multipliedFullWidth(by: y)\n// result.high == 0b00000111\n// result.low  == 0b11010000\n\n\nThe product of x and y is 2000, which is too large to represent in a UInt8 instance. The high and low properties of the result value represent 2000 when concatenated to form a double-width integer; that is, using result.high as the high byte and result.low as the low byte of a UInt16 instance.\n\nlet z = UInt16(result.high) << 8 | UInt16(result.low)\n// z == 2000\n"
  },
  {
    "title": "dividingFullWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/dividingfullwidth(_:)",
    "html": "Parameters\ndividend\n\nA tuple containing the high and low parts of a double-width integer. The high component of the value carries the sign, if the type is signed.\n\nReturn Value\n\nA tuple containing the quotient and remainder of dividend divided by this value.\n\nDiscussion\n\nThe resulting quotient must be representable within the bounds of the type. If the quotient of dividing dividend by this value is too large to represent in the type, a runtime error may occur."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/==(_:_:)-9raz7",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "-=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/-=(_:_:)-8bhjj",
    "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDiscussion\n\nThe difference of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 - 50 is less than zero, the minimum representable UInt8 value:\n\nvar x: UInt8 = 21\nx - 50\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "&<<=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/&__=(_:_:)-1qp80",
    "html": "Parameters\nlhs\n\nThe value to shift.\n\nrhs\n\nThe number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.\n\nDiscussion\n\nThe &<<= operator performs a masking shift, where the value used as rhs is masked to produce a value in the range 0..<lhs.bitWidth. The shift is performed using this masked value.\n\nThe following example defines x as an instance of UInt8, an 8-bit, unsigned integer type. If you use 2 as the right-hand-side value in an operation on x, the shift amount requires no masking.\n\nvar x: UInt8 = 30                 // 0b00011110\nx &<<= 2\n// x == 120                       // 0b01111000\n\n\nHowever, if you pass 19 as rhs, the method first bitmasks rhs to 3, and then uses that masked value as the number of bits to shift lhs.\n\nvar y: UInt8 = 30                 // 0b00011110\ny &<<= 19\n// y == 240                       // 0b11110000\n"
  },
  {
    "title": "+=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/+=(_:_:)-wdwa",
    "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDiscussion\n\nThe sum of the two arguments must be representable in the arguments’ type. In the following example, the result of 21 + 120 is greater than the maximum representable Int8 value:\n\nvar x: Int8 = 21\nx += 120\n// Overflow error\n\n\nNote\n\nOverflow checking is not performed in -Ounchecked builds."
  },
  {
    "title": "_CustomPlaygroundQuickLookable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf8view/_customplaygroundquicklookable-implementations",
    "html": "Topics\nInstance Properties\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for this instance."
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/string/utf8view/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nReturns a mirror that reflects the UTF-8 view of a string."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/continuousclock/instant/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance.\n\nSee Also\nInfrequently Used Functionality\ninit(extendedGraphemeClusterLiteral: Character)\nCreates a character with the specified value."
  },
  {
    "title": "isHexDigit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/ishexdigit",
    "html": "Discussion\n\nHexadecimal digits include 0-9, Latin letters a-f and A-F, and their fullwidth compatibility forms. To get the character’s value, use the hexDigitValue property.\n\nSee Also\nChecking a Character’s Numeric Properties\nvar isNumber: Bool\nA Boolean value indicating whether this character represents a number.\nvar isWholeNumber: Bool\nA Boolean value indicating whether this character represents a whole number.\nvar wholeNumberValue: Int?\nThe numeric value this character represents, if it represents a whole number.\nvar hexDigitValue: Int?\nThe numeric value this character represents, if it is a hexadecimal digit."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint8/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "isLowercase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/islowercase",
    "html": "Discussion\n\nLowercase characters change when converted to uppercase, but not when converted to lowercase. The following characters are all lowercase:\n\n“é” (U+0065 LATIN SMALL LETTER E, U+0301 COMBINING ACUTE ACCENT)\n\n“и” (U+0438 CYRILLIC SMALL LETTER I)\n\n“π” (U+03C0 GREEK SMALL LETTER PI)\n\nSee Also\nChecking a Character’s Case\nvar isCased: Bool\nA Boolean value indicating whether this character changes under any form of case conversion.\nvar isUppercase: Bool\nA Boolean value indicating whether this character is considered uppercase.\nfunc uppercased() -> String\nReturns an uppercased version of this character.\nfunc lowercased() -> String\nReturns a lowercased version of this character."
  },
  {
    "title": "isCurrencySymbol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/iscurrencysymbol",
    "html": "Discussion\n\nFor example, the following characters all represent currency symbols:\n\n“$” (U+0024 DOLLAR SIGN)\n\n“¥” (U+00A5 YEN SIGN)\n\n“€” (U+20AC EURO SIGN)\n\nSee Also\nInspecting a Character\nvar isLetter: Bool\nA Boolean value indicating whether this character is a letter.\nvar isPunctuation: Bool\nA Boolean value indicating whether this character represents punctuation.\nvar isNewline: Bool\nA Boolean value indicating whether this character represents a newline.\nvar isWhitespace: Bool\nA Boolean value indicating whether this character represents whitespace, including newlines.\nvar isSymbol: Bool\nA Boolean value indicating whether this character represents a symbol.\nvar isMathSymbol: Bool\nA Boolean value indicating whether this character represents a symbol that naturally appears in mathematical contexts."
  },
  {
    "title": "Character.UnicodeScalarView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/unicodescalarview",
    "html": "See Also\nWorking with a Character’s Unicode Values\ninit(Unicode.Scalar)\nCreates a character containing the given Unicode scalar value.\nvar unicodeScalars: Character.UnicodeScalarView\nvar isASCII: Bool\nA Boolean value indicating whether this is an ASCII character.\nvar asciiValue: UInt8?\nThe ASCII encoding value of this character, if it is an ASCII character."
  },
  {
    "title": "max | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/unsignedinteger/max",
    "html": "Discussion\n\nFor unsigned integer types, this value is (2 ** bitWidth) - 1, where ** is exponentiation."
  },
  {
    "title": "write(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/write(to:)",
    "html": "Parameters\ntarget\n\nAn output stream."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/init(_:)-9i7ab",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer. source must be representable in this type after rounding toward zero.\n\nDiscussion\n\nAny fractional part of the value passed as source is removed, rounding the value toward zero.\n\nlet x = Int(21.5)\n// x == 21\nlet y = Int(-21.5)\n// y == -21\n\n\nIf source is outside the bounds of this type after rounding toward zero, a runtime error may occur.\n\nlet z = UInt(-21.5)\n// Error: ...the result would be less than UInt.min\n"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/init(exactly:)-6lp3v",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "init(bitPattern:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/init(bitpattern:)",
    "html": "Parameters\nx\n\nA value to use as the source of the new instance’s binary representation.\n\nDiscussion\n\nThis initializer does not perform any range or overflow checking. The resulting instance may not have the same numeric value as bitPattern—it is only guaranteed to use the same pattern of bits in its binary representation."
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/init(exactly:)-7jkyf",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "init(exactly:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/init(exactly:)-9c2y8",
    "html": "Parameters\nsource\n\nA floating-point value to convert to an integer.\n\nDiscussion\n\nIf the value passed as source is not representable exactly, the result is nil. In the following example, the constant x is successfully created from a value of 21.0, while the attempt to initialize the constant y from 21.5 fails:\n\nlet x = Int(exactly: 21.0)\n// x == Optional(21)\nlet y = Int(exactly: 21.5)\n// y == nil\n"
  },
  {
    "title": "trailingZeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/trailingzerobitcount",
    "html": "Discussion\n\nFor example, the number -8 has three trailing zeros.\n\nlet x = Int8(bitPattern: 0b1111_1000)\n// x == -8\n// x.trailingZeroBitCount == 3\n"
  },
  {
    "title": "leadingZeroBitCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/leadingzerobitcount",
    "html": "Discussion\n\nFor example, in an integer type with a bitWidth value of 8, the number 31 has three leading zeros.\n\nlet x: Int8 = 0b0001_1111\n// x == 31\n// x.leadingZeroBitCount == 3\n"
  },
  {
    "title": "dividedReportingOverflow(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/dividedreportingoverflow(by:)",
    "html": "Parameters\nrhs\n\nThe value to divide this value by.\n\nReturn Value\n\nA tuple containing the result of the division along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire quotient. If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend.\n\nDiscussion\n\nDividing by zero is not an error when using this method. For a value x, the result of x.dividedReportingOverflow(by: 0) is (x, true)."
  },
  {
    "title": "_CustomPlaygroundQuickLookable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/_customplaygroundquicklookable-implementations",
    "html": "Topics\nInstance Properties\nvar customPlaygroundQuickLook: _PlaygroundQuickLook\nA custom playground Quick Look for the Character instance.\nDeprecated"
  },
  {
    "title": "CustomReflectable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/customreflectable-implementations",
    "html": "Topics\nInstance Properties\nvar customMirror: Mirror\nA mirror that reflects the Character instance."
  },
  {
    "title": "TextOutputStreamable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/textoutputstreamable-implementations",
    "html": "Topics\nInstance Methods\nfunc write<Target>(to: inout Target)\nWrites the character into the given output stream."
  },
  {
    "title": "RegexComponent Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/regexcomponent-implementations",
    "html": "Topics\nInstance Properties\nvar regex: Regex<Character.Output>\nThe regular expression represented by this component.\nType Aliases\ntypealias RegexOutput\nThe output type for this regular expression."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/character/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType.\nType Aliases\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal."
  },
  {
    "title": "Decodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/swift/uint32/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder."
  }
]
