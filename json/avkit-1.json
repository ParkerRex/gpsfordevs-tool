[
    {
        "title": "pictureInPictureController(_:setPlaying:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturesamplebufferplaybackdelegate/3750334-pictureinpicturecontroller",
        "html": "Required\n\nParameters\npictureInPictureController\n\nThe Picture in Picture controller.\n\nplaying\n\nA Boolean value that indicates whether to begin or pause playback.\n\nSee Also\nResponding to Playback Events\nfunc pictureInPictureControllerTimeRangeForPlayback(AVPictureInPictureController) -> CMTimeRange\nAsks the delegate for the current playable time range.\n\nRequired\n\nfunc pictureInPictureControllerIsPlaybackPaused(AVPictureInPictureController) -> Bool\nAsks delegate to indicate whether the playback UI reflects a playing or paused state, regardless of the current playback rate.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, didTransitionToRenderSize: CMVideoDimensions)\nTells the delegate when the system Picture in Picture window changes size.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, skipByInterval: CMTime, completion: () -> Void)\nTells the delegate that the user has requested skipping forward or backward by the indicated time interval.\n\nRequired\n\nfunc pictureInPictureControllerShouldProhibitBackgroundAudioPlayback(AVPictureInPictureController) -> Bool\nAsks the delegate whether to always prohibit background audio playback."
    },
    {
        "title": "pictureInPictureControllerTimeRangeForPlayback(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturesamplebufferplaybackdelegate/3750337-pictureinpicturecontrollertimera",
        "html": "Required\n\nParameters\npictureInPictureController\n\nThe Picture in Picture controller.\n\nReturn Value\n\nA CMTimeRange value that defines the content\u2019s time range.\n\nDiscussion\n\nUse the following guidelines when specifying a time range value:\n\nFor live content, return a time range with a duration of positiveInfinity.\n\nFor nonlive content, return a time range that contains the current time of the sample buffer display layer\u2019s timebase.\n\nWhen there\u2019s no content to play, return invalid.\n\nThe system calls this method whenever you call the invalidatePlaybackState() method, and at other times as it requires.\n\nSee Also\nResponding to Playback Events\nfunc pictureInPictureController(AVPictureInPictureController, setPlaying: Bool)\nTells the delegate that the user requested to begin or pause playback.\n\nRequired\n\nfunc pictureInPictureControllerIsPlaybackPaused(AVPictureInPictureController) -> Bool\nAsks delegate to indicate whether the playback UI reflects a playing or paused state, regardless of the current playback rate.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, didTransitionToRenderSize: CMVideoDimensions)\nTells the delegate when the system Picture in Picture window changes size.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, skipByInterval: CMTime, completion: () -> Void)\nTells the delegate that the user has requested skipping forward or backward by the indicated time interval.\n\nRequired\n\nfunc pictureInPictureControllerShouldProhibitBackgroundAudioPlayback(AVPictureInPictureController) -> Bool\nAsks the delegate whether to always prohibit background audio playback."
    },
    {
        "title": "pictureInPictureControllerIsPlaybackPaused(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturesamplebufferplaybackdelegate/3750336-pictureinpicturecontrollerisplay",
        "html": "Required\n\nParameters\npictureInPictureController\n\nThe Picture in Picture controller.\n\nReturn Value\n\ntrue to indicate a paused state, otherwise false.\n\nDiscussion\n\nThe system calls this method whenever you call its invalidatePlaybackState() method, and at other times as it requires.\n\nSee Also\nResponding to Playback Events\nfunc pictureInPictureController(AVPictureInPictureController, setPlaying: Bool)\nTells the delegate that the user requested to begin or pause playback.\n\nRequired\n\nfunc pictureInPictureControllerTimeRangeForPlayback(AVPictureInPictureController) -> CMTimeRange\nAsks the delegate for the current playable time range.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, didTransitionToRenderSize: CMVideoDimensions)\nTells the delegate when the system Picture in Picture window changes size.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, skipByInterval: CMTime, completion: () -> Void)\nTells the delegate that the user has requested skipping forward or backward by the indicated time interval.\n\nRequired\n\nfunc pictureInPictureControllerShouldProhibitBackgroundAudioPlayback(AVPictureInPictureController) -> Bool\nAsks the delegate whether to always prohibit background audio playback."
    },
    {
        "title": "pictureInPictureController(_:skipByInterval:completion:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturesamplebufferplaybackdelegate/3750335-pictureinpicturecontroller",
        "html": "Required\n\nParameters\npictureInPictureController\n\nThe Picture in Picture controller.\n\nskipInterval\n\nA CMTime value that indicates the time interval by which to skip.\n\ncompletionHandler\n\nYou must call the completion handler whether your seek operation succeeds or fails. Failing to call the completion handler is an app error and leaves the user interface in a seeking state.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc pictureInPictureController(_ pictureInPictureController: AVPictureInPictureController, skipByInterval skipInterval: CMTime) async\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nYour app\u2019s implementation of this method may choose to seek by a different interval for efficiency reasons, such as seeking to a particular key frame or only allowing seeks that fall within the playable timeline.\n\nImportant\n\nBefore calling the completion handler, ensure the seek operation is complete and the timebase reflects the current time and playback rate.\n\nSee Also\nResponding to Playback Events\nfunc pictureInPictureController(AVPictureInPictureController, setPlaying: Bool)\nTells the delegate that the user requested to begin or pause playback.\n\nRequired\n\nfunc pictureInPictureControllerTimeRangeForPlayback(AVPictureInPictureController) -> CMTimeRange\nAsks the delegate for the current playable time range.\n\nRequired\n\nfunc pictureInPictureControllerIsPlaybackPaused(AVPictureInPictureController) -> Bool\nAsks delegate to indicate whether the playback UI reflects a playing or paused state, regardless of the current playback rate.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, didTransitionToRenderSize: CMVideoDimensions)\nTells the delegate when the system Picture in Picture window changes size.\n\nRequired\n\nfunc pictureInPictureControllerShouldProhibitBackgroundAudioPlayback(AVPictureInPictureController) -> Bool\nAsks the delegate whether to always prohibit background audio playback."
    },
    {
        "title": "pictureInPictureControllerShouldProhibitBackgroundAudioPlayback(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturesamplebufferplaybackdelegate/3857563-pictureinpicturecontrollershould",
        "html": "Parameters\npictureInPictureController\n\nThe Picture in Picture controller instance.\n\nReturn Value\n\ntrue if the delegate prohibits background audio playback; otherwise, false.\n\nDiscussion\n\nIf you implement this method, the system calls it once for each invocation of invalidatePlaybackState() to determine whether to prohibit audio playback when the Picture in Picture window is in the background.\n\nSee Also\nResponding to Playback Events\nfunc pictureInPictureController(AVPictureInPictureController, setPlaying: Bool)\nTells the delegate that the user requested to begin or pause playback.\n\nRequired\n\nfunc pictureInPictureControllerTimeRangeForPlayback(AVPictureInPictureController) -> CMTimeRange\nAsks the delegate for the current playable time range.\n\nRequired\n\nfunc pictureInPictureControllerIsPlaybackPaused(AVPictureInPictureController) -> Bool\nAsks delegate to indicate whether the playback UI reflects a playing or paused state, regardless of the current playback rate.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, didTransitionToRenderSize: CMVideoDimensions)\nTells the delegate when the system Picture in Picture window changes size.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, skipByInterval: CMTime, completion: () -> Void)\nTells the delegate that the user has requested skipping forward or backward by the indicated time interval.\n\nRequired"
    },
    {
        "title": "pictureInPictureController(_:didTransitionToRenderSize:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturesamplebufferplaybackdelegate/3750333-pictureinpicturecontroller",
        "html": "Required\n\nParameters\npictureInPictureController\n\nThe Picture in Picture controller.\n\nnewRenderSize\n\nThe Picture in Picture content\u2019s rendered size, in pixels.\n\nDiscussion\n\nTake the new render size and the isPictureInPictureActive state into account when choosing media variants to avoid uncessary decoding overhead.\n\nSee Also\nResponding to Playback Events\nfunc pictureInPictureController(AVPictureInPictureController, setPlaying: Bool)\nTells the delegate that the user requested to begin or pause playback.\n\nRequired\n\nfunc pictureInPictureControllerTimeRangeForPlayback(AVPictureInPictureController) -> CMTimeRange\nAsks the delegate for the current playable time range.\n\nRequired\n\nfunc pictureInPictureControllerIsPlaybackPaused(AVPictureInPictureController) -> Bool\nAsks delegate to indicate whether the playback UI reflects a playing or paused state, regardless of the current playback rate.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, skipByInterval: CMTime, completion: () -> Void)\nTells the delegate that the user has requested skipping forward or backward by the indicated time interval.\n\nRequired\n\nfunc pictureInPictureControllerShouldProhibitBackgroundAudioPlayback(AVPictureInPictureController) -> Bool\nAsks the delegate whether to always prohibit background audio playback."
    },
    {
        "title": "default",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureviewcontrolsstyle/1519165-default",
        "html": "Discussion\n\nThe default controls style is AVCaptureViewControlsStyle.inline.\n\nSee Also\nControls Styles\ncase inline\nThe view\u2019s inline controls style.\ncase floating\nThe view\u2019s floating controls style, which matches the user interface of QuickTime Player.\ncase inlineDeviceSelection\nThe view\u2019s inline device selection style."
    },
    {
        "title": "default",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrolsstyle/1416576-default",
        "html": "Discussion\n\nThe default controls style is AVPlayerViewControlsStyle.inline.\n\nSee Also\nControls Styles\ncase none\nThe view displays no playback controls.\ncase inline\nThe view displays playback controls in a bar along the view\u2019s bottom edge.\ncase floating\nThe view displays playback controls in a floating window over the video content.\ncase minimal\nThe view presents basic controls to play and pause playback."
    },
    {
        "title": "AVKitError.Code.contentDisallowedByProfile",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/code/contentdisallowedbyprofile",
        "html": "Discussion\n\nThe user can't override this restriction by entering the device passcode, but they may be able to override it in the Settings app.\n\nSee Also\nError Codes\ncase unknown\nAn unknown error.\ncase contentRatingUnknown\nThe media content rating is missing or unrecognized.\ncase contentDisallowedByPasscode\nA restriction disallows access to this content, but the user can override the restriction by entering the device passcode.\ncase pictureInPictureStartFailed\nThe system failed to start Picture in Picture."
    },
    {
        "title": "routePickerViewWillBeginPresentingRoutes(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerviewdelegate/2915788-routepickerviewwillbeginpresenti",
        "html": "Parameters\nroutePickerView\n\nThe route picker view.\n\nSee Also\nPresenting Routes\nfunc routePickerViewDidEndPresentingRoutes(AVRoutePickerView)\nTells the delegate when the route picker view finishes presenting routes to the user."
    },
    {
        "title": "AVRoutePickerView.ButtonState.normalHighlighted",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/buttonstate/normalhighlighted",
        "html": "See Also\nButton States\ncase normal\nThe normal, or default, button state.\ncase active\nThe button state when AirPlay is active.\ncase activeHighlighted\nThe highlighted button state when AirPlay is active."
    },
    {
        "title": "AVRoutePickerView.ButtonState.normal",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/buttonstate/normal",
        "html": "See Also\nButton States\ncase normalHighlighted\nThe highlighted button state when a mouse-down event occurs inside the button.\ncase active\nThe button state when AirPlay is active.\ncase activeHighlighted\nThe highlighted button state when AirPlay is active."
    },
    {
        "title": "AVCaptureViewControlsStyle.inline",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureviewcontrolsstyle/inline",
        "html": "See Also\nControls Styles\ncase floating\nThe view\u2019s floating controls style, which matches the user interface of QuickTime Player.\ncase inlineDeviceSelection\nThe view\u2019s inline device selection style.\nstatic var `default`: AVCaptureViewControlsStyle\nThe view\u2019s default controls style."
    },
    {
        "title": "AVCaptureViewControlsStyle.inlineDeviceSelection",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureviewcontrolsstyle/inlinedeviceselection",
        "html": "See Also\nControls Styles\ncase inline\nThe view\u2019s inline controls style.\ncase floating\nThe view\u2019s floating controls style, which matches the user interface of QuickTime Player.\nstatic var `default`: AVCaptureViewControlsStyle\nThe view\u2019s default controls style."
    },
    {
        "title": "AVCaptureViewControlsStyle.floating",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureviewcontrolsstyle/floating",
        "html": "See Also\nControls Styles\ncase inline\nThe view\u2019s inline controls style.\ncase inlineDeviceSelection\nThe view\u2019s inline device selection style.\nstatic var `default`: AVCaptureViewControlsStyle\nThe view\u2019s default controls style."
    },
    {
        "title": "captureView(_:startRecordingTo:)",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureviewdelegate/1519138-captureview",
        "html": "Required\n\nParameters\ncaptureView\n\nThe capture view.\n\nfileOutput\n\nThe capture file output.\n\nDiscussion\n\nIf the capture file output is an instance of AVCaptureMovieFileOutput, you start recording by calling startRecording(to:recordingDelegate:) on the capture file output."
    },
    {
        "title": "playerViewDidExitFullScreen(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewdelegate/3752988-playerviewdidexitfullscreen",
        "html": "Parameters\nplayerView\n\nThe player view.\n\nSee Also\nResponding to Full Screen Events\nfunc playerViewWillEnterFullScreen(AVPlayerView)\nTells the delegate that the player view is about to enter full-screen mode.\nfunc playerViewDidEnterFullScreen(AVPlayerView)\nTells the delegate that the player view entered full-screen mode.\nfunc playerViewWillExitFullScreen(AVPlayerView)\nTells the delegate that the player view is about to exit full-screen mode.\nfunc playerView(AVPlayerView, restoreUserInterfaceForFullScreenExitWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the app\u2019s user interface when exiting full-screen mode."
    },
    {
        "title": "sampleBufferDisplayLayer",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/contentsource/3750330-samplebufferdisplaylayer",
        "html": "Discussion\n\nThis value is nil if the content source doesn\u2019t represent a sample buffer display layer.\n\nSee Also\nAccessing the Presentation Layer\nvar playerLayer: AVPlayerLayer?\nThe presenting player layer."
    },
    {
        "title": "pictureInPictureStartFailed",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/2335363-pictureinpicturestartfailed",
        "html": "See Also\nError Code Constants\nstatic var unknown: AVKitError.Code\nAn unknown error.\nstatic var contentRatingUnknown: AVKitError.Code\nThe media content rating is missing or unrecognized.\nstatic var contentDisallowedByPasscode: AVKitError.Code\nA restriction disallows access to this content, but the user can override the restriction by entering the device passcode.\nstatic var contentDisallowedByProfile: AVKitError.Code\nAn installed profile restricts access to this content."
    },
    {
        "title": "AVPlayerViewControlsStyle.floating",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrolsstyle/floating",
        "html": "Discussion\n\nThis style matches the look of QuickTime Player\u2019s playback controls.\n\nSee Also\nControls Styles\ncase none\nThe view displays no playback controls.\ncase inline\nThe view displays playback controls in a bar along the view\u2019s bottom edge.\ncase minimal\nThe view presents basic controls to play and pause playback.\nstatic var `default`: AVPlayerViewControlsStyle\nThe view\u2019s default controls style."
    },
    {
        "title": "AVRoutePickerView.ButtonState.activeHighlighted",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/buttonstate/activehighlighted",
        "html": "See Also\nButton States\ncase normal\nThe normal, or default, button state.\ncase normalHighlighted\nThe highlighted button state when a mouse-down event occurs inside the button.\ncase active\nThe button state when AirPlay is active."
    },
    {
        "title": "AVRoutePickerView.ButtonState.active",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/buttonstate/active",
        "html": "See Also\nButton States\ncase normal\nThe normal, or default, button state.\ncase normalHighlighted\nThe highlighted button state when a mouse-down event occurs inside the button.\ncase activeHighlighted\nThe highlighted button state when AirPlay is active."
    },
    {
        "title": "routePickerViewDidEndPresentingRoutes(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerviewdelegate/2915796-routepickerviewdidendpresentingr",
        "html": "Parameters\nroutePickerView\n\nThe route picker view.\n\nSee Also\nPresenting Routes\nfunc routePickerViewWillBeginPresentingRoutes(AVRoutePickerView)\nTells the delegate that the route picker view is about to begin presenting routes to the user."
    },
    {
        "title": "AVKitError.Code.pictureInPictureStartFailed",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/code/pictureinpicturestartfailed",
        "html": "See Also\nError Codes\ncase unknown\nAn unknown error.\ncase contentRatingUnknown\nThe media content rating is missing or unrecognized.\ncase contentDisallowedByPasscode\nA restriction disallows access to this content, but the user can override the restriction by entering the device passcode.\ncase contentDisallowedByProfile\nAn installed profile restricts access to this content."
    },
    {
        "title": "AVKitError.Code.contentRatingUnknown",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/code/contentratingunknown",
        "html": "See Also\nError Codes\ncase unknown\nAn unknown error.\ncase contentDisallowedByPasscode\nA restriction disallows access to this content, but the user can override the restriction by entering the device passcode.\ncase pictureInPictureStartFailed\nThe system failed to start Picture in Picture.\ncase contentDisallowedByProfile\nAn installed profile restricts access to this content."
    },
    {
        "title": "unknown",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/2335355-unknown",
        "html": "See Also\nError Code Constants\nstatic var contentRatingUnknown: AVKitError.Code\nThe media content rating is missing or unrecognized.\nstatic var contentDisallowedByPasscode: AVKitError.Code\nA restriction disallows access to this content, but the user can override the restriction by entering the device passcode.\nstatic var contentDisallowedByProfile: AVKitError.Code\nAn installed profile restricts access to this content.\nstatic var pictureInPictureStartFailed: AVKitError.Code\nThe system failed to start Picture in Picture."
    },
    {
        "title": "AVKitError.Code.contentDisallowedByPasscode",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/code/contentdisallowedbypasscode",
        "html": "See Also\nError Codes\ncase unknown\nAn unknown error.\ncase contentRatingUnknown\nThe media content rating is missing or unrecognized.\ncase pictureInPictureStartFailed\nThe system failed to start Picture in Picture.\ncase contentDisallowedByProfile\nAn installed profile restricts access to this content."
    },
    {
        "title": "contentDisallowedByProfile",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/3152956-contentdisallowedbyprofile",
        "html": "Discussion\n\nThe user can\u2019t override this restriction by entering the passcode, but they may be able to override it in the Settings app.\n\nSee Also\nError Code Constants\nstatic var unknown: AVKitError.Code\nAn unknown error.\nstatic var contentRatingUnknown: AVKitError.Code\nThe media content rating is missing or unrecognized.\nstatic var contentDisallowedByPasscode: AVKitError.Code\nA restriction disallows access to this content, but the user can override the restriction by entering the device passcode.\nstatic var pictureInPictureStartFailed: AVKitError.Code\nThe system failed to start Picture in Picture."
    },
    {
        "title": "AVKitError.Code.unknown",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/code/unknown",
        "html": "See Also\nError Codes\ncase contentRatingUnknown\nThe media content rating is missing or unrecognized.\ncase contentDisallowedByPasscode\nA restriction disallows access to this content, but the user can override the restriction by entering the device passcode.\ncase pictureInPictureStartFailed\nThe system failed to start Picture in Picture.\ncase contentDisallowedByProfile\nAn installed profile restricts access to this content."
    },
    {
        "title": "contentDisallowedByPasscode",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/3152955-contentdisallowedbypasscode",
        "html": "See Also\nError Code Constants\nstatic var unknown: AVKitError.Code\nAn unknown error.\nstatic var contentRatingUnknown: AVKitError.Code\nThe media content rating is missing or unrecognized.\nstatic var contentDisallowedByProfile: AVKitError.Code\nAn installed profile restricts access to this content.\nstatic var pictureInPictureStartFailed: AVKitError.Code\nThe system failed to start Picture in Picture."
    },
    {
        "title": "contentRatingUnknown",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/3152957-contentratingunknown",
        "html": "See Also\nError Code Constants\nstatic var unknown: AVKitError.Code\nAn unknown error.\nstatic var contentDisallowedByPasscode: AVKitError.Code\nA restriction disallows access to this content, but the user can override the restriction by entering the device passcode.\nstatic var contentDisallowedByProfile: AVKitError.Code\nAn installed profile restricts access to this content.\nstatic var pictureInPictureStartFailed: AVKitError.Code\nThe system failed to start Picture in Picture."
    },
    {
        "title": "AVPlayerViewControlsStyle.minimal",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrolsstyle/minimal",
        "html": "See Also\nControls Styles\ncase none\nThe view displays no playback controls.\ncase inline\nThe view displays playback controls in a bar along the view\u2019s bottom edge.\ncase floating\nThe view displays playback controls in a floating window over the video content.\nstatic var `default`: AVPlayerViewControlsStyle\nThe view\u2019s default controls style."
    },
    {
        "title": "init(playerLayer:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/contentsource/3750326-init",
        "html": "Parameters\nplayerLayer\n\nThe player layer to show in Picture in Picture.\n\nSee Also\nCreating a Content Source\ninit(sampleBufferDisplayLayer: AVSampleBufferDisplayLayer, playbackDelegate: AVPictureInPictureSampleBufferPlaybackDelegate)\nCreates a content source with a sample buffer display layer.\ninit(activeVideoCallSourceView: UIView, contentViewController: AVPictureInPictureVideoCallViewController)\nCreates a content source with an active video call."
    },
    {
        "title": "init(sampleBufferDisplayLayer:playbackDelegate:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/contentsource/3750329-init",
        "html": "Parameters\nsampleBufferDisplayLayer\n\nThe sample buffer display layer to show in Picture in Picture.\n\nplaybackDelegate\n\nThe playback delegate object that responds to Picture in Picture events.\n\nSee Also\nCreating a Content Source\ninit(playerLayer: AVPlayerLayer)\nCreates a content source with a player layer.\ninit(activeVideoCallSourceView: UIView, contentViewController: AVPictureInPictureVideoCallViewController)\nCreates a content source with an active video call."
    },
    {
        "title": "fileOutput",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureview/1519149-fileoutput",
        "html": "Discussion\n\nThe value of this property is the first capture file output object contained in the session\u2019s outputs array, or nil if it has no outputs. In the latter case, the capture view disables the start recording button. However, it may still enable the controls for choosing input sources."
    },
    {
        "title": "playerLayer",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/contentsource/3750327-playerlayer",
        "html": "Discussion\n\nThis value is nil if the content source doesn\u2019t represent a player layer.\n\nSee Also\nAccessing the Presentation Layer\nvar sampleBufferDisplayLayer: AVSampleBufferDisplayLayer?\nThe presenting sample buffer display layer."
    },
    {
        "title": "init(contentTimeForTransition:title:previewImage:)",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposal/1650945-init",
        "html": "Parameters\ncontentTimeForTransition\n\nA CMTime value at which to present the content propsal within the media\u2019s timeline.\n\ntitle\n\nThe title of the proposed content.\n\npreviewImage\n\nThe preview image for the proposed item.\n\nReturn Value\n\nA new instance of AVContentProposal.\n\nDiscussion\n\nYou specify the content proposal\u2019s presentation time within the asset\u2019s timeline. For instance, if you wanted to present the next content proposal 15 seconds before the end of the currently playing asset, you could create the next content proposal as follows:\n\nlet episode1Asset = // Currently presented asset for Episode 1\n// Subtract 15 seconds from the current episode's duration\nlet time = episode1Asset.duration - CMTime(value: 15, timescale: 1)\nlet title = \"My Series: Episode 2\"\nlet image = UIImage(named: \"myseries_ep2\")\nlet proposal = AVContentProposal(contentTimeForTransition: time,\n                                 title: title,\n                                 previewImage: image)\n// Set the proposal as the nextContentProposal of the current player item\ncurrentPlayerItem.nextContentProposal = proposal\n"
    },
    {
        "title": "AVPictureInPictureSampleBufferPlaybackDelegate",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturesamplebufferplaybackdelegate",
        "html": "Topics\nResponding to Playback Events\nfunc pictureInPictureController(AVPictureInPictureController, setPlaying: Bool)\nTells the delegate that the user requested to begin or pause playback.\n\nRequired\n\nfunc pictureInPictureControllerTimeRangeForPlayback(AVPictureInPictureController) -> CMTimeRange\nAsks the delegate for the current playable time range.\n\nRequired\n\nfunc pictureInPictureControllerIsPlaybackPaused(AVPictureInPictureController) -> Bool\nAsks delegate to indicate whether the playback UI reflects a playing or paused state, regardless of the current playback rate.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, didTransitionToRenderSize: CMVideoDimensions)\nTells the delegate when the system Picture in Picture window changes size.\n\nRequired\n\nfunc pictureInPictureController(AVPictureInPictureController, skipByInterval: CMTime, completion: () -> Void)\nTells the delegate that the user has requested skipping forward or backward by the indicated time interval.\n\nRequired\n\nfunc pictureInPictureControllerShouldProhibitBackgroundAudioPlayback(AVPictureInPictureController) -> Bool\nAsks the delegate whether to always prohibit background audio playback.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nConfiguring the Delegate\nvar sampleBufferPlaybackDelegate: AVPictureInPictureSampleBufferPlaybackDelegate?\nA delegate object that responds to sample buffer playback events."
    },
    {
        "title": "activeVideoCallContentViewController",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/contentsource/3778532-activevideocallcontentviewcontro",
        "html": "Discussion\n\nThis view controller may indicate a preferred content size which influences the aspect ratio and the size of the Picture in Picture window. The view it presents isn\u2019t interactive and doesn\u2019t receive touches or user input.\n\nWhen this view controller\u2019s appearance methods indicate that its view is on screen, place the video call content view in the controller\u2019s view hierarchy. The content must fill the bounds of the view controller\u2019s view.\n\nAlthough apps can choose to move content from their source view to this view controller, it\u2019s also valid to show different views, as long as they represent the same video call.\n\nSee Also\nAccessing the Active Call Presentation\nvar activeVideoCallSourceView: UIView?\nThe view that contains the video content of the call.\nclass AVPictureInPictureVideoCallViewController\nA view controller that presents content from a video call in Picture in Picture."
    },
    {
        "title": "activeVideoCallSourceView",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/contentsource/3778533-activevideocallsourceview",
        "html": "Discussion\n\nThe controller uses this view\u2019s layout frame and visibility to determine whether or not Picture in Picture begins automatically when the app moves to the background. The view\u2019s layout frame also influences the animation when entering and exiting Picture in Picture.\n\nSee Also\nAccessing the Active Call Presentation\nvar activeVideoCallContentViewController: AVPictureInPictureVideoCallViewController\nThe view controller that presents the video call content.\nclass AVPictureInPictureVideoCallViewController\nA view controller that presents content from a video call in Picture in Picture."
    },
    {
        "title": "pictureInPictureControllerDidStartPictureInPicture(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontrollerdelegate/1614695-pictureinpicturecontrollerdidsta",
        "html": "Parameters\npictureInPictureController\n\nThe delegating controller.\n\nSee Also\nResponding to Picture in Picture Lifecycle Events\nfunc pictureInPictureControllerWillStartPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture is about to start.\nfunc pictureInPictureController(AVPictureInPictureController, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture failed to start.\nfunc pictureInPictureControllerWillStopPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture is about to stop.\nfunc pictureInPictureControllerDidStopPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture stopped."
    },
    {
        "title": "invalidatePlaybackState()",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/3750328-invalidateplaybackstate",
        "html": "Discussion\n\nCall this method whenever you start or pause playback and when the underlying content duration changes."
    },
    {
        "title": "pictureInPictureControllerWillStopPictureInPicture(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontrollerdelegate/1614719-pictureinpicturecontrollerwillst",
        "html": "Parameters\npictureInPictureController\n\nThe delegating controller.\n\nSee Also\nResponding to Picture in Picture Lifecycle Events\nfunc pictureInPictureControllerWillStartPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture is about to start.\nfunc pictureInPictureControllerDidStartPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture started.\nfunc pictureInPictureController(AVPictureInPictureController, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture failed to start.\nfunc pictureInPictureControllerDidStopPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture stopped."
    },
    {
        "title": "AVPlayerViewControlsStyle.inline",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrolsstyle/inline",
        "html": "See Also\nControls Styles\ncase none\nThe view displays no playback controls.\ncase floating\nThe view displays playback controls in a floating window over the video content.\ncase minimal\nThe view presents basic controls to play and pause playback.\nstatic var `default`: AVPlayerViewControlsStyle\nThe view\u2019s default controls style."
    },
    {
        "title": "AVRoutePickerViewButtonStyle.custom",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerviewbuttonstyle/custom",
        "html": "Discussion\n\nUse this button style to customize the background view and focus appearance for a route picker view.\n\nSee Also\nButton Styles\ncase plain\nA plain button style.\ncase system\nA system-defined button style."
    },
    {
        "title": "AVRoutePickerViewButtonStyle.system",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerviewbuttonstyle/system",
        "html": "See Also\nButton Styles\ncase custom\nA custom button style.\ncase plain\nA plain button style."
    },
    {
        "title": "AVRoutePickerViewButtonStyle.plain",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerviewbuttonstyle/plain",
        "html": "Discussion\n\nUse this style to set the button to match the system style, except without a blurred background view.\n\nSee Also\nButton Styles\ncase custom\nA custom button style.\ncase system\nA system-defined button style."
    },
    {
        "title": "AVPlayerViewControllerSkippingBehavior.skipItem",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerskippingbehavior/skipitem",
        "html": "See Also\nSkipping Behaviors\ncase `default`\nThe default skipping behavior, which is to skip forward or backward in 10-second intervals."
    },
    {
        "title": "AVPlayerViewControllerSkippingBehavior.default",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerskippingbehavior/default",
        "html": "See Also\nSkipping Behaviors\ncase skipItem\nSkipping behavior that specifies skipping to the next or previous item in the player\u2019s playlist."
    },
    {
        "title": "rate",
        "url": "https://developer.apple.com/documentation/avkit/avplaybackspeed/3930106-rate",
        "html": "See Also\nInspecting Speed Details\nvar localizedName: String\nA localized name for a speed that\u2019s suitable for display in a user interface.\nvar localizedNumericName: String\nA localized numeric name for a speed that\u2019s suitable for display in a user interface."
    },
    {
        "title": "init(rate:localizedName:)",
        "url": "https://developer.apple.com/documentation/avkit/avplaybackspeed/3930103-init",
        "html": "Parameters\nrate\n\nThe rate to use when you select this playback speed.\n\nlocalizedName\n\nA localized name to display in a user interface for this speed."
    },
    {
        "title": "timedNavigationMarkers",
        "url": "https://developer.apple.com/documentation/avkit/avnavigationmarkersgroup/1627564-timednavigationmarkers",
        "html": "Discussion\n\nReturns the array of AVTimedMetadataGroup objects managed by this group. This value may be nil.\n\nSee Also\nInspecting Navigation Metadata\nvar title: String?\nThe title of the marker group.\nvar dateRangeNavigationMarkers: [AVDateRangeMetadataGroup]?\nThe array of date range navigation markers for which the group provides navigation."
    },
    {
        "title": "init(timeRange:)",
        "url": "https://developer.apple.com/documentation/avkit/avinterstitialtimerange/1627632-init",
        "html": "Parameters\ntimeRange\n\nThe time range to designate as interstitial content.\n\nReturn Value\n\nA new interstitial time range object.\n\nDiscussion\n\nTo associate interstitial time ranges with an asset for playback, use the interstitialTimeRanges property of an AVPlayerItem object."
    },
    {
        "title": "init(title:dateRangeNavigationMarkers:)",
        "url": "https://developer.apple.com/documentation/avkit/avnavigationmarkersgroup/1627562-init",
        "html": "Parameters\ntitle\n\nThe title to present for the markers group.\n\nnavigationMarkers\n\nThe array of date range navigation markers for which the group provides navigation.\n\nReturn Value\n\nA new navigation markers group.\n\nDiscussion\n\nTo associate marker groups with an asset for playback, use the navigationMarkerGroups property of an AVPlayerItem object.\n\nTo create a chapter list, pass nil for the title parameter and set the group as the first item in the player item\u2019s navigationMarkerGroups array. To provide additional options for navigating media (such as a \u201cGoals Scored\u201d group for a recorded sporting event), provide a unique title value for each marker group in the array.\n\nSee Also\nCreating a Navigation Marker Group\ninit(title: String?, timedNavigationMarkers: [AVTimedMetadataGroup])\nInitializes a navigation markers group with the specified title and array of timed navigation markers."
    },
    {
        "title": "title",
        "url": "https://developer.apple.com/documentation/avkit/avnavigationmarkersgroup/1627565-title",
        "html": "Discussion\n\nYou set a marker group\u2019s title with the AVNavigationMarkersGroup initializer. Each marker group in the navigationMarkerGroups array of an AVPlayerItem object must have a unique title. To use the marker group as a chapter list, set its title to nil.\n\nSee Also\nInspecting Navigation Metadata\nvar timedNavigationMarkers: [AVTimedMetadataGroup]?\nThe array of timed navigation markers for which the group provides navigation.\nvar dateRangeNavigationMarkers: [AVDateRangeMetadataGroup]?\nThe array of date range navigation markers for which the group provides navigation."
    },
    {
        "title": "dateRangeNavigationMarkers",
        "url": "https://developer.apple.com/documentation/avkit/avnavigationmarkersgroup/1627560-daterangenavigationmarkers",
        "html": "Discussion\n\nReturns the array of AVDateRangeMetadataGroup objects managed by this group. This value may be nil.\n\nSee Also\nInspecting Navigation Metadata\nvar title: String?\nThe title of the marker group.\nvar timedNavigationMarkers: [AVTimedMetadataGroup]?\nThe array of timed navigation markers for which the group provides navigation."
    },
    {
        "title": "AVPlayerViewControlsStyle.none",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrolsstyle/none",
        "html": "See Also\nControls Styles\ncase inline\nThe view displays playback controls in a bar along the view\u2019s bottom edge.\ncase floating\nThe view displays playback controls in a floating window over the video content.\ncase minimal\nThe view presents basic controls to play and pause playback.\nstatic var `default`: AVPlayerViewControlsStyle\nThe view\u2019s default controls style."
    },
    {
        "title": "isPictureInPicturePossible",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/1614691-ispictureinpicturepossible",
        "html": "Discussion\n\nThis property value is false if another app, like FaceTime, is presenting Picture in Picture content.\n\nThis property is key-value observable.\n\nSee Also\nAccessing Picture in Picture State\nclass func isPictureInPictureSupported() -> Bool\nReturns a Boolean value that indicates whether the current device supports Picture in Picture.\nvar isPictureInPictureActive: Bool\nA Boolean value that indicates whether the Picture in Picture window is onscreen.\nvar isPictureInPictureSuspended: Bool\nA Boolean value that indicates whether the system suspends the controller\u2019s Picture in Picture window."
    },
    {
        "title": "init(contentSource:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/3750324-init",
        "html": "Parameters\ncontentSource\n\nThe source of the content to show in a Picture in Picture window.\n\nDiscussion\n\nUse this initializer to create a controller that displays its content in a player layer or a sample buffer display layer.\n\nImportant\n\nBefore attempting to create a controller, verify that the current device supports Picture in Picture by calling the isPictureInPictureSupported() class method. Attempting to create a Picture in Picture controller on an unsupported device returns nil.\n\nSee Also\nCreating a Controller\ninit?(playerLayer: AVPlayerLayer)\nCreates a Picture in Picture controller with a player layer."
    },
    {
        "title": "localizedName",
        "url": "https://developer.apple.com/documentation/avkit/avplaybackspeed/3930104-localizedname",
        "html": "Discussion\n\nUse this value to represent the speed in a user interface where space allows. Use the localizedNumericName where limited space is available.\n\nSee Also\nInspecting Speed Details\nvar rate: Float\nThe playback rate to use when you select this speed.\nvar localizedNumericName: String\nA localized numeric name for a speed that\u2019s suitable for display in a user interface."
    },
    {
        "title": "startPictureInPicture()",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/1614687-startpictureinpicture",
        "html": "Discussion\n\nWhen you call this method and Picture in Picture (PiP) is possible, your delegate receives a call to its pictureInPictureControllerWillStartPictureInPicture(_:) method. After a successful start, your delegate receives a call to the pictureInPictureControllerDidStartPictureInPicture(_:) method.\n\nIf PiP fails, your delegate receives a call to the pictureInPictureController(_:failedToStartPictureInPictureWithError:)method.\n\nWhether you explicitly stop PiP, the user stops it through interaction, or the system stops it, your delegate receives a call to the pictureInPictureControllerWillStopPictureInPicture(_:) method, followed by the pictureInPictureControllerDidStopPictureInPicture(_:) method after the PiP stop animation completes.\n\nSee Also\nControlling Picture in Picture Playback\nvar canStopPictureInPicture: Bool\nA Boolean value that indicates whether Picture in Picture is active and is able to stop.\nvar canStartPictureInPictureAutomaticallyFromInline: Bool\nA Boolean value that indicates whether Picture in Picture starts automatically when the controller embeds its content inline and the app transitions to the background.\nfunc stopPictureInPicture()\nStops Picture in Picture, if active."
    },
    {
        "title": "localizedNumericName",
        "url": "https://developer.apple.com/documentation/avkit/avplaybackspeed/3930105-localizednumericname",
        "html": "Discussion\n\nUse this value to represent the speed in a user interface where limited space is available. Represent the speed using its localizedName value where space allows.\n\nSee Also\nInspecting Speed Details\nvar rate: Float\nThe playback rate to use when you select this speed.\nvar localizedName: String\nA localized name for a speed that\u2019s suitable for display in a user interface."
    },
    {
        "title": "AVKitMetadataIdentifierPlaybackProgress",
        "url": "https://developer.apple.com/documentation/avkit/avkitmetadataidentifierplaybackprogress",
        "html": "See Also\nNondisplayed Metadata\nlet AVKitMetadataIdentifierExternalContentIdentifier: String\nThe identifier for external content published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierExternalUserProfileIdentifier: String\nThe identifier for an external user profile published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierServiceIdentifier: String\nThe service identifier published through the Now Playing Info Center."
    },
    {
        "title": "metadata",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposal/1650962-metadata",
        "html": "Discussion\n\nIn addition to the title and preview image, you can associate any custom metadata you need for the presentation of this content proposal.\n\nSee Also\nConfiguring the Content Proposal\nvar contentTimeForTransition: CMTime\nThe time within the timeline of the current player item when the content proposal presentation should begin.\nvar title: String\nThe title of the proposed content.\nvar previewImage: UIImage?\nThe preview image of the proposed item.\nvar automaticAcceptanceInterval: TimeInterval\nThe interval between the time playback ends and automatic acceptance of this content proposal.\nvar url: URL?\nThe URL of the proposed content."
    },
    {
        "title": "previewImage",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposal/1650959-previewimage",
        "html": "Discussion\n\nThe preview image you provide should typically be a frame from the proposed video, not the poster artwork.\n\nSee Also\nConfiguring the Content Proposal\nvar contentTimeForTransition: CMTime\nThe time within the timeline of the current player item when the content proposal presentation should begin.\nvar title: String\nThe title of the proposed content.\nvar metadata: [AVMetadataItem]\nOptional custom metadata associated with the proposed item.\nvar automaticAcceptanceInterval: TimeInterval\nThe interval between the time playback ends and automatic acceptance of this content proposal.\nvar url: URL?\nThe URL of the proposed content."
    },
    {
        "title": "title",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposal/1650948-title",
        "html": "See Also\nConfiguring the Content Proposal\nvar contentTimeForTransition: CMTime\nThe time within the timeline of the current player item when the content proposal presentation should begin.\nvar previewImage: UIImage?\nThe preview image of the proposed item.\nvar metadata: [AVMetadataItem]\nOptional custom metadata associated with the proposed item.\nvar automaticAcceptanceInterval: TimeInterval\nThe interval between the time playback ends and automatic acceptance of this content proposal.\nvar url: URL?\nThe URL of the proposed content."
    },
    {
        "title": "default",
        "url": "https://developer.apple.com/documentation/avkit/avvideoframeanalysistype/4165301-default",
        "html": "See Also\nAnalysis types\nstatic var text: AVVideoFrameAnalysisType\nA type that finds text in a paused video frame.\nstatic var subject: AVVideoFrameAnalysisType\nA type that finds a subject that a user can copy out of frame.\nstatic var visualSearch: AVVideoFrameAnalysisType\nA type that identifies objects, landmarks, art, and so on.\nstatic var machineReadableCode: AVVideoFrameAnalysisType\nA type that recognizes machine-readable codes, such as QR codes."
    },
    {
        "title": "contentTimeForTransition",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposal/1650952-contenttimefortransition",
        "html": "Discussion\n\nThe time value commonly marks the beginning of the end credits in a television show or movie. For other content, this may be at the very end of the video. The default value, indefinite, indicates that the transition should occur at the very end of the current player item\u2019s end time; this is equivalent to using the duration of the asset.\n\nSee Also\nConfiguring the Content Proposal\nvar title: String\nThe title of the proposed content.\nvar previewImage: UIImage?\nThe preview image of the proposed item.\nvar metadata: [AVMetadataItem]\nOptional custom metadata associated with the proposed item.\nvar automaticAcceptanceInterval: TimeInterval\nThe interval between the time playback ends and automatic acceptance of this content proposal.\nvar url: URL?\nThe URL of the proposed content."
    },
    {
        "title": "init(rawValue:)",
        "url": "https://developer.apple.com/documentation/avkit/avvideoframeanalysistype/4165652-init",
        "html": "Parameters\nrawValue\n\nA raw string value."
    },
    {
        "title": "text",
        "url": "https://developer.apple.com/documentation/avkit/avvideoframeanalysistype/4165305-text",
        "html": "See Also\nAnalysis types\nstatic var `default`: AVVideoFrameAnalysisType\nThe default types of analysis to perform.\nstatic var subject: AVVideoFrameAnalysisType\nA type that finds a subject that a user can copy out of frame.\nstatic var visualSearch: AVVideoFrameAnalysisType\nA type that identifies objects, landmarks, art, and so on.\nstatic var machineReadableCode: AVVideoFrameAnalysisType\nA type that recognizes machine-readable codes, such as QR codes."
    },
    {
        "title": "setSession(_:showVideoPreview:showAudioPreview:)",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureview/1519163-setsession",
        "html": "Parameters\nsession\n\nThe capture session.\n\nshowVideoPreview\n\nA Boolean value that indicates whether the view displays a video preview. If true, the system adds, removes, or modifies capture inputs for video data based on device availability and user selection.\n\nshowAudioPreview\n\nA Boolean value that indicates whether the view shows an audio preview. If true, the system adds, removes, or modifies capture inputs for audio data based on device availability and user selection.\n\nDiscussion\n\nThe view must show audio preview, video preview, or both. Furthermore, the view may modify the capture session, for example, to access media data for preview or when the user select a new capture source.\n\nThe capture view automatically starts and stops the default session. If you set a custom capture session on the view, you need to manually manage the session\u2019s life cycle events.\n\nSee Also\nConfiguring the Capture Session\nvar session: AVCaptureSession?\nThe view\u2019s associated capture session."
    },
    {
        "title": "session",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureview/1519186-session",
        "html": "Discussion\n\nThis property\u2019s default value is a capture session configured for movie file recordings of audio and video data. Use the setSession(_:showVideoPreview:showAudioPreview:) method to provide a custom capture session. Modifying the capture session changes its visual representation in the view.\n\nSee Also\nConfiguring the Capture Session\nfunc setSession(AVCaptureSession?, showVideoPreview: Bool, showAudioPreview: Bool)\nSets the view\u2019s capture session."
    },
    {
        "title": "AVCaptureViewControlsStyle",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureviewcontrolsstyle",
        "html": "Topics\nControls Styles\ncase inline\nThe view\u2019s inline controls style.\ncase floating\nThe view\u2019s floating controls style, which matches the user interface of QuickTime Player.\ncase inlineDeviceSelection\nThe view\u2019s inline device selection style.\nstatic var `default`: AVCaptureViewControlsStyle\nThe view\u2019s default controls style.\nRelationships\nConforms To\nSendable\nSee Also\nCustomizing the View\nvar controlsStyle: AVCaptureViewControlsStyle\nThe style of the capture controls presented by the view.\nvar videoGravity: AVLayerVideoGravity\nA string value that defines how the capture view displays video within its bounds."
    },
    {
        "title": "init(_:userInfo:)",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/3726286-init",
        "html": "Parameters\ncode\n\nThe code.\n\nuserInfo\n\nThe user information."
    },
    {
        "title": "controlsStyle",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureview/1519147-controlsstyle",
        "html": "See Also\nCustomizing the View\nenum AVCaptureViewControlsStyle\nConstants that describe the capture view\u2019s supported controls styles.\nvar videoGravity: AVLayerVideoGravity\nA string value that defines how the capture view displays video within its bounds."
    },
    {
        "title": "videoGravity",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureview/1519134-videogravity",
        "html": "Discussion\n\nSee AVLayerVideoGravity for supported values. The default value is resizeAspect.\n\nSee Also\nCustomizing the View\nvar controlsStyle: AVCaptureViewControlsStyle\nThe style of the capture controls presented by the view.\nenum AVCaptureViewControlsStyle\nConstants that describe the capture view\u2019s supported controls styles."
    },
    {
        "title": "delegate",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureview/1519144-delegate",
        "html": "Discussion\n\nThe capture view disables the start recording button if you don\u2019t provide a delegate object.\n\nSee Also\nConfiguring the Delegate\nprotocol AVCaptureViewDelegate\nThe protocol that defines the methods you can implement to respond to capture view events."
    },
    {
        "title": "AVContentProposalAction.defer",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalaction/defer",
        "html": "See Also\nActions\ncase accept\nThe user accepted the content proposal.\ncase reject\nThe user rejected the content proposal."
    },
    {
        "title": "AVCaptureViewDelegate",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureviewdelegate",
        "html": "Topics\nStarting a New Recording\nfunc captureView(AVCaptureView, startRecordingTo: AVCaptureFileOutput)\nTells the delegate that the user has made a request to start a new recording.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nConfiguring the Delegate\nvar delegate: AVCaptureViewDelegate?\nThe capture view\u2019s delegate object."
    },
    {
        "title": "hash(into:)",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/3726284-hash",
        "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nSee Also\nAccessing Hash Values\nvar hashValue: Int\nThe hash value."
    },
    {
        "title": "hashValue",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/3726285-hashvalue",
        "html": "See Also\nAccessing Hash Values\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/2947145",
        "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the values are not equal, otherwise false.\n\nSee Also\nComparing Errors\nstatic func == (AVKitError, AVKitError) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
    },
    {
        "title": "init(activeVideoCallSourceView:contentViewController:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/contentsource/3778534-init",
        "html": "Parameters\nsourceView\n\nA view that contains the content of the video call.\n\ncontentViewController\n\nThe view controller to appear in the system\u2019s Picture in Picture window.\n\nDiscussion\n\nThe instance is only valid for the duration of the call.\n\nImportant\n\nThe use of this API requires an entitlement. For information about requesting access, see com.apple.developer.avfoundation.multitasking-camera-access.\n\nSee Also\nCreating a Content Source\ninit(playerLayer: AVPlayerLayer)\nCreates a content source with a player layer.\ninit(sampleBufferDisplayLayer: AVSampleBufferDisplayLayer, playbackDelegate: AVPictureInPictureSampleBufferPlaybackDelegate)\nCreates a content source with a sample buffer display layer."
    },
    {
        "title": "playerViewWillExitFullScreen(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewdelegate/3752990-playerviewwillexitfullscreen",
        "html": "Parameters\nplayerView\n\nThe player view.\n\nSee Also\nResponding to Full Screen Events\nfunc playerViewWillEnterFullScreen(AVPlayerView)\nTells the delegate that the player view is about to enter full-screen mode.\nfunc playerViewDidEnterFullScreen(AVPlayerView)\nTells the delegate that the player view entered full-screen mode.\nfunc playerViewDidExitFullScreen(AVPlayerView)\nTells the delegate that the player view exited full-screen mode.\nfunc playerView(AVPlayerView, restoreUserInterfaceForFullScreenExitWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the app\u2019s user interface when exiting full-screen mode."
    },
    {
        "title": "playerView(_:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewpictureinpicturedelegate/3172692-playerview",
        "html": "Parameters\nplayerView\n\nThe player view.\n\ncompletionHandler\n\nThe completion handler to call after you\u2019ve restored the user interface.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func playerViewRestoreUserInterfaceForPictureInPictureStop(_ playerView: AVPlayerView) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nResponding to Picture in Picture Playback Events\nfunc playerViewWillStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to start.\nfunc playerViewDidStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback started.\nfunc playerViewWillStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to stop.\nfunc playerViewDidStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback stopped.\nfunc playerView(AVPlayerView, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture playback failed to start.\nfunc playerViewShouldAutomaticallyDismissAtPicture(inPictureStart: AVPlayerView) -> Bool\nAsks the delegate if the player view should miniaturize when Picture in Picture starts."
    },
    {
        "title": "playerViewDidEnterFullScreen(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewdelegate/3752987-playerviewdidenterfullscreen",
        "html": "Parameters\nplayerView\n\nThe player view.\n\nSee Also\nResponding to Full Screen Events\nfunc playerViewWillEnterFullScreen(AVPlayerView)\nTells the delegate that the player view is about to enter full-screen mode.\nfunc playerViewWillExitFullScreen(AVPlayerView)\nTells the delegate that the player view is about to exit full-screen mode.\nfunc playerViewDidExitFullScreen(AVPlayerView)\nTells the delegate that the player view exited full-screen mode.\nfunc playerView(AVPlayerView, restoreUserInterfaceForFullScreenExitWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the app\u2019s user interface when exiting full-screen mode."
    },
    {
        "title": "playerView(_:restoreUserInterfaceForFullScreenExitWithCompletionHandler:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewdelegate/3752986-playerview",
        "html": "Parameters\nplayerView\n\nThe player view.\n\ncompletionHandler\n\nYou must call the completion handler with a value of true to allow the system to finish restoring your app\u2019s user interface.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func playerViewRestoreUserInterfaceForFullScreenExit(_ playerView: AVPlayerView) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nResponding to Full Screen Events\nfunc playerViewWillEnterFullScreen(AVPlayerView)\nTells the delegate that the player view is about to enter full-screen mode.\nfunc playerViewDidEnterFullScreen(AVPlayerView)\nTells the delegate that the player view entered full-screen mode.\nfunc playerViewWillExitFullScreen(AVPlayerView)\nTells the delegate that the player view is about to exit full-screen mode.\nfunc playerViewDidExitFullScreen(AVPlayerView)\nTells the delegate that the player view exited full-screen mode."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/3726282",
        "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nReturn Value\n\ntrue if the values are equal, otherwise false.\n\nSee Also\nComparing Errors\nstatic func != (AVKitError, AVKitError) -> Bool\nReturns a Boolean value that indicates whether two values are not equal."
    },
    {
        "title": "playerViewWillStopPicture(inPicture:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewpictureinpicturedelegate/3172697-playerviewwillstoppicture",
        "html": "Parameters\nplayerView\n\nThe player view.\n\nSee Also\nResponding to Picture in Picture Playback Events\nfunc playerViewWillStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to start.\nfunc playerViewDidStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback started.\nfunc playerViewDidStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback stopped.\nfunc playerView(AVPlayerView, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture playback failed to start.\nfunc playerView(AVPlayerView, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the user interface before Picture in Picture playback stops.\nfunc playerViewShouldAutomaticallyDismissAtPicture(inPictureStart: AVPlayerView) -> Bool\nAsks the delegate if the player view should miniaturize when Picture in Picture starts."
    },
    {
        "title": "playerViewWillEnterFullScreen(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewdelegate/3752989-playerviewwillenterfullscreen",
        "html": "Parameters\nplayerView\n\nThe player view.\n\nSee Also\nResponding to Full Screen Events\nfunc playerViewDidEnterFullScreen(AVPlayerView)\nTells the delegate that the player view entered full-screen mode.\nfunc playerViewWillExitFullScreen(AVPlayerView)\nTells the delegate that the player view is about to exit full-screen mode.\nfunc playerViewDidExitFullScreen(AVPlayerView)\nTells the delegate that the player view exited full-screen mode.\nfunc playerView(AVPlayerView, restoreUserInterfaceForFullScreenExitWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the app\u2019s user interface when exiting full-screen mode."
    },
    {
        "title": "playerViewDidStopPicture(inPicture:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewpictureinpicturedelegate/3172694-playerviewdidstoppicture",
        "html": "Parameters\nplayerView\n\nThe player view.\n\nSee Also\nResponding to Picture in Picture Playback Events\nfunc playerViewWillStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to start.\nfunc playerViewDidStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback started.\nfunc playerViewWillStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to stop.\nfunc playerView(AVPlayerView, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture playback failed to start.\nfunc playerView(AVPlayerView, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the user interface before Picture in Picture playback stops.\nfunc playerViewShouldAutomaticallyDismissAtPicture(inPictureStart: AVPlayerView) -> Bool\nAsks the delegate if the player view should miniaturize when Picture in Picture starts."
    },
    {
        "title": "playerViewShouldAutomaticallyDismissAtPicture(inPictureStart:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewpictureinpicturedelegate/3172695-playerviewshouldautomaticallydis",
        "html": "Parameters\nplayerView\n\nThe player view.\n\nReturn Value\n\ntrue if the player view should automatically be miniaturized; otherwise false.\n\nSee Also\nResponding to Picture in Picture Playback Events\nfunc playerViewWillStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to start.\nfunc playerViewDidStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback started.\nfunc playerViewWillStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to stop.\nfunc playerViewDidStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback stopped.\nfunc playerView(AVPlayerView, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture playback failed to start.\nfunc playerView(AVPlayerView, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the user interface before Picture in Picture playback stops."
    },
    {
        "title": "sampleBufferPlaybackDelegate",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/contentsource/3750331-samplebufferplaybackdelegate",
        "html": "See Also\nConfiguring the Delegate\nprotocol AVPictureInPictureSampleBufferPlaybackDelegate\nA protocol for controlling playback from a sample buffer display layer in Picture in Picture."
    },
    {
        "title": "playerViewWillStartPicture(inPicture:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewpictureinpicturedelegate/3172696-playerviewwillstartpicture",
        "html": "Parameters\nplayerView\n\nThe player view.\n\nSee Also\nResponding to Picture in Picture Playback Events\nfunc playerViewDidStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback started.\nfunc playerViewWillStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to stop.\nfunc playerViewDidStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback stopped.\nfunc playerView(AVPlayerView, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture playback failed to start.\nfunc playerView(AVPlayerView, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the user interface before Picture in Picture playback stops.\nfunc playerViewShouldAutomaticallyDismissAtPicture(inPictureStart: AVPlayerView) -> Bool\nAsks the delegate if the player view should miniaturize when Picture in Picture starts."
    },
    {
        "title": "playerViewDidStartPicture(inPicture:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewpictureinpicturedelegate/3172693-playerviewdidstartpicture",
        "html": "Parameters\nplayerView\n\nThe player view.\n\nSee Also\nResponding to Picture in Picture Playback Events\nfunc playerViewWillStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to start.\nfunc playerViewWillStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to stop.\nfunc playerViewDidStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback stopped.\nfunc playerView(AVPlayerView, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture playback failed to start.\nfunc playerView(AVPlayerView, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the user interface before Picture in Picture playback stops.\nfunc playerViewShouldAutomaticallyDismissAtPicture(inPictureStart: AVPlayerView) -> Bool\nAsks the delegate if the player view should miniaturize when Picture in Picture starts."
    },
    {
        "title": "pictureInPictureController(_:failedToStartPictureInPictureWithError:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontrollerdelegate/1614697-pictureinpicturecontroller",
        "html": "Parameters\npictureInPictureController\n\nThe delegating controller.\n\nerror\n\nAn error that describes the details of the failure.\n\nSee Also\nResponding to Picture in Picture Lifecycle Events\nfunc pictureInPictureControllerWillStartPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture is about to start.\nfunc pictureInPictureControllerDidStartPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture started.\nfunc pictureInPictureControllerWillStopPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture is about to stop.\nfunc pictureInPictureControllerDidStopPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture stopped."
    },
    {
        "title": "AVPlayerViewTrimResult.okButton",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewtrimresult/okbutton",
        "html": "See Also\nTrim Results\ncase cancelButton\nThe user clicked the Cancel button."
    },
    {
        "title": "AVPlayerViewTrimResult.cancelButton",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewtrimresult/cancelbutton",
        "html": "See Also\nTrim Results\ncase okButton\nThe user clicked the Trim button."
    },
    {
        "title": "init(title:timedNavigationMarkers:)",
        "url": "https://developer.apple.com/documentation/avkit/avnavigationmarkersgroup/1627563-init",
        "html": "Parameters\ntitle\n\nThe title to present for the markers group.\n\nnavigationMarkers\n\nThe array of timed navigation markers for which the group provides navigation.\n\nReturn Value\n\nA new navigation markers group.\n\nDiscussion\n\nTo associate marker groups with an asset for playback, use the navigationMarkerGroups property of an AVPlayerItem object.\n\nTo create a chapter list, pass nil for the title parameter and set the group as the first item in the player item\u2019s navigationMarkerGroups array. To provide additional options for navigating media (such as a \u201cGoals Scored\u201d group for a recorded sporting event), provide a unique title value for each marker group in the array.\n\nSee Also\nCreating a Navigation Marker Group\ninit(title: String?, dateRangeNavigationMarkers: [AVDateRangeMetadataGroup])\nInitializes a navigation markers group with the specified title and array of date range navigation markers."
    },
    {
        "title": "setMagnification(_:centeredAt:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/3943284-setmagnification",
        "html": "Parameters\nmagnification\n\nA factor by which to scale the video\u2019s view.\n\npoint\n\nA point in view space on which to center magnification.\n\nDiscussion\n\nThe supported magnification range is 1.0 to 64.0. The system zooms using nearest neighbor interpolation after it scales the content past a certain factor.\n\nSee Also\nMagnifying Video\nvar allowsMagnification: Bool\nA Boolean value that indicates whether the magnify gesture changes the video\u2019s view magnification.\nvar magnification: CGFloat\nThe factor by which the video\u2019s view is currently scaled."
    },
    {
        "title": "preferredDisplayCriteria",
        "url": "https://developer.apple.com/documentation/avkit/avdisplaymanager/2935637-preferreddisplaycriteria",
        "html": "Discussion\n\nThe display manager uses the preferred display criteria only when user settings allow. Set this property to nil to allow the system to guide you to a display mode that\u2019s suitable for a wide range of video and nonvideo content.\n\nSee Also\nMatching a Video's Native Display Mode\nvar isDisplayCriteriaMatchingEnabled: Bool\nA Boolean value that indicates whether the user has enabled display critera matching.\nvar isDisplayModeSwitchInProgress: Bool\nA Boolean value that indicates whether a display mode switch is in progress."
    },
    {
        "title": "flashChapterNumber(_:chapterTitle:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416547-flashchapternumber",
        "html": "Parameters\nchapterNumber\n\nThe chapter number.\n\nchapterTitle\n\nThe chapter title. This value is optional and can be nil."
    },
    {
        "title": "localizedDescription",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/2887609-localizeddescription",
        "html": "See Also\nInspecting an Error\nstatic var errorDomain: String\nThe domain of this error.\nvar code: Code\nThe error code.\nenum AVKitError.Code\nConstants that identify framework error codes.\nError Constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information dictionary.\nvar errorUserInfo: [String : Any]\nThe error user information dictionary."
    },
    {
        "title": "errorUserInfo",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/2887606-erroruserinfo",
        "html": "See Also\nInspecting an Error\nstatic var errorDomain: String\nThe domain of this error.\nvar code: Code\nThe error code.\nenum AVKitError.Code\nConstants that identify framework error codes.\nError Constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information dictionary.\nvar localizedDescription: String\nA string that provides a localized description of the error."
    },
    {
        "title": "userInfo",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/3726287-userinfo",
        "html": "See Also\nInspecting an Error\nstatic var errorDomain: String\nThe domain of this error.\nvar code: Code\nThe error code.\nenum AVKitError.Code\nConstants that identify framework error codes.\nError Constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar errorUserInfo: [String : Any]\nThe error user information dictionary.\nvar localizedDescription: String\nA string that provides a localized description of the error."
    },
    {
        "title": "errorCode",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/2887608-errorcode",
        "html": "See Also\nInspecting an Error\nstatic var errorDomain: String\nThe domain of this error.\nvar code: Code\nThe error code.\nenum AVKitError.Code\nConstants that identify framework error codes.\nError Constants\nError code constants for framework operations.\nvar userInfo: [String : Any]\nThe user information dictionary.\nvar errorUserInfo: [String : Any]\nThe error user information dictionary.\nvar localizedDescription: String\nA string that provides a localized description of the error."
    },
    {
        "title": "AVKitError.Code",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/code",
        "html": "Topics\nError Codes\ncase unknown\nAn unknown error.\ncase contentRatingUnknown\nThe media content rating is missing or unrecognized.\ncase contentDisallowedByPasscode\nA restriction disallows access to this content, but the user can override the restriction by entering the device passcode.\ncase pictureInPictureStartFailed\nThe system failed to start Picture in Picture.\ncase contentDisallowedByProfile\nAn installed profile restricts access to this content.\nRelationships\nConforms To\nSendable\nSee Also\nInspecting an Error\nstatic var errorDomain: String\nThe domain of this error.\nvar code: Code\nThe error code.\nError Constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information dictionary.\nvar errorUserInfo: [String : Any]\nThe error user information dictionary.\nvar localizedDescription: String\nA string that provides a localized description of the error."
    },
    {
        "title": "Error Constants",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/error_constants",
        "html": "Topics\nError Code Constants\nError code constants for framework operations.\nstatic var unknown: AVKitError.Code\nAn unknown error.\nstatic var contentRatingUnknown: AVKitError.Code\nThe media content rating is missing or unrecognized.\nstatic var contentDisallowedByPasscode: AVKitError.Code\nA restriction disallows access to this content, but the user can override the restriction by entering the device passcode.\nstatic var contentDisallowedByProfile: AVKitError.Code\nAn installed profile restricts access to this content.\nstatic var pictureInPictureStartFailed: AVKitError.Code\nThe system failed to start Picture in Picture.\nSee Also\nInspecting an Error\nstatic var errorDomain: String\nThe domain of this error.\nvar code: Code\nThe error code.\nenum AVKitError.Code\nConstants that identify framework error codes.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information dictionary.\nvar errorUserInfo: [String : Any]\nThe error user information dictionary.\nvar localizedDescription: String\nA string that provides a localized description of the error."
    },
    {
        "title": "code",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/3726283-code",
        "html": "See Also\nInspecting an Error\nstatic var errorDomain: String\nThe domain of this error.\nenum AVKitError.Code\nConstants that identify framework error codes.\nError Constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information dictionary.\nvar errorUserInfo: [String : Any]\nThe error user information dictionary.\nvar localizedDescription: String\nA string that provides a localized description of the error."
    },
    {
        "title": "pictureInPictureButtonStartImage(compatibleWith:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/1614699-pictureinpicturebuttonstartimage",
        "html": "Parameters\ntraitCollection\n\nA trait collection that describes the image to retrieve. Pass nil to use traits that describe the main screen.\n\nReturn Value\n\nA system-default template image.\n\nSee Also\nRetrieving Picture in Picture Template Images\nclass var pictureInPictureButtonStartImage: UIImage\nA system-default template image for the button that starts Picture in Picture in your app.\nclass var pictureInPictureButtonStopImage: UIImage\nA system-default template image for the button that stops Picture in Picture in your app.\nclass func pictureInPictureButtonStopImage(compatibleWith: UITraitCollection?) -> UIImage\nReturns a system-default template image that\u2019s compatible with a trait collection for the button that stops Picture in Picture in your app."
    },
    {
        "title": "pictureInPictureButtonStopImage(compatibleWith:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/1614713-pictureinpicturebuttonstopimage",
        "html": "Parameters\ntraitCollection\n\nThe trait collection that describes the image to retrieve. Pass nil to use traits that describe the main screen.\n\nReturn Value\n\nA system-default template image.\n\nSee Also\nRetrieving Picture in Picture Template Images\nclass var pictureInPictureButtonStartImage: UIImage\nA system-default template image for the button that starts Picture in Picture in your app.\nclass var pictureInPictureButtonStopImage: UIImage\nA system-default template image for the button that stops Picture in Picture in your app.\nclass func pictureInPictureButtonStartImage(compatibleWith: UITraitCollection?) -> UIImage\nReturns a system-default template image that\u2019s compatible with a trait collection for the button that starts Picture in Picture in your app."
    },
    {
        "title": "isPictureInPictureSuspended",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/1614689-ispictureinpicturesuspended",
        "html": "Discussion\n\nThe system suspends your app\u2019s Picture in Picture session when another app, typically FaceTime, is using the feature. In this state, your video playback is active but paused and offscreen. Picture in Picture resumes automatically when the other app finishes using PiP.\n\nSee Also\nAccessing Picture in Picture State\nclass func isPictureInPictureSupported() -> Bool\nReturns a Boolean value that indicates whether the current device supports Picture in Picture.\nvar isPictureInPicturePossible: Bool\nA Boolean value that indicates whether Picture in Picture playback is currently possible.\nvar isPictureInPictureActive: Bool\nA Boolean value that indicates whether the Picture in Picture window is onscreen."
    },
    {
        "title": "errorDomain",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror/2887607-errordomain",
        "html": "See Also\nInspecting an Error\nvar code: Code\nThe error code.\nenum AVKitError.Code\nConstants that identify framework error codes.\nError Constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information dictionary.\nvar errorUserInfo: [String : Any]\nThe error user information dictionary.\nvar localizedDescription: String\nA string that provides a localized description of the error."
    },
    {
        "title": "AVKitMetadataIdentifierExternalUserProfileIdentifier",
        "url": "https://developer.apple.com/documentation/avkit/avkitmetadataidentifierexternaluserprofileidentifier",
        "html": "See Also\nNondisplayed Metadata\nlet AVKitMetadataIdentifierPlaybackProgress: String\nThe playback progress published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierExternalContentIdentifier: String\nThe identifier for external content published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierServiceIdentifier: String\nThe service identifier published through the Now Playing Info Center."
    },
    {
        "title": "init(playerLayer:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/1614707-init",
        "html": "Parameters\nplayerLayer\n\nThe player layer from which to source the media content for the Picture in Picture controller.\n\nDiscussion\n\nFor Picture in Picture to work correctly, maintain a strong reference to this object whether your app is running in the foreground or background.\n\nImportant\n\nBefore attempting to create a controller instance, verify that the current device supports Picture in Picture by calling the isPictureInPictureSupported() class method. Attempting to create a Picture in Picture controller on an unsupported device returns nil.\n\nSee Also\nCreating a Controller\ninit(contentSource: AVPictureInPictureController.ContentSource)\nCreates a Picture in Picture controller with a content source."
    },
    {
        "title": "AVKitMetadataIdentifierServiceIdentifier",
        "url": "https://developer.apple.com/documentation/avkit/avkitmetadataidentifierserviceidentifier",
        "html": "See Also\nNondisplayed Metadata\nlet AVKitMetadataIdentifierPlaybackProgress: String\nThe playback progress published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierExternalContentIdentifier: String\nThe identifier for external content published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierExternalUserProfileIdentifier: String\nThe identifier for an external user profile published through the Now Playing Info Center."
    },
    {
        "title": "AVKitMetadataIdentifierExternalContentIdentifier",
        "url": "https://developer.apple.com/documentation/avkit/avkitmetadataidentifierexternalcontentidentifier",
        "html": "See Also\nNondisplayed Metadata\nlet AVKitMetadataIdentifierPlaybackProgress: String\nThe playback progress published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierExternalUserProfileIdentifier: String\nThe identifier for an external user profile published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierServiceIdentifier: String\nThe service identifier published through the Now Playing Info Center."
    },
    {
        "title": "AVRoutePickerView.ButtonState",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/buttonstate",
        "html": "Topics\nButton States\ncase normal\nThe normal, or default, button state.\ncase normalHighlighted\nThe highlighted button state when a mouse-down event occurs inside the button.\ncase active\nThe button state when AirPlay is active.\ncase activeHighlighted\nThe highlighted button state when AirPlay is active.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the route picker view\nvar activeTintColor: UIColor!\nThe view\u2019s tint color when AirPlay is active.\nvar isRoutePickerButtonBordered: Bool\nA Boolean value that indicates whether the route picker button has a border.\nvar prioritizesVideoDevices: Bool\nA Boolean value that indicates whether the route picker sorts video output devices to the top of the list.\nvar routePickerButtonStyle: AVRoutePickerViewButtonStyle\nThe button style for the route picker.\nenum AVRoutePickerViewButtonStyle\nConstants that define the button styles a route picker view supports.\nfunc routePickerButtonColor(for: AVRoutePickerView.ButtonState) -> NSColor\nReturns the color of the picker button for the specified state.\nfunc setRoutePickerButtonColor(NSColor?, for: AVRoutePickerView.ButtonState)\nSets the route picker button color for the specified state."
    },
    {
        "title": "routePickerButtonStyle",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/2915911-routepickerbuttonstyle",
        "html": "See Also\nConfiguring the route picker view\nvar activeTintColor: UIColor!\nThe view\u2019s tint color when AirPlay is active.\nvar isRoutePickerButtonBordered: Bool\nA Boolean value that indicates whether the route picker button has a border.\nvar prioritizesVideoDevices: Bool\nA Boolean value that indicates whether the route picker sorts video output devices to the top of the list.\nenum AVRoutePickerViewButtonStyle\nConstants that define the button styles a route picker view supports.\nfunc routePickerButtonColor(for: AVRoutePickerView.ButtonState) -> NSColor\nReturns the color of the picker button for the specified state.\nfunc setRoutePickerButtonColor(NSColor?, for: AVRoutePickerView.ButtonState)\nSets the route picker button color for the specified state.\nenum AVRoutePickerView.ButtonState\nConstants that describe the available button states."
    },
    {
        "title": "AVKitMetadataIdentifierApproximateStartDate",
        "url": "https://developer.apple.com/documentation/avkit/avkitmetadataidentifierapproximatestartdate",
        "html": "See Also\nDisplayed Metadata\nlet AVKitMetadataIdentifierExactStartDate: String\nThe exact start date for a live event stream.\nlet AVKitMetadataIdentifierExactEndDate: String\nThe exact end date for a live event stream.\nlet AVKitMetadataIdentifierApproximateEndDate: String\nThe approximate end date for a live event stream."
    },
    {
        "title": "AVKitMetadataIdentifierApproximateEndDate",
        "url": "https://developer.apple.com/documentation/avkit/avkitmetadataidentifierapproximateenddate",
        "html": "See Also\nDisplayed Metadata\nlet AVKitMetadataIdentifierExactStartDate: String\nThe exact start date for a live event stream.\nlet AVKitMetadataIdentifierExactEndDate: String\nThe exact end date for a live event stream.\nlet AVKitMetadataIdentifierApproximateStartDate: String\nThe approximate start date for a live event stream."
    },
    {
        "title": "AVKitMetadataIdentifierExactEndDate",
        "url": "https://developer.apple.com/documentation/avkit/avkitmetadataidentifierexactenddate",
        "html": "See Also\nDisplayed Metadata\nlet AVKitMetadataIdentifierExactStartDate: String\nThe exact start date for a live event stream.\nlet AVKitMetadataIdentifierApproximateStartDate: String\nThe approximate start date for a live event stream.\nlet AVKitMetadataIdentifierApproximateEndDate: String\nThe approximate end date for a live event stream."
    },
    {
        "title": "AVKitMetadataIdentifierExactStartDate",
        "url": "https://developer.apple.com/documentation/avkit/avkitmetadataidentifierexactstartdate",
        "html": "See Also\nDisplayed Metadata\nlet AVKitMetadataIdentifierExactEndDate: String\nThe exact end date for a live event stream.\nlet AVKitMetadataIdentifierApproximateStartDate: String\nThe approximate start date for a live event stream.\nlet AVKitMetadataIdentifierApproximateEndDate: String\nThe approximate end date for a live event stream."
    },
    {
        "title": "activeTintColor",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/2915882-activetintcolor",
        "html": "See Also\nConfiguring the route picker view\nvar isRoutePickerButtonBordered: Bool\nA Boolean value that indicates whether the route picker button has a border.\nvar prioritizesVideoDevices: Bool\nA Boolean value that indicates whether the route picker sorts video output devices to the top of the list.\nvar routePickerButtonStyle: AVRoutePickerViewButtonStyle\nThe button style for the route picker.\nenum AVRoutePickerViewButtonStyle\nConstants that define the button styles a route picker view supports.\nfunc routePickerButtonColor(for: AVRoutePickerView.ButtonState) -> NSColor\nReturns the color of the picker button for the specified state.\nfunc setRoutePickerButtonColor(NSColor?, for: AVRoutePickerView.ButtonState)\nSets the route picker button color for the specified state.\nenum AVRoutePickerView.ButtonState\nConstants that describe the available button states."
    },
    {
        "title": "delegate",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/2915799-delegate",
        "html": "See Also\nConfiguring the delegate\nprotocol AVRoutePickerViewDelegate\nA protocol that defines the methods to adopt to respond to route picker view presentation events."
    },
    {
        "title": "AVRoutePickerViewDelegate",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerviewdelegate",
        "html": "Topics\nPresenting Routes\nfunc routePickerViewWillBeginPresentingRoutes(AVRoutePickerView)\nTells the delegate that the route picker view is about to begin presenting routes to the user.\nfunc routePickerViewDidEndPresentingRoutes(AVRoutePickerView)\nTells the delegate when the route picker view finishes presenting routes to the user.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nConfiguring the delegate\nvar delegate: AVRoutePickerViewDelegate?\nThe delegate object for the route picker."
    },
    {
        "title": "playerViewController(_:skipToPreviousChannel:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/3295983-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\ncompletion\n\nA completion callback to invoke to dismiss the channel\u2019s interstitial view.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func playerViewControllerSkipToPreviousChannel(_ playerViewController: AVPlayerViewController) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nEach call to this method should advance one channel, relative to the previous request, even if the prior request hasn\u2019t yet completed. Adopt this method and replace the current player item with one that reflects the previous channel\u2019s content, and call the completion block to dismiss the channel\u2019s interstitial view.\n\nImportant\n\nOnly live video streams support channel skipping. This feature isn\u2019t supported for VOD streams or local media.\n\nSee Also\nResponding to Channel Changes\nfunc playerViewController(AVPlayerViewController, skipToNextChannel: (Bool) -> Void)\nTells the delegate when the user wants to skip to the next channel.\nfunc nextChannelInterstitialViewController(for: AVPlayerViewController) -> UIViewController\nAsks the delegate for a view controller that describes the layout of the next channel\u2019s interstitial view.\nfunc previousChannelInterstitialViewController(for: AVPlayerViewController) -> UIViewController\nAsks the delegate for a view controller that describes the layout of the previous channel\u2019s interstitial view."
    },
    {
        "title": "playerViewController(_:willTransitionToVisibilityOfTransportBar:with:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/2876484-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nvisible\n\nThe transport bar\u2019s new visibility.\n\ncoordinator\n\nThe animation coordinator to use to synchronize animations with the transport bar visibility.\n\nSee Also\nResponding to Transport Bar Changes\nprotocol AVPlayerViewControllerAnimationCoordinator\nA protocol that defines the methods to implement to synchronize animations with playback controls' visibility animation."
    },
    {
        "title": "canStartPictureInPictureAutomaticallyFromInline",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/3689454-canstartpictureinpictureautomati",
        "html": "Discussion\n\nOnly set this value to true for content that you intend to be the user\u2019s primary focus.\n\nSee Also\nControlling Picture in Picture Playback\nvar canStopPictureInPicture: Bool\nA Boolean value that indicates whether Picture in Picture is active and is able to stop.\nfunc startPictureInPicture()\nStarts Picture in Picture, if possible.\nfunc stopPictureInPicture()\nStops Picture in Picture, if active."
    },
    {
        "title": "playerViewController(_:shouldPresent:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/2181734-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nproposal\n\nThe content proposal to present.\n\nReturn Value\n\ntrue if the player view controller should propose the content; otherwise false.\n\nSee Also\nResponding to Content Proposals\nfunc playerViewController(AVPlayerViewController, didAccept: AVContentProposal)\nTells the delegate when the user accepts the proposed content.\nfunc playerViewController(AVPlayerViewController, didReject: AVContentProposal)\nTells the delegate when the user rejects the proposed content."
    },
    {
        "title": "url",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposal/1650972-url",
        "html": "Discussion\n\nUse this property value to initialize a new AVPlayerItem to play when the user accepts the content proposal. If the value of this property is nil, the AVPlayerViewControllerDelegate must handle the content proposal acceptance.\n\nSee Also\nConfiguring the Content Proposal\nvar contentTimeForTransition: CMTime\nThe time within the timeline of the current player item when the content proposal presentation should begin.\nvar title: String\nThe title of the proposed content.\nvar previewImage: UIImage?\nThe preview image of the proposed item.\nvar metadata: [AVMetadataItem]\nOptional custom metadata associated with the proposed item.\nvar automaticAcceptanceInterval: TimeInterval\nThe interval between the time playback ends and automatic acceptance of this content proposal."
    },
    {
        "title": "automaticAcceptanceInterval",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposal/1650963-automaticacceptanceinterval",
        "html": "Discussion\n\nThe content proposal displays a countdown timer to reflect this value. Set this value to nan to disable the default, which is automatic acceptance.\n\nSee Also\nConfiguring the Content Proposal\nvar contentTimeForTransition: CMTime\nThe time within the timeline of the current player item when the content proposal presentation should begin.\nvar title: String\nThe title of the proposed content.\nvar previewImage: UIImage?\nThe preview image of the proposed item.\nvar metadata: [AVMetadataItem]\nOptional custom metadata associated with the proposed item.\nvar url: URL?\nThe URL of the proposed content."
    },
    {
        "title": "subject",
        "url": "https://developer.apple.com/documentation/avkit/avvideoframeanalysistype/4165304-subject",
        "html": "See Also\nAnalysis types\nstatic var `default`: AVVideoFrameAnalysisType\nThe default types of analysis to perform.\nstatic var text: AVVideoFrameAnalysisType\nA type that finds text in a paused video frame.\nstatic var visualSearch: AVVideoFrameAnalysisType\nA type that identifies objects, landmarks, art, and so on.\nstatic var machineReadableCode: AVVideoFrameAnalysisType\nA type that recognizes machine-readable codes, such as QR codes."
    },
    {
        "title": "playerView(_:failedToStartPictureInPictureWithError:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewpictureinpicturedelegate/3172691-playerview",
        "html": "Parameters\nplayerView\n\nThe player view.\n\nerror\n\nAn error object describing the failure.\n\nSee Also\nResponding to Picture in Picture Playback Events\nfunc playerViewWillStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to start.\nfunc playerViewDidStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback started.\nfunc playerViewWillStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to stop.\nfunc playerViewDidStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback stopped.\nfunc playerView(AVPlayerView, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the user interface before Picture in Picture playback stops.\nfunc playerViewShouldAutomaticallyDismissAtPicture(inPictureStart: AVPlayerView) -> Bool\nAsks the delegate if the player view should miniaturize when Picture in Picture starts."
    },
    {
        "title": "visualSearch",
        "url": "https://developer.apple.com/documentation/avkit/avvideoframeanalysistype/4165306-visualsearch",
        "html": "See Also\nAnalysis types\nstatic var `default`: AVVideoFrameAnalysisType\nThe default types of analysis to perform.\nstatic var text: AVVideoFrameAnalysisType\nA type that finds text in a paused video frame.\nstatic var subject: AVVideoFrameAnalysisType\nA type that finds a subject that a user can copy out of frame.\nstatic var machineReadableCode: AVVideoFrameAnalysisType\nA type that recognizes machine-readable codes, such as QR codes."
    },
    {
        "title": "addCoordinatedAnimations(_:completion:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrolleranimationcoordinator/2876486-addcoordinatedanimations",
        "html": "Required\n\nParameters\nanimations\n\nThe animations to execute.\n\ncompletion\n\nA closure to execute after the main animation completes. The system runs the specified animations in the same animation context as the main animation.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc addCoordinatedAnimations(_ animations: (() -> Void)?) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously."
    },
    {
        "title": "machineReadableCode",
        "url": "https://developer.apple.com/documentation/avkit/avvideoframeanalysistype/4165302-machinereadablecode",
        "html": "See Also\nAnalysis types\nstatic var `default`: AVVideoFrameAnalysisType\nThe default types of analysis to perform.\nstatic var text: AVVideoFrameAnalysisType\nA type that finds text in a paused video frame.\nstatic var subject: AVVideoFrameAnalysisType\nA type that finds a subject that a user can copy out of frame.\nstatic var visualSearch: AVVideoFrameAnalysisType\nA type that identifies objects, landmarks, art, and so on."
    },
    {
        "title": "AVContentProposalAction.reject",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalaction/reject",
        "html": "See Also\nActions\ncase accept\nThe user accepted the content proposal.\ncase `defer`\nThe user deferred the content proposal."
    },
    {
        "title": "AVContentProposalAction.accept",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalaction/accept",
        "html": "See Also\nActions\ncase reject\nThe user rejected the content proposal.\ncase `defer`\nThe user deferred the content proposal."
    },
    {
        "title": "showsFullScreenToggleButton",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416561-showsfullscreentogglebutton",
        "html": "Discussion\n\nThis property is currently supported only with a controlsStyle of AVPlayerViewControlsStyle.floating or AVPlayerViewControlsStyle.inline.\n\nThe default value is false.\n\nSee Also\nCustomizing the User Interface\nvar controlsStyle: AVPlayerViewControlsStyle\nThe player view\u2019s controls style.\nenum AVPlayerViewControlsStyle\nConstants that indicate which user interface controls the view displays.\nvar showsFrameSteppingButtons: Bool\nA Boolean value that determines whether the player view displays frame stepping buttons.\nvar showsSharingServiceButton: Bool\nA Boolean value that determines whether the player view displays a sharing service button.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar contentOverlayView: NSView?\nA view that adds additional custom views between the video content and the controls.\nvar actionPopUpButtonMenu: NSMenu?\nAn action pop-up button menu that the player view displays.\nvar updatesNowPlayingInfoCenter: Bool\nA Boolean value that indicates whether the player view controller updates the Now Playing info center."
    },
    {
        "title": "beginTrimming(completionHandler:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416570-begintrimming",
        "html": "Parameters\nhandler\n\nThe callback the system invokes when the user selects the Trim or Cancel button in the trimming UI.\n\nThe result passed to the closure indicates whether the user clicked the Trim or Cancel button.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc beginTrimming() async -> AVPlayerViewTrimResult\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nAn example implementation of the handler block is as follows:\n\n@IBAction func beginTrimming(_ sender: AnyObject) {\n    playerView.beginTrimming { result in\n        if result == .okButton {\n            // user selected Trim button (AVPlayerViewTrimResult.okButton)...\n        } else {\n            // user selected Cancel button (AVPlayerViewTrimResult.cancelButton)...\n        }\n    }\n}\n\n\nThis method blocks until the user selects either the Trim or the Cancel button.\n\nSee Also\nTrimming Media\nvar canBeginTrimming: Bool\nA Boolean value that indicates whether the player view can begin trimming.\nenum AVPlayerViewTrimResult\nConstants that specify an action a user takes when trimming media in a player view."
    },
    {
        "title": "AVPlayerViewControlsStyle",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrolsstyle",
        "html": "Topics\nControls Styles\ncase none\nThe view displays no playback controls.\ncase inline\nThe view displays playback controls in a bar along the view\u2019s bottom edge.\ncase floating\nThe view displays playback controls in a floating window over the video content.\ncase minimal\nThe view presents basic controls to play and pause playback.\nstatic var `default`: AVPlayerViewControlsStyle\nThe view\u2019s default controls style.\nRelationships\nConforms To\nSendable\nSee Also\nCustomizing the User Interface\nvar controlsStyle: AVPlayerViewControlsStyle\nThe player view\u2019s controls style.\nvar showsFrameSteppingButtons: Bool\nA Boolean value that determines whether the player view displays frame stepping buttons.\nvar showsSharingServiceButton: Bool\nA Boolean value that determines whether the player view displays a sharing service button.\nvar showsFullScreenToggleButton: Bool\nA Boolean value that determines whether the player view displays a full-screen toggle button.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar contentOverlayView: NSView?\nA view that adds additional custom views between the video content and the controls.\nvar actionPopUpButtonMenu: NSMenu?\nAn action pop-up button menu that the player view displays.\nvar updatesNowPlayingInfoCenter: Bool\nA Boolean value that indicates whether the player view controller updates the Now Playing info center."
    },
    {
        "title": "canBeginTrimming",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416545-canbegintrimming",
        "html": "Discussion\n\nBefore calling beginTrimming(completionHandler:), check the value of this property to determine whether the player view and current media support trimming. This property value is false if the current controls style doesn\u2019t support trimming, the media is content protected, or when playing HTTP Live Streaming media.\n\nIf you\u2019re presenting a menu item to initiate trimming, a good place to perform this check is in the validateUserInterfaceItem(_:) method of NSDocument:\n\noverride func validateUserInterfaceItem(_ item: NSValidatedUserInterfaceItem) -> Bool {\n    if item.action == #selector(beginTrimming) {\n        return playerView.canBeginTrimming\n    }\n    return super.validateUserInterfaceItem(item)\n}\n\nSee Also\nTrimming Media\nfunc beginTrimming(completionHandler: ((AVPlayerViewTrimResult) -> Void)?)\nPuts the player view into trimming mode.\nenum AVPlayerViewTrimResult\nConstants that specify an action a user takes when trimming media in a player view."
    },
    {
        "title": "showsSharingServiceButton",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416558-showssharingservicebutton",
        "html": "Discussion\n\nThis property is currently supported only with a controlsStyle of AVPlayerViewControlsStyle.floating or AVPlayerViewControlsStyle.inline.\n\nThe default value is false.\n\nSee Also\nCustomizing the User Interface\nvar controlsStyle: AVPlayerViewControlsStyle\nThe player view\u2019s controls style.\nenum AVPlayerViewControlsStyle\nConstants that indicate which user interface controls the view displays.\nvar showsFrameSteppingButtons: Bool\nA Boolean value that determines whether the player view displays frame stepping buttons.\nvar showsFullScreenToggleButton: Bool\nA Boolean value that determines whether the player view displays a full-screen toggle button.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar contentOverlayView: NSView?\nA view that adds additional custom views between the video content and the controls.\nvar actionPopUpButtonMenu: NSMenu?\nAn action pop-up button menu that the player view displays.\nvar updatesNowPlayingInfoCenter: Bool\nA Boolean value that indicates whether the player view controller updates the Now Playing info center."
    },
    {
        "title": "isDisplayCriteriaMatchingEnabled",
        "url": "https://developer.apple.com/documentation/avkit/avdisplaymanager/2947862-isdisplaycriteriamatchingenabled",
        "html": "Discussion\n\nThis value reflects the user\u2019s current Match Content settings, which they set in the Settings app under Video and Audio > Match Content.\n\nSee Also\nMatching a Video's Native Display Mode\nvar preferredDisplayCriteria: AVDisplayCriteria?\nA hint for the TV to set the display mode to best match the currently playing content\u2019s display criteria.\nvar isDisplayModeSwitchInProgress: Bool\nA Boolean value that indicates whether a display mode switch is in progress."
    },
    {
        "title": "selectSpeed(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3955798-selectspeed",
        "html": "Parameters\nspeed\n\nThe playback speed to select.\n\nDiscussion\n\nIf you call this method with a speed that isn\u2019t contained in the speeds property, the system ignores the call.\n\nSee Also\nConfiguring Playback Speed\nvar speeds: [AVPlaybackSpeed]\nA list of user-selectable playback speeds to show in the playback speed control.\nvar selectedSpeed: AVPlaybackSpeed?\nThe currently selected playback speed.\nclass AVPlaybackSpeed\nAn object that represents a user-selectable playback speed in a playback user interface."
    },
    {
        "title": "playerViewController",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalviewcontroller/1650967-playerviewcontroller",
        "html": "Discussion\n\nThe framework sets this property value during the presentation of the content proposal. It may be nil at other times."
    },
    {
        "title": "AVPictureInPictureVideoCallViewController",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturevideocallviewcontroller",
        "html": "Overview\n\nImportant\n\nThe use of this API requires an entitlement. For information about requesting access, see com.apple.developer.avfoundation.multitasking-camera-access.\n\nRelationships\nInherits From\nUIViewController\nSee Also\nAccessing the Active Call Presentation\nvar activeVideoCallSourceView: UIView?\nThe view that contains the video content of the call.\nvar activeVideoCallContentViewController: AVPictureInPictureVideoCallViewController\nThe view controller that presents the video call content."
    },
    {
        "title": "AVPictureInPictureController.ContentSource",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/contentsource",
        "html": "Overview\n\nThe system supports displaying content from an AVPlayerLayer or AVSampleBufferDisplayLayer in a Picture in Picture window. Use an instance of this class to describe the source of your app\u2019s content.\n\nTopics\nCreating a Content Source\ninit(playerLayer: AVPlayerLayer)\nCreates a content source with a player layer.\ninit(sampleBufferDisplayLayer: AVSampleBufferDisplayLayer, playbackDelegate: AVPictureInPictureSampleBufferPlaybackDelegate)\nCreates a content source with a sample buffer display layer.\ninit(activeVideoCallSourceView: UIView, contentViewController: AVPictureInPictureVideoCallViewController)\nCreates a content source with an active video call.\nAccessing the Presentation Layer\nvar playerLayer: AVPlayerLayer?\nThe presenting player layer.\nvar sampleBufferDisplayLayer: AVSampleBufferDisplayLayer?\nThe presenting sample buffer display layer.\nAccessing the Active Call Presentation\nvar activeVideoCallSourceView: UIView?\nThe view that contains the video content of the call.\nvar activeVideoCallContentViewController: AVPictureInPictureVideoCallViewController\nThe view controller that presents the video call content.\nclass AVPictureInPictureVideoCallViewController\nA view controller that presents content from a video call in Picture in Picture.\nConfiguring the Delegate\nvar sampleBufferPlaybackDelegate: AVPictureInPictureSampleBufferPlaybackDelegate?\nA delegate object that responds to sample buffer playback events.\nprotocol AVPictureInPictureSampleBufferPlaybackDelegate\nA protocol for controlling playback from a sample buffer display layer in Picture in Picture.\nInvalidating State\nfunc invalidatePlaybackState()\nInvalidates the controller\u2019s current playback state and fetches the updated state from the sample buffer playback delegate object.\nRelationships\nInherits From\nNSObject\nSee Also\nConfiguring the Content Source\nvar contentSource: AVPictureInPictureController.ContentSource?\nThe source of the controller\u2019s content."
    },
    {
        "title": "pictureInPictureControllerDidStopPictureInPicture(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontrollerdelegate/1614717-pictureinpicturecontrollerdidsto",
        "html": "Parameters\npictureInPictureController\n\nThe delegating controller.\n\nSee Also\nResponding to Picture in Picture Lifecycle Events\nfunc pictureInPictureControllerWillStartPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture is about to start.\nfunc pictureInPictureControllerDidStartPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture started.\nfunc pictureInPictureController(AVPictureInPictureController, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture failed to start.\nfunc pictureInPictureControllerWillStopPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture is about to stop."
    },
    {
        "title": "pictureInPictureControllerWillStartPictureInPicture(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontrollerdelegate/1614711-pictureinpicturecontrollerwillst",
        "html": "Parameters\npictureInPictureController\n\nThe delegating controller.\n\nSee Also\nResponding to Picture in Picture Lifecycle Events\nfunc pictureInPictureControllerDidStartPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture started.\nfunc pictureInPictureController(AVPictureInPictureController, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture failed to start.\nfunc pictureInPictureControllerWillStopPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture is about to stop.\nfunc pictureInPictureControllerDidStopPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture stopped."
    },
    {
        "title": "AVPictureInPictureControllerDelegate",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontrollerdelegate",
        "html": "Overview\n\nAdopt this protocol in a custom object, and assign the object as the delegate of your AVPictureInPictureController instance.\n\nTopics\nRestoring the User Interface\nfunc pictureInPictureController(AVPictureInPictureController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the user interface before Picture in Picture stops.\nResponding to Picture in Picture Lifecycle Events\nfunc pictureInPictureControllerWillStartPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture is about to start.\nfunc pictureInPictureControllerDidStartPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture started.\nfunc pictureInPictureController(AVPictureInPictureController, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture failed to start.\nfunc pictureInPictureControllerWillStopPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture is about to stop.\nfunc pictureInPictureControllerDidStopPictureInPicture(AVPictureInPictureController)\nTells the delegate that Picture in Picture stopped.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nAccessing the Delegate Object\nvar delegate: AVPictureInPictureControllerDelegate?\nA delegate object for a Picture in Picture controller."
    },
    {
        "title": "pictureInPictureController(_:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:)",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontrollerdelegate/1614703-pictureinpicturecontroller",
        "html": "Parameters\npictureInPictureController\n\nThe delegating controller.\n\ncompletionHandler\n\nYou must call the completion handler with a value of true to allow the system to finish restoring your player user interface.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func pictureInPictureController(_ pictureInPictureController: AVPictureInPictureController) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nImplement this method if your player user interface requires configuration or layout to return to its default state."
    },
    {
        "title": "AVPlayerViewDelegate",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewdelegate",
        "html": "Topics\nResponding to Full Screen Events\nfunc playerViewWillEnterFullScreen(AVPlayerView)\nTells the delegate that the player view is about to enter full-screen mode.\nfunc playerViewDidEnterFullScreen(AVPlayerView)\nTells the delegate that the player view entered full-screen mode.\nfunc playerViewWillExitFullScreen(AVPlayerView)\nTells the delegate that the player view is about to exit full-screen mode.\nfunc playerViewDidExitFullScreen(AVPlayerView)\nTells the delegate that the player view exited full-screen mode.\nfunc playerView(AVPlayerView, restoreUserInterfaceForFullScreenExitWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the app\u2019s user interface when exiting full-screen mode.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nSetting the Delegate Object\nvar delegate: AVPlayerViewDelegate?\nThe player view\u2019s delegate object."
    },
    {
        "title": "delegate",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/3752984-delegate",
        "html": "See Also\nSetting the Delegate Object\nprotocol AVPlayerViewDelegate\nA protocol that defines the methods to implement to participate in the player view\u2019s full-screen presentation life cycle."
    },
    {
        "title": "AVPlayerViewPictureInPictureDelegate",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewpictureinpicturedelegate",
        "html": "Topics\nResponding to Picture in Picture Playback Events\nfunc playerViewWillStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to start.\nfunc playerViewDidStartPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback started.\nfunc playerViewWillStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback is about to stop.\nfunc playerViewDidStopPicture(inPicture: AVPlayerView)\nTells the delegate that Picture in Picture playback stopped.\nfunc playerView(AVPlayerView, failedToStartPictureInPictureWithError: Error)\nTells the delegate that Picture in Picture playback failed to start.\nfunc playerView(AVPlayerView, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the user interface before Picture in Picture playback stops.\nfunc playerViewShouldAutomaticallyDismissAtPicture(inPictureStart: AVPlayerView) -> Bool\nAsks the delegate if the player view should miniaturize when Picture in Picture starts.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nConfiguring Picture in Picture\nvar allowsPictureInPicturePlayback: Bool\nA Boolean value that determines whether the player view allows Picture in Picture playback.\nvar pictureInPictureDelegate: AVPlayerViewPictureInPictureDelegate?\nThe Picture in Picture delegate object."
    },
    {
        "title": "allowsPictureInPicturePlayback",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/3172688-allowspictureinpictureplayback",
        "html": "Discussion\n\nThe default value is false.\n\nSee Also\nConfiguring Picture in Picture\nvar pictureInPictureDelegate: AVPlayerViewPictureInPictureDelegate?\nThe Picture in Picture delegate object.\nprotocol AVPlayerViewPictureInPictureDelegate\nA protocol that defines the methods to implement to respond to Picture in Picture playback events."
    },
    {
        "title": "magnification",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/3943282-magnification",
        "html": "Discussion\n\nThe supported magnification range is 1.0 to 64.0. The system zooms using nearest neighbor interpolation after it scales the content past a certain factor.\n\nThe default value is 1.0.\n\nSee Also\nMagnifying Video\nvar allowsMagnification: Bool\nA Boolean value that indicates whether the magnify gesture changes the video\u2019s view magnification.\nfunc setMagnification(CGFloat, centeredAt: CGPoint)\nScales the video\u2019s view by a specified factor, and centers the result on a specified point."
    },
    {
        "title": "AVPlayerViewTrimResult",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewtrimresult",
        "html": "Topics\nTrim Results\ncase okButton\nThe user clicked the Trim button.\ncase cancelButton\nThe user clicked the Cancel button.\nRelationships\nConforms To\nSendable\nSee Also\nTrimming Media\nvar canBeginTrimming: Bool\nA Boolean value that indicates whether the player view can begin trimming.\nfunc beginTrimming(completionHandler: ((AVPlayerViewTrimResult) -> Void)?)\nPuts the player view into trimming mode."
    },
    {
        "title": "selectSpeed(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/4042648-selectspeed",
        "html": "Parameters\nspeed\n\nThe playback speed to select.\n\nDiscussion\n\nIf you call this method with a speed that isn\u2019t contained in the speeds property, the system ignores the call.\n\nSee Also\nConfiguring the Playback Speed\nvar speeds: [AVPlaybackSpeed]\nA list of user-selectable playback speeds to show in the playback speed control.\nvar selectedSpeed: AVPlaybackSpeed?\nThe currently selected playback speed.\nclass AVPlaybackSpeed\nAn object that represents a user-selectable playback speed in a playback user interface."
    },
    {
        "title": "speeds",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/4042650-speeds",
        "html": "Discussion\n\nBy default, this property value equals systemDefaultSpeeds. Setting this property to an empty array hides the playback speed selection user interface.\n\nTo set the playback speed programmatically, call the selectSpeed(_:) method, or set the value of the defaultRate property on the view controller\u2019s associated AVPlayer object.\n\nSee Also\nConfiguring the Playback Speed\nvar selectedSpeed: AVPlaybackSpeed?\nThe currently selected playback speed.\nfunc selectSpeed(AVPlaybackSpeed)\nSelects a specified playback speed.\nclass AVPlaybackSpeed\nAn object that represents a user-selectable playback speed in a playback user interface."
    },
    {
        "title": "selectedSpeed",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/4042649-selectedspeed",
        "html": "Discussion\n\nThis value reflects the associated player\u2019s defaultRate property value. If you set the defaultRate to a value that doesn\u2019t match a speed contained in the speeds property, the system sets this value to nil.\n\nSee Also\nConfiguring the Playback Speed\nvar speeds: [AVPlaybackSpeed]\nA list of user-selectable playback speeds to show in the playback speed control.\nfunc selectSpeed(AVPlaybackSpeed)\nSelects a specified playback speed.\nclass AVPlaybackSpeed\nAn object that represents a user-selectable playback speed in a playback user interface."
    },
    {
        "title": "videoBounds",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416549-videobounds",
        "html": "Discussion\n\nUse this property to determine the display dimensions of the video image within the player view\u2019s bounds. The size and position of this rectangle depend on the aspect ratio of the media (like 16:9 or 4:3), the player view\u2019s bounds, and its controlsStyle.\n\nSee Also\nCustomizing the Video Presentation\nvar isReadyForDisplay: Bool\nA Boolean value that indicates whether the current player item\u2019s first video frame is ready for display.\nvar videoGravity: AVLayerVideoGravity\nA value that determines how the player view displays video content within its bounds."
    },
    {
        "title": "allowsVideoFrameAnalysis",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/3986556-allowsvideoframeanalysis",
        "html": "Discussion\n\nIf the value is true, a player view tries to find objects, text, and people when you pause media playback. If it finds an object, the user is able to interact with it using a long press to present a context menu.\n\nThe default value is true.\n\nSee Also\nConfiguring Frame Analysis\nvar videoFrameAnalysisTypes: AVVideoFrameAnalysisType\nstruct AVVideoFrameAnalysisType\nConstants that define the types of analysis a player view controller may perform on a paused video frame."
    },
    {
        "title": "isReadyForDisplay",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416556-isreadyfordisplay",
        "html": "Discussion\n\nThis property value is key-value observable.\n\nSee Also\nCustomizing the Video Presentation\nvar videoBounds: NSRect\nThe current size and position of the video image that displays within the player view\u2019s bounds.\nvar videoGravity: AVLayerVideoGravity\nA value that determines how the player view displays video content within its bounds."
    },
    {
        "title": "videoGravity",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416559-videogravity",
        "html": "Discussion\n\nThe video gravity determines how the player view scales or stretches the video content within the player view\u2019s bounds. The player view supports the following video gravity values:\n\nresizeAspect\n\nresizeAspectFill\n\nresize\n\nThe default value is resizeAspect.\n\nThis property is animatable.\n\nSee Also\nCustomizing the Video Presentation\nvar isReadyForDisplay: Bool\nA Boolean value that indicates whether the current player item\u2019s first video frame is ready for display.\nvar videoBounds: NSRect\nThe current size and position of the video image that displays within the player view\u2019s bounds."
    },
    {
        "title": "contentOverlayView",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416573-contentoverlayview",
        "html": "See Also\nCustomizing the User Interface\nvar controlsStyle: AVPlayerViewControlsStyle\nThe player view\u2019s controls style.\nenum AVPlayerViewControlsStyle\nConstants that indicate which user interface controls the view displays.\nvar showsFrameSteppingButtons: Bool\nA Boolean value that determines whether the player view displays frame stepping buttons.\nvar showsSharingServiceButton: Bool\nA Boolean value that determines whether the player view displays a sharing service button.\nvar showsFullScreenToggleButton: Bool\nA Boolean value that determines whether the player view displays a full-screen toggle button.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar actionPopUpButtonMenu: NSMenu?\nAn action pop-up button menu that the player view displays.\nvar updatesNowPlayingInfoCenter: Bool\nA Boolean value that indicates whether the player view controller updates the Now Playing info center."
    },
    {
        "title": "actionPopUpButtonMenu",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416543-actionpopupbuttonmenu",
        "html": "Discussion\n\nSet this property value to show an action pop-up button. Setting a custom action pop-up button is currently supported only for a controlsStyle of AVPlayerViewControlsStyle.floating or AVPlayerViewControlsStyle.inline.\n\nThe default value is nil.\n\nSee Also\nCustomizing the User Interface\nvar controlsStyle: AVPlayerViewControlsStyle\nThe player view\u2019s controls style.\nenum AVPlayerViewControlsStyle\nConstants that indicate which user interface controls the view displays.\nvar showsFrameSteppingButtons: Bool\nA Boolean value that determines whether the player view displays frame stepping buttons.\nvar showsSharingServiceButton: Bool\nA Boolean value that determines whether the player view displays a sharing service button.\nvar showsFullScreenToggleButton: Bool\nA Boolean value that determines whether the player view displays a full-screen toggle button.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar contentOverlayView: NSView?\nA view that adds additional custom views between the video content and the controls.\nvar updatesNowPlayingInfoCenter: Bool\nA Boolean value that indicates whether the player view controller updates the Now Playing info center."
    },
    {
        "title": "updatesNowPlayingInfoCenter",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/2876219-updatesnowplayinginfocenter",
        "html": "Discussion\n\nThe default value is true.\n\nSee Also\nCustomizing the User Interface\nvar controlsStyle: AVPlayerViewControlsStyle\nThe player view\u2019s controls style.\nenum AVPlayerViewControlsStyle\nConstants that indicate which user interface controls the view displays.\nvar showsFrameSteppingButtons: Bool\nA Boolean value that determines whether the player view displays frame stepping buttons.\nvar showsSharingServiceButton: Bool\nA Boolean value that determines whether the player view displays a sharing service button.\nvar showsFullScreenToggleButton: Bool\nA Boolean value that determines whether the player view displays a full-screen toggle button.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar contentOverlayView: NSView?\nA view that adds additional custom views between the video content and the controls.\nvar actionPopUpButtonMenu: NSMenu?\nAn action pop-up button menu that the player view displays."
    },
    {
        "title": "stopPictureInPicture()",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/1614701-stoppictureinpicture",
        "html": "Discussion\n\nRegardless of how Picture in Picture stops, the controller calls the delegate\u2019s pictureInPictureControllerWillStopPictureInPicture(_:) method. When the PiP animation completes, the controller finalizes the session by calling the delegate\u2019s pictureInPictureControllerDidStopPictureInPicture(_:) method.\n\nSee Also\nControlling Picture in Picture Playback\nvar canStopPictureInPicture: Bool\nA Boolean value that indicates whether Picture in Picture is active and is able to stop.\nvar canStartPictureInPictureAutomaticallyFromInline: Bool\nA Boolean value that indicates whether Picture in Picture starts automatically when the controller embeds its content inline and the app transitions to the background.\nfunc startPictureInPicture()\nStarts Picture in Picture, if possible."
    },
    {
        "title": "delegate",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/1614709-delegate",
        "html": "See Also\nAccessing the Delegate Object\nprotocol AVPictureInPictureControllerDelegate\nA protocol to adopt to respond to Picture in Picture events."
    },
    {
        "title": "isPictureInPictureActive",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/1614720-ispictureinpictureactive",
        "html": "Discussion\n\nThis property is key-value observable.\n\nSee Also\nAccessing Picture in Picture State\nclass func isPictureInPictureSupported() -> Bool\nReturns a Boolean value that indicates whether the current device supports Picture in Picture.\nvar isPictureInPicturePossible: Bool\nA Boolean value that indicates whether Picture in Picture playback is currently possible.\nvar isPictureInPictureSuspended: Bool\nA Boolean value that indicates whether the system suspends the controller\u2019s Picture in Picture window."
    },
    {
        "title": "contentSource",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/3750323-contentsource",
        "html": "Discussion\n\nYou can change a content source while a Picture in Picture session is active, but only if the new content source is ready for display. If it isn\u2019t ready, the session ends immediately.\n\nIf your app uses AVPlayerLayer, verify that the value of its isReadyForDisplay property is true before setting it as a content source.\n\nSee Also\nConfiguring the Content Source\nclass AVPictureInPictureController.ContentSource\nAn object that represents the source of the content to present in Picture in Picture."
    },
    {
        "title": "routePickerButtonColor(for:)",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/2915793-routepickerbuttoncolor",
        "html": "Parameters\nstate\n\nThe button state.\n\nReturn Value\n\nA color value for the specified state.\n\nSee Also\nConfiguring the route picker view\nvar activeTintColor: UIColor!\nThe view\u2019s tint color when AirPlay is active.\nvar isRoutePickerButtonBordered: Bool\nA Boolean value that indicates whether the route picker button has a border.\nvar prioritizesVideoDevices: Bool\nA Boolean value that indicates whether the route picker sorts video output devices to the top of the list.\nvar routePickerButtonStyle: AVRoutePickerViewButtonStyle\nThe button style for the route picker.\nenum AVRoutePickerViewButtonStyle\nConstants that define the button styles a route picker view supports.\nfunc setRoutePickerButtonColor(NSColor?, for: AVRoutePickerView.ButtonState)\nSets the route picker button color for the specified state.\nenum AVRoutePickerView.ButtonState\nConstants that describe the available button states."
    },
    {
        "title": "prioritizesVideoDevices",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/3182882-prioritizesvideodevices",
        "html": "Discussion\n\nThe default value is false.\n\nSee Also\nConfiguring the route picker view\nvar activeTintColor: UIColor!\nThe view\u2019s tint color when AirPlay is active.\nvar isRoutePickerButtonBordered: Bool\nA Boolean value that indicates whether the route picker button has a border.\nvar routePickerButtonStyle: AVRoutePickerViewButtonStyle\nThe button style for the route picker.\nenum AVRoutePickerViewButtonStyle\nConstants that define the button styles a route picker view supports.\nfunc routePickerButtonColor(for: AVRoutePickerView.ButtonState) -> NSColor\nReturns the color of the picker button for the specified state.\nfunc setRoutePickerButtonColor(NSColor?, for: AVRoutePickerView.ButtonState)\nSets the route picker button color for the specified state.\nenum AVRoutePickerView.ButtonState\nConstants that describe the available button states."
    },
    {
        "title": "setRoutePickerButtonColor(_:for:)",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/2915792-setroutepickerbuttoncolor",
        "html": "Parameters\ncolor\n\nThe route picker button color to set.\n\nstate\n\nThe button state.\n\nSee Also\nConfiguring the route picker view\nvar activeTintColor: UIColor!\nThe view\u2019s tint color when AirPlay is active.\nvar isRoutePickerButtonBordered: Bool\nA Boolean value that indicates whether the route picker button has a border.\nvar prioritizesVideoDevices: Bool\nA Boolean value that indicates whether the route picker sorts video output devices to the top of the list.\nvar routePickerButtonStyle: AVRoutePickerViewButtonStyle\nThe button style for the route picker.\nenum AVRoutePickerViewButtonStyle\nConstants that define the button styles a route picker view supports.\nfunc routePickerButtonColor(for: AVRoutePickerView.ButtonState) -> NSColor\nReturns the color of the picker button for the specified state.\nenum AVRoutePickerView.ButtonState\nConstants that describe the available button states."
    },
    {
        "title": "AVRoutePickerViewButtonStyle",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerviewbuttonstyle",
        "html": "Topics\nButton Styles\ncase custom\nA custom button style.\ncase plain\nA plain button style.\ncase system\nA system-defined button style.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring the route picker view\nvar activeTintColor: UIColor!\nThe view\u2019s tint color when AirPlay is active.\nvar isRoutePickerButtonBordered: Bool\nA Boolean value that indicates whether the route picker button has a border.\nvar prioritizesVideoDevices: Bool\nA Boolean value that indicates whether the route picker sorts video output devices to the top of the list.\nvar routePickerButtonStyle: AVRoutePickerViewButtonStyle\nThe button style for the route picker.\nfunc routePickerButtonColor(for: AVRoutePickerView.ButtonState) -> NSColor\nReturns the color of the picker button for the specified state.\nfunc setRoutePickerButtonColor(NSColor?, for: AVRoutePickerView.ButtonState)\nSets the route picker button color for the specified state.\nenum AVRoutePickerView.ButtonState\nConstants that describe the available button states."
    },
    {
        "title": "isRoutePickerButtonBordered",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview/2915795-isroutepickerbuttonbordered",
        "html": "Discussion\n\nThe default value is true.\n\nSee Also\nConfiguring the route picker view\nvar activeTintColor: UIColor!\nThe view\u2019s tint color when AirPlay is active.\nvar prioritizesVideoDevices: Bool\nA Boolean value that indicates whether the route picker sorts video output devices to the top of the list.\nvar routePickerButtonStyle: AVRoutePickerViewButtonStyle\nThe button style for the route picker.\nenum AVRoutePickerViewButtonStyle\nConstants that define the button styles a route picker view supports.\nfunc routePickerButtonColor(for: AVRoutePickerView.ButtonState) -> NSColor\nReturns the color of the picker button for the specified state.\nfunc setRoutePickerButtonColor(NSColor?, for: AVRoutePickerView.ButtonState)\nSets the route picker button color for the specified state.\nenum AVRoutePickerView.ButtonState\nConstants that describe the available button states."
    },
    {
        "title": "playerViewController(_:willBeginFullScreenPresentationWithAnimationCoordinator:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/3173174-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\ncoordinator\n\nThe transition coordinator to use when coordinating animations.\n\nDiscussion\n\nThis method isn\u2019t called if you embed the player view controller as a child of the presented view controller.\n\nSee Also\nResponding to Full-Screen Presentations\nfunc playerViewController(AVPlayerViewController, willEndFullScreenPresentationWithAnimationCoordinator: UIViewControllerTransitionCoordinator)\nTells the delegate when the player view controller is about to end full-screen display.\nfunc playerViewController(AVPlayerViewController, restoreUserInterfaceForFullScreenExitWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the app\u2019s user interface after returning from a full-screen presentation."
    },
    {
        "title": "skipToPreviousItem(for:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1650944-skiptopreviousitem",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nDiscussion\n\nThe framework calls this method when you set the player view controller\u2019s skipping behavior to AVPlayerViewControllerSkippingBehavior.skipItem and a user performs a backward skip gesture (by pressing the left side of the Siri Remote\u2019s Touch surface). Implement this method to update the player view controller\u2019s player to play the previous player item.\n\nSee Also\nResponding to Navigation Events\nfunc playerViewController(AVPlayerViewController, timeToSeekAfterUserNavigatedFrom: CMTime, to: CMTime) -> CMTime\nTells the delegate when the user skips, scrubs, or otherwise navigates to a new time and wants to resume playback at the target time.\nfunc playerViewController(AVPlayerViewController, willResumePlaybackAfterUserNavigatedFrom: CMTime, to: CMTime)\nTells the delegate when the user navigates to a new time and playback is about to begin.\nfunc skipToNextItem(for: AVPlayerViewController)\nTells the delegate when the user requests skipping to the next item in the timeline."
    },
    {
        "title": "skipToNextItem(for:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1650950-skiptonextitem",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nDiscussion\n\nThe framework calls this method when you set the player view controller\u2019s skipping behavior to AVPlayerViewControllerSkippingBehavior.skipItem and a user performs a forward skip gesture (by pressing the right side of the Siri Remote\u2019s Touch surface). Implement this method to update the player view controller\u2019s player to play the next player item.\n\nSee Also\nResponding to Navigation Events\nfunc playerViewController(AVPlayerViewController, timeToSeekAfterUserNavigatedFrom: CMTime, to: CMTime) -> CMTime\nTells the delegate when the user skips, scrubs, or otherwise navigates to a new time and wants to resume playback at the target time.\nfunc playerViewController(AVPlayerViewController, willResumePlaybackAfterUserNavigatedFrom: CMTime, to: CMTime)\nTells the delegate when the user navigates to a new time and playback is about to begin.\nfunc skipToPreviousItem(for: AVPlayerViewController)\nTells the delegate when the user requests skipping to the previous item in the timeline."
    },
    {
        "title": "showsFrameSteppingButtons",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416567-showsframesteppingbuttons",
        "html": "Discussion\n\nSetting this property value to true results in the player view replacing its fast-forward and rewind controls with frame stepping buttons. This property is currently supported only with a controlsStyle of AVPlayerViewControlsStyle.floating.\n\nThe default value is false.\n\nSee Also\nCustomizing the User Interface\nvar controlsStyle: AVPlayerViewControlsStyle\nThe player view\u2019s controls style.\nenum AVPlayerViewControlsStyle\nConstants that indicate which user interface controls the view displays.\nvar showsSharingServiceButton: Bool\nA Boolean value that determines whether the player view displays a sharing service button.\nvar showsFullScreenToggleButton: Bool\nA Boolean value that determines whether the player view displays a full-screen toggle button.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar contentOverlayView: NSView?\nA view that adds additional custom views between the video content and the controls.\nvar actionPopUpButtonMenu: NSMenu?\nAn action pop-up button menu that the player view displays.\nvar updatesNowPlayingInfoCenter: Bool\nA Boolean value that indicates whether the player view controller updates the Now Playing info center."
    },
    {
        "title": "controlsStyle",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/1416565-controlsstyle",
        "html": "Discussion\n\nThe player view supports several different control styles that you can use to customize the player view\u2019s appearance and behavior. See AVPlayerViewControlsStyle for the possible values.\n\nSee Also\nCustomizing the User Interface\nenum AVPlayerViewControlsStyle\nConstants that indicate which user interface controls the view displays.\nvar showsFrameSteppingButtons: Bool\nA Boolean value that determines whether the player view displays frame stepping buttons.\nvar showsSharingServiceButton: Bool\nA Boolean value that determines whether the player view displays a sharing service button.\nvar showsFullScreenToggleButton: Bool\nA Boolean value that determines whether the player view displays a full-screen toggle button.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar contentOverlayView: NSView?\nA view that adds additional custom views between the video content and the controls.\nvar actionPopUpButtonMenu: NSMenu?\nAn action pop-up button menu that the player view displays.\nvar updatesNowPlayingInfoCenter: Bool\nA Boolean value that indicates whether the player view controller updates the Now Playing info center."
    },
    {
        "title": "isDisplayModeSwitchInProgress",
        "url": "https://developer.apple.com/documentation/avkit/avdisplaymanager/2935638-isdisplaymodeswitchinprogress",
        "html": "Discussion\n\nWhile this property value is true, your app should behave as if the display is currently changing modes, and may be temporarily blank. The accuracy of this property value depends on the TV hardware and the nature of the mode switch. When displaying temporary content or user interface elements, such as hints or tips, leave them visible for longer than the mode switch takes, to ensure the user sees them.\n\nThis property is key-value observable.\n\nSee Also\nMatching a Video's Native Display Mode\nvar preferredDisplayCriteria: AVDisplayCriteria?\nA hint for the TV to set the display mode to best match the currently playing content\u2019s display criteria.\nvar isDisplayCriteriaMatchingEnabled: Bool\nA Boolean value that indicates whether the user has enabled display critera matching."
    },
    {
        "title": "dismissContentProposal(for:animated:completion:)",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalviewcontroller/1650973-dismisscontentproposal",
        "html": "Parameters\naction\n\nA content proposal action that indicates whether the user accepted, rejected, or deferred the content proposal.\n\nanimated\n\nA Boolean value that indicates whether the content proposal dismisses in an animated manner.\n\nblock\n\nAn optional callback that the system calls when its hidden the conten proposal.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc dismissContentProposal(for action: AVContentProposalAction, animated: Bool) async\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCall this method to indicate the user action when leaving this proposal.\n\nSee Also\nDismissing the Proposal\nenum AVContentProposalAction\nConstant that indicate the action a user takes when dismissing a content proposal."
    },
    {
        "title": "preferredPlayerViewFrame",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalviewcontroller/1650954-preferredplayerviewframe",
        "html": "Discussion\n\nThis value defaults to a rectangle that represents the entire screen bounds, but custom view controllers may return a smaller rectangle, or zero to hide the player view completely. If you return a rectangle smaller that the full-screen bounds, the player view animates its frame to its new size and position.\n\nSee Also\nConfiguring the Proposal\nvar contentProposal: AVContentProposal?\nA prosal of content to play.\nclass AVContentProposal\nAn object that describes the content to propose playing after the current item finishes.\nvar dateOfAutomaticAcceptance: Date?\nThe date that the system automatically accepts a proposal if the user doesn\u2019t intervene.\nvar playerLayoutGuide: UILayoutGuide\nA layout guide that tracks the size and location of the player view."
    },
    {
        "title": "contentProposal",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalviewcontroller/1650964-contentproposal",
        "html": "Discussion\n\nThe associated player view controller sets this property value.\n\nSee Also\nConfiguring the Proposal\nclass AVContentProposal\nAn object that describes the content to propose playing after the current item finishes.\nvar dateOfAutomaticAcceptance: Date?\nThe date that the system automatically accepts a proposal if the user doesn\u2019t intervene.\nvar playerLayoutGuide: UILayoutGuide\nA layout guide that tracks the size and location of the player view.\nvar preferredPlayerViewFrame: CGRect\nThe preferred presentation frame of the player view while the content proposal is active."
    },
    {
        "title": "AVInterstitialTimeRange",
        "url": "https://developer.apple.com/documentation/avkit/avinterstitialtimerange",
        "html": "Overview\n\nWhen you associate interstitial time ranges with an AVPlayerItem you present with an AVPlayerViewController, you can customize or restrict the presentation of interstitial content. For example, you can allow the user to skip advertisements or prohibit skipping of a legal notice.\n\nTopics\nCreating an Interstitial Time Range\ninit(timeRange: CMTimeRange)\nInitializes an interstitial time range object with the specified time range.\nInspecting an Interstitial Time Range\nvar timeRange: CMTimeRange\nThe time range identified as interstitial content.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "updatesNowPlayingInfoCenter",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1845194-updatesnowplayinginfocenter",
        "html": "Discussion\n\nThe default value is true."
    },
    {
        "title": "isReadyForDisplay",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1615830-isreadyfordisplay",
        "html": "Discussion\n\nThis property is key-value observable."
    },
    {
        "title": "contentProposalViewController",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1650965-contentproposalviewcontroller",
        "html": "Discussion\n\nSet this property value to an instance of your custom content proposal view controller subclass to provide the presentation for your content proposal."
    },
    {
        "title": "Presenting Content Proposals in tvOS",
        "url": "https://developer.apple.com/documentation/avkit/presenting_content_proposals_in_tvos",
        "html": "Overview\n\nMedia apps presenting serialized content, such as a TV show, often display a preview of the next episode in the series when you finish watching the current one. The user interface for this preview usually contains artwork and information about the proposed content. It also includes options for the user to either watch the next episode or return to the main menu. You add this functionality to your app using AVKit\u2019s content proposals.\n\nCreate a Content Proposal\n\nYou create a content proposal using the AVContentProposal class. This type models the data about the proposed content, such as its title, preview image, metadata, and content URL, and the time at which to present the proposal. You create and configure a content proposal instance as shown in the following code:\n\nfunc makeProposal() -> AVContentProposal {\n\n\n    // Present 10 seconds prior to the end of current presentation\n    let time = currentAsset.duration - CMTime(value: 10, timescale: 1)\n    let title = \"My Show: Episode 2\"\n    let image = UIImage(named: \"ms_ep2\")!\n    let proposal = AVContentProposal(contentTimeForTransition: time, title: title, previewImage: image)\n\n\n    // Set custom metadata\n    proposal.metadata = [\n        makeMetadataItem(.commonIdentifierDescription, value: \"Episode 2 Description\"),\n        makeMetadataItem(.iTunesMetadataContentRating, value: \"TV-14\"),\n        makeMetadataItem(.quickTimeMetadataGenre, value: \"Comedy\")\n    ]\n\n\n    // Set content URL\n    proposal.url = // The upcoming asset's URL\n    \n    // Return the created proposal.\n    return proposal\n}\n\n\nprivate func makeMetadataItem(_ identifier: AVMetadataIdentifier, value: Any) -> AVMetadataItem {\n    let item = AVMutableMetadataItem()\n    item.identifier = identifier\n    item.value = value as? NSCopying & NSObjectProtocol\n    item.extendedLanguageTag = \"und\"\n    return item.copy() as! AVMetadataItem\n}\n\n\nCreate the Content Proposal's User Interface\n\nIn addition to defining your content proposal\u2019s data, you also need to create an interface to present this data to the user. You create this interface by subclassing the AVKit framework\u2019s AVContentProposalViewController class. At runtime, the system passes your subclass a reference to the current AVContentProposal, providing you the data to present. Your user interface should provide visual and descriptive information about the proposed content, and should also include options for the user to accept or reject the proposal.\n\nWhen the system presents your proposal, it displays it over the currently playing full-screen video. You may want to scale this video to a smaller size so you can make more room to display the details of the proposed content. To do this, you override the view controller\u2019s preferredPlayerViewFrame property and return the desired video frame.\n\noverride var preferredPlayerViewFrame: CGRect {\n    guard let frame = playerViewController?.view.frame else { return CGRect.zero }\n    // Present the current video in a 960x540 window centered at the top of the window\n    return CGRect(x: frame.midX / 2.0, y: 0, width: 960, height: 540)\n}\n\n\nWhen the system presents the proposal, the player\u2019s view automatically animates to the specified frame.\n\nNote\n\nTo lay out your content relative to the newly sized and positioned video frame, you use the UILayoutGuide provided by the view controller\u2019s playerLayoutGuide property.\n\nAdd Controls to the Content Proposal\n\nYour presented user interface should also provide controls so the user can accept or reject the proposal. The event handlers for these actions should call the controller\u2019s dismissContentProposal(for:animated:completion:) method, indicating the user\u2019s choice.\n\n// Handle acceptance\n@IBAction func acceptContentProposal(_ sender: AnyObject) {\n    dismissContentProposal(for: .accept, animated: true)\n}\n\n\n// Handle rejection\n@IBAction func rejectContentProposal(_ sender: AnyObject){\n    dismissContentProposal(for: .reject, animated: true)\n}\n\n\nMake the Content Proposal Eligible to be Presented\n\nTo make your content proposal eligible for the system to present, set it as the nextContentProposal property value of the current AVPlayerItem. The following example shows how to configure this property value in a playback app that manages a queue of Video objects, which is a custom value type that models the data of an individual video in the queue. The example code creates the required playback objects, creates a new AVContentProposal for the next video in the queue, and sets the video as the player item\u2019s nextContentProposal.\n\nfunc prepareToPlay() {\n    // Associate the AVPlayer with the AVPlayerViewController\n    playerViewController?.player = player\n    playerViewController?.delegate = self\n\n\n    // Create a new AVPlayerItem with the current video's URL\n    let playerItem = AVPlayerItem(url: currentVideo.url)\n    player.replaceCurrentItem(with: playerItem)\n\n\n    // Create an AVContentProposal for the next video (if it exists)\n    playerItem.nextContentProposal = makeContentProposal(for: currentVideo.nextVideo)\n    player.play()\n}\n \nfunc makeContentProposal(for video: Video?) -> AVContentProposal? {\n    guard let video = video else { return nil }\n    guard let currentAsset = player.currentItem?.asset else { return nil } \n\n\n    // Start the proposal within presentationInterval of the asset's duration\n    let time = currentAsset.duration - video.presentationInterval\n    let title = video.title\n    let image = video.image\n\n\n    // Create a new content proposal with the time, title, and image\n    let contentProposal = AVContentProposal(contentTimeForTransition: time, title: title, previewImage: image)\n\n\n    // Set the content URL for the proposal\n    contentProposal.url = video.url\n    // Automatically accept the proposal 1 second from playback end time\n    contentProposal.automaticAcceptanceInterval = -1.0\n    return contentProposal\n}\n\n\nPresent the Content Proposal\n\nWith the content proposal set as the player item\u2019s nextContentProposal, the next step is to implement the methods of the AVPlayerViewControllerDelegate protocol. You use these methods to define how the system presents the content proposal, as well as to handle the acceptance or rejection of the proposed content.\n\nTo present your custom view controller in response to a request to present the next content proposal, implement the playerViewController(_:shouldPresent:) method. In this method, you set an instance of your custom AVContentProposalViewController as the player view controller\u2019s contentProposalViewController property.\n\nfunc playerViewController(_ playerViewController: AVPlayerViewController, shouldPresent proposal: AVContentProposal) -> Bool {\n    // Set the presentation to use on the player view controller for this content proposal\n    playerViewController.contentProposalViewController = NextVideoProposalViewController()\n    return true\n}\n\n\nIf the presented AVContentProposal provides a valid content URL, the player view controller can automatically handle its acceptance or rejection. However, if you need more control over the handling of these actions, implement the playerViewController(_:didAccept:) and playerViewController(_:didReject:) methods. For example, the following code implements the playerViewController(_:didAccept:)method to play the proposed video and create a new content proposal for the next video in the queue.\n\nfunc playerViewController(_ playerViewController: AVPlayerViewController, didAccept proposal: AVContentProposal) {\n    guard let player = playerViewController.player, let url = proposal.url else { return }\n    guard let video = currentVideo.nextVideo else { return }\n    currentVideo = video\n\n\n    // Create a new player item using the content proposal's URL\n    let playerItem = AVPlayerItem(url: url)\n    player.replaceCurrentItem(with: playerItem)\n    player.play()\n\n\n    // Prepare the new player item's next content proposal (if it exists)\n    playerItem.nextContentProposal = makeContentProposal(for: currentVideo.nextVideo)\n}\n\nSee Also\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "AVNavigationMarkersGroup",
        "url": "https://developer.apple.com/documentation/avkit/avnavigationmarkersgroup",
        "html": "Overview\n\nThe most common form of a navigation markers group is a chapter list; however, you can also provide other sets of markers to allow a user to jump to significant events in the presentation. For example, a \u201cGoals Scored\u201d markers group might summarize key moments in a recorded sporting event. When you associate navigation markers with an AVPlayerItem object you present with an AVPlayerViewController, the user interface provides options for navigating each group.\n\nTopics\nCreating a Navigation Marker Group\ninit(title: String?, timedNavigationMarkers: [AVTimedMetadataGroup])\nInitializes a navigation markers group with the specified title and array of timed navigation markers.\ninit(title: String?, dateRangeNavigationMarkers: [AVDateRangeMetadataGroup])\nInitializes a navigation markers group with the specified title and array of date range navigation markers.\nInspecting Navigation Metadata\nvar title: String?\nThe title of the marker group.\nvar timedNavigationMarkers: [AVTimedMetadataGroup]?\nThe array of timed navigation markers for which the group provides navigation.\nvar dateRangeNavigationMarkers: [AVDateRangeMetadataGroup]?\nThe array of date range navigation markers for which the group provides navigation.\nRelationships\nInherits From\nNSObject\nSee Also\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "AVPlayerViewControllerSkippingBehavior",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerskippingbehavior",
        "html": "Topics\nSkipping Behaviors\ncase `default`\nThe default skipping behavior, which is to skip forward or backward in 10-second intervals.\ncase skipItem\nSkipping behavior that specifies skipping to the next or previous item in the player\u2019s playlist.\nRelationships\nConforms To\nSendable\nSee Also\nConfiguring Skipping Behavior\nvar isSkipForwardEnabled: Bool\nA Boolean value that indicates whether forward-skipping is available.\nvar isSkipBackwardEnabled: Bool\nA Boolean value that indicates whether backward-skipping is available.\nvar skippingBehavior: AVPlayerViewControllerSkippingBehavior\nThe behavior that skipping gestures perform."
    },
    {
        "title": "requiresLinearPlayback",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1627633-requireslinearplayback",
        "html": "Discussion\n\nIf this value is false (the default), the controller\u2019s user interface allows a user to fast-forward, scrub, or skip ahead to content later in the player\u2019s presentation. To prevent the user from skipping content\u2014for example, while presenting a legal notice or other mandatory interstitial content\u2014set this property\u2019s value to true.\n\nTo track when the player is presenting content for which you might require linear playback, use the interstitialTimeRanges property of the view controller\u2019s player item to define the time ranges of the interstitial content. The view controller then sends playerViewController(_:willPresent:) and playerViewController(_:didPresent:) messages to its delegate object when the content is playing. Implement these methods to enable or disable the requiresLinearPlayback property as needed."
    },
    {
        "title": "skippingBehavior",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1650947-skippingbehavior",
        "html": "Discussion\n\nThis property lets you override the default skipping behavior in tvOS, which is to skip forward or backward 10 seconds when a user presses the right or left sides, respectively, of the Touch surface on the Siri Remote.\n\nSee Also\nConfiguring Skipping Behavior\nvar isSkipForwardEnabled: Bool\nA Boolean value that indicates whether forward-skipping is available.\nvar isSkipBackwardEnabled: Bool\nA Boolean value that indicates whether backward-skipping is available.\nenum AVPlayerViewControllerSkippingBehavior\nConstants that represent the player view controller\u2019s skipping behavior."
    },
    {
        "title": "exitsFullScreenWhenPlaybackEnds",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/2875793-exitsfullscreenwhenplaybackends",
        "html": "Discussion\n\nIf you enqueue multiple player items, the player exits full-screen mode after it plays all remaining items in the queue.\n\nThe default value is false.\n\nSee Also\nManaging Full-Screen Behavior\nvar entersFullScreenWhenPlaybackBegins: Bool\nA Boolean value that determines whether the player automatically displays in full screen when the user taps the play button."
    },
    {
        "title": "canStartPictureInPictureAutomaticallyFromInline",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3689455-canstartpictureinpictureautomati",
        "html": "See Also\nConfiguring Picture in Picture\nvar allowsPictureInPicturePlayback: Bool\nA Boolean value that indicates whether the player allows Picture in Picture playback."
    },
    {
        "title": "entersFullScreenWhenPlaybackBegins",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/2875792-entersfullscreenwhenplaybackbegi",
        "html": "Discussion\n\nThe default value is false.\n\nSee Also\nManaging Full-Screen Behavior\nvar exitsFullScreenWhenPlaybackEnds: Bool\nA Boolean value that indicates whether the player exits full-screen mode when playback ends."
    },
    {
        "title": "allowsPictureInPicturePlayback",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1615821-allowspictureinpictureplayback",
        "html": "Discussion\n\nSet this value to false to disable Picture in Picture playback. The default value is true.\n\nSee Also\nConfiguring Picture in Picture\nvar canStartPictureInPictureAutomaticallyFromInline: Bool\nA Boolean value that indicates whether Picture in Picture starts automatically when transitioning to the background when the view controller presents its content inline."
    },
    {
        "title": "AVPlaybackSpeed",
        "url": "https://developer.apple.com/documentation/avkit/avplaybackspeed",
        "html": "Topics\nRetrieving Default Speeds\nclass var systemDefaultSpeeds: [AVPlaybackSpeed]\nA list of playback speeds the system uses by default.\nCreating a Playback Speed\ninit(rate: Float, localizedName: String)\nCreates a playback speed with a rate and localized name.\nInspecting Speed Details\nvar rate: Float\nThe playback rate to use when you select this speed.\nvar localizedName: String\nA localized name for a speed that\u2019s suitable for display in a user interface.\nvar localizedNumericName: String\nA localized numeric name for a speed that\u2019s suitable for display in a user interface.\nRelationships\nInherits From\nNSObject\nSee Also\nConfiguring Playback Speed\nvar speeds: [AVPlaybackSpeed]\nA list of user-selectable playback speeds to show in the playback speed control.\nvar selectedSpeed: AVPlaybackSpeed?\nThe currently selected playback speed.\nfunc selectSpeed(AVPlaybackSpeed)\nSelects a specified playback speed."
    },
    {
        "title": "pictureInPictureButtonStopImage",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/3172687-pictureinpicturebuttonstopimage",
        "html": "See Also\nRetrieving Picture in Picture Template Images\nclass var pictureInPictureButtonStartImage: UIImage\nA system-default template image for the button that starts Picture in Picture in your app.\nclass func pictureInPictureButtonStartImage(compatibleWith: UITraitCollection?) -> UIImage\nReturns a system-default template image that\u2019s compatible with a trait collection for the button that starts Picture in Picture in your app.\nclass func pictureInPictureButtonStopImage(compatibleWith: UITraitCollection?) -> UIImage\nReturns a system-default template image that\u2019s compatible with a trait collection for the button that stops Picture in Picture in your app."
    },
    {
        "title": "selectedSpeed",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3955799-selectedspeed",
        "html": "Discussion\n\nThis value reflects the associated player\u2019s defaultRate property value. If you set the defaultRate to a value that doesn\u2019t match a speed contained in the speeds property, the system sets this value to nil.\n\nSee Also\nConfiguring Playback Speed\nvar speeds: [AVPlaybackSpeed]\nA list of user-selectable playback speeds to show in the playback speed control.\nfunc selectSpeed(AVPlaybackSpeed)\nSelects a specified playback speed.\nclass AVPlaybackSpeed\nAn object that represents a user-selectable playback speed in a playback user interface."
    },
    {
        "title": "pictureInPictureButtonStartImage",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/3172686-pictureinpicturebuttonstartimage",
        "html": "See Also\nRetrieving Picture in Picture Template Images\nclass var pictureInPictureButtonStopImage: UIImage\nA system-default template image for the button that stops Picture in Picture in your app.\nclass func pictureInPictureButtonStartImage(compatibleWith: UITraitCollection?) -> UIImage\nReturns a system-default template image that\u2019s compatible with a trait collection for the button that starts Picture in Picture in your app.\nclass func pictureInPictureButtonStopImage(compatibleWith: UITraitCollection?) -> UIImage\nReturns a system-default template image that\u2019s compatible with a trait collection for the button that stops Picture in Picture in your app."
    },
    {
        "title": "speeds",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3955800-speeds",
        "html": "Discussion\n\nBy default, this property value equals systemDefaultSpeeds. Setting this property to an empty array hides the playback speed selection user interface.\n\nTo set the playback speed programmatically, call the selectSpeed(_:) method, or set the value of the defaultRate property on the view controller\u2019s associated AVPlayer object.\n\nSee Also\nConfiguring Playback Speed\nvar selectedSpeed: AVPlaybackSpeed?\nThe currently selected playback speed.\nfunc selectSpeed(AVPlaybackSpeed)\nSelects a specified playback speed.\nclass AVPlaybackSpeed\nAn object that represents a user-selectable playback speed in a playback user interface."
    },
    {
        "title": "canStopPictureInPicture",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/3633721-canstoppictureinpicture",
        "html": "Discussion\n\nWhen this value is true, calling stopPictureInPicture() stops the active Picture in Picture session. Apps should update the state of UI that starts Picture in Picture when this property value changes.\n\nThie value is key-value observable.\n\nSee Also\nControlling Picture in Picture Playback\nvar canStartPictureInPictureAutomaticallyFromInline: Bool\nA Boolean value that indicates whether Picture in Picture starts automatically when the controller embeds its content inline and the app transitions to the background.\nfunc startPictureInPicture()\nStarts Picture in Picture, if possible.\nfunc stopPictureInPicture()\nStops Picture in Picture, if active."
    },
    {
        "title": "AVContentProposal",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposal",
        "html": "Overview\n\nA content proposal object models the data about the proposed content such as its title, preview image, presentation time, and content URL. You make a content proposal eligible for presentation by setting it as the nextContentProposal of the current AVPlayerItem.\n\nlet proposal = AVContentProposal(contentTimeForTransition: time,\n                                 title: title,\n                                 previewImage: image)\n// Set the proposal as the nextContentProposal of the current player item\ncurrentPlayerItem.nextContentProposal = proposal\n\nTopics\nCreating a Content Proposal\ninit(contentTimeForTransition: CMTime, title: String, previewImage: UIImage?)\nCreates a new content proposal with the specified transition time, title, and preview image.\nConfiguring the Content Proposal\nvar contentTimeForTransition: CMTime\nThe time within the timeline of the current player item when the content proposal presentation should begin.\nvar title: String\nThe title of the proposed content.\nvar previewImage: UIImage?\nThe preview image of the proposed item.\nvar metadata: [AVMetadataItem]\nOptional custom metadata associated with the proposed item.\nvar automaticAcceptanceInterval: TimeInterval\nThe interval between the time playback ends and automatic acceptance of this content proposal.\nvar url: URL?\nThe URL of the proposed content.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nConfiguring the Proposal\nvar contentProposal: AVContentProposal?\nA prosal of content to play.\nvar dateOfAutomaticAcceptance: Date?\nThe date that the system automatically accepts a proposal if the user doesn\u2019t intervene.\nvar playerLayoutGuide: UILayoutGuide\nA layout guide that tracks the size and location of the player view.\nvar preferredPlayerViewFrame: CGRect\nThe preferred presentation frame of the player view while the content proposal is active."
    },
    {
        "title": "isPictureInPictureSupported()",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller/1614693-ispictureinpicturesupported",
        "html": "Return Value\n\ntrue if the current device supports Picture in Picture playback, otherwise false.\n\nDiscussion\n\nIf Picture in Picture isn\u2019t supported on the current device, attempting to initialize a Picture in Picture controller returns nil.\n\nSee Also\nAccessing Picture in Picture State\nvar isPictureInPicturePossible: Bool\nA Boolean value that indicates whether Picture in Picture playback is currently possible.\nvar isPictureInPictureActive: Bool\nA Boolean value that indicates whether the Picture in Picture window is onscreen.\nvar isPictureInPictureSuspended: Bool\nA Boolean value that indicates whether the system suspends the controller\u2019s Picture in Picture window."
    },
    {
        "title": "init(player:)",
        "url": "https://developer.apple.com/documentation/avkit/videoplayer/3580189-init",
        "html": "Parameters\nplayer\n\nThe player that plays the audiovisual content.\n\nSee Also\nCreating a Video Player\ninit(player: AVPlayer?, videoOverlay: () -> VideoOverlay)\nCreates a video-player user interface for the player object."
    },
    {
        "title": "init(player:videoOverlay:)",
        "url": "https://developer.apple.com/documentation/avkit/videoplayer/3580190-init",
        "html": "Parameters\nplayer\n\nThe player that plays the audiovisual content.\n\nvideoOverlay\n\nA closure that returns a VideoOverlay view to present over the player\u2019s video content. This view is fully interactive, but is placed below the system-provided playback controls, and only receives unhandled events.\n\nSee Also\nCreating a Video Player\ninit(player: AVPlayer?)\nCreates a video-player user interface for the player object.\nAvailable when VideoOverlay is EmptyView."
    },
    {
        "title": "pictureInPictureDelegate",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/3172689-pictureinpicturedelegate",
        "html": "See Also\nConfiguring Picture in Picture\nvar allowsPictureInPicturePlayback: Bool\nA Boolean value that determines whether the player view allows Picture in Picture playback.\nprotocol AVPlayerViewPictureInPictureDelegate\nA protocol that defines the methods to implement to respond to Picture in Picture playback events."
    },
    {
        "title": "allowsMagnification",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/3943281-allowsmagnification",
        "html": "Discussion\n\nThe default value is false. This property only affects whether the magnify gesture triggers magnification. Your app can still programmatically change magnification even when the value of this is false, which matches the behavior of NSScrollView.\n\nSee Also\nMagnifying Video\nvar magnification: CGFloat\nThe factor by which the video\u2019s view is currently scaled.\nfunc setMagnification(CGFloat, centeredAt: CGPoint)\nScales the video\u2019s view by a specified factor, and centers the result on a specified point."
    },
    {
        "title": "videoFrameAnalysisTypes",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/4179451-videoframeanalysistypes",
        "html": "See Also\nConfiguring Frame Analysis\nvar allowsVideoFrameAnalysis: Bool\nA Boolean value that indicates whether to perform video frame analysis.\nstruct AVVideoFrameAnalysisType\nConstants that define the types of analysis a player view controller may perform on a paused video frame."
    },
    {
        "title": "playerViewController(_:restoreUserInterfaceForFullScreenExitWithCompletionHandler:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/3751764-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\ncompletionHandler\n\nThe completion handler to call for the system to finish restoring your user interface. You must invoke this callback with a value of true.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func playerViewControllerRestoreUserInterfaceForFullScreenExit(_ playerViewController: AVPlayerViewController) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nResponding to Full-Screen Presentations\nfunc playerViewController(AVPlayerViewController, willBeginFullScreenPresentationWithAnimationCoordinator: UIViewControllerTransitionCoordinator)\nTells the delegate when the player view controller is about to start full-screen display.\nfunc playerViewController(AVPlayerViewController, willEndFullScreenPresentationWithAnimationCoordinator: UIViewControllerTransitionCoordinator)\nTells the delegate when the player view controller is about to end full-screen display."
    },
    {
        "title": "AVVideoFrameAnalysisType",
        "url": "https://developer.apple.com/documentation/avkit/avvideoframeanalysistype",
        "html": "Topics\nAnalysis types\nstatic var `default`: AVVideoFrameAnalysisType\nThe default types of analysis to perform.\nstatic var text: AVVideoFrameAnalysisType\nA type that finds text in a paused video frame.\nstatic var subject: AVVideoFrameAnalysisType\nA type that finds a subject that a user can copy out of frame.\nstatic var visualSearch: AVVideoFrameAnalysisType\nA type that identifies objects, landmarks, art, and so on.\nstatic var machineReadableCode: AVVideoFrameAnalysisType\nA type that recognizes machine-readable codes, such as QR codes.\nInitializers\ninit(rawValue: UInt)\nCreates a type from a string value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nConfiguring Frame Analysis\nvar allowsVideoFrameAnalysis: Bool\nA Boolean value that indicates whether to perform video frame analysis.\nvar toggleLookupAction: UIAction\nAn action that enables the visual lookup interface.\nvar videoFrameAnalysisTypes: AVVideoFrameAnalysisType\nThe types of analysis a player view controller performs on a paused video frame."
    },
    {
        "title": "contextualActionsPreviewImage",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/4131585-contextualactionspreviewimage",
        "html": "Discussion\n\nUse this to enhance a contextual action with more context. For example, if the action presents a button to jump back in time, show a preview frame of where in the movie the action skips to.\n\nNote\n\nThe system only displays an image if the contextualActions property contains a single value.\n\nSee Also\nConfiguring the visionOS Player UI\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar contextualActionsInfoView: UIView\nA view the system shows adjacent to the contextual actions that\u2019s suitable for showing related information.\nBeta\nvar requiresMonoscopicViewingMode: Bool\nA Boolean value that indicates whether to permit playback of 2D video content only.\nBeta"
    },
    {
        "title": "contextualActionsInfoView",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/4131584-contextualactionsinfoview",
        "html": "Discussion\n\nUse this view to add additional metadata, information, and artwork as subviews.\n\nSee Also\nConfiguring the visionOS Player UI\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar contextualActionsPreviewImage: UIImage?\nAn image to show alongside the contextual actions.\nBeta\nvar requiresMonoscopicViewingMode: Bool\nA Boolean value that indicates whether to permit playback of 2D video content only.\nBeta"
    },
    {
        "title": "unobscuredContentGuide",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/2876485-unobscuredcontentguide",
        "html": "See Also\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeTransportBar: Bool\nA Boolean value that indicates whether the player shows the transport bar and related controls.\nvar playbackControlsIncludeInfoViews: Bool\nA Boolean value that indicates whether the player presents video metadata, navigation markers, and playback settings views when the user requests them.\nvar transportBarIncludesTitleView: Bool\nA Boolean value that indicates whether the player user interface shows the title view above the scrubber.\nvar transportBarCustomMenuItems: [UIMenuElement]\nAn array of actions and menus to display with the default player controls.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar customOverlayViewController: UIViewController?\nA view controller that presents custom content over the player view.\nvar customInfoViewController: UIViewController?\nA view controller that provides client-specific content and controls alongside system-provided information and settings panels.\nDeprecated"
    },
    {
        "title": "customOverlayViewController",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3229856-customoverlayviewcontroller",
        "html": "Discussion\n\nThe system presents the overlay view when the user swipes up on the Siri Remote during playback when the transport bar is hidden, or when they select a button when the transport bar is visible.\n\nImportant\n\nSet a custom overlay view controller instead of installing a custom swipe gesture recognizer.\n\nSee Also\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeTransportBar: Bool\nA Boolean value that indicates whether the player shows the transport bar and related controls.\nvar playbackControlsIncludeInfoViews: Bool\nA Boolean value that indicates whether the player presents video metadata, navigation markers, and playback settings views when the user requests them.\nvar transportBarIncludesTitleView: Bool\nA Boolean value that indicates whether the player user interface shows the title view above the scrubber.\nvar transportBarCustomMenuItems: [UIMenuElement]\nAn array of actions and menus to display with the default player controls.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar unobscuredContentGuide: UILayoutGuide\nA layout guide that represents an area that fixed-position playback controls don\u2019t obscure when visible.\nvar customInfoViewController: UIViewController?\nA view controller that provides client-specific content and controls alongside system-provided information and settings panels.\nDeprecated"
    },
    {
        "title": "playbackControlsIncludeTransportBar",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/2874218-playbackcontrolsincludetransport",
        "html": "Discussion\n\nSet this property to false, and set showsPlaybackControls to true, to selectively prevent the player from presenting the transport bar during user interaction. Changing the value of this property doesn\u2019t immediately change the visibility of the transport bar.\n\nThe default value is true.\n\nSee Also\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeInfoViews: Bool\nA Boolean value that indicates whether the player presents video metadata, navigation markers, and playback settings views when the user requests them.\nvar transportBarIncludesTitleView: Bool\nA Boolean value that indicates whether the player user interface shows the title view above the scrubber.\nvar transportBarCustomMenuItems: [UIMenuElement]\nAn array of actions and menus to display with the default player controls.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar customOverlayViewController: UIViewController?\nA view controller that presents custom content over the player view.\nvar unobscuredContentGuide: UILayoutGuide\nA layout guide that represents an area that fixed-position playback controls don\u2019t obscure when visible.\nvar customInfoViewController: UIViewController?\nA view controller that provides client-specific content and controls alongside system-provided information and settings panels.\nDeprecated"
    },
    {
        "title": "customInfoViewController",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/2868498-custominfoviewcontroller",
        "html": "Deprecated\n\nUse customInfoViewControllers instead.\n\nDiscussion\n\nUse preferredContentSize to provide the desired view size for the view.\n\nSee Also\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeTransportBar: Bool\nA Boolean value that indicates whether the player shows the transport bar and related controls.\nvar playbackControlsIncludeInfoViews: Bool\nA Boolean value that indicates whether the player presents video metadata, navigation markers, and playback settings views when the user requests them.\nvar transportBarIncludesTitleView: Bool\nA Boolean value that indicates whether the player user interface shows the title view above the scrubber.\nvar transportBarCustomMenuItems: [UIMenuElement]\nAn array of actions and menus to display with the default player controls.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar customOverlayViewController: UIViewController?\nA view controller that presents custom content over the player view.\nvar unobscuredContentGuide: UILayoutGuide\nA layout guide that represents an area that fixed-position playback controls don\u2019t obscure when visible."
    },
    {
        "title": "appliesPreferredDisplayCriteriaAutomatically",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/2935635-appliespreferreddisplaycriteriaa",
        "html": "Discussion\n\nIf this property value is true, the player uses the preferred display criteria of the video asset when playing the content in fullscreen. The display criteria is reset to the display\u2019s default criteria when full-screen playback ends. Don\u2019t change this value during full-screen presentation unless you\u2019ve disposed of the player or player item.\n\nSee Also\nConfiguring Presentation\nvar showsPlaybackControls: Bool\nA Boolean value that indicates whether the player view controller shows playback controls.\nvar contentOverlayView: UIView?\nA view that displays between the video content and the playback controls.\nvar videoGravity: AVLayerVideoGravity\nA string that specifies how the video displays within the bounds of the view controller\u2019s view.\nvar videoBounds: CGRect\nThe size and position of the video image within the bounds of the view controller\u2019s view.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available."
    },
    {
        "title": "playbackControlsIncludeInfoViews",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/2874221-playbackcontrolsincludeinfoviews",
        "html": "Discussion\n\nThis property determines whether the player shows views for video metadata, navigation markers, and playback settings. Set this property value to false, and showsPlaybackControls to true, to selectively prevent the player from displaying its information and setting panels. Changing the value of this property doesn\u2019t immediately change the visibility of the info views.\n\nThe default value is true.\n\nSee Also\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeTransportBar: Bool\nA Boolean value that indicates whether the player shows the transport bar and related controls.\nvar transportBarIncludesTitleView: Bool\nA Boolean value that indicates whether the player user interface shows the title view above the scrubber.\nvar transportBarCustomMenuItems: [UIMenuElement]\nAn array of actions and menus to display with the default player controls.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar customOverlayViewController: UIViewController?\nA view controller that presents custom content over the player view.\nvar unobscuredContentGuide: UILayoutGuide\nA layout guide that represents an area that fixed-position playback controls don\u2019t obscure when visible.\nvar customInfoViewController: UIViewController?\nA view controller that provides client-specific content and controls alongside system-provided information and settings panels.\nDeprecated"
    },
    {
        "title": "showsTimecodes",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3566336-showstimecodes",
        "html": "Discussion\n\nThe default value is false.\n\nSee Also\nConfiguring Presentation\nvar showsPlaybackControls: Bool\nA Boolean value that indicates whether the player view controller shows playback controls.\nvar contentOverlayView: UIView?\nA view that displays between the video content and the playback controls.\nvar videoGravity: AVLayerVideoGravity\nA string that specifies how the video displays within the bounds of the view controller\u2019s view.\nvar videoBounds: CGRect\nThe size and position of the video image within the bounds of the view controller\u2019s view.\nvar appliesPreferredDisplayCriteriaAutomatically: Bool\nA Boolean value that indicates whether the view controller automatically sets the screen\u2019s display criteria to match that of the currently playing asset."
    },
    {
        "title": "videoBounds",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1615826-videobounds",
        "html": "Discussion\n\nThe size and position of this rectangle depend on the aspect ratio of the media (like 16:9 or 4:3), the bounds of the player view controller\u2019s view, and the view controller\u2019s videoGravity.\n\nThis property is key-value observable.\n\nSee Also\nConfiguring Presentation\nvar showsPlaybackControls: Bool\nA Boolean value that indicates whether the player view controller shows playback controls.\nvar contentOverlayView: UIView?\nA view that displays between the video content and the playback controls.\nvar videoGravity: AVLayerVideoGravity\nA string that specifies how the video displays within the bounds of the view controller\u2019s view.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar appliesPreferredDisplayCriteriaAutomatically: Bool\nA Boolean value that indicates whether the view controller automatically sets the screen\u2019s display criteria to match that of the currently playing asset."
    },
    {
        "title": "playerViewController(_:willEndFullScreenPresentationWithAnimationCoordinator:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/3173175-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\ncoordinator\n\nThe transition coordinator to use when coordinating animations.\n\nSee Also\nResponding to Full-Screen Presentations\nfunc playerViewController(AVPlayerViewController, willBeginFullScreenPresentationWithAnimationCoordinator: UIViewControllerTransitionCoordinator)\nTells the delegate when the player view controller is about to start full-screen display.\nfunc playerViewController(AVPlayerViewController, restoreUserInterfaceForFullScreenExitWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the app\u2019s user interface after returning from a full-screen presentation."
    },
    {
        "title": "videoGravity",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1615825-videogravity",
        "html": "Discussion\n\nThe player view controller supports the following video gravity values: resizeAspect, resizeAspectFill, and resize.\n\nThe default value is resizeAspect.\n\nSee Also\nConfiguring Presentation\nvar showsPlaybackControls: Bool\nA Boolean value that indicates whether the player view controller shows playback controls.\nvar contentOverlayView: UIView?\nA view that displays between the video content and the playback controls.\nvar videoBounds: CGRect\nThe size and position of the video image within the bounds of the view controller\u2019s view.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar appliesPreferredDisplayCriteriaAutomatically: Bool\nA Boolean value that indicates whether the view controller automatically sets the screen\u2019s display criteria to match that of the currently playing asset."
    },
    {
        "title": "contentOverlayView",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1615835-contentoverlayview",
        "html": "Discussion\n\nUse the content overlay view to add noninteractive custom views, such as a logo or watermark, between the video content and the controls.\n\nSee Also\nConfiguring Presentation\nvar showsPlaybackControls: Bool\nA Boolean value that indicates whether the player view controller shows playback controls.\nvar videoGravity: AVLayerVideoGravity\nA string that specifies how the video displays within the bounds of the view controller\u2019s view.\nvar videoBounds: CGRect\nThe size and position of the video image within the bounds of the view controller\u2019s view.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar appliesPreferredDisplayCriteriaAutomatically: Bool\nA Boolean value that indicates whether the view controller automatically sets the screen\u2019s display criteria to match that of the currently playing asset."
    },
    {
        "title": "showsPlaybackControls",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1615824-showsplaybackcontrols",
        "html": "Discussion\n\nSet this property to false if you don\u2019t want the system-provided playback controls visible over your content. Hiding the playback controls can be useful in situations where you need a non-interactive video presentation, such as a video splash screen.\n\nThe default value is true.\n\nImportant\n\nDon\u2019t use this property to change the visibility of the playback controls while the player view controller is onscreen. Doing so creates or destroys user interface elements.\n\nSee Also\nConfiguring Presentation\nvar contentOverlayView: UIView?\nA view that displays between the video content and the playback controls.\nvar videoGravity: AVLayerVideoGravity\nA string that specifies how the video displays within the bounds of the view controller\u2019s view.\nvar videoBounds: CGRect\nThe size and position of the video image within the bounds of the view controller\u2019s view.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar appliesPreferredDisplayCriteriaAutomatically: Bool\nA Boolean value that indicates whether the view controller automatically sets the screen\u2019s display criteria to match that of the currently playing asset."
    },
    {
        "title": "infoViewActions",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3852972-infoviewactions",
        "html": "Discussion\n\nThe Info content view can display up to two custom action controls along its trailing edge. The default value of this property is a single action that plays the current media from the beginning when tapped.\n\nSee Also\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeTransportBar: Bool\nA Boolean value that indicates whether the player shows the transport bar and related controls.\nvar playbackControlsIncludeInfoViews: Bool\nA Boolean value that indicates whether the player presents video metadata, navigation markers, and playback settings views when the user requests them.\nvar transportBarIncludesTitleView: Bool\nA Boolean value that indicates whether the player user interface shows the title view above the scrubber.\nvar transportBarCustomMenuItems: [UIMenuElement]\nAn array of actions and menus to display with the default player controls.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar customOverlayViewController: UIViewController?\nA view controller that presents custom content over the player view.\nvar unobscuredContentGuide: UILayoutGuide\nA layout guide that represents an area that fixed-position playback controls don\u2019t obscure when visible.\nvar customInfoViewController: UIViewController?\nA view controller that provides client-specific content and controls alongside system-provided information and settings panels.\nDeprecated"
    },
    {
        "title": "transportBarCustomMenuItems",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3750341-transportbarcustommenuitems",
        "html": "Discussion\n\nUse this property to display custom pop-up menus in transport bar. This property only supports menu elements of type UIAction and UIMenu, and supports displaying inline one level of submenus.\n\nSee Also\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeTransportBar: Bool\nA Boolean value that indicates whether the player shows the transport bar and related controls.\nvar playbackControlsIncludeInfoViews: Bool\nA Boolean value that indicates whether the player presents video metadata, navigation markers, and playback settings views when the user requests them.\nvar transportBarIncludesTitleView: Bool\nA Boolean value that indicates whether the player user interface shows the title view above the scrubber.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar customOverlayViewController: UIViewController?\nA view controller that presents custom content over the player view.\nvar unobscuredContentGuide: UILayoutGuide\nA layout guide that represents an area that fixed-position playback controls don\u2019t obscure when visible.\nvar customInfoViewController: UIViewController?\nA view controller that provides client-specific content and controls alongside system-provided information and settings panels.\nDeprecated"
    },
    {
        "title": "customInfoViewControllers",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3750340-custominfoviewcontrollers",
        "html": "Discussion\n\nThe system uses a view controller\u2019s title property value as the content tab title. Set this property value before adding it to the array so that the title renders correctly in the player\u2019s user interface.\n\nSimilarly, set a preferredContentSize value on the custom view controllers, or define appropriate auto layout constraints on their views, so the system sizes them correctly in the player user interface.\n\nImportant\n\nThe view with the greatest height determines the height of all of the content views. Set the height of your content views consistently to simplify layout, or verify that your content renders as intended if the system resizes it.\n\nSee Also\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeTransportBar: Bool\nA Boolean value that indicates whether the player shows the transport bar and related controls.\nvar playbackControlsIncludeInfoViews: Bool\nA Boolean value that indicates whether the player presents video metadata, navigation markers, and playback settings views when the user requests them.\nvar transportBarIncludesTitleView: Bool\nA Boolean value that indicates whether the player user interface shows the title view above the scrubber.\nvar transportBarCustomMenuItems: [UIMenuElement]\nAn array of actions and menus to display with the default player controls.\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar customOverlayViewController: UIViewController?\nA view controller that presents custom content over the player view.\nvar unobscuredContentGuide: UILayoutGuide\nA layout guide that represents an area that fixed-position playback controls don\u2019t obscure when visible.\nvar customInfoViewController: UIViewController?\nA view controller that provides client-specific content and controls alongside system-provided information and settings panels.\nDeprecated"
    },
    {
        "title": "previousChannelInterstitialViewController(for:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/3295984-previouschannelinterstitialviewc",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nDiscussion\n\nThe framework calls this method when the user initiates, but hasn\u2019t yet committed, a change in channel. The framework may call this method while a previous channel\u2019s interstitial view is visible (on screen, or transitioning).\n\nImportant\n\nOnly live video streams support channel skipping. This feature isn\u2019t supported for VOD streams or local media.\n\nSee Also\nResponding to Channel Changes\nfunc playerViewController(AVPlayerViewController, skipToNextChannel: (Bool) -> Void)\nTells the delegate when the user wants to skip to the next channel.\nfunc playerViewController(AVPlayerViewController, skipToPreviousChannel: (Bool) -> Void)\nTells the delegate when the user wants to skip to the previous channel.\nfunc nextChannelInterstitialViewController(for: AVPlayerViewController) -> UIViewController\nAsks the delegate for a view controller that describes the layout of the next channel\u2019s interstitial view."
    },
    {
        "title": "playerViewController(_:skipToNextChannel:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/3295982-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\ncompletion\n\nA completion callback to invoke to dismiss the channel\u2019s interstitial view.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func playerViewControllerSkipToNextChannel(_ playerViewController: AVPlayerViewController) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nTo enable channel skipping, adopt this method and replace the current player item with one that reflects the next channel\u2019s content, and call the completion handler to dismiss the channel\u2019s interstitial view. Each call to this method should advance one channel, relative to the previous request, even if the prior request hasn\u2019t yet completed.\n\nImportant\n\nOnly live video streams support channel skipping. This feature isn\u2019t supported for VOD streams or local media.\n\nSee Also\nResponding to Channel Changes\nfunc playerViewController(AVPlayerViewController, skipToPreviousChannel: (Bool) -> Void)\nTells the delegate when the user wants to skip to the previous channel.\nfunc nextChannelInterstitialViewController(for: AVPlayerViewController) -> UIViewController\nAsks the delegate for a view controller that describes the layout of the next channel\u2019s interstitial view.\nfunc previousChannelInterstitialViewController(for: AVPlayerViewController) -> UIViewController\nAsks the delegate for a view controller that describes the layout of the previous channel\u2019s interstitial view."
    },
    {
        "title": "AVPlayerViewControllerAnimationCoordinator",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrolleranimationcoordinator",
        "html": "Topics\nCoordinating Animations\nfunc addCoordinatedAnimations((() -> Void)?, completion: ((Bool) -> Void)?)\nAdds animations to perform alongside the playback controls' visibility animation.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nResponding to Transport Bar Changes\nfunc playerViewController(AVPlayerViewController, willTransitionToVisibilityOfTransportBar: Bool, with: AVPlayerViewControllerAnimationCoordinator)\nTells the delegate when the transport bar\u2019s visibility is about to change."
    },
    {
        "title": "playerViewController(_:didSelect:in:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1627625-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nmediaSelectionOption\n\nThe user\u2019s selected media option, which may be nil.\n\nmediaSelectionGroup\n\nThe media selection group in which the selected media option exists."
    },
    {
        "title": "playerViewController(_:didReject:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/2181735-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nproposal\n\nThe content proposal.\n\nSee Also\nResponding to Content Proposals\nfunc playerViewController(AVPlayerViewController, shouldPresent: AVContentProposal) -> Bool\nAsks the delegate whether the player view controller presents a content proposal.\nfunc playerViewController(AVPlayerViewController, didAccept: AVContentProposal)\nTells the delegate when the user accepts the proposed content."
    },
    {
        "title": "playerViewController(_:didAccept:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/2181733-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nproposal\n\nThe content proposal.\n\nDiscussion\n\nImplement this method to replace the player\u2019s current player item with a player item for the proposed content.\n\nSee Also\nResponding to Content Proposals\nfunc playerViewController(AVPlayerViewController, shouldPresent: AVContentProposal) -> Bool\nAsks the delegate whether the player view controller presents a content proposal.\nfunc playerViewController(AVPlayerViewController, didReject: AVContentProposal)\nTells the delegate when the user rejects the proposed content."
    },
    {
        "title": "playerViewController(_:willPresent:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1627631-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\ninterstitial\n\nThe time range of interstitial content that\u2019s about to begin.\n\nDiscussion\n\nInterstitial content is material unrelated to the main content of a presentation that may have special playback options or requirements. For example, implement this method to record when a user begins viewing an advertisement, or to enable the player view controller\u2019s requiresLinearPlayback property to prevent skipping mandatory legal notices.\n\nUse the interstitialTimeRanges property to identify the time ranges of interstitial content in the media timeline.\n\nSee Also\nResponding to Interstitial Content Playback Events\nfunc playerViewController(AVPlayerViewController, didPresent: AVInterstitialTimeRange)\nTells the delegate when the player view controller finishes playing a range of interstitial content."
    },
    {
        "title": "playerViewController(_:didPresent:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1627624-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\ninterstitial\n\nThe time range of interstitial content that\u2019s finished playback.\n\nDiscussion\n\nInterstitial content is material that\u2019s unrelated to the main content and may have special playback options or requirements. For example, implement this method to record when a user begins viewing an advertisement, or to enable the player view controller\u2019s requiresLinearPlayback property to prevent skipping mandatory legal notices.\n\nUse the interstitialTimeRanges property to identify the time ranges of interstitial content in the media timeline.\n\nSee Also\nResponding to Interstitial Content Playback Events\nfunc playerViewController(AVPlayerViewController, willPresent: AVInterstitialTimeRange)\nTells the delegate when the player view controller is about to start playing a range of interstitial content."
    },
    {
        "title": "playerViewController(_:willResumePlaybackAfterUserNavigatedFrom:to:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1627629-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\noldTime\n\nThe current playback time before the user began navigating.\n\ntargetTime\n\nThe new time where playback is about to resume.\n\nDiscussion\n\nUnlike the timeJumpedNotification notification, this method fires only for complete, user-initiated navigation events. For example, if the user begins scrubbing through the media timeline and pauses several times before resuming playback, the player view controller calls this method only once.\n\nYou can use this method to present interstitial content before resuming playback, however, it\u2019s recommended to use playerViewController(_:timeToSeekAfterUserNavigatedFrom:to:) for this purpose.\n\nSee Also\nResponding to Navigation Events\nfunc playerViewController(AVPlayerViewController, timeToSeekAfterUserNavigatedFrom: CMTime, to: CMTime) -> CMTime\nTells the delegate when the user skips, scrubs, or otherwise navigates to a new time and wants to resume playback at the target time.\nfunc skipToPreviousItem(for: AVPlayerViewController)\nTells the delegate when the user requests skipping to the previous item in the timeline.\nfunc skipToNextItem(for: AVPlayerViewController)\nTells the delegate when the user requests skipping to the next item in the timeline."
    },
    {
        "title": "playerViewController(_:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1615838-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\ncompletionHandler\n\nYou must call the completion handler with a value of true to allow the system to finish restoring your app\u2019s user interface.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func playerViewControllerRestoreUserInterfaceForPictureInPictureStop(_ playerViewController: AVPlayerViewController) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nImplement this method to reestablish your playback user interface when PiP ends. The framework calls this method no matter how PiP ends, whether it\u2019s because the user ended playback, the user tapped the button to return ongoing video playback to your app, or the video finished playing on its own.\n\nSee Also\nResponding to Picture in Picture Life Cycle Events\nfunc playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart(AVPlayerViewController) -> Bool\nAsks the delegate whether the player view controller automatically dismisses itself when Picture in Picture starts.\nfunc playerViewControllerWillStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to start.\nfunc playerViewControllerDidStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture starts.\nfunc playerViewController(AVPlayerViewController, failedToStartPictureInPictureWithError: Error)\nTells the delegate when Picture in Picture fails to start.\nfunc playerViewControllerWillStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to stop.\nfunc playerViewControllerDidStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture stops."
    },
    {
        "title": "playerViewController(_:failedToStartPictureInPictureWithError:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1615822-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nerror\n\nAn error object that describes the failure.\n\nSee Also\nResponding to Picture in Picture Life Cycle Events\nfunc playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart(AVPlayerViewController) -> Bool\nAsks the delegate whether the player view controller automatically dismisses itself when Picture in Picture starts.\nfunc playerViewControllerWillStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to start.\nfunc playerViewControllerDidStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture starts.\nfunc playerViewControllerWillStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to stop.\nfunc playerViewControllerDidStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture stops.\nfunc playerViewController(AVPlayerViewController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate when Picture in Picture is about to stop so you can restore your app\u2019s user interface."
    },
    {
        "title": "playerViewController(_:timeToSeekAfterUserNavigatedFrom:to:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1650960-playerviewcontroller",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\noldTime\n\nThe current playback time before the user began navigating.\n\ntargetTime\n\nThe time to which the user navigated.\n\nReturn Value\n\nThe time at which to begin playback.\n\nDiscussion\n\nThe framework calls this method prior to beginning playback after a user-initiated scrubbing request. You can return a time value other than the specified target time if needed to enforce certain business rules. For instance, you may want to return a different time to prevent users from skipping past ad breaks in your program.\n\nSee Also\nResponding to Navigation Events\nfunc playerViewController(AVPlayerViewController, willResumePlaybackAfterUserNavigatedFrom: CMTime, to: CMTime)\nTells the delegate when the user navigates to a new time and playback is about to begin.\nfunc skipToPreviousItem(for: AVPlayerViewController)\nTells the delegate when the user requests skipping to the previous item in the timeline.\nfunc skipToNextItem(for: AVPlayerViewController)\nTells the delegate when the user requests skipping to the next item in the timeline."
    },
    {
        "title": "playerViewControllerDidStopPictureInPicture(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1615819-playerviewcontrollerdidstoppictu",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nDiscussion\n\nDon\u2019t restore your app\u2019s user interface in your implementation of this method. Instead, do it in the playerViewController(_:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:) method.\n\nSee Also\nResponding to Picture in Picture Life Cycle Events\nfunc playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart(AVPlayerViewController) -> Bool\nAsks the delegate whether the player view controller automatically dismisses itself when Picture in Picture starts.\nfunc playerViewControllerWillStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to start.\nfunc playerViewControllerDidStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture starts.\nfunc playerViewController(AVPlayerViewController, failedToStartPictureInPictureWithError: Error)\nTells the delegate when Picture in Picture fails to start.\nfunc playerViewControllerWillStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to stop.\nfunc playerViewController(AVPlayerViewController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate when Picture in Picture is about to stop so you can restore your app\u2019s user interface."
    },
    {
        "title": "playerViewControllerWillStopPictureInPicture(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1615827-playerviewcontrollerwillstoppict",
        "html": "Parameters\nplayerViewController\n\nThe player view controller to which you\u2019ve assigned the delegate.\n\nDiscussion\n\nImplement this method to update the state of your user interface, like presenting or enabling playback controls.\n\nSee Also\nResponding to Picture in Picture Life Cycle Events\nfunc playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart(AVPlayerViewController) -> Bool\nAsks the delegate whether the player view controller automatically dismisses itself when Picture in Picture starts.\nfunc playerViewControllerWillStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to start.\nfunc playerViewControllerDidStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture starts.\nfunc playerViewController(AVPlayerViewController, failedToStartPictureInPictureWithError: Error)\nTells the delegate when Picture in Picture fails to start.\nfunc playerViewControllerDidStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture stops.\nfunc playerViewController(AVPlayerViewController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate when Picture in Picture is about to stop so you can restore your app\u2019s user interface."
    },
    {
        "title": "Accessing the camera while multitasking on iPad",
        "url": "https://developer.apple.com/documentation/avkit/accessing_the_camera_while_multitasking_on_ipad",
        "html": "Overview\n\nCamera access on iPad is normally limited to apps running in full-screen mode. If your app enters a multitasking mode, such as Split View or Stage Manager, the system disables the camera by default. In iPadOS 16 and later, your app can enable using the camera while multitasking.\n\nRelated Sessions from WWDC22\n\nSession 110429: Discover advancements in iOS camera capture: Depth, focus, and multitasking\n\nMultitasking modes enable people to work with multiple apps at the same time. There are four kinds:\n\nSplit View mode accommodates two different apps, or two windows from the same app, by splitting the screen into resizable views.\n\nSlide Over mode lets users work on an app that slides in front of any open apps.\n\nPicture in Picture mode displays a draggable window over an app.\n\nStage Manager lets users resize windows and see multiple overlapping windows in a single view, group apps for specific tasks or projects, and drag windows between iPad and an externally connected display.\n\nWhen you enable multitasking camera access, your app can run alongside other foreground apps and it no longer receives AVCaptureSession.InterruptionReason.videoDeviceNotAvailableWithMultipleForegroundApps as an interruption reason.\n\nWhen operating the camera capture system, using the multitasking feature introduces the possibility of performance degradation because of other apps consuming resources like memory, CPU, and GPU. Increased device temperature and power usage can lead to frame drops or poor capture quality.\n\nImportant\n\nEnabling multitasking camera access isn\u2019t recommended if your app uses resource-intensive capabilities such as 4K video capture, or Apple ProRAW or Deep Fusion image capture. Even if your app doesn\u2019t use resource-intensive capabilities, you should test it alongside other resource-intensive apps and with Stage Manager to determine if there are performance issues.\n\nFor information about Split View and Slide Over modes, see Use multitasking on your iPad. For information about Stage Manager on iPad, see Move, resize, and organize windows with Stage Manager on iPad.\n\nEnable camera access while multitasking\n\nSet up a capture session to enable your app to capture photos or videos. See Setting Up a Capture Session for more information. You can configure a capture session to allow use of the camera while multitasking if the current environment supports it. To determine if a capture session supports this feature, query its isMultitaskingCameraAccessSupported. If this value is true, you can enable multitasking camera access by setting isMultitaskingCameraAccessEnabled to true, as the example below shows:\n\nlet captureSession = AVCaptureSession()\n\n\n// Configure the capture session.\ncaptureSession.beginConfiguration()\n\n\nif captureSession.isMultitaskingCameraAccessSupported {\n    // Enable use of the camera in multitasking modes.\n    captureSession.isMultitaskingCameraAccessEnabled = true\n}\ncaptureSession.commitConfiguration()\n\n\n// Start the capture session.\ncaptureSession.startRunning()\n\n\nEnabling your app to use the camera while multitasking extends to Picture in Picture mode for video calls using AVKit. See Adopting Picture in Picture for video calls to learn more.\n\nWhile multitasking, after an app finishes recording a video with AVCaptureMovieFileOutput or AVAssetWriter, the system displays an alert one time only to inform the user about the potential for lower-quality videos.\n\nImportant\n\nApps that have a deployment target earlier than iOS 16 require the com.apple.developer.avfoundation.multitasking-camera-access entitlement to enable accessing the camera while multitasking.\n\nConfigure your app for Split View or Slide Over mode\n\nWhen you enable multitasking camera access, your app doesn\u2019t need to run in full-screen mode to use the camera. When it does run in full-screen mode, the camera continues to function in Slide Over mode and when the system presents a Picture in Picture window over your app. If you want to also run your app in Split View or Slide Over mode, follow these steps:\n\nSelect your app target in Xcode\u2019s project editor.\n\nClick the General tab.\n\nDeselect the \u201cRequires full screen\u201d checkbox.\n\nRespond to system pressure\n\nMake your app resilient to increasing system pressure by monitoring the systemPressureState property on AVCaptureDevice, and take action to reduce the impact. When the pressure reaches excessive levels, the capture system shuts down and emits an AVCaptureSessionWasInterrupted notification.\n\nApps can reduce their footprint on the system by lowering the frame rate or requesting lower-resolution, binned, or non-HDR formats. The following code, from the sample app AVMultiCamPiP: Capturing from Multiple Cameras, shows how to reduce the capture frame rate:\n\nlet systemPressureStateObservation = observe(\\.self.device.systemPressureState, \n                                             options: .new) { [weak self] _, change in\n    guard let self = self else { return }\n    guard let systemPressureState = change.newValue else { return }\n\n\n    // The frame rates here are for demonstrative purposes only.\n    // Frame rate throttling can differ depending on your app's camera configuration.\n    let pressureLevel = systemPressureState.level\n    if pressureLevel == .serious || pressureLevel == .critical {\n        do {\n            try self.device.lockForConfiguration()\n\n\n            print(\"WARNING: Reached elevated system pressure level: \\(pressureLevel). Throttling frame rate.\")\n\n\n            self.device.activeVideoMinFrameDuration = CMTimeMake(value: 1, timescale: 20)\n            self.device.activeVideoMaxFrameDuration = CMTimeMake(value: 1, timescale: 15)\n\n\n            self.device.unlockForConfiguration()\n        } catch {\n            print(\"Could not lock device for configuration: \\(error)\")\n        }\n    } else if pressureLevel == .shutdown {\n        print(\"Session stopped running due to system pressure level.\")\n    }\n}\n\n\nHandle camera use interruptions\n\nThe system only allows one app to use the device\u2019s camera at a time. Prepare your app to respond when another app starts using the camera. For example, if your app is running in Stage Manager and another app utilizes the camera, the system suspends your app\u2019s use of the camera until the other app finishes. When the system interrupts your app\u2019s use of the camera, it notifies your app so you can update your user interface.\n\nTo enable the system to notify you when your app\u2019s camera access changes, observe the notifications AVCaptureSessionWasInterrupted and AVCaptureSessionInterruptionEnded, as the example below shows:\n\nfunc addObservers() {\n    let nc = NotificationCenter.default\n\n\n    // Observe when the system interrupts the capture session.\n    nc.addObserver(self,\n                   selector: #selector(handleInterruptionStarted),\n                   name: .AVCaptureSessionWasInterrupted,\n                   object: captureSession)\n\n\n    // Observe when the capture session interruption ends.\n    nc.addObserver(self,\n                   selector: #selector(handleInterruptionEnded),\n                   name: .AVCaptureSessionInterruptionEnded,\n                   object: captureSession)\n}\n\n\nThe notification object\u2019s user information dictionary contains the reason for an interruption. Determining the reason lets you configure your user interface as your camera access changes. Use AVCaptureSessionInterruptionReasonKey to look up the value, as the example below shows:\n\n@objc func handleInterruptionStarted(notification: Notification) {\n    guard let userInfo = notification.userInfo,\n          let reasonValue = userInfo[AVCaptureSessionInterruptionReasonKey] as? Int,\n          let reason = AVCaptureSession.InterruptionReason(rawValue: reasonValue) else {\n        print(\u201cFailed to parse the interruption reason.\u201d)\n        return\n    }\n\n\n    switch reason {\n    case .videoDeviceInUseByAnotherClient:\n        // Show your app's interruption user interface.\n    case .videoDeviceNotAvailableDueToSystemPressure:\n        // Handle an interruption from increasing system pressure.\n    default:\n        // Handle other interruption reasons.\n    }\n}\n\n\nSee Also\nCapture sessions\nSetting Up a Capture Session\nConfigure input devices, output media, preview views, and basic settings before capturing photos or video.\nAVCam: Building a Camera App\nCapture photos and record video using the front and rear iPhone and iPad cameras.\nAVMultiCamPiP: Capturing from Multiple Cameras\nSimultaneously record the output from the front and back cameras into a single movie file by using a multi-camera capture session.\nAVCamBarcode: Detecting barcodes and faces\nIdentify machine readable codes or faces by using the camera.\nclass AVCaptureSession\nAn object that configures capture behavior and coordinates the flow of data from input devices to capture outputs.\nclass AVCaptureMultiCamSession\nA capture session that supports simultaneous capture from multiple inputs of the same media type.\nclass AVCaptureInput\nAn abstract superclass for objects that provide input data to a capture session.\nclass AVCaptureOutput\nAn abstract superclass for objects that provide media output destinations for a capture session.\nclass AVCaptureConnection\nAn object that represents a connection from a capture input to a capture output."
    },
    {
        "title": "Adopting Picture in Picture in a Standard Player",
        "url": "https://developer.apple.com/documentation/avkit/adopting_picture_in_picture_in_a_standard_player",
        "html": "Overview\n\nThe AVPlayerViewController provides the standard video playback experience across iOS, iPadOS, and tvOS. In tvOS, it supports a wide variety of remotes, skipping, scanning, scrubbing, Siri commands, interstitial support, and more. After you configure your audio session and set the project capabilities as described in Configuring the Audio Playback of iOS and tvOS Apps, your player automatically supports PiP playback. When your app runs on a supported device, the user can manage PiP in the standard player.\n\nFamiliarize Yourself with the PiP Controls\n\nPiP playback starts when the user selects the PiP button in the player interface. In iOS and iPadOS, PiP playback starts automatically if your video is playing in full-screen mode and the user exits the app. When a video isn\u2019t filling the entire screen in width, use canStartPictureInPictureAutomaticallyFromInline to indicate a video is the primary focus. In either case, the player window minimizes to a movable, floating window. In general, the system automatically pauses the video upon scene backgrounding, so you don\u2019t need to pause video based on activation state.\n\nTip\n\nIn iOS and iPadOS, you can disable automatic invocation of Picture in Picture in Settings > General > Picture in Picture. Check this setting if you think you\u2019ve set up everything correctly but find that your video doesn\u2019t enter PiP mode when you return to the Home screen.\n\nSelecting the stop button in the PiP interface terminates PiP and restores video playback within your app. AVKit can\u2019t make assumptions about how you designed your app, so it doesn\u2019t know how to properly restore your video playback interface. Instead, it delegates that responsibility to you.\n\nStarting in iOS 14, the PiP user interface provides controls that allow users to skip forward and backward within a video. The system enables these controls by default for apps linked in iOS 14 or later. If you need to restrict skipping content for legal disclaimers or advertisements, use requiresLinearPlayback during the required section of your video. Set this property back to false once you can allow seeking again.\n\nRestore Your Video Playback Interface\n\nTo handle the restore process, your code must adopt the AVPlayerViewControllerDelegate protocol and implement the playerViewController(_:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:) method. The framework calls this method when control returns to your app, giving you the opportunity to determine how to properly restore your video player\u2019s interface. If you originally presented your video player using the present(_:animated:completion:) method of UIViewController, restore your player interface in the same way in the delegate callback method.\n\nfunc playerViewController(_ playerViewController: AVPlayerViewController,\n                          restoreUserInterfaceForPictureInPictureStopWithCompletionHandler completionHandler: @escaping (Bool) -> Void) {\n    present(playerViewController, animated: false) {\n        completionHandler(true)\n    }\n}\n\n\nAvoid adding animations during the swap so you can ensure quick restoration for your user.\n\nImportant\n\nTo allow the system to finish restoring your user interface, call the completion handler with a value of true.\n\nSwap PiP Content in tvOS\n\nIn tvOS, users can play videos in PiP alongside a full-screen video. Video playback can move between PiP and full screen, so your app needs to be ready to handle the swap to provide a seamless PiP experience. When you swap your content with another app, consider your content that\u2019s going into PiP and your content leaving PiP to go full screen. The illustration below shows the life cycle of your full-screen content swapping with another app\u2019s PiP.\n\nThe illustration below shows the life cycle of your app\u2019s PiP content moving to full screen.\n\nWhen you swap content within your app, you need to handle both sides of the life cycle events from both video players. The following sequence shows you the callbacks to expect with a video that swaps content between PiP and full screen.\n\nThe video starting PiP receives playerViewControllerWillStartPictureInPicture(_:), but the system hasn\u2019t started the animations.\n\nThe video going full screen receives playerViewController(_:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:) to restore its full-screen user interface.\n\nThe video going full screen receives playerViewControllerWillStopPictureInPicture(_:), and the system hasn\u2019t started the animations.\n\nThe video starting PiP receives playerViewControllerDidStartPictureInPicture(_:), and the system completes the swap and animations for the video that started PiP.\n\nThe video going full screen receives playerViewControllerDidStopPictureInPicture(_:), and the system completes the swap and animations for the video that moved full screen.\n\nSee Also\nPicture in Picture\nAdopting Picture in Picture Playback in tvOS\nAdd advanced multitasking capabilities to your video apps by using Picture in Picture playback in tvOS.\nAdopting Picture in Picture in a Custom Player\nAdd controls to your custom player user interface to invoke Picture in Picture (PiP) playback.\nAdopting Picture in Picture for video calls\nAdd multitasking capability to your video-call apps by using Picture in Picture (PiP).\nAccessing the camera while multitasking on iPad\nOperate the camera in Split View, Slide Over, Picture in Picture, and Stage Manager modes.\nclass AVPictureInPictureController\nA controller that responds to user-initiated Picture in Picture playback of video in a floating, resizable window."
    },
    {
        "title": "playerViewControllerDidStartPictureInPicture(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1615842-playerviewcontrollerdidstartpict",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nSee Also\nResponding to Picture in Picture Life Cycle Events\nfunc playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart(AVPlayerViewController) -> Bool\nAsks the delegate whether the player view controller automatically dismisses itself when Picture in Picture starts.\nfunc playerViewControllerWillStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to start.\nfunc playerViewController(AVPlayerViewController, failedToStartPictureInPictureWithError: Error)\nTells the delegate when Picture in Picture fails to start.\nfunc playerViewControllerWillStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to stop.\nfunc playerViewControllerDidStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture stops.\nfunc playerViewController(AVPlayerViewController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate when Picture in Picture is about to stop so you can restore your app\u2019s user interface."
    },
    {
        "title": "playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1615817-playerviewcontrollershouldautoma",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nReturn Value\n\ntrue to indicate that the player view controller automatically dismisses itself; otherwise false.\n\nDiscussion\n\nImplement this method and return false to prevent the player view controller from automatically dismissing when Picture in Picture starts.\n\nSee Also\nResponding to Picture in Picture Life Cycle Events\nfunc playerViewControllerWillStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to start.\nfunc playerViewControllerDidStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture starts.\nfunc playerViewController(AVPlayerViewController, failedToStartPictureInPictureWithError: Error)\nTells the delegate when Picture in Picture fails to start.\nfunc playerViewControllerWillStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to stop.\nfunc playerViewControllerDidStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture stops.\nfunc playerViewController(AVPlayerViewController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate when Picture in Picture is about to stop so you can restore your app\u2019s user interface."
    },
    {
        "title": "playerViewControllerWillStartPictureInPicture(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/1615815-playerviewcontrollerwillstartpic",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nDiscussion\n\nImplement this method to update your player user interface, such as hiding or disabling playback controls, prior to PiP starting.\n\nSee Also\nResponding to Picture in Picture Life Cycle Events\nfunc playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart(AVPlayerViewController) -> Bool\nAsks the delegate whether the player view controller automatically dismisses itself when Picture in Picture starts.\nfunc playerViewControllerDidStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture starts.\nfunc playerViewController(AVPlayerViewController, failedToStartPictureInPictureWithError: Error)\nTells the delegate when Picture in Picture fails to start.\nfunc playerViewControllerWillStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to stop.\nfunc playerViewControllerDidStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture stops.\nfunc playerViewController(AVPlayerViewController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate when Picture in Picture is about to stop so you can restore your app\u2019s user interface."
    },
    {
        "title": "playerViewControllerShouldDismiss(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/2874222-playerviewcontrollershoulddismis",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nReturn Value\n\ntrue if the player view controller should dismiss itself; otherwise false.\n\nDiscussion\n\nIf allowed, the player view controller dismisses itself with animation. If you\u2019ve embedded the player view controller in another view, the delegate may need to manually dismiss the view controller.\n\nSee Also\nDismissing the Player View Controller\nfunc playerViewControllerWillBeginDismissalTransition(AVPlayerViewController)\nTells the delegate when the player view controller is about to start its dismissal transition.\nfunc playerViewControllerDidEndDismissalTransition(AVPlayerViewController)\nTells the delegate when the player view controller ends its dismissal transition."
    },
    {
        "title": "playerViewControllerDidEndDismissalTransition(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/2874220-playerviewcontrollerdidenddismis",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nSee Also\nDismissing the Player View Controller\nfunc playerViewControllerShouldDismiss(AVPlayerViewController) -> Bool\nAsks the delegate object whether the player view controller dismisses itself upon request.\nfunc playerViewControllerWillBeginDismissalTransition(AVPlayerViewController)\nTells the delegate when the player view controller is about to start its dismissal transition."
    },
    {
        "title": "playerViewControllerWillBeginDismissalTransition(_:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate/2874219-playerviewcontrollerwillbegindis",
        "html": "Parameters\nplayerViewController\n\nThe player view controller.\n\nSee Also\nDismissing the Player View Controller\nfunc playerViewControllerShouldDismiss(AVPlayerViewController) -> Bool\nAsks the delegate object whether the player view controller dismisses itself upon request.\nfunc playerViewControllerDidEndDismissalTransition(AVPlayerViewController)\nTells the delegate when the player view controller ends its dismissal transition."
    },
    {
        "title": "showsTimecodes",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview/3174919-showstimecodes",
        "html": "Discussion\n\nThe default value is false.\n\nSee Also\nCustomizing the User Interface\nvar controlsStyle: AVPlayerViewControlsStyle\nThe player view\u2019s controls style.\nenum AVPlayerViewControlsStyle\nConstants that indicate which user interface controls the view displays.\nvar showsFrameSteppingButtons: Bool\nA Boolean value that determines whether the player view displays frame stepping buttons.\nvar showsSharingServiceButton: Bool\nA Boolean value that determines whether the player view displays a sharing service button.\nvar showsFullScreenToggleButton: Bool\nA Boolean value that determines whether the player view displays a full-screen toggle button.\nvar contentOverlayView: NSView?\nA view that adds additional custom views between the video content and the controls.\nvar actionPopUpButtonMenu: NSMenu?\nAn action pop-up button menu that the player view displays.\nvar updatesNowPlayingInfoCenter: Bool\nA Boolean value that indicates whether the player view controller updates the Now Playing info center."
    },
    {
        "title": "Adopting Picture in Picture Playback in tvOS",
        "url": "https://developer.apple.com/documentation/avkit/adopting_picture_in_picture_playback_in_tvos",
        "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC20 session 10176: Master Picture in Picture on tvOS.\n\nRequirements\n\nThis sample code project must be run on a physical device.\n\nSee Also\nPicture in Picture\nAdopting Picture in Picture in a Standard Player\nAdd Picture in Picture (PiP) playback to your app using a player view controller.\nAdopting Picture in Picture in a Custom Player\nAdd controls to your custom player user interface to invoke Picture in Picture (PiP) playback.\nAdopting Picture in Picture for video calls\nAdd multitasking capability to your video-call apps by using Picture in Picture (PiP).\nAccessing the camera while multitasking on iPad\nOperate the camera in Split View, Slide Over, Picture in Picture, and Stage Manager modes.\nclass AVPictureInPictureController\nA controller that responds to user-initiated Picture in Picture playback of video in a floating, resizable window."
    },
    {
        "title": "AVCaptureView",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureview",
        "html": "Topics\nConfiguring the Capture Session\nvar session: AVCaptureSession?\nThe view\u2019s associated capture session.\nfunc setSession(AVCaptureSession?, showVideoPreview: Bool, showAudioPreview: Bool)\nSets the view\u2019s capture session.\nCustomizing the View\nvar controlsStyle: AVCaptureViewControlsStyle\nThe style of the capture controls presented by the view.\nenum AVCaptureViewControlsStyle\nConstants that describe the capture view\u2019s supported controls styles.\nvar videoGravity: AVLayerVideoGravity\nA string value that defines how the capture view displays video within its bounds.\nConfiguring the Delegate\nvar delegate: AVCaptureViewDelegate?\nThe capture view\u2019s delegate object.\nprotocol AVCaptureViewDelegate\nThe protocol that defines the methods you can implement to respond to capture view events.\nRecording Media\nvar fileOutput: AVCaptureFileOutput?\nThe capture file output used to record media data.\nRelationships\nInherits From\nNSView\nSee Also\nmacOS Playback and Capture\nImplementing Trimming in a macOS Player\nProvide a QuickTime media-trimming experience in your macOS app.\nclass AVPlayerView\nA view that displays content from a player and presents a native user interface to control playback."
    },
    {
        "title": "continuityDevicePicker(isPresented:onDidConnect:)",
        "url": "https://developer.apple.com/documentation/avkit/videoplayer/4179211-continuitydevicepicker",
        "html": "Parameters\nisPresented\n\nA binding to a Boolean value that indicates whether the picker presents itself in its parent view.\n\nonDidConnect\n\nA closure with a single parameter, an AVContinuityDevice optional, the picker invokes when a person finishes using it. The picker passes a valid continuity device instance if a person selects one and the system successfully connects to it; otherwise, nil.\n\nDiscussion\n\nIn tvOS, the continuity device picker covers the largest possible area within the view that creates it.\n\nSee Also\nMultiplatform Playback and Capture\nstruct VideoPlayer\nA view that displays content from a player and a native user interface to control playback."
    },
    {
        "title": "Trimming and exporting media in visionOS",
        "url": "https://developer.apple.com/documentation/avkit/trimming_and_exporting_media_in_visionos",
        "html": "Overview\n\nYou use AVPlayerViewController to present the system video-player interface in your visionOS app. In addition to its primary role, AVPlayerViewController can also provide a media-trimming experience similar to the interface of QuickTime Player in macOS, like that below.\n\nWhen you enable this feature, people can specify a segment of the media timeline for display. This article describes how to adopt this feature in your app, and shows how to use AVFoundation to export the trimmed result.\n\nDetermine whether the media supports trimming\n\nApps typically provide a user-interface element to put the player view controller into trimming mode. Because the player doesn\u2019t support trimming certain media, such as HTTP Live Streaming or protected content, apps observe the state of the canBeginTrimming property to update the enabled state of their user interface accordingly. For example, the following code observes the state of the canBeginTrimming property and updates the state of a published property, which sets the appropriate enabled state in the UI:\n\n@Published private(set) var isTrimming = true\n@Published private(set) var supportsTrimming = true\n\n\nvar controller: AVPlayerViewController? {\n    didSet {\n        // Reset the internal state variables to false and exit.\n        guard let controller else {\n            isTrimming = false\n            supportsTrimming = false\n            return\n        }\n        // Connect the AVPlayer object to the the view controller.\n        controller.player = player\n        /// Update the state of `supportsTrimming` based on the value of `canBeginTrimming`.\n        controller.publisher(for: \\.canBeginTrimming)\n            .removeDuplicates()\n            .assign(to: &$supportsTrimming)\n    }\n}\n\n\nEnable the trimming user interface\n\nAfter you determine that the player view controller supports editing the current media\u2019s timeline, call the player\u2019s beginTrimming(completionHandler:) method to enable its trimming interface. Call this method from an asynchronous context:\n\n/// Enables the player view controller's media trimming interface.\nfunc startTrimming() async {\n    // Exit early if the controller doesn't support trimming.\n    guard let controller, controller.canBeginTrimming else { return }\n    \n    isTrimming = true\n    if await controller.beginTrimming() {\n        // A user pinched the button to complete the trim operation.\n    } else {\n        // A user pinched the button to cancel their changes.\n    }\n    isTrimming = false\n}\n\n\nThis method returns a Boolean value that indicates whether the user pinched the Done button or the Cancel button. Pinching the Done button causes the view controller to update the values of the player item\u2019s reversePlaybackEndTime and forwardPlaybackEndTime properties to match the trimmed selection.\n\nExport the trimmed media selection\n\nA convenient way to export your trimmed selection is to use AVAssetExportSession. This object provides a simple preset-based approach to transcode media in various formats. Create an instance of an export session by passing it the player item\u2019s asset and an export preset. Additionally, configure its output URL and file type:\n\n// Export the asset in the highest quality.\nlet preset = AVAssetExportPresetHighestQuality\n// Check the compatibility of the preset to export the video to the output file type.\nguard await AVAssetExportSession.compatibility(ofExportPreset: preset,\n                                               with: playerItem.asset,\n                                               outputFileType: .mp4) else {\n    print(\"The selected preset can't export the video to the output file type.\")\n    return\n}\n\n\nguard let exportSession = AVAssetExportSession(asset: playerItem.asset,\n                                               presetName: preset) else {\n    print(\"Unable to create an export session that supports the asset and preset.\")\n    return\n}\n\n\nTo export only the portion of the asset that matches your trimmed selection, create a CMTimeRange based on the reverse and forward playback end times of the current player item:\n\n// Create a time range that matches the trimmed selection.\nlet startTime = playerItem.reversePlaybackEndTime\nlet endTime = playerItem.forwardPlaybackEndTime\nexportSession.timeRange = CMTimeRange(start: startTime, end: endTime)\n\n\nFinally, begin the export operation to begin asynchronously transcoding the media to the output URL:\n\n// Export the content.\nawait exportSession.export()\n\n\nSee Also\nvisionOS Playback\nAdopting the system player interface in visionOS\nProvide an optimized viewing experience for watching 3D video content.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events."
    },
    {
        "title": "AVContentProposalAction",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalaction",
        "html": "Topics\nActions\ncase accept\nThe user accepted the content proposal.\ncase reject\nThe user rejected the content proposal.\ncase `defer`\nThe user deferred the content proposal.\nRelationships\nConforms To\nSendable\nSee Also\nDismissing the Proposal\nfunc dismissContentProposal(for: AVContentProposalAction, animated: Bool, completion: (() -> Void)?)\nDismisses the current content proposal."
    },
    {
        "title": "playerLayoutGuide",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalviewcontroller/1650956-playerlayoutguide",
        "html": "Discussion\n\nThe view controller can constrain its views using the anchors of the player layout guide, which has the same size and position as the player view. The layout guide is always relative to the current preferredPlayerViewFrame property value.\n\nSee Also\nConfiguring the Proposal\nvar contentProposal: AVContentProposal?\nA prosal of content to play.\nclass AVContentProposal\nAn object that describes the content to propose playing after the current item finishes.\nvar dateOfAutomaticAcceptance: Date?\nThe date that the system automatically accepts a proposal if the user doesn\u2019t intervene.\nvar preferredPlayerViewFrame: CGRect\nThe preferred presentation frame of the player view while the content proposal is active."
    },
    {
        "title": "dateOfAutomaticAcceptance",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalviewcontroller/1650975-dateofautomaticacceptance",
        "html": "Discussion\n\nThe system schedules the proposal when you present it, and may unschedule it if the user cancels automatic acceptance, manually accepts, or otherwise dismisses the proposal.\n\nSetting this property nil to cancel automatic acceptance.\n\nSee Also\nConfiguring the Proposal\nvar contentProposal: AVContentProposal?\nA prosal of content to play.\nclass AVContentProposal\nAn object that describes the content to propose playing after the current item finishes.\nvar playerLayoutGuide: UILayoutGuide\nA layout guide that tracks the size and location of the player view.\nvar preferredPlayerViewFrame: CGRect\nThe preferred presentation frame of the player view while the content proposal is active."
    },
    {
        "title": "Working with Interstitial Content",
        "url": "https://developer.apple.com/documentation/avkit/working_with_interstitial_content",
        "html": "Overview\n\nMedia playback apps often present additional content such as legal text, content warnings, or advertisements alongside their main media content. One method is to use HTTP Live Streaming\u2019s (HLS) support for serving stitched playlists. Stitched playlists let you combine multiple media playlists into a single, unified playlist that\u2019s delivered to the client as a single stream. This stream provides a smooth playback experience to users, with no breaks or interruptions in the action when the player presents the interstitial content. For more information about including ad content in your HLS playlist, see Incorporating Ads into a Playlist.\n\nDefine Interstitial Time Ranges\n\nAVKit in tvOS simplifies working with interstitial content delivered as part of a stitched playlist. You define the time ranges in your presentation that contain interstitial content. As the player encounters the time ranges during playback, you receive callbacks when they begin and end, giving you the opportunity to enforce business rules or capture analytics.\n\nAVPlayerItem in tvOS adds an interstitialTimeRanges property that you set to an array of AVInterstitialTimeRange objects that the system uses to annotate the timeline with break markers. Each object defines a CMTimeRange marking the interstitial time range in your media\u2019s timeline. The following code example shows how to create interstitial time ranges.\n\nfunc setupPlayback() {\n    ...\n    playerItem.interstitialTimeRanges = makeInterstitialTimeRanges()\n    ...\n}\n\n\nprivate func makeInterstitialTimeRanges() -> [AVInterstitialTimeRange] {\n    // Present a 10-second content warning at the beginning of the video.\n    let timeRange1 = CMTimeRange(start: .zero,\n                                 duration: CMTime(value: 10, timescale: 1))\n    \n    // Present 1 minute of advertisements 10 minutes into the video.\n    let timeRange2 = CMTimeRange(start: CMTime(value: 600, timescale: 1),\n                                 duration: CMTime(value: 60, timescale: 1))\n    \n    // Return an array of AVInterstitialTimeRange objects.\n    return [\n        AVInterstitialTimeRange(timeRange: timeRange1),\n        AVInterstitialTimeRange(timeRange: timeRange2)\n    ]\n}\n\n\nWhen you define interstitial time ranges, AVPlayerViewController updates its user interface in two important ways, as shown below. First, the player represents any interstitial time ranges as small dots on the player\u2019s timeline. This helps users understand where they are between interstitial breaks and helps orient them to where they are in the overall media timeline. Second, the player collapses interstitial time ranges from the time display. The current time and duration presented represent only your main content, providing a better sense of the primary media\u2019s timeline.\n\nNote\n\nThe player interface\u2019s collapsing of time ranges is only visual. Any programmatic operations you perform, such as seeking, happen on the full asset timeline, inclusive of interstitial content.\n\nEnforce Linear Playback\n\nWhen you adopt the AVPlayerViewControllerDelegate protocol, the player can notify your app as it traverses interstitial time ranges, which is useful to help you enforce business rules. For instance, a common requirement when presenting advertisements is to prevent users from skipping past them. You can use the requiresLinearPlayback property of AVPlayerViewController to control whether users can navigate through the content using the Siri Remote. During playback, this property is normally set to false, but when presenting an advertisement, you can set it to true to prevent user navigation, as shown in the following example.\n\npublic func playerViewController(_ playerViewController: AVPlayerViewController,\n                                 willPresent interstitial: AVInterstitialTimeRange) {\n    playerViewController.requiresLinearPlayback = true\n}\n\n\npublic func playerViewController(_ playerViewController: AVPlayerViewController,\n                                 didPresent interstitial: AVInterstitialTimeRange) {\n    playerViewController.requiresLinearPlayback = false\n}\n\n\nPrevent Skipping of Interstitial Content\n\nIf your app presents interstitial content, such as ads or legal text, you may want to prevent users from skipping past it. Implement this functionality by using the playerViewController(_:timeToSeekAfterUserNavigatedFrom:to:) delegate method. The system calls this method whenever a user performs a seek operation using the Siri Remote, which happens either by swiping left or right on the remote clickpad or by navigating chapter markers in the Info panel. The following code shows a simple example of how you might implement this method to prevent users from skipping past advertisements.\n\npublic func playerViewController(_ playerViewController: AVPlayerViewController, timeToSeekAfterUserNavigatedFrom oldTime: CMTime, to targetTime: CMTime) -> CMTime {\n\n\n    // Only evaluate if the user performed a forward seek.\n    guard !canSkipInterstitials && oldTime < targetTime else {\n        return targetTime\n    }\n\n\n    // Define the time range of the user's seek operation.\n    let seekRange = CMTimeRange(start: oldTime, end: targetTime)\n\n\n    // Iterate over the defined interstitial time ranges.\n    for interstitialRange in playerItem.interstitialTimeRanges {\n        // If the current interstitial content is contained within the\n        // user's seek range, return the interstitial content's start time.\n        if seekRange.containsTimeRange(interstitialRange.timeRange) {\n            return interstitialRange.timeRange.start\n        }\n    }\n\n\n    // No match. Return the target time.\n    return targetTime\n}\n\n\nFor any forward seeks, the example code ensures that the user can\u2019t skip past an ad break. It attempts to find an interstitial time range within the time range of the user\u2019s seek request. If it finds an interstitial time range, the code returns its start time, forcing playback to begin at the start of the advertisement.\n\nGenerate Interstitial Events Automatically\n\ntvOS 15 adds support for coordinating and observing playback of interstitial assets. Automatic handling of interstitial events allows the system to make smooth transitions between your main and interstitial content, and doesn\u2019t require you to coordinate playback between the players.\n\nWhile an AVInterstitialTimeRange can be any arbitrary time range in the media, an AVPlayerInterstitialEvent represents an HLS ad break or interstitial event. When you use AVPlayerInterstitialEvent, AVKit internally enforces linear playback and other navigation restrictions based on the event type.\n\nYou use translatesPlayerInterstitialEvents to indicate whether AVKit should generate the value of interstitialTimeRanges from AVPlayerInterstitialEvent. When you play a stream that defines interstitial events, or when the client creates or modifies events using a AVPlayerInterstitialEventController, the system populates interstitials. AVKit continues to update interstitialTimeRanges when there are changes to the set of events.\n\nOn the server that distributes HLS content, use the EXT-X-DATERANGE tag to associate a date range with a set of attributes.\n\n#EXT-X-DATERANGE:ID=\"ad1\",CLASS=\"com.example.hls.interstitial\",START-DATE=\"2020-01-02T21:55:43.000Z\",DURATION=6.0,X-ASSET-LIST=\u201cThe path to your asset list\u201d,X-RESUME-OFFSET=2,X-RESTRICT-JUMP=1\n\n\nUse AVPlayerInterstitialEventObserver to monitor the player for server-side events.\n\nlet player = AVPlayer(url: movieURL) \nlet observer = AVPlayerInterstitialEventObserver(primaryPlayer: player)\nNotificationCenter.default.addObserver(\n    forName: AVPlayerInterstitialEventObserver.currentEventDidChangeNotification,\n    object: observer,\n    queue: OperationQueue.main) { notification in\n        // Update user interface by using the current event data.\n        self.updateUI(observer.currentEvent)\n    }\n\n\nYou can supplement interstitial events with custom attribute-value pairs. For example, imagine adding beacon positions and beacon URLs for advertisements delivered as an interstitial. Inspect userDefinedAttributes on your event to get the information.\n\nif let currentEvent = observer.currentEvent {\n    if !respondedSet.contains(currentEvent.identifier) {\n        let eventAttributes = observer.currentEvent?.userDefinedAttributes\n        if let beaconURL = eventAttributes[\u201cX-com-example-beaconURL\u201d] {\n            // Send a GET request for beaconURL.\n            respondedSet.insert(currentEvent.identifier)\n        }\n    }\n}\n\n\nIf you don\u2019t update to the latest SDK and begin using streams that contain AVPlayerInterstitialEventController, you need to manage your own interstitials except for AirPlay.\n\nlet appInterstitials: [AVInterstitialTimeRange] = createMyInterstitials()\nlet playerItem: AVPlayerItem(url: movieURL)\nplayerItem.translatesPlayerInterstitialEvents = false\nplayerItem.interstitialTimeRanges = appInterstitials\n\n\nSee Also\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "isSkipBackwardEnabled",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1650958-isskipbackwardenabled",
        "html": "Discussion\n\nThis property affects the appearance of the backward-skipping indicator. The value you set for the player view controller\u2019s skippingBehavior property determines its backward-skipping behavior.\n\nSee Also\nConfiguring Skipping Behavior\nvar isSkipForwardEnabled: Bool\nA Boolean value that indicates whether forward-skipping is available.\nvar skippingBehavior: AVPlayerViewControllerSkippingBehavior\nThe behavior that skipping gestures perform.\nenum AVPlayerViewControllerSkippingBehavior\nConstants that represent the player view controller\u2019s skipping behavior."
    },
    {
        "title": "isSkipForwardEnabled",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1650953-isskipforwardenabled",
        "html": "Discussion\n\nThis property affects the appearance of the forward-skipping indicator. The value you set for the player view controller\u2019s skippingBehavior property determines its forward-skipping behavior.\n\nSee Also\nConfiguring Skipping Behavior\nvar isSkipBackwardEnabled: Bool\nA Boolean value that indicates whether backward-skipping is available.\nvar skippingBehavior: AVPlayerViewControllerSkippingBehavior\nThe behavior that skipping gestures perform.\nenum AVPlayerViewControllerSkippingBehavior\nConstants that represent the player view controller\u2019s skipping behavior."
    },
    {
        "title": "requiresFullSubtitles",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1627630-requiresfullsubtitles",
        "html": "Discussion\n\nWhen this property value is true, the subtitle menu doesn\u2019t present the Off or Auto options, because subtitles are always displayed, if available.\n\nThe default value is false.\n\nSee Also\nManaging Subtitles\nvar allowedSubtitleOptionLanguages: [String]?\nAn array of language codes that restrict the set of subtitle languages available to the user."
    },
    {
        "title": "allowedSubtitleOptionLanguages",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/1627634-allowedsubtitleoptionlanguages",
        "html": "Discussion\n\nWhen this property value is nil (the default), the player view controller UI presents all available subtitle options. The Auto subtitle option is only available when this property value is nil and requiresFullSubtitles is false.\n\nTo allow only a restricted subset of subtitles, set this property value to an array of BCP 47 language codes. Restricting the set of subtitle languages makes the Auto option unavailable.\n\nSee Also\nManaging Subtitles\nvar requiresFullSubtitles: Bool\nA Boolean value that indicates whether the user can disable the display of subtitles."
    },
    {
        "title": "beginTrimming(completionHandler:)",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/4131582-begintrimming",
        "html": "Parameters\nhandler\n\nA completion handler that the system calls with a Boolean value that indicates whether the user completed the trim operation, or if they canceled it.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc beginTrimming() async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nAfter trimming is complete, you can access the trimmed range by querying the forwardPlaybackEndTime and reversePlaybackEndTime properties on the AVPlayerItem.\n\nFor more information on supporting trimming in your app, see Trimming and exporting media in visionOS.\n\nSee Also\nPresenting the visionOS Trimming UI\nvar canBeginTrimming: Bool\nA Boolean value that indicates whether the current media supports trimming.\nBeta"
    },
    {
        "title": "allowsVideoFrameAnalysis",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3986071-allowsvideoframeanalysis",
        "html": "Discussion\n\nIf the value is true, a player view controller tries to find objects, text, and people when you pause media playback. If it finds an object, the user is able to interact with it using a long press to present a context menu.\n\nThe default value is true.\n\nSee Also\nConfiguring Frame Analysis\nvar toggleLookupAction: UIAction\nAn action that enables the visual lookup interface.\nvar videoFrameAnalysisTypes: AVVideoFrameAnalysisType\nThe types of analysis a player view controller performs on a paused video frame.\nstruct AVVideoFrameAnalysisType\nConstants that define the types of analysis a player view controller may perform on a paused video frame."
    },
    {
        "title": "toggleLookupAction",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/4165307-togglelookupaction",
        "html": "Discussion\n\nWhen a user toggles the lookup UI, the state property is UIMenuElement.State.on, and is UIMenuElement.State.off otherwise. The system disables the action\u2019s attributes when there isn\u2019t visual lookup data available or when the media is playing.\n\nSee Also\nConfiguring Frame Analysis\nvar allowsVideoFrameAnalysis: Bool\nA Boolean value that indicates whether to perform video frame analysis.\nvar videoFrameAnalysisTypes: AVVideoFrameAnalysisType\nThe types of analysis a player view controller performs on a paused video frame.\nstruct AVVideoFrameAnalysisType\nConstants that define the types of analysis a player view controller may perform on a paused video frame."
    },
    {
        "title": "videoFrameAnalysisTypes",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/4165308-videoframeanalysistypes",
        "html": "See Also\nConfiguring Frame Analysis\nvar allowsVideoFrameAnalysis: Bool\nA Boolean value that indicates whether to perform video frame analysis.\nvar toggleLookupAction: UIAction\nAn action that enables the visual lookup interface.\nstruct AVVideoFrameAnalysisType\nConstants that define the types of analysis a player view controller may perform on a paused video frame."
    },
    {
        "title": "canBeginTrimming",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/4131583-canbegintrimming",
        "html": "Discussion\n\nNot all media supports trimming. For example, this property returns false for HTTP Live Streaming media or protected content.\n\nObserve this property to determine when to change the enabled state of your app UI that initiates trimming.\n\nSee Also\nPresenting the visionOS Trimming UI\nfunc beginTrimming(completionHandler: ((Bool) -> Void)?)\nPresents the system trimming interface controls inside the player view.\nBeta"
    },
    {
        "title": "requiresMonoscopicViewingMode",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/4218671-requiresmonoscopicviewingmode",
        "html": "Discussion\n\nThe default value is false.\n\nSee Also\nConfiguring the visionOS Player UI\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar contextualActionsInfoView: UIView\nA view the system shows adjacent to the contextual actions that\u2019s suitable for showing related information.\nBeta\nvar contextualActionsPreviewImage: UIImage?\nAn image to show alongside the contextual actions.\nBeta"
    },
    {
        "title": "Playing video content in a standard user interface",
        "url": "https://developer.apple.com/documentation/avkit/playing_video_content_in_a_standard_user_interface",
        "html": "Overview\n\nAVKit is a cross-platform media playback UI framework built on top of AVFoundation in Core Media. It makes it easy to play AVPlayer-based media content using the same user interface as Apple\u2019s own apps. For UIKit apps, AVKit provides AVPlayerViewController, a view controller that displays content from a player and presents a native user interface to control playback.\n\nThis sample app demonstrates three display options for media playback using AVPlayerViewController: full screen, embedded inline, or in a floating PiP window.\n\nThe sample uses AVPlayerViewController in full-screen playback mode to scale the video to fill the display, enabling a distraction-free environment that hides the system and app controls until people take action to reveal them. To demonstrate video inline playback, the sample embeds the AVPlayerViewController view in the app\u2019s user interface. The sample also uses AVPlayerViewController to play video in PiP mode, where the video remains in view in a floating video overlay while the user interacts with other apps. The user manages the player using the standard player interface.\n\nGetting started with AVPlayerViewController is easy. You create an AVPlayer, and then create an AVPlayerViewController and assign the player to it. And finally, you present the AVPlayerViewController. When playing full screen, embedded inline, or in a floating PiP window, you implement callback methods to respond to the various AVPlayerViewController events.\n\nNote\n\nThis sample code project is associated with WWDC 2019 session 503: Delivering Intuitive Media Playback with AVKit.\n\nCreate and configure the player view controller\n\nThe sample\u2019s loadPlayerViewControllerIfNeeded function creates an AVPlayerViewController that it uses to play the videos in the various playback modes.\n\nprivate func loadPlayerViewControllerIfNeeded() {\n    if playerViewControllerIfLoaded == nil {\n        playerViewControllerIfLoaded = AVPlayerViewController()\n    }\n}\n\n\nThe sample implements the AVPlayerViewControllerDelegate methods to respond to player view controller events. This allows the sample to handle the app\u2019s user interface based on the player view controller state, along with observing for potential errors. To receive notifications of the player view controller events, the project\u2019s PlayerViewControllerCoordinator assigns itself as the player view controller delegate.\n\nplayerViewController.delegate = self\n\n\nThe AVPlayerViewController requires an AVPlayer object to provide the media content to display. The AVPlayer plays media assets that AVFoundation models using the AVAsset class, which represent the media to play. However, an AVAsset only models the static aspects of the media, such as its duration or creation date, and on its own, is unsuitable for playback with an AVPlayer. To play an asset, the sample creates an instance of its dynamic counterpart, AVPlayerItem. This object models the timing and presentation state of an asset that an instance of AVPlayer plays. The sample creates an AVPlayer from the AVPlayerItem, and assigns the AVPlayer to the AVPlayerViewController.\n\nif !playerViewController.hasContent(fromVideo: video) {\n    let playerItem = AVPlayerItem(url: video.hlsUrl)\n    playerViewController.player = AVPlayer(playerItem: playerItem)\n}\n\nPlay media full screen\n\nWhen the user taps on one of the app\u2019s views to play video full screen, the sample calls the present(_:animated:completion:) method to present the video full screen modally, not as a subview controller of some other view controller. The sample uses the default modal presentation style UIModalPresentationStyle.automatic, which resolves to a full-screen presentation. To begin playback, the sample calls the AVPlayerViewController player\u2019s play() method.\n\nguard let playerViewController = playerViewControllerIfLoaded else { return }\npresentingViewController.present(playerViewController, animated: true) {\n    playerViewController.player?.play()\n}\n\nHandle player view controller full-screen events\n\nThe sample implements the playerViewController(_:willBeginFullScreenPresentationWithAnimationCoordinator:) delegate method to receive notifications when the AVPlayerViewController is about to start displaying its contents full screen. This delegate method passes the player view controller and transition coordinator to use for coordinating animations. When the sample presents or dismisses a view controller, UIKit creates a transition coordinator object automatically and assigns it to the view controller\u2019s transitionCoordinator property. The transition coordinator object only lasts for the duration of the transition animation.\n\nThe sample calls the transition coordinator\u2019s animate(alongsideTransition:completion:) method to run the animations at the same time as the view controller transition animations. The sample also implements the animate(alongsideTransition:completion:) method\u2019s completion handler that executes after the transition finishes. In the completion handler, the sample updates the playback state string that displays in the content overlay view on top of the player view controller. The sample also checks whether the transition succeeds or the user cancels it. If it succeeds, the sample saves a strong reference to the player view controller. The sample uses this reference to dismiss any active player view controllers before restoring the app\u2019s interface when PiP stops.\n\nfunc playerViewController(\n    _ playerViewController: AVPlayerViewController,\n    willBeginFullScreenPresentationWithAnimationCoordinator coordinator: UIViewControllerTransitionCoordinator\n    ) {\n    status.insert([.fullScreenActive, .beingPresented])\n    \n    coordinator.animate(alongsideTransition: nil) { context in\n        self.status.remove(.beingPresented)\n        // Check context.isCancelled to determine whether the transition is successful.\n        if context.isCancelled {\n            self.status.remove(.fullScreenActive)\n        } else {\n            // Keep note of the view controller that the system uses to present full screen.\n            self.fullScreenViewController = context.viewController(forKey: .to)\n        }\n    }\n}\n\n\nThe sample implements the playerViewController(_:willEndFullScreenPresentationWithAnimationCoordinator:) delegate method to receive notifications when the AVPlayerViewController is about to stop displaying its contents full screen. In this method, the sample also calls the transition coordinator\u2019s animate(alongsideTransition:completion:) method to run the animations at the same time as the view controller transition animations. The sample implements the animate(alongsideTransition:completion:) method\u2019s completion handler to update the debug string that displays in the content overlay view on top of the player view controller.\n\nfunc playerViewController(\n    _ playerViewController: AVPlayerViewController,\n    willEndFullScreenPresentationWithAnimationCoordinator coordinator: UIViewControllerTransitionCoordinator\n    ) {\n    status.insert([.beingDismissed])\n    delegate?.playerViewControllerCoordinatorWillDismiss(self)\n    \n    coordinator.animate(alongsideTransition: nil) { context in\n        self.status.remove(.beingDismissed)\n        if !context.isCancelled {\n            self.status.remove(.fullScreenActive)\n        }\n    }\n}\n\nDisplay custom overlays in the player view controller\n\nAVPlayerViewController provides a contentOverlayView property for adding noninteractive custom views, such as a logo or watermark, between the video content and the controls.\n\nThe sample creates a custom view DebugHUD for displaying the current playback state (embedded inline, full-screen active, and so on) of a video playback item. The sample\u2019s addDebugHUDToPlayerViewControllerIfNeeded function adds this custom view to the contentOverlayView.\n\nprivate func addDebugHUDToPlayerViewControllerIfNeeded() {\n    if status.contains(.embeddedInline) || status.contains(.fullScreenActive) {\n        if let playerViewController = playerViewControllerIfLoaded,\n            let contentOverlayView = playerViewController.contentOverlayView,\n            !debugHud.isDescendant(of: contentOverlayView) {\n            playerViewController.contentOverlayView?.addSubview(debugHud)\n\n\nThe sample\u2019s PlayerViewControllerCoordinator declares the status variable that maintains the current playback state.\n\nprivate(set) var status: Status = [] {\n    didSet {\n        debugHud.status = status\n        externalDebugHud.status = status\n        if oldValue.isBeingShown && !status.isBeingShown {\n            playerViewControllerIfLoaded = nil\n        }\n        addDebugHUDToPlayerViewControllerIfNeeded()\n    }\n\n\nThe PlayerViewControllerCoordinator updates the playback state in the DebugHUD view in response to player view controller events and other state changes. For example, to receive notifications when the player view controller video frames are ready for display, the sample observes the AVPlayerViewController isReadyForDisplay property. When the property changes, the PlayerViewControllerCoordinator updates the status variable to reflect the current playback state.\n\n            readyForDisplayObservation = playerViewController.observe(\\.isReadyForDisplay) { [weak self] observed, _ in\n                if observed.isReadyForDisplay {\n                    self?.status.insert(.readyForDisplay)\n                } else {\n                    self?.status.remove(.readyForDisplay)\n                }\n            }\n\nPlay media inline\n\nThe sample\u2019s embedInline function incorporates the AVPlayerViewController view into the app\u2019s view hierarchy for inline playback. To do this, the function first checks whether an AVPlayerViewController object already exists in the view hierarchy, and if so, removes it. Next, the function adds the AVPlayerViewController as a subview of the current view controller. After that, it adds the AVPlayerViewController view to the specified containing view so that it resides on top of any subviews. Lastly, the function calls the view controller didMove(toParent:) function. Container view controller subclasses need to call didMove(toParent:) after a transition to the new subview completes or, in the case of no transition, immediately after the call to addChild(_:).\n\nThe user manages inline playback using the standard player interface.\n\nfunc embedInline(in parent: UIViewController, container: UIView) {\n    loadPlayerViewControllerIfNeeded()\n    guard let playerViewController = playerViewControllerIfLoaded, playerViewController.parent != parent else { return }\n    removeFromParentIfNeeded()\n    status.insert(.embeddedInline)\n    parent.addChild(playerViewController)\n    container.addSubview(playerViewController.view)\n    playerViewController.view.translatesAutoresizingMaskIntoConstraints = false\n    NSLayoutConstraint.activate([\n        playerViewController.view.centerXAnchor.constraint(equalTo: container.centerXAnchor),\n        playerViewController.view.centerYAnchor.constraint(equalTo: container.centerYAnchor),\n        playerViewController.view.widthAnchor.constraint(equalTo: container.widthAnchor),\n        playerViewController.view.heightAnchor.constraint(equalTo: container.heightAnchor)\n    ])\n    playerViewController.didMove(toParent: parent)\n}\n\nConfigure audio session and background modes for PiP\n\nTo use PiP, the sample configures its audio session and background modes. For more information, see Configuring the Audio Playback of iOS and tvOS Apps. After this configuration, the player view controller automatically supports PiP playback.\n\nHandle PiP player view controller events\n\nTo receive notifications when PiP is about to start, or fails to start, the sample implements the delegate methods playerViewControllerWillStartPictureInPicture(_:) and playerView(_:failedToStartPictureInPictureWithError:), respectively. To receive notifications when PiP stops, the sample implements the playerViewControllerDidStopPictureInPicture(_:) method.\n\nEach of the sample\u2019s AVPlayerViewControllerDelegate method implementations updates the DebugHUD custom view to reflect the current playback state.\n\nfunc playerViewControllerWillStartPictureInPicture(_ playerViewController: AVPlayerViewController) {\n    status.insert(.pictureInPictureActive)\n}\n\n\nfunc playerViewControllerDidStopPictureInPicture(_ playerViewController: AVPlayerViewController) {\n    status.remove(.pictureInPictureActive)\n}\n\n\nfunc playerViewController(_ playerViewController: AVPlayerViewController, failedToStartPictureInPictureWithError error: Error) {\n    status.remove(.pictureInPictureActive)\n}\n\nRestore the video playback interface when PiP stops\n\nTo handle the restore process when PiP stops, the sample implements the playerViewController(_:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:) method. The framework calls this method when control returns to the app, giving the app the opportunity to determine how to properly restore its video playback interface. The sample sends the callback up to its own delegate to handle the restore operation.\n\nfunc playerViewController(\n    _ playerViewController: AVPlayerViewController,\n    restoreUserInterfaceForPictureInPictureStopWithCompletionHandler completionHandler: @escaping (Bool) -> Void\n    ) {\n    if let delegate = delegate {\n        delegate.playerViewControllerCoordinator(self, restoreUIForPIPStop: completionHandler)\n    } else {\n        completionHandler(false)\n    }\n}\n\nSee Also\niOS Playback\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events."
    },
    {
        "title": "transportBarIncludesTitleView",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3750342-transportbarincludestitleview",
        "html": "Discussion\n\nBy default, the player presents a title view. This view displays title (commonIdentifierTitle) and subtitle (iTunesMetadataTrackSubTitle) metadata embedded in a media asset or set as a player item\u2019s externalMetadata.\n\nThe view controller ignores this property when playbackControlsIncludeTransportBar is false.\n\nSee Also\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeTransportBar: Bool\nA Boolean value that indicates whether the player shows the transport bar and related controls.\nvar playbackControlsIncludeInfoViews: Bool\nA Boolean value that indicates whether the player presents video metadata, navigation markers, and playback settings views when the user requests them.\nvar transportBarCustomMenuItems: [UIMenuElement]\nAn array of actions and menus to display with the default player controls.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar customOverlayViewController: UIViewController?\nA view controller that presents custom content over the player view.\nvar unobscuredContentGuide: UILayoutGuide\nA layout guide that represents an area that fixed-position playback controls don\u2019t obscure when visible.\nvar customInfoViewController: UIViewController?\nA view controller that provides client-specific content and controls alongside system-provided information and settings panels.\nDeprecated"
    },
    {
        "title": "contextualActions",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller/3750339-contextualactions",
        "html": "Discussion\n\nUse this property to present action controls for a specific time in the presentation, such as showing a Skip Intro button during a title sequence. Have your app observe the player\u2019s timing, and when playback reaches a point at which to present controls, set the property value to one or more custom actions. To dismiss the controls, set this property value back to an empty array.\n\nFor details about observing player timing, see Observing the Playback Time.\n\nNote\n\nThe view controller presents contextual actions only when the transport bar isn\u2019t visible.\n\nSee Also\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeTransportBar: Bool\nA Boolean value that indicates whether the player shows the transport bar and related controls.\nvar playbackControlsIncludeInfoViews: Bool\nA Boolean value that indicates whether the player presents video metadata, navigation markers, and playback settings views when the user requests them.\nvar transportBarIncludesTitleView: Bool\nA Boolean value that indicates whether the player user interface shows the title view above the scrubber.\nvar transportBarCustomMenuItems: [UIMenuElement]\nAn array of actions and menus to display with the default player controls.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar customOverlayViewController: UIViewController?\nA view controller that presents custom content over the player view.\nvar unobscuredContentGuide: UILayoutGuide\nA layout guide that represents an area that fixed-position playback controls don\u2019t obscure when visible.\nvar customInfoViewController: UIViewController?\nA view controller that provides client-specific content and controls alongside system-provided information and settings panels.\nDeprecated"
    },
    {
        "title": "AVKitError",
        "url": "https://developer.apple.com/documentation/avkit/avkiterror",
        "html": "Topics\nInspecting an Error\nstatic var errorDomain: String\nThe domain of this error.\nvar code: Code\nThe error code.\nenum AVKitError.Code\nConstants that identify framework error codes.\nError Constants\nError code constants for framework operations.\nvar errorCode: Int\nThe integer error code.\nvar userInfo: [String : Any]\nThe user information dictionary.\nvar errorUserInfo: [String : Any]\nThe error user information dictionary.\nvar localizedDescription: String\nA string that provides a localized description of the error.\nComparing Errors\nstatic func == (AVKitError, AVKitError) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nstatic func != (AVKitError, AVKitError) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nAccessing Hash Values\nvar hashValue: Int\nThe hash value.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nInitializers\ninit(Code, userInfo: [String : Any])\nCreates an error code with a code and custom user information.\nSee Also\nErrors\nlet AVKitErrorDomain: String\nThe domain of errors the framework generates."
    },
    {
        "title": "AVCaptureEventInteraction",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureeventinteraction",
        "html": "Topics\nInitializers\ninit(handler: (AVCaptureEvent) -> Void)\ninit(primary: (AVCaptureEvent) -> Void, secondary: (AVCaptureEvent) -> Void)\nInstance Properties\nvar isEnabled: Bool\nRelationships\nInherits From\nNSObject\nConforms To\nUIInteraction"
    },
    {
        "title": "AVPictureInPictureController",
        "url": "https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller",
        "html": "Overview\n\nTo use Picture in Picture, you need to configure your app to support background audio playback. See Configuring the Audio Playback of iOS and tvOS Apps for more details.\n\nBefore presenting a user interface to start Picture in Picture, call the isPictureInPictureSupported() method to determine if the current device supports the feature, and check the isPictureInPicturePossible property value to determine whether PiP is possible in the current context.\n\nImportant\n\nThe framework doesn\u2019t support subclassing AVPictureInPictureController.\n\nTopics\nCreating a Controller\ninit(contentSource: AVPictureInPictureController.ContentSource)\nCreates a Picture in Picture controller with a content source.\ninit?(playerLayer: AVPlayerLayer)\nCreates a Picture in Picture controller with a player layer.\nConfiguring the Content Source\nvar contentSource: AVPictureInPictureController.ContentSource?\nThe source of the controller\u2019s content.\nclass AVPictureInPictureController.ContentSource\nAn object that represents the source of the content to present in Picture in Picture.\nAccessing the Player Layer\nvar playerLayer: AVPlayerLayer\nThe layer that displays the video content.\nConfiguring Playback Behavior\nvar requiresLinearPlayback: Bool\nA Boolean value that determines whether the controller allows the user to skip media content.\nAccessing the Delegate Object\nvar delegate: AVPictureInPictureControllerDelegate?\nA delegate object for a Picture in Picture controller.\nprotocol AVPictureInPictureControllerDelegate\nA protocol to adopt to respond to Picture in Picture events.\nAccessing Picture in Picture State\nclass func isPictureInPictureSupported() -> Bool\nReturns a Boolean value that indicates whether the current device supports Picture in Picture.\nvar isPictureInPicturePossible: Bool\nA Boolean value that indicates whether Picture in Picture playback is currently possible.\nvar isPictureInPictureActive: Bool\nA Boolean value that indicates whether the Picture in Picture window is onscreen.\nvar isPictureInPictureSuspended: Bool\nA Boolean value that indicates whether the system suspends the controller\u2019s Picture in Picture window.\nControlling Picture in Picture Playback\nvar canStopPictureInPicture: Bool\nA Boolean value that indicates whether Picture in Picture is active and is able to stop.\nvar canStartPictureInPictureAutomaticallyFromInline: Bool\nA Boolean value that indicates whether Picture in Picture starts automatically when the controller embeds its content inline and the app transitions to the background.\nfunc startPictureInPicture()\nStarts Picture in Picture, if possible.\nfunc stopPictureInPicture()\nStops Picture in Picture, if active.\nRetrieving Picture in Picture Template Images\nclass var pictureInPictureButtonStartImage: UIImage\nA system-default template image for the button that starts Picture in Picture in your app.\nclass var pictureInPictureButtonStopImage: UIImage\nA system-default template image for the button that stops Picture in Picture in your app.\nclass func pictureInPictureButtonStartImage(compatibleWith: UITraitCollection?) -> UIImage\nReturns a system-default template image that\u2019s compatible with a trait collection for the button that starts Picture in Picture in your app.\nclass func pictureInPictureButtonStopImage(compatibleWith: UITraitCollection?) -> UIImage\nReturns a system-default template image that\u2019s compatible with a trait collection for the button that stops Picture in Picture in your app.\nRelationships\nInherits From\nNSObject\nSee Also\nPicture in Picture\nAdopting Picture in Picture Playback in tvOS\nAdd advanced multitasking capabilities to your video apps by using Picture in Picture playback in tvOS.\nAdopting Picture in Picture in a Standard Player\nAdd Picture in Picture (PiP) playback to your app using a player view controller.\nAdopting Picture in Picture in a Custom Player\nAdd controls to your custom player user interface to invoke Picture in Picture (PiP) playback.\nAdopting Picture in Picture for video calls\nAdd multitasking capability to your video-call apps by using Picture in Picture (PiP).\nAccessing the camera while multitasking on iPad\nOperate the camera in Split View, Slide Over, Picture in Picture, and Stage Manager modes."
    },
    {
        "title": "AVCaptureEvent",
        "url": "https://developer.apple.com/documentation/avkit/avcaptureevent",
        "html": "Topics\nInstance Properties\nvar phase: AVCaptureEventPhase\nRelationships\nInherits From\nNSObject"
    },
    {
        "title": "AVKit Metadata Identifiers",
        "url": "https://developer.apple.com/documentation/avkit/avkit_metadata_identifiers",
        "html": "Topics\nDisplayed Metadata\nlet AVKitMetadataIdentifierExactStartDate: String\nThe exact start date for a live event stream.\nlet AVKitMetadataIdentifierExactEndDate: String\nThe exact end date for a live event stream.\nlet AVKitMetadataIdentifierApproximateStartDate: String\nThe approximate start date for a live event stream.\nlet AVKitMetadataIdentifierApproximateEndDate: String\nThe approximate end date for a live event stream.\nNondisplayed Metadata\nlet AVKitMetadataIdentifierPlaybackProgress: String\nThe playback progress published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierExternalContentIdentifier: String\nThe identifier for external content published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierExternalUserProfileIdentifier: String\nThe identifier for an external user profile published through the Now Playing Info Center.\nlet AVKitMetadataIdentifierServiceIdentifier: String\nThe service identifier published through the Now Playing Info Center."
    },
    {
        "title": "AVKitErrorDomain",
        "url": "https://developer.apple.com/documentation/avkit/avkiterrordomain",
        "html": "See Also\nErrors\nstruct AVKitError\nA structure that represents a framework error."
    },
    {
        "title": "AVRoutePickerView",
        "url": "https://developer.apple.com/documentation/avkit/avroutepickerview",
        "html": "Overview\n\nThis view represents a button that users tap to stream audio/video content to a media receiver, such as a Mac or Apple TV.\n\nWhen the user taps the button, the system presents a popover that displays all of the nearby AirPlay devices that can receive and play back media. If your app prefers video content, the system displays video-capable devices higher in the list.\n\nIn iOS 16 and later, you can add devices to the list that implement custom protocols. For more information about displaying third-party routes, see AVRouting.\n\nConfigure the button's text, color, and media preference\n\nThe following code example creates the view alongside custom text:\n\nHStack {\n    Text(\"Choose output device\")\n        .font(.title)\n        .frame(maxWidth: .infinity, alignment: .center)\n        .fixedSize()\n        .padding(.leading)\n\n\n    if routeDetected {\n        DevicePickerView() // See implementation below.\n        .frame(width: 60, height: 60)\n        .padding(.trailing)\n    }\n}\n\n\nYour app configures the button's color scheme and indicates whether your app prefers video content, as the following code demonstrates:\n\nstruct DevicePickerView: UIViewRepresentable {\n    func makeUIView(context: Context) -> UIView {\n        let routePickerView = AVRoutePickerView()\n\n\n        // Configure the button's color.\n        routePickerView.delegate = context.coordinator\n        routePickerView.backgroundColor = UIColor.white\n        routePickerView.tintColor = UIColor.black\n\n\n        // Indicate whether your app prefers video content.\n        routePickerView.prioritizesVideoDevices = true\n\n\n        return routePickerView\n\n\nTopics\nConfiguring the delegate\nvar delegate: AVRoutePickerViewDelegate?\nThe delegate object for the route picker.\nprotocol AVRoutePickerViewDelegate\nA protocol that defines the methods to adopt to respond to route picker view presentation events.\nConfiguring the route picker view\nvar activeTintColor: UIColor!\nThe view\u2019s tint color when AirPlay is active.\nvar isRoutePickerButtonBordered: Bool\nA Boolean value that indicates whether the route picker button has a border.\nvar prioritizesVideoDevices: Bool\nA Boolean value that indicates whether the route picker sorts video output devices to the top of the list.\nvar routePickerButtonStyle: AVRoutePickerViewButtonStyle\nThe button style for the route picker.\nenum AVRoutePickerViewButtonStyle\nConstants that define the button styles a route picker view supports.\nfunc routePickerButtonColor(for: AVRoutePickerView.ButtonState) -> NSColor\nReturns the color of the picker button for the specified state.\nfunc setRoutePickerButtonColor(NSColor?, for: AVRoutePickerView.ButtonState)\nSets the route picker button color for the specified state.\nenum AVRoutePickerView.ButtonState\nConstants that describe the available button states.\nAccessing the player\nvar player: AVPlayer?\nThe player object to perform routing operations for.\nSetting a custom routing controller\nvar customRoutingController: AVCustomRoutingController?\nA routing controller that enables connections to non-AirPlay devices.\nRelationships\nInherits From\nNSView\nUIView"
    },
    {
        "title": "Adopting Picture in Picture for video calls",
        "url": "https://developer.apple.com/documentation/avkit/adopting_picture_in_picture_for_video_calls",
        "html": "Overview\n\nUse PiP in your video-call apps so users can multitask with other apps while on video calls. When a user enables PiP, your app scales down to a corner of the screen, so they can see the Home Screen and interact with other apps. In iOS 15 and later, AVKit provides PiP support for video-calling apps, which enables you to deliver a familiar video-calling experience that behaves like FaceTime.\n\nImportant\n\nIn iOS 16 and later, you can use the camera in Picture in Picture mode by enabling a capture session\u2019s isMultitaskingCameraAccessEnabled property. Apps that have a deployment target earlier than iOS 16 require the com.apple.developer.avfoundation.multitasking-camera-access entitlement to use the camera in PiP mode.\n\nCreate a source view\n\nProviding PiP support begins by choosing a source view to display inside the video-call view controller. You need to add a UIView to AVPictureInPictureVideoCallViewController, so use AVCaptureVideoPreviewLayer or AVSampleBufferDisplayLayer depending on your need. MTKView isn\u2019t supported. Video-calling apps need to display the remote view, so use AVSampleBufferDisplayLayer to do so.\n\nclass SampleBufferVideoCallView: UIView {\n    override class var layerClass: AnyClass {\n        AVSampleBufferDisplayLayer.self\n    }\n    \n    var sampleBufferDisplayLayer: AVSampleBufferDisplayLayer {\n        layer as! AVSampleBufferDisplayLayer\n    }\n}\n\n\nCreate a video-call controller\n\nTo display your source view, create a AVPictureInPictureVideoCallViewController and add your source as a subview.\n\nlet pipVideoCallViewController = AVPictureInPictureVideoCallViewController()\npipVideoCallViewController.preferredContentSize = CGSize(width: 1080, height: 1920)\npipVideoCallViewController.view.addSubview(sampleBufferVideoCallView)\n\n\nUse isPictureInPictureSupported() to determine whether the current device supports PiP playback. If PiP isn\u2019t supported on the current device, attempting to initialize a PiP controller returns nil.\n\nCreate a PiP controller using a content source\n\nBefore you create an AVPictureInPictureController, you need to create an AVPictureInPictureController.ContentSource that represents the source of the content the system displays. A content source requires a video-call view controller, and a source view that contains the content you associate with the video call.\n\nlet pipContentSource = AVPictureInPictureController.ContentSource(\n                            activeVideoCallSourceView: videoCallViewSourceView, \n                            contentViewController: pipVideoCallViewController)\n\n\nImportant\n\nAvoid unintentionally starting PiP by setting the content source on your PiP controller to nil or by releasing your PiP controller, when the active call ends.\n\nAfter creating a content source, use it to initialize AVPictureInPictureController. By default, PiP starts when a user moves to the background if your source view is full-screen, or you set canStartPictureInPictureAutomaticallyFromInline to true. If your app is in the foreground, you can start PiP by calling startPictureInPicture().\n\nlet pipController = AVPictureInPictureController(contentSource: pipContentSource)\npipController.canStartPictureInPictureAutomaticallyFromInline = true\npipController.delegate = self\n\n\nThe system uses the source view to determine the source frame for the PiP animation, and the restore target for either when the user returns to the app or PiP stops.\n\nNote\n\nThe PiP window doesn\u2019t receive touch events when you use AVPictureInPictureVideoCallViewController, so you can\u2019t customize the window\u2019s user interface by adding buttons.\n\nObserve PiP life cycle events\n\nWhen you use PiP, you respond to life-cycle events by observing AVPictureInPictureControllerDelegate. This allows you to handle your app\u2019s user interface based on the PiP state, along with observing for potential errors.\n\nThe system interrupts your capture session when the system or user stashes PiP, so observe AVCaptureSessionWasInterrupted for AVCaptureSession.InterruptionReason.videoDeviceNotAvailableInBackground to handle the interruption.\n\nWhen your app is in PiP mode, it can\u2019t assume control of the camera. For example, Camera.app assumes control of the camera when it\u2019s opened, and the system returns camera control when Camera.app finishes with it. You observe AVCaptureSessionWasInterrupted for AVCaptureSession.InterruptionReason.videoDeviceInUseByAnotherClient to handle the interruption.\n\nSee Also\nPicture in Picture\nAdopting Picture in Picture Playback in tvOS\nAdd advanced multitasking capabilities to your video apps by using Picture in Picture playback in tvOS.\nAdopting Picture in Picture in a Standard Player\nAdd Picture in Picture (PiP) playback to your app using a player view controller.\nAdopting Picture in Picture in a Custom Player\nAdd controls to your custom player user interface to invoke Picture in Picture (PiP) playback.\nAccessing the camera while multitasking on iPad\nOperate the camera in Split View, Slide Over, Picture in Picture, and Stage Manager modes.\nclass AVPictureInPictureController\nA controller that responds to user-initiated Picture in Picture playback of video in a floating, resizable window."
    },
    {
        "title": "Adopting Picture in Picture in a Custom Player",
        "url": "https://developer.apple.com/documentation/avkit/adopting_picture_in_picture_in_a_custom_player",
        "html": "Overview\n\nAdd PiP playback to your custom player by using the AVKit framework\u2019s AVPictureInPictureController class. This class lets you implement the same PiP behavior found in AVPlayerViewController in your custom player.\n\nConfigure Audio Session and Background Modes\n\nTo participate with PiP in iOS and tvOS, customize your app\u2019s audio playback capabilities by configuring its audio session and background modes. For more information, see Configuring the Audio Playback of iOS and tvOS Apps.\n\nUpdate Your Custom Player User Interface\n\nBegin by adding a user interface (UI) to your custom player interface to enable users to begin PiP playback. Make this UI consistent with the system default UI that AVPlayerViewController presents. Access the standard images for controlling PiP playback by using the pictureInPictureButtonStartImage and pictureInPictureButtonStopImage class properties of AVPictureInPictureController. These methods return system default images to present in your UI.\n\nimport AVKit\n\n\n@IBOutlet weak var pipButton: UIButton!\n\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    \n    let startImage = AVPictureInPictureController.pictureInPictureButtonStartImage\n    let stopImage = AVPictureInPictureController.pictureInPictureButtonStopImage\n    \n    pipButton.setImage(startImage, for: .normal)\n    pipButton.setImage(stopImage, for: .selected)\n}\n\n\nUse key-value observing (KVO) on the controller\u2019s canStopPictureInPicture property to display the appropriate affordances and provide the correct behavior in your playback UI. If false, display a start PiP affordance. If true, your app stops your custom playback UI and displays UI affordances to swap if you\u2019re creating a tvOS app. For more information about KVO, see Using Key-Value Observing in Swift.\n\nCreate the PiP Controller\n\nCreate an instance of AVPictureInPictureController to control PiP playback in your app. Before attempting to create the controller instance, verify that the current hardware supports PiP playback by calling the isPictureInPictureSupported() method.\n\nvar pipController: AVPictureInPictureController!\nvar pipPossibleObservation: NSKeyValueObservation?\n\n\nfunc setupPictureInPicture() {\n    // Ensure PiP is supported by current device.\n    if AVPictureInPictureController.isPictureInPictureSupported() {\n        // Create a new controller, passing the reference to the AVPlayerLayer.\n        pipController = AVPictureInPictureController(playerLayer: playerLayer)\n        pipController.delegate = self\n\n\n        pipPossibleObservation = pipController.observe(\\AVPictureInPictureController.isPictureInPicturePossible,\noptions: [.initial, .new]) { [weak self] _, change in\n            // Update the PiP button's enabled state.\n            self?.pipButton.isEnabled = change.newValue ?? false\n        }\n    } else {\n        // PiP isn't supported by the current device. Disable the PiP button.\n        pipButton.isEnabled = false\n    }\n}\n\n\nThis example creates a new AVPictureInPictureController instance, passing it a reference to the AVPlayerLayer that presents the video content. The system supports displaying content from an AVPlayerLayer or AVSampleBufferDisplayLayer in a PiP window.\n\nFor PiP functionality to work, maintain a strong reference to the controller object.\n\nNote\n\nThe PiP display doesn\u2019t use the AVPlayerLayer that you passed to AVPictureInPictureController, so AVFoundation stops vending video frames to AVPlayerLayer when PiP mode is active.\n\nTo participate in PiP life-cycle events, your code should adopt the AVPictureInPictureControllerDelegate protocol and set itself as the controller\u2019s delegate. Also, use KVO on the controller\u2019s isPictureInPicturePossible property to observe whether using PiP mode is possible in the current context, for example, when the system is displaying an active FaceTime window. By observing this property, you can determine when it\u2019s appropriate to change the enabled state of your PiP button.\n\nPublish the Now Playing State\n\nOn tvOS, MPNowPlayingSession ties your AVPlayer instances to a session. Your app can have many playing sessions, and in the case of PiP, your player must be tied to a session. You can have a Now Playing session for your PiP content and one for your full-screen content. When you update a session, the system ignores updates from the default MPNowPlayingInfoCenter, so migrate away from MPNowPlayingInfoCenter.default() and switch to MPNowPlayingSession across your whole app.\n\nThe system determines which Now Playing information to display, so publish your information even if the UI isn\u2019t displaying your session \u2014 the system might display your session at any moment. For more information about Now Playing metadata, see the Now Playing Metadata Properties topic group at MPNowPlayingInfoCenter.\n\nfunc publishNowPlayingMetadata() {\n    nowPlayingSession.nowPlayingInfoCenter.nowPlayingInfo = nowPlayingInfo\n    nowPlayingSession.becomeActiveIfPossible()\n}\n\n\nHandle User-Initiated Requests\n\nWith the AVPictureInPictureController setup complete, add an @IBAction method to handle user-initiated requests to start or stop PiP playback.\n\n@IBAction func togglePictureInPictureMode(_ sender: UIButton) {\n    if pipController.isPictureInPictureActive {\n        pipController.stopPictureInPicture()\n    } else {\n        pipController.startPictureInPicture()\n    }\n}\n\n\nImportant\n\nOnly begin PiP playback in response to user interaction and never programmatically. The App Store review team rejects apps that fail to follow this requirement.\n\nRestore Control to Your App\n\nA user selects the stop PiP affordance in the PiP window to return control to your app. By default, this action terminates playback when control returns to the app. It\u2019s your responsibility to properly restore your video playback interface.\n\nTo handle the restore process, implement the pictureInPictureController(_:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:) delegate method and restore your player interface as needed. When the restoration is complete, call the completion handler with a value of true.\n\nfunc pictureInPictureController(_ pictureInPictureController: AVPictureInPictureController,\n                                restoreUserInterfaceForPictureInPictureStopWithCompletionHandler completionHandler: @escaping (Bool) -> Void) {\n    // Restore the user interface.\n    completionHandler(true)\n}\n\n\nDismiss Playback Controls\n\nWhile PiP is active, dismiss playback controls in your main player, and present artwork in the PiP window to indicate that PiP mode is active. To implement this functionality, use the pictureInPictureControllerWillStartPictureInPicture(_:) and pictureInPictureControllerDidStopPictureInPicture(_:) delegate methods, and take the required actions.\n\nfunc pictureInPictureControllerWillStartPictureInPicture(_ pictureInPictureController: AVPictureInPictureController) {\n    // Hide the playback controls.\n    // Show the placeholder artwork.\n}\n\n\nfunc pictureInPictureControllerDidStopPictureInPicture(_ pictureInPictureController: AVPictureInPictureController) {\n    // Hide the placeholder artwork.\n    // Show the playback controls.\n}\n\nSee Also\nPicture in Picture\nAdopting Picture in Picture Playback in tvOS\nAdd advanced multitasking capabilities to your video apps by using Picture in Picture playback in tvOS.\nAdopting Picture in Picture in a Standard Player\nAdd Picture in Picture (PiP) playback to your app using a player view controller.\nAdopting Picture in Picture for video calls\nAdd multitasking capability to your video-call apps by using Picture in Picture (PiP).\nAccessing the camera while multitasking on iPad\nOperate the camera in Split View, Slide Over, Picture in Picture, and Stage Manager modes.\nclass AVPictureInPictureController\nA controller that responds to user-initiated Picture in Picture playback of video in a floating, resizable window."
    },
    {
        "title": "VideoPlayer",
        "url": "https://developer.apple.com/documentation/avkit/videoplayer",
        "html": "Overview\n\nimport SwiftUI\nimport AVKit\n\n\nstruct ContentView: View {\n    @State var player = AVPlayer(url: Bundle.main.url(forResource: \"video2\",\n                                                      withExtension: \"m4v\")!)\n    @State var isPlaying: Bool = false\n    \n    var body: some View {\n        VStack {\n            VideoPlayer(player: player)\n                .frame(width: 320, height: 180, alignment: .center)\n\n\n            Button {\n                isPlaying ? player.pause() : player.play()\n                isPlaying.toggle()\n                player.seek(to: .zero)\n            } label: {\n                Image(systemName: isPlaying ? \"stop\" : \"play\")\n                    .padding()\n            }\n        }\n    }       \n}\n\n\nTopics\nCreating a Video Player\ninit(player: AVPlayer?)\nCreates a video-player user interface for the player object.\nAvailable when VideoOverlay is EmptyView.\ninit(player: AVPlayer?, videoOverlay: () -> VideoOverlay)\nCreates a video-player user interface for the player object.\nInstance Methods\nfunc defaultScrollAnchor(UnitPoint?) -> View\nfunc dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> View\nfunc focusedValue<T>(T?) -> View\nfunc geometryGroup() -> View\nfunc scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> View\nfunc scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> View\nfunc scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> View\nfunc searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> View\nfunc toolbar(removing: ToolbarDefaultItemKind?) -> View\nfunc upperLimbVisibility(Visibility) -> View\nRelationships\nConforms To\nView\nSee Also\nMultiplatform Playback and Capture\nfunc continuityDevicePicker(isPresented: Binding<Bool>, onDidConnect: ((AVContinuityDevice?) -> Void)?) -> View\nPresents an interface a person uses to select a nearby continuity device and connect to their Apple TV."
    },
    {
        "title": "AVPlayerView",
        "url": "https://developer.apple.com/documentation/avkit/avplayerview",
        "html": "Overview\n\nThe player view supports several controls styles, ranging from no controls to controls matching the look of QuickTime Player. This makes it easy for you to tailor the presentation to best match your use of the player view. Regardless of the selected controls style, the player view always supports the following standard set of keyboard shortcuts to control playback:\n\nThe Space bar plays and pauses playback.\n\nThe right and left arrow keys step frame-by-frame through the video.\n\nJKL navigation:\n\nThe J key rewinds. Press it multiple times to cycle through rewind speeds.\n\nThe K key stops playback.\n\nThe L key fast-forwards. Press it multiple times to cycle through fast-forward speeds.\n\nThe player view also makes it simple to add trimming capabilities to your player. Call the view\u2019s beginTrimming(completionHandler:) method to present a trimming UI that matches the QuickTime Player interface.\n\nTopics\nCustomizing the User Interface\nvar controlsStyle: AVPlayerViewControlsStyle\nThe player view\u2019s controls style.\nenum AVPlayerViewControlsStyle\nConstants that indicate which user interface controls the view displays.\nvar showsFrameSteppingButtons: Bool\nA Boolean value that determines whether the player view displays frame stepping buttons.\nvar showsSharingServiceButton: Bool\nA Boolean value that determines whether the player view displays a sharing service button.\nvar showsFullScreenToggleButton: Bool\nA Boolean value that determines whether the player view displays a full-screen toggle button.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar contentOverlayView: NSView?\nA view that adds additional custom views between the video content and the controls.\nvar actionPopUpButtonMenu: NSMenu?\nAn action pop-up button menu that the player view displays.\nvar updatesNowPlayingInfoCenter: Bool\nA Boolean value that indicates whether the player view controller updates the Now Playing info center.\nCustomizing the Video Presentation\nvar isReadyForDisplay: Bool\nA Boolean value that indicates whether the current player item\u2019s first video frame is ready for display.\nvar videoBounds: NSRect\nThe current size and position of the video image that displays within the player view\u2019s bounds.\nvar videoGravity: AVLayerVideoGravity\nA value that determines how the player view displays video content within its bounds.\nConfiguring Frame Analysis\nvar allowsVideoFrameAnalysis: Bool\nA Boolean value that indicates whether to perform video frame analysis.\nvar videoFrameAnalysisTypes: AVVideoFrameAnalysisType\nstruct AVVideoFrameAnalysisType\nConstants that define the types of analysis a player view controller may perform on a paused video frame.\nConfiguring the Playback Speed\nvar speeds: [AVPlaybackSpeed]\nA list of user-selectable playback speeds to show in the playback speed control.\nvar selectedSpeed: AVPlaybackSpeed?\nThe currently selected playback speed.\nfunc selectSpeed(AVPlaybackSpeed)\nSelects a specified playback speed.\nclass AVPlaybackSpeed\nAn object that represents a user-selectable playback speed in a playback user interface.\nConfiguring Picture in Picture\nvar allowsPictureInPicturePlayback: Bool\nA Boolean value that determines whether the player view allows Picture in Picture playback.\nvar pictureInPictureDelegate: AVPlayerViewPictureInPictureDelegate?\nThe Picture in Picture delegate object.\nprotocol AVPlayerViewPictureInPictureDelegate\nA protocol that defines the methods to implement to respond to Picture in Picture playback events.\nMagnifying Video\nvar allowsMagnification: Bool\nA Boolean value that indicates whether the magnify gesture changes the video\u2019s view magnification.\nvar magnification: CGFloat\nThe factor by which the video\u2019s view is currently scaled.\nfunc setMagnification(CGFloat, centeredAt: CGPoint)\nScales the video\u2019s view by a specified factor, and centers the result on a specified point.\nDisplaying the Chapter and Title\nfunc flashChapterNumber(Int, chapterTitle: String?)\nDisplays the chapter number and title in the player view for a brief moment.\nTrimming Media\nvar canBeginTrimming: Bool\nA Boolean value that indicates whether the player view can begin trimming.\nfunc beginTrimming(completionHandler: ((AVPlayerViewTrimResult) -> Void)?)\nPuts the player view into trimming mode.\nenum AVPlayerViewTrimResult\nConstants that specify an action a user takes when trimming media in a player view.\nSetting the Player Object\nvar player: AVPlayer?\nThe player instance that provides the media content for the view.\nSetting the Delegate Object\nvar delegate: AVPlayerViewDelegate?\nThe player view\u2019s delegate object.\nprotocol AVPlayerViewDelegate\nA protocol that defines the methods to implement to participate in the player view\u2019s full-screen presentation life cycle.\nRelationships\nInherits From\nNSView\nSee Also\nmacOS Playback and Capture\nImplementing Trimming in a macOS Player\nProvide a QuickTime media-trimming experience in your macOS app.\nclass AVCaptureView\nA view that displays standard user interface controls for capturing media data."
    },
    {
        "title": "Implementing Trimming in a macOS Player",
        "url": "https://developer.apple.com/documentation/avkit/implementing_trimming_in_a_macos_player",
        "html": "Overview\n\nYou use AVPlayerView to provide a playback experience like that of QuickTime Player in macOS. However, AVPlayerView not only provides the QuickTime playback interface, but it also provides the QuickTime media-trimming experience.\n\nVerify that Trimming Is Allowed\n\nBefore attempting to put the player into trimming mode, verify that trimming is allowed by querying the player view\u2019s canBeginTrimming property. This property returns false if you\u2019re playing an asset delivered over HTTP Live Streaming or if the asset is content protected. If you\u2019re presenting a menu item to initiate trimming, a good place to perform this check is in the validateUserInterfaceItem(_:) method of NSDocument, so that the menu item can automatically be disabled if trimming is disallowed.\n\noverride func validateUserInterfaceItem(_ item: NSValidatedUserInterfaceItem) -> Bool {\n    if item.action == #selector(beginTrimming) {\n        return playerView.canBeginTrimming\n    }\n    return super.validateUserInterfaceItem(item)\n}\n\n\nEnter Trimming Mode\n\nAfter you\u2019ve determined that the media supports trimming, you call the beginTrimming(completionHandler:). This method takes a completion block that you use to determine whether the user completed the trim or canceled the operation.\n\n@IBAction func beginTrimming(_ sender: AnyObject) {\n    playerView.beginTrimming { result in\n        if result == .okButton {\n            // user selected Trim button (AVPlayerViewTrimResult.okButton)...\n        } else {\n            // user selected Cancel button (AVPlayerViewTrimResult.cancelButton)...\n        }\n    }\n}\n\n\nTranscode the Trimmed Asset\n\nBecause AVAsset is an immutable object, you may be wondering how its duration is changed when you click the Trim button. Trimming relies on a feature of AVPlayerItem to adjust the presented time range. AVPlayerItem provides the reversePlaybackEndTime and forwardPlaybackEndTime properties that set the in and out points for a media item. It doesn\u2019t change the underlying asset, but essentially changes your effective view of it. To save the results of the user\u2019s trim operation, you export a new copy of the asset, trimming it to the specified times. The simplest way to do this is to use AVAssetExportSession, which provides a simple and performant way for you to transcode the media of an asset. You create a new export session, passing it the asset to export along with a transcoding preset to use.\n\n// Transcoding preset\nlet preset = AVAssetExportPresetAppleM4V720pHD\nlet exportSession = AVAssetExportSession(asset: playerItem.asset, presetName: preset)!\nexportSession.outputFileType = AVFileTypeAppleM4V\nexportSession.outputURL = // Output URL\n\n\nThis example uses a preset to export the media as a 720p, M4V file, but AVAssetExportSession supports a wide variety of export presets. To find out what export session presets are supported for the current asset, you can use the session\u2019s exportPresets(compatibleWith:) class method, passing it the asset you want to export. This method returns an array of valid presets that you can use in your export.\n\nSelect the Trimmed Asset\n\nTo export only the content the user trimmed, you use the current player item\u2019s reverse and forward end-time values to define a CMTimeRange to set on the export session.\n\n// Create CMTimeRange with the trim in/out point times\nlet startTime = self.playerItem.reversePlaybackEndTime\nlet endTime = self.playerItem.forwardPlaybackEndTime\nlet timeRange = CMTimeRangeFromTimeToTime(startTime, endTime)\nexportSession.timeRange = timeRange\n\n\nExport the Trimmed Asset\n\nTo perform the actual export operation, you call its exportAsynchronously(completionHandler:) method. Check the status of the export session in the completion handler and handle completion and failure cases.\n\nexportSession.exportAsynchronously {\n    switch exportSession.status {\n    case .completed:\n        // Export Complete\n    case .failed:\n        // failed\n    default:\n        // handle others\n    }\n}\n\nSee Also\nmacOS Playback and Capture\nclass AVPlayerView\nA view that displays content from a player and presents a native user interface to control playback.\nclass AVCaptureView\nA view that displays standard user interface controls for capturing media data."
    },
    {
        "title": "Adopting the system player interface in visionOS",
        "url": "https://developer.apple.com/documentation/avkit/adopting_the_system_player_interface_in_visionos",
        "html": "Overview\n\nThe recommended way to provide a video playback interface for your visionOS app is to adopt AVPlayerViewController. Using this class makes it simple to provide the same playback user interface and features found in system apps like TV and Music. It also provides essential system integration to deliver an optimal viewing experience whether you\u2019re playing standard 2D content or immersive 3D video with spatial audio. This article describes best practices for presenting the player in visionOS and covers the options the player provides to customize its user interface to best fit your app.\n\nNote\n\nIn addition to providing the system playback interface, you can also use AVPlayerViewController to present a media-trimming experience similar to QuickTime Player in macOS. See Trimming and exporting media in visionOS for more information.\n\nExplore presentation options\n\nUse AVPlayerViewController to play video in windowed environments in visionOS. It automatically adapts its user interface to best fit its presentation. For example, when you present it nested inside another view, it displays an inline user interface:\n\nNote\n\nWhen you present the player inline, it only displays standard 2D video. To play 3D content, present it fullscreen.\n\nPresent the player in full-screen mode by setting it as the exclusive root view of your app, or by presenting it using the fullScreenCover(item:onDismiss:content:) modifier. In full-screen mode, the player presents a more content-forward design that dims the environment by default to provide more suitable viewing. This provides a streamlined viewing experience for both 2D and 3D content.\n\nDisplay supporting metadata\n\nThe user interface displays a title view above the transport bar when the current player item contains title and subtitle metadata. When playing live-streaming content, the title view may also display a badge to indicate the content state to the viewer.\n\nThe title view displays the values of an asset\u2019s commonIdentifierTitle and iTunesMetadataTrackSubTitle metadata items, when available. If your media doesn\u2019t provide embedded metadata, you can add supplemental metadata to display by creating instances of AVMetadataItem. The table below lists the metadata values the player user interface supports.\n\nMetadata\n\n\t\n\nIdentifier\n\n\t\n\nType\n\n\n\n\nTitle\n\n\t\n\ncommonIdentifierTitle\n\n\t\n\nString\n\n\n\n\nSubtitle\n\n\t\n\niTunesMetadataTrackSubTitle\n\n\t\n\nString\n\n\n\n\nArtwork\n\n\t\n\ncommonIdentifierArtwork\n\n\t\n\nData\n\n\n\n\nDescription\n\n\t\n\ncommonIdentifierDescription\n\n\t\n\nString\n\n\n\n\nGenre\n\n\t\n\nquickTimeMetadataGenre\n\n\t\n\nString\n\n\n\n\nContent rating\n\n\t\n\niTunesMetadataContentRating\n\n\t\n\nString\n\nIn an app that defines a simple structure to hold string and data items, you can map its values to their appropriate metadata identifiers and build an array of metadata items:\n\nprivate func createMetadataItems(for metadata: Metadata) -> [AVMetadataItem] {\n    [\n        metadataItem(key: .commonIdentifierTitle, value: metadata.title),\n        metadataItem(key: .iTunesMetadataTrackSubTitle, value: metadata.subtitle),\n        metadataItem(key: .commonIdentifierArtwork, value: metadata.imageData),\n        metadataItem(key: .commonIdentifierDescription, value: metadata.description),\n        metadataItem(key: .iTunesMetadataContentRating, value: metadata.rating),\n        metadataItem(key: .quickTimeMetadataGenre, value: metadata.genre)\n    ]\n}\n\n\nprivate func metadataItem(key identifier: AVMetadataIdentifier,\n                          value: Any) -> AVMetadataItem {\n    let item = AVMutableMetadataItem()\n    item.identifier = identifier\n    item.value = value as? NSCopying & NSObjectProtocol\n    item.extendedLanguageTag = \"und\"\n    // Return an immutable copy of the item.\n    return item.copy() as! AVMetadataItem\n}\n\n\nTo apply the metadata to the current player item, set the array of metadata items as the value of the player item\u2019s externalMetadata property:\n\nlet metadata: Metadata = // A structure that contains simple string values.\nplayerItem.externalMetadata = createMetadataItems(for: metadata)\n\n\nOnly the title and subtitle values display in the title view. The player presents the other supported metadata values in its Info tab, which the section below describes.\n\nDisplay custom informational views\n\nThe visionOS player UI can display one or more content tabs in the user interface to show supporting information or related content. By default, the player presents an Info tab when an asset contains embedded metadata or when you set external metadata on the player item, as the Display supporting metadata section above describes.\n\nYour app can also present custom tabs to show supporting content. You define your tab content as standard SwiftUI views, wrap them in a UIHostingController, and set them as the customInfoViewControllers property. The player UI uses the title property of the hosting controller to display as the tab title in the interface, so set this value before setting it on the player view controller.\n\n// Set custom content tabs on the player UI.\nlet title = String(localized: \"Up Next\")\n\n\nlet view = UpNextView(videos: upNextVideos)\nlet hostingController = UIHostingController(title: title, rootView: view)\n\n\nhostingController.preferredContentSize = CGSize(width: 300, height: 100)\ncontroller.customInfoViewControllers = [hostingController]\n\n\nPresent actions in the Info tab\n\nThe player UI presents an Info tab when the asset it displays provides embedded or external metadata. The tab\u2019s view displays the metadata details, and it may show up to two UIAction controls along its trailing edge:\n\nCustomize the actions the view presents by setting a value for the player view controller\u2019s infoViewActions property. When playing nonlive content, this property contains a single-element array that presents an action to play the content from the beginning. You can replace the default value (if present), add an additional action, or set this property value to an empty array to display no actions. The example below shows how to add a Add to Favorites action to the view:\n\nlet infoCircle = UIImage(systemName: \"info.circle\")\nlet showMoreInfo = UIAction(title: \"More Information\", image: infoCircle) { action in\n    // Navigate to a screen to display more information.\n}\n// Append the action to the array.\nplayerViewController.infoViewActions.append(showMoreInfo)\n\n\nDisplay actions contextually\n\nYou can use the visionOS player UI to present controls contextually, which your app displays for a specific range of time in the content and then dismiss. A common use for this type of control is a skip button that displays during the title sequence of a movie or TV show. People can tap the button to bypass the introduction and quickly skip to the main content.\n\nAVPlayerViewController provides a contextualActions property you can use to specify one or more actions to present. The player displays them along the bottom-trailing side of the screen. The following code example shows a simple implementation of an action that seeks the player forward to the time of the main content:\n\n// Define an action to skip the intro of a media item.\nprivate lazy var skipActions: [UIAction] = {\n    [UIAction(title: \"Skip Intro\") { [weak self] _ in\n        guard let self else { return }\n        avPlayer.seek(to: skipToTime)\n    }]\n}()\n\n\nWhen you set a value for the contextualActions property, the player presents the controls immediately. To present them only during a relevant section of the content, observe the player timing by adding a periodic or boundary time observer. The following example defines a periodic time observer that fires every second during normal playback. In each invocation, it evaluates the new time to determine whether it falls within the presentation range. If it does, the example sets the skip action as the contextual actions value; otherwise, it clears the value by setting it to an empty array.\n\nprivate func addTimeObserver() {\n    // Observe the player's timing every second.\n    let interval = CMTime(value: 1, timescale: 1)\n    let fifteenSeconds = CMTime (value: 15, timescale: 1)\n    timeObserver = avPlayer.addPeriodicTimeObserver(forInterval: interval,\n                                                    queue: .main) { [weak self] time in\n        guard let self else { return }\n        let duration = avPlayer.currentItem?.duration ?? .zero\n        // Show the Skip Intro button during the first 15 seconds of the content.\n        showSkipIntroAction = time <= fifteenSeconds\n    }\n}\n\n\nSee Also\nvisionOS Playback\nTrimming and exporting media in visionOS\nDisplay standard controls in your app to edit the timeline of the currently playing media.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events."
    },
    {
        "title": "AVDisplayManager",
        "url": "https://developer.apple.com/documentation/avkit/avdisplaymanager",
        "html": "Overview\n\nIf you set the display manager\u2019s preferredDisplayCriteria, when a user enables a Match Content setting, the TV attempts to change modes to match the currently playing video\u2019s native display criteria.\n\nImportant\n\nDon\u2019t directly instantiate a display manager object. Instead, access the current instance from the key window\u2019s avDisplayManager property.\n\nTopics\nMatching a Video's Native Display Mode\nvar preferredDisplayCriteria: AVDisplayCriteria?\nA hint for the TV to set the display mode to best match the currently playing content\u2019s display criteria.\nvar isDisplayCriteriaMatchingEnabled: Bool\nA Boolean value that indicates whether the user has enabled display critera matching.\nvar isDisplayModeSwitchInProgress: Bool\nA Boolean value that indicates whether a display mode switch is in progress.\nRelationships\nInherits From\nNSObject\nSee Also\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "AVContinuityDevicePickerViewController",
        "url": "https://developer.apple.com/documentation/avkit/avcontinuitydevicepickerviewcontroller",
        "html": "Overview\n\nThe view controller presents an interface on an Apple TV that lets a person choose a nearby continuity device (AVContinuityDevice). Your app can then connect to that device\u2019s cameras and microphones (see AVCaptureDevice and AVAudioSessionPortDescription, respectively).\n\nImportant\n\nThe continuity device picker presents any devices near the Apple TV that use the same Apple ID.\n\nTo respond to the various outcome events from the picker, your app needs to implement the AVContinuityDevicePickerViewControllerDelegate and assign it to the picker\u2019s delegate property.\n\nNote\n\nSwiftUI apps can present the same interface with the continuityDevicePicker(isPresented:onDidConnect:) view modifier.\n\nTopics\nChecking for feature support\nclass var isSupported: Bool\nA Boolean value that indicates whether the system supports connecting to a continuity device.\nDesignating a delegate\nvar delegate: AVContinuityDevicePickerViewControllerDelegate?\nThe delegate that responds to events from the continuity device picker view controller.\nRelationships\nInherits From\nUIViewController\nSee Also\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "AVContentProposalViewController",
        "url": "https://developer.apple.com/documentation/avkit/avcontentproposalviewcontroller",
        "html": "Overview\n\nSubclass this class to define the user interface for your content proposal.\n\nTopics\nConfiguring the Proposal\nvar contentProposal: AVContentProposal?\nA prosal of content to play.\nclass AVContentProposal\nAn object that describes the content to propose playing after the current item finishes.\nvar dateOfAutomaticAcceptance: Date?\nThe date that the system automatically accepts a proposal if the user doesn\u2019t intervene.\nvar playerLayoutGuide: UILayoutGuide\nA layout guide that tracks the size and location of the player view.\nvar preferredPlayerViewFrame: CGRect\nThe preferred presentation frame of the player view while the content proposal is active.\nDismissing the Proposal\nfunc dismissContentProposal(for: AVContentProposalAction, animated: Bool, completion: (() -> Void)?)\nDismisses the current content proposal.\nenum AVContentProposalAction\nConstant that indicate the action a user takes when dismissing a content proposal.\nAccessing the Player View Controller\nvar playerViewController: AVPlayerViewController?\nThe player view controller that presents a content proposal.\nRelationships\nInherits From\nUIViewController\nSee Also\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "Supporting Continuity Camera in your tvOS app",
        "url": "https://developer.apple.com/documentation/avkit/supporting_continuity_camera_in_your_tvos_app",
        "html": "Overview\n\nContinuity Camera brings the power of the cameras and microphones from an iOS or iPadOS device to Apple TV, including advanced features like Center Stage and Portrait mode.\n\nThis sample project provides an example implementation that accesses a camera and microphone from a nearby iPhone or iPad in an Apple TV app. It builds on a similar sample, Supporting Continuity Camera in your macOS app, and shares some of its functionality, including automatic camera selection and observing the state of video effects. The following sections focus on the aspects specific to tvOS.\n\nNote\n\nThis sample code project is associated with WWDC23 session 10256: Discover Continuity Camera on tvOS.\n\nConfigure the sample code project\n\nTo run this sample app, you need the following:\n\nAn Apple TV 4k (2nd generation) or later with tvOS 17 or later.\n\nAn iPhone or iPad with iOS 17 or iPadOS 17, respectively, or later.\n\nYou need to run this sample code project on physical devices, because Simulator doesn\u2019t include the components to support cameras.\n\nContinuity Camera works with all iPhone and iPad models that support video effects in Control Center. You need to sign in with an Apple ID that uses two-factor authentication for the Apple TV and the device with a camera. You can use a separate Apple ID for each device or the same Apple ID for both.\n\nThe first time you run the app on an Apple TV, the system prompts you for permission to access to the camera and microphone. The app needs these permissions to function correctly.\n\nPresent the continuity device picker\n\nWhen the app launches, it immediately presents a continuity device picker by calling the continuityDevicePicker(isPresented:onDidConnect:) modifier in its SwiftUI implementation.\n\n.continuityDevicePicker(isPresented: $showContinuityDevicePicker,\n                        onDidConnect: handleNewConnectionForDevice)\n.task {\n    // Shows the picker when app has no continuity device at launch.\n    if !captureManager.activateDefaultContinuityCameraDevice() {\n        showContinuityDevicePicker = true\n    }\n\n\nThe picker only appears if the isPresented parameter \u2014 which is a Boolean Binding \u2014 is true. The picker calls the closure the app passes to the onDidConnect parameter when a person selects a device and the system successfully connects to it.\n\nfunc handleNewConnectionForDevice(_ device: AVContinuityDevice?) {\n    guard let device else {\n        print(\"The Continuity Device Picker didn't connect a device.\")\n        return\n    }\n\n\n    guard let firstCamera = device.videoDevices.first else {\n        print(\"The Continuity Device Picker doesn't have any cameras.\")\n        return\n    }\n\n\n    captureManager.setActiveVideoInput(firstCamera,\n                                       isUserPreferredCamera: true)\n}\n\n\nThe handling closure\u2019s AVContinuityDevice parameter represents the device that a person selects on their Apple TV. Each continuity device has a videoDevices property, which is an array of AVCaptureDevice instances.\n\nThe app\u2019s handleNewConnectionForDevice(_:) method is a minimal implementation that selects the first video device in the array. Apps typically compare all the video device elements and select one that\u2019s appropriate for their needs.\n\nNote\n\nUIKit based apps can create a continuity device picker by creating an AVContinuityDevicePickerViewController instance.\n\nConnect a video device to a capture session\n\nThe app\u2019s CaptureManager class creates and maintains an AVCaptureSession instance for the app\u2019s lifetime. The capture manager\u2019s setActiveVideoInput(_:) method creates an AVCaptureDeviceInput instance from the video device, and then tests to see whether it\u2019s an acceptable input for the capture session.\n\nlet name = camera.localizedName\nprint(\"Setting video input to: \\(name).\")\n\n\n// Creates a video input with the camera.\nguard let videoInput = try? AVCaptureDeviceInput(device: camera) else {\n    print(\"Couldn't make an input from: \\(name).\")\n    return false\n}\n\n\n// Checks whether the capture session accepts the new camera as an input.\nguard session.canAddInput(videoInput) else {\n    print(\"Capture session rejected '\\(name)' as an input.\")\n    return false\n}\n\n\n// Adds the new camera input to the capture session.\nactiveInput = videoInput\n\n\nIf the new device is an acceptable input, the method assigns it to the app\u2019s activeInput property. The property updates the capture session with its willSet and didSet property observers.\n\ninternal var activeInput: AVCaptureDeviceInput? {\n    willSet {\n        if let oldInput = activeInput {\n            session.removeInput(oldInput)\n        }\n    }\n    didSet {\n        if let newInput = activeInput {\n            session.addInput(newInput)\n        }\n        isActive = (activeInput != nil)\n    }\n}\n\n\nThe willSet observer removes the capture session\u2019s current input, if applicable. The didSet observer adds the new input to the capture session. The didSet observer also updates the isActive Boolean property, which can cause the app to change its behavior and UI.\n\nRegister for capture device updates\n\nThe app receives various updates related to its capture device by registering with NotificationCenter and with key-value observation (KVO). See Using Key-Value Observing in Swift and NSKeyValueObserving for more information.\n\nThe app specifically registers for the following events:\n\nA specific video effect, such as Center Stage, changes its active state.\n\nThe system changes the capture device it prefers.\n\nThe active capture device disconnects from the system.\n\nNote\n\nPeople can enable video effects in Control Center on Apple TV.\n\nThe sample\u2019s implementation that monitors the video effects and system changes is similar to the macOS equivalent of this sample, Supporting Continuity Camera in your macOS app. The sample also monitors Notification Center events related to the camera. The app\u2019s capture manager responds when a capture device disconnects by registering with Notification Center for the AVCaptureDeviceWasConnected event.\n\nfunc observeCamera(_ camera: AVCaptureDevice) {\n    // Tells the observer to watch the new camera's properties.\n    videoEffectsObvserver.observeCamera(camera)\n\n\n    // Tells the notification observer to monitor camera-related events.\n    notificationObserver.observeCamera(camera,\n                                       with: notification(_:for:))\n}\n\n\nThe app\u2019s CaptureDeviceNotificationObserver structure listens for the these events on behalf of the capture manager and calls the manager\u2019s notification(_:for:) method for each event it gets from Notification Center.\n\nConfigure the audio engine with an audio input device\n\nAt launch, the app creates an AudioCapturer instance, which checks for audio inputs (microphones). It does this by inspecting the availableInputs property of the AVAudioSession type\u2019s shared instance, and then monitoring the property for updates.\n\nThe app monitors for new microphones \u2014\u00a0similar to how the app\u2019s capture manager monitors for new cameras \u2014 by observing the isInputAvailable property of the AVAudioSession type\u2019s shared instance.\n\nprivate static let inputAvailableKeyPath = \"isInputAvailable\"\n\n\nfunc registerForInputAvailabilityUpdates(on session: AVAudioSession) {\n    session.addObserver(self,\n                        forKeyPath: Self.inputAvailableKeyPath,\n                        options: [.new],\n                        context: nil)\n}\n\n\nWhen the app has access to a microphone, it configures an AVAudioEngine instance in the audio capturer\u2019s setupAndStartAudioSession() method.\n\nfunc setupAndStartAudioSession() {\n    configureAudioOutput()\n    enableVoiceProcessing(true)\n    configureAudioSessionForVoiceChat()\n    startAudioEngine()\n}\n\n\nThe method configures the audio engine for a conference call scenario when the app gains access to a microphone \u2014\u00a0at launch or later \u2014 with the following steps:\n\nConfigures the audio engine to produce sound from the system\u2019s first audio output.\n\nEnables voice processing on the audio engine\u2019s input node.\n\nConfigures the audio engine for conversational audio.\n\nStarts the audio engine.\n\nConfigure the audio engine for a call\n\nThe third step is important for conferencing apps that use Voice over IP (VoIP). The configureAudioSessionForVoiceChat method configures the audio session by passing the voiceChat mode to the audio session\u2019s setCategory(_:options:) method.\n\ntry avAudioSession.setCategory(.playAndRecord,\n                               mode: .voiceChat,\n                               options: [])\n\n\nThe app gains access to additional audio features and microphone modes, including automatic gain correction, voice processing, and muting, by configuring the audio session for VoIP.\n\nThe app\u2019s audio interface has a button that lets a person temporarily disable microphone processing, including echo cancellation, by bypassing the audio engine\u2019s voice processing. Each time a person toggles the button, the app calls audio capturer\u2019s bypassVoiceProcessing(_:) method.\n\npublic func bypassVoiceProcessing(_ bypass: Bool) {\n    // If true, temporarily disables echo cancelation.\n    avAudioEngine.inputNode.isVoiceProcessingBypassed = bypass\n\n\n    DispatchQueue.main.async {\n        self.isVoiceProcessingBypassed = bypass\n    }\n\n\n    var message = \"Audio engine's voice processing: \"\n    message += bypass ? \"bypassed\" : \"normal\"\n    print(message)\n}\n\n\nThe app can temporarily disable voice processing by setting the isVoiceProcessingBypassed property of the audio engine\u2019s inputNode to true. This gives the app all the incoming audio from the microphone without any adjustments from the system.\n\nNote\n\nThe behavior of the audio engine\u2019s isVoiceProcessingBypassed property is similar to kAUVoiceIOProperty_BypassVoiceProcessing. For more information, see Audio Unit Voice I/O.\n\nSee Also\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "Working with Overlays and Parental Controls in tvOS",
        "url": "https://developer.apple.com/documentation/avkit/working_with_overlays_and_parental_controls_in_tvos",
        "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC 2019 session 503: Delivering Intuitive Media Playback with AVKit.\n\nConfigure the Sample Code Project\n\nOnly navigation from live streaming supports channel flipping, so you need to replace the assets in this sample with your live content to demonstrate this behavior.\n\nBy default, the sample demonstrates automatic support for parental controls. Activate parental restrictions by following the steps below:\n\nGo to Settings > General > Restrictions.\n\nTurn on Restrictions.\n\nSet a passcode (1111 for demonstration purposes; remember this passcode).\n\nScroll down to the Allowed Content section.\n\nSelect Movies and/or TV Shows.\n\nSet a restriction level (for example, PG or PG-13 if you are in the United States).\n\nThe first demo video has a rating of PG, and the second has a rating of PG-13. You can find or edit these ratings in MainViewController.swift.\n\nThis sample also demonstrates explicit support for parental restrictions by directly calling requestPlaybackRestrictionsAuthorization(_:). You can test explicit support by changing the value of checkParentalControlsExplicitly in the sample.\n\nSee Also\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "AVPlayerViewController",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller",
        "html": "Overview\n\nA player view controller makes it simple to add media playback capabilities to your app that match the styling and features of the native system players. Using this object also means that your app automatically adopts the new features and styling of future operating system releases.\n\nImportant\n\nThe framework doesn\u2019t support subclassing AVPlayerViewController.\n\nSupport AirPlay\n\nAirPlay lets users stream media to Apple TV, HomePod, and AirPlay 2-compatible speakers and smart TVs. A player view controller supports AirPlay automatically, but you need to configure your app to enable it. See Configuring the Audio Playback of iOS and tvOS Apps for more information about configuring your app for background playback.\n\nAdopt Picture in Picture Playback\n\nAVPlayerViewController provides Picture in Picture (PiP) playback in iOS, tvOS, and macOS. PiP playback lets users minimize the video player to a small floating window so they can perform other activities in the primary app or in another app.\n\nCustomize the tvOS Playback Experience\n\nAVPlayerViewController in tvOS brings advanced Siri Remote control features to your app. This support lets users play and navigate your content, and access supporting features like subtitles and alternate audio tracks. This object also provides support for using Siri Remote voice commands, such as \u201cSkip ahead 15 seconds\u201d and \u201cWhat did they say?\u201d, to control playback of your content.\n\nAVKit for tvOS extends the features of AVPlayerViewController and AVPlayerItem to provide additional ways to navigate and present content. Features unique to the tvOS player user interface include:\n\nNavigation Marker Groups. A group of navigation markers that allow a viewer to jump between significant events in the media timeline. The most common type of navigation marker group is a chapter list, but you can also create additional or alternative means of navigation \u2014 for example, to allow the user to quickly jump between key moments in a recorded sporting event. The player view controller lets the user choose between multiple marker groups for navigating through the media timeline.\n\nUse the AVNavigationMarkersGroup class to create and describe navigation markers, then use the navigationMarkerGroups property to associate marker groups with the current AVPlayerItem object.\n\nInterstitial Content. Some content might not relate to the main content that your app presents, or might have different presentation requirements. For example, you might not allow the user to skip over advertisements when scrubbing through the playback timeline, or to skip mandatory legal notices.\n\nUse the AVInterstitialTimeRange class to describe interstitial content, and the interstitialTimeRanges property to associate those time ranges with the current AVPlayerItem object.\n\nContent Proposals. When presenting serialized content, like a TV show, you often want to propose additional content for the viewer to watch when the current episode ends. It\u2019s straightforward to add this functionality to your app using content proposals.\n\nUse the AVContentProposal class to describe the proposed content, and set it as the nextContentProposal property of the current AVPlayerItem object. You can implement the methods of the player view controller\u2019s delegate object to prepare to present a content proposal, and perform actions in response to the viewer accepting, rejecting, or deferring the proposal.\n\nTopics\nConfiguring Presentation\nvar showsPlaybackControls: Bool\nA Boolean value that indicates whether the player view controller shows playback controls.\nvar contentOverlayView: UIView?\nA view that displays between the video content and the playback controls.\nvar videoGravity: AVLayerVideoGravity\nA string that specifies how the video displays within the bounds of the view controller\u2019s view.\nvar videoBounds: CGRect\nThe size and position of the video image within the bounds of the view controller\u2019s view.\nvar showsTimecodes: Bool\nA Boolean value that determines whether the player view displays timecodes, if available.\nvar appliesPreferredDisplayCriteriaAutomatically: Bool\nA Boolean value that indicates whether the view controller automatically sets the screen\u2019s display criteria to match that of the currently playing asset.\nCustomizing the tvOS Player UI\nvar playbackControlsIncludeTransportBar: Bool\nA Boolean value that indicates whether the player shows the transport bar and related controls.\nvar playbackControlsIncludeInfoViews: Bool\nA Boolean value that indicates whether the player presents video metadata, navigation markers, and playback settings views when the user requests them.\nvar transportBarIncludesTitleView: Bool\nA Boolean value that indicates whether the player user interface shows the title view above the scrubber.\nvar transportBarCustomMenuItems: [UIMenuElement]\nAn array of actions and menus to display with the default player controls.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar customOverlayViewController: UIViewController?\nA view controller that presents custom content over the player view.\nvar unobscuredContentGuide: UILayoutGuide\nA layout guide that represents an area that fixed-position playback controls don\u2019t obscure when visible.\nvar customInfoViewController: UIViewController?\nA view controller that provides client-specific content and controls alongside system-provided information and settings panels.\nDeprecated\nConfiguring the visionOS Player UI\nvar infoViewActions: [UIAction]!\nAn array of actions to present in the Info content view.\nvar customInfoViewControllers: [UIViewController]\nAn array of view controllers to display as content tabs in the player user interface.\nvar contextualActions: [UIAction]\nAn array of action controls to present contextually during playback.\nvar contextualActionsInfoView: UIView\nA view the system shows adjacent to the contextual actions that\u2019s suitable for showing related information.\nBeta\nvar contextualActionsPreviewImage: UIImage?\nAn image to show alongside the contextual actions.\nBeta\nvar requiresMonoscopicViewingMode: Bool\nA Boolean value that indicates whether to permit playback of 2D video content only.\nBeta\nPresenting the visionOS Trimming UI\nvar canBeginTrimming: Bool\nA Boolean value that indicates whether the current media supports trimming.\nBeta\nfunc beginTrimming(completionHandler: ((Bool) -> Void)?)\nPresents the system trimming interface controls inside the player view.\nBeta\nConfiguring Frame Analysis\nvar allowsVideoFrameAnalysis: Bool\nA Boolean value that indicates whether to perform video frame analysis.\nvar toggleLookupAction: UIAction\nAn action that enables the visual lookup interface.\nvar videoFrameAnalysisTypes: AVVideoFrameAnalysisType\nThe types of analysis a player view controller performs on a paused video frame.\nstruct AVVideoFrameAnalysisType\nConstants that define the types of analysis a player view controller may perform on a paused video frame.\nConfiguring Playback Speed\nvar speeds: [AVPlaybackSpeed]\nA list of user-selectable playback speeds to show in the playback speed control.\nvar selectedSpeed: AVPlaybackSpeed?\nThe currently selected playback speed.\nfunc selectSpeed(AVPlaybackSpeed)\nSelects a specified playback speed.\nclass AVPlaybackSpeed\nAn object that represents a user-selectable playback speed in a playback user interface.\nConfiguring Picture in Picture\nvar allowsPictureInPicturePlayback: Bool\nA Boolean value that indicates whether the player allows Picture in Picture playback.\nvar canStartPictureInPictureAutomaticallyFromInline: Bool\nA Boolean value that indicates whether Picture in Picture starts automatically when transitioning to the background when the view controller presents its content inline.\nManaging Full-Screen Behavior\nvar entersFullScreenWhenPlaybackBegins: Bool\nA Boolean value that determines whether the player automatically displays in full screen when the user taps the play button.\nvar exitsFullScreenWhenPlaybackEnds: Bool\nA Boolean value that indicates whether the player exits full-screen mode when playback ends.\nManaging Subtitles\nvar allowedSubtitleOptionLanguages: [String]?\nAn array of language codes that restrict the set of subtitle languages available to the user.\nvar requiresFullSubtitles: Bool\nA Boolean value that indicates whether the user can disable the display of subtitles.\nPreventing Navigation\nvar requiresLinearPlayback: Bool\nA Boolean value that determines whether the player allows the user to skip media content.\nConfiguring Skipping Behavior\nvar isSkipForwardEnabled: Bool\nA Boolean value that indicates whether forward-skipping is available.\nvar isSkipBackwardEnabled: Bool\nA Boolean value that indicates whether backward-skipping is available.\nvar skippingBehavior: AVPlayerViewControllerSkippingBehavior\nThe behavior that skipping gestures perform.\nenum AVPlayerViewControllerSkippingBehavior\nConstants that represent the player view controller\u2019s skipping behavior.\nDetermining Display Readiness\nvar isReadyForDisplay: Bool\nA Boolean value that indicates whether the player item\u2019s first video frame is ready for display.\nUpdating Now Playing Information\nvar updatesNowPlayingInfoCenter: Bool\nA Boolean value that indicates whether the view controller updates Now Playing information.\nProposing Additional Content\nvar contentProposalViewController: AVContentProposalViewController!\nThe view controller responsible for the presentation of content proposals.\nAccessing the Player\nvar player: AVPlayer?\nThe player object that provides the media content for the view controller to display.\nAccessing the Delegate Object\nvar delegate: AVPlayerViewControllerDelegate?\nThe delegate object for the player view controller.\nConfiguring Pixel Buffers\nvar pixelBufferAttributes: [String : Any]?\nThe pixel buffer attributes of the video frames the view controller presents.\nRelationships\nInherits From\nUIViewController\nSee Also\niOS Playback\nPlaying video content in a standard user interface\nPlay media full screen, embedded inline, or in a floating Picture in Picture (PiP) window using a player view controller.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events."
    },
    {
        "title": "Customizing the tvOS Playback Experience",
        "url": "https://developer.apple.com/documentation/avkit/customizing_the_tvos_playback_experience",
        "html": "Overview\n\ntvOS 15 introduces an all-new playback experience that helps viewers stay in the moment by providing a more consistent, useful, and interactive user interface. The redesigned UI provides viewers with convenient access to relevant controls and information while always keeping the focus on the content.\n\nIt\u2019s simple to provide this playback experience in your app by using AVPlayerViewController. Using this class for your player UI provides your app the same features and familiar interactions found in the Apple TV app, including support for voice commands using the Siri Remote and presenting video in Picture in Picture. In tvOS 15, AVPlayerViewController is more configurable and customizable than ever, giving you new ways to tailor your app\u2019s video playback experience.\n\nNote\n\nExisting apps that use AVPlayerViewController adopt the new styling and features of the redesigned player UI when they link against the tvOS 15 SDK.\n\nDisplay Supporting Metadata\n\nThe player user interface displays a title view above the transport bar when the current player item contains title and subtitle metadata. When playing live streaming content, the title view may also display a badge to indicate that content state to the viewer.\n\nThe title view retrieves the values it displays from an asset\u2019s commonIdentifierTitle and iTunesMetadataTrackSubTitle metadata items, when available. If the media your app plays doesn\u2019t contain embedded metadata, you can add custom metadata by creating instances of AVMetadataItem. The table below lists the metadata values that the player user interface supports.\n\nMetadata\n\n\t\n\nIdentifier\n\n\t\n\nType\n\n\n\n\nTitle\n\n\t\n\ncommonIdentifierTitle\n\n\t\n\nData\n\n\n\n\nSubtitle\n\n\t\n\niTunesMetadataTrackSubTitle\n\n\t\n\nString\n\n\n\n\nArtwork\n\n\t\n\ncommonIdentifierArtwork\n\n\t\n\nString\n\n\n\n\nDescription\n\n\t\n\ncommonIdentifierDescription\n\n\t\n\nString\n\n\n\n\nGenre\n\n\t\n\nquickTimeMetadataGenre\n\n\t\n\nString\n\n\n\n\nContent rating\n\n\t\n\niTunesMetadataContentRating\n\n\t\n\nString\n\nIn an app that defines a structure that stores simple string-based metadata values, you could map its values to their appropriate metadata identifiers and build an array of metadata items as shown below.\n\nfunc createMetadataItems(for metadata: Metadata) -> [AVMetadataItem] {\n    let mapping: [AVMetadataIdentifier: Any] = [\n        .commonIdentifierTitle: metadata.title,\n        .iTunesMetadataTrackSubTitle: metadata.subtitle,\n        .commonIdentifierArtwork: UIImage(named: metadata.image)?.pngData() as Any,\n        .commonIdentifierDescription: metadata.description,\n        .iTunesMetadataContentRating: metadata.rating,\n        .quickTimeMetadataGenre: metadata.genre\n    ]\n    return mapping.compactMap { createMetadataItem(for:$0, value:$1) }\n}\n\n\nprivate func createMetadataItem(for identifier: AVMetadataIdentifier,\n                                value: Any) -> AVMetadataItem {\n    let item = AVMutableMetadataItem()\n    item.identifier = identifier\n    item.value = value as? NSCopying & NSObjectProtocol\n    // Specify \"und\" to indicate an undefined language.\n    item.extendedLanguageTag = \"und\"\n    return item.copy() as! AVMetadataItem\n}\n\n\nTo apply the metadata to the current player item, set the array of metadata items as the value of the player item\u2019s externalMetadata property.\n\nlet metadata: Metadata = // A structure that contains simple string values.\nplayerItem.externalMetadata = createMetadataItems(for: metadata)\n\n\nOnly the title and subtitle values display in the title view. The player presents the other supported metadata values in its Info tab, which the Display Content Tabs section below describes.\n\nNote\n\nIf your app would prefer to always hide the title view, set the value of the player view controller\u2019s transportBarIncludesTitleView to false.\n\nAdd Custom Transport Bar Items\n\nThe redesigned transport bar displays controls along its trailing side, which provides viewers quick access to common actions. The system automatically displays controls to configure common playback settings, like selecting subtitles and enabling Picture in Picture, but apps can also add custom controls to the transport bar.\n\nYou define custom transport bar items by creating instances of UIAction or UIMenu. For example, to create a simple control that toggles whether the current movie is a favorite, you could create an instance of UIAction as shown below.\n\n// Create \u2661 and \u2665 images.\nlet heartImage = UIImage(systemName: \"heart\")\nlet heartFillImage = UIImage(systemName: \"heart.fill\")\n\n\n// Create an action to add the item to the viewer's favorites.\nlet stateImage = isFavorited ? heartFillImage : heartImage\nlet favoriteAction = UIAction(title: \"Favorites\",\n                              image: stateImage) { [weak self] action in\n    \n    // Add the movie to or remove it from the viewer's favorites list.\n    self?.isFavorited.toggle()\n    \n    // Update the button image to reflect the new state.\n    action.image = isFavorite ? heartFillImage : heartImage\n}\n\n\nYou can also create more advanced arrangements of actions and present them in a menu. The following example creates a custom preferences menu that adds a gear icon to the transport bar. When a user clicks the icon, the system presents a pop-up menu with an option to enable looping playback and an inline submenu to control playback speed.\n\n// Create \u221e and \u2699 images.\nlet loopImage = UIImage(systemName: \"infinity\")\nlet gearImage = UIImage(systemName: \"gearshape\")\n\n\n// Create an action to enable looping playback.\nlet loopAction = UIAction(title: \"Loop\", image: loopImage, state: .off) { action in\n    action.state = (action.state == .off) ? .on : .off\n}\n\n\nlet speedActions = [\"Half\": 0.5, \"Default\": 1.0, \"Double\": 2.0].map { title, value in\n    UIAction(title: title, state: self.playbackSpeed == value ? .on : .off) { [weak self] action in\n        // Update the current playback speed.\n        self?.playbackSpeed = value\n        action.state = .on\n    }\n}\n\n\n// Create the submenu.\nlet submenu = UIMenu(title: \"Speed\",\n                     options: [.displayInline, .singleSelection],\n                     children: speedActions)\n\n\n// Create the main menu.\nlet menu = UIMenu(title: \"Preferences\", image: gearImage, children: [loopAction, submenu])\n\n\nTo have the player view controller present the custom items, set them as the player view controller\u2019s transportBarCustomMenuItems property value.\n\n// Set the custom transport bar items.\nplayerViewController.transportBarCustomMenuItems = [favoriteAction, menu]\n\n\nSetting the custom action and menu adds two new items to the transport bar.\n\nDisplay Content Tabs\n\nThe tvOS player UI can display one or more content tabs below the transport bar to show supporting information or related content. By default, the player presents an Info tab when an asset contains embedded metadata or when you set external metadata on the player item, as the Display Supporting Metadata section above describes.\n\nYour app can also define custom tabs by creating subclasses of UIViewController to present your supporting content, and set them as the value of the player view controller\u2019s customInfoViewControllers property. The system uses the custom view controller\u2019s title property value as the tab title, so initialize it before setting it on the player view controller.\n\n// Set custom content tabs on the player UI.\nplayerViewController.customInfoViewControllers = [\n    BonusContentViewController(title: \"Bonus\"),\n    RelatedContentViewController(title: \"Related\")\n]\n\n\nFor the player view controller to size your content appropriately, specify a preferredContentSize or define appropriate auto layout constraints. The system sizes all view controllers to the height of the tallest content tab, so size your custom view controllers consistently or verify that they lay out as you expect at their runtime height.\n\nPresent Actions in the Info Tab\n\nA player view controller presents an Info tab when playing an asset with embedded or external metadata. The tab\u2019s view displays the metadata details, and it may show up to two UIAction controls along its trailing edge, as shown below.\n\nYou customize the actions the view presents by setting a value for the player view controller\u2019s infoViewActions property. When playing nonlive content, this property contains a single-element array that presents an action to play the content from the beginning. You may replace the default value (if present), add an additional action, or set this property value to an empty array to display no actions. The example below shows how to add a Watch Later action to the view.\n\nlet glasses = UIImage(systemName: \"eyeglasses\")\nlet watchLater = UIAction(title: \"Watch Later\", image: glasses) { action in\n    // Add or remove the item from the user's watch list,\n    // and update the action state accordingly.\n}\n// Append the action to the array.\nplayerViewController.infoViewActions.append(watchLater)\n\n\nPresent Actions Contextually\n\nYou can use the tvOS player UI to present controls contextually, which you display for a specific range of time in the content and then dismiss. A common use for this type of control is a Skip button that displays during the title sequence of a movie or TV show. Clicking the button allows viewers to bypass the introduction and quickly skip to the main content.\n\nAVPlayerViewController provides a contextualActions property that you can use to specify one or more actions to present. The player displays them along the bottom-trailing side of the screen. The following code example shows a simple implementation of an action that seeks the player forward to the time of the main content.\n\n// Define an action to skip the introduction of a media asset.\nprivate lazy var skipAction = UIAction(title: \"Skip\") { [weak self] _ in\n    guard let self = self else { return }\n    self.player.seek(to: self.skipToTime)\n}\n\n\nWhen you set a value for the contextualActions property, the player presents the controls immediately. To present them only during a relevant section of the content, observe the player timing by adding a periodic or boundary time observer. The following example defines a periodic time observer that fires every second during normal playback. In each invocation, it evaluates the new time to determine if it falls within the presentation range. If it does, the example sets the skip action as the contextual actions value; otherwise, it clears the value by setting it to an empty array.\n\nfunc addTimeObserver() {\n    // Observe the player's timing every second.\n    let interval = CMTime(value: 1, timescale: 1)\n    timeObserver = player.addPeriodicTimeObserver(forInterval: interval,\n                                                  queue: .main) { [weak self] time in\n        guard let self = self else { return }\n        // If the time is within the defined skip range, present the skip actions.\n        let actions = self.skipRange.containsTime(time) ? [self.skipAction] : []\n        self.playerViewController.contextualActions = actions\n    }\n}\n\n\nSee Also\ntvOS Playback and Capture\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "Presenting Navigation Markers",
        "url": "https://developer.apple.com/documentation/avkit/presenting_navigation_markers",
        "html": "Overview\n\nTo help users navigate your content, the Chapters panel presents navigation markers that represent points of interest within the media\u2019s timeline. Users can skip to desired content by selecting a marker with the Siri Remote.\n\nSet the Navigation Markers\n\nIn tvOS, a AVPlayerItem contains a navigationMarkerGroups property you use to supply chapter information. Set this property to an array of AVNavigationMarkersGroup objects to define the navigation markers for the current media.\n\nNote\n\nAlthough the player item defines the navigationMarkerGroups property as an array, the system only supports the first group in the array.\n\nAn AVNavigationMarkersGroup contains one or more AVTimedMetadataGroup objects, each representing an individual marker presented in the player\u2019s Info panel. Each AVTimedMetadataGroup stores a time range in the asset\u2019s timeline to which this marker applies, an array of AVMetadataItem objects to define the marker\u2019s title, and, optionally, its thumbnail artwork.\n\nThe following code shows how you can present a chapter list for your media:\n\nstruct Chapter {\n    let title: String\n    let imageName: String\n    let startTime: TimeInterval\n    let endTime: TimeInterval\n}\n\n\n...\n\n\nfunc setupPlayback() {\n    ...\n    playerItem.navigationMarkerGroups = makeNavigationMarkerGroups()\n    ...\n}\n\n\nprivate func makeNavigationMarkerGroups() -> [AVNavigationMarkersGroup] {\n    \n    let chapters = [\n        Chapter(title: \"Chapter 1\", imageName: \"chapter1\", startTime: 0.0, endTime: 60.0),\n        Chapter(title: \"Chapter 2\", imageName: \"chapter2\", startTime: 60.0, endTime: 120.0),\n        Chapter(title: \"Chapter 3\", imageName: \"chapter3\", startTime: 120.0, endTime: 180.0),\n        Chapter(title: \"Chapter 4\", imageName: \"chapter4\", startTime: 180.0, endTime: 240.0)\n    ]\n    \n    var metadataGroups = [AVTimedMetadataGroup]()\n    \n    // Iterate over the defined chapters and build a timed metadata group object for each.\n    chapters.forEach { chapter in\n        metadataGroups.append(makeTimedMetadataGroup(for: chapter))\n    }\n    \n    return [AVNavigationMarkersGroup(title: nil, \n                                     timedNavigationMarkers: metadataGroups)]\n}\n\n\nprivate func makeTimedMetadataGroup(for chapter: Chapter) -> AVTimedMetadataGroup {\n    var metadata = [AVMetadataItem]()\n    \n    // Create a metadata item that contains the chapter title.\n    let titleItem = makeMetadataItem(.commonIdentifierTitle, value: chapter.title)\n    metadata.append(titleItem)\n    if let image = UIImage(named: chapter.imageName), \n       let pngData = image.pngData() {\n        // Create a metadata item that contains the chapter thumbnail.\n        let imageItem = makeMetadataItem(.commonIdentifierArtwork, value: pngData)\n        metadata.append(imageItem)\n    }\n    \n    // Create a time range for the metadata group.\n    let timescale: Int32 = 600\n    let startTime = CMTime(seconds: chapter.startTime, preferredTimescale: timescale)\n    let endTime = CMTime(seconds: chapter.endTime, preferredTimescale: timescale)\n    let timeRange = CMTimeRangeFromTimeToTime(start: startTime, end: endTime)\n    \n    return AVTimedMetadataGroup(items: metadata, timeRange: timeRange)\n}\n\n\nprivate func makeMetadataItem(_ identifier: AVMetadataIdentifier, value: Any) -> AVMetadataItem {\n    let item = AVMutableMetadataItem()\n    item.identifier = identifier\n    item.value = value as? NSCopying & NSObjectProtocol\n    item.extendedLanguageTag = \"und\"\n    return item.copy() as! AVMetadataItem\n}\n\n\n\nSee Also\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller."
    },
    {
        "title": "AVPlayerViewControllerDelegate",
        "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontrollerdelegate",
        "html": "Topics\nDismissing the Player View Controller\nfunc playerViewControllerShouldDismiss(AVPlayerViewController) -> Bool\nAsks the delegate object whether the player view controller dismisses itself upon request.\nfunc playerViewControllerWillBeginDismissalTransition(AVPlayerViewController)\nTells the delegate when the player view controller is about to start its dismissal transition.\nfunc playerViewControllerDidEndDismissalTransition(AVPlayerViewController)\nTells the delegate when the player view controller ends its dismissal transition.\nResponding to Picture in Picture Life Cycle Events\nfunc playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart(AVPlayerViewController) -> Bool\nAsks the delegate whether the player view controller automatically dismisses itself when Picture in Picture starts.\nfunc playerViewControllerWillStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to start.\nfunc playerViewControllerDidStartPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture starts.\nfunc playerViewController(AVPlayerViewController, failedToStartPictureInPictureWithError: Error)\nTells the delegate when Picture in Picture fails to start.\nfunc playerViewControllerWillStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture is about to stop.\nfunc playerViewControllerDidStopPictureInPicture(AVPlayerViewController)\nTells the delegate when Picture in Picture stops.\nfunc playerViewController(AVPlayerViewController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (Bool) -> Void)\nTells the delegate when Picture in Picture is about to stop so you can restore your app\u2019s user interface.\nResponding to Navigation Events\nfunc playerViewController(AVPlayerViewController, timeToSeekAfterUserNavigatedFrom: CMTime, to: CMTime) -> CMTime\nTells the delegate when the user skips, scrubs, or otherwise navigates to a new time and wants to resume playback at the target time.\nfunc playerViewController(AVPlayerViewController, willResumePlaybackAfterUserNavigatedFrom: CMTime, to: CMTime)\nTells the delegate when the user navigates to a new time and playback is about to begin.\nfunc skipToPreviousItem(for: AVPlayerViewController)\nTells the delegate when the user requests skipping to the previous item in the timeline.\nfunc skipToNextItem(for: AVPlayerViewController)\nTells the delegate when the user requests skipping to the next item in the timeline.\nResponding to Interstitial Content Playback Events\nfunc playerViewController(AVPlayerViewController, willPresent: AVInterstitialTimeRange)\nTells the delegate when the player view controller is about to start playing a range of interstitial content.\nfunc playerViewController(AVPlayerViewController, didPresent: AVInterstitialTimeRange)\nTells the delegate when the player view controller finishes playing a range of interstitial content.\nResponding to Content Proposals\nfunc playerViewController(AVPlayerViewController, shouldPresent: AVContentProposal) -> Bool\nAsks the delegate whether the player view controller presents a content proposal.\nfunc playerViewController(AVPlayerViewController, didAccept: AVContentProposal)\nTells the delegate when the user accepts the proposed content.\nfunc playerViewController(AVPlayerViewController, didReject: AVContentProposal)\nTells the delegate when the user rejects the proposed content.\nResponding to Media Selection\nfunc playerViewController(AVPlayerViewController, didSelect: AVMediaSelectionOption?, in: AVMediaSelectionGroup)\nTells the delegate when the user selects a media option from a media selection group.\nResponding to Transport Bar Changes\nfunc playerViewController(AVPlayerViewController, willTransitionToVisibilityOfTransportBar: Bool, with: AVPlayerViewControllerAnimationCoordinator)\nTells the delegate when the transport bar\u2019s visibility is about to change.\nprotocol AVPlayerViewControllerAnimationCoordinator\nA protocol that defines the methods to implement to synchronize animations with playback controls' visibility animation.\nResponding to Channel Changes\nfunc playerViewController(AVPlayerViewController, skipToNextChannel: (Bool) -> Void)\nTells the delegate when the user wants to skip to the next channel.\nfunc playerViewController(AVPlayerViewController, skipToPreviousChannel: (Bool) -> Void)\nTells the delegate when the user wants to skip to the previous channel.\nfunc nextChannelInterstitialViewController(for: AVPlayerViewController) -> UIViewController\nAsks the delegate for a view controller that describes the layout of the next channel\u2019s interstitial view.\nfunc previousChannelInterstitialViewController(for: AVPlayerViewController) -> UIViewController\nAsks the delegate for a view controller that describes the layout of the previous channel\u2019s interstitial view.\nResponding to Full-Screen Presentations\nfunc playerViewController(AVPlayerViewController, willBeginFullScreenPresentationWithAnimationCoordinator: UIViewControllerTransitionCoordinator)\nTells the delegate when the player view controller is about to start full-screen display.\nfunc playerViewController(AVPlayerViewController, willEndFullScreenPresentationWithAnimationCoordinator: UIViewControllerTransitionCoordinator)\nTells the delegate when the player view controller is about to end full-screen display.\nfunc playerViewController(AVPlayerViewController, restoreUserInterfaceForFullScreenExitWithCompletionHandler: (Bool) -> Void)\nTells the delegate to restore the app\u2019s user interface after returning from a full-screen presentation.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\niOS Playback\nPlaying video content in a standard user interface\nPlay media full screen, embedded inline, or in a floating Picture in Picture (PiP) window using a player view controller.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback."
    },
    {
        "title": "AVKit",
        "url": "https://developer.apple.com/documentation/avkit",
        "html": "Topics\niOS Playback\nPlaying video content in a standard user interface\nPlay media full screen, embedded inline, or in a floating Picture in Picture (PiP) window using a player view controller.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\ntvOS Playback and Capture\nCustomizing the tvOS Playback Experience\nAdopt the latest features of the redesigned tvOS player user interface to provide a more streamlined way to watch your content.\nPresenting Navigation Markers\nPresent navigation markers in the Chapters panel to help users quickly navigate your content.\nWorking with Interstitial Content\nPresent additional content alongside your main media presentation using HTTP Live Streaming support.\nPresenting Content Proposals in tvOS\nDisplay a preview of an upcoming media item at the conclusion of the currently playing media item.\nWorking with Overlays and Parental Controls in tvOS\nAdd interactive overlays, parental controls, and livestream channel flipping using a player view controller.\nSupporting Continuity Camera in your tvOS app\nCapture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nclass AVInterstitialTimeRange\nA time range in an audiovisual presentation for content with an interstitial designation, such as advertisements or legal notices.\nclass AVNavigationMarkersGroup\nA set of markers for navigating playback of an audiovisual presentation.\nclass AVContentProposalViewController\nA view controller that proposes content to watch next.\nclass AVDisplayManager\nA tvOS management object that controls whether a TV switches modes to match the video\u2019s native mode.\nclass AVContinuityDevicePickerViewController\nA view controller that provides an interface to a person so they can select and connect a continuity device to the system.\nprotocol AVContinuityDevicePickerViewControllerDelegate\nAn interface that responds to events from a continuity device picker view controller.\nvisionOS Playback\nAdopting the system player interface in visionOS\nProvide an optimized viewing experience for watching 3D video content.\nTrimming and exporting media in visionOS\nDisplay standard controls in your app to edit the timeline of the currently playing media.\nclass AVPlayerViewController\nA view controller that displays content from a player and presents a native user interface to control playback.\nprotocol AVPlayerViewControllerDelegate\nA protocol that defines the methods to implement to respond to player view controller events.\nmacOS Playback and Capture\nImplementing Trimming in a macOS Player\nProvide a QuickTime media-trimming experience in your macOS app.\nclass AVPlayerView\nA view that displays content from a player and presents a native user interface to control playback.\nclass AVCaptureView\nA view that displays standard user interface controls for capturing media data.\nMultiplatform Playback and Capture\nstruct VideoPlayer\nA view that displays content from a player and a native user interface to control playback.\nfunc continuityDevicePicker(isPresented: Binding<Bool>, onDidConnect: ((AVContinuityDevice?) -> Void)?) -> View\nPresents an interface a person uses to select a nearby continuity device and connect to their Apple TV.\nPicture in Picture\nAdopting Picture in Picture Playback in tvOS\nAdd advanced multitasking capabilities to your video apps by using Picture in Picture playback in tvOS.\nAdopting Picture in Picture in a Standard Player\nAdd Picture in Picture (PiP) playback to your app using a player view controller.\nAdopting Picture in Picture in a Custom Player\nAdd controls to your custom player user interface to invoke Picture in Picture (PiP) playback.\nAdopting Picture in Picture for video calls\nAdd multitasking capability to your video-call apps by using Picture in Picture (PiP).\nAccessing the camera while multitasking on iPad\nOperate the camera in Split View, Slide Over, Picture in Picture, and Stage Manager modes.\nclass AVPictureInPictureController\nA controller that responds to user-initiated Picture in Picture playback of video in a floating, resizable window.\nPlayback Route Selection\nclass AVRoutePickerView\nA view that presents a list of nearby media receivers.\nMetadata\nAVKit Metadata Identifiers\nAdditional metadata that an asset contains.\nErrors\nlet AVKitErrorDomain: String\nThe domain of errors the framework generates.\nstruct AVKitError\nA structure that represents a framework error.\nClasses\nclass AVCaptureEvent\nBeta\nclass AVCaptureEventInteraction\nBeta"
    }
]