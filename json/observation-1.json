[
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "didSet(_:keyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/didset(_:keypath:)",
    "html": "Parameters\nsubject\n\nAn instance of an observable type.\n\nkeyPath\n\nThe key path of an observed property.\n\nSee Also\nReceiving change notifications\nfunc willSet<Subject, Member>(Subject, keyPath: KeyPath<Subject, Member>)\nA property observation called before setting the value of the subject."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (ObservationRegistrar, ObservationRegistrar) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "Encodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/encodable-implementations",
    "html": "Topics\nInstance Methods\nfunc encode(to: Encoder)\nEncodes this value into the given encoder."
  },
  {
    "title": "Decodable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/decodable-implementations",
    "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder."
  },
  {
    "title": "withMutation(of:keyPath:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/withmutation(of:keypath:_:)",
    "html": "Parameters\nof\n\nAn instance of an observable type.\n\nkeyPath\n\nThe key path of an observed property.\n\nDiscussion\n\nThis method calls willset(_:keypath:) before the mutation. Then it calls didset(_:keypath:) after the mutation.\n\nSee Also\nIdentifying transactional access\nfunc access<Subject, Member>(Subject, keyPath: KeyPath<Subject, Member>)\nRegisters access to a specific property for observation."
  },
  {
    "title": "access(_:keyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/access(_:keypath:)",
    "html": "Parameters\nsubject\n\nAn instance of an observable type.\n\nkeyPath\n\nThe key path of an observed property.\n\nSee Also\nIdentifying transactional access\nfunc withMutation<Subject, Member, T>(of: Subject, keyPath: KeyPath<Subject, Member>, () throws -> T) rethrows -> T\nIdentifies mutations to the transactions registered for observers."
  },
  {
    "title": "willSet(_:keyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/willset(_:keypath:)",
    "html": "Parameters\nsubject\n\nAn instance of an observable type.\n\nkeyPath\n\nThe key path of an observed property.\n\nSee Also\nReceiving change notifications\nfunc didSet<Subject, Member>(Subject, keyPath: KeyPath<Subject, Member>)\nA property observation called after setting the value of the subject."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar/init()",
    "html": "Discussion\n\nYou don’t need to create an instance of ObservationRegistrar when using the Observable() macro to indicate observably of a type."
  },
  {
    "title": "ObservationRegistrar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observationregistrar",
    "html": "Overview\n\nYou don’t need to create an instance of ObservationRegistrar when using the Observable() macro to indicate observability of a type.\n\nTopics\nCreating an observation registrar\ninit()\nCreates an instance of the observation registrar.\nReceiving change notifications\nfunc willSet<Subject, Member>(Subject, keyPath: KeyPath<Subject, Member>)\nA property observation called before setting the value of the subject.\nfunc didSet<Subject, Member>(Subject, keyPath: KeyPath<Subject, Member>)\nA property observation called after setting the value of the subject.\nIdentifying transactional access\nfunc access<Subject, Member>(Subject, keyPath: KeyPath<Subject, Member>)\nRegisters access to a specific property for observation.\nfunc withMutation<Subject, Member, T>(of: Subject, keyPath: KeyPath<Subject, Member>, () throws -> T) rethrows -> T\nIdentifies mutations to the transactions registered for observers.\nDefault Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nHashable Implementations\nRelationships\nConforms To\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nSee Also\nChange tracking\nfunc withObservationTracking<T>(() -> T, onChange: () -> () -> Void) -> T\nTracks access to properties."
  },
  {
    "title": "withObservationTracking(_:onChange:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/withobservationtracking(_:onchange:)",
    "html": "Parameters\napply\n\nA closure that contains properties to track.\n\nonChange\n\nThe closure invoked when the value of a property changes.\n\nReturn Value\n\nThe value that the apply closure returns if it has a return value; otherwise, there is no return value.\n\nDiscussion\n\nThis method tracks access to any property within the apply closure, and informs the caller of value changes made to participating properties by way of the onChange closure. For example, the following code tracks changes to the name of cars, but it doesn’t track changes to any other property of Car:\n\nfunc render() {\n    withObservationTracking {\n        for car in cars {\n            print(car.name)\n        }\n    } onChange: {\n        print(\"Schedule renderer.\")\n    }\n}\n\nSee Also\nChange tracking\nstruct ObservationRegistrar\nProvides storage for tracking and access to data changes."
  },
  {
    "title": "Observable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observable()",
    "html": "Overview\n\nThis macro adds observation support to a custom type and conforms the type to the Observable protocol. For example, the following code applies the Observable macro to the type Car making it observable:\n\n@Observable \nclass Car {\n   var name: String = \"\"\n   var needsRepairs: Bool = false\n\n\n   init(name: String, needsRepairs: Bool = false) {\n       self.name = name\n       self.needsRepairs = needsRepairs\n   }\n}\n\nSee Also\nObservable conformance\nprotocol Observable\nA type that emits notifications to observers when underlying data changes."
  },
  {
    "title": "Observable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation/observable",
    "html": "Overview\n\nConforming to this protocol signals to other APIs that the type supports observation. However, applying the Observable protocol by itself to a type doesn’t add observation functionality to the type. Instead, always use the Observable() macro when adding observation support to a type.\n\nSee Also\nObservable conformance\nmacro Observable()\nDefines and implements conformance of the Observable protocol."
  },
  {
    "title": "Observation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/observation",
    "html": "Overview\n\nObservation provides a robust, type-safe, and performant implementation of the observer design pattern in Swift. This pattern allows an observable object to maintain a list of observers and notify them of specific or general state changes. This has the advantages of not directly coupling objects together and allowing implicit distribution of updates across potential multiple observers.\n\nThe Observation frameworks provides the following capabilities:\n\nMarking a type as observable\n\nTracking changes within an instance of an observable type\n\nObserving and utilizing those changes elsewhere, such as in an app’s user interface\n\nTo declare a type as observable, attach the Observable() macro to the type declaration. This macro declares and implements conformance to the Observable protocol to the type at compile time.\n\n@Observable\nclass Car {\n    var name: String = \"\"\n    var needsRepairs: Bool = false\n    \n    init(name: String, needsRepairs: Bool = false) {\n        self.name = name\n        self.needsRepairs = needsRepairs\n    }\n}\n\n\nTo track changes, use the withObservationTracking(_:onChange:) function. For example, in the following code, the function calls the onChange closure when a car’s name changes. However, it doesn’t call the closure when a car’s needsRepair flag changes. That’s because the function only tracks properties read in its apply closure, and the closure doesn’t read the needsRepair property.\n\nfunc render() {\n    withObservationTracking {\n        for car in cars {\n            print(car.name)\n        }\n    } onChange: {\n        print(\"Schedule renderer.\")\n    }\n}\n\nTopics\nObservable conformance\nmacro Observable()\nDefines and implements conformance of the Observable protocol.\nprotocol Observable\nA type that emits notifications to observers when underlying data changes.\nChange tracking\nfunc withObservationTracking<T>(() -> T, onChange: () -> () -> Void) -> T\nTracks access to properties.\nstruct ObservationRegistrar\nProvides storage for tracking and access to data changes.\nObservation in SwiftUI\nManaging model data in your app\nCreate connections between your app’s data model and views.\nMigrating from the Observable Object protocol to the Observable macro\nUpdate your existing app to leverage the benefits of Observation in Swift.\nMacros\nmacro ObservationIgnored()\nmacro ObservationTracked()"
  }
]