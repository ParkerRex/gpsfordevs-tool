[
  {
    "title": "scriptingEndsWith: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393819-scriptingendswith",
    "html": "See Also\nPerforming comparisons\n- scriptingBeginsWith:\nReturns YES if, in a scripting comparison, the compared object matches the beginning of object.\n- scriptingContains:\nReturns YES if, in a scripting comparison, the compared object contains object.\n- scriptingIsEqualTo:\nReturns YES if, in a scripting comparison, the compared object is equal to object.\n- scriptingIsGreaterThan:\nReturns YES if, in a scripting comparison, the compared object is greater than object.\n- scriptingIsGreaterThanOrEqualTo:\nReturns YES if, in a scripting comparison, the compared object is greater than or equal to object.\n- scriptingIsLessThan:\nReturns YES if, in a scripting comparison, the compared object is less than object.\n- scriptingIsLessThanOrEqualTo:\nReturns YES if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "scriptingBeginsWith: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393858-scriptingbeginswith",
    "html": "See Also\nPerforming comparisons\n- scriptingContains:\nReturns YES if, in a scripting comparison, the compared object contains object.\n- scriptingEndsWith:\nReturns YES if, in a scripting comparison, the compared object matches the end of object.\n- scriptingIsEqualTo:\nReturns YES if, in a scripting comparison, the compared object is equal to object.\n- scriptingIsGreaterThan:\nReturns YES if, in a scripting comparison, the compared object is greater than object.\n- scriptingIsGreaterThanOrEqualTo:\nReturns YES if, in a scripting comparison, the compared object is greater than or equal to object.\n- scriptingIsLessThan:\nReturns YES if, in a scripting comparison, the compared object is less than object.\n- scriptingIsLessThanOrEqualTo:\nReturns YES if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "scriptingIsLessThanOrEqualTo: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393825-scriptingislessthanorequalto",
    "html": "See Also\nPerforming comparisons\n- scriptingBeginsWith:\nReturns YES if, in a scripting comparison, the compared object matches the beginning of object.\n- scriptingContains:\nReturns YES if, in a scripting comparison, the compared object contains object.\n- scriptingEndsWith:\nReturns YES if, in a scripting comparison, the compared object matches the end of object.\n- scriptingIsEqualTo:\nReturns YES if, in a scripting comparison, the compared object is equal to object.\n- scriptingIsGreaterThan:\nReturns YES if, in a scripting comparison, the compared object is greater than object.\n- scriptingIsGreaterThanOrEqualTo:\nReturns YES if, in a scripting comparison, the compared object is greater than or equal to object.\n- scriptingIsLessThan:\nReturns YES if, in a scripting comparison, the compared object is less than object."
  },
  {
    "title": "validateMenuItem: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1518160-validatemenuitem",
    "html": "Parameters\nmenuItem\n\nAn NSMenuItem object that represents the menu item.\n\nReturn Value\n\nYES to enable menuItem, NO to disable it.\n\nDiscussion\n\nThe object implementing this method must be the target of menuItem. You can determine which menu item menuItem is by querying it for its tag or action.\n\nThe following example disables the menu item associated with the nextRecord action method when the selected line in a table view is the last one; conversely, it disables the menu item with priorRecord as its action method when the selected row is the first one in the table view. (The countryKeys array contains names that appear in the table view.)\n\n- (BOOL)validateMenuItem:(NSMenuItem *)item {\n    int row = [tableView selectedRow];\n    if ([item action] == @selector(nextRecord) &&\n        (row == [countryKeys indexOfObject:[countryKeys lastObject]])) {\n        return NO;\n    }\n    if ([item action] == @selector(priorRecord) && row == 0) {\n        return NO;\n    }\n    return YES;\n}\n"
  },
  {
    "title": "validateToolbarItem: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1524282-validatetoolbaritem",
    "html": "Discussion\n\nNSToolbar only calls this method for image items.\n\nNote\n\nvalidateToolbarItem: is called very frequently, so it must be efficient.\n\nIf the receiver is the target for the actions of multiple toolbar items, it’s necessary to determine which toolbar item theItem refers to by testing the itemIdentifier.\n\n-(BOOL)validateToolbarItem:(NSToolbarItem *)toolbarItem\n{\n    BOOL enable = NO;\n    if ([[toolbarItem itemIdentifier] isEqual:SaveDocToolbarItemIdentifier]) {\n        // We will return YES (enable the save item)\n        // only when the document is dirty and needs saving\n        enable = [self isDocumentEdited];\n    } else if ([[toolbarItem itemIdentifier] isEqual:NSToolbarPrintItemIdentifier]) {\n        // always enable print for this window\n        enable = YES;\n    }\n    return enable;\n}\n\nSee Also\nRelated Documentation\n- validateVisibleItems\nValidates the toolbar’s visible items during a window update.\naction\nThe action method to call when someone clicks on the toolbar item.\ntarget\nThe object that defines the action method the toolbar item calls when clicked.\nToolbar Programming Topics for Cocoa\n- validate\nValidates the toolbar item’s menu and its ability to perfrom its action."
  },
  {
    "title": "validModesForFontPanel: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1534415-validmodesforfontpanel",
    "html": "Discussion\n\nThe mode masks are defined in Mode Masks.\n\nThe Font Panel has the ability to hide elements that are not applicable for a given context by having the target respond to validModesForFontPanel:. If the target desires a font panel mode other than the standard mode mask, it must respond to this method.\n\nThis message is sent up the responder chain to the first responder implementing the method. Ideally that object should be the first responder found that also implements changeFont:."
  },
  {
    "title": "view:stringForToolTip:point:userData: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1483693-view",
    "html": "Discussion\n\nuserData is additional information provided by the creator of the tool tip rectangle.\n\nSee Also\nRelated Documentation\nOnline Help\n- addToolTipRect:owner:userData:\nCreates a tooltip for a defined area in the view and returns a tag that identifies the tooltip rectangle."
  },
  {
    "title": "changeColor: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1532638-changecolor",
    "html": "Parameters\nsender\n\nThe NSColorPanel sending the message.\n\nDiscussion\n\nWhen the user selects a color in an NSColorPanel object, the panel tries to call this method on the first responder. You can override this method in any responder that needs to respond to a color change.\n\nSee Also\nResponding to a Color Change\nNSColorChanging\nNSColorPanelColorDidChangeNotification\nPosted when the color of the NSColorPanel is set, as when NSColorPanel is invoked."
  },
  {
    "title": "scriptingIsEqualTo: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393835-scriptingisequalto",
    "html": "See Also\nPerforming comparisons\n- scriptingBeginsWith:\nReturns YES if, in a scripting comparison, the compared object matches the beginning of object.\n- scriptingContains:\nReturns YES if, in a scripting comparison, the compared object contains object.\n- scriptingEndsWith:\nReturns YES if, in a scripting comparison, the compared object matches the end of object.\n- scriptingIsGreaterThan:\nReturns YES if, in a scripting comparison, the compared object is greater than object.\n- scriptingIsGreaterThanOrEqualTo:\nReturns YES if, in a scripting comparison, the compared object is greater than or equal to object.\n- scriptingIsLessThan:\nReturns YES if, in a scripting comparison, the compared object is less than object.\n- scriptingIsLessThanOrEqualTo:\nReturns YES if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "scriptingIsGreaterThanOrEqualTo: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393829-scriptingisgreaterthanorequalto",
    "html": "See Also\nPerforming comparisons\n- scriptingBeginsWith:\nReturns YES if, in a scripting comparison, the compared object matches the beginning of object.\n- scriptingContains:\nReturns YES if, in a scripting comparison, the compared object contains object.\n- scriptingEndsWith:\nReturns YES if, in a scripting comparison, the compared object matches the end of object.\n- scriptingIsEqualTo:\nReturns YES if, in a scripting comparison, the compared object is equal to object.\n- scriptingIsGreaterThan:\nReturns YES if, in a scripting comparison, the compared object is greater than object.\n- scriptingIsLessThan:\nReturns YES if, in a scripting comparison, the compared object is less than object.\n- scriptingIsLessThanOrEqualTo:\nReturns YES if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "panel:compareFilename:with:caseSensitive: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1539083-panel",
    "html": "Deprecated\n\nThere is no replacement.\n\nParameters\nsender\n\nPanel requesting the ordering.\n\nfileName1\n\nString representing the first filename to order.\n\nfileName2\n\nString representing the second filename to order.\n\nflag\n\nIf YES, the ordering is case-sensitive; if NO, it is not.\n\nReturn Value\n\nOne of the following:\n\nNSOrderedAscending if fileName1 should precede fileName2\n\nNSOrderedSame if the two names are equivalent\n\nNSOrderedDescending if fileName2 should precede fileName1\n\nDiscussion\n\nDon’t reorder filenames in the Save panel without good reason, because it may confuse the user to have files in one Save panel or Open panel ordered differently than those in other such panels or in the Finder. The default behavior of Save and Open panels is to order files as they appear in the Finder. Note also that by implementing this method you will reduce the operating performance of the panel.\n\nSee Also\nMethods\nallowedFileTypes\nAn array of filename extensions or UTIs that represent the allowed file types for the panel.\nDeprecated\n- requiredFileType\nReturns the required file type (if any).\nDeprecated\n- setRequiredFileType:\nSpecifies the file type (as an extension) or a UTI.\nDeprecated\n- setDirectory:\nSets the current pathname in the panel’s browser.\nDeprecated\n- beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:\nPresents a Save panel as a sheet with a specified path and, optionally, a specified file in that path.\nDeprecated\n- runModalForDirectory:file:\nInitializes the panel to the directory and file specified, if any, then displays it and begins its modal event loop.\nDeprecated\n- panel:isValidFilename:\nGives the delegate the opportunity to validate selected items.\nDeprecated\n- panel:shouldShowFilename:\nGives the delegate the opportunity to filter items that it doesn’t want the user to choose.\nDeprecated\n- panel:directoryDidChange:\nTells the delegate that the user has changed the selected directory in the NSSavePanel object specified.\nDeprecated\n- directory\nReturns the absolute pathname of the directory currently shown in the panel.\nDeprecated\n- filename\nReturns the absolute pathname of the file currently shown in the panel.\nDeprecated\n- selectText:\nThis method has been deprecated.\nDeprecated"
  },
  {
    "title": "panel:directoryDidChange: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1539080-panel",
    "html": "Deprecated\n\nUse panel:didChangeToDirectoryURL: (NSOpenSavePanelDelegate) instead.\n\nParameters\nsender\n\nPanel whose directory has changed.\n\npath\n\nString representing the new directory’s path.\n\nSee Also\nMethods\nallowedFileTypes\nAn array of filename extensions or UTIs that represent the allowed file types for the panel.\nDeprecated\n- requiredFileType\nReturns the required file type (if any).\nDeprecated\n- setRequiredFileType:\nSpecifies the file type (as an extension) or a UTI.\nDeprecated\n- setDirectory:\nSets the current pathname in the panel’s browser.\nDeprecated\n- beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:\nPresents a Save panel as a sheet with a specified path and, optionally, a specified file in that path.\nDeprecated\n- runModalForDirectory:file:\nInitializes the panel to the directory and file specified, if any, then displays it and begins its modal event loop.\nDeprecated\n- panel:compareFilename:with:caseSensitive:\nControls the ordering of files presented by the NSSavePanel object specified.\nDeprecated\n- panel:isValidFilename:\nGives the delegate the opportunity to validate selected items.\nDeprecated\n- panel:shouldShowFilename:\nGives the delegate the opportunity to filter items that it doesn’t want the user to choose.\nDeprecated\n- directory\nReturns the absolute pathname of the directory currently shown in the panel.\nDeprecated\n- filename\nReturns the absolute pathname of the file currently shown in the panel.\nDeprecated\n- selectText:\nThis method has been deprecated.\nDeprecated\nRelated Documentation\n- panel:didChangeToDirectoryURL:\nTells the delegate that the user changed the selected directory to the directory located at the specified URL."
  },
  {
    "title": "panel:shouldShowFilename: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1539030-panel",
    "html": "Deprecated\n\nUse panel:shouldEnableURL: (NSOpenSavePanelDelegate).\n\nParameters\nsender\n\nPanel that is querying whether it should show a certain file.\n\nfilename\n\nString representing the name of the file to be loaded in the browser.\n\nReturn Value\n\nYES if filename should be selectable, and NO if the save panel should disable the file or directory.\n\nDiscussion\n\nThe NSSavePanel object sender sends this message to the panel’s delegate for each file or directory (filename) it is about to load in the browser.\n\nSee Also\nMethods\nallowedFileTypes\nAn array of filename extensions or UTIs that represent the allowed file types for the panel.\nDeprecated\n- requiredFileType\nReturns the required file type (if any).\nDeprecated\n- setRequiredFileType:\nSpecifies the file type (as an extension) or a UTI.\nDeprecated\n- setDirectory:\nSets the current pathname in the panel’s browser.\nDeprecated\n- beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:\nPresents a Save panel as a sheet with a specified path and, optionally, a specified file in that path.\nDeprecated\n- runModalForDirectory:file:\nInitializes the panel to the directory and file specified, if any, then displays it and begins its modal event loop.\nDeprecated\n- panel:compareFilename:with:caseSensitive:\nControls the ordering of files presented by the NSSavePanel object specified.\nDeprecated\n- panel:isValidFilename:\nGives the delegate the opportunity to validate selected items.\nDeprecated\n- panel:directoryDidChange:\nTells the delegate that the user has changed the selected directory in the NSSavePanel object specified.\nDeprecated\n- directory\nReturns the absolute pathname of the directory currently shown in the panel.\nDeprecated\n- filename\nReturns the absolute pathname of the file currently shown in the panel.\nDeprecated\n- selectText:\nThis method has been deprecated.\nDeprecated\nRelated Documentation\n- panel:shouldEnableURL:\nAsks the delegate whether the specified URL should be enabled in the Open panel."
  },
  {
    "title": "pasteboard:provideDataForType: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1525907-pasteboard",
    "html": "Parameters\nsender\n\nThe pasteboard that requires the specified data for a paste operation.\n\ntype\n\nThe type of data the owner object must provide.\n\nDiscussion\n\nThe receiver should have been previously declared in a declareTypes:owner: message.\n\nThe requested data should be written to sender using the setData:forType:, setPropertyList:forType:, or setString:forType: method. The pasteboard:provideDataForType: messages may also be sent to the owner when the application is shut down through an application’s terminate: method. This is the method that is invoked in response to a Quit command. Thus the user can copy something to the pasteboard, quit the application, and still paste the data that was copied. A pasteboard:provideDataForType: message is sent only if the specified type of data has not already been supplied to the pasteboard. Instead of writing all data types when the cut or copy operation is done, an application can choose to implement this method to provide the data for certain types only when they are requested.\n\nIf an application writes data to the pasteboard in the richest, and therefore most preferred, type at the time of a cut or copy operation, its pasteboard:provideDataForType: method can simply read that data from the pasteboard, convert it to the requested type, and write it back to the pasteboard as the new type.\n\nSee Also\nRelated Documentation\nPasteboard Programming Guide"
  },
  {
    "title": "panel:isValidFilename: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1538970-panel",
    "html": "Deprecated\n\nUse panel:validateURL:error: (NSOpenSavePanelDelegate) instead. If both methods are implemented, the URL version will be called.\n\nParameters\nsender\n\nPanel requesting filename validation.\n\nfilename\n\nString representing the filename to validate.\n\nReturn Value\n\nYES if the filename is valid, or NO if the save panel should stay in its modal loop and wait for the user to type in or select a different filename or names.\n\nDiscussion\n\nThe NSSavePanel object sender sends this message just before the end of a modal session for each filename displayed or selected (including filenames in multiple selections). If the delegate refuses a filename in a multiple selection, none of the filenames in the selection is accepted.\n\nSee Also\nMethods\nallowedFileTypes\nAn array of filename extensions or UTIs that represent the allowed file types for the panel.\nDeprecated\n- requiredFileType\nReturns the required file type (if any).\nDeprecated\n- setRequiredFileType:\nSpecifies the file type (as an extension) or a UTI.\nDeprecated\n- setDirectory:\nSets the current pathname in the panel’s browser.\nDeprecated\n- beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:\nPresents a Save panel as a sheet with a specified path and, optionally, a specified file in that path.\nDeprecated\n- runModalForDirectory:file:\nInitializes the panel to the directory and file specified, if any, then displays it and begins its modal event loop.\nDeprecated\n- panel:compareFilename:with:caseSensitive:\nControls the ordering of files presented by the NSSavePanel object specified.\nDeprecated\n- panel:shouldShowFilename:\nGives the delegate the opportunity to filter items that it doesn’t want the user to choose.\nDeprecated\n- panel:directoryDidChange:\nTells the delegate that the user has changed the selected directory in the NSSavePanel object specified.\nDeprecated\n- directory\nReturns the absolute pathname of the directory currently shown in the panel.\nDeprecated\n- filename\nReturns the absolute pathname of the file currently shown in the panel.\nDeprecated\n- selectText:\nThis method has been deprecated.\nDeprecated\nRelated Documentation\n- panel:validateURL:error:\nAsks the delegate to validate the URL for a file that the user selected."
  },
  {
    "title": "tableView:writeRows:toPasteboard: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1539424-tableview",
    "html": "Deprecated\n\nThis method has been deprecated. You should implement tableView:writeRowsWithIndexes:toPasteboard: instead.\n\nParameters\naTableView\n\nThe table view.\n\nrows\n\nAn array of row indexes.\n\npboard\n\nThe pasteboard.\n\nReturn Value\n\nReturn YES to allow the drag: otherwise NO to refuse the drag.\n\nDiscussion\n\nInvoked by aTableView after it has been determined that a drag should begin, but before the drag has been started. To refuse the drag, return NO. To start a drag, return YES and place the drag data onto pboard (data, owner, and so on). The drag image and other drag-related information will be set up and provided by the table view once this call returns with YES. rows is the list of row numbers that will be participating in the drag.\n\nSee Also\nDeprecated Methods\n- dragImageForRows:event:dragImageOffset:\nComputes and returns an image to use for dragging.\nDeprecated\n- setAutoresizesAllColumnsToFit:\nControls whether the table view proportionally resizes its columns to fit when its superview’s frame changes.\nDeprecated\n- autoresizesAllColumnsToFit\nReturns YES if the table view proportionally resizes its columns to fit when its superview’s frame changes, NO if it only resizes the last column.\nDeprecated\n- selectColumn:byExtendingSelection:\nSelects the column at the specified index, optionally extending any existing selection.\nDeprecated\n- selectRow:byExtendingSelection:\nSelects a row at the specified index, optionally extending any existing selection.\nDeprecated\n- setDrawsGrid:\nSets whether the table view draws a grid.\nDeprecated\n- drawsGrid\nReturns a Boolean value that indicates whether the table view draws a grid.\nDeprecated\n- selectedColumnEnumerator\nThis method has been deprecated.\nDeprecated\n- selectedRowEnumerator\nThis method has been deprecated.\nDeprecated\n- focusedColumn\nReturns the currently focused column.\nDeprecated\n- setFocusedColumn:\nSets the currently focused column to the specified index.\nDeprecated\n- shouldFocusCell:atColumn:row:\nReturns whether the fully prepared cell at the specified row and column can be made the focused cell.\nDeprecated\n- performClickOnCellAtColumn:row:\nPerforms a click action on the cell at the specified row and column.\nDeprecated\n- preparedCellAtColumn:row:\nReturns the fully prepared cell that the table view will use for drawing or processing of the specified row and column.\nDeprecated\n- columnsInRect:\nReturns a range of indexes for the table view’s columns that lie wholly or partially within the horizontal boundaries of the specified rectangle.\nDeprecated\n- textShouldBeginEditing:\nQueries the delegate to determine if the text should begin editing.\nDeprecated\n- textDidBeginEditing:\nPosts an NSControlTextDidBeginEditingNotification to the default notification center.\nDeprecated\n- textDidChange:\nSends textDidChange: to the edited cell and posts an NSControlTextDidChangeNotification to the default notification center.\nDeprecated\n- textShouldEndEditing:\nValidates the text object for the cell being edited by querying the delegate.queries the delegate using control:textShouldEndEditing:, returning the delegate’s response if it responds to that method.\nDeprecated\n- textDidEndEditing:\nUpdates the data source based on the newly edited value and selects another cell for editing if possible according to the character that ended editing (Return, Tab, Backtab).\nDeprecated"
  },
  {
    "title": "objectDidBeginEditing: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458092-objectdidbeginediting",
    "html": "See Also\nManaging Editing\n- objectDidEndEditing:\nThis message should be sent to the receiver when editor has finished editing a property belonging to the receiver.\nDeprecated\nRelated Documentation\nCocoa Bindings Programming Topics"
  },
  {
    "title": "objectDidEndEditing: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458187-objectdidendediting",
    "html": "See Also\nManaging Editing\n- objectDidBeginEditing:\nThis message should be sent to the receiver when editor has uncommitted changes that can affect the receiver.\nDeprecated"
  },
  {
    "title": "pasteboardChangedOwner: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1532824-pasteboardchangedowner",
    "html": "Parameters\nsender\n\nThe pasteboard object whose owner changed.\n\nDiscussion\n\nPasteboard owners only need to implement this method if they need to know when they have lost ownership.\n\nThe owner is not able to read the contents of the pasteboard when responding to this method. The owner should be prepared to receive this method at any time, even from within the declareTypes:owner: method used to declare ownership.\n\nOnce an owner has provided all of its data for declared types, it will not receive a pasteboardChangedOwner: message. If, therefore, you are maintaining an object just for the purpose of providing data lazily, rather than relying solely on receipt of a pasteboardChangedOwner: message you need to keep track of what types were promised and what types have been provided. When all the types have been provided, you may release the owner.\n\nSee Also\nRelated Documentation\nchangeCount\nThe receiver’s change count.\n- declareTypes:owner:\nPrepares the receiver for a change in its contents by declaring the new types of data it will contain and a new owner."
  },
  {
    "title": "numberOfGroupsInImageBrowser: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503514-numberofgroupsinimagebrowser",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nReturn Value\n\nThe number of groups.\n\nDiscussion\n\nThis method is optional.\n\nSee Also\nProviding Information About Groups (Optional)\n- imageBrowser:groupAtIndex:\nReturns the group at the specified index."
  },
  {
    "title": "readRSSIForDeviceComplete:device:info:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1428399-readrssifordevicecomplete",
    "html": "Parameters\nsender\n\nController object that sent this delegate message.\n\nDiscussion\n\nThis delegate gets invoked when an RSSI command complete event occurs. This could occur because you invoked it by issuing an -readRSSIForDevice: command, or someone else did from another app on the same controller.\n\nSee Also\nMiscellaneous\n- readLinkQualityForDeviceComplete:device:info:error:"
  },
  {
    "title": "application:delegateHandlesKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1494285-application",
    "html": "Deprecated\n\nUse application:delegateHandlesKey: instead.\n\nParameters\nsender\n\nThe app object associated with the delegate.\n\nkey\n\nThe key to be handled.\n\nReturn Value\n\nYES if your delegate handles the key or NO if it does not.\n\nDiscussion\n\nThe method should return YES if the delegate for the app sender handles the key specified by key, which means it can get or set the scriptable property or element that corresponds to that key. The app implements methods for each of the keys that it handles, where the method name matches the key.\n\nFor example, a scriptable app that doesn’t use Cocoa’s document-based app architecture can implement this method to supply its own document ordering. Such an app might want to do this because the standard app delegate expects to work with a document-based app. The TextEdit app (whose source is distributed with macOS developer tools) provides the following implementation:\n\nreturn [key isEqualToString:@\"orderedDocuments\"];\n\n\nTextEdit then implements the orderedDocuments method in its controller class to return an ordered list of documents. An app with its own window ordering might add a test for the key orderedWindows so that its delegate can provide its own version of orderedWindows.\n\nImportant\n\nCocoa scripting does not invoke this method for script commands other than get or set. For information on working with other commands, see Script Commands in Cocoa Scripting Guide.\n\nSee Also\nMethods\n- activateIgnoringOtherApps:\nMakes the receiver the active app.\nDeprecated\n- beginModalSessionForWindow:relativeToWindow:\nDeprecated\n- runModalForWindow:relativeToWindow:\nDeprecated\n- endModalSession:\nFinishes a modal session.\n- beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:\nStarts a document modal session.\nDeprecated\n- endSheet:\nEnds a document modal session by specifying the sheet window.\nDeprecated\n- endSheet:returnCode:\nEnds a document modal session by specifying the sheet window.\nDeprecated\n- application:printFiles:\nUse the delegate method application:printFiles:withSettings:showPrintPanels: instead.\nDeprecated\nRelated Documentation\norderedWindows\nAn array of window objects arranged according to their front-to-back ordering on the screen.\norderedDocuments\nAn array of document objects arranged according to the front-to-back ordering of their associated windows."
  },
  {
    "title": "isEqualTo: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393823-isequalto",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\nYES if the receiver is equal to object, otherwise NO. In effect returns NO if receiver is nil.\n\nDiscussion\n\nDuring the evaluation of an NSWhoseSpecifier object that contains a test whose operator is NSEqualToComparison, an isEqualTo: message may be sent to each potentially specified object, if neither the potentially specified object nor the object being tested against implements a scriptingIsEqualTo: method.\n\nThe default implementation for this method provided by NSObject returns YES if an isEqualTo: message sent to the same object would return YES.\n\nSee Also\nPerforming comparisons\n- doesContain:\nReturns a Boolean value that indicates whether the receiver contains a given object.\n- isCaseInsensitiveLike:\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\n- isGreaterThan:\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\n- isGreaterThanOrEqualTo:\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\n- isLessThan:\nReturns a Boolean value that indicates whether the receiver is less than another given object.\n- isLessThanOrEqualTo:\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\n- isLike:\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\n- isNotEqualTo:\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "isGreaterThanOrEqualTo: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393862-isgreaterthanorequalto",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\nYES if the receiver is greater than or equal to object, otherwise NO.\n\nDiscussion\n\nDuring the evaluation of an NSWhoseSpecifier object that contains a test whose operator is NSGreaterThanOrEqualToComparison, anisGreaterThanOrEqualTo: message may be sent to each potentially specified object, if the potentially specified object does not implement a scriptingIsGreaterThanOrEqualTo: method and the object being tested against does not implement a scriptingIsLessThan: method.\n\nThe default implementation for this method provided by NSObject returns YES if a compare: message sent to the same object would return NSOrderedSame or NSOrderedDescending.\n\nSee Also\nPerforming comparisons\n- doesContain:\nReturns a Boolean value that indicates whether the receiver contains a given object.\n- isCaseInsensitiveLike:\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\n- isEqualTo:\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\n- isGreaterThan:\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\n- isLessThan:\nReturns a Boolean value that indicates whether the receiver is less than another given object.\n- isLessThanOrEqualTo:\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\n- isLike:\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\n- isNotEqualTo:\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "isLessThanOrEqualTo: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393827-islessthanorequalto",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\nYES if the receiver is less than or equal to object, otherwise NO.\n\nDiscussion\n\nDuring the evaluation of an NSWhoseSpecifier object that contains a test whose operator is NSLessThanOrEqualToComparison, an isLessThanOrEqualTo: message may be sent to each potentially specified object, if the potentially specified object does not implement a scriptingIsLessThanOrEqualTo: method and the object being tested against does not implement a scriptingIsGreaterThan: method.\n\nThe default implementation for this method provided by NSObject method returns YES if a compare: message sent to the same object would return NSOrderedAscending or NSOrderedSame.\n\nSee Also\nPerforming comparisons\n- doesContain:\nReturns a Boolean value that indicates whether the receiver contains a given object.\n- isCaseInsensitiveLike:\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\n- isEqualTo:\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\n- isGreaterThan:\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\n- isGreaterThanOrEqualTo:\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\n- isLessThan:\nReturns a Boolean value that indicates whether the receiver is less than another given object.\n- isLike:\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\n- isNotEqualTo:\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "isNotEqualTo: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393843-isnotequalto",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\nYES if the receiver is not equal to object, otherwise NO.\n\nDiscussion\n\nCurrently, isNotEqualTo: messages are never sent to any object from within Cocoa itself.\n\nThe default implementation for this method provided by NSObject method returns YES if an isEqual: message sent to the same object would return NO.\n\nSee Also\nPerforming comparisons\n- doesContain:\nReturns a Boolean value that indicates whether the receiver contains a given object.\n- isCaseInsensitiveLike:\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\n- isEqualTo:\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\n- isGreaterThan:\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\n- isGreaterThanOrEqualTo:\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\n- isLessThan:\nReturns a Boolean value that indicates whether the receiver is less than another given object.\n- isLessThanOrEqualTo:\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\n- isLike:\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object."
  },
  {
    "title": "numberOfItemsInImageBrowser: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503497-numberofitemsinimagebrowser",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nReturn Value\n\nThe number of records managed by the image browser view.\n\nDiscussion\n\nYour data source must implement this method. An IKImageView object uses this method to determine how many cells it should create and display.\n\nSee Also\nProviding Information About Items (Required)\n- imageBrowser:itemAtIndex:\nReturns an object for the item in an image browser view that corresponds to the specified index."
  },
  {
    "title": "performActionForPerson:identifier: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411298-performactionforperson",
    "html": "Parameters\nperson\n\nThe person on which the action will be taken.\n\nidentifier\n\nThe unique identifier of the selected value.\n\nDiscussion\n\nIf the property returned by actionProperty is a multivalue property, identifier contains the unique identifier of the value selected. The person being displayed in the Address Book application’s card view when the rollover menu is accesses is passed as person."
  },
  {
    "title": "readLinkQualityForDeviceComplete:device:info:error: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430075-readlinkqualityfordevicecomplete",
    "html": "Parameters\nsender\n\nController object that sent this delegate message.\n\nDiscussion\n\nThis delegate gets invoked when an read link quality command complete event occurs. This could occur because you invoked it by issuing an -readLinkQualityForDevice: command, or someone else did from another app on the same controller.\n\nSee Also\nMiscellaneous\n- readRSSIForDeviceComplete:device:info:error:"
  },
  {
    "title": "shouldEnableActionForPerson:identifier: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411300-shouldenableactionforperson",
    "html": "Parameters\nperson\n\nThe person on which the action will be taken.\n\nidentifier\n\nThe unique identifier of the selected value.\n\nReturn Value\n\nYES if the action is applicable; otherwise, NO.\n\nDiscussion\n\nIf the property returned by actionProperty is a multivalue property, identifier contains the unique identifier of the value selected.\n\nSee Also\nQuerying\n- actionProperty\nSent to the delegate to request the property the action applies to.\n- titleForPerson:identifier:\nSent to the delegate to request the title of the menu item for the action."
  },
  {
    "title": "controlTextDidEndEditing: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1428847-controltextdidendediting",
    "html": "Parameters\naNotification\n\nThe notification object. The name of the notification is always NSControlTextDidEndEditingNotification.\n\nDiscussion\n\nThis method is invoked when the user stops editing text in a control such as a text field or form. The control posts a NSControlTextDidEndEditingNotification notification, and if the control’s delegate implements this method, it is automatically registered to receive the notification. Use the key @\"NSFieldEditor\" to obtain the field editor from the userInfo dictionary of the notification object.\n\nWarning\n\nIn some cases, such as when editing within an instance of NSOutlineView, this method may be invoked without a previous invocation of controlTextDidBeginEditing:. You will only get the controlTextDidBeginEditing: notification if the user actually types something, but you can get the controlTextDidEndEditing: notification if the user just double-clicks the field and then clicks outside the field, without typing.\n\nSee Also\nDeprecated Methods\n- selectedCell\nReturns the receiver’s selected cell.\nDeprecated\n- selectedTag\nReturns the tag of the receiver’s selected cell.\nDeprecated\n- setNeedsDisplay\nMarks the receiver as needing redisplay (assuming automatic display is enabled).\nDeprecated\n- calcSize\nRecomputes any internal sizing information for the receiver, if necessary.\nDeprecated\n- selectCell:\nSelects the specified cell and redraws the control as needed.\nDeprecated\n- drawCell:\nDraws the specified cell, as long as it belongs to the receiver.\nDeprecated\n- drawCellInside:\nDraws the inside of the receiver’s cell (the area within the bezel or border)\nDeprecated\n- updateCell:\nMarks the specified cell as in need of redrawing.\nDeprecated\n- updateCellInside:\nMarks the inside of the specified cell as in need of redrawing.\nDeprecated\n- controlTextDidBeginEditing:\nSent when a control with editable text begins an editing session.\nDeprecated\n- controlTextDidChange:\nSent when the text in the receiving control changes.\nDeprecated"
  },
  {
    "title": "commitEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458190-commitediting",
    "html": "Return Value\n\nYES if the changes were successfully applied to the model, NO otherwise.\n\nDiscussion\n\nA commit is denied if the receiver fails to apply the changes to the model object, perhaps due to a validation error.\n\nSee Also\nManaging Editing\n- discardEditing\nCauses the receiver to discard any changes, restoring the previous values.\nDeprecated\n- commitEditingAndReturnError:\nAttempt to commit pending edits, returning an error in the case of failure.\nDeprecated\n- commitEditingWithDelegate:didCommitSelector:contextInfo:\nAttempt to commit any currently edited results of the receiver.\nDeprecated"
  },
  {
    "title": "discardEditing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458076-discardediting",
    "html": "See Also\nManaging Editing\n- commitEditing\nReturns whether the receiver was able to commit any pending edits.\nDeprecated\n- commitEditingAndReturnError:\nAttempt to commit pending edits, returning an error in the case of failure.\nDeprecated\n- commitEditingWithDelegate:didCommitSelector:contextInfo:\nAttempt to commit any currently edited results of the receiver.\nDeprecated\nRelated Documentation\nCocoa Bindings Programming Topics"
  },
  {
    "title": "controlTextDidChange: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1428982-controltextdidchange",
    "html": "Parameters\naNotification\n\nThe notification object. The name of the notification is always NSControlTextDidChangeNotification.\n\nDiscussion\n\nThis method is invoked when text in a control such as a text field or form changes. The control posts a NSControlTextDidChangeNotification notification, and if the control’s delegate implements this method, it is automatically registered to receive the notification. Use the key @\"NSFieldEditor\" to obtain the field editor from the userInfo dictionary of the notification object.\n\nSee Also\nDeprecated Methods\n- selectedCell\nReturns the receiver’s selected cell.\nDeprecated\n- selectedTag\nReturns the tag of the receiver’s selected cell.\nDeprecated\n- setNeedsDisplay\nMarks the receiver as needing redisplay (assuming automatic display is enabled).\nDeprecated\n- calcSize\nRecomputes any internal sizing information for the receiver, if necessary.\nDeprecated\n- selectCell:\nSelects the specified cell and redraws the control as needed.\nDeprecated\n- drawCell:\nDraws the specified cell, as long as it belongs to the receiver.\nDeprecated\n- drawCellInside:\nDraws the inside of the receiver’s cell (the area within the bezel or border)\nDeprecated\n- updateCell:\nMarks the specified cell as in need of redrawing.\nDeprecated\n- updateCellInside:\nMarks the inside of the specified cell as in need of redrawing.\nDeprecated\n- controlTextDidBeginEditing:\nSent when a control with editable text begins an editing session.\nDeprecated\n- controlTextDidEndEditing:\nSent when a control with editable text ends an editing session.\nDeprecated"
  },
  {
    "title": "titleForPerson:identifier: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411304-titleforperson",
    "html": "Parameters\nperson\n\nThe person on which the action will be taken.\n\nidentifier\n\nThe unique identifier of the value for which the menu item will be displayed.\n\nReturn Value\n\nThe title of the menu item for the action.\n\nDiscussion\n\nIf the property returned by actionProperty is a multivalue property, identifier contains the unique identifier of the value selected.\n\nSee Also\nQuerying\n- actionProperty\nSent to the delegate to request the property the action applies to.\n- shouldEnableActionForPerson:identifier:\nSent to the delegate to determine whether the action should be enabled."
  },
  {
    "title": "controlTextDidBeginEditing: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1428934-controltextdidbeginediting",
    "html": "Parameters\naNotification\n\nThe notification object. The name of the notification is always NSControlTextDidBeginEditingNotification.\n\nDiscussion\n\nThis method is invoked when the user begins editing text in a control such as a text field or a form field. The control posts a NSControlTextDidBeginEditingNotification notification, and if the control’s delegate implements this method, it is automatically registered to receive the notification. Use the key @\"NSFieldEditor\" to obtain the field editor from the userInfo dictionary of the notification object.\n\nSee controlTextDidEndEditing: for an explanation of why you may not always get one invocation of controlTextDidBeginEditing: for each invocation of controlTextDidEndEditing:.\n\nSee Also\nDeprecated Methods\n- selectedCell\nReturns the receiver’s selected cell.\nDeprecated\n- selectedTag\nReturns the tag of the receiver’s selected cell.\nDeprecated\n- setNeedsDisplay\nMarks the receiver as needing redisplay (assuming automatic display is enabled).\nDeprecated\n- calcSize\nRecomputes any internal sizing information for the receiver, if necessary.\nDeprecated\n- selectCell:\nSelects the specified cell and redraws the control as needed.\nDeprecated\n- drawCell:\nDraws the specified cell, as long as it belongs to the receiver.\nDeprecated\n- drawCellInside:\nDraws the inside of the receiver’s cell (the area within the bezel or border)\nDeprecated\n- updateCell:\nMarks the specified cell as in need of redrawing.\nDeprecated\n- updateCellInside:\nMarks the inside of the specified cell as in need of redrawing.\nDeprecated\n- controlTextDidChange:\nSent when the text in the receiving control changes.\nDeprecated\n- controlTextDidEndEditing:\nSent when a control with editable text ends an editing session.\nDeprecated"
  },
  {
    "title": "changeFont: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1462311-changefont",
    "html": "Parameters\nsender\n\nThe object that sent the message.\n\nDiscussion\n\nGenerally this change is because the user changed the font either in the selection of a rich text field or in a whole plain text field. Any object that contains a font the user can change must respond to the changeFont: message by sending a convertFont: message back to sender (an NSFontManager object) for each font in the selection. For more information, see Responding to Font Changes.\n\nBe aware that selectedFont at this point may return unpredictable results. The font in this property may not be the last font selected, or there may be multiple fonts selected at the time changeFont: is called. The use of selectedFont from within changeFont: is strongly discouraged.\n\nSee Also\nConverting Fonts Automatically\n- convertFont:\nConverts the given font according to the object that initiated a font change, typically the Font panel or Font menu.\nRelated Documentation\n- convertFont:toFamily:\nReturns a font whose traits are as similar as possible to those of the given font except for the font family, which is changed to the given family.\n- addFontTrait:\nAdds a trait to the font.\n- convertFont:toSize:\nReturns a font object whose traits are the same as those of the given font, except for the size, which is changed to the given size.\n- convertFont:toHaveTrait:\nReturns a new version of the font object containing a single additional trait.\n- modifyFont:\nModifies a trait of the font.\n- convertFont:toNotHaveTrait:\nReturns a new version of a font object without the specified traits.\n- modifyFontViaPanel:\nModifies a font trait using input from the Font panel.\n- convertWeight:ofFont:\nReturns a font object whose weight is greater or lesser than that of the given font.\n- convertFont:toFace:\nReturns a font whose traits are as similar as possible to those of the given font except for the typeface, which is changed to the given typeface.\n- removeFontTrait:\nRemoves a trait from the font."
  },
  {
    "title": "commitEditingAndReturnError: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458181-commiteditingandreturnerror",
    "html": "Parameters\nerror\n\nIf an error occurs during the commit operation, upon returns contains an NSError object that describes the problem.\n\nReturn Value\n\nYES if the commit is successful, otherwise NO.\n\nDiscussion\n\nDuring autosaving, commit editing may fail, due to a pending edit. Rather than interrupt the user with an unexpected alert, this method provides the caller with the option to either present the error or fail silently, leaving the pending edit in place and the user's editing uninterrupted. In your implementation of this method, you should attempt to commit editing, but if there is a failure return NO and in error an error object to be presented or ignored as appropriate.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure.\n\nYou call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nManaging Editing\n- discardEditing\nCauses the receiver to discard any changes, restoring the previous values.\nDeprecated\n- commitEditing\nReturns whether the receiver was able to commit any pending edits.\nDeprecated\n- commitEditingWithDelegate:didCommitSelector:contextInfo:\nAttempt to commit any currently edited results of the receiver.\nDeprecated"
  },
  {
    "title": "commitEditingWithDelegate:didCommitSelector:contextInfo: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458179-commiteditingwithdelegate",
    "html": "Discussion\n\nThe receiver must have been registered as the editor of an object using objectDidBeginEditing:, and has not yet been unregistered by a subsequent invocation of objectDidEndEditing:. When the committing has either succeeded or failed, send the following message to the specified object. The didCommitSelector method must have the following method signature:\n\n- (void)editor:(id)editor didCommit:(BOOL)didCommit contextInfo:(void *)contextInfo\n\n\nIf an error occurs while attempting to commit, for example if key-value coding validation fails, an implementation of this method should typically send the NSView in which editing is being done a presentError:modalForWindow:delegate:didRecoverSelector:contextInfo: message, specifying the view's containing window.\n\nSee Also\nManaging Editing\n- discardEditing\nCauses the receiver to discard any changes, restoring the previous values.\nDeprecated\n- commitEditing\nReturns whether the receiver was able to commit any pending edits.\nDeprecated\n- commitEditingAndReturnError:\nAttempt to commit pending edits, returning an error in the case of failure.\nDeprecated"
  },
  {
    "title": "layer:shouldInheritContentsScale:fromWindow: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1483574-layer",
    "html": "Parameters\nlayer\n\nThe layer whose scale and content might need updating.\n\nnewScale\n\nThe new scale of the window.\n\nwindow\n\nThe window that hosts the layer.\n\nReturn Value\n\nA Boolean value that specifies whether to change the layer’s contentsScale property.\n\nDiscussion\n\nWhen a resolution change occurs for a given window, the system traverses the layer trees in that window to decide what action, if any, to take for each layer. The system queries the layer’s delegate to determine whether to change the layer’s contentsScale property to the new scale (either 2.0 or 1.0).\n\nNote that you don’t need to manage NSImage contents and that this method is not called on the delegate of a layer whose content is an NSImage object.\n\nIf the delegate returns YES, it should make any corresponding changes to the layer’s properties, as required by the resolution change. For example, a layer whose contents contain a CGImage object needs to determine whether an alternate CGImage object is available for the new scale factor. If the delegate finds a suitable CGImage object, then in addition to returning YES, it should set the appropriate CGImage object as the layer’s new contents."
  },
  {
    "title": "valueForKeyPath: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416468-valueforkeypath",
    "html": "Parameters\nkeyPath\n\nA key path of the form relationship.property (with one or more relationships); for example “department.name” or “department.manager.lastName”.\n\nReturn Value\n\nThe value for the derived property identified by keyPath.\n\nDiscussion\n\nThe default implementation gets the destination object for each relationship using valueForKey: and returns the result of a valueForKey: message to the final object.\n\nSee Also\nGetting Values\n- valueForKey:\nReturns the value for the property identified by a given key.\n- dictionaryWithValuesForKeys:\nReturns a dictionary containing the property values identified by each of the keys in a given array.\n- valueForUndefinedKey:\nInvoked by valueForKey: when it finds no property corresponding to a given key.\n- mutableArrayValueForKey:\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\n- mutableArrayValueForKeyPath:\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\n- mutableSetValueForKey:\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\n- mutableSetValueForKeyPath:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\n- mutableOrderedSetValueForKey:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\n- mutableOrderedSetValueForKeyPath:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path.\nRelated Documentation\n- setValue:forKeyPath:\nSets the value for the property identified by a given key path to a given value."
  },
  {
    "title": "mutableOrderedSetValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415479-mutableorderedsetvalueforkey",
    "html": "Parameters\nkey\n\nThe name of a uniquing ordered to-many relationship.\n\nReturn Value\n\nA mutable ordered set that provides read-write access to the uniquing to-many relationship specified by key.\n\nDiscussion\n\nObjects added to the mutable set proxy become related to the receiver, and objects removed from the mutable set become unrelated. The default implementation recognizes the same simple accessor methods and set accessor methods as valueForKey:, and follows the same direct instance variable access policies, but always returns a mutable collection proxy object instead of the immutable collection that valueForKey: would return.\n\nThe search pattern that mutableOrderedSetValueForKey: uses is described in Accessor Search Patterns in Key-Value Coding Programming Guide.\n\nSee Also\nGetting Values\n- valueForKey:\nReturns the value for the property identified by a given key.\n- valueForKeyPath:\nReturns the value for the derived property identified by a given key path.\n- dictionaryWithValuesForKeys:\nReturns a dictionary containing the property values identified by each of the keys in a given array.\n- valueForUndefinedKey:\nInvoked by valueForKey: when it finds no property corresponding to a given key.\n- mutableArrayValueForKey:\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\n- mutableArrayValueForKeyPath:\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\n- mutableSetValueForKey:\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\n- mutableSetValueForKeyPath:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\n- mutableOrderedSetValueForKeyPath:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path."
  },
  {
    "title": "valueForUndefinedKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1413457-valueforundefinedkey",
    "html": "Parameters\nkey\n\nA string that is not equal to the name of any of the receiver's properties.\n\nDiscussion\n\nSubclasses can override this method to return an alternate value for undefined keys. The default implementation raises an NSUndefinedKeyException.\n\nSee Also\nGetting Values\n- valueForKey:\nReturns the value for the property identified by a given key.\n- valueForKeyPath:\nReturns the value for the derived property identified by a given key path.\n- dictionaryWithValuesForKeys:\nReturns a dictionary containing the property values identified by each of the keys in a given array.\n- mutableArrayValueForKey:\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\n- mutableArrayValueForKeyPath:\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\n- mutableSetValueForKey:\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\n- mutableSetValueForKeyPath:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\n- mutableOrderedSetValueForKey:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\n- mutableOrderedSetValueForKeyPath:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path.\nRelated Documentation\n- setValue:forUndefinedKey:\nInvoked by when it finds no property for a given key."
  },
  {
    "title": "indicesOfObjectsByEvaluatingObjectSpecifier: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417806-indicesofobjectsbyevaluatingobje",
    "html": "Parameters\nspecifier\n\nAn object specifier for the container objects for which to obtain the indices.\n\nReturn Value\n\nA zero-based array of NSNumber objects that identify the zero-based indices of the container objects that match specifier, or nil if no matching objects were found.\n\nDiscussion\n\nContainers that want to evaluate some specifiers on their own should implement this method. If this method returns nil, the object specifier will go on to do its own evaluation, so you should only return nil if that's the behavior you want, or if an error occurs. If this method returns an array, the object specifier will use the NSNumber objects in it as the indices. So, if you evaluate the specifier and there are no objects that match, you should return an empty array, not nil. If you find only one object, you should still return its index in an array. Returning an array with a single index where the index is –1 is interpreted to mean all the objects.\n\nFor an example implementation, see \"Implementing Object Specifiers\" in Object Specifiers in Cocoa Scripting Guide\n\nSee Also\nWorking with object specifiers\nobjectSpecifier\nReturns an object specifier for the receiver."
  },
  {
    "title": "mutableSetValueForKeyPath: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1408115-mutablesetvalueforkeypath",
    "html": "Parameters\nkeyPath\n\nA key path, relative to the receiver, to an unordered to-many relationship.\n\nReturn Value\n\nA mutable set that provides read-write access to the unordered to-many relationship specified by keyPath.\n\nDiscussion\n\nSee mutableSetValueForKey: for additional details.\n\nSee Also\nGetting Values\n- valueForKey:\nReturns the value for the property identified by a given key.\n- valueForKeyPath:\nReturns the value for the derived property identified by a given key path.\n- dictionaryWithValuesForKeys:\nReturns a dictionary containing the property values identified by each of the keys in a given array.\n- valueForUndefinedKey:\nInvoked by valueForKey: when it finds no property corresponding to a given key.\n- mutableArrayValueForKey:\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\n- mutableArrayValueForKeyPath:\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\n- mutableSetValueForKey:\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\n- mutableOrderedSetValueForKey:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\n- mutableOrderedSetValueForKeyPath:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path."
  },
  {
    "title": "observeValueForKeyPath:ofObject:change:context: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416553-observevalueforkeypath",
    "html": "Parameters\nkeyPath\n\nThe key path, relative to object, to the value that has changed.\n\nobject\n\nThe source object of the key path keyPath.\n\nchange\n\nA dictionary that describes the changes that have been made to the value of the property at the key path keyPath relative to object. Entries are described in Change Dictionary Keys.\n\ncontext\n\nThe value that was provided when the observer was registered to receive key-value observation notifications.\n\nDiscussion\n\nFor an object to begin sending change notification messages for the value at keyPath, you send it an addObserver:forKeyPath:options:context: message, naming the observing object that should receive the messages. When you are done observing, and in particular before the observing object is deallocated, you send the observed object a removeObserver:forKeyPath: or removeObserver:forKeyPath:context: message to unregister the observer, and stop sending change notification messages."
  },
  {
    "title": "mutableArrayValueForKeyPath: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1414937-mutablearrayvalueforkeypath",
    "html": "Parameters\nkeyPath\n\nA key path, relative to the receiver, to an ordered to-many relationship.\n\nReturn Value\n\nA mutable array that provides read-write access to the ordered to-many relationship specified by keyPath.\n\nDiscussion\n\nSee mutableArrayValueForKey: for additional details.\n\nSee Also\nGetting Values\n- valueForKey:\nReturns the value for the property identified by a given key.\n- valueForKeyPath:\nReturns the value for the derived property identified by a given key path.\n- dictionaryWithValuesForKeys:\nReturns a dictionary containing the property values identified by each of the keys in a given array.\n- valueForUndefinedKey:\nInvoked by valueForKey: when it finds no property corresponding to a given key.\n- mutableArrayValueForKey:\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\n- mutableSetValueForKey:\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\n- mutableSetValueForKeyPath:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\n- mutableOrderedSetValueForKey:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\n- mutableOrderedSetValueForKeyPath:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path."
  },
  {
    "title": "willChangeValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416222-willchangevalueforkey",
    "html": "Parameters\nkey\n\nThe name of the property that will change.\n\nDiscussion\n\nUse this method when implementing key-value observer compliance manually to inform the observed object that the value at key is about to change.\n\nThe change type of this method is NSKeyValueChangeSetting.\n\nImportant\n\nAfter the values have been changed, a corresponding didChangeValueForKey: must be invoked with the same parameter.\n\nSpecial Considerations\n\nYou rarely need to override this method in subclasses, but if you do, be sure to call super.\n\nSee Also\nNotifying Observers of Changes\n- didChangeValueForKey:\nInforms the observed object that the value of a given property has changed.\n- willChange:valuesAtIndexes:forKey:\nInforms the observed object that the specified change is about to be executed at given indexes for a specified ordered to-many relationship.\n- didChange:valuesAtIndexes:forKey:\nInforms the observed object that the specified change has occurred on the indexes for a specified ordered to-many relationship.\n- willChangeValueForKey:withSetMutation:usingObjects:\nInforms the observed object that the specified change is about to be made to a specified unordered to-many relationship.\n- didChangeValueForKey:withSetMutation:usingObjects:\nInforms the observed object that the specified change was made to a specified unordered to-many relationship."
  },
  {
    "title": "accessibilityIndexOfChild: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1533558-accessibilityindexofchild",
    "html": "Deprecated\n\nUse NSAccessibility instead.\n\nParameters\nchild\n\nThe accessibility child of an object.\n\nReturn Value\n\nThe index of the accessibility child object in the parent. Returns NSNotFound if the child does not exist.\n\nSee Also\nDeprecated\n- accessibilityActionDescription:\nReturns a localized description of the specified action.\nDeprecated\n- accessibilityActionNames\nReturns an array of action names supported by the accessibility element.\nDeprecated\n- accessibilityArrayAttributeCount:\nReturns the count of the specified accessibility array attribute.\n- accessibilityArrayAttributeValues:index:maxCount:\nReturns a subarray of values of an accessibility array attribute.\n- accessibilityAttributeNames\nReturns an array of attribute names supported by the receiver.\nDeprecated\n- accessibilityAttributeValue:\nReturns the value of the specified attribute in the receiver.\nDeprecated\n- accessibilityAttributeValue:forParameter:\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\n- accessibilityIsAttributeSettable:\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\n- accessibilityIsIgnored\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\n- accessibilityParameterizedAttributeNames\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\n- accessibilityPerformAction:\nPerforms the action associated with the specified action.\nDeprecated\n- accessibilitySetOverrideValue:forAttribute:\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\n- accessibilitySetValue:forAttribute:\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "mutableSetValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415105-mutablesetvalueforkey",
    "html": "Parameters\nkey\n\nThe name of an unordered to-many relationship.\n\nReturn Value\n\nA mutable set that provides read-write access to the unordered to-many relationship specified by key.\n\nDiscussion\n\nObjects added to the mutable set proxy become related to the receiver, and objects removed from the mutable set become unrelated. The default implementation recognizes the same simple accessor methods and set accessor methods as valueForKey:, and follows the same direct instance variable access policies, but always returns a mutable collection proxy object instead of the immutable collection that valueForKey: would return.\n\nThe search pattern that mutableSetValueForKey: uses is described in Accessor Search Patterns in Key-Value Coding Programming Guide.\n\nSee Also\nGetting Values\n- valueForKey:\nReturns the value for the property identified by a given key.\n- valueForKeyPath:\nReturns the value for the derived property identified by a given key path.\n- dictionaryWithValuesForKeys:\nReturns a dictionary containing the property values identified by each of the keys in a given array.\n- valueForUndefinedKey:\nInvoked by valueForKey: when it finds no property corresponding to a given key.\n- mutableArrayValueForKey:\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\n- mutableArrayValueForKeyPath:\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\n- mutableSetValueForKeyPath:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\n- mutableOrderedSetValueForKey:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\n- mutableOrderedSetValueForKeyPath:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path."
  },
  {
    "title": "namesOfPromisedFilesDroppedAtDestination: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416082-namesofpromisedfilesdroppedatdes",
    "html": "Parameters\ndropDestination\n\nA URL object that identifies the location at which the promised files will be created.\n\nReturn Value\n\nAn array of the names of files (not full paths) that the receiver promises to create at dropDestination.\n\nDiscussion\n\nThis method is invoked when the drop has been accepted by the destination and the destination, in the case of another Cocoa application, invokes the NSDraggingInfo method namesOfPromisedFilesDroppedAtDestination:. For long operations, you can cache dropDestination and defer the creation of the files until the draggedImage:endedAt:operation: method to avoid blocking the destination application.\n\nSee Also\nDragging Options\ndraggingSourceOperationMaskForLocal:\nReturns an integer bit mask indicating the types of dragging operations the source object will allow to be performed on the dragged image's data.\nignoreModifierKeysWhileDragging\nSets whether the use of modifier keys should have an effect on the type of operation performed."
  },
  {
    "title": "NSTargetObjectUserInfoKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nskeyvaluecoding/nsundefinedkeyexception_userinfo_keys/nstargetobjectuserinfokey",
    "html": "Overview\n\nThe object on which the key value coding operation failed."
  },
  {
    "title": "mutableOrderedSetValueForKeyPath: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1407188-mutableorderedsetvalueforkeypath",
    "html": "Parameters\nkeyPath\n\nA key path, relative to the receiver, to a uniquing ordered to-many relationship represented by a set.\n\nReturn Value\n\nA mutable ordered set that provides read-write access to the uniquing to-many relationship specified by keyPath.\n\nDiscussion\n\nSee mutableOrderedSetValueForKey: for additional details.\n\nSee Also\nGetting Values\n- valueForKey:\nReturns the value for the property identified by a given key.\n- valueForKeyPath:\nReturns the value for the derived property identified by a given key path.\n- dictionaryWithValuesForKeys:\nReturns a dictionary containing the property values identified by each of the keys in a given array.\n- valueForUndefinedKey:\nInvoked by valueForKey: when it finds no property corresponding to a given key.\n- mutableArrayValueForKey:\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\n- mutableArrayValueForKeyPath:\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\n- mutableSetValueForKey:\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\n- mutableSetValueForKeyPath:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\n- mutableOrderedSetValueForKey:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key."
  },
  {
    "title": "mutableArrayValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416339-mutablearrayvalueforkey",
    "html": "Parameters\nkey\n\nThe name of an ordered to-many relationship.\n\nReturn Value\n\nA mutable array proxy that provides read-write access to the ordered to-many relationship specified by key.\n\nDiscussion\n\nObjects added to the mutable array become related to the receiver, and objects removed from the mutable array become unrelated. The default implementation recognizes the same simple accessor methods and array accessor methods as valueForKey:, and follows the same direct instance variable access policies, but always returns a mutable collection proxy object instead of the immutable collection that valueForKey: would return.\n\nThe search pattern that mutableArrayValueForKey: uses is described in Accessor Search Patterns in Key-Value Coding Programming Guide.\n\nSee Also\nGetting Values\n- valueForKey:\nReturns the value for the property identified by a given key.\n- valueForKeyPath:\nReturns the value for the derived property identified by a given key path.\n- dictionaryWithValuesForKeys:\nReturns a dictionary containing the property values identified by each of the keys in a given array.\n- valueForUndefinedKey:\nInvoked by valueForKey: when it finds no property corresponding to a given key.\n- mutableArrayValueForKeyPath:\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\n- mutableSetValueForKey:\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\n- mutableSetValueForKeyPath:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\n- mutableOrderedSetValueForKey:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\n- mutableOrderedSetValueForKeyPath:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path."
  },
  {
    "title": "dictionaryWithValuesForKeys: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411319-dictionarywithvaluesforkeys",
    "html": "Parameters\nkeys\n\nAn array containing NSString objects that identify properties of the receiver.\n\nReturn Value\n\nA dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\n\nDiscussion\n\nThe default implementation invokes valueForKey: for each key in keys and substitutes NSNull values in the dictionary for returned nil values.\n\nSee Also\nGetting Values\n- valueForKey:\nReturns the value for the property identified by a given key.\n- valueForKeyPath:\nReturns the value for the derived property identified by a given key path.\n- valueForUndefinedKey:\nInvoked by valueForKey: when it finds no property corresponding to a given key.\n- mutableArrayValueForKey:\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\n- mutableArrayValueForKeyPath:\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\n- mutableSetValueForKey:\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\n- mutableSetValueForKeyPath:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\n- mutableOrderedSetValueForKey:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\n- mutableOrderedSetValueForKeyPath:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path.\nRelated Documentation\n- setValuesForKeysWithDictionary:\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties."
  },
  {
    "title": "valueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1412591-valueforkey",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nReturn Value\n\nThe value for the property identified by key.\n\nDiscussion\n\nThe search pattern that valueForKey: uses to find the correct value to return is described in Accessor Search Patterns in Key-Value Coding Programming Guide.\n\nSee Also\nGetting Values\n- valueForKeyPath:\nReturns the value for the derived property identified by a given key path.\n- dictionaryWithValuesForKeys:\nReturns a dictionary containing the property values identified by each of the keys in a given array.\n- valueForUndefinedKey:\nInvoked by valueForKey: when it finds no property corresponding to a given key.\n- mutableArrayValueForKey:\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\n- mutableArrayValueForKeyPath:\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\n- mutableSetValueForKey:\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\n- mutableSetValueForKeyPath:\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\n- mutableOrderedSetValueForKey:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\n- mutableOrderedSetValueForKeyPath:\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path.\nRelated Documentation\nKey-Value Coding Programming Guide"
  },
  {
    "title": "performSelectorOnMainThread:withObject:waitUntilDone:modes: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411637-performselectoronmainthread",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\narg\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\nwait\n\nA Boolean that specifies whether the current thread blocks until after the specified selector is performed on the receiver on the main thread. Specify YES to block this thread; otherwise, specify NO to have this method return immediately.\n\nIf the current thread is also the main thread, and you pass YES, the message is performed immediately, otherwise the perform is queued to run the next time through the run loop.\n\narray\n\nAn array of strings that identifies the modes in which it is permissible to perform the specified selector. This array must contain at least one string. If you specify nil or an empty array for this parameter, this method returns without performing the specified selector. For information about run loop modes, see Run Loops in Threading Programming Guide.\n\nDiscussion\n\nYou can use this method to deliver messages to the main thread of your application. The main thread encompasses the application’s main run loop, and is where the NSApplication object receives events. The message in this case is a method of the current object that you want to execute on the thread.\n\nThis method queues the message on the run loop of the main thread using the run loop modes specified in the array parameter. As part of its normal run loop processing, the main thread dequeues the message (assuming it is running in one of the specified modes) and invokes the desired method. Multiple calls to this method from the same thread cause the corresponding selectors to be queued and performed in the same same order in which the calls were made, assuming the associated run loop modes for each selector are the same. If you specify different modes for each selector, any selectors whose associated mode does not match the current run loop mode are skipped until the run loop subsequently executes in that mode.\n\nYou cannot cancel messages queued using this method. If you want the option of canceling a message on the current thread, you must use either the performSelector:withObject:afterDelay: or performSelector:withObject:afterDelay:inModes: method.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after and related methods to get the behavior you want.\n\nSee Also\nSending Messages\n- performSelector:withObject:afterDelay:\nInvokes a method of the receiver on the current thread using the default mode after a delay.\n- performSelector:withObject:afterDelay:inModes:\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\n- performSelectorOnMainThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the main thread using the default mode.\n- performSelector:onThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the specified thread using the default mode.\n- performSelector:onThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the specified thread using the specified modes.\n- performSelectorInBackground:withObject:\nInvokes a method of the receiver on a new background thread.\n+ cancelPreviousPerformRequestsWithTarget:\nCancels perform requests previously registered with the performSelector:withObject:afterDelay: instance method.\n+ cancelPreviousPerformRequestsWithTarget:selector:object:\nCancels perform requests previously registered with performSelector:withObject:afterDelay:."
  },
  {
    "title": "handleQueryWithUnboundKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430066-handlequerywithunboundkey",
    "html": "Deprecated\n\nUse valueForUndefinedKey: instead.\n\nSee Also\nDeprecated Methods\n+ useStoredAccessor\nReturns YES if the stored value methods storedValueForKey: and takeStoredValue:forKey: should use private accessor methods in preference to public accessors.\nDeprecated\n- handleTakeValue:forUnboundKey:\nInvoked by takeValue:forKey: when it finds no property binding for key.\nDeprecated\n- storedValueForKey:\nReturns the property identified by a given key.\nDeprecated\n- takeStoredValue:forKey:\nSets the value of the property identified by a given key.\nDeprecated\n- takeValuesFromDictionary:\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\n- takeValue:forKeyPath:\nSets the value for the property identified by keyPath to value.\nDeprecated\n- takeValue:forKey:\nSets the value for the property identified by key to value.\nDeprecated\n- unableToSetNilForKey:\nInvoked if key is represented by a scalar attribute.\nDeprecated\n- valuesForKeys:\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated"
  },
  {
    "title": "willChangeValueForKey:withSetMutation:usingObjects: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1412323-willchangevalueforkey",
    "html": "Parameters\nkey\n\nThe name of a property that is an unordered to-many relationship\n\nmutationKind\n\nThe type of change that will be made.\n\nobjects\n\nThe objects that are involved in the change (see NSKeyValueSetMutationKind).\n\nDiscussion\n\nUse this method when implementing key-value observer compliance manually.\n\nImportant\n\nAfter the values have been changed, a corresponding didChangeValueForKey:withSetMutation:usingObjects: must be invoked with the same parameters.\n\nSpecial Considerations\n\nYou rarely need to override this method in subclasses, but if you do, be sure to call super.\n\nSee Also\nNotifying Observers of Changes\n- willChangeValueForKey:\nInforms the observed object that the value of a given property is about to change.\n- didChangeValueForKey:\nInforms the observed object that the value of a given property has changed.\n- willChange:valuesAtIndexes:forKey:\nInforms the observed object that the specified change is about to be executed at given indexes for a specified ordered to-many relationship.\n- didChange:valuesAtIndexes:forKey:\nInforms the observed object that the specified change has occurred on the indexes for a specified ordered to-many relationship.\n- didChangeValueForKey:withSetMutation:usingObjects:\nInforms the observed object that the specified change was made to a specified unordered to-many relationship."
  },
  {
    "title": "setValuesForKeysWithDictionary: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417515-setvaluesforkeyswithdictionary",
    "html": "Parameters\nkeyedValues\n\nA dictionary whose keys identify properties in the receiver. The values of the properties in the receiver are set to the corresponding values in the dictionary.\n\nDiscussion\n\nThe default implementation invokes setValue:forKey: for each key-value pair, substituting nil for NSNull values in keyedValues.\n\nSee Also\nSetting Values\n- setValue:forKeyPath:\nSets the value for the property identified by a given key path to a given value.\n- setNilValueForKey:\nInvoked by setValue:forKey: when it’s given a nil value for a scalar value (such as an int or float).\n- setValue:forKey:\nSets the property of the receiver specified by a given key to a given value.\n- setValue:forUndefinedKey:\nInvoked by setValue:forKey: when it finds no property for a given key.\nRelated Documentation\n- dictionaryWithValuesForKeys:\nReturns a dictionary containing the property values identified by each of the keys in a given array."
  },
  {
    "title": "storedValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430040-storedvalueforkey",
    "html": "Deprecated\n\nIf you are using the NSManagedObject class, use primitiveValueForKey: instead.\n\nDiscussion\n\nThis method is used when the value is retrieved for storage in an object store (generally, this storage is ultimately in a database) or for inclusion in a snapshot. The default implementation is similar to the implementation of valueForKey:, but it resolves key with a different method/instance variable search order:\n\nSearches for a private accessor method based on key (a method preceded by an underbar). For example, with a key of “lastName”, storedValueForKey: looks for a method named _getLastName or _lastName.\n\nIf a private accessor is not found, searches for an instance variable based on key and returns its value directly. For example, with a key of “lastName”, storedValueForKey: looks for an instance variable named _lastName or lastName.\n\nIf neither a private accessor nor an instance variable is found, storedValueForKey: searches for a public accessor method based on key. For the key “lastName”, this would be getLastName or lastName.\n\nIf key is unknown, storedValueForKey: calls handleTakeValue:forUnboundKey:.\n\nThis different search order allows an object to bypass processing that is performed before returning a value through a public API. However, if you always want to use the search order in valueForKey:, you can implement the class method useStoredAccessor to return NO. And as with valueForKey:, you can prevent direct access of an instance variable with the class method accessInstanceVariablesDirectly.\n\nSee Also\nDeprecated Methods\n+ useStoredAccessor\nReturns YES if the stored value methods storedValueForKey: and takeStoredValue:forKey: should use private accessor methods in preference to public accessors.\nDeprecated\n- handleQueryWithUnboundKey:\nInvoked by valueForKey: when it finds no property corresponding to key.\nDeprecated\n- handleTakeValue:forUnboundKey:\nInvoked by takeValue:forKey: when it finds no property binding for key.\nDeprecated\n- takeStoredValue:forKey:\nSets the value of the property identified by a given key.\nDeprecated\n- takeValuesFromDictionary:\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\n- takeValue:forKeyPath:\nSets the value for the property identified by keyPath to value.\nDeprecated\n- takeValue:forKey:\nSets the value for the property identified by key to value.\nDeprecated\n- unableToSetNilForKey:\nInvoked if key is represented by a scalar attribute.\nDeprecated\n- valuesForKeys:\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated"
  },
  {
    "title": "didChangeValueForKey:withSetMutation:usingObjects: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1410539-didchangevalueforkey",
    "html": "Parameters\nkey\n\nThe name of a property that is an unordered to-many relationship\n\nmutationKind\n\nThe type of change that was made.\n\nobjects\n\nThe objects that were involved in the change (see NSKeyValueSetMutationKind).\n\nDiscussion\n\nUse this method when implementing key-value observer compliance manually. Calls to this method are always paired with a matching call to willChangeValueForKey:withSetMutation:usingObjects:.\n\nSpecial Considerations\n\nYou rarely need to override this method in subclasses, but if you do, be sure to call super.\n\nSee Also\nNotifying Observers of Changes\n- willChangeValueForKey:\nInforms the observed object that the value of a given property is about to change.\n- didChangeValueForKey:\nInforms the observed object that the value of a given property has changed.\n- willChange:valuesAtIndexes:forKey:\nInforms the observed object that the specified change is about to be executed at given indexes for a specified ordered to-many relationship.\n- didChange:valuesAtIndexes:forKey:\nInforms the observed object that the specified change has occurred on the indexes for a specified ordered to-many relationship.\n- willChangeValueForKey:withSetMutation:usingObjects:\nInforms the observed object that the specified change is about to be made to a specified unordered to-many relationship."
  },
  {
    "title": "didChangeValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411809-didchangevalueforkey",
    "html": "Parameters\nkey\n\nThe name of the property that changed.\n\nDiscussion\n\nUse this method when implementing key-value observer compliance manually to inform the observed object that the value at key has just changed. Calls to this method are always paired with a matching call to willChangeValueForKey:.\n\nSpecial Considerations\n\nYou rarely need to override this method in subclasses, but if you do, be sure to call super.\n\nSee Also\nNotifying Observers of Changes\n- willChangeValueForKey:\nInforms the observed object that the value of a given property is about to change.\n- willChange:valuesAtIndexes:forKey:\nInforms the observed object that the specified change is about to be executed at given indexes for a specified ordered to-many relationship.\n- didChange:valuesAtIndexes:forKey:\nInforms the observed object that the specified change has occurred on the indexes for a specified ordered to-many relationship.\n- willChangeValueForKey:withSetMutation:usingObjects:\nInforms the observed object that the specified change is about to be made to a specified unordered to-many relationship.\n- didChangeValueForKey:withSetMutation:usingObjects:\nInforms the observed object that the specified change was made to a specified unordered to-many relationship."
  },
  {
    "title": "automaticallyNotifiesObserversForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1409370-automaticallynotifiesobserversfo",
    "html": "Return Value\n\nYES if the key-value observing machinery should automatically invoke willChangeValueForKey:/didChangeValueForKey: and willChange:valuesAtIndexes:forKey:/didChange:valuesAtIndexes:forKey: whenever instances of the class receive key-value coding messages for the key, or mutating key-value-coding-compliant methods for the key are invoked; otherwise NO.\n\nDiscussion\n\nThe default implementation returns YES. Starting in OS X 10.5, the default implementation of this method searches the receiving class for a method whose name matches the pattern +automaticallyNotifiesObserversOf<Key>, and returns the result of invoking that method if it is found. Any found methods must return BOOL. If no such method is found YES is returned.\n\nSee Also\nObserving Customization\n+ keyPathsForValuesAffectingValueForKey:\nReturns a set of key paths for properties whose values affect the value of the specified key.\n+ setKeys:triggerChangeNotificationsForDependentKey:\nConfigures the observed object to post change notifications for a given property if any of the properties specified in a given array changes.\nDeprecated\nobservationInfo\nReturns a pointer that identifies information about all of the observers that are registered with the observed object."
  },
  {
    "title": "keyPathsForValuesAffectingValueForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1414299-keypathsforvaluesaffectingvaluef",
    "html": "Parameters\nkey\n\nThe key whose value is affected by the key paths.\n\nDiscussion\n\nWhen an observer for the key is registered with an instance of the receiving class, key-value observing itself automatically observes all of the key paths for the same instance, and sends change notifications for the key to the observer when the value for any of those key paths changes.\n\nThe default implementation of this method searches the receiving class for a method whose name matches the pattern +keyPathsForValuesAffecting<Key>, and returns the result of invoking that method if it is found. Any such method must return an NSSet. If no such method is found, an NSSet that is computed from information provided by previous invocations of the now-deprecated setKeys:triggerChangeNotificationsForDependentKey: method is returned, for backward binary compatibility.\n\nYou can override this method when the getter method of one of your properties computes a value to return using the values of other properties, including those that are located by key paths. Your override should typically call super and return a set that includes any members in the set that result from doing that (so as not to interfere with overrides of this method in superclasses).\n\nNote\n\nYou must not override this method when you add a computed property to an existing class using a category, overriding methods in categories is unsupported. In that case, implement a matching +keyPathsForValuesAffecting<Key> to take advantage of this mechanism.\n\nSee Also\nObserving Customization\n+ automaticallyNotifiesObserversForKey:\nReturns a Boolean value that indicates whether the observed object supports automatic key-value observation for the given key.\n+ setKeys:triggerChangeNotificationsForDependentKey:\nConfigures the observed object to post change notifications for a given property if any of the properties specified in a given array changes.\nDeprecated\nobservationInfo\nReturns a pointer that identifies information about all of the observers that are registered with the observed object."
  },
  {
    "title": "YES | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/yes",
    "html": "Discussion\n\nThe YES macro from Objective-C is bridged to Swift as an ObjCBool value of true."
  },
  {
    "title": "NO | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/no",
    "html": "Discussion\n\nThe NO macro from Objective-C is bridged to Swift as an ObjCBool value of false."
  },
  {
    "title": "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418458-newscriptingobjectofclass",
    "html": "Parameters\nclass\n\nThe class of the scriptable object to be created.\n\nkey\n\nA key that identifies the relationship into which the new class object will be inserted.\n\ncontentsValue\n\nSpecifies the contents of the object to be created. This may be nil. (See also the Discussion section.)\n\nproperties\n\nThe properties to be set in the new object. (See also the Discussion section.)\n\nReturn Value\n\nThe new object. Returns nil if an error occurs.\n\nDiscussion\n\nYou can override the newScriptingObjectOfClass method to take more control when your application is sent a make command. This method is invoked on the prospective container of the new object. The contentsValue and properties are derived from the with contents and with properties parameters of the make command. The returned objects or objects are then inserted into the container using key-value coding.\n\nWhen this method is invoked by Cocoa, neither the contents value nor the properties will have yet been coerced using the NSScriptKeyValueCoding method coerceValue:forKey:. For sdef-declared scriptability, however, the types of the passed-in objects reliably match the relevant sdef declarations.\n\nThe default implementation of this method creates new scripting objects by sending alloc to a class and init to the resulting object. You override this method for situations where this is not sufficient, such as in Core Data applications, in which new objects must be initialized with [NSManagedObject initWithEntity:insertIntoManagedObjectContext:].\n\nSee Also\nScripting\nclassCode\nThe receiver's Apple event type code, as stored in the NSScriptClassDescription object for the object’s class.\nclassName\nA string containing the name of the class.\n- copyScriptingValue:forKey:withProperties:\nCreates and returns one or more scripting objects to be inserted into the specified relationship by copying the passed-in value and setting the properties in the copied object or objects.\nscriptingProperties\nAn NSString-keyed dictionary of the receiver's scriptable properties.\n- scriptingValueForSpecifier:\nGiven an object specifier, returns the specified object or objects in the receiving container."
  },
  {
    "title": "mask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/objc_cache/1808499-mask",
    "html": "See Also\nFields\noccupied\nAn integer specifying the total number of occupied cache buckets.\nbuckets\nAn array of pointers to Method data structures. This array may contain no more than mask + 1 items. Note that pointers may be NULL, indicating that the cache bucket is unoccupied, and occupied buckets may not be contiguous. This array may grow over time."
  },
  {
    "title": "valuesForKeys: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430074-valuesforkeys",
    "html": "Deprecated\n\nUse dictionaryWithValuesForKeys: instead.\n\nSee Also\nDeprecated Methods\n+ useStoredAccessor\nReturns YES if the stored value methods storedValueForKey: and takeStoredValue:forKey: should use private accessor methods in preference to public accessors.\nDeprecated\n- handleQueryWithUnboundKey:\nInvoked by valueForKey: when it finds no property corresponding to key.\nDeprecated\n- handleTakeValue:forUnboundKey:\nInvoked by takeValue:forKey: when it finds no property binding for key.\nDeprecated\n- storedValueForKey:\nReturns the property identified by a given key.\nDeprecated\n- takeStoredValue:forKey:\nSets the value of the property identified by a given key.\nDeprecated\n- takeValuesFromDictionary:\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\n- takeValue:forKeyPath:\nSets the value for the property identified by keyPath to value.\nDeprecated\n- takeValue:forKey:\nSets the value for the property identified by key to value.\nDeprecated\n- unableToSetNilForKey:\nInvoked if key is represented by a scalar attribute.\nDeprecated"
  },
  {
    "title": "unableToSetNilForKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430080-unabletosetnilforkey",
    "html": "Deprecated\n\nUse setNilValueForKey: instead.\n\nSee Also\nDeprecated Methods\n+ useStoredAccessor\nReturns YES if the stored value methods storedValueForKey: and takeStoredValue:forKey: should use private accessor methods in preference to public accessors.\nDeprecated\n- handleQueryWithUnboundKey:\nInvoked by valueForKey: when it finds no property corresponding to key.\nDeprecated\n- handleTakeValue:forUnboundKey:\nInvoked by takeValue:forKey: when it finds no property binding for key.\nDeprecated\n- storedValueForKey:\nReturns the property identified by a given key.\nDeprecated\n- takeStoredValue:forKey:\nSets the value of the property identified by a given key.\nDeprecated\n- takeValuesFromDictionary:\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\n- takeValue:forKeyPath:\nSets the value for the property identified by keyPath to value.\nDeprecated\n- takeValue:forKey:\nSets the value for the property identified by key to value.\nDeprecated\n- valuesForKeys:\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated"
  },
  {
    "title": "objc_getFutureClass | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1441638-objc_getfutureclass",
    "html": "Discussion\n\nDo not call this function yourself.\n\nSee Also\nWorking with Classes\nclass_getName\nReturns the name of a class.\nclass_getSuperclass\nReturns the superclass of a class.\nclass_setSuperclass\nSets the superclass of a given class.\nDeprecated\nclass_isMetaClass\nReturns a Boolean value that indicates whether a class object is a metaclass.\nclass_getInstanceSize\nReturns the size of instances of a class.\nclass_getInstanceVariable\nReturns the Ivar for a specified instance variable of a given class.\nclass_getClassVariable\nReturns the Ivar for a specified class variable of a given class.\nclass_addIvar\nAdds a new instance variable to a class.\nclass_copyIvarList\nDescribes the instance variables declared by a class.\nclass_getIvarLayout\nReturns a description of the Ivar layout for a given class.\nclass_setIvarLayout\nSets the Ivar layout for a given class.\nclass_getWeakIvarLayout\nReturns a description of the layout of weak Ivars for a given class.\nclass_setWeakIvarLayout\nSets the layout for weak Ivars for a given class.\nclass_getProperty\nReturns a property with a given name of a given class.\nclass_copyPropertyList\nDescribes the properties declared by a class.\nclass_addMethod\nAdds a new method to a class with a given name and implementation.\nclass_getInstanceMethod\nReturns a specified instance method for a given class.\nclass_getClassMethod\nReturns a pointer to the data structure describing a given class method for a given class.\nclass_copyMethodList\nDescribes the instance methods implemented by a class.\nclass_replaceMethod\nReplaces the implementation of a method for a given class.\nclass_getMethodImplementation\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nclass_getMethodImplementation_stret\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nclass_respondsToSelector\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nclass_addProtocol\nAdds a protocol to a class.\nclass_addProperty\nAdds a property to a class.\nclass_replaceProperty\nReplace a property of a class.\nclass_conformsToProtocol\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nclass_copyProtocolList\nDescribes the protocols adopted by a class.\nclass_getVersion\nReturns the version number of a class definition.\nclass_setVersion\nSets the version number of a class definition.\nobjc_setFutureClass\nUsed by CoreFoundation's toll-free bridging."
  },
  {
    "title": "NSUnknownUserInfoKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nskeyvaluecoding/nsundefinedkeyexception_userinfo_keys/nsunknownuserinfokey",
    "html": "Overview\n\nThe key for which the key value coding operation failed."
  },
  {
    "title": "objc_msgSend_fpret | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1456697-objc_msgsend_fpret",
    "html": "Parameters\nself\n\nA pointer that points to the instance of the class that is to receive the message.\n\nop\n\nThe selector of the method that handles the message.\n\n...\n\nA variable argument list containing the arguments to the method.\n\nDiscussion\n\nOn the i386 platform, the ABI for functions returning a floating-point value is incompatible with that for functions returning an integral type. On the i386 platform, therefore, you must use objc_msgSend_fpret for functions that for functions returning non-integral type. For float or long double return types, cast the function to an appropriate function pointer type first.\n\nThis function is not used on the PPC or PPC64 platforms.\n\nSee Also\nSending Messages\nobjc_msgSend\nSends a message with a simple return value to an instance of a class.\nobjc_msgSend_stret\nSends a message with a data-structure return value to an instance of a class.\nobjc_msgSendSuper\nSends a message with a simple return value to the superclass of an instance of a class.\nobjc_msgSendSuper_stret\nSends a message with a data-structure return value to the superclass of an instance of a class."
  },
  {
    "title": "performSelectorOnMainThread:withObject:waitUntilDone: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1414900-performselectoronmainthread",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\narg\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\nwait\n\nA Boolean that specifies whether the current thread blocks until after the specified selector is performed on the receiver on the main thread. Specify YES to block this thread; otherwise, specify NO to have this method return immediately.\n\nIf the current thread is also the main thread, and you specify YES for this parameter, the message is delivered and processed immediately.\n\nDiscussion\n\nYou can use this method to deliver messages to the main thread of your application. The main thread encompasses the application’s main run loop, and is where the NSApplication object receives events. The message in this case is a method of the current object that you want to execute on the thread.\n\nThis method queues the message on the run loop of the main thread using the common run loop modes—that is, the modes associated with the NSRunLoopCommonModes constant. As part of its normal run loop processing, the main thread dequeues the message (assuming it is running in one of the common run loop modes) and invokes the desired method. Multiple calls to this method from the same thread cause the corresponding selectors to be queued and performed in the same order in which the calls were made.\n\nYou cannot cancel messages queued using this method. If you want the option of canceling a message on the current thread, you must use either the performSelector:withObject:afterDelay: or performSelector:withObject:afterDelay:inModes: method.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after and related methods to get the behavior you want.\n\nSee Also\nSending Messages\n- performSelector:withObject:afterDelay:\nInvokes a method of the receiver on the current thread using the default mode after a delay.\n- performSelector:withObject:afterDelay:inModes:\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\n- performSelectorOnMainThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the main thread using the specified modes.\n- performSelector:onThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the specified thread using the default mode.\n- performSelector:onThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the specified thread using the specified modes.\n- performSelectorInBackground:withObject:\nInvokes a method of the receiver on a new background thread.\n+ cancelPreviousPerformRequestsWithTarget:\nCancels perform requests previously registered with the performSelector:withObject:afterDelay: instance method.\n+ cancelPreviousPerformRequestsWithTarget:selector:object:\nCancels perform requests previously registered with performSelector:withObject:afterDelay:."
  },
  {
    "title": "objc_destructInstance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1441624-objc_destructinstance",
    "html": "Discussion\n\nThis method does nothing if obj is nil.\n\nImportant\n\nThe garbage collector does not call this function. As a result, if you edit this function, you should also edit finalize. That said, Core Foundation and other clients do call this function under garbage collection.\n\nSee Also\nInstantiating Classes\nclass_createInstance\nCreates an instance of a class, allocating memory for the class in the default malloc memory zone.\nobjc_constructInstance\nCreates an instance of a class at the specified location."
  },
  {
    "title": "NSUInteger | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsuinteger",
    "html": "Discussion\n\nWhen building 32-bit applications, NSUInteger is a 32-bit unsigned integer. A 64-bit application treats NSUInteger as a 64-bit unsigned integer\n\nTopics\nConstants\nNSUIntegerMax\nThe maximum value for an NSUInteger.\nSee Also\nNumbers\nNSInteger\nDescribes an integer.\nNSDecimal\nA structure representing a base-10 number.\nNSDecimalNumber\nAn object for representing and performing arithmetic on base-10 numbers.\nNSNumber\nAn object wrapper for primitive scalar numeric values.\nNSNumberFormatter\nA formatter that converts between numeric values and their textual representations."
  },
  {
    "title": "performSelector:withObject:afterDelay:inModes: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415652-performselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\nanArgument\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\ndelay\n\nThe minimum time before which the message is sent. Specifying a delay of 0 does not necessarily cause the selector to be performed immediately. The selector is still queued on the thread’s run loop and performed as soon as possible.\n\nmodes\n\nAn array of strings that identify the modes to associate with the timer that performs the selector. This array must contain at least one string. If you specify nil or an empty array for this parameter, this method returns without performing the specified selector. For information about run loop modes, see Run Loops in Threading Programming Guide.\n\nDiscussion\n\nThis method sets up a timer to perform the aSelector message on the current thread’s run loop. The timer is configured to run in the modes specified by the modes parameter. When the timer fires, the thread attempts to dequeue the message from the run loop and perform the selector. It succeeds if the run loop is running and in one of the specified modes; otherwise, the timer waits until the run loop is in one of those modes.\n\nIf you want the message to be dequeued when the run loop is in a mode other than the default mode, use the performSelector:withObject:afterDelay:inModes: method instead. If you are not sure whether the current thread is the main thread, you can use the performSelectorOnMainThread:withObject:waitUntilDone: or performSelectorOnMainThread:withObject:waitUntilDone:modes: method to guarantee that your selector executes on the main thread. To cancel a queued message, use the cancelPreviousPerformRequestsWithTarget: or cancelPreviousPerformRequestsWithTarget:selector:object: method.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after and related methods to get the behavior you want.\n\nSee Also\nSending Messages\n- performSelector:withObject:afterDelay:\nInvokes a method of the receiver on the current thread using the default mode after a delay.\n- performSelectorOnMainThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the main thread using the default mode.\n- performSelectorOnMainThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the main thread using the specified modes.\n- performSelector:onThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the specified thread using the default mode.\n- performSelector:onThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the specified thread using the specified modes.\n- performSelectorInBackground:withObject:\nInvokes a method of the receiver on a new background thread.\n+ cancelPreviousPerformRequestsWithTarget:\nCancels perform requests previously registered with the performSelector:withObject:afterDelay: instance method.\n+ cancelPreviousPerformRequestsWithTarget:selector:object:\nCancels perform requests previously registered with performSelector:withObject:afterDelay:.\nRelated Documentation\n- invalidate\nStops the timer from ever firing again and requests its removal from its run loop.\n- addTimer:forMode:\nRegisters a given timer with a given input mode."
  },
  {
    "title": "object_dispose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1441571-object_dispose",
    "html": "Parameters\nobj\n\nAn Objective-C object.\n\nReturn Value\n\nnil.\n\nSee Also\nWorking with Instances\nobject_copy\nReturns a copy of a given object.\nobject_setInstanceVariable\nChanges the value of an instance variable of a class instance.\nobject_getInstanceVariable\nObtains the value of an instance variable of a class instance.\nobject_getIndexedIvars\nReturns a pointer to any extra bytes allocated with a instance given object.\nobject_getIvar\nReads the value of an instance variable in an object.\nobject_setIvar\nSets the value of an instance variable in an object.\nobject_getClassName\nReturns the class name of a given object.\nobject_getClass\nReturns the class of an object.\nobject_setClass\nSets the class of an object."
  },
  {
    "title": "objc_msgSend | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1456712-objc_msgsend",
    "html": "Parameters\nself\n\nA pointer that points to the instance of the class that is to receive the message.\n\nop\n\nThe selector of the method that handles the message.\n\n...\n\nA variable argument list containing the arguments to the method.\n\nReturn Value\n\nThe return value of the method.\n\nDiscussion\n\nWhen it encounters a method call, the compiler generates a call to one of the functions objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, or objc_msgSendSuper_stret. Messages sent to an object’s superclass (using the super keyword) are sent using objc_msgSendSuper; other messages are sent using objc_msgSend. Methods that have data structures as return values are sent using objc_msgSendSuper_stret and objc_msgSend_stret.\n\nSee Also\nSending Messages\nobjc_msgSend_fpret\nSends a message with a floating-point return value to an instance of a class.\nobjc_msgSend_stret\nSends a message with a data-structure return value to an instance of a class.\nobjc_msgSendSuper\nSends a message with a simple return value to the superclass of an instance of a class.\nobjc_msgSendSuper_stret\nSends a message with a data-structure return value to the superclass of an instance of a class."
  },
  {
    "title": "objc_msgSend_stret | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1456730-objc_msgsend_stret",
    "html": "Parameters\nstretAddr\n\nOn input, a pointer that points to a block of memory large enough to contain the return value of the method. On output, contains the return value of the method.\n\ntheReceiver\n\nA pointer to the instance of the class that is to receive the message.\n\ntheSelector\n\nA pointer of type SEL. Pass the selector of the method that handles the message.\n\n...\n\nA variable argument list containing the arguments to the method.\n\nDiscussion\n\nWhen it encounters a method call, the compiler generates a call to one of the functions objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, or objc_msgSendSuper_stret. Messages sent to an object’s superclass (using the super keyword) are sent using objc_msgSendSuper; other messages are sent using objc_msgSend. Methods that have data structures as return values are sent using objc_msgSendSuper_stret and objc_msgSend_stret.\n\nSee Also\nSending Messages\nobjc_msgSend\nSends a message with a simple return value to an instance of a class.\nobjc_msgSend_fpret\nSends a message with a floating-point return value to an instance of a class.\nobjc_msgSendSuper\nSends a message with a simple return value to the superclass of an instance of a class.\nobjc_msgSendSuper_stret\nSends a message with a data-structure return value to the superclass of an instance of a class."
  },
  {
    "title": "objc_msgSendSuper | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1456716-objc_msgsendsuper",
    "html": "Parameters\nsuper\n\nA pointer to an objc_super data structure. Pass values identifying the context the message was sent to, including the instance of the class that is to receive the message and the superclass at which to start searching for the method implementation.\n\nop\n\nA pointer of type SEL. Pass the selector of the method that will handle the message.\n\n...\n\nA variable argument list containing the arguments to the method.\n\nReturn Value\n\nThe return value of the method identified by op.\n\nDiscussion\n\nWhen it encounters a method call, the compiler generates a call to one of the functions objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, or objc_msgSendSuper_stret. Messages sent to an object’s superclass (using the super keyword) are sent using objc_msgSendSuper; other messages are sent using objc_msgSend. Methods that have data structures as return values are sent using objc_msgSendSuper_stret and objc_msgSend_stret.\n\nSee Also\nSending Messages\nobjc_msgSend\nSends a message with a simple return value to an instance of a class.\nobjc_msgSend_fpret\nSends a message with a floating-point return value to an instance of a class.\nobjc_msgSend_stret\nSends a message with a data-structure return value to an instance of a class.\nobjc_msgSendSuper_stret\nSends a message with a data-structure return value to the superclass of an instance of a class."
  },
  {
    "title": "object_copy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1441645-object_copy",
    "html": "Parameters\nobj\n\nAn Objective-C object.\n\nsize\n\nThe size of the object obj.\n\nReturn Value\n\nA copy of obj.\n\nSee Also\nWorking with Instances\nobject_dispose\nFrees the memory occupied by a given object.\nobject_setInstanceVariable\nChanges the value of an instance variable of a class instance.\nobject_getInstanceVariable\nObtains the value of an instance variable of a class instance.\nobject_getIndexedIvars\nReturns a pointer to any extra bytes allocated with a instance given object.\nobject_getIvar\nReads the value of an instance variable in an object.\nobject_setIvar\nSets the value of an instance variable in an object.\nobject_getClassName\nReturns the class name of a given object.\nobject_getClass\nReturns the class of an object.\nobject_setClass\nSets the class of an object."
  },
  {
    "title": "objc_msgSendSuper_stret | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1456722-objc_msgsendsuper_stret",
    "html": "Parameters\nsuper\n\nA pointer to an objc_super data structure. Pass values identifying the context the message was sent to, including the instance of the class that is to receive the message and the superclass at which to start searching for the method implementation.\n\nop\n\nA pointer of type SEL. Pass the selector of the method.\n\n...\n\nA variable argument list containing the arguments to the method.\n\nDiscussion\n\nWhen it encounters a method call, the compiler generates a call to one of the functions objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, or objc_msgSendSuper_stret. Messages sent to an object’s superclass (using the super keyword) are sent using objc_msgSendSuper; other messages are sent using objc_msgSend. Methods that have data structures as return values are sent using objc_msgSendSuper_stret and objc_msgSend_stret.\n\nSee Also\nSending Messages\nobjc_msgSend\nSends a message with a simple return value to an instance of a class.\nobjc_msgSend_fpret\nSends a message with a floating-point return value to an instance of a class.\nobjc_msgSend_stret\nSends a message with a data-structure return value to an instance of a class.\nobjc_msgSendSuper\nSends a message with a simple return value to the superclass of an instance of a class."
  },
  {
    "title": "method_invoke | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1456726-method_invoke",
    "html": "Parameters\nreceiver\n\nA pointer to the instance of the class that you want to invoke the method on. This value must not be nil.\n\nm\n\nThe method whose implementation you want to call.\n\n...\n\nA variable argument list containing the arguments to the method.\n\nReturn Value\n\nThe return value of the method.\n\nDiscussion\n\nUsing this function to call the implementation of a method is faster than calling method_getImplementation and method_getName.\n\nSee Also\nWorking with Methods\nmethod_invoke_stret\nCalls the implementation of a specified method that returns a data-structure.\nmethod_getName\nReturns the name of a method.\nmethod_getImplementation\nReturns the implementation of a method.\nmethod_getTypeEncoding\nReturns a string describing a method's parameter and return types.\nmethod_copyReturnType\nReturns a string describing a method's return type.\nmethod_copyArgumentType\nReturns a string describing a single parameter type of a method.\nmethod_getReturnType\nReturns by reference a string describing a method's return type.\nmethod_getNumberOfArguments\nReturns the number of arguments accepted by a method.\nmethod_getArgumentType\nReturns by reference a string describing a single parameter type of a method.\nmethod_getDescription\nReturns a method description structure for a specified method.\nmethod_setImplementation\nSets the implementation of a method.\nmethod_exchangeImplementations\nExchanges the implementations of two methods."
  },
  {
    "title": "NSObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject",
    "html": "Overview\n\nNote\n\nThis protocol is imported into Swift with the name NSObjectProtocol.\n\nAn object that conforms to this protocol can be considered a first-class object. Such an object can be asked about its:\n\nClass, and the place of its class in the inheritance hierarchy.\n\nConformance to protocols.\n\nAbility to respond to a particular message.\n\nThe Cocoa root class NSObject adopts this protocol, so all objects inheriting from NSObject have the features described by this protocol.\n\nTopics\nIdentifying Classes\n- class\nReturns the class object for the receiver’s class.\n\nRequired\n\nsuperclass\nReturns the class object for the receiver’s superclass.\n\nRequired\n\nIdentifying and Comparing Objects\n- isEqual:\nReturns a Boolean value that indicates whether the receiver and a given object are equal.\n\nRequired\n\nhash\nReturns an integer that can be used as a table address in a hash table structure.\n\nRequired\n\n- self\nReturns the receiver.\n\nRequired\n\nTesting Object Inheritance, Behavior, and Conformance\n- isKindOfClass:\nReturns a Boolean value that indicates whether the receiver is an instance of given class or an instance of any class that inherits from that class.\n\nRequired\n\n- isMemberOfClass:\nReturns a Boolean value that indicates whether the receiver is an instance of a given class.\n\nRequired\n\n- respondsToSelector:\nReturns a Boolean value that indicates whether the receiver implements or inherits a method that can respond to a specified message.\n\nRequired\n\n- conformsToProtocol:\nReturns a Boolean value that indicates whether the receiver conforms to a given protocol.\n\nRequired\n\nDescribing Objects\ndescription\nA textual representation of the receiver.\n\nRequired\n\ndebugDescription\nA textual representation of the receiver to use with a debugger.\nSending Messages\n- performSelector:\nSends a specified message to the receiver and returns the result of the message.\n\nRequired\n\n- performSelector:withObject:\nSends a message to the receiver with an object as the argument.\n\nRequired\n\n- performSelector:withObject:withObject:\nSends a message to the receiver with two objects as arguments.\n\nRequired\n\nIdentifying Proxies\n- isProxy\nReturns a Boolean value that indicates whether the receiver does not descend from NSObject.\n\nRequired\n\nObsolete Methods\n- retain\nIncrements the receiver’s reference count.\n\nRequired\n\n- release\nDecrements the receiver’s reference count.\n\nRequired\n\n- autorelease\nDecrements the receiver’s retain count at the end of the current autorelease pool block.\n\nRequired\n\n- retainCount\nDo not use this method.\n\nRequired\n\n- zone\nZones are deprecated and ignored by most classes that have it as a parameter.\n\nRequired\n\nRelationships\nInherited By\nABImageClient\nABNewPersonViewControllerDelegate\nABPeoplePickerNavigationControllerDelegate\nABPersonPickerDelegate\nABPersonViewControllerDelegate\nABUnknownPersonViewControllerDelegate\nAEAssessmentSessionDelegate\nAMWorkflowControllerDelegate\nARCoachingOverlayViewDelegate\nARSessionObserver\nARSessionProviding\nARTrackable\nASAccountAuthenticationModificationControllerDelegate\nASAccountAuthenticationModificationControllerPresentationContextProviding\nASAuthorizationControllerDelegate\nASAuthorizationControllerPresentationContextProviding\nASAuthorizationCredential\nASAuthorizationProvider\nASAuthorizationProviderExtensionAuthorizationRequestHandler\nASAuthorizationProviderExtensionRegistrationHandler\nASAuthorizationPublicKeyCredentialAssertionRequest\nASAuthorizationPublicKeyCredentialDescriptor\nASAuthorizationPublicKeyCredentialRegistrationRequest\nASAuthorizationWebBrowserExternallyAuthenticatableRequest\nASCredentialIdentity\nASCredentialRequest\nASWebAuthenticationPresentationContextProviding\nASWebAuthenticationSessionRequestDelegate\nAVAssetReaderCaptionValidationHandling\nAVAssetResourceLoaderDelegate\nAVAssetWriterDelegate\nAVAudio3DMixing\nAVAudioPlayerDelegate\nAVAudioRecorderDelegate\nAVAudioSessionDelegate\nAVAudioStereoMixing\nAVCaptureAudioDataOutputSampleBufferDelegate\nAVCaptureDataOutputSynchronizerDelegate\nAVCaptureDepthDataOutputDelegate\nAVCaptureFileOutputDelegate\nAVCaptureFileOutputRecordingDelegate\nAVCaptureMetadataOutputObjectsDelegate\nAVCapturePhotoCaptureDelegate\nAVCapturePhotoFileDataRepresentationCustomizer\nAVCapturePhotoOutputReadinessCoordinatorDelegate\nAVCaptureVideoDataOutputSampleBufferDelegate\nAVCaptureViewDelegate\nAVContentKeySessionDelegate\nAVContinuityDevicePickerViewControllerDelegate\nAVCustomRoutingControllerDelegate\nAVPictureInPictureControllerDelegate\nAVPictureInPictureSampleBufferPlaybackDelegate\nAVPlaybackCoordinatorPlaybackControlDelegate\nAVPlayerItemMetadataCollectorPushDelegate\nAVPlayerItemOutputPullDelegate\nAVPlayerItemOutputPushDelegate\nAVPlayerPlaybackCoordinatorDelegate\nAVPlayerViewControllerAnimationCoordinator\nAVPlayerViewControllerDelegate\nAVPlayerViewDelegate\nAVPlayerViewPictureInPictureDelegate\nAVQueuedSampleBufferRendering\nAVRoutePickerViewDelegate\nAVSpeechSynthesizerDelegate\nAVVideoCompositing\nAVVideoCompositionInstruction\nAVVideoCompositionValidationHandling\nAXBrailleMapRenderer\nAXChart\nAXCustomContentProvider\nBADownloadManagerDelegate\nBADownloaderExtension\nCAAnimationDelegate\nCALayerDelegate\nCALayoutManager\nCBCentralManagerDelegate\nCBPeripheralDelegate\nCBPeripheralManagerDelegate\nCHHapticParameterAttributes\nCHHapticPatternPlayer\nCKRecordKeyValueSetting\nCKRecordValue\nCKSyncEngineDelegate\nCLKComplicationDataSource\nCLKComplicationWidgetMigrator\nCLLocationManagerDelegate\nCLLocationPushServiceExtension\nCLSDataStoreDelegate\nCMFallDetectionDelegate\nCMHeadphoneMotionManagerDelegate\nCMIOExtensionDeviceSource\nCMIOExtensionProviderSource\nCMIOExtensionStreamSource\nCMWaterSubmersionManagerDelegate\nCNChangeHistoryEventVisitor\nCNContactPickerDelegate\nCNContactViewControllerDelegate\nCPBarButtonProviding\nCPInstrumentClusterControllerDelegate\nCPInterfaceControllerDelegate\nCPListTemplateDelegate\nCPListTemplateItem\nCPMapTemplateDelegate\nCPNowPlayingTemplateObserver\nCPPointOfInterestTemplateDelegate\nCPSearchTemplateDelegate\nCPSessionConfigurationDelegate\nCPTabBarTemplateDelegate\nCSSearchableIndexDelegate\nCTTelephonyNetworkInfoDelegate\nCXCallDirectoryExtensionContextDelegate\nCXCallObserverDelegate\nCXProviderDelegate\nDOMEventListener\nDOMEventTarget\nDOMNodeFilter\nDOMXPathNSResolver\nEAAccessoryDelegate\nEAWiFiUnconfiguredAccessoryBrowserDelegate\nEKCalendarChooserDelegate\nEKEventEditViewDelegate\nEKEventViewDelegate\nEXHostViewControllerDelegate\nEZSocketManagerDelegate\nEZSocketSerialization\nEZSocketServerDelegate\nGCAxisInput\nGCDevice\nGCDevicePhysicalInputState\nGCDevicePhysicalInputStateDiff\nGCLinearInput\nGCPhysicalInputElement\nGCPhysicalInputSource\nGCPressedStateInput\nGCRelativeInput\nGCSwitchPositionInput\nGCTouchedStateInput\nGKAchievementViewControllerDelegate\nGKAgentDelegate\nGKChallengeEventHandlerDelegate\nGKChallengeListener\nGKGameCenterControllerDelegate\nGKGameModel\nGKGameModelPlayer\nGKGameModelUpdate\nGKGameSessionEventListener\nGKGameSessionSharingViewControllerDelegate\nGKLeaderboardViewControllerDelegate\nGKMatchDelegate\nGKMatchmakerViewControllerDelegate\nGKPeerPickerControllerDelegate\nGKSavedGameListener\nGKSceneRootNodeType\nGKSessionDelegate\nGKStrategist\nGKTurnBasedMatchmakerViewControllerDelegate\nGKVoiceChatClient\nGLKViewControllerDelegate\nGLKViewDelegate\nHKLiveWorkoutBuilderDelegate\nHKWorkoutSessionDelegate\nHMAccessoryBrowserDelegate\nHMAccessoryDelegate\nHMCameraSnapshotControlDelegate\nHMCameraStreamControlDelegate\nHMHomeDelegate\nHMHomeManagerDelegate\nHMNetworkConfigurationProfileDelegate\nICCameraDeviceDownloadDelegate\nICDeviceBrowserDelegate\nICDeviceDelegate\nILMessageFilterCapabilitiesQueryHandling\nILMessageFilterQueryHandling\nINActivateCarSignalIntentHandling\nINAddMediaIntentHandling\nINAddTasksIntentHandling\nINAnswerCallIntentHandling\nINAppendToNoteIntentHandling\nINBookRestaurantReservationIntentHandling\nINCancelRideIntentHandling\nINCancelWorkoutIntentHandling\nINCreateNoteIntentHandling\nINCreateTaskListIntentHandling\nINDeleteTasksIntentHandling\nINEditMessageIntentHandling\nINEndWorkoutIntentHandling\nINGetAvailableRestaurantReservationBookingDefaultsIntentHandling\nINGetAvailableRestaurantReservationBookingsIntentHandling\nINGetCarLockStatusIntentHandling\nINGetCarPowerLevelStatusIntentHandling\nINGetCarPowerLevelStatusIntentResponseObserver\nINGetRestaurantGuestIntentHandling\nINGetRideStatusIntentHandling\nINGetRideStatusIntentResponseObserver\nINGetUserCurrentRestaurantReservationBookingsIntentHandling\nINGetVisualCodeIntentHandling\nINHangUpCallIntentHandling\nINIntentHandlerProviding\nINListCarsIntentHandling\nINListRideOptionsIntentHandling\nINPauseWorkoutIntentHandling\nINPayBillIntentHandling\nINPlayMediaIntentHandling\nINRequestPaymentIntentHandling\nINRequestRideIntentHandling\nINResumeWorkoutIntentHandling\nINSaveProfileInCarIntentHandling\nINSearchCallHistoryIntentHandling\nINSearchForAccountsIntentHandling\nINSearchForBillsIntentHandling\nINSearchForMediaIntentHandling\nINSearchForMessagesIntentHandling\nINSearchForNotebookItemsIntentHandling\nINSearchForPhotosIntentHandling\nINSendMessageIntentHandling\nINSendPaymentIntentHandling\nINSendRideFeedbackIntentHandling\nINSetAudioSourceInCarIntentHandling\nINSetCarLockStatusIntentHandling\nINSetClimateSettingsInCarIntentHandling\nINSetDefrosterSettingsInCarIntentHandling\nINSetMessageAttributeIntentHandling\nINSetProfileInCarIntentHandling\nINSetRadioStationIntentHandling\nINSetSeatSettingsInCarIntentHandling\nINSetTaskAttributeIntentHandling\nINShareFocusStatusIntentHandling\nINSnoozeTasksIntentHandling\nINSpeakable\nINStartAudioCallIntentHandling\nINStartCallIntentHandling\nINStartPhotoPlaybackIntentHandling\nINStartVideoCallIntentHandling\nINStartWorkoutIntentHandling\nINTransferMoneyIntentHandling\nINUIAddVoiceShortcutButtonDelegate\nINUIAddVoiceShortcutViewControllerDelegate\nINUIEditVoiceShortcutViewControllerDelegate\nINUIHostedViewControlling\nINUIHostedViewSiriProviding\nINUnsendMessagesIntentHandling\nINUpdateMediaAffinityIntentHandling\nIOBluetoothDeviceInquiryDelegate\nIOBluetoothDevicePairDelegate\nIOBluetoothHandsFreeDelegate\nMCAdvertiserAssistantDelegate\nMCBrowserViewControllerDelegate\nMCNearbyServiceAdvertiserDelegate\nMCNearbyServiceBrowserDelegate\nMCSessionDelegate\nMDLAssetResolver\nMDLComponent\nMDLLightProbeIrradianceDataSource\nMDLMeshBuffer\nMDLMeshBufferAllocator\nMDLMeshBufferZone\nMEComposeSessionHandler\nMEContentBlocker\nMEExtension\nMEMessageActionHandler\nMEMessageDecoder\nMEMessageEncoder\nMFMailComposeViewControllerDelegate\nMFMessageComposeViewControllerDelegate\nMIDICIProfileResponderDelegate\nMKAnnotation\nMKGeoJSONObject\nMKLocalSearchCompleterDelegate\nMKLookAroundViewControllerDelegate\nMKMapViewDelegate\nMKReverseGeocoderDelegate\nMLComputeDeviceProtocol\nMLWritable\nMPMediaPickerControllerDelegate\nMPNowPlayingSessionDelegate\nMPPlayableContentDataSource\nMPPlayableContentDelegate\nMPSCNNBatchNormalizationDataSource\nMPSCNNConvolutionDataSource\nMPSCNNGroupNormalizationDataSource\nMPSCNNInstanceNormalizationDataSource\nMPSHandle\nMPSHeapProvider\nMPSImageAllocator\nMPSImageSizeEncodingState\nMPSImageTransformProvider\nMPSNDArrayAllocator\nMPSNNGramMatrixCallback\nMPSNNLossCallback\nMPSNNPadding\nMPSNNTrainableNode\nMPSSVGFTextureAllocator\nMPSystemMusicPlayerController\nMSAuthenticationPresentationContext\nMSStickerBrowserViewDataSource\nMTKViewDelegate\nMTLArgumentEncoder\nMTLBinaryArchive\nMTLBinding\nMTLCaptureScope\nMTLCommandBuffer\nMTLCommandBufferEncoderInfo\nMTLCommandEncoder\nMTLCommandQueue\nMTLComputePipelineState\nMTLCounter\nMTLCounterSampleBuffer\nMTLCounterSet\nMTLDepthStencilState\nMTLDevice\nMTLDrawable\nMTLDynamicLibrary\nMTLEvent\nMTLFXSpatialScaler\nMTLFXTemporalScaler\nMTLFence\nMTLFunction\nMTLFunctionHandle\nMTLFunctionLog\nMTLFunctionLogDebugLocation\nMTLFunctionStitchingAttribute\nMTLFunctionStitchingNode\nMTLHeap\nMTLIOCommandBuffer\nMTLIOCommandQueue\nMTLIOFileHandle\nMTLIOScratchBuffer\nMTLIOScratchBufferAllocator\nMTLIndirectComputeCommand\nMTLIndirectRenderCommand\nMTLLibrary\nMTLRasterizationRateMap\nMTLRenderPipelineState\nMTLResource\nMTLSamplerState\nMTRCommissionableBrowserDelegate\nMTRDeviceAttestationDelegate\nMTRDeviceControllerClientProtocol\nMTRDeviceControllerDelegate\nMTRDeviceControllerServerProtocol\nMTRDeviceDelegate\nMTRDevicePairingDelegate\nMTRKeypair\nMTRNOCChainIssuer\nMTROTAProviderDelegate\nMTRStorage\nMXMetricManagerSubscriber\nNCWidgetListViewDelegate\nNCWidgetProviding\nNCWidgetSearchViewDelegate\nNEAppPushDelegate\nNFCNDEFReaderSessionDelegate\nNFCNDEFTag\nNFCReaderSession\nNFCReaderSessionDelegate\nNFCTag\nNFCTagReaderSessionDelegate\nNFCVASReaderSessionDelegate\nNISessionDelegate\nNSAccessibility\nNSAccessibilityCustomRotorItemSearchDelegate\nNSAccessibilityElement\nNSAccessibilityElementLoading\nNSAlertDelegate\nNSAlignmentFeedbackToken\nNSAnimationDelegate\nNSAppearanceCustomization\nNSApplicationDelegate\nNSBrowserDelegate\nNSCacheDelegate\nNSCandidateListTouchBarItemDelegate\nNSCloudSharingValidation\nNSCollectionLayoutContainer\nNSCollectionLayoutEnvironment\nNSCollectionLayoutVisibleItem\nNSCollectionViewDataSource\nNSCollectionViewDelegate\nNSCollectionViewElement\nNSCollectionViewPrefetching\nNSColorChanging\nNSComboBoxCellDataSource\nNSComboBoxDataSource\nNSConnectionDelegate\nNSControlTextEditingDelegate\nNSDatePickerCellDelegate\nNSDockTilePlugIn\nNSDraggingDestination\nNSDraggingInfo\nNSDraggingSource\nNSDrawerDelegate\nNSEditor\nNSEditorRegistration\nNSExtensionRequestHandling\nNSFetchRequestResult\nNSFetchedResultsControllerDelegate\nNSFileManagerDelegate\nNSFilePresenter\nNSFilePromiseProviderDelegate\nNSFileProviderChangeObserver\nNSFileProviderCustomAction\nNSFileProviderDomainState\nNSFileProviderEnumerating\nNSFileProviderEnumerationObserver\nNSFileProviderEnumerator\nNSFileProviderIncrementalContentFetching\nNSFileProviderItem\nNSFileProviderPartialContentFetching\nNSFileProviderReplicatedExtension\nNSFileProviderServicing\nNSFileProviderTestingOperation\nNSFileProviderThumbnailing\nNSFileProviderUserInteractionSuppressing\nNSFontChanging\nNSGestureRecognizerDelegate\nNSHapticFeedbackPerformer\nNSImageDelegate\nNSItemProviderReading\nNSItemProviderWriting\nNSKeyedArchiverDelegate\nNSKeyedUnarchiverDelegate\nNSLayoutManagerDelegate\nNSMenuDelegate\nNSMenuItemValidation\nNSMetadataQueryDelegate\nNSNetServiceBrowserDelegate\nNSNetServiceDelegate\nNSOpenSavePanelDelegate\nNSOutlineViewDataSource\nNSPageControllerDelegate\nNSPasteboardItemDataProvider\nNSPasteboardReading\nNSPasteboardTypeOwner\nNSPasteboardWriting\nNSPathCellDelegate\nNSPathControlDelegate\nNSPopoverDelegate\nNSPortDelegate\nNSPreviewRepresentableActivityItem\nNSProgressReporting\nNSRuleEditorDelegate\nNSScrubberDataSource\nNSScrubberDelegate\nNSSeguePerforming\nNSServicesMenuRequestor\nNSSharingServiceDelegate\nNSSharingServicePickerDelegate\nNSSoundDelegate\nNSSpeechRecognizerDelegate\nNSSpeechSynthesizerDelegate\nNSSpellServerDelegate\nNSSplitViewDelegate\nNSSpringLoadingDestination\nNSStackViewDelegate\nNSStandardKeyBindingResponding\nNSStreamDelegate\nNSTabViewDelegate\nNSTableViewDataSource\nNSTextAttachmentCell\nNSTextAttachmentContainer\nNSTextAttachmentLayout\nNSTextContentManagerDelegate\nNSTextDelegate\nNSTextElementProvider\nNSTextFinderBarContainer\nNSTextFinderClient\nNSTextLayoutManagerDelegate\nNSTextLocation\nNSTextSelectionDataSource\nNSTextStorageDelegate\nNSTextStorageObserving\nNSTextViewportLayoutControllerDelegate\nNSTokenFieldCellDelegate\nNSToolbarDelegate\nNSToolbarItemValidation\nNSTouchBarDelegate\nNSTouchBarProvider\nNSURLAuthenticationChallengeSender\nNSURLConnectionDelegate\nNSURLDownloadDelegate\nNSURLProtocolClient\nNSURLSessionDelegate\nNSUserActivityDelegate\nNSUserActivityRestoring\nNSUserInterfaceItemSearching\nNSUserNotificationCenterDelegate\nNSViewControllerPresentationAnimator\nNSViewLayerContentScaleDelegate\nNSViewToolTipOwner\nNSWindowDelegate\nNSWindowRestoration\nNSXMLParserDelegate\nNSXPCListenerDelegate\nNWTCPConnectionAuthenticationDelegate\nODQueryDelegate\nOSSystemExtensionRequestDelegate\nOS_ar_anchor\nOS_ar_authorization_result\nOS_ar_authorization_results\nOS_ar_data_provider\nOS_ar_data_providers\nOS_ar_error\nOS_ar_geometry_element\nOS_ar_geometry_source\nOS_ar_hand_skeleton\nOS_ar_hand_tracking_configuration\nOS_ar_image_anchors\nOS_ar_image_tracking_configuration\nOS_ar_mesh_anchors\nOS_ar_mesh_geometry\nOS_ar_plane_anchors\nOS_ar_plane_detection_configuration\nOS_ar_plane_extent\nOS_ar_plane_geometry\nOS_ar_pose\nOS_ar_reference_image\nOS_ar_reference_images\nOS_ar_scene_reconstruction_configuration\nOS_ar_session\nOS_ar_skeleton_joint\nOS_ar_world_anchors\nOS_ar_world_tracking_configuration\nOS_dispatch_object\nOS_hv_vcpu_config\nOS_hv_vm_config\nOS_nw_advertise_descriptor\nOS_nw_browse_descriptor\nOS_nw_browse_result\nOS_nw_browser\nOS_nw_connection\nOS_nw_connection_group\nOS_nw_content_context\nOS_nw_data_transfer_report\nOS_nw_endpoint\nOS_nw_error\nOS_nw_establishment_report\nOS_nw_ethernet_channel\nOS_nw_framer\nOS_nw_group_descriptor\nOS_nw_interface\nOS_nw_listener\nOS_nw_object\nOS_nw_parameters\nOS_nw_path\nOS_nw_path_monitor\nOS_nw_privacy_context\nOS_nw_protocol_definition\nOS_nw_protocol_metadata\nOS_nw_protocol_options\nOS_nw_protocol_stack\nOS_nw_proxy_config\nOS_nw_relay_hop\nOS_nw_resolution_report\nOS_nw_resolver_config\nOS_nw_txt_record\nOS_nw_ws_request\nOS_nw_ws_response\nOS_os_log\nOS_sec_certificate\nOS_sec_identity\nOS_sec_object\nOS_sec_protocol_metadata\nOS_sec_protocol_options\nOS_sec_trust\nOS_xpc_listener\nOS_xpc_object\nPDEPanel\nPDEPlugIn\nPDFDocumentDelegate\nPDFPageOverlayViewProvider\nPDFViewDelegate\nPGDevice\nPGDisplay\nPHContentEditingController\nPHLivePhotoViewDelegate\nPHPhotoLibraryAvailabilityObserver\nPHPhotoLibraryChangeObserver\nPHPickerViewControllerDelegate\nPHProjectExtensionController\nPHProjectTypeDescriptionDataSource\nPHProjectTypeDescriptionInvalidator\nPKAddPassesViewControllerDelegate\nPKAddPaymentPassViewControllerDelegate\nPKAddSecureElementPassViewControllerDelegate\nPKCanvasViewDelegate\nPKIdentityDocumentDescriptor\nPKIssuerProvisioningExtensionAuthorizationProviding\nPKPayLaterViewDelegate\nPKPaymentAuthorizationControllerDelegate\nPKPaymentAuthorizationViewControllerDelegate\nPKPushRegistryDelegate\nPKShareSecureElementPassViewControllerDelegate\nPKToolPickerObserver\nPKVehicleConnectionDelegate\nPTChannelManagerDelegate\nPTChannelRestorationDelegate\nQLPreviewControllerDelegate\nQLPreviewItem\nQLPreviewingController\nRPBroadcastActivityControllerDelegate\nRPBroadcastActivityViewControllerDelegate\nRPBroadcastControllerDelegate\nRPPreviewViewControllerDelegate\nRPScreenRecorderDelegate\nSACrashDetectionDelegate\nSAEmergencyResponseDelegate\nSCContentSharingPickerObserver\nSCNActionable\nSCNAnimatable\nSCNAnimation\nSCNAvoidOccluderConstraintDelegate\nSCNBoundingVolume\nSCNBufferStream\nSCNCameraControlConfiguration\nSCNCameraControllerDelegate\nSCNNodeRendererDelegate\nSCNPhysicsContactDelegate\nSCNProgramDelegate\nSCNSceneExportDelegate\nSCNSceneRenderer\nSCNSceneRendererDelegate\nSCNShadable\nSCNTechniqueSupport\nSCStreamDelegate\nSCStreamOutput\nSFSafariExtensionHandling\nSFSafariViewControllerDelegate\nSFSpeechRecognitionTaskDelegate\nSFSpeechRecognizerDelegate\nSHSessionDelegate\nSKCloudServiceSetupViewControllerDelegate\nSKOverlayDelegate\nSKPaymentQueueDelegate\nSKPaymentTransactionObserver\nSKPhysicsContactDelegate\nSKRequestDelegate\nSKSceneDelegate\nSKStoreProductViewControllerDelegate\nSKViewDelegate\nSKWarpable\nSNRequest\nSNResult\nSNResultsObserving\nSRSensorReaderDelegate\nSWCollaborationActionHandler\nSWCollaborationViewDelegate\nSWHighlightCenterDelegate\nSWHighlightEvent\nTKTokenDelegate\nTKTokenDriverDelegate\nTKTokenSessionDelegate\nTVApplicationControllerDelegate\nTVBrowserViewControllerDataSource\nTVBrowserViewControllerDelegate\nTVDocumentViewControllerDelegate\nTVInterfaceCreating\nTVLockupViewComponent\nTVPlaybackEventMarshaling\nTVTopShelfContent\nUIAccelerometerDelegate\nUIAccessibilityContainerDataTable\nUIAccessibilityContainerDataTableCell\nUIAccessibilityContentSizeCategoryImageAdjusting\nUIAccessibilityIdentification\nUIActionSheetDelegate\nUIActivityItemSource\nUIActivityItemsConfigurationProviding\nUIActivityItemsConfigurationReading\nUIAdaptivePresentationControllerDelegate\nUIAlertViewDelegate\nUIAppearance\nUIAppearanceContainer\nUIApplicationDelegate\nUIBarPositioning\nUIBarPositioningDelegate\nUICalendarSelectionMultiDateDelegate\nUICalendarSelectionSingleDateDelegate\nUICalendarViewDelegate\nUICloudSharingControllerDelegate\nUICollectionViewDataSource\nUICollectionViewDataSourcePrefetching\nUICollectionViewDragDelegate\nUICollectionViewDropCoordinator\nUICollectionViewDropDelegate\nUICollectionViewDropItem\nUICollisionBehaviorDelegate\nUIColorPickerViewControllerDelegate\nUIConfigurationState\nUIContentConfiguration\nUIContentContainer\nUIContentSizeCategoryAdjusting\nUIContentView\nUIContextMenuInteractionAnimating\nUIContextMenuInteractionDelegate\nUICoordinateSpace\nUIDataSourceTranslating\nUIDocumentBrowserViewControllerDelegate\nUIDocumentInteractionControllerDelegate\nUIDocumentMenuDelegate\nUIDocumentPickerDelegate\nUIDragAnimating\nUIDragDropSession\nUIDragInteractionDelegate\nUIDropInteractionDelegate\nUIDynamicAnimatorDelegate\nUIDynamicItem\nUIEditMenuInteractionAnimating\nUIEditMenuInteractionDelegate\nUIFindInteractionDelegate\nUIFocusAnimationContext\nUIFocusDebuggerOutput\nUIFocusEnvironment\nUIFocusItemContainer\nUIFontPickerViewControllerDelegate\nUIGestureRecognizerDelegate\nUIGuidedAccessRestrictionDelegate\nUIHoverEffect\nUIImagePickerControllerDelegate\nUIIndirectScribbleInteractionDelegate\nUIInputViewAudioFeedback\nUIInteraction\nUIItemProviderPresentationSizeProviding\nUILargeContentViewerInteractionDelegate\nUILargeContentViewerItem\nUILayoutGuideAspectFitting\nUILayoutSupport\nUILetterformAwareAdjusting\nUILookToDictateCapable\nUIMenuLeaf\nUIMutableTraits\nUINavigationControllerDelegate\nUINavigationItemRenameDelegate\nUIPageControlProgressDelegate\nUIPageViewControllerDataSource\nUIPageViewControllerDelegate\nUIPasteConfigurationSupporting\nUIPencilInteractionDelegate\nUIPickerViewDataSource\nUIPickerViewDelegate\nUIPointerInteractionAnimating\nUIPointerInteractionDelegate\nUIPopoverControllerDelegate\nUIPopoverPresentationControllerSourceItem\nUIPreviewActionItem\nUIPreviewInteractionDelegate\nUIPrintInteractionControllerDelegate\nUIPrinterPickerControllerDelegate\nUIResponderStandardEditActions\nUISceneDelegate\nUIScreenshotServiceDelegate\nUIScribbleInteractionDelegate\nUIScrollViewDelegate\nUISearchControllerDelegate\nUISearchDisplayDelegate\nUISearchResultsUpdating\nUISearchSuggestion\nUIShapeProvider\nUISheetPresentationControllerDetentResolutionContext\nUISpringLoadedInteractionBehavior\nUISpringLoadedInteractionContext\nUISpringLoadedInteractionEffect\nUISpringLoadedInteractionSupporting\nUIStateRestoring\nUITabBarControllerDelegate\nUITabBarDelegate\nUITableViewDataSource\nUITableViewDataSourcePrefetching\nUITableViewDelegate\nUITableViewDragDelegate\nUITableViewDropCoordinator\nUITableViewDropDelegate\nUITableViewDropItem\nUITextDragDelegate\nUITextDragRequest\nUITextDropDelegate\nUITextDropRequest\nUITextFieldDelegate\nUITextFormattingCoordinatorDelegate\nUITextInputDelegate\nUITextInputTokenizer\nUITextInputTraits\nUITextInteractionDelegate\nUITextPasteDelegate\nUITextPasteItem\nUITextSearchAggregator\nUITextSearching\nUITextSelectionDisplayInteractionDelegate\nUITextViewDelegate\nUIToolTipInteractionDelegate\nUITraitChangeRegistration\nUITraitEnvironment\nUIUserActivityRestoring\nUIVideoEditorControllerDelegate\nUIViewAnimating\nUIViewControllerAnimatedTransitioning\nUIViewControllerContextTransitioning\nUIViewControllerInteractiveTransitioning\nUIViewControllerPreviewing\nUIViewControllerPreviewingDelegate\nUIViewControllerTransitionCoordinatorContext\nUIViewControllerTransitioningDelegate\nUIWebViewDelegate\nUNNotificationContentExtension\nUNNotificationContentProviding\nUNUserNotificationCenterDelegate\nVNDocumentCameraViewControllerDelegate\nVNFaceObservationAccepting\nVNRequestProgressProviding\nVSAccountManagerDelegate\nVZGraphicsDisplayObserver\nVZNetworkBlockDeviceStorageDeviceAttachmentDelegate\nVZVirtioConsoleDeviceDelegate\nVZVirtioSocketListenerDelegate\nVZVirtualMachineDelegate\nWCSessionDelegate\nWKApplicationDelegate\nWKCrownDelegate\nWKDownloadDelegate\nWKExtendedRuntimeSessionDelegate\nWKExtensionDelegate\nWKHTTPCookieStoreObserver\nWKImageAnimatable\nWKNavigationDelegate\nWKScriptMessageHandler\nWKScriptMessageHandlerWithReply\nWKUIDelegate\nWKURLSchemeHandler\nWKURLSchemeTask\nWebDocumentRepresentation\nWebDocumentSearching\nWebDocumentText\nWebDocumentView\nWebEditingDelegate\nWebFrameLoadDelegate\nWebOpenPanelResultListener\nWebPlugInViewFactory\nWebPolicyDecisionListener\nWebPolicyDelegate\nWebResourceLoadDelegate\nWebUIDelegate\nXCSourceEditorCommand\nXCSourceEditorExtension\nXCTActivity\nXCTMetric\nXCTWaiterDelegate\nXCTestObservation\nXCUIElementSnapshotProviding\nXCUIScreenshotProviding\nConforming Types\nNSObject\nNSProxy\nSee Also\nObject Basics\nNSObject\nThe root class of most Objective-C class hierarchies, from which subclasses inherit a basic interface to the runtime system and the ability to behave as Objective-C objects.\nNSKeyValueCoding\nA mechanism by which you can access the properties of an object indirectly by name or key."
  },
  {
    "title": "scriptingValueForSpecifier: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1409268-scriptingvalueforspecifier",
    "html": "Parameters\nobjectSpecifier\n\nAn object specifier to be evaluated.\n\nReturn Value\n\nThe specified object or objects in the receiving container.\n\nThis method might successfully return an object, an array of objects, or nil, depending on the kind of object specifier. Because nil is a valid return value, failure is signaled by invoking the object specifier’s setEvaluationError: method before returning.\n\nDiscussion\n\nYou can override this method to customize the evaluation of object specifiers without requiring that the scripting container make up indexes for contained objects that don't naturally have indexes (as can be the case if you implement indicesOfObjectsByEvaluatingObjectSpecifier: instead).\n\nYour override of this method doesn't need to also invoke any of the NSScriptCommand error signaling methods, though it can, to record very specific information. The NSUnknownKeySpecifierError and NSInvalidIndexSpecifierError numbers are special, in that Cocoa may continue evaluating an outer specifier if they're encountered, for the convenience of scripters.\n\nSee Also\nScripting\nclassCode\nThe receiver's Apple event type code, as stored in the NSScriptClassDescription object for the object’s class.\nclassName\nA string containing the name of the class.\n- copyScriptingValue:forKey:withProperties:\nCreates and returns one or more scripting objects to be inserted into the specified relationship by copying the passed-in value and setting the properties in the copied object or objects.\n- newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:\nCreates and returns an instance of a scriptable class, setting its contents and properties, for insertion into the relationship identified by the key.\nscriptingProperties\nAn NSString-keyed dictionary of the receiver's scriptable properties."
  },
  {
    "title": "method_invoke_stret | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1456701-method_invoke_stret",
    "html": "Parameters\nreceiver\n\nA pointer to the instance of the class that you want to invoke the method on. This value must not be nil.\n\nm\n\nThe method whose implementation you want to call.\n\n...\n\nA variable argument list containing the arguments to the method.\n\nDiscussion\n\nUsing this function to call the implementation of a method is faster than calling method_getImplementation and method_getName.\n\nSee Also\nWorking with Methods\nmethod_invoke\nCalls the implementation of a specified method.\nmethod_getName\nReturns the name of a method.\nmethod_getImplementation\nReturns the implementation of a method.\nmethod_getTypeEncoding\nReturns a string describing a method's parameter and return types.\nmethod_copyReturnType\nReturns a string describing a method's return type.\nmethod_copyArgumentType\nReturns a string describing a single parameter type of a method.\nmethod_getReturnType\nReturns by reference a string describing a method's return type.\nmethod_getNumberOfArguments\nReturns the number of arguments accepted by a method.\nmethod_getArgumentType\nReturns by reference a string describing a single parameter type of a method.\nmethod_getDescription\nReturns a method description structure for a specified method.\nmethod_setImplementation\nSets the implementation of a method.\nmethod_exchangeImplementations\nExchanges the implementations of two methods."
  },
  {
    "title": "replacementObjectForPortCoder: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1580074-replacementobjectforportcoder",
    "html": "Parameters\naCoder\n\nThe port coder encoding the receiver.\n\nReturn Value\n\nThe object encode instead of the receiver (if different).\n\nDiscussion\n\nThis method is invoked by NSPortCoder. NSObject’s implementation returns an NSDistantObject object for the object returned by replacementObjectForCoder:, enabling all objects to be distributed by proxy as the default. However, if replacementObjectForCoder: returns nil, NSObject’s implementation will also return nil.\n\nSubclasses that want to be passed by copy instead of by reference must override this method and return self. The following example shows how to support object replacement both by copy and by reference:\n\n- (id)replacementObjectForPortCoder:(NSPortCoder *)encoder {\n    return [encoder isByref] ? [super replacementObjectForPortCoder:encoder] : self;\n}\n\nSee Also\nDeprecated Methods\n- accessibilityAttributeNames\nReturns an array of attribute names supported by the receiver.\nDeprecated\n- accessibilityAttributeValue:\nReturns the value of the specified attribute in the receiver.\nDeprecated\n- accessibilityAttributeValue:forParameter:\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\n- accessibilityActionDescription:\nReturns a localized description of the specified action.\nDeprecated\n- accessibilityActionNames\nReturns an array of action names supported by the accessibility element.\nDeprecated\n- accessibilityArrayAttributeCount:\nReturns the count of the specified accessibility array attribute.\n- accessibilityArrayAttributeValues:index:maxCount:\nReturns a subarray of values of an accessibility array attribute.\n- accessibilityIndexOfChild:\nReturns the index of the specified accessibility child in the parent.\n- accessibilityIsAttributeSettable:\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\n- accessibilityIsIgnored\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\n- accessibilityParameterizedAttributeNames\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\n- accessibilityPerformAction:\nPerforms the action associated with the specified action.\nDeprecated\n- accessibilitySetOverrideValue:forAttribute:\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\n- accessibilitySetValue:forAttribute:\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\n- fileManager:shouldProceedAfterError:\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\n- fileManager:willProcessPath:\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\n- finalize\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\n- fontManager:willIncludeFont:\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\n- namesOfPromisedFilesDroppedAtDestination:\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\n- storedValueForKey:\nReturns the property identified by a given key.\nDeprecated\n- textStorageDidProcessEditing:\nDeprecated\n- textStorageWillProcessEditing:\nDeprecated\n- takeStoredValue:forKey:\nSets the value of the property identified by a given key.\nDeprecated\n- takeValue:forKey:\nSets the value for the property identified by key to value.\nDeprecated\n- takeValue:forKeyPath:\nSets the value for the property identified by keyPath to value.\nDeprecated\n- takeValuesFromDictionary:\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\n- unableToSetNilForKey:\nInvoked if key is represented by a scalar attribute.\nDeprecated\n- valuesForKeys:\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\n- workflowController:didError:\nInvoked when the receiver's workflow encounters an error.\nDeprecated\n- workflowController:didRunAction:\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\n- workflowController:willRunAction:\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\n- workflowControllerDidRun:\nTells the delegate that the workflow controller object finished running.\nDeprecated\n- workflowControllerDidStop:\nTells the delegate that the workflow controller object has stopped.\nDeprecated\n- workflowControllerWillRun:\nTells the delegate that the workflow controller object is about to run.\nDeprecated\n- workflowControllerWillStop:\nTells the delegate that the workflow controller object is about to stop.\nDeprecated\nRelated Documentation\nclassForPortCoder\nClass to substitute for the receiver in distribution encoding."
  },
  {
    "title": "occupied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/objc_cache/1808501-occupied",
    "html": "See Also\nFields\nmask\nAn integer specifying the total number of allocated cache buckets (minus one). During method lookup, the Objective-C runtime uses this field to determine the index at which to begin a linear search of the buckets array. A pointer to a method’s selector is masked against this field using a logical AND operation (index = (mask & selector)). This serves as a simple hashing algorithm.\nbuckets\nAn array of pointers to Method data structures. This array may contain no more than mask + 1 items. Note that pointers may be NULL, indicating that the cache bucket is unoccupied, and occupied buckets may not be contiguous. This array may grow over time."
  },
  {
    "title": "takeValuesFromDictionary: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430035-takevaluesfromdictionary",
    "html": "Deprecated\n\nUse setValuesForKeysWithDictionary: instead.\n\nSee Also\nDeprecated Methods\n+ useStoredAccessor\nReturns YES if the stored value methods storedValueForKey: and takeStoredValue:forKey: should use private accessor methods in preference to public accessors.\nDeprecated\n- handleQueryWithUnboundKey:\nInvoked by valueForKey: when it finds no property corresponding to key.\nDeprecated\n- handleTakeValue:forUnboundKey:\nInvoked by takeValue:forKey: when it finds no property binding for key.\nDeprecated\n- storedValueForKey:\nReturns the property identified by a given key.\nDeprecated\n- takeStoredValue:forKey:\nSets the value of the property identified by a given key.\nDeprecated\n- takeValue:forKeyPath:\nSets the value for the property identified by keyPath to value.\nDeprecated\n- takeValue:forKey:\nSets the value for the property identified by key to value.\nDeprecated\n- unableToSetNilForKey:\nInvoked if key is represented by a scalar attribute.\nDeprecated\n- valuesForKeys:\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated"
  },
  {
    "title": "objc_setFutureClass | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/1808430-objc_setfutureclass",
    "html": "Overview\n\nDo not call this function yourself.\n\nSee Also\nWorking with Classes\nclass_getName\nReturns the name of a class.\nclass_getSuperclass\nReturns the superclass of a class.\nclass_setSuperclass\nSets the superclass of a given class.\nDeprecated\nclass_isMetaClass\nReturns a Boolean value that indicates whether a class object is a metaclass.\nclass_getInstanceSize\nReturns the size of instances of a class.\nclass_getInstanceVariable\nReturns the Ivar for a specified instance variable of a given class.\nclass_getClassVariable\nReturns the Ivar for a specified class variable of a given class.\nclass_addIvar\nAdds a new instance variable to a class.\nclass_copyIvarList\nDescribes the instance variables declared by a class.\nclass_getIvarLayout\nReturns a description of the Ivar layout for a given class.\nclass_setIvarLayout\nSets the Ivar layout for a given class.\nclass_getWeakIvarLayout\nReturns a description of the layout of weak Ivars for a given class.\nclass_setWeakIvarLayout\nSets the layout for weak Ivars for a given class.\nclass_getProperty\nReturns a property with a given name of a given class.\nclass_copyPropertyList\nDescribes the properties declared by a class.\nclass_addMethod\nAdds a new method to a class with a given name and implementation.\nclass_getInstanceMethod\nReturns a specified instance method for a given class.\nclass_getClassMethod\nReturns a pointer to the data structure describing a given class method for a given class.\nclass_copyMethodList\nDescribes the instance methods implemented by a class.\nclass_replaceMethod\nReplaces the implementation of a method for a given class.\nclass_getMethodImplementation\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nclass_getMethodImplementation_stret\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nclass_respondsToSelector\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nclass_addProtocol\nAdds a protocol to a class.\nclass_addProperty\nAdds a property to a class.\nclass_replaceProperty\nReplace a property of a class.\nclass_conformsToProtocol\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nclass_copyProtocolList\nDescribes the protocols adopted by a class.\nclass_getVersion\nReturns the version number of a class definition.\nclass_setVersion\nSets the version number of a class definition.\nobjc_getFutureClass\nUsed by CoreFoundation's toll-free bridging."
  },
  {
    "title": "BOOL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/bool",
    "html": "Discussion\n\nBOOL is explicitly signed so @encode(BOOL) is c rather than C even if -funsigned-char is used.\n\nFor values, see Boolean Values.\n\nSpecial Considerations\n\nSince the type of BOOL is actually char, it does not behave in the same way as a C _Bool value or a C++ bool value. For example, the conditional in the following code will be false on i386 (and true on PPC):\n\n- (BOOL)value {\n    return 256;\n}\n// then\nif ([self value]) doStuff();\n\n\nBy contrast, the conditional in the following code will be true on all platforms (even where sizeof(bool) == 1):\n\n- (bool)value {\n    return 256;\n}\n// then\nif ([self value]) doStuff();\n"
  },
  {
    "title": "buckets | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/objc_cache/1808503-buckets",
    "html": "See Also\nFields\nmask\nAn integer specifying the total number of allocated cache buckets (minus one). During method lookup, the Objective-C runtime uses this field to determine the index at which to begin a linear search of the buckets array. A pointer to a method’s selector is masked against this field using a logical AND operation (index = (mask & selector)). This serves as a simple hashing algorithm.\noccupied\nAn integer specifying the total number of occupied cache buckets."
  },
  {
    "title": "setKeys:triggerChangeNotificationsForDependentKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1576501-setkeys",
    "html": "Deprecated\n\nUse the method keyPathsForValuesAffectingValueForKey: instead.\n\nParameters\nkeys\n\nThe names of the properties upon which the value of the property identified by dependentKey depends.\n\ndependentKey\n\nThe name of a property whose value depends on the properties specified by keys.\n\nDiscussion\n\nInvocations of will- and did-change KVO notification methods for any key in keys automatically invokes the corresponding change notification methods for dependentKey. The observed object does not receive willChange or didChange messages to generate the notifications.\n\nDependencies should be registered before any instances of the receiving class are created, so you typically invoke this method in a class's initialize method, as illustrated in the following example.\n\n+ (void)initialize {\n    [self setKeys:@[@\"firstName\", @\"lastName\"] triggerChangeNotificationsForDependentKey:@\"fullName\"];\n}\n\nSee Also\nObserving Customization\n+ automaticallyNotifiesObserversForKey:\nReturns a Boolean value that indicates whether the observed object supports automatic key-value observation for the given key.\n+ keyPathsForValuesAffectingValueForKey:\nReturns a set of key paths for properties whose values affect the value of the specified key.\nobservationInfo\nReturns a pointer that identifies information about all of the observers that are registered with the observed object."
  },
  {
    "title": "id | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/id",
    "html": "Overview\n\nWhen you create an instance of a particular class, the allocated memory contains an objc_object data structure, which is directly followed by the data for the instance variables of the class.\n\nThe alloc and allocWithZone: methods of the Foundation framework class NSObject use the function class_createInstance to create objc_object data structures.\n\nTopics\nInstance Properties\nisa\nA pointer to the class definition of which this object is an instance.\nDeprecated\nSee Also\nInstance Data Types\nobjc_super\nSpecifies the superclass of an instance."
  },
  {
    "title": "Boolean Values | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/boolean_values",
    "html": "Topics\nConstants\nYES\nDefines YES as 1.\nNO\nDefines NO as 0."
  },
  {
    "title": "Local Variable Storage Duration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/local_variable_storage_duration",
    "html": "Topics\nConstants\nNS_VALID_UNTIL_END_OF_SCOPE\nMarks local variables of type id or pointer-to-ObjC-object-type so that values stored into those local variable are not aggressively released by the compiler during optimization. Instead, the values are held until either the variable is assigned to again, or the end of the scope of the local variable (such as in a compound statement or a method definition)."
  },
  {
    "title": "retainCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1571952-retaincount",
    "html": "Required\n\nReturn Value\n\nThe receiver’s reference count.\n\nDiscussion\n\nThis method is of no value in debugging memory management issues. Because any number of framework objects may have retained an object in order to hold references to it, while at the same time autorelease pools may be holding any number of deferred releases on an object, it is very unlikely that you can get useful information from this method.\n\nTo understand the fundamental rules of memory management that you must abide by, read Memory Management Policy. To diagnose memory management problems, use a suitable tool:\n\nThe Clang Static analyzer can typically find memory management problems even before you run your program.\n\nThe Object Alloc instrument in the Instruments application (see Instruments User Guide) can track object allocation and destruction.\n\nSee Also\nObsolete Methods\n- retain\nIncrements the receiver’s reference count.\n\nRequired\n\n- release\nDecrements the receiver’s reference count.\n\nRequired\n\n- autorelease\nDecrements the receiver’s retain count at the end of the current autorelease pool block.\n\nRequired\n\n- zone\nZones are deprecated and ignored by most classes that have it as a parameter.\n\nRequired"
  },
  {
    "title": "autorelease | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1571951-autorelease",
    "html": "Required\n\nReturn Value\n\nself.\n\nDiscussion\n\nFor more information about autorelease pool blocks, see Advanced Memory Management Programming Guide.\n\nSpecial Considerations\n\nInstead of using manual reference counting, you should adopt ARC—see Transitioning to ARC Release Notes.\n\nSee Also\nObsolete Methods\n- retain\nIncrements the receiver’s reference count.\n\nRequired\n\n- release\nDecrements the receiver’s reference count.\n\nRequired\n\n- retainCount\nDo not use this method.\n\nRequired\n\n- zone\nZones are deprecated and ignored by most classes that have it as a parameter.\n\nRequired"
  },
  {
    "title": "zone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1571954-zone",
    "html": "Required\n\nReturn Value\n\nA pointer to the zone from which the receiver was allocated.\n\nSee Also\nObsolete Methods\n- retain\nIncrements the receiver’s reference count.\n\nRequired\n\n- release\nDecrements the receiver’s reference count.\n\nRequired\n\n- autorelease\nDecrements the receiver’s retain count at the end of the current autorelease pool block.\n\nRequired\n\n- retainCount\nDo not use this method.\n\nRequired"
  },
  {
    "title": "isProxy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418528-isproxy",
    "html": "Required\n\nReturn Value\n\nNO if the receiver really descends from NSObject, otherwise YES.\n\nDiscussion\n\nThis method is necessary because sending isKindOfClass: or isMemberOfClass: to an NSProxy object will test the object the proxy stands in for, not the proxy itself. Use this method to test if the receiver is a proxy (or a member of some other root class)."
  },
  {
    "title": "isSubclassOfClass: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418669-issubclassofclass",
    "html": "Parameters\naClass\n\nA class object.\n\nReturn Value\n\nYES if the receiving class is a subclass of—or identical to—aClass, otherwise NO.\n\nSee Also\nIdentifying Classes\n+ class\nReturns the class object.\n+ superclass\nReturns the class object for the receiver’s superclass."
  },
  {
    "title": "release | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1571957-release",
    "html": "Required\n\nDiscussion\n\nThe receiver is sent a dealloc message when its reference count reaches 0.\n\nYou would only implement this method to define your own reference-counting scheme. Such implementations should not invoke the inherited method; that is, they should not include a release message to super.\n\nFor more information on the reference counting mechanism, see Advanced Memory Management Programming Guide.\n\nSpecial Considerations\n\nInstead of using manual reference counting, you should adopt ARC—see Transitioning to ARC Release Notes.\n\nSee Also\nObsolete Methods\n- retain\nIncrements the receiver’s reference count.\n\nRequired\n\n- autorelease\nDecrements the receiver’s retain count at the end of the current autorelease pool block.\n\nRequired\n\n- retainCount\nDo not use this method.\n\nRequired\n\n- zone\nZones are deprecated and ignored by most classes that have it as a parameter.\n\nRequired"
  },
  {
    "title": "instancesRespondToSelector: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418555-instancesrespondtoselector",
    "html": "Parameters\naSelector\n\nA Selector.\n\nReturn Value\n\nYES if instances of the receiver are capable of responding to aSelector messages, otherwise NO.\n\nDiscussion\n\nIf aSelector messages are forwarded to other objects, instances of the class are able to receive those messages without error even though this method returns NO.\n\nTo ask the class whether it, rather than its instances, can respond to a particular message, send to the class instead the NSObject protocol instance method respondsToSelector:.\n\nSee Also\nRelated Documentation\n- forwardInvocation:\nOverridden by subclasses to forward messages to other objects."
  },
  {
    "title": "methodForSelector: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418863-methodforselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method for which to return the implementation address. The selector must be a valid and non-NULL. If in doubt, use the respondsToSelector: method to check before passing the selector to methodForSelector:.\n\nReturn Value\n\nThe address of the receiver’s implementation of the aSelector.\n\nDiscussion\n\nIf the receiver is an instance, aSelector should refer to an instance method; if the receiver is a class, it should refer to a class method.\n\nSee Also\nObtaining Information About Methods\n+ instanceMethodForSelector:\nLocates and returns the address of the implementation of the instance method identified by a given selector.\n+ instanceMethodSignatureForSelector:\nReturns an NSMethodSignature object that contains a description of the instance method identified by a given selector.\n- methodSignatureForSelector:\nReturns an NSMethodSignature object that contains a description of the method identified by a given selector."
  },
  {
    "title": "performSelector:withObject:withObject: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418667-performselector",
    "html": "Required\n\nParameters\naSelector\n\nA selector identifying the message to send. If aSelector is NULL, an NSInvalidArgumentException is raised.\n\nanObject\n\nAn object that is the first argument of the message.\n\nanotherObject\n\nAn object that is the second argument of the message\n\nReturn Value\n\nAn object that is the result of the message.\n\nDiscussion\n\nThis method is the same as performSelector: except that you can supply two arguments for aSelector. aSelector should identify a method that can take two arguments of type id. For methods with other argument types and return values, use NSInvocation.\n\nSee Also\nSending Messages\n- performSelector:\nSends a specified message to the receiver and returns the result of the message.\n\nRequired\n\n- performSelector:withObject:\nSends a message to the receiver with an object as the argument.\n\nRequired\n\nRelated Documentation\n- methodForSelector:\nLocates and returns the address of the receiver’s implementation of a method so it can be called as a function."
  },
  {
    "title": "new | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1571948-new",
    "html": "Return Value\n\nA new instance of the receiver.\n\nDiscussion\n\nThis method is a combination of alloc and init. Like alloc, it initializes the isa instance variable of the new object so it points to the class data structure. It then invokes the init method to complete the initialization process.\n\nSee Also\nCreating, Copying, and Deallocating Objects\n+ alloc\nReturns a new instance of the receiving class.\n+ allocWithZone:\nReturns a new instance of the receiving class.\n- init\nImplemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.\n- copy\nReturns the object returned by copyWithZone:.\n+ copyWithZone:\nReturns the receiver.\n- mutableCopy\nReturns the object returned by mutableCopyWithZone: where the zone is nil.\n+ mutableCopyWithZone:\nReturns the receiver.\n- dealloc\nDeallocates the memory occupied by the receiver."
  },
  {
    "title": "methodSignatureForSelector: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1571960-methodsignatureforselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method for which to return the implementation address. When the receiver is an instance, aSelector should identify an instance method; when the receiver is a class, it should identify a class method.\n\nReturn Value\n\nAn NSMethodSignature object that contains a description of the method identified by aSelector, or nil if the method can’t be found.\n\nDiscussion\n\nThis method is used in the implementation of protocols. This method is also used in situations where an NSInvocation object must be created, such as during message forwarding. If your object maintains a delegate or is capable of handling messages that it does not directly implement, you should override this method to return an appropriate method signature.\n\nSee Also\nObtaining Information About Methods\n- methodForSelector:\nLocates and returns the address of the receiver’s implementation of a method so it can be called as a function.\n+ instanceMethodForSelector:\nLocates and returns the address of the implementation of the instance method identified by a given selector.\n+ instanceMethodSignatureForSelector:\nReturns an NSMethodSignature object that contains a description of the instance method identified by a given selector.\nRelated Documentation\n- forwardInvocation:\nOverridden by subclasses to forward messages to other objects."
  },
  {
    "title": "isKind(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418511-iskind",
    "html": "Required\n\nParameters\naClass\n\nA class object representing the Objective-C class to be tested.\n\nReturn Value\n\ntrue if the receiver is an instance of aClass or an instance of any class that inherits from aClass, otherwise false.\n\nDiscussion\n\nFor example, in this code, isKind(of:) would return true because, in Foundation, the NSArchiver class inherits from NSCoder:\n\nNSMutableData *myData = [NSMutableData dataWithCapacity:30];\nid anArchiver = [[NSArchiver alloc] initForWritingWithMutableData:myData];\nif ( [anArchiver isKindOfClass:[NSCoder class]] )\n    ...\n\n\nBe careful when using this method on objects represented by a class cluster. Because of the nature of class clusters, the object you get back may not always be the type you expected. If you call a method that returns a class cluster, the exact type returned by the method is the best indicator of what you can do with that object. For example, if a method returns a pointer to an NSArray object, you should not use this method to see if the array is mutable, as shown in the following code:\n\n// DO NOT DO THIS!\nif ([myArray isKindOfClass:[NSMutableArray class]])\n{\n    // Modify the object\n}\n\n\nIf you use such constructs in your code, you might think it is alright to modify an object that in reality should not be modified. Doing so might then create problems for other code that expected the object to remain unchanged.\n\nIf the receiver is a class object, this method returns true if aClass is a Class object of the same type, false otherwise.\n\nSee Also\nTesting Object Inheritance, Behavior, and Conformance\nfunc isMember(of: AnyClass) -> Bool\nReturns a Boolean value that indicates whether the receiver is an instance of a given class.\n\nRequired\n\nfunc responds(to: Selector!) -> Bool\nReturns a Boolean value that indicates whether the receiver implements or inherits a method that can respond to a specified message.\n\nRequired\n\nfunc conforms(to: Protocol) -> Bool\nReturns a Boolean value that indicates whether the receiver conforms to a given protocol.\n\nRequired"
  },
  {
    "title": "conformsToProtocol: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418515-conformstoprotocol",
    "html": "Required\n\nParameters\naProtocol\n\nA protocol object that represents a particular protocol.\n\nReturn Value\n\nYES if the receiver conforms to aProtocol, otherwise NO.\n\nDiscussion\n\nThis method works identically to the conformsToProtocol: class method declared in NSObject. It’s provided as a convenience so that you don’t need to get the class object to find out whether an instance can respond to a given set of messages.\n\nSee Also\nTesting Object Inheritance, Behavior, and Conformance\n- isKindOfClass:\nReturns a Boolean value that indicates whether the receiver is an instance of given class or an instance of any class that inherits from that class.\n\nRequired\n\n- isMemberOfClass:\nReturns a Boolean value that indicates whether the receiver is an instance of a given class.\n\nRequired\n\n- respondsToSelector:\nReturns a Boolean value that indicates whether the receiver implements or inherits a method that can respond to a specified message.\n\nRequired"
  },
  {
    "title": "isMemberOfClass: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418766-ismemberofclass",
    "html": "Required\n\nParameters\naClass\n\nA class object representing the Objective-C class to be tested.\n\nReturn Value\n\nYES if the receiver is an instance of aClass, otherwise NO.\n\nDiscussion\n\nFor example, in this code, isMemberOfClass: would return NO:\n\nNSMutableData *myData = [NSMutableData dataWithCapacity:30];\nid anArchiver = [[NSArchiver alloc] initForWritingWithMutableData:myData];\nif ([anArchiver isMemberOfClass:[NSCoder class]])\n    ...\n\n\nClass objects may be compiler-created objects but they still support the concept of membership. Thus, you can use this method to verify that the receiver is a specific Class object.\n\nSee Also\nTesting Object Inheritance, Behavior, and Conformance\n- isKindOfClass:\nReturns a Boolean value that indicates whether the receiver is an instance of given class or an instance of any class that inherits from that class.\n\nRequired\n\n- respondsToSelector:\nReturns a Boolean value that indicates whether the receiver implements or inherits a method that can respond to a specified message.\n\nRequired\n\n- conformsToProtocol:\nReturns a Boolean value that indicates whether the receiver conforms to a given protocol.\n\nRequired"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418746-description",
    "html": "Required\n\nReturn Value\n\nA string that describes the object.\n\nSee Also\nDescribing Objects\ndebugDescription\nA textual representation of the receiver to use with a debugger."
  },
  {
    "title": "objc_cache | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/objc_cache",
    "html": "Overview\n\nTo limit the need to perform linear searches of method lists for the definitions of frequently accessed methods—an operation that can considerably slow down method lookup—the Objective-C runtime functions store pointers to the definitions of the most recently called method of the class in an objc_cache data structure.\n\nTopics\nFields\nmask\nAn integer specifying the total number of allocated cache buckets (minus one). During method lookup, the Objective-C runtime uses this field to determine the index at which to begin a linear search of the buckets array. A pointer to a method’s selector is masked against this field using a logical AND operation (index = (mask & selector)). This serves as a simple hashing algorithm.\noccupied\nAn integer specifying the total number of occupied cache buckets.\nbuckets\nAn array of pointers to Method data structures. This array may contain no more than mask + 1 items. Note that pointers may be NULL, indicating that the cache bucket is unoccupied, and occupied buckets may not be contiguous. This array may grow over time.\nSee Also\nClass-Definition Data Structures\nClass\nAn opaque type that represents an Objective-C class.\nMethod\nAn opaque type that represents a method in a class definition.\nIvar\nAn opaque type that represents an instance variable.\nCategory\nAn opaque type that represents a category.\nobjc_property_t\nAn opaque type that represents an Objective-C declared property.\nIMP\nA pointer to the start of a method implementation.\nSEL\nDefines an opaque type that represents a method selector.\nobjc_method_description\nDefines an Objective-C method.\nobjc_property_attribute_t\nDefines a property attribute."
  },
  {
    "title": "Null Values | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/null_values",
    "html": "Topics\nConstants\nnil\nDefines the id of a null instance.\nNil\nDefines the id of a null class."
  },
  {
    "title": "Objective-C Root Class | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/objective-c_root_class",
    "html": "Topics\nConstants\nOBJC_ROOT_CLASS\nIf you define an Objective-C root class, you receive a compiler error indicating that the class is defined without specifying a base class. You can avoid this compiler error by preceding the definition of the root class (that is, before the @interface directive) with OBJC_ROOT_CLASS."
  },
  {
    "title": "retain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1571946-retain",
    "html": "Required\n\nReturn Value\n\nself.\n\nDiscussion\n\nYou send an object a retain message when you want to prevent it from being deallocated until you have finished using it.\n\nAn object is deallocated automatically when its reference count reaches 0. retain messages increment the reference count, and release messages decrement it. For more information on this mechanism, see Advanced Memory Management Programming Guide.\n\nAs a convenience, retain returns self because it may be used in nested expressions.\n\nYou would implement this method only if you were defining your own reference-counting scheme. Such implementations must return self and should not invoke the inherited method by sending a retain message to super.\n\nSpecial Considerations\n\nInstead of using manual reference counting, you should adopt ARC—see Transitioning to ARC Release Notes.\n\nSee Also\nObsolete Methods\n- release\nDecrements the receiver’s reference count.\n\nRequired\n\n- autorelease\nDecrements the receiver’s retain count at the end of the current autorelease pool block.\n\nRequired\n\n- retainCount\nDo not use this method.\n\nRequired\n\n- zone\nZones are deprecated and ignored by most classes that have it as a parameter.\n\nRequired"
  },
  {
    "title": "accessibilitySetValue(_:forAttribute:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1528477-accessibilitysetvalue",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nParameters\nvalue\n\nThe attribute value to be set.\n\nattribute\n\nThe name of the attribute. See Constants for lists of attribute names.\n\nDiscussion\n\nUser interface classes must implement this method if any of its attributes are settable. Subclasses should invoke the superclass's implementation, if it exists, if attribute is not implemented in the subclass.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated"
  },
  {
    "title": "awakeAfterUsingCoder: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417074-awakeafterusingcoder",
    "html": "Parameters\naDecoder\n\nThe decoder used to decode the receiver.\n\nReturn Value\n\nThe receiver, or another object to take the place of the object that was decoded and subsequently received this message.\n\nDiscussion\n\nYou can use this method to eliminate redundant objects created by the coder. For example, if after decoding an object you discover that an equivalent object already exists, you can return the existing object. If a replacement is returned, your overriding method is responsible for releasing the receiver.\n\nThis method is invoked by NSCoder. NSObject’s implementation simply returns self.\n\nSee Also\nArchiving\nclassForArchiver\nThe class to substitute for the receiver's own class during archiving.\nclassForCoder\nOverridden by subclasses to substitute a class other than its own during coding.\nclassForKeyedArchiver\nSubclasses to substitute a new class for instances during keyed archiving.\n+ classFallbacksForKeyedArchiver\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\n+ classForKeyedUnarchiver\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nclassForPortCoder\nClass to substitute for the receiver in distribution encoding.\nDeprecated\n- replacementObjectForArchiver:\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\n- replacementObjectForCoder:\nOverridden by subclasses to substitute another object for itself during encoding.\n- replacementObjectForKeyedArchiver:\nOverridden by subclasses to substitute another object for itself during keyed archiving.\n+ setVersion:\nSets the receiver's version number.\n+ version\nReturns the version number assigned to the class.\nRelated Documentation\n- initWithCoder:\nReturns an object initialized from data in a given unarchiver."
  },
  {
    "title": "classForPortCoder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1580076-classforportcoder",
    "html": "Discussion\n\nThis property allows specialized behavior for distributed objects—override classForCoder to add general coding behavior.\n\nSee Also\nArchiving\n- awakeAfterUsingCoder:\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nclassForArchiver\nThe class to substitute for the receiver's own class during archiving.\nclassForCoder\nOverridden by subclasses to substitute a class other than its own during coding.\nclassForKeyedArchiver\nSubclasses to substitute a new class for instances during keyed archiving.\n+ classFallbacksForKeyedArchiver\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\n+ classForKeyedUnarchiver\nOverridden by subclasses to substitute a new class during keyed unarchiving.\n- replacementObjectForArchiver:\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\n- replacementObjectForCoder:\nOverridden by subclasses to substitute another object for itself during encoding.\n- replacementObjectForKeyedArchiver:\nOverridden by subclasses to substitute another object for itself during keyed archiving.\n+ setVersion:\nSets the receiver's version number.\n+ version\nReturns the version number assigned to the class.\nRelated Documentation\n- replacementObjectForPortCoder:\nOverridden by subclasses to substitute another object or a copy for itself during distribution encoding."
  },
  {
    "title": "replacementObjectForCoder: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416843-replacementobjectforcoder",
    "html": "Parameters\naCoder\n\nThe coder encoding the receiver.\n\nReturn Value\n\nThe object encode instead of the receiver (if different).\n\nDiscussion\n\nAn object might encode itself into an archive, but encode a proxy for itself if it’s being encoded for distribution. This method is invoked by NSCoder. NSObject’s implementation returns self.\n\nSee Also\nArchiving\n- awakeAfterUsingCoder:\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nclassForArchiver\nThe class to substitute for the receiver's own class during archiving.\nclassForCoder\nOverridden by subclasses to substitute a class other than its own during coding.\nclassForKeyedArchiver\nSubclasses to substitute a new class for instances during keyed archiving.\n+ classFallbacksForKeyedArchiver\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\n+ classForKeyedUnarchiver\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nclassForPortCoder\nClass to substitute for the receiver in distribution encoding.\nDeprecated\n- replacementObjectForArchiver:\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\n- replacementObjectForKeyedArchiver:\nOverridden by subclasses to substitute another object for itself during keyed archiving.\n+ setVersion:\nSets the receiver's version number.\n+ version\nReturns the version number assigned to the class."
  },
  {
    "title": "inverseForRelationshipKey: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411046-inverseforrelationshipkey",
    "html": "Parameters\nrelationshipKey\n\nThe name of the relationship from the receiver’s class to another class.\n\nReturn Value\n\nThe name of the relationship that is the inverse of the receiver's relationship named relationshipKey.\n\nDiscussion\n\nNSObject’s implementation of inverseForRelationshipKey: simply invokes [[self classDescription] inverseForRelationshipKey:relationshipKey]. To make use of the default implementation, you must therefore implement and register a suitable class description—see NSClassDescription.\n\nFor example, suppose an Employee class has a relationship named department to a Department class, and that Department has a relationship called employees to Employee. The statement:\n\nemployee inverseForRelationshipKey:@\"department\"];\n\n\nreturns the string employees.\n\nSee Also\nWorking with Class Descriptions\nattributeKeys\nAn array of NSString objects containing the names of immutable values that instances of the receiver's class contain.\nclassDescription\nAn object containing information about the attributes and relationships of the receiver’s class.\ntoManyRelationshipKeys\nAn array containing the keys for the to-many relationship properties of the receiver.\ntoOneRelationshipKeys\nThe keys for the to-one relationship properties of the receiver, if any."
  },
  {
    "title": "replacementObjectForArchiver: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1409971-replacementobjectforarchiver",
    "html": "Parameters\nanArchiver\n\nThe archiver creating an archive.\n\nReturn Value\n\nThe object to substitute for the receiver during archiving.\n\nDiscussion\n\nThis method is invoked by NSArchiver. NSObject’s implementation returns the object returned by replacementObjectForCoder:.\n\nSee Also\nArchiving\n- awakeAfterUsingCoder:\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nclassForArchiver\nThe class to substitute for the receiver's own class during archiving.\nclassForCoder\nOverridden by subclasses to substitute a class other than its own during coding.\nclassForKeyedArchiver\nSubclasses to substitute a new class for instances during keyed archiving.\n+ classFallbacksForKeyedArchiver\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\n+ classForKeyedUnarchiver\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nclassForPortCoder\nClass to substitute for the receiver in distribution encoding.\nDeprecated\n- replacementObjectForCoder:\nOverridden by subclasses to substitute another object for itself during encoding.\n- replacementObjectForKeyedArchiver:\nOverridden by subclasses to substitute another object for itself during keyed archiving.\n+ setVersion:\nSets the receiver's version number.\n+ version\nReturns the version number assigned to the class."
  },
  {
    "title": "cancelPreviousPerformRequestsWithTarget: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417611-cancelpreviousperformrequestswit",
    "html": "Parameters\naTarget\n\nThe target for requests previously registered with the performSelector:withObject:afterDelay: instance method.\n\nDiscussion\n\nAll perform requests having the same target aTarget are canceled. This method removes perform requests only in the current run loop, not all run loops.\n\nSee Also\nSending Messages\n- performSelector:withObject:afterDelay:\nInvokes a method of the receiver on the current thread using the default mode after a delay.\n- performSelector:withObject:afterDelay:inModes:\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\n- performSelectorOnMainThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the main thread using the default mode.\n- performSelectorOnMainThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the main thread using the specified modes.\n- performSelector:onThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the specified thread using the default mode.\n- performSelector:onThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the specified thread using the specified modes.\n- performSelectorInBackground:withObject:\nInvokes a method of the receiver on a new background thread.\n+ cancelPreviousPerformRequestsWithTarget:selector:object:\nCancels perform requests previously registered with performSelector:withObject:afterDelay:."
  },
  {
    "title": "cancelPreviousPerformRequestsWithTarget:selector:object: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1410849-cancelpreviousperformrequestswit",
    "html": "Parameters\naTarget\n\nThe target for requests previously registered with the performSelector:withObject:afterDelay: instance method\n\naSelector\n\nThe Selector for requests previously registered with the performSelector:withObject:afterDelay: instance method.\n\nanArgument\n\nThe argument for requests previously registered with the performSelector:withObject:afterDelay: instance method. Argument equality is determined using isEqual:, so the value need not be the same object that was passed originally. Pass nil to match a request for nil that was originally passed as the argument.\n\nDiscussion\n\nAll perform requests are canceled that have the same target as aTarget, argument as anArgument, and selector as aSelector. This method removes perform requests only in the current run loop, not all run loops.\n\nSee Also\nSending Messages\n- performSelector:withObject:afterDelay:\nInvokes a method of the receiver on the current thread using the default mode after a delay.\n- performSelector:withObject:afterDelay:inModes:\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\n- performSelectorOnMainThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the main thread using the default mode.\n- performSelectorOnMainThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the main thread using the specified modes.\n- performSelector:onThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the specified thread using the default mode.\n- performSelector:onThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the specified thread using the specified modes.\n- performSelectorInBackground:withObject:\nInvokes a method of the receiver on a new background thread.\n+ cancelPreviousPerformRequestsWithTarget:\nCancels perform requests previously registered with the performSelector:withObject:afterDelay: instance method."
  },
  {
    "title": "replacementObjectForKeyedArchiver: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417663-replacementobjectforkeyedarchive",
    "html": "Parameters\narchiver\n\nA keyed archiver creating an archive.\n\nReturn Value\n\nThe object encode instead of the receiver (if different).\n\nDiscussion\n\nThis method is called only if no replacement mapping for the object has been set up in the encoder (for example, due to a previous call of replacementObjectForKeyedArchiver: to that object).\n\nSee Also\nArchiving\n- awakeAfterUsingCoder:\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nclassForArchiver\nThe class to substitute for the receiver's own class during archiving.\nclassForCoder\nOverridden by subclasses to substitute a class other than its own during coding.\nclassForKeyedArchiver\nSubclasses to substitute a new class for instances during keyed archiving.\n+ classFallbacksForKeyedArchiver\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\n+ classForKeyedUnarchiver\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nclassForPortCoder\nClass to substitute for the receiver in distribution encoding.\nDeprecated\n- replacementObjectForArchiver:\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\n- replacementObjectForCoder:\nOverridden by subclasses to substitute another object for itself during encoding.\n+ setVersion:\nSets the receiver's version number.\n+ version\nReturns the version number assigned to the class."
  },
  {
    "title": "performSelectorInBackground:withObject: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1412390-performselectorinbackground",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\narg\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\nDiscussion\n\nThis method creates a new thread in your application, putting your application into multithreaded mode if it was not already. The method represented by aSelector must set up the thread environment just as you would for any other new thread in your program. For more information about how to configure and run threads, see Threading Programming Guide.\n\nSee Also\nSending Messages\n- performSelector:withObject:afterDelay:\nInvokes a method of the receiver on the current thread using the default mode after a delay.\n- performSelector:withObject:afterDelay:inModes:\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\n- performSelectorOnMainThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the main thread using the default mode.\n- performSelectorOnMainThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the main thread using the specified modes.\n- performSelector:onThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the specified thread using the default mode.\n- performSelector:onThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the specified thread using the specified modes.\n+ cancelPreviousPerformRequestsWithTarget:\nCancels perform requests previously registered with the performSelector:withObject:afterDelay: instance method.\n+ cancelPreviousPerformRequestsWithTarget:selector:object:\nCancels perform requests previously registered with performSelector:withObject:afterDelay:."
  },
  {
    "title": "forwardingTargetForSelector: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418855-forwardingtargetforselector",
    "html": "Parameters\naSelector\n\nA Selector for a method that the receiver does not implement.\n\nReturn Value\n\nThe object to which unrecognized messages should first be directed.\n\nDiscussion\n\nIf an object implements (or inherits) this method, and returns a non-nil (and non-self) result, that returned object is used as the new receiver object and the message dispatch resumes to that new object. (Obviously if you return self from this method, the code would just fall into an infinite loop.)\n\nIf you implement this method in a non-root class, if your class has nothing to return for the given selector then you should return the result of invoking super’s implementation.\n\nThis method gives an object a chance to redirect an unknown message sent to it before the much more expensive forwardInvocation: machinery takes over. This is useful when you simply want to redirect messages to another object and can be an order of magnitude faster than regular forwarding. It is not useful where the goal of the forwarding is to capture the NSInvocation, or manipulate the arguments or return value during the forwarding.\n\nSee Also\nForwarding Messages\n- forwardInvocation:\nOverridden by subclasses to forward messages to other objects."
  },
  {
    "title": "performSelector:withObject:afterDelay: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416176-performselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\nanArgument\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\ndelay\n\nThe minimum time before which the message is sent. Specifying a delay of 0 does not necessarily cause the selector to be performed immediately. The selector is still queued on the thread’s run loop and performed as soon as possible.\n\nDiscussion\n\nThis method sets up a timer to perform the aSelector message on the current thread’s run loop. The timer is configured to run in the default mode (NSDefaultRunLoopMode). When the timer fires, the thread attempts to dequeue the message from the run loop and perform the selector. It succeeds if the run loop is running and in the default mode; otherwise, the timer waits until the run loop is in the default mode.\n\nIf you want the message to be dequeued when the run loop is in a mode other than the default mode, use the performSelector:withObject:afterDelay:inModes: method instead. If you are not sure whether the current thread is the main thread, you can use the performSelectorOnMainThread:withObject:waitUntilDone: or performSelectorOnMainThread:withObject:waitUntilDone:modes: method to guarantee that your selector executes on the main thread. To cancel a queued message, use the cancelPreviousPerformRequestsWithTarget: or cancelPreviousPerformRequestsWithTarget:selector:object: method.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after and related methods to get the behavior you want.\n\nSee Also\nSending Messages\n- performSelector:withObject:afterDelay:inModes:\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\n- performSelectorOnMainThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the main thread using the default mode.\n- performSelectorOnMainThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the main thread using the specified modes.\n- performSelector:onThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the specified thread using the default mode.\n- performSelector:onThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the specified thread using the specified modes.\n- performSelectorInBackground:withObject:\nInvokes a method of the receiver on a new background thread.\n+ cancelPreviousPerformRequestsWithTarget:\nCancels perform requests previously registered with the performSelector:withObject:afterDelay: instance method.\n+ cancelPreviousPerformRequestsWithTarget:selector:object:\nCancels perform requests previously registered with performSelector:withObject:afterDelay:."
  },
  {
    "title": "webPlugInStart() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1536197-webpluginstart",
    "html": "Discussion\n\nThe plug-in usually begins its primary task (such as drawing, playing sounds, or animating) in this method. This method may be called more than once, provided that the application has already called webPlugInInitialize() and that each call to this method is followed later by a call to webPlugInStop().\n\nSee Also\nControlling the Plug-in\nfunc webPlugInDestroy()\nPrepares the plug-in for deallocation.\nfunc webPlugInInitialize()\nInitializes the plug-in.\nfunc webPlugInStop()\nTells the plug-in to stop normal operation."
  },
  {
    "title": "options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/keyvalueobservingpublisher/3340177-options",
    "html": "See Also\nInspecting KVO Publisher Properties\nlet object: Subject\nThe object that contains the property to publish.\nlet keyPath: KeyPath<Subject, Value>\nThe key path, relative to the object receiving this message, of the property to publish."
  },
  {
    "title": "IMP | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/imp",
    "html": "Overview\n\nThis data type is a pointer to the start of the function that implements the method. This function uses standard C calling conventions as implemented for the current CPU architecture. The first argument is a pointer to self (that is, the memory for the particular instance of this class, or, for a class method, a pointer to the metaclass). The second argument is the method selector. The method arguments follow.\n\nSee Also\nClass-Definition Data Structures\nClass\nAn opaque type that represents an Objective-C class.\nMethod\nAn opaque type that represents a method in a class definition.\nIvar\nAn opaque type that represents an instance variable.\nCategory\nAn opaque type that represents a category.\nobjc_property_t\nAn opaque type that represents an Objective-C declared property.\nSEL\nDefines an opaque type that represents a method selector.\nobjc_method_description\nDefines an Objective-C method.\nobjc_cache\nPerformance optimization for method calls. Contains pointers to recently used methods.\nobjc_property_attribute_t\nDefines a property attribute."
  },
  {
    "title": "instanceMethodSignatureForSelector: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1571959-instancemethodsignatureforselect",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method for which to return the implementation address.\n\nReturn Value\n\nAn NSMethodSignature object that contains a description of the instance method identified by aSelector, or nil if the method can’t be found.\n\nSee Also\nObtaining Information About Methods\n- methodForSelector:\nLocates and returns the address of the receiver’s implementation of a method so it can be called as a function.\n+ instanceMethodForSelector:\nLocates and returns the address of the implementation of the instance method identified by a given selector.\n- methodSignatureForSelector:\nReturns an NSMethodSignature object that contains a description of the method identified by a given selector."
  },
  {
    "title": "dealloc | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1571947-dealloc",
    "html": "Discussion\n\nSubsequent messages to the receiver may generate an error indicating that a message was sent to a deallocated object (provided the deallocated memory hasn’t been reused yet).\n\nYou override this method to dispose of resources other than the object’s instance variables, for example:\n\n- (void)dealloc {\n    free(myBigBlockOfMemory);\n}\n\n\nIn an implementation of dealloc, do not invoke the superclass’s implementation. You should try to avoid managing the lifetime of limited resources such as file descriptors using dealloc.\n\nYou never send a dealloc message directly. Instead, an object’s dealloc method is invoked by the runtime. See Advanced Memory Management Programming Guide for more details.\n\nSpecial Considerations\n\nWhen not using ARC, your implementation of dealloc must invoke the superclass’s implementation as its last instruction.\n\nSee Also\nCreating, Copying, and Deallocating Objects\n+ alloc\nReturns a new instance of the receiving class.\n+ allocWithZone:\nReturns a new instance of the receiving class.\n- init\nImplemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.\n- copy\nReturns the object returned by copyWithZone:.\n+ copyWithZone:\nReturns the receiver.\n- mutableCopy\nReturns the object returned by mutableCopyWithZone: where the zone is nil.\n+ mutableCopyWithZone:\nReturns the receiver.\n+ new\nAllocates a new instance of the receiving class, sends it an init message, and returns the initialized object."
  },
  {
    "title": "mutableCopyWithZone: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1571956-mutablecopywithzone",
    "html": "Parameters\nzone\n\nThe memory zone in which to create the copy of the receiver.\n\nReturn Value\n\nThe receiver.\n\nDiscussion\n\nThis method exists so class objects can be used in situations where you need an object that conforms to the NSMutableCopying protocol. For example, this method lets you use a class object as a key to an NSDictionary object. You should not override this method.\n\nSee Also\nCreating, Copying, and Deallocating Objects\n+ alloc\nReturns a new instance of the receiving class.\n+ allocWithZone:\nReturns a new instance of the receiving class.\n- init\nImplemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.\n- copy\nReturns the object returned by copyWithZone:.\n+ copyWithZone:\nReturns the receiver.\n- mutableCopy\nReturns the object returned by mutableCopyWithZone: where the zone is nil.\n- dealloc\nDeallocates the memory occupied by the receiver.\n+ new\nAllocates a new instance of the receiving class, sends it an init message, and returns the initialized object."
  },
  {
    "title": "NSUndefinedKeyException userInfo Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nskeyvaluecoding/nsundefinedkeyexception_userinfo_keys",
    "html": "Overview\n\nFor additional information see Key Value Coding Exception Names.\n\nTopics\nConstants\nNSTargetObjectUserInfoKey\nNSUnknownUserInfoKey"
  },
  {
    "title": "instanceMethodForSelector: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418713-instancemethodforselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method for which to return the implementation address. The selector must be non-NULL and valid for the receiver. If in doubt, use the respondsToSelector: method to check before passing the selector to methodForSelector:.\n\nReturn Value\n\nThe address of the implementation of the aSelector instance method.\n\nDiscussion\n\nAn error is generated if instances of the receiver can’t respond to aSelector messages.\n\nUse this method to ask the class object for the implementation of instance methods only. To ask the class for the implementation of a class method, send the methodForSelector: instance method to the class instead.\n\nSee Also\nObtaining Information About Methods\n- methodForSelector:\nLocates and returns the address of the receiver’s implementation of a method so it can be called as a function.\n+ instanceMethodSignatureForSelector:\nReturns an NSMethodSignature object that contains a description of the instance method identified by a given selector.\n- methodSignatureForSelector:\nReturns an NSMethodSignature object that contains a description of the method identified by a given selector."
  },
  {
    "title": "copyWithZone: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1571953-copywithzone",
    "html": "Parameters\nzone\n\nThis argument is ignored.\n\nReturn Value\n\nThe receiver.\n\nDiscussion\n\nThis method exists so class objects can be used in situations where you need an object that conforms to the NSCopying protocol. For example, this method lets you use a class object as a key to an NSDictionary object. You should not override this method.\n\nSee Also\nCreating, Copying, and Deallocating Objects\n+ alloc\nReturns a new instance of the receiving class.\n+ allocWithZone:\nReturns a new instance of the receiving class.\n- init\nImplemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.\n- copy\nReturns the object returned by copyWithZone:.\n- mutableCopy\nReturns the object returned by mutableCopyWithZone: where the zone is nil.\n+ mutableCopyWithZone:\nReturns the receiver.\n- dealloc\nDeallocates the memory occupied by the receiver.\n+ new\nAllocates a new instance of the receiving class, sends it an init message, and returns the initialized object."
  },
  {
    "title": "conformsToProtocol: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418893-conformstoprotocol",
    "html": "Parameters\nprotocol\n\nA protocol.\n\nReturn Value\n\nYES if the target conforms to protocol, otherwise NO.\n\nDiscussion\n\nA class “conforms to” a protocol if it adopts the protocol or inherits from another class that adopts it. Classes adopt protocols by listing them within angle brackets after the interface declaration. For example, here MyClass adopts the (fictitious) AffiliationRequests and Normalization protocols:\n\n@interface MyClass : NSObject <AffiliationRequests, Normalization>\n\n\nA class also conforms to any protocols included in the protocols it adopts or inherits. Protocols incorporate other protocols in the same way classes adopt them. For example, here the AffiliationRequests protocol incorporates the Joining protocol:\n\n@protocol AffiliationRequests <Joining>\n\n\nIf a class adopts a protocol that incorporates another protocol, it must also implement all the methods in the incorporated protocol or inherit those methods from a class that adopts it.\n\nThis method determines conformance solely on the basis of the formal declarations in header files, as illustrated above. It doesn’t check to see whether the methods declared in the protocol are actually implemented—that’s the programmer’s responsibility.\n\nTo specify the protocol required as this method’s argument, use the @protocol() directive:\n\nBOOL canJoin = [MyClass conformsToProtocol:@protocol(Joining)];\n\n\nPerformance Considerations\n\nCalling this method in performance sensitive code can cause unwanted performance problems. conformsToProtocol: requires taking the Objective-C runtime lock and traversing the target’s class hierarchy to check for protocol conformance, which can take significant time.\n\nConsider the following alternatives in your code:\n\nUse respondsToSelector: to check for methods in the protocol instead, especially if you only need to check some of the protocol’s methods.\n\nIf you do need to use conformsToProtocol:, cache the result whenever possible, rather than calling this method repeatedly."
  },
  {
    "title": "objc_constructInstance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1441663-objc_constructinstance",
    "html": "Parameters\ncls\n\nThe class that you want to allocate an instance of.\n\nbytes\n\nThe location at which to allocate an instance of the cls class. bytes must point to at least class_getInstanceSize(cls) bytes of well-aligned, zero-filled memory.\n\nReturn Value\n\nAn instance of the class cls at bytes, if successful; otherwise nil (for example, if cls or bytes are themselves nil).\n\nSee Also\nInstantiating Classes\nclass_createInstance\nCreates an instance of a class, allocating memory for the class in the default malloc memory zone.\nobjc_destructInstance\nDestroys an instance of a class without freeing memory and removes any of its associated references."
  },
  {
    "title": "performSelector:withObject: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418764-performselector",
    "html": "Required\n\nParameters\naSelector\n\nA selector identifying the message to send. If aSelector is NULL, an NSInvalidArgumentException is raised.\n\nanObject\n\nAn object that is the sole argument of the message.\n\nReturn Value\n\nAn object that is the result of the message.\n\nDiscussion\n\nThis method is the same as performSelector: except that you can supply an argument for aSelector. aSelector should identify a method that takes a single argument of type id. For methods with other argument types and return values, use NSInvocation.\n\nSee Also\nSending Messages\n- performSelector:\nSends a specified message to the receiver and returns the result of the message.\n\nRequired\n\n- performSelector:withObject:withObject:\nSends a message to the receiver with two objects as arguments.\n\nRequired\n\nRelated Documentation\n- methodForSelector:\nLocates and returns the address of the receiver’s implementation of a method so it can be called as a function."
  },
  {
    "title": "performSelector: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418867-performselector",
    "html": "Required\n\nParameters\naSelector\n\nA selector identifying the message to send. The message should take no arguments. If aSelector is NULL, an NSInvalidArgumentException is raised.\n\nReturn Value\n\nAn object that is the result of the message.\n\nDiscussion\n\nThe performSelector: method is equivalent to sending an aSelector message directly to the receiver. For example, the following messages all do the same thing:\n\nid aClone = [anObject copy];\nid aClone = [anObject performSelector:@selector(copy)];\nid aClone = [anObject performSelector:sel_getUid(\"copy\")];\n\n\nThe performSelector: method allows you to send messages that aren’t determined until run-time. This means that you can pass a variable selector as the argument:\n\nSEL aSelector = findTheAppropriateSelectorForTheCurrentSituation();\nid returnedObject = [anObject performSelector:aSelector];\n\n\nBut use caution when doing this. Different messages require different memory management strategies for their returned objects, and it might not be obvious which to use.\n\nUsually the caller isn't responsible for the memory of a returned object, but that's not true when the selector is one of the creation methods, such as copy. See Memory Management Policy in Advanced Memory Management Programming Guide for a description of ownership expectations. Depending on the structure of your code, it might not be clear which kind of selector you are using for any given invocation.\n\nDue to this uncertainty, the compiler generates a warning if you supply a variable selector while using ARC to manage memory. Because it can't determine ownership of the returned object at compile-time, ARC makes the assumption that the caller does not need to take ownership, but this may not be true. The compiler warning alerts you to the potential for a memory leak.\n\nTo avoid the warning, if you know that aSelector has no return value, you might be able to use performSelectorOnMainThread:withObject:waitUntilDone: or one of the related methods available in NSObject.\n\nFor a more general solution, use NSInvocation to construct a message that you can invoke with an arbitrary argument list and return value.\n\nAlternatively, consider restructuring your code to use blocks as a means of passing chunks of functionality through an API. See Blocks Programming Topics for details.\n\nSee Also\nSending Messages\n- performSelector:withObject:\nSends a message to the receiver with an object as the argument.\n\nRequired\n\n- performSelector:withObject:withObject:\nSends a message to the receiver with two objects as arguments.\n\nRequired"
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418703-debugdescription",
    "html": "Return Value\n\nA string that describes the object for debugging purposes.\n\nDiscussion\n\nThe debugger’s po command uses this property to create a textual representation of the object suitable for display in the debugger. The default implemention returns the same value as description. Override either property to provide custom object descriptions.\n\nSee Also\nDescribing Objects\ndescription\nA textual representation of the receiver.\n\nRequired"
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/iterator/3952725-next",
    "html": "Relationships\nFrom Protocol\nIteratorProtocol"
  },
  {
    "title": "ObjCClassList.Iterator.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/iterator/element",
    "html": "Relationships\nFrom Protocol\nIteratorProtocol"
  },
  {
    "title": "isKindOfClass: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418511-iskindofclass",
    "html": "Required\n\nParameters\naClass\n\nA class object representing the Objective-C class to be tested.\n\nReturn Value\n\nYES if the receiver is an instance of aClass or an instance of any class that inherits from aClass, otherwise NO.\n\nDiscussion\n\nFor example, in this code, isKindOfClass: would return YES because, in Foundation, the NSArchiver class inherits from NSCoder:\n\nNSMutableData *myData = [NSMutableData dataWithCapacity:30];\nid anArchiver = [[NSArchiver alloc] initForWritingWithMutableData:myData];\nif ( [anArchiver isKindOfClass:[NSCoder class]] )\n    ...\n\n\nBe careful when using this method on objects represented by a class cluster. Because of the nature of class clusters, the object you get back may not always be the type you expected. If you call a method that returns a class cluster, the exact type returned by the method is the best indicator of what you can do with that object. For example, if a method returns a pointer to an NSArray object, you should not use this method to see if the array is mutable, as shown in the following code:\n\n// DO NOT DO THIS!\nif ([myArray isKindOfClass:[NSMutableArray class]])\n{\n    // Modify the object\n}\n\n\nIf you use such constructs in your code, you might think it is alright to modify an object that in reality should not be modified. Doing so might then create problems for other code that expected the object to remain unchanged.\n\nIf the receiver is a class object, this method returns YES if aClass is a Class object of the same type, NO otherwise.\n\nSee Also\nTesting Object Inheritance, Behavior, and Conformance\n- isMemberOfClass:\nReturns a Boolean value that indicates whether the receiver is an instance of a given class.\n\nRequired\n\n- respondsToSelector:\nReturns a Boolean value that indicates whether the receiver implements or inherits a method that can respond to a specified message.\n\nRequired\n\n- conformsToProtocol:\nReturns a Boolean value that indicates whether the receiver conforms to a given protocol.\n\nRequired"
  },
  {
    "title": "respondsToSelector: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418583-respondstoselector",
    "html": "Required\n\nParameters\naSelector\n\nA selector that identifies a message.\n\nReturn Value\n\nYES if the receiver implements or inherits a method that can respond to aSelector, otherwise NO.\n\nDiscussion\n\nThe application is responsible for determining whether a NO response should be considered an error.\n\nYou cannot test whether an object inherits a method from its superclass by sending respondsToSelector: to the object using the super keyword. This method will still be testing the object as a whole, not just the superclass’s implementation. Therefore, sending respondsToSelector: to super is equivalent to sending it to self. Instead, you must invoke the NSObject class method instancesRespondToSelector: directly on the object’s superclass, as illustrated in the following code fragment.\n\nif( [MySuperclass instancesRespondToSelector:@selector(aMethod)] ) {\n    // invoke the inherited method\n    [super aMethod];\n}\n\n\nYou cannot simply use [[self superclass] instancesRespondToSelector:@selector(aMethod)] since this may cause the method to fail if it is invoked by a subclass.\n\nNote that if the receiver is able to forward aSelector messages to another object, it will be able to respond to the message, albeit indirectly, even though this method returns NO.\n\nSee Also\nTesting Object Inheritance, Behavior, and Conformance\n- isKindOfClass:\nReturns a Boolean value that indicates whether the receiver is an instance of given class or an instance of any class that inherits from that class.\n\nRequired\n\n- isMemberOfClass:\nReturns a Boolean value that indicates whether the receiver is an instance of a given class.\n\nRequired\n\n- conformsToProtocol:\nReturns a Boolean value that indicates whether the receiver conforms to a given protocol.\n\nRequired\n\nRelated Documentation\n+ instancesRespondToSelector:\nReturns a Boolean value that indicates whether instances of the receiver are capable of responding to a given selector.\n- forwardInvocation:\nOverridden by subclasses to forward messages to other objects."
  },
  {
    "title": "performSelector:onThread:withObject:waitUntilDone: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1414476-performselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\nthread\n\nThe thread on which to execute aSelector.\n\narg\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\nwait\n\nA Boolean that specifies whether the current thread blocks until after the specified selector is performed on the receiver on the specified thread. Specify YES to block this thread; otherwise, specify NO to have this method return immediately.\n\nIf the current thread and target thread are the same, and you specify YES for this parameter, the selector is performed immediately on the current thread. If you specify NO, this method queues the message on the thread’s run loop and returns, just like it does for other threads. The current thread must then dequeue and process the message when it has an opportunity to do so.\n\nDiscussion\n\nYou can use this method to deliver messages to other threads in your application. The message in this case is a method of the current object that you want to execute on the target thread.\n\nThis method queues the message on the run loop of the target thread using the default run loop modes—that is, the modes associated with the NSRunLoopCommonModes constant. As part of its normal run loop processing, the target thread dequeues the message (assuming it is running in one of the default run loop modes) and invokes the desired method.\n\nYou cannot cancel messages queued using this method. If you want the option of canceling a message on the current thread, you must use either the performSelector:withObject:afterDelay: or performSelector:withObject:afterDelay:inModes: method.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after and related methods to get the behavior you want.\n\nSee Also\nSending Messages\n- performSelector:withObject:afterDelay:\nInvokes a method of the receiver on the current thread using the default mode after a delay.\n- performSelector:withObject:afterDelay:inModes:\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\n- performSelectorOnMainThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the main thread using the default mode.\n- performSelectorOnMainThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the main thread using the specified modes.\n- performSelector:onThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the specified thread using the specified modes.\n- performSelectorInBackground:withObject:\nInvokes a method of the receiver on a new background thread.\n+ cancelPreviousPerformRequestsWithTarget:\nCancels perform requests previously registered with the performSelector:withObject:afterDelay: instance method.\n+ cancelPreviousPerformRequestsWithTarget:selector:object:\nCancels perform requests previously registered with performSelector:withObject:afterDelay:."
  },
  {
    "title": "self | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418954-self",
    "html": "Required\n\nReturn Value\n\nThe receiver.\n\nSee Also\nIdentifying and Comparing Objects\n- isEqual:\nReturns a Boolean value that indicates whether the receiver and a given object are equal.\n\nRequired\n\nhash\nReturns an integer that can be used as a table address in a hash table structure.\n\nRequired\n\nRelated Documentation\n- class\nReturns the class object for the receiver’s class."
  },
  {
    "title": "isEqual: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418795-isequal",
    "html": "Required\n\nParameters\nobject\n\nThe object to be compared to the receiver. May be nil, in which case this method returns NO.\n\nReturn Value\n\nYES if the receiver and anObject are equal, otherwise NO.\n\nDiscussion\n\nThis method defines what it means for instances to be equal. For example, a container object might define two containers as equal if their corresponding objects all respond YES to an isEqual: request. See the NSData, NSDictionary, NSArray, and NSString class specifications for examples of the use of this method.\n\nIf two objects are equal, they must have the same hash value. This last point is particularly important if you define isEqual: in a subclass and intend to put instances of that subclass into a collection. Make sure you also define hash in your subclass.\n\nSee Also\nIdentifying and Comparing Objects\nhash\nReturns an integer that can be used as a table address in a hash table structure.\n\nRequired\n\n- self\nReturns the receiver.\n\nRequired"
  },
  {
    "title": "hash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418859-hash",
    "html": "Required\n\nReturn Value\n\nAn integer that can be used as a table address in a hash table structure.\n\nDiscussion\n\nIf two objects are equal (as determined by the isEqual: method), they must have the same hash value. This last point is particularly important if you define hash in a subclass and intend to put instances of that subclass into a collection.\n\nIf a mutable object is added to a collection that uses hash values to determine the object’s position in the collection, the value returned by the hash method of the object must not change while the object is in the collection. Therefore, either the hash method must not rely on any of the object’s internal state information or you must make sure the object’s internal state information does not change while the object is in the collection. Thus, for example, a mutable dictionary can be put in a hash table but you must not change it while it is in there. (Note that it can be difficult to know whether or not a given object is in a collection.)\n\nSee Also\nIdentifying and Comparing Objects\n- isEqual:\nReturns a Boolean value that indicates whether the receiver and a given object are equal.\n\nRequired\n\n- self\nReturns the receiver.\n\nRequired"
  },
  {
    "title": "superclass | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418793-superclass",
    "html": "Required\n\nReturn Value\n\nThe class object for the receiver’s superclass.\n\nSee Also\nIdentifying Classes\n- class\nReturns the class object for the receiver’s class.\n\nRequired\n\nRelated Documentation\n+ superclass\nReturns the class object for the receiver’s superclass."
  },
  {
    "title": "index(ofAccessibilityElement:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615078-index",
    "html": "Parameters\nelement\n\nThe accessibility element.\n\nReturn Value\n\nThe index of the specified accessibility element, or NSNotFound if the element does not exist.\n\nSee Also\nProviding information about accessibility elements\nfunc accessibilityElementCount() -> Int\nReturns the number of accessibility elements in the container.\nfunc accessibilityElement(at: Int) -> Any?\nReturns the accessibility element at the specified index.\nvar accessibilityElements: [Any]?\nAn array of the accessibility elements in the container.\nvar automationElements: [Any]?\nAn array of the automation elements in the container.\nvar accessibilityContainerType: UIAccessibilityContainerType\nThe type of container used for accessibility elements, such as tables or lists.\nenum UIAccessibilityContainerType\nConstants that indicate the type of content in a data-based container."
  },
  {
    "title": "didChangeValue(forKey:withSetMutation:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1410539-didchangevalue",
    "html": "Parameters\nkey\n\nThe name of a property that is an unordered to-many relationship\n\nmutationKind\n\nThe type of change that was made.\n\nobjects\n\nThe objects that were involved in the change (see NSKeyValueSetMutationKind).\n\nDiscussion\n\nUse this method when implementing key-value observer compliance manually. Calls to this method are always paired with a matching call to willChangeValue(forKey:withSetMutation:using:).\n\nSpecial Considerations\n\nYou rarely need to override this method in subclasses, but if you do, be sure to call super.\n\nSee Also\nNotifying Observers of Changes\nfunc willChangeValue(forKey: String)\nInforms the observed object that the value of a given property is about to change.\nfunc didChangeValue(forKey: String)\nInforms the observed object that the value of a given property has changed.\nfunc willChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change is about to be executed at given indexes for a specified ordered to-many relationship.\nfunc didChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change has occurred on the indexes for a specified ordered to-many relationship.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change is about to be made to a specified unordered to-many relationship."
  },
  {
    "title": "accessibilityDecrement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615169-accessibilitydecrement",
    "html": "Discussion\n\nIf your element has the adjustable trait, you must implement this method. Use this method to decrement the value of the element. For example, a UISlider object uses this method to decrement its value by an appropriate amount.\n\nSee Also\nPerforming an action\nfunc accessibilityActivate() -> Bool\nTells the element to activate itself and report the success or failure of the operation.\nfunc accessibilityIncrement()\nTells the accessibility element to increment the value of its content.\nfunc accessibilityScroll(UIAccessibilityScrollDirection) -> Bool\nScrolls screen content in an application-specific way and returns the success or failure of the action.\nfunc accessibilityPerformEscape() -> Bool\nDismisses a modal view and returns the success or failure of the action.\nfunc accessibilityPerformMagicTap() -> Bool\nPerforms a salient action."
  },
  {
    "title": "accessibilityPerformEscape() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615091-accessibilityperformescape",
    "html": "Return Value\n\ntrue if the modal view is successfully dismissed; otherwise, false. By default, this method returns false.\n\nDiscussion\n\nImplement this method on an element or containing view that can be revealed modally or in a hierarchy. When a VoiceOver user performs a dismiss action, this method dismisses the view. For example, you might implement this method for a popover in order to give users a deliberate dismiss action to perform that closes the popover.\n\nSee Also\nPerforming an action\nfunc accessibilityActivate() -> Bool\nTells the element to activate itself and report the success or failure of the operation.\nfunc accessibilityIncrement()\nTells the accessibility element to increment the value of its content.\nfunc accessibilityDecrement()\nTells the accessibility element to decrement the value of its content.\nfunc accessibilityScroll(UIAccessibilityScrollDirection) -> Bool\nScrolls screen content in an application-specific way and returns the success or failure of the action.\nfunc accessibilityPerformMagicTap() -> Bool\nPerforms a salient action."
  },
  {
    "title": "accessibilityPerformMagicTap() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615137-accessibilityperformmagictap",
    "html": "Return Value\n\ntrue if the magic tap action succeeds; otherwise, false. By default, this method returns false.\n\nDiscussion\n\nThe exact action performed by this method depends your app, typically toggling the most important state of the app. For example, in the Phone app it answers and ends phone calls, in the Music app it plays and pauses playback, in the Clock app it starts and stops a timer, and in the Camera app it takes a picture.\n\nSee Also\nPerforming an action\nfunc accessibilityActivate() -> Bool\nTells the element to activate itself and report the success or failure of the operation.\nfunc accessibilityIncrement()\nTells the accessibility element to increment the value of its content.\nfunc accessibilityDecrement()\nTells the accessibility element to decrement the value of its content.\nfunc accessibilityScroll(UIAccessibilityScrollDirection) -> Bool\nScrolls screen content in an application-specific way and returns the success or failure of the action.\nfunc accessibilityPerformEscape() -> Bool\nDismisses a modal view and returns the success or failure of the action."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/selector/2886915",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "accessibilityScroll(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615161-accessibilityscroll",
    "html": "Parameters\ndirection\n\nA constant that specifies the direction of the scrolling action. See UIAccessibilityScrollDirection for descriptions of valid constants.\n\nReturn Value\n\ntrue if the scrolling action succeeds; otherwise, false. By default, this method returns false.\n\nDiscussion\n\nImplement this method if a view in the view hierarchy supports a scroll by page action.\n\nIf the scrolling action succeeds for the specified direction, return true and post the pageScrolled notification.\n\nIf the scrolling action fails, accessibilityScroll: is called on a parent view in the hierarchy.\n\nSee Also\nPerforming an action\nfunc accessibilityActivate() -> Bool\nTells the element to activate itself and report the success or failure of the operation.\nfunc accessibilityIncrement()\nTells the accessibility element to increment the value of its content.\nfunc accessibilityDecrement()\nTells the accessibility element to decrement the value of its content.\nfunc accessibilityPerformEscape() -> Bool\nDismisses a modal view and returns the success or failure of the action.\nfunc accessibilityPerformMagicTap() -> Bool\nPerforms a salient action."
  },
  {
    "title": "workflowControllerDidStop(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1419770-workflowcontrollerdidstop",
    "html": "Deprecated\n\nUse workflowControllerDidStop(_:) instead.\n\nParameters\ncontroller\n\nThe workflow controller object that stopped.\n\nSee Also\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated"
  },
  {
    "title": "workflowControllerDidRun(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1419762-workflowcontrollerdidrun",
    "html": "Deprecated\n\nUse workflowControllerDidRun(_:) instead.\n\nParameters\ncontroller\n\nThe workflow controller object that finished running.\n\nSee Also\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated"
  },
  {
    "title": "workflowControllerWillStop(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1419598-workflowcontrollerwillstop",
    "html": "Deprecated\n\nUse workflowControllerWillStop(_:) instead.\n\nParameters\ncontroller\n\nThe workflow controller object to be stopped.\n\nSee Also\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated"
  },
  {
    "title": "defaultPlaceholder(for:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458203-defaultplaceholder",
    "html": "Discussion\n\nThe marker can be nil or one of the constants described in Selection Markers.\n\nSee Also\nManaging default placeholders\nclass func setDefaultPlaceholder(Any?, for: Any?, with: NSBindingName)\nSets placeholder as the default placeholder for the binding, when a key value coding compliant property of an instance of the receiving class returns the value specified by marker, and no other placeholder has been specified.\nDeprecated"
  },
  {
    "title": "useStoredAccessor() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430063-usestoredaccessor",
    "html": "Deprecated\n\nThis method has no direct replacement, although see accessInstanceVariablesDirectly.\n\nDiscussion\n\nReturning false causes the stored value methods to use the same accessor method or instance variable search order as the corresponding basic key-value coding methods (value(forKey:) and takeValue(_:forKey:)). The default implementation returns true.\n\nApplications should use the valueForKey: and setValue:forKey: methods instead of storedValueForKey: and takeStoredValue:forKey:.\n\nSee Also\nDeprecated Class Methods\nclass func defaultPlaceholder(for: Any?, with: NSBindingName) -> Any?\nReturns an object that will be used as the placeholder for the binding, when a key value coding compliant property of an instance of the receiving class returns the value specified by marker, and no other placeholder has been specified.\nDeprecated\nclass func setDefaultPlaceholder(Any?, for: Any?, with: NSBindingName)\nSets placeholder as the default placeholder for the binding, when a key value coding compliant property of an instance of the receiving class returns the value specified by marker, and no other placeholder has been specified.\nDeprecated"
  },
  {
    "title": "accessibilityAttributeValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1532465-accessibilityattributevalue",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nParameters\nattribute\n\nThe name of the attribute. See Constants for lists of attribute names.\n\nDiscussion\n\nUser interface classes must implement this method. Subclasses should invoke the superclass's implementation, if it exists, if attribute is not implemented in the subclass.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "accessibilityArrayAttributeCount(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1527138-accessibilityarrayattributecount",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nParameters\nattribute\n\nThe accessibility array attribute.\n\nReturn Value\n\nThe number of items in the specified array attribute.\n\nDiscussion\n\nIf attribute is not an array, an exception is raised.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "accessibilityParameterizedAttributeNames() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1525455-accessibilityparameterizedattrib",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nReturn Value\n\nAn array of parameterized attributes in the receiver.\n\nDiscussion\n\nIf you implement this method, also implement accessibilityAttributeValue(_:forParameter:).\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "accessibilityIsIgnored() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1526439-accessibilityisignored",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nReturn Value\n\ntrue if the receiver should be ignored; otherwise, false.\n\nDiscussion\n\nWhen asking for an object's children, do not include ignored children; instead, replace the ignored children with their own unignored children. The same applies when asking for an object's parent: skip the ignored parent and treat the first unignored ancestor as the real parent. Likewise, when a hit-test or focus test is satisfied by an ignored element, use the element's first unignored ancestor (or descendant in certain cases, such as single-celled controls) instead.\n\nIgnored elements let you provide a simplified version of the view and object ownership hierarchies. Accessibility clients can bypass intermediate objects, letting users access the real user interface objects more quickly. For example, NSControl objects are ignored when they are single-celled; the visible parent-child relationship is between the control's parent (or a higher ancestor if the parent is ignored, too) and the control's cell.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "accessibilityIndex(ofChild:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1533558-accessibilityindex",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nParameters\nchild\n\nThe accessibility child of an object.\n\nReturn Value\n\nThe index of the accessibility child object in the parent. Returns NSNotFound if the child does not exist.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "accessibilityPerformAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1533528-accessibilityperformaction",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nParameters\naction\n\nThe action to perform.\n\nDiscussion\n\nUser interface classes must implement this method to handle all the actions returned from accessibilityActionNames(). Subclasses should invoke the superclass's implementation, if it exists, if action is not implemented in the subclass.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "dictionaryWithValues(forKeys:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411319-dictionarywithvalues",
    "html": "Parameters\nkeys\n\nAn array containing NSString objects that identify properties of the receiver.\n\nReturn Value\n\nA dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\n\nDiscussion\n\nThe default implementation invokes value(forKey:) for each key in keys and substitutes NSNull values in the dictionary for returned nil values.\n\nSee Also\nGetting Values\nfunc value(forKey: String) -> Any?\nReturns the value for the property identified by a given key.\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path.\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to a given key.\nfunc mutableArrayValue(forKey: String) -> NSMutableArray\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\nfunc mutableArrayValue(forKeyPath: String) -> NSMutableArray\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\nfunc mutableSetValue(forKey: String) -> NSMutableSet\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\nfunc mutableSetValue(forKeyPath: String) -> NSMutableSet\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\nfunc mutableOrderedSetValue(forKey: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\nfunc mutableOrderedSetValue(forKeyPath: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path.\nRelated Documentation\nfunc setValuesForKeys([String : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties."
  },
  {
    "title": "mutableOrderedSetValue(forKeyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1407188-mutableorderedsetvalue",
    "html": "Parameters\nkeyPath\n\nA key path, relative to the receiver, to a uniquing ordered to-many relationship represented by a set.\n\nReturn Value\n\nA mutable ordered set that provides read-write access to the uniquing to-many relationship specified by keyPath.\n\nDiscussion\n\nSee mutableOrderedSetValue(forKey:) for additional details.\n\nSee Also\nGetting Values\nfunc value(forKey: String) -> Any?\nReturns the value for the property identified by a given key.\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path.\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array.\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to a given key.\nfunc mutableArrayValue(forKey: String) -> NSMutableArray\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\nfunc mutableArrayValue(forKeyPath: String) -> NSMutableArray\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\nfunc mutableSetValue(forKey: String) -> NSMutableSet\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\nfunc mutableSetValue(forKeyPath: String) -> NSMutableSet\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\nfunc mutableOrderedSetValue(forKey: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key."
  },
  {
    "title": "allocWithZone: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1571945-allocwithzone",
    "html": "Parameters\nzone\n\nThis parameter is ignored.\n\nReturn Value\n\nA new instance of the receiver.\n\nDiscussion\n\nThe isa instance variable of the new instance is initialized to a data structure that describes the class; memory for all other instance variables is set to 0.\n\nYou must use an init... method to complete the initialization process. For example:\n\nTheClass *newObject = [[TheClass allocWithZone:nil] init];\n\n\nDo not override allocWithZone: to include any initialization code. Instead, class-specific versions of init... methods.\n\nThis method exists for historical reasons; memory zones are no longer used by Objective-C.\n\nSee Also\nCreating, Copying, and Deallocating Objects\n+ alloc\nReturns a new instance of the receiving class.\n- init\nImplemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.\n- copy\nReturns the object returned by copyWithZone:.\n+ copyWithZone:\nReturns the receiver.\n- mutableCopy\nReturns the object returned by mutableCopyWithZone: where the zone is nil.\n+ mutableCopyWithZone:\nReturns the receiver.\n- dealloc\nDeallocates the memory occupied by the receiver.\n+ new\nAllocates a new instance of the receiving class, sends it an init message, and returns the initialized object."
  },
  {
    "title": "alloc | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1571958-alloc",
    "html": "Return Value\n\nA new instance of the receiver.\n\nDiscussion\n\nThis is an instance variable of the new instance that is initialized to a data structure describing the class; memory for all other instance variables is set to 0.\n\nYou must use an init... method to complete the initialization process. For example:\n\nTheClass *newObject = [[TheClass alloc] init];\n\n\nDo not override alloc to include initialization code. Instead, implement class-specific versions of init... methods.\n\nFor historical reasons, alloc invokes allocWithZone:.\n\nSee Also\nCreating, Copying, and Deallocating Objects\n+ allocWithZone:\nReturns a new instance of the receiving class.\n- init\nImplemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.\n- copy\nReturns the object returned by copyWithZone:.\n+ copyWithZone:\nReturns the receiver.\n- mutableCopy\nReturns the object returned by mutableCopyWithZone: where the zone is nil.\n+ mutableCopyWithZone:\nReturns the receiver.\n- dealloc\nDeallocates the memory occupied by the receiver.\n+ new\nAllocates a new instance of the receiving class, sends it an init message, and returns the initialized object."
  },
  {
    "title": "isAccessibilityElement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615141-isaccessibilityelement",
    "html": "Discussion\n\nThe default value for this property is false unless the element is a standard UIKit control, in which case, the value is true.\n\nAssistive apps can get information only about objects that accessibility elements represent. Therefore, if you implement a custom control or view that you want to be accessible to users with disabilities, set this property to true. The only exception to this practice is a view that merely serves as a container for other items that you want to be accessible. Implement the UIAccessibilityContainer protocol and set this property to false.\n\nSee Also\nSupporting basic accessibility\nvar accessibilityLabel: String?\nA succinct label in a localized string that identifies the accessibility element.\nvar accessibilityValue: String?\nA localized string that contains the value of the accessibility element.\nvar accessibilityHint: String?\nA localized string that contains a brief description of the result of performing an action on the accessibility element.\nvar accessibilityTraits: UIAccessibilityTraits\nThe combination of accessibility traits that best characterizes the accessibility element.\nstruct UIAccessibilityTraits\nConstants that describe how an accessibility element behaves."
  },
  {
    "title": "removeValue(at:fromPropertyWithKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1408773-removevalue",
    "html": "Discussion\n\nThe method removeFrom<Key>AtIndex: is invoked if it exists. If no corresponding scripting-KVC-compliant method (-removeFrom<Key>AtIndex:) is found, this method invokes -mutableArrayValueForKey: and mutates the result.\n\nNote\n\nPrior to OS X version 10.4, this method did not invoke -mutableArrayValueForKey:.\n\nSee Also\nIndexed access\nfunc insertValue(Any, at: Int, inPropertyWithKey: String)\nInserts an object at the specified index in the collection specified by the passed key.\nfunc replaceValue(at: Int, inPropertyWithKey: String, withValue: Any)\nReplaces the object at the specified index in the collection specified by the passed key.\nfunc value(at: Int, inPropertyWithKey: String) -> Any?\nRetrieves an indexed object from the collection specified by the passed key."
  },
  {
    "title": "insertValue(_:inPropertyWithKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416203-insertvalue",
    "html": "Discussion\n\nThe method insertIn<Key>: is used if it exists. Otherwise, raises an NSUndefinedKeyException. This is part of Cocoa’s scripting support for inserting newly-created objects into containers without explicitly specifying a location.\n\nSee Also\nAccess by name, key, or ID\nfunc value(withName: String, inPropertyWithKey: String) -> Any?\nRetrieves a named object from the collection specified by the passed key.\nfunc value(withUniqueID: Any, inPropertyWithKey: String) -> Any?\nRetrieves an object by ID from the collection specified by the passed key."
  },
  {
    "title": "performSelector:onThread:withObject:waitUntilDone:modes: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417922-performselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. It should not have a significant return value and should take a single argument of type id, or no arguments.\n\nthread\n\nThe thread on which to execute aSelector. This thread represents the target thread.\n\narg\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\nwait\n\nA Boolean that specifies whether the current thread blocks until after the specified selector is performed on the receiver on the specified thread. Specify YES to block this thread; otherwise, specify NO to have this method return immediately.\n\nIf the current thread and target thread are the same, and you specify YES for this parameter, the selector is performed immediately. If you specify NO, this method queues the message and returns immediately, regardless of whether the threads are the same or different.\n\narray\n\nAn array of strings that identifies the modes in which it is permissible to perform the specified selector. This array must contain at least one string. If you specify nil or an empty array for this parameter, this method returns without performing the specified selector. For information about run loop modes, see Run Loops in Threading Programming Guide.\n\nDiscussion\n\nYou can use this method to deliver messages to other threads in your application. The message in this case is a method of the current object that you want to execute on the target thread.\n\nThis method queues the message on the run loop of the target thread using the run loop modes specified in the array parameter. As part of its normal run loop processing, the target thread dequeues the message (assuming it is running in one of the specified modes) and invokes the desired method.\n\nYou cannot cancel messages queued using this method. If you want the option of canceling a message on the current thread, you must use either the performSelector:withObject:afterDelay: or performSelector:withObject:afterDelay:inModes: method instead.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after and related methods to get the behavior you want.\n\nSee Also\nSending Messages\n- performSelector:withObject:afterDelay:\nInvokes a method of the receiver on the current thread using the default mode after a delay.\n- performSelector:withObject:afterDelay:inModes:\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\n- performSelectorOnMainThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the main thread using the default mode.\n- performSelectorOnMainThread:withObject:waitUntilDone:modes:\nInvokes a method of the receiver on the main thread using the specified modes.\n- performSelector:onThread:withObject:waitUntilDone:\nInvokes a method of the receiver on the specified thread using the default mode.\n- performSelectorInBackground:withObject:\nInvokes a method of the receiver on a new background thread.\n+ cancelPreviousPerformRequestsWithTarget:\nCancels perform requests previously registered with the performSelector:withObject:afterDelay: instance method.\n+ cancelPreviousPerformRequestsWithTarget:selector:object:\nCancels perform requests previously registered with performSelector:withObject:afterDelay:."
  },
  {
    "title": "mutableArrayValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416339-mutablearrayvalue",
    "html": "Parameters\nkey\n\nThe name of an ordered to-many relationship.\n\nReturn Value\n\nA mutable array proxy that provides read-write access to the ordered to-many relationship specified by key.\n\nDiscussion\n\nObjects added to the mutable array become related to the receiver, and objects removed from the mutable array become unrelated. The default implementation recognizes the same simple accessor methods and array accessor methods as value(forKey:), and follows the same direct instance variable access policies, but always returns a mutable collection proxy object instead of the immutable collection that value(forKey:) would return.\n\nThe search pattern that mutableArrayValueForKey: uses is described in Accessor Search Patterns in Key-Value Coding Programming Guide.\n\nSee Also\nGetting Values\nfunc value(forKey: String) -> Any?\nReturns the value for the property identified by a given key.\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path.\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array.\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to a given key.\nfunc mutableArrayValue(forKeyPath: String) -> NSMutableArray\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\nfunc mutableSetValue(forKey: String) -> NSMutableSet\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\nfunc mutableSetValue(forKeyPath: String) -> NSMutableSet\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\nfunc mutableOrderedSetValue(forKey: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\nfunc mutableOrderedSetValue(forKeyPath: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path."
  },
  {
    "title": "object_setInstanceVariable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1441498-object_setinstancevariable",
    "html": "Parameters\nobj\n\nA pointer to an instance of a class. Pass the object containing the instance variable whose value you wish to modify.\n\nname\n\nA C string. Pass the name of the instance variable whose value you wish to modify.\n\nvalue\n\nThe new value for the instance variable.\n\nReturn Value\n\nA pointer to the Ivar data structure that defines the type and name of the instance variable specified by name.\n\nSee Also\nWorking with Instances\nobject_copy\nReturns a copy of a given object.\nobject_dispose\nFrees the memory occupied by a given object.\nobject_getInstanceVariable\nObtains the value of an instance variable of a class instance.\nobject_getIndexedIvars\nReturns a pointer to any extra bytes allocated with a instance given object.\nobject_getIvar\nReads the value of an instance variable in an object.\nobject_setIvar\nSets the value of an instance variable in an object.\nobject_getClassName\nReturns the class name of a given object.\nobject_getClass\nReturns the class of an object.\nobject_setClass\nSets the class of an object."
  },
  {
    "title": "finalize() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418513-finalize",
    "html": "Deprecated\n\nGarbage collection is deprecated in OS X v10.8; instead, you should use Automatic Reference Counting—see Transitioning to ARC Release Notes.\n\nDiscussion\n\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses. When garbage collection is enabled, this method is invoked instead of dealloc.\n\nYou can override this method to relinquish resources the receiver has obtained, as shown in the following example:\n\n- (void)finalize {\n    if (log_file != NULL) {\n        fclose(log_file);\n        log_file = NULL;\n    }\n    [super finalize];\n}\n\n\nTypically, however, you are encouraged to relinquish resources prior to finalization if at all possible. For more details, see Implementing a finalize Method.\n\nSpecial Considerations\n\nIt is an error to store self into a new or existing live object (colloquially known as “resurrection”), which implies that this method will be called only once. However, the receiver may be messaged after finalization by other objects also being finalized at this time, so your override should guard against future use of resources that have been reclaimed, as shown by the log_file = NULL statement in the example. The finalize method itself will never be invoked more than once for a given object.\n\nImportant\n\nfinalize methods must be thread-safe.\n\nSee Also\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc storedValue(forKey: String) -> Any?\nReturns the property identified by a given key.\nDeprecated\nfunc textStorageDidProcessEditing(Notification)\nDeprecated\nfunc textStorageWillProcessEditing(Notification)\nDeprecated\nfunc takeStoredValue(Any?, forKey: String)\nSets the value of the property identified by a given key.\nDeprecated\nfunc takeValue(Any?, forKey: String)\nSets the value for the property identified by key to value.\nDeprecated\nfunc takeValue(Any?, forKeyPath: String)\nSets the value for the property identified by keyPath to value.\nDeprecated\nfunc takeValues(from: [AnyHashable : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\nfunc unableToSetNil(forKey: String)\nInvoked if key is represented by a scalar attribute.\nDeprecated\nfunc values(forKeys: [Any]) -> [AnyHashable : Any]\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated\nRelated Documentation\n- dealloc\nDeallocates the memory occupied by the receiver."
  },
  {
    "title": "scriptingIsLessThan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393887-scriptingislessthan",
    "html": "See Also\nPerforming comparisons\nfunc scriptingBegins(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the beginning of object.\nfunc scriptingContains(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object contains object.\nfunc scriptingEnds(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the end of object.\nfunc scriptingIsEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is equal to object.\nfunc scriptingIsGreaterThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than object.\nfunc scriptingIsGreaterThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than or equal to object.\nfunc scriptingIsLessThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "object_getInstanceVariable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1441499-object_getinstancevariable",
    "html": "Parameters\nobj\n\nA pointer to an instance of a class. Pass the object containing the instance variable whose value you wish to obtain.\n\nname\n\nA C string. Pass the name of the instance variable whose value you wish to obtain.\n\noutValue\n\nOn return, contains a pointer to the value of the instance variable.\n\nReturn Value\n\nA pointer to the Ivar data structure that defines the type and name of the instance variable specified by name.\n\nSee Also\nWorking with Instances\nobject_copy\nReturns a copy of a given object.\nobject_dispose\nFrees the memory occupied by a given object.\nobject_setInstanceVariable\nChanges the value of an instance variable of a class instance.\nobject_getIndexedIvars\nReturns a pointer to any extra bytes allocated with a instance given object.\nobject_getIvar\nReads the value of an instance variable in an object.\nobject_setIvar\nSets the value of an instance variable in an object.\nobject_getClassName\nReturns the class name of a given object.\nobject_getClass\nReturns the class of an object.\nobject_setClass\nSets the class of an object."
  },
  {
    "title": "value(forUndefinedKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1413457-value",
    "html": "Parameters\nkey\n\nA string that is not equal to the name of any of the receiver's properties.\n\nDiscussion\n\nSubclasses can override this method to return an alternate value for undefined keys. The default implementation raises an NSUndefinedKeyException.\n\nSee Also\nGetting Values\nfunc value(forKey: String) -> Any?\nReturns the value for the property identified by a given key.\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path.\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array.\nfunc mutableArrayValue(forKey: String) -> NSMutableArray\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\nfunc mutableArrayValue(forKeyPath: String) -> NSMutableArray\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\nfunc mutableSetValue(forKey: String) -> NSMutableSet\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\nfunc mutableSetValue(forKeyPath: String) -> NSMutableSet\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\nfunc mutableOrderedSetValue(forKey: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\nfunc mutableOrderedSetValue(forKeyPath: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path.\nRelated Documentation\nfunc setValue(Any?, forUndefinedKey: String)\nInvoked by when it finds no property for a given key."
  },
  {
    "title": "fileManager(_:willProcessPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1557002-filemanager",
    "html": "Deprecated\n\nSee delegate methods for copy, move, link, and remove methods.\n\nParameters\nmanager\n\nThe NSFileManager object that sent this message.\n\npath\n\nThe path or a file or directory that manager is about to attempt to move, copy, rename, delete, or link to.\n\nDiscussion\n\nYou can implement this method in your handler to monitor file operations.\n\nSee Also\nDeprecated Methods\nfunc changeFileAttributes([AnyHashable : Any], atPath: String) -> Bool\nChanges the attributes of a given file or directory.\nDeprecated\nfunc fileAttributes(atPath: String, traverseLink: Bool) -> [AnyHashable : Any]?\nReturns a dictionary that describes the POSIX attributes of the file specified at a given.\nDeprecated\nfunc fileSystemAttributes(atPath: String) -> [AnyHashable : Any]?\nReturns a dictionary that describes the attributes of the mounted file system on which a given path resides.\nDeprecated\nfunc directoryContents(atPath: String) -> [Any]?\nReturns the directories and files (including symbolic links) contained in a given directory.\nDeprecated\nfunc createDirectory(atPath: String, attributes: [AnyHashable : Any]) -> Bool\nCreates a directory (without contents) at a given path with given attributes.\nDeprecated\nfunc createSymbolicLink(atPath: String, pathContent: String) -> Bool\nCreates a symbolic link identified by a given path that refers to a given location.\nDeprecated\nfunc pathContentOfSymbolicLink(atPath: String) -> String?\nReturns the path of the directory or file that a symbolic link at a given path refers to.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc replaceItemAtURL(originalItemURL: NSURL, withItemAtURL: NSURL, backupItemName: String?, options: FileManager.ItemReplacementOptions) -> NSURL?\nReplaces the contents of the item at the specified URL in a manner that ensures no data loss occurs.\nDeprecated"
  },
  {
    "title": "value(at:inPropertyWithKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1407605-value",
    "html": "Discussion\n\nThis actually works with a single-value key as well if index is 0. The method valueIn<Key>AtIndex: is used if it exists.\n\nSee Also\nIndexed access\nfunc insertValue(Any, at: Int, inPropertyWithKey: String)\nInserts an object at the specified index in the collection specified by the passed key.\nfunc removeValue(at: Int, fromPropertyWithKey: String)\nRemoves the object at the specified index from the collection specified by the passed key.\nfunc replaceValue(at: Int, inPropertyWithKey: String, withValue: Any)\nReplaces the object at the specified index in the collection specified by the passed key."
  },
  {
    "title": "isProxy() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418528-isproxy",
    "html": "Required\n\nReturn Value\n\nfalse if the receiver really descends from NSObject, otherwise true.\n\nDiscussion\n\nThis method is necessary because sending isKind(of:) or isMember(of:) to an NSProxy object will test the object the proxy stands in for, not the proxy itself. Use this method to test if the receiver is a proxy (or a member of some other root class)."
  },
  {
    "title": "replaceValue(at:inPropertyWithKey:withValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411225-replacevalue",
    "html": "Discussion\n\nThe method replaceIn<Key>:atIndex: is invoked if it exists. If no corresponding scripting-KVC-compliant method (-replaceIn<Key>atIndex:) is found, this method invokes -mutableArrayValueForKey: and mutates the result.\n\nNote\n\nPrior to OS X version 10.4, this method did not invoke -mutableArrayValueForKey:.\n\nSee Also\nIndexed access\nfunc insertValue(Any, at: Int, inPropertyWithKey: String)\nInserts an object at the specified index in the collection specified by the passed key.\nfunc removeValue(at: Int, fromPropertyWithKey: String)\nRemoves the object at the specified index from the collection specified by the passed key.\nfunc value(at: Int, inPropertyWithKey: String) -> Any?\nRetrieves an indexed object from the collection specified by the passed key."
  },
  {
    "title": "perform(_:with:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418667-perform",
    "html": "Required\n\nParameters\naSelector\n\nA selector identifying the message to send. If aSelector is NULL, an invalidArgumentException is raised.\n\nanObject\n\nAn object that is the first argument of the message.\n\nanotherObject\n\nAn object that is the second argument of the message\n\nReturn Value\n\nAn object that is the result of the message.\n\nDiscussion\n\nThis method is the same as perform(_:) except that you can supply two arguments for aSelector. aSelector should identify a method that can take two arguments of type id. For methods with other argument types and return values, use NSInvocation.\n\nSee Also\nSending Messages\nfunc perform(Selector!) -> Unmanaged<AnyObject>!\nSends a specified message to the receiver and returns the result of the message.\n\nRequired\n\nfunc perform(Selector!, with: Any!) -> Unmanaged<AnyObject>!\nSends a message to the receiver with an object as the argument.\n\nRequired\n\nRelated Documentation\nfunc method(for: Selector!) -> IMP!\nLocates and returns the address of the receiver’s implementation of a method so it can be called as a function."
  },
  {
    "title": "perform(_:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418764-perform",
    "html": "Required\n\nParameters\naSelector\n\nA selector identifying the message to send. If aSelector is NULL, an invalidArgumentException is raised.\n\nanObject\n\nAn object that is the sole argument of the message.\n\nReturn Value\n\nAn object that is the result of the message.\n\nDiscussion\n\nThis method is the same as perform(_:) except that you can supply an argument for aSelector. aSelector should identify a method that takes a single argument of type id. For methods with other argument types and return values, use NSInvocation.\n\nSee Also\nSending Messages\nfunc perform(Selector!) -> Unmanaged<AnyObject>!\nSends a specified message to the receiver and returns the result of the message.\n\nRequired\n\nfunc perform(Selector!, with: Any!, with: Any!) -> Unmanaged<AnyObject>!\nSends a message to the receiver with two objects as arguments.\n\nRequired\n\nRelated Documentation\nfunc method(for: Selector!) -> IMP!\nLocates and returns the address of the receiver’s implementation of a method so it can be called as a function."
  },
  {
    "title": "webPlugInStop() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1536433-webpluginstop",
    "html": "Discussion\n\nThis method may be called more than once, provided that the application has already called webPlugInInitialize() and that each call to this method is preceded by a call to webPlugInStart().\n\nSee Also\nControlling the Plug-in\nfunc webPlugInDestroy()\nPrepares the plug-in for deallocation.\nfunc webPlugInInitialize()\nInitializes the plug-in.\nfunc webPlugInStart()\nTells the plug-in to start normal operation."
  },
  {
    "title": "perform(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418867-perform",
    "html": "Required\n\nParameters\naSelector\n\nA selector identifying the message to send. The message should take no arguments. If aSelector is NULL, an invalidArgumentException is raised.\n\nReturn Value\n\nAn object that is the result of the message.\n\nDiscussion\n\nCalling the perform(_:) method is equivalent to sending the aSelector message directly to the receiver, which you do in Swift using the dot syntax. For example, the following both do the same thing if anObject is an instance of MyObject:\n\nlet aClone = anObject.copy()\nlet aClone = anObject.perform(#selector(MyObject.copy)).takeRetainedValue()\n\n\nThe perform(_:) method allows you to send messages that aren’t determined until run-time. This means that you can pass a variable selector as the argument:\n\nlet aSelector = findTheAppropriateSelectorForTheCurrentSituation()\nlet returnedObject = anObject.perform(aSelector).takeUnretainedValue()\n\n\nBut use caution when doing this. The perform(_:) method returns an implicitly unwrapped optional unmanaged pointer to an AnyObject instance (Unmanaged<AnyObject>!). Because it knows nothing about the return value at compile-time, it is up to you to decide how to bring the instance into Swift’s memory management scheme.\n\nUsually, a caller is not responsible for the memory of a returned instance, in which case you use takeUnretainedValue(), as shown above. However, for any of the creation methods, such as copy(), the caller is responsible, and you use takeRetainedValue() instead. See Memory Management Policy in Advanced Memory Management Programming Guide for a description of ownership expectations.\n\nImportant\n\nBecause of the inherent lack of type safety, this API is not recommended for use in Swift unless your code specifically relies on the dynamic method resolution provided by the Objective-C run-time.\n\nFor more information about using selectors in Swift and alternatives to the perform(_:) function, read Using Objective-C Runtime Features in Swift.\n\nSee Also\nSending Messages\nfunc perform(Selector!, with: Any!) -> Unmanaged<AnyObject>!\nSends a message to the receiver with an object as the argument.\n\nRequired\n\nfunc perform(Selector!, with: Any!, with: Any!) -> Unmanaged<AnyObject>!\nSends a message to the receiver with two objects as arguments.\n\nRequired"
  },
  {
    "title": "webPlugInMainResourceDidFailWithError(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1536829-webpluginmainresourcedidfailwith",
    "html": "Parameters\nerror\n\nAn error object containing details of why the connection failed to load the request successfully.\n\nDiscussion\n\nThis message is invoked when the underlying NSURLConnection object for the main resource sends the connection:didFailWithError: message to its delegate.\n\nSee Also\nMain resource messages\nfunc webPlugInMainResourceDidFinishLoading()\nInvoked when the connection successfully finishes loading data.\nfunc webPlugInMainResourceDidReceive(Data!)\nInvoked when the connection loads data incrementally.\nfunc webPlugInMainResourceDidReceive(URLResponse!)\nInvoked when the connection receives sufficient data to construct the URL response for its request."
  },
  {
    "title": "webPlugInMainResourceDidFinishLoading() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1537693-webpluginmainresourcedidfinishlo",
    "html": "Discussion\n\nThis message is invoked when the WebPlugInShouldLoadMainResourceKey plug-in command-line argument is set to false and the underlying NSURLConnection object for the main resource sends the connectionDidFinishLoading: message to its delegate.\n\nSee Also\nMain resource messages\nfunc webPlugInMainResourceDidFailWithError(Error!)\nInvoked when an error occurs loading the main resource.\nfunc webPlugInMainResourceDidReceive(Data!)\nInvoked when the connection loads data incrementally.\nfunc webPlugInMainResourceDidReceive(URLResponse!)\nInvoked when the connection receives sufficient data to construct the URL response for its request."
  },
  {
    "title": "accessibilityElements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615147-accessibilityelements",
    "html": "Discussion\n\nContainers can implement this property instead of the dynamic methods to support the retrieval of the contained elements. The default value of this property is nil.\n\nSee Also\nProviding information about accessibility elements\nfunc accessibilityElementCount() -> Int\nReturns the number of accessibility elements in the container.\nfunc accessibilityElement(at: Int) -> Any?\nReturns the accessibility element at the specified index.\nfunc index(ofAccessibilityElement: Any) -> Int\nReturns the index of the specified accessibility element.\nvar automationElements: [Any]?\nAn array of the automation elements in the container.\nvar accessibilityContainerType: UIAccessibilityContainerType\nThe type of container used for accessibility elements, such as tables or lists.\nenum UIAccessibilityContainerType\nConstants that indicate the type of content in a data-based container."
  },
  {
    "title": "isMember(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418766-ismember",
    "html": "Required\n\nParameters\naClass\n\nA class object representing the Objective-C class to be tested.\n\nReturn Value\n\ntrue if the receiver is an instance of aClass, otherwise false.\n\nDiscussion\n\nFor example, in this code, isMember(of:) would return false:\n\nNSMutableData *myData = [NSMutableData dataWithCapacity:30];\nid anArchiver = [[NSArchiver alloc] initForWritingWithMutableData:myData];\nif ([anArchiver isMemberOfClass:[NSCoder class]])\n    ...\n\n\nClass objects may be compiler-created objects but they still support the concept of membership. Thus, you can use this method to verify that the receiver is a specific Class object.\n\nSee Also\nTesting Object Inheritance, Behavior, and Conformance\nfunc isKind(of: AnyClass) -> Bool\nReturns a Boolean value that indicates whether the receiver is an instance of given class or an instance of any class that inherits from that class.\n\nRequired\n\nfunc responds(to: Selector!) -> Bool\nReturns a Boolean value that indicates whether the receiver implements or inherits a method that can respond to a specified message.\n\nRequired\n\nfunc conforms(to: Protocol) -> Bool\nReturns a Boolean value that indicates whether the receiver conforms to a given protocol.\n\nRequired"
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418703-debugdescription",
    "html": "Return Value\n\nA string that describes the object for debugging purposes.\n\nDiscussion\n\nThe debugger’s po command uses this property to create a textual representation of the object suitable for display in the debugger. The default implemention returns the same value as description. Override either property to provide custom object descriptions.\n\nSee Also\nDescribing Objects\nvar description: String\nA textual representation of the receiver.\n\nRequired"
  },
  {
    "title": "hash | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418859-hash",
    "html": "Required\n\nReturn Value\n\nAn integer that can be used as a table address in a hash table structure.\n\nDiscussion\n\nIf two objects are equal (as determined by the isEqual(_:) method), they must have the same hash value. This last point is particularly important if you define hash in a subclass and intend to put instances of that subclass into a collection.\n\nIf a mutable object is added to a collection that uses hash values to determine the object’s position in the collection, the value returned by the hash method of the object must not change while the object is in the collection. Therefore, either the hash method must not rely on any of the object’s internal state information or you must make sure the object’s internal state information does not change while the object is in the collection. Thus, for example, a mutable dictionary can be put in a hash table but you must not change it while it is in there. (Note that it can be difficult to know whether or not a given object is in a collection.)\n\nSee Also\nIdentifying and Comparing Objects\nfunc isEqual(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver and a given object are equal.\n\nRequired\n\nfunc `self`() -> Self\nReturns the receiver.\n\nRequired"
  },
  {
    "title": "self() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418954-self",
    "html": "Required\n\nReturn Value\n\nThe receiver.\n\nSee Also\nIdentifying and Comparing Objects\nfunc isEqual(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver and a given object are equal.\n\nRequired\n\nvar hash: Int\nReturns an integer that can be used as a table address in a hash table structure.\n\nRequired\n\nRelated Documentation\n- class\nReturns the class object for the receiver’s class."
  },
  {
    "title": "accessibilityContainerType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/2865802-accessibilitycontainertype",
    "html": "Discussion\n\nThe default value is UIAccessibilityContainerTypeNone.\n\nSet this property so that assistive technologies can output information about the contents of containers.\n\nSee Also\nProviding information about accessibility elements\nfunc accessibilityElementCount() -> Int\nReturns the number of accessibility elements in the container.\nfunc accessibilityElement(at: Int) -> Any?\nReturns the accessibility element at the specified index.\nfunc index(ofAccessibilityElement: Any) -> Int\nReturns the index of the specified accessibility element.\nvar accessibilityElements: [Any]?\nAn array of the accessibility elements in the container.\nvar automationElements: [Any]?\nAn array of the automation elements in the container.\nenum UIAccessibilityContainerType\nConstants that indicate the type of content in a data-based container."
  },
  {
    "title": "automationElements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/4165627-automationelements",
    "html": "Discussion\n\nUse this property to designate the children in the accessibility tree for automation.\n\nIn some cases, you might want to expose elements for automation but not for accessibility, or vice versa. In a view containing an image with a label under it, for example, you might choose to expose only the label for accessibility. For automation, however, you might include both the image and the label in a test to confirm the both objects exist. In this case, add both the image and the label to automationElements.\n\nAt runtime, if an object isn’t an accessibility element, and automationElements isn’t set, automationElements defaults to accessibilityElements.\n\nIf the object is a view and it’s an accessibility element, and accessibilityElements is empty, the system assigns the list of subviews that have an accessibilityIdentifier to automationElements.\n\nOtherwise, the automationElements is an empty array.\n\nSee Also\nProviding information about accessibility elements\nfunc accessibilityElementCount() -> Int\nReturns the number of accessibility elements in the container.\nfunc accessibilityElement(at: Int) -> Any?\nReturns the accessibility element at the specified index.\nfunc index(ofAccessibilityElement: Any) -> Int\nReturns the index of the specified accessibility element.\nvar accessibilityElements: [Any]?\nAn array of the accessibility elements in the container.\nvar accessibilityContainerType: UIAccessibilityContainerType\nThe type of container used for accessibility elements, such as tables or lists.\nenum UIAccessibilityContainerType\nConstants that indicate the type of content in a data-based container."
  },
  {
    "title": "Class | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/class",
    "html": "See Also\nClass-Definition Data Structures\nMethod\nAn opaque type that represents a method in a class definition.\nIvar\nAn opaque type that represents an instance variable.\nCategory\nAn opaque type that represents a category.\nobjc_property_t\nAn opaque type that represents an Objective-C declared property.\nIMP\nA pointer to the start of a method implementation.\nSEL\nDefines an opaque type that represents a method selector.\nobjc_method_description\nDefines an Objective-C method.\nobjc_cache\nPerformance optimization for method calls. Contains pointers to recently used methods.\nobjc_property_attribute_t\nDefines a property attribute."
  },
  {
    "title": "SEL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/sel",
    "html": "Discussion\n\nMethod selectors are used to represent the name of a method at runtime. A method selector is a C string that has been registered (or “mapped“) with the Objective-C runtime. Selectors generated by the compiler are automatically mapped by the runtime when the class is loaded.\n\nYou can add new selectors at runtime and retrieve existing selectors using the function sel_registerName.\n\nWhen using selectors, you must use the value returned from sel_registerName or the Objective-C compiler directive @selector(). You cannot simply cast a C string to SEL.\n\nSee Also\nClass-Definition Data Structures\nClass\nAn opaque type that represents an Objective-C class.\nMethod\nAn opaque type that represents a method in a class definition.\nIvar\nAn opaque type that represents an instance variable.\nCategory\nAn opaque type that represents a category.\nobjc_property_t\nAn opaque type that represents an Objective-C declared property.\nIMP\nA pointer to the start of a method implementation.\nobjc_method_description\nDefines an Objective-C method.\nobjc_cache\nPerformance optimization for method calls. Contains pointers to recently used methods.\nobjc_property_attribute_t\nDefines a property attribute."
  },
  {
    "title": "addObserver(_:forKeyPath:options:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1412787-addobserver",
    "html": "Parameters\nobserver\n\nThe object to register for KVO notifications. The observer must implement the key-value observing method observeValue(forKeyPath:of:change:context:).\n\nkeyPath\n\nThe key path, relative to the object receiving this message, of the property to observe. This value must not be nil.\n\noptions\n\nA combination of the NSKeyValueObservingOptions values that specifies what is included in observation notifications. For possible values, see NSKeyValueObservingOptions.\n\ncontext\n\nArbitrary data that is passed to observer in observeValue(forKeyPath:of:change:context:).\n\nDiscussion\n\nNeither the object receiving this message, nor observer, are retained. An object that calls this method must also eventually call either the removeObserver(_:forKeyPath:) or removeObserver(_:forKeyPath:context:) method to unregister the observer when participating in KVO.\n\nSee Also\nRegistering for Observation\nfunc removeObserver(NSObject, forKeyPath: String)\nStops the observer object from receiving change notifications for the property specified by the key path relative to the object receiving this message.\nfunc removeObserver(NSObject, forKeyPath: String, context: UnsafeMutableRawPointer?)\nStops the observer object from receiving change notifications for the property specified by the key path relative to the object receiving this message, given the context."
  },
  {
    "title": "observeValue(forKeyPath:of:change:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416553-observevalue",
    "html": "Parameters\nkeyPath\n\nThe key path, relative to object, to the value that has changed.\n\nobject\n\nThe source object of the key path keyPath.\n\nchange\n\nA dictionary that describes the changes that have been made to the value of the property at the key path keyPath relative to object. Entries are described in Change Dictionary Keys.\n\ncontext\n\nThe value that was provided when the observer was registered to receive key-value observation notifications.\n\nDiscussion\n\nFor an object to begin sending change notification messages for the value at keyPath, you send it an addObserver(_:forKeyPath:options:context:) message, naming the observing object that should receive the messages. When you are done observing, and in particular before the observing object is deallocated, you send the observed object a removeObserver(_:forKeyPath:) or removeObserver(_:forKeyPath:context:) message to unregister the observer, and stop sending change notification messages."
  },
  {
    "title": "removeObserver(_:forKeyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1408054-removeobserver",
    "html": "Parameters\nobserver\n\nThe object to remove as an observer.\n\nkeyPath\n\nA key-path, relative to the object receiving this message, for which observer is registered to receive KVO change notifications.\n\nDiscussion\n\nIt is an error to call removeObserver(_:forKeyPath:) for an object that has not previously been registered as an observer.\n\nBe sure to invoke this method (or removeObserver(_:forKeyPath:context:)) before any object specified in addObserver(_:forKeyPath:options:context:) is deallocated.\n\nSee Also\nRegistering for Observation\nfunc addObserver(NSObject, forKeyPath: String, options: NSKeyValueObservingOptions, context: UnsafeMutableRawPointer?)\nRegisters the observer object to receive KVO notifications for the key path relative to the object receiving this message.\nfunc removeObserver(NSObject, forKeyPath: String, context: UnsafeMutableRawPointer?)\nStops the observer object from receiving change notifications for the property specified by the key path relative to the object receiving this message, given the context."
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/selector/1418850-init",
    "html": "Relationships\nFrom Protocol\nExpressibleByStringLiteral"
  },
  {
    "title": "removeObserver(_:forKeyPath:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1410691-removeobserver",
    "html": "Parameters\nobserver\n\nThe object to remove as an observer.\n\nkeyPath\n\nA key-path, relative to the observed object, for which observer is registered to receive KVO change notifications.\n\ncontext\n\nArbitrary data that more specifically identifies the observer to be removed.\n\nDiscussion\n\nExamining the value in context you are able to determine precisely which addObserver(_:forKeyPath:options:context:) invocation was used to create the observation relationship. When the same observer is registered for the same key-path multiple times, but with different context pointers, an application can determine specifically which object to stop observing. It is an error to call removeObserver(_:forKeyPath:context:) if the object has not been registered as an observer.\n\nBe sure to invoke this method (or removeObserver(_:forKeyPath:)) before any object specified in addObserver(_:forKeyPath:options:context:) is deallocated.\n\nSee Also\nRegistering for Observation\nfunc addObserver(NSObject, forKeyPath: String, options: NSKeyValueObservingOptions, context: UnsafeMutableRawPointer?)\nRegisters the observer object to receive KVO notifications for the key path relative to the object receiving this message.\nfunc removeObserver(NSObject, forKeyPath: String)\nStops the observer object from receiving change notifications for the property specified by the key path relative to the object receiving this message."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/selector/3236878-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/selector/1418973-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "willChangeValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416222-willchangevalue",
    "html": "Parameters\nkey\n\nThe name of the property that will change.\n\nDiscussion\n\nUse this method when implementing key-value observer compliance manually to inform the observed object that the value at key is about to change.\n\nThe change type of this method is NSKeyValueChangeSetting.\n\nImportant\n\nAfter the values have been changed, a corresponding didChangeValue(forKey:) must be invoked with the same parameter.\n\nSpecial Considerations\n\nYou rarely need to override this method in subclasses, but if you do, be sure to call super.\n\nSee Also\nNotifying Observers of Changes\nfunc didChangeValue(forKey: String)\nInforms the observed object that the value of a given property has changed.\nfunc willChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change is about to be executed at given indexes for a specified ordered to-many relationship.\nfunc didChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change has occurred on the indexes for a specified ordered to-many relationship.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change is about to be made to a specified unordered to-many relationship.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change was made to a specified unordered to-many relationship."
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/selector/1418486-init",
    "html": "Parameters\nvalue\n\nThe value of the new instance.\n\nDiscussion\n\nNote\n\nThis documentation comment was inherited from ExpressibleByUnicodeScalarLiteral."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/selector/1418924-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "didChangeValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411809-didchangevalue",
    "html": "Parameters\nkey\n\nThe name of the property that changed.\n\nDiscussion\n\nUse this method when implementing key-value observer compliance manually to inform the observed object that the value at key has just changed. Calls to this method are always paired with a matching call to willChangeValue(forKey:).\n\nSpecial Considerations\n\nYou rarely need to override this method in subclasses, but if you do, be sure to call super.\n\nSee Also\nNotifying Observers of Changes\nfunc willChangeValue(forKey: String)\nInforms the observed object that the value of a given property is about to change.\nfunc willChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change is about to be executed at given indexes for a specified ordered to-many relationship.\nfunc didChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change has occurred on the indexes for a specified ordered to-many relationship.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change is about to be made to a specified unordered to-many relationship.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change was made to a specified unordered to-many relationship."
  },
  {
    "title": "didChange(_:valuesAt:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415349-didchange",
    "html": "Parameters\nchange\n\nThe type of change that was made.\n\nindexes\n\nThe indexes of the to-many relationship that were affected by the change.\n\nkey\n\nThe name of a property that is an ordered to-many relationship.\n\nDiscussion\n\nUse this method when implementing key-value-observing compliance manually.\n\nSpecial Considerations\n\nYou rarely need to override this method in subclasses, but if you do, be sure to call super. Calls to this method are always paired with a matching call to willChange(_:valuesAt:forKey:).\n\nSee Also\nNotifying Observers of Changes\nfunc willChangeValue(forKey: String)\nInforms the observed object that the value of a given property is about to change.\nfunc didChangeValue(forKey: String)\nInforms the observed object that the value of a given property has changed.\nfunc willChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change is about to be executed at given indexes for a specified ordered to-many relationship.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change is about to be made to a specified unordered to-many relationship.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change was made to a specified unordered to-many relationship."
  },
  {
    "title": "willChange(_:valuesAt:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1412271-willchange",
    "html": "Parameters\nchange\n\nThe type of change that is about to be made.\n\nindexes\n\nThe indexes of the to-many relationship that will be affected by the change.\n\nkey\n\nThe name of a property that is an ordered to-many relationship.\n\nDiscussion\n\nUse this method when implementing key-value-observing compliance manually.\n\nImportant\n\nAfter the values have been changed, a corresponding didChange(_:valuesAt:forKey:) must be invoked with the same parameters.\n\nSpecial Considerations\n\nYou rarely need to override this method in subclasses, but if you do, be sure to call super.\n\nSee Also\nNotifying Observers of Changes\nfunc willChangeValue(forKey: String)\nInforms the observed object that the value of a given property is about to change.\nfunc didChangeValue(forKey: String)\nInforms the observed object that the value of a given property has changed.\nfunc didChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change has occurred on the indexes for a specified ordered to-many relationship.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change is about to be made to a specified unordered to-many relationship.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change was made to a specified unordered to-many relationship."
  },
  {
    "title": "willChangeValue(forKey:withSetMutation:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1412323-willchangevalue",
    "html": "Parameters\nkey\n\nThe name of a property that is an unordered to-many relationship\n\nmutationKind\n\nThe type of change that will be made.\n\nobjects\n\nThe objects that are involved in the change (see NSKeyValueSetMutationKind).\n\nDiscussion\n\nUse this method when implementing key-value observer compliance manually.\n\nImportant\n\nAfter the values have been changed, a corresponding didChangeValue(forKey:withSetMutation:using:) must be invoked with the same parameters.\n\nSpecial Considerations\n\nYou rarely need to override this method in subclasses, but if you do, be sure to call super.\n\nSee Also\nNotifying Observers of Changes\nfunc willChangeValue(forKey: String)\nInforms the observed object that the value of a given property is about to change.\nfunc didChangeValue(forKey: String)\nInforms the observed object that the value of a given property has changed.\nfunc willChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change is about to be executed at given indexes for a specified ordered to-many relationship.\nfunc didChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change has occurred on the indexes for a specified ordered to-many relationship.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change was made to a specified unordered to-many relationship."
  },
  {
    "title": "accessibilityCustomActions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615150-accessibilitycustomactions",
    "html": "Discussion\n\nThe array contains one or more UIAccessibilityCustomAction objects defining the supported actions. Assistive technologies, such as VoiceOver, display your custom actions to the user at appropriate times."
  },
  {
    "title": "automaticallyNotifiesObservers(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1409370-automaticallynotifiesobservers",
    "html": "Return Value\n\ntrue if the key-value observing machinery should automatically invoke willChangeValue(forKey:)/didChangeValue(forKey:) and willChange(_:valuesAt:forKey:)/didChange(_:valuesAt:forKey:) whenever instances of the class receive key-value coding messages for the key, or mutating key-value-coding-compliant methods for the key are invoked; otherwise false.\n\nDiscussion\n\nThe default implementation returns true. Starting in OS X 10.5, the default implementation of this method searches the receiving class for a method whose name matches the pattern +automaticallyNotifiesObserversOf<Key>, and returns the result of invoking that method if it is found. Any found methods must return BOOL. If no such method is found true is returned.\n\nSee Also\nObserving Customization\nclass func keyPathsForValuesAffectingValue(forKey: String) -> Set<String>\nReturns a set of key paths for properties whose values affect the value of the specified key.\nprotocol NSKeyValueObservingCustomization\nvar observationInfo: UnsafeMutableRawPointer?\nReturns a pointer that identifies information about all of the observers that are registered with the observed object."
  },
  {
    "title": "workflowControllerWillRun(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1419730-workflowcontrollerwillrun",
    "html": "Deprecated\n\nUse workflowControllerWillRun(_:) instead.\n\nParameters\ncontroller\n\nThe workflow controller object to be run.\n\nSee Also\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated"
  },
  {
    "title": "keyPathsForValuesAffectingValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1414299-keypathsforvaluesaffectingvalue",
    "html": "Parameters\nkey\n\nThe key whose value is affected by the key paths.\n\nDiscussion\n\nWhen an observer for the key is registered with an instance of the receiving class, key-value observing itself automatically observes all of the key paths for the same instance, and sends change notifications for the key to the observer when the value for any of those key paths changes.\n\nThe default implementation of this method searches the receiving class for a method whose name matches the pattern +keyPathsForValuesAffecting<Key>, and returns the result of invoking that method if it is found. Any such method must return an NSSet. If no such method is found, an NSSet that is computed from information provided by previous invocations of the now-deprecated setKeys:triggerChangeNotificationsForDependentKey: method is returned, for backward binary compatibility.\n\nYou can override this method when the getter method of one of your properties computes a value to return using the values of other properties, including those that are located by key paths. Your override should typically call super and return a set that includes any members in the set that result from doing that (so as not to interfere with overrides of this method in superclasses).\n\nNote\n\nYou must not override this method when you add a computed property to an existing class using a category, overriding methods in categories is unsupported. In that case, implement a matching +keyPathsForValuesAffecting<Key> to take advantage of this mechanism.\n\nSee Also\nObserving Customization\nclass func automaticallyNotifiesObservers(forKey: String) -> Bool\nReturns a Boolean value that indicates whether the observed object supports automatic key-value observation for the given key.\nprotocol NSKeyValueObservingCustomization\nvar observationInfo: UnsafeMutableRawPointer?\nReturns a pointer that identifies information about all of the observers that are registered with the observed object."
  },
  {
    "title": "accessibilityActionNames() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1527905-accessibilityactionnames",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nReturn Value\n\nAn array of action names.\n\nDiscussion\n\nUser interface classes must implement this method. Subclasses should invoke the superclass's implementation, if it exists, and append additional action names or remove unsupported actions. See Constants for some common action names.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "setDefaultPlaceholder(_:for:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458194-setdefaultplaceholder",
    "html": "Discussion\n\nThe marker can be nil or one of the constants described in Selection Markers.\n\nSee Also\nManaging default placeholders\nclass func defaultPlaceholder(for: Any?, with: NSBindingName) -> Any?\nReturns an object that will be used as the placeholder for the binding, when a key value coding compliant property of an instance of the receiving class returns the value specified by marker, and no other placeholder has been specified.\nDeprecated\nRelated Documentation\nCocoa Bindings Programming Topics"
  },
  {
    "title": "accessibilityAttributeValue(_:forParameter:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1524809-accessibilityattributevalue",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nParameters\nattribute\n\nThe name of the attribute. See Constants for lists of attribute names.\n\nparameter\n\nThe parameter.\n\nDiscussion\n\nIf you implement this method, also implement accessibilityParameterizedAttributeNames().\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "accessibilityActionDescription(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1533500-accessibilityactiondescription",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nParameters\naction\n\nThe action attribute.\n\nReturn Value\n\nThe description of the specified action, in a localized string.\n\nDiscussion\n\nUser interface classes must implement this method to return descriptions for all actions returned from accessibilityActionNames(). A button, for example, might return the string \"press” for the NSAccessibilityPressAction action. Subclasses should invoke the superclass's implementation, if it exists, to obtain the descriptions of any inherited actions.\n\nSee Also\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "observationInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1414009-observationinfo",
    "html": "Return Value\n\nA pointer that identifies information about all of the observers that are registered with the observed object, the options that were used at registration-time, and so on.\n\nDiscussion\n\nThe default implementation of this method retrieves the information from a global dictionary of observed objects keyed by memory addresses.\n\nFor improved performance, both this property and observationInfo can be overridden to store the opaque data pointer in an instance variable. Overrides of this property must not attempt to send messages to the stored data.\n\nSee Also\nObserving Customization\nclass func automaticallyNotifiesObservers(forKey: String) -> Bool\nReturns a Boolean value that indicates whether the observed object supports automatic key-value observation for the given key.\nclass func keyPathsForValuesAffectingValue(forKey: String) -> Set<String>\nReturns a set of key paths for properties whose values affect the value of the specified key.\nprotocol NSKeyValueObservingCustomization"
  },
  {
    "title": "accessibilityAttributeNames() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1525181-accessibilityattributenames",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nReturn Value\n\nAn array containing the attributes supported by the receiver.\n\nDiscussion\n\nUser interface classes must implement this method. Subclasses should invoke the superclass's implementation, if it exists, and append additional attributes or remove unsupported attributes. See Constants for lists of attribute names.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "accessibilityActivate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615165-accessibilityactivate",
    "html": "Return Value\n\ntrue if the element was activated or false if it was not.\n\nDiscussion\n\nYou can use this method to make complex controls more readily accessible to users. The accessibility system calls this method when a VoiceOver user double taps the selected element. Your implementation of this method should activate the element and perform whatever other tasks it deems appropriate. For example, you might use the method to activate a control that requires a complex gesture and would be difficult for VoiceOver users to perform, possibly because the gesture has a different meaning when VoiceOver is running.\n\nAfter performing any tasks, return an appropriate Boolean value to indicate success or failure.\n\nSee Also\nPerforming an action\nfunc accessibilityIncrement()\nTells the accessibility element to increment the value of its content.\nfunc accessibilityDecrement()\nTells the accessibility element to decrement the value of its content.\nfunc accessibilityScroll(UIAccessibilityScrollDirection) -> Bool\nScrolls screen content in an application-specific way and returns the success or failure of the action.\nfunc accessibilityPerformEscape() -> Bool\nDismisses a modal view and returns the success or failure of the action.\nfunc accessibilityPerformMagicTap() -> Bool\nPerforms a salient action."
  },
  {
    "title": "accessibilityIncrement() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615076-accessibilityincrement",
    "html": "Discussion\n\nIf your element has the adjustable trait, you must implement this method. Use this method to increment the value of the element. For example, a UISlider object uses this method to increment its value by an appropriate amount.\n\nSee Also\nPerforming an action\nfunc accessibilityActivate() -> Bool\nTells the element to activate itself and report the success or failure of the operation.\nfunc accessibilityDecrement()\nTells the accessibility element to decrement the value of its content.\nfunc accessibilityScroll(UIAccessibilityScrollDirection) -> Bool\nScrolls screen content in an application-specific way and returns the success or failure of the action.\nfunc accessibilityPerformEscape() -> Bool\nDismisses a modal view and returns the success or failure of the action.\nfunc accessibilityPerformMagicTap() -> Bool\nPerforms a salient action."
  },
  {
    "title": "scriptingIsGreaterThan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393831-scriptingisgreaterthan",
    "html": "See Also\nPerforming comparisons\nfunc scriptingBegins(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the beginning of object.\nfunc scriptingContains(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object contains object.\nfunc scriptingEnds(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the end of object.\nfunc scriptingIsEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is equal to object.\nfunc scriptingIsGreaterThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than or equal to object.\nfunc scriptingIsLessThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than object.\nfunc scriptingIsLessThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "scriptingBegins(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393858-scriptingbegins",
    "html": "See Also\nPerforming comparisons\nfunc scriptingContains(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object contains object.\nfunc scriptingEnds(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the end of object.\nfunc scriptingIsEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is equal to object.\nfunc scriptingIsGreaterThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than object.\nfunc scriptingIsGreaterThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than or equal to object.\nfunc scriptingIsLessThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than object.\nfunc scriptingIsLessThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "scriptingContains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393821-scriptingcontains",
    "html": "See Also\nPerforming comparisons\nfunc scriptingBegins(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the beginning of object.\nfunc scriptingEnds(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the end of object.\nfunc scriptingIsEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is equal to object.\nfunc scriptingIsGreaterThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than object.\nfunc scriptingIsGreaterThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than or equal to object.\nfunc scriptingIsLessThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than object.\nfunc scriptingIsLessThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "accessibilityArrayAttributeValues(_:index:maxCount:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1535909-accessibilityarrayattributevalue",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nParameters\nattribute\n\nThe accessibility array attribute.\n\nindex\n\nThe starting index.\n\nmaxCount\n\nThe maximum desired number of items requested.\n\nReturn Value\n\nAn array of values within the specified index and count.\n\nDiscussion\n\nNote that this method does not take a range. The maximum count is the maximum desired number of items requested by an accessibility client. This number may be beyond the bounds of your array.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "accessibilityIsAttributeSettable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1529207-accessibilityisattributesettable",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nParameters\nattribute\n\nThe name of the attribute. See Constants for lists of attribute names.\n\nReturn Value\n\ntrue if the specified attribute can be set; otherwise, false.\n\nDiscussion\n\nUser interface classes must implement this method. Subclasses should invoke the superclass's implementation, if it exists, if attribute is not implemented in the subclass.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "accessibilitySetOverrideValue(_:forAttribute:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1535843-accessibilitysetoverridevalue",
    "html": "Deprecated\n\nUse NSAccessibilityProtocol instead.\n\nParameters\nvalue\n\nThe attribute value to be set.\n\nattribute\n\nThe name of the attribute. See Constants for lists of attribute names.\n\nReturn Value\n\ntrue if the override was successful; otherwise, false.\n\nDiscussion\n\nThis method is for changing the set of attributes on an instance, as an alternative to subclassing.\n\nThis method works only on objects whose class already implements the NSAccessibility protocol. If the specified attribute is already supported by the object, the value specified by this method wins.\n\nIf the specified attribute does not exist, it is created outside the NSAccessibility protocol, so accessibilityAttributeNames still returns the old list, which does not contain the new attribute. Likewise, accessibilityAttributeValue does not return attributes created by the override process nor does it return their overridden values.\n\nThe values of overridden attributes are not settable by accessibility clients.\n\nIf you need to undo the effect of using this method, call it again, passing nil for the value.\n\nEnsure that you invoke this method on the actual object that represents the user interface element. For example, for NSButton, use the underlying NSButtonCell object. NSButton itself is ignored by accessibility.\n\nThis method works only on an object representing a single user interface element. So, for example, you cannot use it when a single object represents multiple user interface elements, as with NSSegmentedCell, which has only a single object but provides user interface elements for each segment.\n\nSee Also\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated"
  },
  {
    "title": "fileManager(_:shouldProceedAfterError:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1557005-filemanager",
    "html": "Deprecated\n\nSee delegate methods for copy, move, remove, and link methods.\n\nParameters\nmanager\n\nThe file manager that sent this message.\n\nerrorInfo\n\nA dictionary that contains two or three pieces of information (all NSString objects) related to the error:\n\nKey\n\n\t\n\nValue\n\n\n\n\n@\"Path\"\n\n\t\n\nThe path related to the error (usually the source path)\n\n\n\n\n@\"Error\"\n\n\t\n\nA description of the error\n\n\n\n\n@\"ToPath\"\n\n\t\n\nThe destination path (not all errors)\n\nReturn Value\n\ntrue if the operation (which is often continuous within a loop) should proceed, otherwise false.\n\nDiscussion\n\nAn NSFileManager object, manager, sends this message for each error it encounters when copying, moving, removing, or linking files or directories. The return value is passed back to the invoker of copyPath:toPath:handler:, movePath:toPath:handler:, removeFileAtPath:handler:, or linkPath:toPath:handler:. If an error occurs and your handler has not implemented this method, the invoking method automatically returns false.\n\nSee Also\nDeprecated Methods\nfunc changeFileAttributes([AnyHashable : Any], atPath: String) -> Bool\nChanges the attributes of a given file or directory.\nDeprecated\nfunc fileAttributes(atPath: String, traverseLink: Bool) -> [AnyHashable : Any]?\nReturns a dictionary that describes the POSIX attributes of the file specified at a given.\nDeprecated\nfunc fileSystemAttributes(atPath: String) -> [AnyHashable : Any]?\nReturns a dictionary that describes the attributes of the mounted file system on which a given path resides.\nDeprecated\nfunc directoryContents(atPath: String) -> [Any]?\nReturns the directories and files (including symbolic links) contained in a given directory.\nDeprecated\nfunc createDirectory(atPath: String, attributes: [AnyHashable : Any]) -> Bool\nCreates a directory (without contents) at a given path with given attributes.\nDeprecated\nfunc createSymbolicLink(atPath: String, pathContent: String) -> Bool\nCreates a symbolic link identified by a given path that refers to a given location.\nDeprecated\nfunc pathContentOfSymbolicLink(atPath: String) -> String?\nReturns the path of the directory or file that a symbolic link at a given path refers to.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc replaceItemAtURL(originalItemURL: NSURL, withItemAtURL: NSURL, backupItemName: String?, options: FileManager.ItemReplacementOptions) -> NSURL?\nReplaces the contents of the item at the specified URL in a manner that ensures no data loss occurs.\nDeprecated"
  },
  {
    "title": "scriptingIsLessThanOrEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393825-scriptingislessthanorequal",
    "html": "See Also\nPerforming comparisons\nfunc scriptingBegins(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the beginning of object.\nfunc scriptingContains(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object contains object.\nfunc scriptingEnds(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the end of object.\nfunc scriptingIsEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is equal to object.\nfunc scriptingIsGreaterThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than object.\nfunc scriptingIsGreaterThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than or equal to object.\nfunc scriptingIsLessThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than object."
  },
  {
    "title": "scriptingEnds(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393819-scriptingends",
    "html": "See Also\nPerforming comparisons\nfunc scriptingBegins(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the beginning of object.\nfunc scriptingContains(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object contains object.\nfunc scriptingIsEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is equal to object.\nfunc scriptingIsGreaterThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than object.\nfunc scriptingIsGreaterThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than or equal to object.\nfunc scriptingIsLessThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than object.\nfunc scriptingIsLessThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "scriptingIsEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393835-scriptingisequal",
    "html": "See Also\nPerforming comparisons\nfunc scriptingBegins(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the beginning of object.\nfunc scriptingContains(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object contains object.\nfunc scriptingEnds(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the end of object.\nfunc scriptingIsGreaterThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than object.\nfunc scriptingIsGreaterThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than or equal to object.\nfunc scriptingIsLessThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than object.\nfunc scriptingIsLessThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "mutableArrayValue(forKeyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1414937-mutablearrayvalue",
    "html": "Parameters\nkeyPath\n\nA key path, relative to the receiver, to an ordered to-many relationship.\n\nReturn Value\n\nA mutable array that provides read-write access to the ordered to-many relationship specified by keyPath.\n\nDiscussion\n\nSee mutableArrayValue(forKey:) for additional details.\n\nSee Also\nGetting Values\nfunc value(forKey: String) -> Any?\nReturns the value for the property identified by a given key.\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path.\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array.\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to a given key.\nfunc mutableArrayValue(forKey: String) -> NSMutableArray\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\nfunc mutableSetValue(forKey: String) -> NSMutableSet\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\nfunc mutableSetValue(forKeyPath: String) -> NSMutableSet\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\nfunc mutableOrderedSetValue(forKey: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\nfunc mutableOrderedSetValue(forKeyPath: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path."
  },
  {
    "title": "init(booleanLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcbool/1418732-init",
    "html": "Relationships\nFrom Protocol\nExpressibleByBooleanLiteral"
  },
  {
    "title": "takeStoredValue(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430056-takestoredvalue",
    "html": "Deprecated\n\nIf you are using the NSManagedObject class, use setPrimitiveValue(_:forKey:) instead.\n\nDiscussion\n\nThis method is used to initialize the receiver with values from an object store (generally, this storage is ultimately from a database) or to restore a value from a snapshot. The default implementation is similar to the implementation of takeValue(_:forKey:), but it resolves key with a different method/instance variable search order:\n\nSearches for a private accessor method based on key (a method preceded by an underbar). For example, with a key of “lastName”, takeStoredValue(_:forKey:) looks for a method named _setLastName:.\n\nIf a private accessor is not found, searches for an instance variable based on key and sets its value directly. For example, with a key of “lastName”, takeStoredValue(_:forKey:) looks for an instance variable named _lastName or lastName.\n\nIf neither a private accessor nor an instance variable is found, takeStoredValue(_:forKey:) searches for a public accessor method based on key. For the key “lastName”, this would be setLastName:.\n\nIf key is unknown, takeStoredValue(_:forKey:) calls handleTakeValue(_:forUnboundKey:).\n\nThis different search order allows an object to bypass processing that is performed before setting a value through a public API. However, if you always want to use the search order in takeValue(_:forKey:), you can implement the class method useStoredAccessor() to return false. And as with value(forKey:), you can prevent direct access of an instance variable with the class method accessInstanceVariablesDirectly.\n\nSee Also\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc finalize()\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc storedValue(forKey: String) -> Any?\nReturns the property identified by a given key.\nDeprecated\nfunc textStorageDidProcessEditing(Notification)\nDeprecated\nfunc textStorageWillProcessEditing(Notification)\nDeprecated\nfunc takeValue(Any?, forKey: String)\nSets the value for the property identified by key to value.\nDeprecated\nfunc takeValue(Any?, forKeyPath: String)\nSets the value for the property identified by keyPath to value.\nDeprecated\nfunc takeValues(from: [AnyHashable : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\nfunc unableToSetNil(forKey: String)\nInvoked if key is represented by a scalar attribute.\nDeprecated\nfunc values(forKeys: [Any]) -> [AnyHashable : Any]\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated"
  },
  {
    "title": "storedValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430040-storedvalue",
    "html": "Deprecated\n\nIf you are using the NSManagedObject class, use primitiveValue(forKey:) instead.\n\nDiscussion\n\nThis method is used when the value is retrieved for storage in an object store (generally, this storage is ultimately in a database) or for inclusion in a snapshot. The default implementation is similar to the implementation of value(forKey:), but it resolves key with a different method/instance variable search order:\n\nSearches for a private accessor method based on key (a method preceded by an underbar). For example, with a key of “lastName”, storedValue(forKey:) looks for a method named _getLastName or _lastName.\n\nIf a private accessor is not found, searches for an instance variable based on key and returns its value directly. For example, with a key of “lastName”, storedValue(forKey:) looks for an instance variable named _lastName or lastName.\n\nIf neither a private accessor nor an instance variable is found, storedValue(forKey:) searches for a public accessor method based on key. For the key “lastName”, this would be getLastName or lastName.\n\nIf key is unknown, storedValue(forKey:) calls handleTakeValue(_:forUnboundKey:).\n\nThis different search order allows an object to bypass processing that is performed before returning a value through a public API. However, if you always want to use the search order in value(forKey:), you can implement the class method useStoredAccessor() to return false. And as with value(forKey:), you can prevent direct access of an instance variable with the class method accessInstanceVariablesDirectly.\n\nSee Also\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc finalize()\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc textStorageDidProcessEditing(Notification)\nDeprecated\nfunc textStorageWillProcessEditing(Notification)\nDeprecated\nfunc takeStoredValue(Any?, forKey: String)\nSets the value of the property identified by a given key.\nDeprecated\nfunc takeValue(Any?, forKey: String)\nSets the value for the property identified by key to value.\nDeprecated\nfunc takeValue(Any?, forKeyPath: String)\nSets the value for the property identified by keyPath to value.\nDeprecated\nfunc takeValues(from: [AnyHashable : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\nfunc unableToSetNil(forKey: String)\nInvoked if key is represented by a scalar attribute.\nDeprecated\nfunc values(forKeys: [Any]) -> [AnyHashable : Any]\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated"
  },
  {
    "title": "workflowController(_:didError:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1419652-workflowcontroller",
    "html": "Deprecated\n\nUse workflowController(_:didError:) instead.\n\nParameters\ncontroller\n\nThe controller object sending the message.\n\nerror\n\nIf a workflow error occurs, upon return contains an instance of NSError that describes the problem.\n\nSee Also\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated"
  },
  {
    "title": "textStorageWillProcessEditing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1533957-textstoragewillprocessediting",
    "html": "See Also\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc finalize()\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc storedValue(forKey: String) -> Any?\nReturns the property identified by a given key.\nDeprecated\nfunc textStorageDidProcessEditing(Notification)\nDeprecated\nfunc takeStoredValue(Any?, forKey: String)\nSets the value of the property identified by a given key.\nDeprecated\nfunc takeValue(Any?, forKey: String)\nSets the value for the property identified by key to value.\nDeprecated\nfunc takeValue(Any?, forKeyPath: String)\nSets the value for the property identified by keyPath to value.\nDeprecated\nfunc takeValues(from: [AnyHashable : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\nfunc unableToSetNil(forKey: String)\nInvoked if key is represented by a scalar attribute.\nDeprecated\nfunc values(forKeys: [Any]) -> [AnyHashable : Any]\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated"
  },
  {
    "title": "values(forKeys:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430074-values",
    "html": "Deprecated\n\nUse dictionaryWithValues(forKeys:) instead.\n\nSee Also\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc finalize()\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc storedValue(forKey: String) -> Any?\nReturns the property identified by a given key.\nDeprecated\nfunc textStorageDidProcessEditing(Notification)\nDeprecated\nfunc textStorageWillProcessEditing(Notification)\nDeprecated\nfunc takeStoredValue(Any?, forKey: String)\nSets the value of the property identified by a given key.\nDeprecated\nfunc takeValue(Any?, forKey: String)\nSets the value for the property identified by key to value.\nDeprecated\nfunc takeValue(Any?, forKeyPath: String)\nSets the value for the property identified by keyPath to value.\nDeprecated\nfunc takeValues(from: [AnyHashable : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\nfunc unableToSetNil(forKey: String)\nInvoked if key is represented by a scalar attribute.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated"
  },
  {
    "title": "takeValue(_:forKeyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430034-takevalue",
    "html": "Deprecated\n\nUse setValue(_:forKeyPath:) instead.\n\nSee Also\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc finalize()\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc storedValue(forKey: String) -> Any?\nReturns the property identified by a given key.\nDeprecated\nfunc textStorageDidProcessEditing(Notification)\nDeprecated\nfunc textStorageWillProcessEditing(Notification)\nDeprecated\nfunc takeStoredValue(Any?, forKey: String)\nSets the value of the property identified by a given key.\nDeprecated\nfunc takeValue(Any?, forKey: String)\nSets the value for the property identified by key to value.\nDeprecated\nfunc takeValues(from: [AnyHashable : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\nfunc unableToSetNil(forKey: String)\nInvoked if key is represented by a scalar attribute.\nDeprecated\nfunc values(forKeys: [Any]) -> [AnyHashable : Any]\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated"
  },
  {
    "title": "unableToSetNil(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430080-unabletosetnil",
    "html": "Deprecated\n\nUse setNilValueForKey(_:) instead.\n\nSee Also\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc finalize()\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc storedValue(forKey: String) -> Any?\nReturns the property identified by a given key.\nDeprecated\nfunc textStorageDidProcessEditing(Notification)\nDeprecated\nfunc textStorageWillProcessEditing(Notification)\nDeprecated\nfunc takeStoredValue(Any?, forKey: String)\nSets the value of the property identified by a given key.\nDeprecated\nfunc takeValue(Any?, forKey: String)\nSets the value for the property identified by key to value.\nDeprecated\nfunc takeValue(Any?, forKeyPath: String)\nSets the value for the property identified by keyPath to value.\nDeprecated\nfunc takeValues(from: [AnyHashable : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\nfunc values(forKeys: [Any]) -> [AnyHashable : Any]\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated"
  },
  {
    "title": "textStorageDidProcessEditing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1532645-textstoragedidprocessediting",
    "html": "See Also\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc finalize()\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc storedValue(forKey: String) -> Any?\nReturns the property identified by a given key.\nDeprecated\nfunc textStorageWillProcessEditing(Notification)\nDeprecated\nfunc takeStoredValue(Any?, forKey: String)\nSets the value of the property identified by a given key.\nDeprecated\nfunc takeValue(Any?, forKey: String)\nSets the value for the property identified by key to value.\nDeprecated\nfunc takeValue(Any?, forKeyPath: String)\nSets the value for the property identified by keyPath to value.\nDeprecated\nfunc takeValues(from: [AnyHashable : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\nfunc unableToSetNil(forKey: String)\nInvoked if key is represented by a scalar attribute.\nDeprecated\nfunc values(forKeys: [Any]) -> [AnyHashable : Any]\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated"
  },
  {
    "title": "takeValues(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430035-takevalues",
    "html": "Deprecated\n\nUse setValuesForKeys(_:) instead.\n\nSee Also\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc finalize()\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc storedValue(forKey: String) -> Any?\nReturns the property identified by a given key.\nDeprecated\nfunc textStorageDidProcessEditing(Notification)\nDeprecated\nfunc textStorageWillProcessEditing(Notification)\nDeprecated\nfunc takeStoredValue(Any?, forKey: String)\nSets the value of the property identified by a given key.\nDeprecated\nfunc takeValue(Any?, forKey: String)\nSets the value for the property identified by key to value.\nDeprecated\nfunc takeValue(Any?, forKeyPath: String)\nSets the value for the property identified by keyPath to value.\nDeprecated\nfunc unableToSetNil(forKey: String)\nInvoked if key is represented by a scalar attribute.\nDeprecated\nfunc values(forKeys: [Any]) -> [AnyHashable : Any]\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated"
  },
  {
    "title": "fontManager(_:willIncludeFont:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1462359-fontmanager",
    "html": "Deprecated\n\nUse NSFontCollection for providing filtered font lists.\n\nParameters\ntheFontManager\n\nThe font manager making the request.\n\nfontName\n\nThe full PostScript name of the font to display, such as Helvetica-BoldOblique or Helvetica-Narrow-Bold.\n\nReturn Value\n\nIf the Font panel delegate returns true, fontName is listed; if the delegate returns false, it isn’t.\n\nDiscussion\n\nIn macOS versions 10.2 and earlier, this method is invoked repeatedly as necessary whenever the Font panel needs updating, such as when the Font panel is first loaded, and when the user selects a family name to see which typefaces in that family are available. Your implementation should execute fairly quickly to ensure the responsiveness of the Font panel.\n\nImportant\n\nThis delegate method is not called in macOS versions 10.3 and later.\n\nSee Also\nMethods\nfunc availableFontNames(matching: NSFontDescriptor) -> [Any]?\nReturns the names of the fonts that match the attributes in the given font descriptor.\nDeprecated\nfunc fontDescriptors(inCollection: String) -> [Any]?\nReturns an array of the font descriptors in the specified collection.\nDeprecated\nfunc addCollection(String, options: NSFontCollectionOptions) -> Bool\nAdds a specified font collection to the font manager with a given set of options.\nDeprecated\nfunc removeCollection(String) -> Bool\nRemoves the specified font collection.\nDeprecated\nfunc addFontDescriptors([Any], toCollection: String)\nAdds an array of font descriptors to the specified font collection.\nDeprecated\nfunc removeFontDescriptor(NSFontDescriptor, fromCollection: String)\nRemoves the specified font descriptor from the specified collection.\nDeprecated"
  },
  {
    "title": "workflowController(_:didRun:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1419675-workflowcontroller",
    "html": "Deprecated\n\nUse workflowController(_:didRun:) instead.\n\nParameters\ncontroller\n\nThe controller object sending the message.\n\naction\n\nThe workflow action that ran.\n\nSee Also\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated"
  },
  {
    "title": "namesOfPromisedFilesDropped(atDestination:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416082-namesofpromisedfilesdropped",
    "html": "Parameters\ndropDestination\n\nA URL object that identifies the location at which the promised files will be created.\n\nReturn Value\n\nAn array of the names of files (not full paths) that the receiver promises to create at dropDestination.\n\nDiscussion\n\nThis method is invoked when the drop has been accepted by the destination and the destination, in the case of another Cocoa application, invokes the NSDraggingInfo method namesOfPromisedFilesDropped(atDestination:). For long operations, you can cache dropDestination and defer the creation of the files until the draggedImage:endedAt:operation: method to avoid blocking the destination application."
  },
  {
    "title": "workflowController(_:willRun:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1419720-workflowcontroller",
    "html": "Deprecated\n\nUse workflowController(_:willRun:) instead.\n\nParameters\ncontroller\n\nThe controller object sending the message.\n\naction\n\nThe workflow action that will run.\n\nSee Also\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated"
  },
  {
    "title": "objectForWebScript | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1537612-objectforwebscript",
    "html": "Return Value\n\nAn object representing the plug-in’s scripting interface.\n\nDiscussion\n\nThe methods of the object are exposed to the script environment. Messages sent to the returned object will be invoked in the scripting environment. See the WebScripting Protocol Reference informal protocol for more details."
  },
  {
    "title": "webPlugInDestroy() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1536659-webplugindestroy",
    "html": "Discussion\n\nTypically, this method frees the memory and other resources used by the plug-in. For example, if the plug-in had a copy of a WebPlugInContainer object, this method should relinquish ownership of that object. Do not send any other messages to the plug-in after invoking this method, because calling this method destroys the plug-in. No other methods in this interface may be called after the application has called this method.\n\nSee Also\nControlling the Plug-in\nfunc webPlugInInitialize()\nInitializes the plug-in.\nfunc webPlugInStart()\nTells the plug-in to start normal operation.\nfunc webPlugInStop()\nTells the plug-in to stop normal operation."
  },
  {
    "title": "webPlugInInitialize() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1537623-webplugininitialize",
    "html": "Discussion\n\nTells the plug-in to perform one-time initialization. This method must be called only once per instance of the plug-in object, before any other methods in the protocol are called.\n\nSee Also\nControlling the Plug-in\nfunc webPlugInDestroy()\nPrepares the plug-in for deallocation.\nfunc webPlugInStart()\nTells the plug-in to start normal operation.\nfunc webPlugInStop()\nTells the plug-in to stop normal operation."
  },
  {
    "title": "webPlugInSetIsSelected(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1536477-webpluginsetisselected",
    "html": "Parameters\nisSelected\n\nIf true, the plug-in is currently selected. Otherwise, it is not selected.\n\nDiscussion\n\nThis may be used, for example, to change the plug-in’s appearance when it is selected by the user."
  },
  {
    "title": "webPlugInMainResourceDidReceive(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1536424-webpluginmainresourcedidreceive",
    "html": "Parameters\ndata\n\nThe newly available data.\n\nDiscussion\n\nThis message is invoked when the WebPlugInShouldLoadMainResourceKey plug-in command-line argument is set to false and the underlying NSURLConnection object for the main resource sends the connection:didReceiveData: message to its delegate.\n\nSee Also\nMain resource messages\nfunc webPlugInMainResourceDidFailWithError(Error!)\nInvoked when an error occurs loading the main resource.\nfunc webPlugInMainResourceDidFinishLoading()\nInvoked when the connection successfully finishes loading data.\nfunc webPlugInMainResourceDidReceive(URLResponse!)\nInvoked when the connection receives sufficient data to construct the URL response for its request."
  },
  {
    "title": "webPlugInMainResourceDidReceive(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1537895-webpluginmainresourcedidreceive",
    "html": "Parameters\nresponse\n\nThe URL response for the connection's request.\n\nDiscussion\n\nThis message is invoked when the WebPlugInShouldLoadMainResourceKey plug-in command-line argument is set to false and the underlying NSURLConnection object for the main resource sends the connection:didReceiveResponse: message to its delegate.\n\nSee Also\nMain resource messages\nfunc webPlugInMainResourceDidFailWithError(Error!)\nInvoked when an error occurs loading the main resource.\nfunc webPlugInMainResourceDidFinishLoading()\nInvoked when the connection successfully finishes loading data.\nfunc webPlugInMainResourceDidReceive(Data!)\nInvoked when the connection loads data incrementally."
  },
  {
    "title": "init(object:keyPath:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/keyvalueobservingpublisher/3338905-init",
    "html": "Parameters\nobject\n\nThe object that contains the property to publish.\n\nkeyPath\n\nThe key path, relative to the object receiving this message, of the property to publish.\n\noptions\n\nOptions that determine which elements the publisher produces. Set this parameter to [] to receive new elements when the observed property changes.\n\nDiscussion\n\nThis publisher produces a new element every time the observed property changes."
  },
  {
    "title": "keyPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/keyvalueobservingpublisher/3334854-keypath",
    "html": "See Also\nInspecting KVO Publisher Properties\nlet object: Subject\nThe object that contains the property to publish.\nlet options: NSKeyValueObservingOptions\nOptions that determine which elements the publisher produces."
  },
  {
    "title": "object | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/keyvalueobservingpublisher/3334841-object",
    "html": "See Also\nInspecting KVO Publisher Properties\nlet keyPath: KeyPath<Subject, Value>\nThe key path, relative to the object receiving this message, of the property to publish.\nlet options: NSKeyValueObservingOptions\nOptions that determine which elements the publisher produces."
  },
  {
    "title": "accessibilityElementCount() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615149-accessibilityelementcount",
    "html": "Return Value\n\nThe number of accessibility elements in the container. By default, this method returns 0.\n\nSee Also\nProviding information about accessibility elements\nfunc accessibilityElement(at: Int) -> Any?\nReturns the accessibility element at the specified index.\nfunc index(ofAccessibilityElement: Any) -> Int\nReturns the index of the specified accessibility element.\nvar accessibilityElements: [Any]?\nAn array of the accessibility elements in the container.\nvar automationElements: [Any]?\nAn array of the automation elements in the container.\nvar accessibilityContainerType: UIAccessibilityContainerType\nThe type of container used for accessibility elements, such as tables or lists.\nenum UIAccessibilityContainerType\nConstants that indicate the type of content in a data-based container."
  },
  {
    "title": "accessibilityElement(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615084-accessibilityelement",
    "html": "Parameters\nindex\n\nThe index of the accessibility element.\n\nReturn Value\n\nThe accessibility element at the specified index, or nil if none exists.\n\nSee Also\nProviding information about accessibility elements\nfunc accessibilityElementCount() -> Int\nReturns the number of accessibility elements in the container.\nfunc index(ofAccessibilityElement: Any) -> Int\nReturns the index of the specified accessibility element.\nvar accessibilityElements: [Any]?\nAn array of the accessibility elements in the container.\nvar automationElements: [Any]?\nAn array of the automation elements in the container.\nvar accessibilityContainerType: UIAccessibilityContainerType\nThe type of container used for accessibility elements, such as tables or lists.\nenum UIAccessibilityContainerType\nConstants that indicate the type of content in a data-based container."
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/selector/1642780-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable"
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952751-foreach",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/selector/1418942-init",
    "html": "Parameters\nvalue\n\nThe value of the new instance.\n\nDiscussion\n\nNote\n\nThis documentation comment was inherited from ExpressibleByExtendedGraphemeClusterLiteral."
  },
  {
    "title": "accessibilityAttributedValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/2866105-accessibilityattributedvalue",
    "html": "Discussion\n\nSetting this property changes the value of the accessibilityValue property.\n\nThis attributed version allows for the inclusion of language attributes in the string to control pronunciation or accents.\n\nSee Also\nDefining accessibility text and language\nSpeech attributes for attributed strings\nApply attributes to text in an attributed string to modify the pronunciation of that text.\nText attributes for attributed strings\nApply attributes to text in an attributed string to convey extra information about the text.\nvar accessibilityHeaderElements: [Any]?\nAn array of elements that serves as the headers for the accessibility element.\nvar accessibilityAttributedHint: NSAttributedString?\nThe underlying attributed version of the accessibility hint.\nvar accessibilityAttributedLabel: NSAttributedString?\nThe underlying attributed version of the accessibility label.\nvar accessibilityLanguage: String?\nThe language to use when speaking the accessibility element's label, value, and hint.\nvar accessibilityTextualContext: UIAccessibilityTextualContext?\nA named context that helps identify and classify the type of text inside an element.\nvar accessibilityUserInputLabels: [String]!\nAn array of localized labels the user provides to refer to the accessibility element.\nvar accessibilityAttributedUserInputLabels: [NSAttributedString]!\nThe underlying attributed versions of the accessibility user input labels."
  },
  {
    "title": "accessibilityViewIsModal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615089-accessibilityviewismodal",
    "html": "Discussion\n\nThe default value for this property is false. When the value of this property is true, VoiceOver ignores the accessibility elements within the sibling views of the receiving view.\n\nFor example, in a window that contains sibling views A and B, setting accessibilityViewIsModal to true on view B causes VoiceOver to ignore the accessibility elements in view A. However, if view B contains a child view C and you set accessibilityViewIsModal to true on view C, VoiceOver does not ignore the accessibility elements in view A.\n\nSee Also\nConfiguring behavior\nvar accessibilityCustomRotors: [UIAccessibilityCustomRotor]?\nAn array of custom rotors for the current accessibility element.\nvar accessibilityElementsHidden: Bool\nA Boolean value that indicates whether to hide the accessibility elements.\nvar accessibilityRespondsToUserInteraction: Bool\nA Boolean value that indicates whether the accessibility element performs an action due to user interaction.\nvar shouldGroupAccessibilityChildren: Bool\nA Boolean value that indicates whether VoiceOver groups the accessibility elements that are children of the element, regardless of their positions on the screen.\nvar accessibilityDirectTouchOptions: UIAccessibility.DirectTouchOptions\nA value that configures how VoiceOver produces audio for direct touch areas.\nstruct UIAccessibility.DirectTouchOptions\nConstants that configure how VoiceOver produces audio for direct touch areas."
  },
  {
    "title": "accessibilityDropPointDescriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/2891048-accessibilitydroppointdescriptor",
    "html": "Discussion\n\nTo restore the default automatic behavior for this property, assign or return the default value of nil.\n\nNote\n\nA value of nil does not describe the same behavior as the empty array, which specifies that there are no relevant interactions for this element.\n\nSee Also\nFine-Tuning Drag and Drop\nvar accessibilityDragSourceDescriptors: [UIAccessibilityLocationDescriptor]?\nAn array of location descriptor objects that you use to define what drags are possible from this element."
  },
  {
    "title": "invokeDefaultMethod(withArguments:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1528543-invokedefaultmethod",
    "html": "Parameters\nargs\n\nThe arguments to be passed to the default method.\n\nReturn Value\n\nThe result of invoking the default method.\n\nSee Also\nInvoking methods\nfunc invokeUndefinedMethod(fromWebScript: String!, withArguments: [Any]!) -> Any!\nHandles undefined method invocation from the scripting environment."
  },
  {
    "title": "makeIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952755-makeiterator",
    "html": "Relationships\nFrom Protocol\nSequence"
  },
  {
    "title": "isSelectorExcluded(fromWebScript:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1528532-isselectorexcluded",
    "html": "Parameters\naSelector\n\nThe selector.\n\nReturn Value\n\ntrue if the selector specified by aSelector should be hidden from the scripting environment; otherwise, false.\n\nDiscussion\n\nOnly methods with valid parameters and return types are exported to the WebKit JavaScript environment. The valid types are Objective-C objects and scalars. The default value is true.\n\nSee Also\nGetting attributes\nclass func webScriptName(forKey: UnsafePointer<CChar>!) -> String!\nReturns the scripting environment name for an attribute specified by a key.\nclass func webScriptName(for: Selector!) -> String!\nReturns the scripting environment name for a selector.\nclass func isKeyExcluded(fromWebScript: UnsafePointer<CChar>!) -> Bool\nReturns whether a key should be hidden from the scripting environment."
  },
  {
    "title": "accessibilityHitTest(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1526136-accessibilityhittest",
    "html": "Parameters\npoint\n\nThe point being hit-tested, in lower-left relative screen coordinates.\n\nReturn Value\n\nThe deepest accessibility element in the accessibility hierarchy that contains the specified point.\n\nDiscussion\n\nYou can assume that the specified point has already been determined to lie within the accessibility element's frame. Override this method to do deeper hit-testing by identifying which child element, if any, contains the point. NSMatrix, for example, identifies which of its cells contains the point and propagates the hit-test to it.\n\nIf the specified point is not contained within one of the accessibility element's children, either return self or, if available, invoke the superclass's implementation. The default NSView and NSCell implementations test whether the accessibility element is an ignored element and, if it is, return the receiver's first unignored parent; otherwise they return self.\n\nSee Also\nAvailable Methods and Properties\nvar accessibilityFocusedUIElement: Any?\nThe deepest descendant of the accessibility hierarchy that has the focus.\nvar accessibilityNotifiesWhenDestroyed: Bool\nA Boolean value that indicates whether a custom accessibility object sends a notification when its corresponding UI element is destroyed."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcbool/1418657-description",
    "html": "Relationships\nFrom Protocol\nCustomStringConvertible"
  },
  {
    "title": "customMirror | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcbool/1642778-custommirror",
    "html": "Relationships\nFrom Protocol\nCustomReflectable"
  },
  {
    "title": "mutableOrderedSetValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415479-mutableorderedsetvalue",
    "html": "Parameters\nkey\n\nThe name of a uniquing ordered to-many relationship.\n\nReturn Value\n\nA mutable ordered set that provides read-write access to the uniquing to-many relationship specified by key.\n\nDiscussion\n\nObjects added to the mutable set proxy become related to the receiver, and objects removed from the mutable set become unrelated. The default implementation recognizes the same simple accessor methods and set accessor methods as value(forKey:), and follows the same direct instance variable access policies, but always returns a mutable collection proxy object instead of the immutable collection that value(forKey:) would return.\n\nThe search pattern that mutableOrderedSetValueForKey: uses is described in Accessor Search Patterns in Key-Value Coding Programming Guide.\n\nSee Also\nGetting Values\nfunc value(forKey: String) -> Any?\nReturns the value for the property identified by a given key.\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path.\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array.\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to a given key.\nfunc mutableArrayValue(forKey: String) -> NSMutableArray\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\nfunc mutableArrayValue(forKeyPath: String) -> NSMutableArray\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\nfunc mutableSetValue(forKey: String) -> NSMutableSet\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\nfunc mutableSetValue(forKeyPath: String) -> NSMutableSet\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\nfunc mutableOrderedSetValue(forKeyPath: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path."
  },
  {
    "title": "accessibilityFocusedUIElement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1526100-accessibilityfocuseduielement",
    "html": "Discussion\n\nYou can assume that the search for the focus has already been narrowed down to the accessibility element. Override this method to do deeper searching by identifying which child element, if any, may have the focus. If a child element does not have the focus, either return self or, if available, invoke the superclass's implementation. The default NSView and NSCell implementations test whether the accessibility element is an ignored element and, if so, return the element’s first unignored parent; otherwise they return self\n\nSee Also\nAvailable Methods and Properties\nfunc accessibilityHitTest(NSPoint) -> Any?\nReturns the deepest descendant of the accessibility hierarchy that contains the specified point.\nvar accessibilityNotifiesWhenDestroyed: Bool\nA Boolean value that indicates whether a custom accessibility object sends a notification when its corresponding UI element is destroyed."
  },
  {
    "title": "mutableSetValue(forKeyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1408115-mutablesetvalue",
    "html": "Parameters\nkeyPath\n\nA key path, relative to the receiver, to an unordered to-many relationship.\n\nReturn Value\n\nA mutable set that provides read-write access to the unordered to-many relationship specified by keyPath.\n\nDiscussion\n\nSee mutableSetValue(forKey:) for additional details.\n\nSee Also\nGetting Values\nfunc value(forKey: String) -> Any?\nReturns the value for the property identified by a given key.\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path.\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array.\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to a given key.\nfunc mutableArrayValue(forKey: String) -> NSMutableArray\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\nfunc mutableArrayValue(forKeyPath: String) -> NSMutableArray\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\nfunc mutableSetValue(forKey: String) -> NSMutableSet\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\nfunc mutableOrderedSetValue(forKey: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\nfunc mutableOrderedSetValue(forKeyPath: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path."
  },
  {
    "title": "value(withUniqueID:inPropertyWithKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1407321-value",
    "html": "Discussion\n\nThe method valueIn<Key>WithUniqueID: is invoked if it exists. Otherwise, raises an NSUndefinedKeyException. The declared type of uniqueID in the constructed method must be id, NSNumber *, NSString *, or one of the scalar types that can be encapsulated by NSNumber.\n\nSee Also\nAccess by name, key, or ID\nfunc insertValue(Any, inPropertyWithKey: String)\nInserts an object in the collection specified by the passed key.\nfunc value(withName: String, inPropertyWithKey: String) -> Any?\nRetrieves a named object from the collection specified by the passed key."
  },
  {
    "title": "setValuesForKeys(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417515-setvaluesforkeys",
    "html": "Parameters\nkeyedValues\n\nA dictionary whose keys identify properties in the receiver. The values of the properties in the receiver are set to the corresponding values in the dictionary.\n\nDiscussion\n\nThe default implementation invokes setValue(_:forKey:) for each key-value pair, substituting nil for NSNull values in keyedValues.\n\nSee Also\nSetting Values\nfunc setValue(Any?, forKeyPath: String)\nSets the value for the property identified by a given key path to a given value.\nfunc setNilValueForKey(String)\nInvoked by setValue(_:forKey:) when it’s given a nil value for a scalar value (such as an int or float).\nfunc setValue(Any?, forKey: String)\nSets the property of the receiver specified by a given key to a given value.\nfunc setValue(Any?, forUndefinedKey: String)\nInvoked by setValue(_:forKey:) when it finds no property for a given key.\nRelated Documentation\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array."
  },
  {
    "title": "setValue(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415969-setvalue",
    "html": "Parameters\nvalue\n\nThe value for the property identified by key.\n\nkey\n\nThe name of one of the receiver's properties.\n\nDiscussion\n\nIf key identifies a to-one relationship, relate the object specified by value to the receiver, unrelating the previously related object if there was one. Given a collection object and a key that identifies a to-many relationship, relate the objects contained in the collection to the receiver, unrelating previously related objects if there were any.\n\nThe search pattern that setValue:forKey: uses is described in Accessor Search Patterns in Key-Value Coding Programming Guide.\n\nIn a reference-counted environment, if the instance variable is accessed directly, value is retained.\n\nSee Also\nSetting Values\nfunc setValue(Any?, forKeyPath: String)\nSets the value for the property identified by a given key path to a given value.\nfunc setValuesForKeys([String : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties.\nfunc setNilValueForKey(String)\nInvoked by setValue(_:forKey:) when it’s given a nil value for a scalar value (such as an int or float).\nfunc setValue(Any?, forUndefinedKey: String)\nInvoked by setValue(_:forKey:) when it finds no property for a given key."
  },
  {
    "title": "setNilValueForKey(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415174-setnilvalueforkey",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nDiscussion\n\nSubclasses can override this method to handle the request in some other way, such as by substituting 0 or a sentinel value for nil and invoking setValue(_:forKey:) again or setting the variable directly. The default implementation raises an NSInvalidArgumentException.\n\nSee Also\nSetting Values\nfunc setValue(Any?, forKeyPath: String)\nSets the value for the property identified by a given key path to a given value.\nfunc setValuesForKeys([String : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties.\nfunc setValue(Any?, forKey: String)\nSets the property of the receiver specified by a given key to a given value.\nfunc setValue(Any?, forUndefinedKey: String)\nInvoked by setValue(_:forKey:) when it finds no property for a given key."
  },
  {
    "title": "setValue(_:forKeyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418139-setvalue",
    "html": "Parameters\nvalue\n\nThe value for the property identified by keyPath.\n\nkeyPath\n\nA key path of the form relationship.property (with one or more relationships): for example “department.name” or “department.manager.lastName.”\n\nDiscussion\n\nThe default implementation of this method gets the destination object for each relationship using value(forKey:), and sends the final object a setValue(_:forKey:) message.\n\nSpecial Considerations\n\nWhen using this method, and the destination object does not implement an accessor for the value, the default behavior is for that object to retain value rather than copy or assign value.\n\nSee Also\nSetting Values\nfunc setValuesForKeys([String : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties.\nfunc setNilValueForKey(String)\nInvoked by setValue(_:forKey:) when it’s given a nil value for a scalar value (such as an int or float).\nfunc setValue(Any?, forKey: String)\nSets the property of the receiver specified by a given key to a given value.\nfunc setValue(Any?, forUndefinedKey: String)\nInvoked by setValue(_:forKey:) when it finds no property for a given key.\nRelated Documentation\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path."
  },
  {
    "title": "setValue(_:forUndefinedKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1413490-setvalue",
    "html": "Parameters\nvalue\n\nThe value for the key identified by key.\n\nkey\n\nA string that is not equal to the name of any of the receiver's properties.\n\nDiscussion\n\nSubclasses can override this method to handle the request in some other way. The default implementation raises an NSUndefinedKeyException.\n\nSee Also\nSetting Values\nfunc setValue(Any?, forKeyPath: String)\nSets the value for the property identified by a given key path to a given value.\nfunc setValuesForKeys([String : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties.\nfunc setNilValueForKey(String)\nInvoked by setValue(_:forKey:) when it’s given a nil value for a scalar value (such as an int or float).\nfunc setValue(Any?, forKey: String)\nSets the property of the receiver specified by a given key to a given value.\nRelated Documentation\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by when it finds no property corresponding to a given key."
  },
  {
    "title": "validateValue(_:forKeyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416245-validatevalue",
    "html": "Parameters\nioValue\n\nA pointer to a new value for the property identified by inKeyPath. This method may modify or replace the value in order to make it valid.\n\ninKeyPath\n\nThe name of one of the receiver's properties. The key path must specify an attribute or a to-one relationship. The key path has the form relationship.property (with one or more relationships); for example department.name or department.manager.lastName.\n\nReturn Value\n\nA Boolean that is true if the value pointed at by ioValue is valid for the property identified by inKeyPath, or if the method is able to modify the value at ioValue to make it valid; otherwise false.\n\nDiscussion\n\nThe default implementation of this function gets the destination instance for each relationship using value(forKey:) and then calls the validateValue(_:forKey:) function for the property. The outcome of that call determines whether this one throws an error or not.\n\nSee Also\nValidation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nThrows an error when the value specified by a given pointer is not valid or can't be made valid for the property identified by a given key."
  },
  {
    "title": "validateValue(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416754-validatevalue",
    "html": "Parameters\nioValue\n\nA pointer to a new value for the property identified by inKey. This method may modify or replace the value in order to make it valid.\n\ninKey\n\nThe name of one of the receiver's properties. The key must specify an attribute or a to-one relationship.\n\nReturn Value\n\nA Boolean set to true if the value pointed at by ioValue is valid for the property identified by inKey, or if the method is able to modify the value at ioValue to make it valid; otherwise false.\n\nDiscussion\n\nThe default implementation of this function searches the class of the receiver for a property specific validation function with a particular signature, allowing that function to determine the outcome of the validation. For it to be found, the property specific validation function must be exposed to Objective-C, must be named according to the pattern validate<InKey>, must take a single, optional AnyObject pointer argument, and must throw. For example, for a property named someString, the validation function is:\n\n@objc func validateSomeString(_ ioValue: AutoreleasingUnsafeMutablePointer<AnyObject?>) throws {\n    // Test, and possibly replace the value here; or throw an error\n}\n\n\nIf you define such a function, the default implementation of validateValue(_:forKey:) calls it when asked to validate the corresponding property, allowing your function to either alter the input value or throw an error.\n\nIf no such function exists for a particular property, validateValue(_:forKey:)returns without taking any other action. In other words, by default, the general validation call succeeds if you don't explicitly provide a validation function for the given property.\n\nNote\n\nYou typically use the validation described here only in Objective-C. In Swift, property validation is more idiomatically handled by relying on compiler support for optionals and strong type checking, while using the built-in willSet and didSet property observers to test any run-time API contracts, as described in the Property Observers section of The Swift Programming Language (Swift 4.1).\n\nSee Adding Validation in Key-Value Coding Programming Guide for more information.\n\nSee Also\nValidation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKeyPath: String)\nThrows an error when the value specified by a given pointer is not valid for a given key path relative to the receiver."
  },
  {
    "title": "infoForBinding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458122-infoforbinding",
    "html": "Parameters\nbinding\n\nThe name of a binding.\n\nReturn Value\n\nA dictionary with information about binding, or nil if the binding is not bound. The dictionary contains three key/value pairs: NSObservedObjectKey: object bound, NSObservedKeyPathKey: key path bound, NSOptionsKey: dictionary with the options and their values for the bindings.\n\nDiscussion\n\nThis method is mostly for use by subclasses which want to analyze the existing bindings of an object.\n\nSee Also\nManaging bindings\nfunc valueClassForBinding(NSBindingName) -> AnyClass?\nReturns the class of the value that will be returned for the specified binding.\nfunc bind(NSBindingName, to: Any, withKeyPath: String, options: [NSBindingOption : Any]?)\nEstablishes a binding between a given property of the receiver and the property of a given object specified by a given key path.\nfunc optionDescriptionsForBinding(NSBindingName) -> [NSAttributeDescription]\nReturns an array describing the options for the specified binding.\nstruct NSBindingInfoKey\nfunc unbind(NSBindingName)\nRemoves a given binding between the receiver and a controller.\nfunc NSIsControllerMarker(Any?) -> Bool\nTests whether a given object is special marker object used for indicating the state of a selection in relation to a key."
  },
  {
    "title": "valueClassForBinding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458101-valueclassforbinding",
    "html": "Parameters\nbinding\n\nThe name of a binding.\n\nReturn Value\n\nThe class of the value that will be returned for binding.\n\nDiscussion\n\nThis method is used by Interface Builder to determine the appropriate transformers for a binding.\n\nImplementation of this method is optional.\n\nSee Also\nManaging bindings\nfunc bind(NSBindingName, to: Any, withKeyPath: String, options: [NSBindingOption : Any]?)\nEstablishes a binding between a given property of the receiver and the property of a given object specified by a given key path.\nfunc optionDescriptionsForBinding(NSBindingName) -> [NSAttributeDescription]\nReturns an array describing the options for the specified binding.\nfunc infoForBinding(NSBindingName) -> [NSBindingInfoKey : Any]?\nReturns a dictionary describing the receiver’s binding.\nstruct NSBindingInfoKey\nfunc unbind(NSBindingName)\nRemoves a given binding between the receiver and a controller.\nfunc NSIsControllerMarker(Any?) -> Bool\nTests whether a given object is special marker object used for indicating the state of a selection in relation to a key."
  },
  {
    "title": "optionDescriptionsForBinding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458174-optiondescriptionsforbinding",
    "html": "Parameters\nbinding\n\nThe name of a binding\n\nReturn Value\n\nReturns an array of NSAttributeDescription that describe the options for binding.\n\nDiscussion\n\nThe NSAttributeDescription instances in the array are used by Interface Builder to build the options editor user interface of the bindings inspector.\n\nThe option name displayed for the option in the bindings inspector is based on the value of the NSAttributeDescription method name.\n\nThe type of editor displayed for the option in the bindings inspector is based on the value of the NSAttributeDescription method attributeType.\n\nThe default value displayed in the bindings inspector for the option is based on the value of the NSAttributeDescription method defaultValue.\n\nSee Also\nManaging bindings\nfunc valueClassForBinding(NSBindingName) -> AnyClass?\nReturns the class of the value that will be returned for the specified binding.\nfunc bind(NSBindingName, to: Any, withKeyPath: String, options: [NSBindingOption : Any]?)\nEstablishes a binding between a given property of the receiver and the property of a given object specified by a given key path.\nfunc infoForBinding(NSBindingName) -> [NSBindingInfoKey : Any]?\nReturns a dictionary describing the receiver’s binding.\nstruct NSBindingInfoKey\nfunc unbind(NSBindingName)\nRemoves a given binding between the receiver and a controller.\nfunc NSIsControllerMarker(Any?) -> Bool\nTests whether a given object is special marker object used for indicating the state of a selection in relation to a key."
  },
  {
    "title": "accessibilityNavigationStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615200-accessibilitynavigationstyle",
    "html": "Discussion\n\nSome assistive technologies let the user select a parent view or container in order to navigate its elements. This property controls whether that behavior applies to the current object. Switch Control uses this technology, but VoiceOver and other assistive technologies do not.\n\nThe default value of this property is UIAccessibilityNavigationStyle.automatic.\n\nSee Also\nNavigating elements\nUIAccessibilityContainer\nProvide a set of methods that view subclasses use to make subcomponents accessible as separate elements.\nvar accessibilityActivationPoint: CGPoint\nThe activation point for the accessibility element in screen coordinates.\nvar accessibilityFocusedUIElement: Any?\nThe deepest descendant of the accessibility hierarchy that has the focus.\nvar accessibilityFrame: CGRect\nThe frame of the accessibility element in screen coordinates.\nfunc accessibilityHitTest(NSPoint) -> Any?\nReturns the deepest descendant of the accessibility hierarchy that contains the specified point.\nenum UIAccessibilityNavigationStyle\nConstants that describe how to navigate an object’s elements with an assistive app.\nvar accessibilityPath: UIBezierPath?\nThe path of the element in screen coordinates.\nstatic func zoomFocusChanged(zoomType: UIAccessibility.ZoomType, toFrame: CGRect, in: UIView)\nNotifies the system when the app’s focus changes to a new location.\nenum UIAccessibility.ZoomType\nThe types of system Zoom that can be in effect.\nstatic var assistiveTouch: UIGuidedAccessAccessibilityFeature\nThe AssistiveTouch accessibility feature."
  },
  {
    "title": "accessibilityPath | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615159-accessibilitypath",
    "html": "Discussion\n\nThe default value of this property is nil. If no path is set, the accessibility frame rectangle is used to highlight the element.\n\nWhen you specify a value for this property, the assistive technology uses the path object you specify (in addition to the accessibility frame, and not in place of it) to highlight the element.\n\nSee Also\nNavigating elements\nUIAccessibilityContainer\nProvide a set of methods that view subclasses use to make subcomponents accessible as separate elements.\nvar accessibilityActivationPoint: CGPoint\nThe activation point for the accessibility element in screen coordinates.\nvar accessibilityFocusedUIElement: Any?\nThe deepest descendant of the accessibility hierarchy that has the focus.\nvar accessibilityFrame: CGRect\nThe frame of the accessibility element in screen coordinates.\nfunc accessibilityHitTest(NSPoint) -> Any?\nReturns the deepest descendant of the accessibility hierarchy that contains the specified point.\nvar accessibilityNavigationStyle: UIAccessibilityNavigationStyle\nThe navigation style to apply to the object and its elements.\nenum UIAccessibilityNavigationStyle\nConstants that describe how to navigate an object’s elements with an assistive app.\nstatic func zoomFocusChanged(zoomType: UIAccessibility.ZoomType, toFrame: CGRect, in: UIView)\nNotifies the system when the app’s focus changes to a new location.\nenum UIAccessibility.ZoomType\nThe types of system Zoom that can be in effect.\nstatic var assistiveTouch: UIGuidedAccessAccessibilityFeature\nThe AssistiveTouch accessibility feature."
  },
  {
    "title": "bind(_:to:withKeyPath:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458185-bind",
    "html": "Parameters\nbinding\n\nThe key path for a property of the receiver previously exposed using the exposeBinding(_:) method.\n\nobservableController\n\nThe bound-to object.\n\nkeyPath\n\nA key path to a property reachable from observableController. The elements in the path must be key-value observing compliant (see Key-Value Observing Programming Guide).\n\noptions\n\nA dictionary containing options for the binding, such as placeholder objects or an NSValueTransformer identifier as described in Constants. This value is optional—pass nil to specify no options.\n\nSee Also\nManaging bindings\nfunc valueClassForBinding(NSBindingName) -> AnyClass?\nReturns the class of the value that will be returned for the specified binding.\nfunc optionDescriptionsForBinding(NSBindingName) -> [NSAttributeDescription]\nReturns an array describing the options for the specified binding.\nfunc infoForBinding(NSBindingName) -> [NSBindingInfoKey : Any]?\nReturns a dictionary describing the receiver’s binding.\nstruct NSBindingInfoKey\nfunc unbind(NSBindingName)\nRemoves a given binding between the receiver and a controller.\nfunc NSIsControllerMarker(Any?) -> Bool\nTests whether a given object is special marker object used for indicating the state of a selection in relation to a key."
  },
  {
    "title": "accessibilityHint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615093-accessibilityhint",
    "html": "Discussion\n\nThe default value for this property is nil unless the element is a UIKit control, in which case, the value is a system-provided hint that derives from the type of control.\n\nAn accessibility hint helps users understand what happens when they perform an action on the accessibility element when that result isn't obvious from the accessibility label. For example, if you provide an Add button in your app, the button’s accessibility label helps users understand that tapping the button adds values in the app. If, however, your app allows users to play a song by tapping its title in a list of song titles, the accessibility label for the list row doesn't tell users that. To help an assistive app provide this information to users with disabilities, an appropriate hint for the list row is “Plays the song.”\n\nFollow these guidelines to create a hint for an accessibility element:\n\nBegin with a verb that explains the results of the action in a very brief phrase, like “Plays the song” or “Purchases the item.”\n\nAvoid beginning the phrase with the imperative form of a verb because that can make the hint sound like a command. For example, don't create hints like “Play the song” or “Purchase the item.”\n\nDon’t include the action type in the hint. For example, don't create hints like “Tap to play the song” or “Tapping plays the song.”\n\nDon’t include the control or view type in the hint. For example, don't create hints like “Plays the song in the row” or “Button that adds a contact name.”\n\nSee Also\nSupporting basic accessibility\nvar isAccessibilityElement: Bool\nA Boolean value that indicates whether the element is an accessibility element that an assistive app can access.\nvar accessibilityLabel: String?\nA succinct label in a localized string that identifies the accessibility element.\nvar accessibilityValue: String?\nA localized string that contains the value of the accessibility element.\nvar accessibilityTraits: UIAccessibilityTraits\nThe combination of accessibility traits that best characterizes the accessibility element.\nstruct UIAccessibilityTraits\nConstants that describe how an accessibility element behaves."
  },
  {
    "title": "Binding Dictionary Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nskeyvaluebindingcreation/binding_dictionary_keys",
    "html": "Topics\nConstants\nstatic let observedObject: NSBindingInfoKey\nThe object that is the observable controller of the binding.\nstatic let observedKeyPath: NSBindingInfoKey\nAn NSString object containing the key path of the binding.\nstatic let options: NSBindingInfoKey\nAn NSDictionary object containing key value pairs as specified in the options dictionary when the binding was created."
  },
  {
    "title": "unbind(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458088-unbind",
    "html": "Parameters\nbinding\n\nThe name of a binding.\n\nSee Also\nManaging bindings\nfunc valueClassForBinding(NSBindingName) -> AnyClass?\nReturns the class of the value that will be returned for the specified binding.\nfunc bind(NSBindingName, to: Any, withKeyPath: String, options: [NSBindingOption : Any]?)\nEstablishes a binding between a given property of the receiver and the property of a given object specified by a given key path.\nfunc optionDescriptionsForBinding(NSBindingName) -> [NSAttributeDescription]\nReturns an array describing the options for the specified binding.\nfunc infoForBinding(NSBindingName) -> [NSBindingInfoKey : Any]?\nReturns a dictionary describing the receiver’s binding.\nstruct NSBindingInfoKey\nfunc NSIsControllerMarker(Any?) -> Bool\nTests whether a given object is special marker object used for indicating the state of a selection in relation to a key."
  },
  {
    "title": "accessibilityLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615181-accessibilitylabel",
    "html": "Discussion\n\nThe default value for this property is nil unless the element is a UIKit control, in which case, the value is a label that derives from the control’s title.\n\nNote\n\nIf you supply UIImage objects to display in a UISegmentedControl, set this property on each image to ensure that the segments are properly accessible.\n\nIf you implement a custom control or view, or if you display a custom icon on a UIKit control, set this property to make sure your accessibility elements have appropriate labels. If an accessibility element doesn't display a descriptive label, set this property to supply a short localized label that succinctly identifies the accessibility element. For example, a “Play music” button might display an icon that indicates what it does to sighted users. To be accessible, however, the button needs the accessibility label Play or Play music so that an assistive app can provide this information to users with disabilities. Note that the label never includes the control type (such as button) because the traits of the accessibility element contain that information.\n\nSee Also\nSupporting basic accessibility\nvar isAccessibilityElement: Bool\nA Boolean value that indicates whether the element is an accessibility element that an assistive app can access.\nvar accessibilityValue: String?\nA localized string that contains the value of the accessibility element.\nvar accessibilityHint: String?\nA localized string that contains a brief description of the result of performing an action on the accessibility element.\nvar accessibilityTraits: UIAccessibilityTraits\nThe combination of accessibility traits that best characterizes the accessibility element.\nstruct UIAccessibilityTraits\nConstants that describe how an accessibility element behaves."
  },
  {
    "title": "accessibilityTraits | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615202-accessibilitytraits",
    "html": "Discussion\n\nThe default value for this property is none unless the element is a UIKit control, in which case, the value is the standard set of traits for the control.\n\nIf you implement a custom control or view, you need to select all the accessibility traits that best characterize the object, and combine them with its superclass’s traits (that is, with super.accessibilityTraits) by performing an OR operation. See Accessibility Traits for a complete list of traits.\n\nSee Also\nSupporting basic accessibility\nvar isAccessibilityElement: Bool\nA Boolean value that indicates whether the element is an accessibility element that an assistive app can access.\nvar accessibilityLabel: String?\nA succinct label in a localized string that identifies the accessibility element.\nvar accessibilityValue: String?\nA localized string that contains the value of the accessibility element.\nvar accessibilityHint: String?\nA localized string that contains a brief description of the result of performing an action on the accessibility element.\nstruct UIAccessibilityTraits\nConstants that describe how an accessibility element behaves."
  },
  {
    "title": "Speech attributes for attributed strings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/uiaccessibility/speech_attributes_for_attributed_strings",
    "html": "Topics\nConstants\nstatic let accessibilitySpeechPunctuation: NSAttributedString.Key\nA key that indicates whether to speak punctuation.\nstatic let accessibilitySpeechLanguage: NSAttributedString.Key\nA key that indicates the language to use when speaking a string.\nstatic let accessibilitySpeechPitch: NSAttributedString.Key\nA key that indicates the pitch to apply to spoken content.\nstatic let accessibilitySpeechQueueAnnouncement: NSAttributedString.Key\nA key that indicates whether to queue an announcement behind existing speech or to interrupt it.\nstatic let accessibilitySpeechIPANotation: NSAttributedString.Key\nA key that indicates the pronunciation of a specific word or phrase, such as a proper name.\nstatic let accessibilitySpeechAnnouncementPriority: NSAttributedString.Key\nstruct UIAccessibilityPriority\nConstants that specify priorities for accessibility announcements.\nSee Also\nDefining accessibility text and language\nText attributes for attributed strings\nApply attributes to text in an attributed string to convey extra information about the text.\nvar accessibilityHeaderElements: [Any]?\nAn array of elements that serves as the headers for the accessibility element.\nvar accessibilityAttributedHint: NSAttributedString?\nThe underlying attributed version of the accessibility hint.\nvar accessibilityAttributedLabel: NSAttributedString?\nThe underlying attributed version of the accessibility label.\nvar accessibilityLanguage: String?\nThe language to use when speaking the accessibility element's label, value, and hint.\nvar accessibilityTextualContext: UIAccessibilityTextualContext?\nA named context that helps identify and classify the type of text inside an element.\nvar accessibilityUserInputLabels: [String]!\nAn array of localized labels the user provides to refer to the accessibility element.\nvar accessibilityAttributedUserInputLabels: [NSAttributedString]!\nThe underlying attributed versions of the accessibility user input labels.\nvar accessibilityAttributedValue: NSAttributedString?\nThe underlying attributed version of the accessibility value."
  },
  {
    "title": "accessibilityHeaderElements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1627578-accessibilityheaderelements",
    "html": "Discussion\n\nYou can set this value on an instance of UIAccessibilityElement, on a view, or on a view controller. The assistive app reads the accessibility container chain, as well as the associated view controllers where appropriate. This array contains a weak copy of the accessibility elements to avoid retain cycles.\n\nSee Also\nDefining accessibility text and language\nSpeech attributes for attributed strings\nApply attributes to text in an attributed string to modify the pronunciation of that text.\nText attributes for attributed strings\nApply attributes to text in an attributed string to convey extra information about the text.\nvar accessibilityAttributedHint: NSAttributedString?\nThe underlying attributed version of the accessibility hint.\nvar accessibilityAttributedLabel: NSAttributedString?\nThe underlying attributed version of the accessibility label.\nvar accessibilityLanguage: String?\nThe language to use when speaking the accessibility element's label, value, and hint.\nvar accessibilityTextualContext: UIAccessibilityTextualContext?\nA named context that helps identify and classify the type of text inside an element.\nvar accessibilityUserInputLabels: [String]!\nAn array of localized labels the user provides to refer to the accessibility element.\nvar accessibilityAttributedUserInputLabels: [NSAttributedString]!\nThe underlying attributed versions of the accessibility user input labels.\nvar accessibilityAttributedValue: NSAttributedString?\nThe underlying attributed version of the accessibility value."
  },
  {
    "title": "accessibilityAttributedHint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/2865913-accessibilityattributedhint",
    "html": "Discussion\n\nSetting this property changes the value of the accessibilityHint property.\n\nThis attributed version allows for the inclusion of language attributes in the string to control pronunciation or accents. For example, you can attribute a French proper name like Arc de Triomphe with the fr-FR accessibility speech language. VoiceOver then chooses the most appropriate voice to speak the content.\n\nSee Also\nDefining accessibility text and language\nSpeech attributes for attributed strings\nApply attributes to text in an attributed string to modify the pronunciation of that text.\nText attributes for attributed strings\nApply attributes to text in an attributed string to convey extra information about the text.\nvar accessibilityHeaderElements: [Any]?\nAn array of elements that serves as the headers for the accessibility element.\nvar accessibilityAttributedLabel: NSAttributedString?\nThe underlying attributed version of the accessibility label.\nvar accessibilityLanguage: String?\nThe language to use when speaking the accessibility element's label, value, and hint.\nvar accessibilityTextualContext: UIAccessibilityTextualContext?\nA named context that helps identify and classify the type of text inside an element.\nvar accessibilityUserInputLabels: [String]!\nAn array of localized labels the user provides to refer to the accessibility element.\nvar accessibilityAttributedUserInputLabels: [NSAttributedString]!\nThe underlying attributed versions of the accessibility user input labels.\nvar accessibilityAttributedValue: NSAttributedString?\nThe underlying attributed version of the accessibility value."
  },
  {
    "title": "accessibilityAttributedLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/2865944-accessibilityattributedlabel",
    "html": "Discussion\n\nSetting this property changes the value of the accessibilityLabel property.\n\nThis attributed version allows for the inclusion of language attributes in the string to control pronunciation or accents.\n\nSee Also\nDefining accessibility text and language\nSpeech attributes for attributed strings\nApply attributes to text in an attributed string to modify the pronunciation of that text.\nText attributes for attributed strings\nApply attributes to text in an attributed string to convey extra information about the text.\nvar accessibilityHeaderElements: [Any]?\nAn array of elements that serves as the headers for the accessibility element.\nvar accessibilityAttributedHint: NSAttributedString?\nThe underlying attributed version of the accessibility hint.\nvar accessibilityLanguage: String?\nThe language to use when speaking the accessibility element's label, value, and hint.\nvar accessibilityTextualContext: UIAccessibilityTextualContext?\nA named context that helps identify and classify the type of text inside an element.\nvar accessibilityUserInputLabels: [String]!\nAn array of localized labels the user provides to refer to the accessibility element.\nvar accessibilityAttributedUserInputLabels: [NSAttributedString]!\nThe underlying attributed versions of the accessibility user input labels.\nvar accessibilityAttributedValue: NSAttributedString?\nThe underlying attributed version of the accessibility value."
  },
  {
    "title": "scriptingIsGreaterThanOrEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393829-scriptingisgreaterthanorequal",
    "html": "See Also\nPerforming comparisons\nfunc scriptingBegins(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the beginning of object.\nfunc scriptingContains(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object contains object.\nfunc scriptingEnds(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the end of object.\nfunc scriptingIsEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is equal to object.\nfunc scriptingIsGreaterThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than object.\nfunc scriptingIsLessThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than object.\nfunc scriptingIsLessThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than or equal to object."
  },
  {
    "title": "value(forKeyPath:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416468-value",
    "html": "Parameters\nkeyPath\n\nA key path of the form relationship.property (with one or more relationships); for example “department.name” or “department.manager.lastName”.\n\nReturn Value\n\nThe value for the derived property identified by keyPath.\n\nDiscussion\n\nThe default implementation gets the destination object for each relationship using value(forKey:) and returns the result of a value(forKey:) message to the final object.\n\nSee Also\nGetting Values\nfunc value(forKey: String) -> Any?\nReturns the value for the property identified by a given key.\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array.\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to a given key.\nfunc mutableArrayValue(forKey: String) -> NSMutableArray\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\nfunc mutableArrayValue(forKeyPath: String) -> NSMutableArray\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\nfunc mutableSetValue(forKey: String) -> NSMutableSet\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\nfunc mutableSetValue(forKeyPath: String) -> NSMutableSet\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\nfunc mutableOrderedSetValue(forKey: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\nfunc mutableOrderedSetValue(forKeyPath: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path.\nRelated Documentation\nfunc setValue(Any?, forKeyPath: String)\nSets the value for the property identified by a given key path to a given value."
  },
  {
    "title": "insertValue(_:at:inPropertyWithKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417619-insertvalue",
    "html": "Discussion\n\nThe method insertIn<Key>:atIndex: is invoked if it exists. If no corresponding scripting-KVC-compliant method (insertIn<Key>:atIndex: ) is found, this method invokes mutableArrayValueForKey: and mutates the result.\n\nNote\n\nPrior to OS X version 10.4, this method did not invoke -mutableArrayValueForKey:.\n\nSee Also\nIndexed access\nfunc removeValue(at: Int, fromPropertyWithKey: String)\nRemoves the object at the specified index from the collection specified by the passed key.\nfunc replaceValue(at: Int, inPropertyWithKey: String, withValue: Any)\nReplaces the object at the specified index in the collection specified by the passed key.\nfunc value(at: Int, inPropertyWithKey: String) -> Any?\nRetrieves an indexed object from the collection specified by the passed key."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952779-split",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the sequence satisfying the isSeparator predicate. If true, only nonempty subsequences are returned. The default value is true.\n\nisSeparator\n\nA closure that returns true if its argument should be used to split the sequence; otherwise, false.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" })\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(\n   line.split(maxSplits: 1, whereSeparator: { $0 == \" \" })\n                  .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes true for the allowEmptySlices parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(\n    line.split(\n        omittingEmptySubsequences: false,\n        whereSeparator: { $0 == \" \" }\n    ).map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "starts(with:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952783-starts",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)"
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952760-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952768-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "shouldGroupAccessibilityChildren | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615143-shouldgroupaccessibilitychildren",
    "html": "Discussion\n\nThe default value for this property is false.\n\nFor example, consider an app that shows items in vertical columns. Usually, VoiceOver navigates through these items in horizontal rows. Setting the value of this property to true on the parent view of the items in the vertical columns causes VoiceOver to respect the app’s grouping and navigate them correctly.\n\nSee Also\nConfiguring behavior\nvar accessibilityCustomRotors: [UIAccessibilityCustomRotor]?\nAn array of custom rotors for the current accessibility element.\nvar accessibilityElementsHidden: Bool\nA Boolean value that indicates whether to hide the accessibility elements.\nvar accessibilityRespondsToUserInteraction: Bool\nA Boolean value that indicates whether the accessibility element performs an action due to user interaction.\nvar accessibilityViewIsModal: Bool\nA Boolean value that indicates whether VoiceOver ignores the accessibility elements within views that are siblings of the element.\nvar accessibilityDirectTouchOptions: UIAccessibility.DirectTouchOptions\nA value that configures how VoiceOver produces audio for direct touch areas.\nstruct UIAccessibility.DirectTouchOptions\nConstants that configure how VoiceOver produces audio for direct touch areas."
  },
  {
    "title": "isKeyExcluded(fromWebScript:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1528545-iskeyexcluded",
    "html": "Parameters\nname\n\nThe name of the attribute.\n\nReturn Value\n\ntrue if the attribute specified by name should be hidden from the scripting environment; otherwise, false.\n\nDiscussion\n\nThe default value is true.\n\nSee Also\nGetting attributes\nclass func webScriptName(forKey: UnsafePointer<CChar>!) -> String!\nReturns the scripting environment name for an attribute specified by a key.\nclass func webScriptName(for: Selector!) -> String!\nReturns the scripting environment name for a selector.\nclass func isSelectorExcluded(fromWebScript: Selector!) -> Bool\nReturns whether a selector should be hidden from the scripting environment."
  },
  {
    "title": "accessibilityFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615111-accessibilityframe",
    "html": "Discussion\n\nThe default value for this property is CGRectZero unless the receiver is a UIView object or is a subclass of UIView, in which case the value is the frame of the view.\n\nYou must set this property for an accessibility element that represents an object that is not a subclass of UIView, because the screen coordinates of such an object are not already known. (You do not have to set this property for an accessibility element that represents a subclass of UIView, because such an object’s screen coordinates are already known.)\n\nSee Also\nNavigating elements\nUIAccessibilityContainer\nProvide a set of methods that view subclasses use to make subcomponents accessible as separate elements.\nvar accessibilityActivationPoint: CGPoint\nThe activation point for the accessibility element in screen coordinates.\nvar accessibilityFocusedUIElement: Any?\nThe deepest descendant of the accessibility hierarchy that has the focus.\nfunc accessibilityHitTest(NSPoint) -> Any?\nReturns the deepest descendant of the accessibility hierarchy that contains the specified point.\nvar accessibilityNavigationStyle: UIAccessibilityNavigationStyle\nThe navigation style to apply to the object and its elements.\nenum UIAccessibilityNavigationStyle\nConstants that describe how to navigate an object’s elements with an assistive app.\nvar accessibilityPath: UIBezierPath?\nThe path of the element in screen coordinates.\nstatic func zoomFocusChanged(zoomType: UIAccessibility.ZoomType, toFrame: CGRect, in: UIView)\nNotifies the system when the app’s focus changes to a new location.\nenum UIAccessibility.ZoomType\nThe types of system Zoom that can be in effect.\nstatic var assistiveTouch: UIGuidedAccessAccessibilityFeature\nThe AssistiveTouch accessibility feature.\nRelated Documentation\nstatic func convertToScreenCoordinates(CGRect, in: UIView) -> CGRect\nConverts the specified rectangle from view coordinates to screen coordinates."
  },
  {
    "title": "accessibilityActivationPoint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615179-accessibilityactivationpoint",
    "html": "Discussion\n\nThe default value for this property is the midpoint of the accessibility element’s frame, which is given by the accessibilityFrame property. The activation point for an element is the specific area VoiceOver activates when a user double-taps the element.\n\nThe ability to specify an activation point allows an element to present to VoiceOver different points in different circumstances without changing how the element presents itself. For example, the standard activation point for a Home screen app icon is the midpoint of the icon. But when the user is rearranging icons on the Home screen, the activation point changes to the midpoint of the remove control (that is, to the circled X in the upper-left corner of the icon).\n\nUse this property to ensure that the activation point for a small element remains accurate even if you present a larger version of the element to VoiceOver.\n\nSee Also\nNavigating elements\nUIAccessibilityContainer\nProvide a set of methods that view subclasses use to make subcomponents accessible as separate elements.\nvar accessibilityFocusedUIElement: Any?\nThe deepest descendant of the accessibility hierarchy that has the focus.\nvar accessibilityFrame: CGRect\nThe frame of the accessibility element in screen coordinates.\nfunc accessibilityHitTest(NSPoint) -> Any?\nReturns the deepest descendant of the accessibility hierarchy that contains the specified point.\nvar accessibilityNavigationStyle: UIAccessibilityNavigationStyle\nThe navigation style to apply to the object and its elements.\nenum UIAccessibilityNavigationStyle\nConstants that describe how to navigate an object’s elements with an assistive app.\nvar accessibilityPath: UIBezierPath?\nThe path of the element in screen coordinates.\nstatic func zoomFocusChanged(zoomType: UIAccessibility.ZoomType, toFrame: CGRect, in: UIView)\nNotifies the system when the app’s focus changes to a new location.\nenum UIAccessibility.ZoomType\nThe types of system Zoom that can be in effect.\nstatic var assistiveTouch: UIGuidedAccessAccessibilityFeature\nThe AssistiveTouch accessibility feature."
  },
  {
    "title": "accessibilityDirectTouchOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/4161973-accessibilitydirecttouchoptions",
    "html": "Discussion\n\nDirect touch areas allow a developer to specify a region of the screen where VoiceOver passes gestures directly to the app, instead of interpreting them as VoiceOver commands.\n\nExamples of direct touch areas might include:\n\nA keyboard in a music-creation app\n\nA player view in a game that produces sounds\n\nAn area where you sign your name in a document\n\nIf an element doesn’t use UIAccessibility.DirectTouchOptions, VoiceOver speaks the element and immediately starts sending touch events to the app.\n\nSee Also\nConfiguring behavior\nvar accessibilityCustomRotors: [UIAccessibilityCustomRotor]?\nAn array of custom rotors for the current accessibility element.\nvar accessibilityElementsHidden: Bool\nA Boolean value that indicates whether to hide the accessibility elements.\nvar accessibilityRespondsToUserInteraction: Bool\nA Boolean value that indicates whether the accessibility element performs an action due to user interaction.\nvar accessibilityViewIsModal: Bool\nA Boolean value that indicates whether VoiceOver ignores the accessibility elements within views that are siblings of the element.\nvar shouldGroupAccessibilityChildren: Bool\nA Boolean value that indicates whether VoiceOver groups the accessibility elements that are children of the element, regardless of their positions on the screen.\nstruct UIAccessibility.DirectTouchOptions\nConstants that configure how VoiceOver produces audio for direct touch areas."
  },
  {
    "title": "accessibilityElementIsFocused() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615190-accessibilityelementisfocused",
    "html": "Return Value\n\ntrue if an assistive technology is virtually focused on the element; otherwise, false.\n\nSee Also\nGetting focus information\nfunc accessibilityElementDidBecomeFocused()\nSent after an assistive technology has set its virtual focus on the accessibility element.\nfunc accessibilityElementDidLoseFocus()\nSent after an assistive technology has removed its virtual focus from an accessibility element.\nfunc accessibilityAssistiveTechnologyFocusedIdentifiers() -> Set<UIAccessibility.AssistiveTechnologyIdentifier>?\nReturns a set of identifier keys indicating which assistive app has focus on the accessibility element."
  },
  {
    "title": "accessibilityDragSourceDescriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/2891001-accessibilitydragsourcedescripto",
    "html": "Discussion\n\nTo restore the default automatic behavior for this property, assign or return the default value of nil.\n\nNote\n\nA value of nil does not describe the same behavior as the empty array, which specifies that there are no relevant interactions for this element.\n\nSee Also\nFine-Tuning Drag and Drop\nvar accessibilityDropPointDescriptors: [UIAccessibilityLocationDescriptor]?\nAn array of location descriptor objects that you use to define where drops are possible on this element."
  },
  {
    "title": "accessibilityElementDidBecomeFocused() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615183-accessibilityelementdidbecomefoc",
    "html": "Discussion\n\nOverride accessibilityElementDidBecomeFocused if you need to know when an assistive technology has set its virtual focus on an accessibility element.\n\nSee Also\nGetting focus information\nfunc accessibilityElementDidLoseFocus()\nSent after an assistive technology has removed its virtual focus from an accessibility element.\nfunc accessibilityElementIsFocused() -> Bool\nReturns a Boolean value indicating whether an assistive technology is focused on the accessibility element.\nfunc accessibilityAssistiveTechnologyFocusedIdentifiers() -> Set<UIAccessibility.AssistiveTechnologyIdentifier>?\nReturns a set of identifier keys indicating which assistive app has focus on the accessibility element."
  },
  {
    "title": "responds(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418583-responds",
    "html": "Required\n\nParameters\naSelector\n\nA selector that identifies a message.\n\nReturn Value\n\ntrue if the receiver implements or inherits a method that can respond to aSelector, otherwise false.\n\nDiscussion\n\nThe application is responsible for determining whether a false response should be considered an error.\n\nYou cannot test whether an object inherits a method from its superclass by sending responds(to:) to the object using the super keyword. This method will still be testing the object as a whole, not just the superclass’s implementation. Therefore, sending responds(to:) to super is equivalent to sending it to self. Instead, you must invoke the NSObject class method instancesRespond(to:) directly on the object’s superclass, as illustrated in the following code fragment.\n\nif( [MySuperclass instancesRespondToSelector:@selector(aMethod)] ) {\n    // invoke the inherited method\n    [super aMethod];\n}\n\n\nYou cannot simply use [[self superclass] instancesRespondToSelector:@selector(aMethod)] since this may cause the method to fail if it is invoked by a subclass.\n\nNote that if the receiver is able to forward aSelector messages to another object, it will be able to respond to the message, albeit indirectly, even though this method returns false.\n\nSee Also\nTesting Object Inheritance, Behavior, and Conformance\nfunc isKind(of: AnyClass) -> Bool\nReturns a Boolean value that indicates whether the receiver is an instance of given class or an instance of any class that inherits from that class.\n\nRequired\n\nfunc isMember(of: AnyClass) -> Bool\nReturns a Boolean value that indicates whether the receiver is an instance of a given class.\n\nRequired\n\nfunc conforms(to: Protocol) -> Bool\nReturns a Boolean value that indicates whether the receiver conforms to a given protocol.\n\nRequired\n\nRelated Documentation\nclass func instancesRespond(to: Selector!) -> Bool\nReturns a Boolean value that indicates whether instances of the receiver are capable of responding to a given selector.\n- forwardInvocation:\nOverridden by subclasses to forward messages to other objects."
  },
  {
    "title": "conforms(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418515-conforms",
    "html": "Required\n\nParameters\naProtocol\n\nA protocol object that represents a particular protocol.\n\nReturn Value\n\ntrue if the receiver conforms to aProtocol, otherwise false.\n\nDiscussion\n\nThis method works identically to the conforms(to:) class method declared in NSObject. It’s provided as a convenience so that you don’t need to get the class object to find out whether an instance can respond to a given set of messages.\n\nSee Also\nTesting Object Inheritance, Behavior, and Conformance\nfunc isKind(of: AnyClass) -> Bool\nReturns a Boolean value that indicates whether the receiver is an instance of given class or an instance of any class that inherits from that class.\n\nRequired\n\nfunc isMember(of: AnyClass) -> Bool\nReturns a Boolean value that indicates whether the receiver is an instance of a given class.\n\nRequired\n\nfunc responds(to: Selector!) -> Bool\nReturns a Boolean value that indicates whether the receiver implements or inherits a method that can respond to a specified message.\n\nRequired"
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418746-description",
    "html": "Required\n\nReturn Value\n\nA string that describes the object.\n\nSee Also\nDescribing Objects\nvar debugDescription: String\nA textual representation of the receiver to use with a debugger."
  },
  {
    "title": "class | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1571950-class",
    "html": "Return Value\n\nThe class object.\n\nDiscussion\n\nRefer to a class only by its name when it is the receiver of a message. In all other cases, the class object must be obtained through this or a similar method. For example, here SomeClass is passed as an argument to the isKindOfClass: method (declared in the NSObject protocol):\n\nBOOL test = [self isKindOfClass:[SomeClass class]];\n\nSee Also\nIdentifying Classes\n+ superclass\nReturns the class object for the receiver’s superclass.\n+ isSubclassOfClass:\nReturns a Boolean value that indicates whether the receiving class is a subclass of, or identical to, a given class.\nRelated Documentation\nNSStringFromClass\nReturns the name of a class as a string.\n- class\nReturns the class object for the receiver’s class.\nNSClassFromString\nObtains a class by name."
  },
  {
    "title": "class | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418956-nsobject/1571949-class",
    "html": "Required\n\nReturn Value\n\nThe class object for the receiver’s class.\n\nSee Also\nIdentifying Classes\nsuperclass\nReturns the class object for the receiver’s superclass.\n\nRequired\n\nRelated Documentation\n+ class\nReturns the class object.\nAdvanced Memory Management Programming Guide"
  },
  {
    "title": "superclass | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418793-superclass",
    "html": "Required\n\nReturn Value\n\nThe class object for the receiver’s superclass.\n\nSee Also\nRelated Documentation\nclass func superclass() -> AnyClass?\nReturns the class object for the receiver’s superclass."
  },
  {
    "title": "mutableSetValue(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415105-mutablesetvalue",
    "html": "Parameters\nkey\n\nThe name of an unordered to-many relationship.\n\nReturn Value\n\nA mutable set that provides read-write access to the unordered to-many relationship specified by key.\n\nDiscussion\n\nObjects added to the mutable set proxy become related to the receiver, and objects removed from the mutable set become unrelated. The default implementation recognizes the same simple accessor methods and set accessor methods as value(forKey:), and follows the same direct instance variable access policies, but always returns a mutable collection proxy object instead of the immutable collection that value(forKey:) would return.\n\nThe search pattern that mutableSetValueForKey: uses is described in Accessor Search Patterns in Key-Value Coding Programming Guide.\n\nSee Also\nGetting Values\nfunc value(forKey: String) -> Any?\nReturns the value for the property identified by a given key.\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path.\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array.\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to a given key.\nfunc mutableArrayValue(forKey: String) -> NSMutableArray\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\nfunc mutableArrayValue(forKeyPath: String) -> NSMutableArray\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\nfunc mutableSetValue(forKeyPath: String) -> NSMutableSet\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\nfunc mutableOrderedSetValue(forKey: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\nfunc mutableOrderedSetValue(forKeyPath: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path."
  },
  {
    "title": "webPlugInContainerShowStatus(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1537604-webplugincontainershowstatus",
    "html": "Parameters\nmessage\n\nThe status message to be displayed.\n\nSee Also\nPerforming actions on the enclosing container\nfunc webPlugInContainerLoad(URLRequest!, inFrame: String!)\nLoads a URL into a web frame."
  },
  {
    "title": "value(withName:inPropertyWithKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418031-value",
    "html": "Discussion\n\nThe method valueIn<Key>WithName: is used if it exists. Otherwise, raises an NSUndefinedKeyException.\n\nSee Also\nAccess by name, key, or ID\nfunc insertValue(Any, inPropertyWithKey: String)\nInserts an object in the collection specified by the passed key.\nfunc value(withUniqueID: Any, inPropertyWithKey: String) -> Any?\nRetrieves an object by ID from the collection specified by the passed key."
  },
  {
    "title": "webPlugInContainerLoad(_:inFrame:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1536649-webplugincontainerload",
    "html": "Parameters\nrequest\n\nThe request that specifies the URL.\n\ntarget\n\nThe frame into which the URL is loaded.\n\nDiscussion\n\nIf the frame specified by target is not found, a new window is opened, loaded with the URL request, and given the specified frame name. If target is nil, the frame enclosing the plug-in is loaded with the URL request.\n\nSee Also\nPerforming actions on the enclosing container\nfunc webPlugInContainerShowStatus(String!)\nTells the container to show a status message."
  },
  {
    "title": "exposeBinding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458184-exposebinding",
    "html": "Parameters\nbinding\n\nThe key path for the property to be exposed.\n\nDiscussion\n\nThe bound property will be accessed using key-value-coding compliant methods. This method is typically invoked in the class’s initialize implementation.\n\nBindings exposed using exposeBinding will be exposed automatically in exposedBindings unless that method explicitly filters them out, for example in subclasses.\n\nSee Also\nExposing bindings\nvar exposedBindings: [NSBindingName]\nReturns an array containing the bindings exposed by the receiver."
  },
  {
    "title": "Key Value Coding Exception Names | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nskeyvaluecoding/key_value_coding_exception_names",
    "html": "Topics\nConstants\nstatic let undefinedKeyException: NSExceptionName\nRaised when a key value coding operation fails. userInfo keys are described in NSUndefinedKeyException userInfo Keys"
  },
  {
    "title": "exposedBindings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1458048-exposedbindings",
    "html": "Return Value\n\nAn array containing the bindings exposed by the receiver.\n\nDiscussion\n\nA subclass can override this method to remove bindings that are exposed by a superclass that are not appropriate for the subclass.\n\nSee Also\nExposing bindings\nclass func exposeBinding(NSBindingName)\nExposes the specified binding, advertising its availability."
  },
  {
    "title": "webPlugInContainerSelectionColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1536394-webplugincontainerselectioncolor",
    "html": "Return Value\n\nThe plug-in selection color.\n\nDiscussion\n\nThe color should be used for any special drawing when the plug-in is selected.\n\nSee Also\nObtaining information about the container\nvar webFrame: WebFrame!\nReturns the WebFrame that contains the plug-in."
  },
  {
    "title": "webFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1537727-webframe",
    "html": "Return Value\n\nThe WebFrame that contains the plug-in.\n\nDiscussion\n\nOnly implemented by containers that are based on the WebKit’s plug-in architecture.\n\nSee Also\nObtaining information about the container\nvar webPlugInContainerSelectionColor: NSColor!\nReturns the plug-in selection color."
  },
  {
    "title": "accessibilityValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615117-accessibilityvalue",
    "html": "Discussion\n\nThe default value for this property is nil unless the element is a UIKit control, in which case, the value of the property represents the value of the control when it differs from the label.\n\nWhen an accessibility element has a static label and a dynamic value, set this property to return the value. For example, although an accessibility element that represents a text field might have the label Message, its value is the text currently inside the text field.\n\nSee Also\nSupporting basic accessibility\nvar isAccessibilityElement: Bool\nA Boolean value that indicates whether the element is an accessibility element that an assistive app can access.\nvar accessibilityLabel: String?\nA succinct label in a localized string that identifies the accessibility element.\nvar accessibilityHint: String?\nA localized string that contains a brief description of the result of performing an action on the accessibility element.\nvar accessibilityTraits: UIAccessibilityTraits\nThe combination of accessibility traits that best characterizes the accessibility element.\nstruct UIAccessibilityTraits\nConstants that describe how an accessibility element behaves."
  },
  {
    "title": "Text attributes for attributed strings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/uiaccessibility/text_attributes_for_attributed_strings",
    "html": "Topics\nConstants\nstatic let accessibilityTextCustom: NSAttributedString.Key\nA key for specifying custom attributes to apply to the text.\nstatic let accessibilityTextHeadingLevel: NSAttributedString.Key\nA key for specifying the heading level of the text.\nSee Also\nDefining accessibility text and language\nSpeech attributes for attributed strings\nApply attributes to text in an attributed string to modify the pronunciation of that text.\nvar accessibilityHeaderElements: [Any]?\nAn array of elements that serves as the headers for the accessibility element.\nvar accessibilityAttributedHint: NSAttributedString?\nThe underlying attributed version of the accessibility hint.\nvar accessibilityAttributedLabel: NSAttributedString?\nThe underlying attributed version of the accessibility label.\nvar accessibilityLanguage: String?\nThe language to use when speaking the accessibility element's label, value, and hint.\nvar accessibilityTextualContext: UIAccessibilityTextualContext?\nA named context that helps identify and classify the type of text inside an element.\nvar accessibilityUserInputLabels: [String]!\nAn array of localized labels the user provides to refer to the accessibility element.\nvar accessibilityAttributedUserInputLabels: [NSAttributedString]!\nThe underlying attributed versions of the accessibility user input labels.\nvar accessibilityAttributedValue: NSAttributedString?\nThe underlying attributed version of the accessibility value."
  },
  {
    "title": "accessibilityLanguage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615192-accessibilitylanguage",
    "html": "Discussion\n\nThe default value for this property is nil. If you don't set a language, the system uses the user’s current language setting.\n\nIf you need to set this property, be sure to use a language ID tag that follows the format in the BCP 47 specification.\n\nSee Also\nDefining accessibility text and language\nSpeech attributes for attributed strings\nApply attributes to text in an attributed string to modify the pronunciation of that text.\nText attributes for attributed strings\nApply attributes to text in an attributed string to convey extra information about the text.\nvar accessibilityHeaderElements: [Any]?\nAn array of elements that serves as the headers for the accessibility element.\nvar accessibilityAttributedHint: NSAttributedString?\nThe underlying attributed version of the accessibility hint.\nvar accessibilityAttributedLabel: NSAttributedString?\nThe underlying attributed version of the accessibility label.\nvar accessibilityTextualContext: UIAccessibilityTextualContext?\nA named context that helps identify and classify the type of text inside an element.\nvar accessibilityUserInputLabels: [String]!\nAn array of localized labels the user provides to refer to the accessibility element.\nvar accessibilityAttributedUserInputLabels: [NSAttributedString]!\nThe underlying attributed versions of the accessibility user input labels.\nvar accessibilityAttributedValue: NSAttributedString?\nThe underlying attributed version of the accessibility value."
  },
  {
    "title": "class_createInstance(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1441565-class_createinstance",
    "html": "Parameters\ncls\n\nThe class that you want to allocate an instance of.\n\nextraBytes\n\nAn integer indicating the number of extra bytes to allocate. The additional bytes can be used to store additional instance variables beyond those defined in the class definition.\n\nReturn Value\n\nAn instance of the class cls.\n\nSee Also\nRelated Documentation\nobjc_constructInstance\nCreates an instance of a class at the specified location."
  },
  {
    "title": "objc_storeWeak(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418791-objc_storeweak",
    "html": "Parameters\nlocation\n\nThe address of the weak pointer.\n\nobj\n\nThe new object you want the weak pointer to now point to.\n\nReturn Value\n\nThe value stored in location (that is, obj).\n\nDiscussion\n\nThis function is typically used anywhere a __weak variable is the target of an assignment.\n\nSee Also\nUsing Objective-C Language Features\nfunc objc_enumerationMutation(Any)\nInserted by the compiler when a mutation is detected during a foreach iteration.\nfunc objc_setEnumerationMutationHandler(((Any) -> Void)?)\nSets the current mutation handler.\nfunc imp_implementationWithBlock(Any) -> IMP\nCreates a pointer to a function that calls the specified block when the method is called.\nfunc imp_getBlock(IMP) -> Any?\nReturns the block associated with an IMP that was created using imp_implementationWithBlock(_:).\nfunc imp_removeBlock(IMP) -> Bool\nDisassociates a block from an IMP that was created using imp_implementationWithBlock(_:), and releases the copy of the block that was created.\nfunc objc_loadWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>) -> Any?\nLoads the object referenced by a weak pointer and returns it."
  },
  {
    "title": "objc_super | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objc_super",
    "html": "Overview\n\nThe compiler generates an objc_super data structure when it encounters the super keyword as the receiver of a message. It specifies the class definition of the particular superclass that should be messaged.\n\nTopics\nInstance Properties\nvar receiver: Unmanaged<AnyObject>\nA pointer of type objc_object. Specifies an instance of a class.\nvar super_class: AnyClass\nA pointer to a Class data structure. Specifies the particular superclass of the instance to message.\nInitializers\ninit(receiver: Unmanaged<AnyObject>, super_class: AnyClass)\nSee Also\nInstance Data Types\nstruct objc_object\nA pointer to an instance of a class."
  },
  {
    "title": "Method | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/method",
    "html": "See Also\nClass-Definition Data Structures\ntypealias Ivar\nAn opaque type that represents an instance variable.\ntypealias Category\nAn opaque type that represents a category.\ntypealias objc_property_t\nAn opaque type that represents an Objective-C declared property.\nstruct objc_method_description\nDefines an Objective-C method.\nstruct objc_property_attribute_t\nDefines a property attribute."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952787-withcontiguousstorageifavailable",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively.\n\nNote\n\nThis documentation comment was inherited from Sequence."
  },
  {
    "title": "ObjCClassList.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/iterator",
    "html": "Topics\nType Aliases\ntypealias ObjCClassList.Iterator.Element\nInstance Methods\nfunc next() -> AnyClass?\nRelationships\nFrom Protocol\nSequence\nConforms To\nIteratorProtocol"
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952784-suffix",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. The value of maxLength must be greater than or equal to zero.\n\nDiscussion\n\nThe sequence must be finite. If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "NSInteger | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsinteger",
    "html": "Discussion\n\nWhen building 32-bit applications, NSInteger is a 32-bit integer. A 64-bit application treats NSInteger as a 64-bit integer.\n\nTopics\nConstants\nvar NSIntegerMax: Int\nThe maximum value for an NSInteger."
  },
  {
    "title": "sorted(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952775-sorted",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity: O(n log n), where n is the length of the sequence."
  },
  {
    "title": "shuffled(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952773-shuffled",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity: O(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952766-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "shuffled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952771-shuffled",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952764-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.\n\nReturn Value\n\nA sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nThe following example uses the prefix(while:) method to find the positive numbers at the beginning of the numbers array. Every element of numbers up to, but not including, the first negative value is included in the result.\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nlet positivePrefix = numbers.prefix(while: { $0 > 0 })\n// positivePrefix == [3, 7, 4]\n\n\nIf predicate matches every element in the sequence, the resulting sequence contains every element of the sequence.\n\nComplexity: O(k), where k is the length of the result."
  },
  {
    "title": "reversed() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952770-reversed",
    "html": "Return Value\n\nAn array containing the elements of this sequence in reverse order.\n\nDiscussion\n\nThe sequence must be finite.\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952762-prefix",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. The value of maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting at the beginning of this sequence with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity: O(1)"
  },
  {
    "title": "accessibilityCustomRotors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1649788-accessibilitycustomrotors",
    "html": "Discussion\n\nThe default value for this array is nil.\n\nAssistive apps, like VoiceOver, use a context-sensitive function that provides more power and flexibility to perform actions and searches. VoiceOver accesses this functionality through the VoiceOver rotor.\n\nA current element can expose an array of custom rotors that a user can activate to search for other instances of similar elements. The same applies to ranges within elements.\n\nFor example, in a magazine app, you can create a custom rotor to allow the user to find the next link or heading within an article. In a document editor, you can help the user find the next misspelled word by returning the next range that contains a misspelled word.\n\nSee Also\nConfiguring behavior\nvar accessibilityElementsHidden: Bool\nA Boolean value that indicates whether to hide the accessibility elements.\nvar accessibilityRespondsToUserInteraction: Bool\nA Boolean value that indicates whether the accessibility element performs an action due to user interaction.\nvar accessibilityViewIsModal: Bool\nA Boolean value that indicates whether VoiceOver ignores the accessibility elements within views that are siblings of the element.\nvar shouldGroupAccessibilityChildren: Bool\nA Boolean value that indicates whether VoiceOver groups the accessibility elements that are children of the element, regardless of their positions on the screen.\nvar accessibilityDirectTouchOptions: UIAccessibility.DirectTouchOptions\nA value that configures how VoiceOver produces audio for direct touch areas.\nstruct UIAccessibility.DirectTouchOptions\nConstants that configure how VoiceOver produces audio for direct touch areas."
  },
  {
    "title": "accessibilityRespondsToUserInteraction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/3043551-accessibilityrespondstouserinter",
    "html": "Discussion\n\nThe default value derives from other accessibility properties. For example, an element with notEnabled returns false.\n\nIf your app has a button that updates the interface when the user taps it, return true. For a label that only displays information, return false.\n\nSee Also\nConfiguring behavior\nvar accessibilityCustomRotors: [UIAccessibilityCustomRotor]?\nAn array of custom rotors for the current accessibility element.\nvar accessibilityElementsHidden: Bool\nA Boolean value that indicates whether to hide the accessibility elements.\nvar accessibilityViewIsModal: Bool\nA Boolean value that indicates whether VoiceOver ignores the accessibility elements within views that are siblings of the element.\nvar shouldGroupAccessibilityChildren: Bool\nA Boolean value that indicates whether VoiceOver groups the accessibility elements that are children of the element, regardless of their positions on the screen.\nvar accessibilityDirectTouchOptions: UIAccessibility.DirectTouchOptions\nA value that configures how VoiceOver produces audio for direct touch areas.\nstruct UIAccessibility.DirectTouchOptions\nConstants that configure how VoiceOver produces audio for direct touch areas."
  },
  {
    "title": "accessibilityTextualContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/3075456-accessibilitytextualcontext",
    "html": "Discussion\n\nThe default value for this property is nil.\n\nAssistive apps can use this property to select an appropriate way to output the text. For example, when encountering a source code context, VoiceOver can speak all punctuation.\n\nTo specify a substring within the textual context, use the UIAccessibilityTextAttributeContext attributed string key.\n\nSee Also\nDefining accessibility text and language\nSpeech attributes for attributed strings\nApply attributes to text in an attributed string to modify the pronunciation of that text.\nText attributes for attributed strings\nApply attributes to text in an attributed string to convey extra information about the text.\nvar accessibilityHeaderElements: [Any]?\nAn array of elements that serves as the headers for the accessibility element.\nvar accessibilityAttributedHint: NSAttributedString?\nThe underlying attributed version of the accessibility hint.\nvar accessibilityAttributedLabel: NSAttributedString?\nThe underlying attributed version of the accessibility label.\nvar accessibilityLanguage: String?\nThe language to use when speaking the accessibility element's label, value, and hint.\nvar accessibilityUserInputLabels: [String]!\nAn array of localized labels the user provides to refer to the accessibility element.\nvar accessibilityAttributedUserInputLabels: [NSAttributedString]!\nThe underlying attributed versions of the accessibility user input labels.\nvar accessibilityAttributedValue: NSAttributedString?\nThe underlying attributed version of the accessibility value."
  },
  {
    "title": "accessibilityAttributedUserInputLabels | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/3197988-accessibilityattributeduserinput",
    "html": "Discussion\n\nSetting this property changes the value of the accessibilityUserInputLabels property.\n\nThis attributed version allows for the inclusion of language attributes in the strings to control pronunciation or accents.\n\nSee Also\nDefining accessibility text and language\nSpeech attributes for attributed strings\nApply attributes to text in an attributed string to modify the pronunciation of that text.\nText attributes for attributed strings\nApply attributes to text in an attributed string to convey extra information about the text.\nvar accessibilityHeaderElements: [Any]?\nAn array of elements that serves as the headers for the accessibility element.\nvar accessibilityAttributedHint: NSAttributedString?\nThe underlying attributed version of the accessibility hint.\nvar accessibilityAttributedLabel: NSAttributedString?\nThe underlying attributed version of the accessibility label.\nvar accessibilityLanguage: String?\nThe language to use when speaking the accessibility element's label, value, and hint.\nvar accessibilityTextualContext: UIAccessibilityTextualContext?\nA named context that helps identify and classify the type of text inside an element.\nvar accessibilityUserInputLabels: [String]!\nAn array of localized labels the user provides to refer to the accessibility element.\nvar accessibilityAttributedValue: NSAttributedString?\nThe underlying attributed version of the accessibility value."
  },
  {
    "title": "accessibilityUserInputLabels | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/3197989-accessibilityuserinputlabels",
    "html": "Discussion\n\nThe default value for this property is an empty array unless the element is a UIKit control. In that case, the value is an array with an appropriate label, if different from accessibilityLabel.\n\nUse this property when the accessibilityLabel isn't appropriate for dictated or typed input. For example, an element that contains additional descriptive information in its accessibilityLabel can return a more concise label. The primary label is first in the array, optionally followed by alternative labels in descending order of importance. If this property returns an empty array or an invalid value, the system uses accessibilityLabel instead.\n\nSee Also\nDefining accessibility text and language\nSpeech attributes for attributed strings\nApply attributes to text in an attributed string to modify the pronunciation of that text.\nText attributes for attributed strings\nApply attributes to text in an attributed string to convey extra information about the text.\nvar accessibilityHeaderElements: [Any]?\nAn array of elements that serves as the headers for the accessibility element.\nvar accessibilityAttributedHint: NSAttributedString?\nThe underlying attributed version of the accessibility hint.\nvar accessibilityAttributedLabel: NSAttributedString?\nThe underlying attributed version of the accessibility label.\nvar accessibilityLanguage: String?\nThe language to use when speaking the accessibility element's label, value, and hint.\nvar accessibilityTextualContext: UIAccessibilityTextualContext?\nA named context that helps identify and classify the type of text inside an element.\nvar accessibilityAttributedUserInputLabels: [NSAttributedString]!\nThe underlying attributed versions of the accessibility user input labels.\nvar accessibilityAttributedValue: NSAttributedString?\nThe underlying attributed version of the accessibility value."
  },
  {
    "title": "accessibilityElementsHidden | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615080-accessibilityelementshidden",
    "html": "Discussion\n\nThe default value for this property is false. You might use this property to hide views that the arrival of a new view covers. In this case, the hidden views might remain visible onscreen, but they aren't the focus of the user’s actions.\n\nYou might also use this property to hide a transient view that VoiceOver users don’t need to notice. For example, VoiceOver doesn’t need to describe the translucent view that appears when users adjust the volume on their devices because the aural feedback of this action is sufficient.\n\nSee Also\nConfiguring behavior\nvar accessibilityCustomRotors: [UIAccessibilityCustomRotor]?\nAn array of custom rotors for the current accessibility element.\nvar accessibilityRespondsToUserInteraction: Bool\nA Boolean value that indicates whether the accessibility element performs an action due to user interaction.\nvar accessibilityViewIsModal: Bool\nA Boolean value that indicates whether VoiceOver ignores the accessibility elements within views that are siblings of the element.\nvar shouldGroupAccessibilityChildren: Bool\nA Boolean value that indicates whether VoiceOver groups the accessibility elements that are children of the element, regardless of their positions on the screen.\nvar accessibilityDirectTouchOptions: UIAccessibility.DirectTouchOptions\nA value that configures how VoiceOver produces audio for direct touch areas.\nstruct UIAccessibility.DirectTouchOptions\nConstants that configure how VoiceOver produces audio for direct touch areas."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952754-lexicographicallyprecedes",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of other.\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)"
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952758-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "accessibilityAssistiveTechnologyFocusedIdentifiers() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615206-accessibilityassistivetechnology",
    "html": "See Also\nGetting focus information\nfunc accessibilityElementDidBecomeFocused()\nSent after an assistive technology has set its virtual focus on the accessibility element.\nfunc accessibilityElementDidLoseFocus()\nSent after an assistive technology has removed its virtual focus from an accessibility element.\nfunc accessibilityElementIsFocused() -> Bool\nReturns a Boolean value indicating whether an assistive technology is focused on the accessibility element."
  },
  {
    "title": "accessibilityElementDidLoseFocus() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1615082-accessibilityelementdidlosefocus",
    "html": "Discussion\n\nOverride accessibilityElementDidLoseFocus if you need to know when an assistive technology has removed its virtual focus from an accessibility element. Note that accessibilityElementDidLoseFocus is sent before accessibilityElementDidBecomeFocused().\n\nSee Also\nGetting focus information\nfunc accessibilityElementDidBecomeFocused()\nSent after an assistive technology has set its virtual focus on the accessibility element.\nfunc accessibilityElementIsFocused() -> Bool\nReturns a Boolean value indicating whether an assistive technology is focused on the accessibility element.\nfunc accessibilityAssistiveTechnologyFocusedIdentifiers() -> Set<UIAccessibility.AssistiveTechnologyIdentifier>?\nReturns a set of identifier keys indicating which assistive app has focus on the accessibility element."
  },
  {
    "title": "webScriptName(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1528539-webscriptname",
    "html": "Parameters\naSelector\n\nThe selector.\n\nReturn Value\n\nThe name used to represent the selector in the scripting environment.\n\nDiscussion\n\nIt is your responsibility to ensure that the returned name is unique to the script invoking this method. If this method returns nil or you do not implement it, the default name for the selector is constructed as follows:\n\nA colon (“:”) in the Objective-C selector is replaced by an underscore (“_”).\n\nAn underscore in the Objective-C selector is prefixed with a dollar sign (“$”).\n\nA dollar sign in the Objective-C selector is prefixed with another dollar sign.\n\nThe following table shows examples of how the default name is constructed:\n\nObjective-C selector\n\n\t\n\nDefault script name for selector\n\n\n\n\nsetFlag:\n\n\t\n\nsetFlag_\n\n\n\n\nsetFlag:forKey:withAttributes:\n\n\t\n\nsetFlag_forKey_withAttributes_\n\n\n\n\npropertiesForExample_Object:\n\n\t\n\npropertiesForExample$_Object_\n\n\n\n\nset_$_forKey:withDictionary:\n\n\t\n\nset$_$$_$_forKey_withDictionary_\n\nSince the default construction for a method name can be confusing depending on its Objective-C name, you should implement this method and return a more human-readable name.\n\nSee Also\nGetting attributes\nclass func webScriptName(forKey: UnsafePointer<CChar>!) -> String!\nReturns the scripting environment name for an attribute specified by a key.\nclass func isSelectorExcluded(fromWebScript: Selector!) -> Bool\nReturns whether a selector should be hidden from the scripting environment.\nclass func isKeyExcluded(fromWebScript: UnsafePointer<CChar>!) -> Bool\nReturns whether a key should be hidden from the scripting environment."
  },
  {
    "title": "webScriptName(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1528541-webscriptname",
    "html": "Parameters\nname\n\nThe name of the attribute.\n\nReturn Value\n\nThe name used to represent the attribute in the scripting environment.\n\nSee Also\nGetting attributes\nclass func webScriptName(for: Selector!) -> String!\nReturns the scripting environment name for a selector.\nclass func isSelectorExcluded(fromWebScript: Selector!) -> Bool\nReturns whether a selector should be hidden from the scripting environment.\nclass func isKeyExcluded(fromWebScript: UnsafePointer<CChar>!) -> Bool\nReturns whether a key should be hidden from the scripting environment."
  },
  {
    "title": "protocol_addProperty(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418585-protocol_addproperty",
    "html": "Parameters\nproto\n\nThe protocol you want to add a property to.\n\nname\n\nThe name of the property you want to add.\n\nattributes\n\nAn array of property attributes.\n\nattributeCount\n\nThe number of properties in attributes.\n\nisRequiredProperty\n\nA Boolean indicating whether the property’s accessor methods are required methods of the proto protocol. If true, the property’s accessor methods are required methods; if false, the property’s accessor methods are optional methods.\n\nisInstanceProperty\n\nA Boolean indicating whether the property’s accessor methods are instance methods. If true, the property’s accessor methods are instance methods. true is the only value allowed for a property. As a result, if you set this value to false, the property will not be added to the protocol.\n\nDiscussion\n\nThe protocol you want to add the property to must be under construction—allocated but not yet registered with the Objective-C runtime (via the objc_registerProtocol(_:) function).\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "protocol_addProtocol(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418494-protocol_addprotocol",
    "html": "Parameters\nproto\n\nThe protocol you want to add the registered protocol to.\n\naddition\n\nThe registered protocol you want to add to proto.\n\nDiscussion\n\nThe protocol you want to add to (proto) must be under construction—allocated but not yet registered with the Objective-C runtime. The protocol you want to add (addition) must be registered already.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "class_copyMethodList(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418490-class_copymethodlist",
    "html": "Parameters\ncls\n\nThe class you want to inspect.\n\noutCount\n\nOn return, contains the length of the returned array. If outCount is NULL, the length is not returned.\n\nReturn Value\n\nAn array of pointers of type Method describing the instance methods implemented by the class—any instance methods implemented by superclasses are not included. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().\n\nIf cls implements no instance methods, or cls is Nil, returns NULL and *outCount is 0.\n\nDiscussion\n\nTo get the class methods of a class, use class_copyMethodList(object_getClass(cls), &count).\n\nTo get the implementations of methods that may be implemented by superclasses, use class_getInstanceMethod(_:_:) or class_getClassMethod(_:_:).\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "objc_copyClassList(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418762-objc_copyclasslist",
    "html": "Parameters\noutCount\n\nAn integer pointer used to store the number of classes returned by this function in the list. This parameter may be nil.\n\nReturn Value\n\nA nil terminated array of classes. You must free the array with free().\n\nSee Also\nObtaining Class Definitions\nfunc objc_getClassList(AutoreleasingUnsafeMutablePointer<AnyClass>?, Int32) -> Int32\nObtains the list of registered class definitions.\nfunc objc_lookUpClass(UnsafePointer<CChar>) -> AnyClass?\nReturns the class definition of a specified class.\nfunc objc_getClass(UnsafePointer<CChar>) -> Any!\nReturns the class definition of a specified class.\nfunc objc_getRequiredClass(UnsafePointer<CChar>) -> AnyClass\nReturns the class definition of a specified class.\nfunc objc_getMetaClass(UnsafePointer<CChar>) -> Any!\nReturns the metaclass definition of a specified class."
  },
  {
    "title": "objc_getRequiredClass(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418661-objc_getrequiredclass",
    "html": "Parameters\nname\n\nThe name of the class to look up.\n\nReturn Value\n\nThe Class object for the named class.\n\nDiscussion\n\nThis function is the same as objc_getClass(_:), but kills the process if the class is not found.\n\nThis function is used by ZeroLink, where failing to find a class would be a compile-time link error without ZeroLink.\n\nSee Also\nObtaining Class Definitions\nfunc objc_getClassList(AutoreleasingUnsafeMutablePointer<AnyClass>?, Int32) -> Int32\nObtains the list of registered class definitions.\nfunc objc_copyClassList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<AnyClass>?\nCreates and returns a list of pointers to all registered class definitions.\nfunc objc_lookUpClass(UnsafePointer<CChar>) -> AnyClass?\nReturns the class definition of a specified class.\nfunc objc_getClass(UnsafePointer<CChar>) -> Any!\nReturns the class definition of a specified class.\nfunc objc_getMetaClass(UnsafePointer<CChar>) -> Any!\nReturns the metaclass definition of a specified class."
  },
  {
    "title": "objc_getClassList(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418579-objc_getclasslist",
    "html": "Parameters\nbuffer\n\nAn array of Class values. On output, each Class value points to one class definition, up to either bufferCount or the total number of registered classes, whichever is less. You can pass NULL to obtain the total number of registered class definitions without actually retrieving any class definitions.\n\nbufferCount\n\nAn integer value. Pass the number of pointers for which you have allocated space in buffer. On return, this function fills in only this number of elements. If this number is less than the number of registered classes, this function returns an arbitrary subset of the registered classes.\n\nReturn Value\n\nAn integer value indicating the total number of registered classes.\n\nDiscussion\n\nThe Objective-C runtime library automatically registers all the classes defined in your source code. You can create class definitions at runtime and register them with the objc_addClass function.\n\nListing 1 demonstrates how to use this function to retrieve all the class definitions that have been registered with the Objective-C runtime in the current process.\n\nListing 1 Using objc_getClassList\nint numClasses;\nClass * classes = NULL;\n \nclasses = NULL;\nnumClasses = objc_getClassList(NULL, 0);\n \nif (numClasses > 0 )\n{\n    classes = malloc(sizeof(Class) * numClasses);\n    numClasses = objc_getClassList(classes, numClasses);\n    free(classes);\n}\n\nSpecial Considerations\n\nYou can’t assume that class objects you get from this function are classes that inherit from NSObject, so you can’t safely call any methods on such classes without detecting that the method is implemented first.\n\nSee Also\nObtaining Class Definitions\nfunc objc_copyClassList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<AnyClass>?\nCreates and returns a list of pointers to all registered class definitions.\nfunc objc_lookUpClass(UnsafePointer<CChar>) -> AnyClass?\nReturns the class definition of a specified class.\nfunc objc_getClass(UnsafePointer<CChar>) -> Any!\nReturns the class definition of a specified class.\nfunc objc_getRequiredClass(UnsafePointer<CChar>) -> AnyClass\nReturns the class definition of a specified class.\nfunc objc_getMetaClass(UnsafePointer<CChar>) -> Any!\nReturns the metaclass definition of a specified class."
  },
  {
    "title": "class_getName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418635-class_getname",
    "html": "Parameters\ncls\n\nA class object.\n\nReturn Value\n\nThe name of the class, or the empty string if cls is Nil.\n\nSee Also\nWorking with Classes\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "Dispatch Function Prototypes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime/dispatch_function_prototypes",
    "html": "Topics\nConstants\nvar OBJC_OLD_DISPATCH_PROTOTYPES: Int32\nOBJC_OLD_DISPATCH_PROTOTYPES == 0 enforces the rule that the dispatch functions must be cast to an appropriate function pointer type."
  },
  {
    "title": "objc_property_attribute_t | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objc_property_attribute_t",
    "html": "Topics\nInitializers\ninit(name: UnsafePointer<CChar>, value: UnsafePointer<CChar>)\nInstance Properties\nvar name: UnsafePointer<CChar>\nThe name of the attribute.\nvar value: UnsafePointer<CChar>\nThe value of the attribute (usually empty).\nSee Also\nClass-Definition Data Structures\ntypealias Method\nAn opaque type that represents a method in a class definition.\ntypealias Ivar\nAn opaque type that represents an instance variable.\ntypealias Category\nAn opaque type that represents a category.\ntypealias objc_property_t\nAn opaque type that represents an Objective-C declared property.\nstruct objc_method_description\nDefines an Objective-C method."
  },
  {
    "title": "objc_object | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objc_object",
    "html": "Overview\n\nWhen you create an instance of a particular class, the allocated memory contains an objc_object data structure, which is directly followed by the data for the instance variables of the class.\n\nThe alloc and allocWithZone: methods of the Foundation framework class NSObject use the function class_createInstance(_:_:) to create objc_object data structures.\n\nTopics\nInitializers\ninit(isa: AnyClass)\nInstance Properties\nvar isa: AnyClass\nA pointer to the class definition of which this object is an instance.\nDeprecated\nSee Also\nInstance Data Types\nstruct objc_super\nSpecifies the superclass of an instance."
  },
  {
    "title": "objc_method_description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objc_method_description",
    "html": "Topics\nInstance Properties\nvar name: Selector?\nThe name of the method at runtime.\nvar types: UnsafeMutablePointer<CChar>?\nThe types of the method arguments.\nInitializers\ninit()\ninit(name: Selector?, types: UnsafeMutablePointer<CChar>?)\nSee Also\nClass-Definition Data Structures\ntypealias Method\nAn opaque type that represents a method in a class definition.\ntypealias Ivar\nAn opaque type that represents an instance variable.\ntypealias Category\nAn opaque type that represents a category.\ntypealias objc_property_t\nAn opaque type that represents an Objective-C declared property.\nstruct objc_property_attribute_t\nDefines a property attribute."
  },
  {
    "title": "Ivar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/ivar",
    "html": "See Also\nClass-Definition Data Structures\ntypealias Method\nAn opaque type that represents a method in a class definition.\ntypealias Category\nAn opaque type that represents a category.\ntypealias objc_property_t\nAn opaque type that represents an Objective-C declared property.\nstruct objc_method_description\nDefines an Objective-C method.\nstruct objc_property_attribute_t\nDefines a property attribute."
  },
  {
    "title": "NXHashTablePrototype | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nxhashtableprototype",
    "html": "Topics\nInitializers\ninit(hash: (UnsafeRawPointer?, UnsafeRawPointer?) -> UInt, isEqual: (UnsafeRawPointer?, UnsafeRawPointer?, UnsafeRawPointer?) -> Int32, free: (UnsafeRawPointer?, UnsafeMutableRawPointer?) -> Void, style: Int32)\nInstance Properties\nvar free: (UnsafeRawPointer?, UnsafeMutableRawPointer?) -> Void\nvar hash: (UnsafeRawPointer?, UnsafeRawPointer?) -> UInt\nvar isEqual: (UnsafeRawPointer?, UnsafeRawPointer?, UnsafeRawPointer?) -> Int32\nvar style: Int32"
  },
  {
    "title": "objc_property_t | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objc_property_t",
    "html": "See Also\nClass-Definition Data Structures\ntypealias Method\nAn opaque type that represents a method in a class definition.\ntypealias Ivar\nAn opaque type that represents an instance variable.\ntypealias Category\nAn opaque type that represents a category.\nstruct objc_method_description\nDefines an Objective-C method.\nstruct objc_property_attribute_t\nDefines a property attribute."
  },
  {
    "title": "Category | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/category",
    "html": "See Also\nClass-Definition Data Structures\ntypealias Method\nAn opaque type that represents a method in a class definition.\ntypealias Ivar\nAn opaque type that represents an instance variable.\ntypealias objc_property_t\nAn opaque type that represents an Objective-C declared property.\nstruct objc_method_description\nDefines an Objective-C method.\nstruct objc_property_attribute_t\nDefines a property attribute."
  },
  {
    "title": "property_copyAttributeList(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418675-property_copyattributelist",
    "html": "Parameters\nproperty\n\nThe property whose attributes you want to copy.\n\noutCount\n\nThe number of attributes returned in the array.\n\nReturn Value\n\nAn array of property attributes. You must free the array with free().\n\nSee Also\nWorking with Properties\nfunc property_getName(objc_property_t) -> UnsafePointer<CChar>\nReturns the name of a property.\nfunc property_getAttributes(objc_property_t) -> UnsafePointer<CChar>?\nReturns the attribute string of a property.\nfunc property_copyAttributeValue(objc_property_t, UnsafePointer<CChar>) -> UnsafeMutablePointer<CChar>?\nReturns the value of a property attribute given the attribute name."
  },
  {
    "title": "invokeUndefinedMethod(fromWebScript:withArguments:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1528562-invokeundefinedmethod",
    "html": "Parameters\nname\n\nThe name of the undefined method.\n\nargs\n\nThe arguments passed to the undefined method.\n\nReturn Value\n\nThe result of invoking the undefined method.\n\nDiscussion\n\nThis method is invoked when a script attempts to invoke a method not directly exported to the scripting environment. You should return the result of the invocation, converted appropriately for the scripting environment.\n\nSee Also\nInvoking methods\nfunc invokeDefaultMethod(withArguments: [Any]!) -> Any!\nExecutes when a script attempts to invoke a method on an exposed object directly."
  },
  {
    "title": "protocol_copyProtocolList(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418717-protocol_copyprotocollist",
    "html": "Parameters\nproto\n\nA protocol.\n\noutCount\n\nUpon return, contains the number of elements in the returned array.\n\nReturn Value\n\nA C array of protocols adopted by proto. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().\n\nIf the protocol declares no properties, NULL is returned and *outCount is 0.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "protocol_conformsToProtocol(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418783-protocol_conformstoprotocol",
    "html": "Parameters\nproto\n\nA protocol.\n\nother\n\nA protocol.\n\nReturn Value\n\ntrue if proto conforms to other, otherwise false.\n\nDiscussion\n\nOne protocol can incorporate other protocols using the same syntax that classes use to adopt a protocol:\n\n@protocol ProtocolName < protocol list >\n\n\nAll the protocols listed between angle brackets are considered part of the ProtocolName protocol.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol."
  },
  {
    "title": "property_copyAttributeValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418944-property_copyattributevalue",
    "html": "Parameters\nproperty\n\nThe property whose value you are interested in.\n\nattributeName\n\nA C string representing the name of the attribute.\n\nReturn Value\n\nThe value string of the attributeName attribute, if one exists in property; otherwise, nil. You must free the returned value string with free().\n\nSee Also\nWorking with Properties\nfunc property_getName(objc_property_t) -> UnsafePointer<CChar>\nReturns the name of a property.\nfunc property_getAttributes(objc_property_t) -> UnsafePointer<CChar>?\nReturns the attribute string of a property.\nfunc property_copyAttributeList(objc_property_t, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_attribute_t>?\nReturns an array of property attributes for a given property."
  },
  {
    "title": "forwardInvocation: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1571955-forwardinvocation",
    "html": "Parameters\nanInvocation\n\nThe invocation to forward.\n\nDiscussion\n\nWhen an object is sent a message for which it has no corresponding method, the runtime system gives the receiver an opportunity to delegate the message to another receiver. It delegates the message by creating an NSInvocation object representing the message and sending the receiver a forwardInvocation: message containing this NSInvocation object as the argument. The receiver’s forwardInvocation: method can then choose to forward the message to another object. (If that object can’t respond to the message either, it too will be given a chance to forward it.)\n\nThe forwardInvocation: message thus allows an object to establish relationships with other objects that will, for certain messages, act on its behalf. The forwarding object is, in a sense, able to “inherit” some of the characteristics of the object it forwards the message to.\n\nImportant\n\nTo respond to methods that your object does not itself recognize, you must override methodSignatureForSelector: in addition to forwardInvocation:. The mechanism for forwarding messages uses information obtained from methodSignatureForSelector: to create the NSInvocation object to be forwarded. Your overriding method must provide an appropriate method signature for the given selector, either by pre formulating one or by asking another object for one.\n\nAn implementation of the forwardInvocation: method has two tasks:\n\nTo locate an object that can respond to the message encoded in anInvocation. This object need not be the same for all messages.\n\nTo send the message to that object using anInvocation. anInvocation will hold the result, and the runtime system will extract and deliver this result to the original sender.\n\nIn the simple case, in which an object forwards messages to just one destination (such as the hypothetical friend instance variable in the example below), a forwardInvocation: method could be as simple as this:\n\n- (void)forwardInvocation:(NSInvocation *)invocation\n{\n    SEL aSelector = [invocation selector];\n \n    if ([friend respondsToSelector:aSelector])\n        [invocation invokeWithTarget:friend];\n    else\n        [super forwardInvocation:invocation];\n}\n\n\nThe message that’s forwarded must have a fixed number of arguments; variable numbers of arguments (in the style of printf()) are not supported.\n\nThe return value of the forwarded message is returned to the original sender. All types of return values can be delivered to the sender: id types, structures, double-precision floating-point numbers.\n\nImplementations of the forwardInvocation: method can do more than just forward messages. forwardInvocation: can, for example, be used to consolidate code that responds to a variety of different messages, thus avoiding the necessity of having to write a separate method for each selector. A forwardInvocation: method might also involve several other objects in the response to a given message, rather than forward it to just one.\n\nNSObject’s implementation of forwardInvocation: simply invokes the doesNotRecognizeSelector: method; it doesn’t forward any messages. Thus, if you choose not to implement forwardInvocation:, sending unrecognized messages to objects will raise exceptions.\n\nSee Also\nForwarding Messages\n- forwardingTargetForSelector:\nReturns the object to which unrecognized messages should first be directed."
  },
  {
    "title": "coerceValue(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416527-coercevalue",
    "html": "Discussion\n\nThe method coerceValueFor<Key>: is used if it exists."
  },
  {
    "title": "property_getAttributes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418909-property_getattributes",
    "html": "Return Value\n\nA C string containing the property's attributes.\n\nDiscussion\n\nThe format of the attribute string is described in Declared Properties in Objective-C Runtime Programming Guide.\n\nSee Also\nWorking with Properties\nfunc property_getName(objc_property_t) -> UnsafePointer<CChar>\nReturns the name of a property.\nfunc property_copyAttributeValue(objc_property_t, UnsafePointer<CChar>) -> UnsafeMutablePointer<CChar>?\nReturns the value of a property attribute given the attribute name.\nfunc property_copyAttributeList(objc_property_t, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_attribute_t>?\nReturns an array of property attributes for a given property."
  },
  {
    "title": "property_getName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418903-property_getname",
    "html": "Return Value\n\nA C string containing the property's name.\n\nSee Also\nWorking with Properties\nfunc property_getAttributes(objc_property_t) -> UnsafePointer<CChar>?\nReturns the attribute string of a property.\nfunc property_copyAttributeValue(objc_property_t, UnsafePointer<CChar>) -> UnsafeMutablePointer<CChar>?\nReturns the value of a property attribute given the attribute name.\nfunc property_copyAttributeList(objc_property_t, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_attribute_t>?\nReturns an array of property attributes for a given property."
  },
  {
    "title": "finalizeForWebScript() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1528546-finalizeforwebscript",
    "html": "Discussion\n\nThis method is invoked on objects exposed to the scripting environment just before the scripting environment is reset. After invocation, the receiving object will no longer be referenced by the scripting environment. Further references to WebScriptObject instances created by the exposed object will be invalid and may produce unpredictable results."
  },
  {
    "title": "isEqual(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobjectprotocol/1418795-isequal",
    "html": "Required\n\nParameters\nobject\n\nThe object to be compared to the receiver. May be nil, in which case this method returns false.\n\nReturn Value\n\ntrue if the receiver and anObject are equal, otherwise false.\n\nDiscussion\n\nThis method defines what it means for instances to be equal. For example, a container object might define two containers as equal if their corresponding objects all respond true to an isEqual(_:) request. See the NSData, NSDictionary, NSArray, and NSString class specifications for examples of the use of this method.\n\nIf two objects are equal, they must have the same hash value. This last point is particularly important if you define isEqual(_:) in a subclass and intend to put instances of that subclass into a collection. Make sure you also define hash in your subclass.\n\nSee Also\nIdentifying and Comparing Objects\nvar hash: Int\nReturns an integer that can be used as a table address in a hash table structure.\n\nRequired\n\nfunc `self`() -> Self\nReturns the receiver.\n\nRequired"
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952756-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952740-enumerated",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity: O(1)"
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952730-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952728-compactmap",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity: O(n), where n is the length of this sequence."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952739-elementsequal",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nComplexity: O(m), where m is the lesser of the length of the sequence and the length of other.\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)"
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952735-dropfirst",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the sequence. k must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity: O(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952733-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.\n\nReturn Value\n\nA sequence starting after the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nThe following example uses the drop(while:) method to skip over the positive numbers at the beginning of the numbers array. The result begins with the first element of numbers that does not satisfy predicate.\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nlet startingWithNegative = numbers.drop(while: { $0 > 0 })\n// startingWithNegative == [-2, 9, -6, 10, 1]\n\n\nIf predicate matches every element in the sequence, the result is an empty sequence.\n\nComplexity: O(k), where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952748-flatmap",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity: O(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952744-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952746-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952737-droplast",
    "html": "Parameters\nn\n\nThe number of elements to drop off the end of the sequence. n must be greater than or equal to zero.\n\nReturn Value\n\nA sequence leaving off the specified number of elements.\n\nDiscussion\n\nThe sequence must be finite. If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952726-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity: O(n), where n is the length of the sequence."
  },
  {
    "title": "ObjCClassList.Element | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/element",
    "html": "Relationships\nFrom Protocol\nSequence"
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist/3952786-underestimatedcount",
    "html": "Discussion\n\nThe default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively.\n\nComplexity: O(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount."
  },
  {
    "title": "objc_duplicateClass(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418645-objc_duplicateclass",
    "html": "Discussion\n\nDo not call this function yourself.\n\nSee Also\nAdding Classes\nfunc objc_allocateClassPair(AnyClass?, UnsafePointer<CChar>, Int) -> AnyClass?\nCreates a new class and metaclass.\nfunc objc_disposeClassPair(AnyClass)\nDestroys a class and its associated metaclass.\nfunc objc_registerClassPair(AnyClass)\nRegisters a class that was allocated using objc_allocateClassPair(_:_:_:)."
  },
  {
    "title": "class_setVersion(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418492-class_setversion",
    "html": "Parameters\ntheClass\n\nA pointer to an Class data structure. Pass the class definition for which you wish to set the version.\n\nversion\n\nAn integer. Pass the new version number of the class definition.\n\nDiscussion\n\nYou can use the version number of the class definition to provide versioning of the interface that your class represents to other classes. This is especially useful for object serialization (that is, archiving of the object in a flattened form), where it is important to recognize changes to the layout of the instance variables in different class-definition versions.\n\nClasses derived from the Foundation framework NSObject class can set the class-definition version number using the setVersion: class method, which is implemented using the class_setVersion function.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition."
  },
  {
    "title": "class_getMethodImplementation(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418811-class_getmethodimplementation",
    "html": "Parameters\ncls\n\nThe class you want to inspect.\n\nname\n\nA selector.\n\nReturn Value\n\nThe function pointer that would be called if [object name] were called with an instance of the class, or NULL if cls is Nil.\n\nDiscussion\n\nclass_getMethodImplementation(_:_:) may be faster than method_getImplementation(class_getInstanceMethod(cls, name)).\n\nThe function pointer returned may be a function internal to the runtime instead of an actual method implementation. For example, if instances of the class do not respond to the selector, the function pointer returned will be part of the runtime's message forwarding machinery.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "protocol_copyPropertyList(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418689-protocol_copypropertylist",
    "html": "Parameters\nproto\n\nA protocol.\n\noutCount\n\nUpon return, contains the number of elements in the returned array.\n\nReturn Value\n\nA C array of pointers of type objc_property_t describing the properties declared by proto. Any properties declared by other protocols adopted by this protocol are not included. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().\n\nIf the protocol declares no properties, NULL is returned and *outCount is 0.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "objc_getMetaClass(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418721-objc_getmetaclass",
    "html": "Parameters\nname\n\nThe name of the class to look up.\n\nReturn Value\n\nThe Class object for the metaclass of the named class, or nil if the class is not registered with the Objective-C runtime.\n\nDiscussion\n\nIf the definition for the named class is not registered, this function calls the class handler callback and then checks a second time to see if the class is registered. However, every class definition must have a valid metaclass definition, and so the metaclass definition is always returned, whether it’s valid or not.\n\nSee Also\nObtaining Class Definitions\nfunc objc_getClassList(AutoreleasingUnsafeMutablePointer<AnyClass>?, Int32) -> Int32\nObtains the list of registered class definitions.\nfunc objc_copyClassList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<AnyClass>?\nCreates and returns a list of pointers to all registered class definitions.\nfunc objc_lookUpClass(UnsafePointer<CChar>) -> AnyClass?\nReturns the class definition of a specified class.\nfunc objc_getClass(UnsafePointer<CChar>) -> Any!\nReturns the class definition of a specified class.\nfunc objc_getRequiredClass(UnsafePointer<CChar>) -> AnyClass\nReturns the class definition of a specified class."
  },
  {
    "title": "protocol_getMethodDescription(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418830-protocol_getmethoddescription",
    "html": "Parameters\np\n\nA protocol.\n\naSel\n\nA selector\n\nisRequiredMethod\n\nA Boolean value that indicates whether aSel is a required method.\n\nisInstanceMethod\n\nA Boolean value that indicates whether aSel is an instance method.\n\nReturn Value\n\nAn objc_method_description structure that describes the method specified by aSel, isRequiredMethod, and isInstanceMethod for the protocol p.\n\nIf the protocol does not contain the specified method, returns an objc_method_description structure with the value {NULL, NULL}.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "protocol_copyMethodDescriptionList(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418822-protocol_copymethoddescriptionli",
    "html": "Parameters\np\n\nA protocol.\n\nisRequiredMethod\n\nA Boolean value that indicates whether returned methods should be required methods (pass true to specify required methods).\n\nisInstanceMethod\n\nA Boolean value that indicates whether returned methods should be instance methods (pass true to specify instance methods).\n\noutCount\n\nUpon return, contains the number of method description structures in the returned array.\n\nReturn Value\n\nA C array of objc_method_description structures containing the names and types of p’s methods specified by isRequiredMethod and isInstanceMethod. The array contains *outCount pointers followed by a NULL terminator. You must free the list with free().\n\nIf the protocol declares no methods that meet the specification, NULL is returned and *outCount is 0.\n\nDiscussion\n\nMethods in other protocols adopted by this protocol are not included.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "protocol_getName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418826-protocol_getname",
    "html": "Parameters\np\n\nA protocol.\n\nReturn Value\n\nThe name of the protocol p as a C string.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "protocol_isEqual(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418705-protocol_isequal",
    "html": "Parameters\nproto\n\nA protocol.\n\nother\n\nA protocol.\n\nReturn Value\n\ntrue if proto is the same as other, otherwise false.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "protocol_addMethodDescription(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418709-protocol_addmethoddescription",
    "html": "Parameters\nproto\n\nThe protocol you want to add a method to.\n\nname\n\nThe name of the method you want to add.\n\ntypes\n\nA C string representing the signature of the method you want to add.\n\nisRequiredMethod\n\nA Boolean indicating whether the method is a required method of the proto protocol. If true, the method is a required method; if false, the method is an optional method.\n\nisInstanceMethod\n\nA Boolean indicating whether the method is an instance method. If true, the method is an instance method; if false, the method is a class method.\n\nDiscussion\n\nTo add a method to a protocol using this function, the protocol must be under construction. That is, you must add any methods to proto before you register it with the Objective-C runtime (via the objc_registerProtocol(_:) function).\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "objc_copyClassNamesForImage(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418485-objc_copyclassnamesforimage",
    "html": "Parameters\nimage\n\nThe library or framework you are inquiring about.\n\noutCount\n\nThe number of class names in the returned array.\n\nReturn Value\n\nAn array of C strings representing all of the class names within the specified library or framework.\n\nSee Also\nWorking with Libraries\nfunc objc_copyImageNames(UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<UnsafePointer<CChar>>\nReturns the names of all the loaded Objective-C frameworks and dynamic libraries.\nfunc class_getImageName(AnyClass?) -> UnsafePointer<CChar>?\nReturns the name of the dynamic library a class originated from."
  },
  {
    "title": "method_getArgumentType(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418607-method_getargumenttype",
    "html": "Discussion\n\nThe parameter type string is copied to dst. dst is filled as if strncpy(dst, parameter_type, dst_len) were called. If the method contains no parameter with that index, dst is filled as if strncpy(dst, \"\", dst_len) were called.\n\nSee Also\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods."
  },
  {
    "title": "method_exchangeImplementations(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418769-method_exchangeimplementations",
    "html": "Discussion\n\nThis is an atomic version of the following:\n\nIMP imp1 = method_getImplementation(m1);\nIMP imp2 = method_getImplementation(m2);\nmethod_setImplementation(m1, imp2);\nmethod_setImplementation(m2, imp1);\n\nSee Also\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method."
  },
  {
    "title": "method_getDescription(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418545-method_getdescription",
    "html": "Parameters\nm\n\nThe method you want to inquire about.\n\nReturn Value\n\nAn objc_method_description structure that describes the method specified by m.\n\nSee Also\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods."
  },
  {
    "title": "method_setImplementation(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418707-method_setimplementation",
    "html": "Return Value\n\nThe previous implementation of the method.\n\nSee Also\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods."
  },
  {
    "title": "objc_copyImageNames(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418970-objc_copyimagenames",
    "html": "Parameters\noutCount\n\nThe number of names in the returned array.\n\nReturn Value\n\nAn array of C strings representing the names of all the loaded Objective-C frameworks and dynamic libraries.\n\nSee Also\nWorking with Libraries\nfunc class_getImageName(AnyClass?) -> UnsafePointer<CChar>?\nReturns the name of the dynamic library a class originated from.\nfunc objc_copyClassNamesForImage(UnsafePointer<CChar>, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<UnsafePointer<CChar>>?\nReturns the names of all the classes within a specified library or framework."
  },
  {
    "title": "class_getImageName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418539-class_getimagename",
    "html": "Parameters\ncls\n\nThe class you are inquiring about.\n\nReturn Value\n\nA C string representing the name of the library containing the cls class.\n\nSee Also\nWorking with Libraries\nfunc objc_copyImageNames(UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<UnsafePointer<CChar>>\nReturns the names of all the loaded Objective-C frameworks and dynamic libraries.\nfunc objc_copyClassNamesForImage(UnsafePointer<CChar>, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<UnsafePointer<CChar>>?\nReturns the names of all the classes within a specified library or framework."
  },
  {
    "title": "object_getClassName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418547-object_getclassname",
    "html": "Parameters\nobj\n\nAn Objective-C object.\n\nReturn Value\n\nThe name of the class of which obj is an instance.\n\nSee Also\nWorking with Instances\nfunc object_getIndexedIvars(Any?) -> UnsafeMutableRawPointer?\nReturns a pointer to any extra bytes allocated with a instance given object.\nfunc object_getIvar(Any?, Ivar) -> Any?\nReads the value of an instance variable in an object.\nfunc object_setIvar(Any?, Ivar, Any?)\nSets the value of an instance variable in an object.\nfunc object_getClass(Any?) -> AnyClass?\nReturns the class of an object.\nfunc object_setClass(Any?, AnyClass) -> AnyClass?\nSets the class of an object."
  },
  {
    "title": "objc_getClass(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418952-objc_getclass",
    "html": "Parameters\nname\n\nThe name of the class to look up.\n\nReturn Value\n\nThe Class object for the named class, or nil if the class is not registered with the Objective-C runtime.\n\nDiscussion\n\nThe implementation of this function is identical to the implementation of the objc_lookUpClass(_:) function.\n\nSee Also\nObtaining Class Definitions\nfunc objc_getClassList(AutoreleasingUnsafeMutablePointer<AnyClass>?, Int32) -> Int32\nObtains the list of registered class definitions.\nfunc objc_copyClassList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<AnyClass>?\nCreates and returns a list of pointers to all registered class definitions.\nfunc objc_lookUpClass(UnsafePointer<CChar>) -> AnyClass?\nReturns the class definition of a specified class.\nfunc objc_getRequiredClass(UnsafePointer<CChar>) -> AnyClass\nReturns the class definition of a specified class.\nfunc objc_getMetaClass(UnsafePointer<CChar>) -> Any!\nReturns the metaclass definition of a specified class."
  },
  {
    "title": "object_setIvar(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418899-object_setivar",
    "html": "Parameters\nobject\n\nThe object containing the instance variable whose value you want to set.\n\nivar\n\nThe Ivar describing the instance variable whose value you want to set.\n\nvalue\n\nThe new value for the instance variable.\n\nDiscussion\n\nobject_setIvar(_:_:_:) is faster than object_setInstanceVariable if the Ivar for the instance variable is already known.\n\nSee Also\nWorking with Instances\nfunc object_getIndexedIvars(Any?) -> UnsafeMutableRawPointer?\nReturns a pointer to any extra bytes allocated with a instance given object.\nfunc object_getIvar(Any?, Ivar) -> Any?\nReads the value of an instance variable in an object.\nfunc object_getClassName(Any?) -> UnsafePointer<CChar>\nReturns the class name of a given object.\nfunc object_getClass(Any?) -> AnyClass?\nReturns the class of an object.\nfunc object_setClass(Any?, AnyClass) -> AnyClass?\nSets the class of an object."
  },
  {
    "title": "object_setClass(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418905-object_setclass",
    "html": "Parameters\nobject\n\nThe object to modify.\n\nsel\n\nA class object.\n\nReturn Value\n\nThe previous value of object‘s class, or Nil if object is nil.\n\nSee Also\nWorking with Instances\nfunc object_getIndexedIvars(Any?) -> UnsafeMutableRawPointer?\nReturns a pointer to any extra bytes allocated with a instance given object.\nfunc object_getIvar(Any?, Ivar) -> Any?\nReads the value of an instance variable in an object.\nfunc object_setIvar(Any?, Ivar, Any?)\nSets the value of an instance variable in an object.\nfunc object_getClassName(Any?) -> UnsafePointer<CChar>\nReturns the class name of a given object.\nfunc object_getClass(Any?) -> AnyClass?\nReturns the class of an object."
  },
  {
    "title": "objc_lookUpClass(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418760-objc_lookupclass",
    "html": "Parameters\nname\n\nThe name of the class to look up.\n\nReturn Value\n\nThe Class object for the named class, or nil if the class is not registered with the Objective-C runtime.\n\nDiscussion\n\nThe implementation of this function is identical to the implementation of the objc_getClass(_:) function.\n\nSee Also\nObtaining Class Definitions\nfunc objc_getClassList(AutoreleasingUnsafeMutablePointer<AnyClass>?, Int32) -> Int32\nObtains the list of registered class definitions.\nfunc objc_copyClassList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<AnyClass>?\nCreates and returns a list of pointers to all registered class definitions.\nfunc objc_getClass(UnsafePointer<CChar>) -> Any!\nReturns the class definition of a specified class.\nfunc objc_getRequiredClass(UnsafePointer<CChar>) -> AnyClass\nReturns the class definition of a specified class.\nfunc objc_getMetaClass(UnsafePointer<CChar>) -> Any!\nReturns the metaclass definition of a specified class."
  },
  {
    "title": "objc_enumerationMutation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418744-objc_enumerationmutation",
    "html": "Parameters\nobj\n\nThe object being mutated.\n\nDiscussion\n\nThe compiler inserts this function when it detects that an object is mutated during a foreach iteration. The function is called when a mutation occurs, and the enumeration mutation handler is enacted if it is set up (via the objc_setEnumerationMutationHandler(_:) function). If the handler is not set up, a fatal error occurs.\n\nSee Also\nUsing Objective-C Language Features\nfunc objc_setEnumerationMutationHandler(((Any) -> Void)?)\nSets the current mutation handler.\nfunc imp_implementationWithBlock(Any) -> IMP\nCreates a pointer to a function that calls the specified block when the method is called.\nfunc imp_getBlock(IMP) -> Any?\nReturns the block associated with an IMP that was created using imp_implementationWithBlock(_:).\nfunc imp_removeBlock(IMP) -> Bool\nDisassociates a block from an IMP that was created using imp_implementationWithBlock(_:), and releases the copy of the block that was created.\nfunc objc_loadWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>) -> Any?\nLoads the object referenced by a weak pointer and returns it.\nfunc objc_storeWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>, Any?) -> Any?\nStores a new value in a __weak variable."
  },
  {
    "title": "objc_loadWeak(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418693-objc_loadweak",
    "html": "Parameters\nlocation\n\nThe address of the weak pointer.\n\nReturn Value\n\nThe object pointed to by location, or nil if location is nil.\n\nDiscussion\n\nThis function loads the object referenced by a weak pointer and returns it after retaining and autoreleasing the object. As a result, the object stays alive long enough for the caller to use it. This function is typically used anywhere a __weak variable is used in an expression.\n\nSee Also\nUsing Objective-C Language Features\nfunc objc_enumerationMutation(Any)\nInserted by the compiler when a mutation is detected during a foreach iteration.\nfunc objc_setEnumerationMutationHandler(((Any) -> Void)?)\nSets the current mutation handler.\nfunc imp_implementationWithBlock(Any) -> IMP\nCreates a pointer to a function that calls the specified block when the method is called.\nfunc imp_getBlock(IMP) -> Any?\nReturns the block associated with an IMP that was created using imp_implementationWithBlock(_:).\nfunc imp_removeBlock(IMP) -> Bool\nDisassociates a block from an IMP that was created using imp_implementationWithBlock(_:), and releases the copy of the block that was created.\nfunc objc_storeWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>, Any?) -> Any?\nStores a new value in a __weak variable."
  },
  {
    "title": "imp_getBlock(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418820-imp_getblock",
    "html": "Parameters\nanImp\n\nThe IMP that calls this block.\n\nReturn Value\n\nThe block called by anImp.\n\nSee Also\nUsing Objective-C Language Features\nfunc objc_enumerationMutation(Any)\nInserted by the compiler when a mutation is detected during a foreach iteration.\nfunc objc_setEnumerationMutationHandler(((Any) -> Void)?)\nSets the current mutation handler.\nfunc imp_implementationWithBlock(Any) -> IMP\nCreates a pointer to a function that calls the specified block when the method is called.\nfunc imp_removeBlock(IMP) -> Bool\nDisassociates a block from an IMP that was created using imp_implementationWithBlock(_:), and releases the copy of the block that was created.\nfunc objc_loadWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>) -> Any?\nLoads the object referenced by a weak pointer and returns it.\nfunc objc_storeWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>, Any?) -> Any?\nStores a new value in a __weak variable."
  },
  {
    "title": "imp_removeBlock(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418482-imp_removeblock",
    "html": "Parameters\nanImp\n\nAn IMP that was created using the imp_implementationWithBlock(_:) function.\n\nReturn Value\n\ntrue if the block was released successfully; otherwise, false (for example, the function returns false if the block was not used to create anImp previously).\n\nSee Also\nUsing Objective-C Language Features\nfunc objc_enumerationMutation(Any)\nInserted by the compiler when a mutation is detected during a foreach iteration.\nfunc objc_setEnumerationMutationHandler(((Any) -> Void)?)\nSets the current mutation handler.\nfunc imp_implementationWithBlock(Any) -> IMP\nCreates a pointer to a function that calls the specified block when the method is called.\nfunc imp_getBlock(IMP) -> Any?\nReturns the block associated with an IMP that was created using imp_implementationWithBlock(_:).\nfunc objc_loadWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>) -> Any?\nLoads the object referenced by a weak pointer and returns it.\nfunc objc_storeWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>, Any?) -> Any?\nStores a new value in a __weak variable."
  },
  {
    "title": "imp_implementationWithBlock(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418587-imp_implementationwithblock",
    "html": "Parameters\nblock\n\nThe block that implements this method. The signature of block should be method_return_type ^(id self, method_args …). The selector of the method is not available to block. block is copied with Block_copy().\n\nReturn Value\n\nThe IMP that calls block. You must dispose of the returned IMP using the function.\n\nSee Also\nUsing Objective-C Language Features\nfunc objc_enumerationMutation(Any)\nInserted by the compiler when a mutation is detected during a foreach iteration.\nfunc objc_setEnumerationMutationHandler(((Any) -> Void)?)\nSets the current mutation handler.\nfunc imp_getBlock(IMP) -> Any?\nReturns the block associated with an IMP that was created using imp_implementationWithBlock(_:).\nfunc imp_removeBlock(IMP) -> Bool\nDisassociates a block from an IMP that was created using imp_implementationWithBlock(_:), and releases the copy of the block that was created.\nfunc objc_loadWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>) -> Any?\nLoads the object referenced by a weak pointer and returns it.\nfunc objc_storeWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>, Any?) -> Any?\nStores a new value in a __weak variable."
  },
  {
    "title": "objc_setEnumerationMutationHandler(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418751-objc_setenumerationmutationhandl",
    "html": "Parameters\nhandler\n\nA function pointer to the new mutation handler.\n\nSee Also\nUsing Objective-C Language Features\nfunc objc_enumerationMutation(Any)\nInserted by the compiler when a mutation is detected during a foreach iteration.\nfunc imp_implementationWithBlock(Any) -> IMP\nCreates a pointer to a function that calls the specified block when the method is called.\nfunc imp_getBlock(IMP) -> Any?\nReturns the block associated with an IMP that was created using imp_implementationWithBlock(_:).\nfunc imp_removeBlock(IMP) -> Bool\nDisassociates a block from an IMP that was created using imp_implementationWithBlock(_:), and releases the copy of the block that was created.\nfunc objc_loadWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>) -> Any?\nLoads the object referenced by a weak pointer and returns it.\nfunc objc_storeWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>, Any?) -> Any?\nStores a new value in a __weak variable."
  },
  {
    "title": "saveOptions(_:shouldShowUTType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503501-saveoptions",
    "html": "Parameters\nsaveOptions\n\nThe IKSaveOptions instance that called the delegate.\n\nutType\n\nThe uniform type identifier to test.\n\nReturn Value\n\ntrue if the specified type should be shown in the save options, otherwise false."
  },
  {
    "title": "readRSSI(forDeviceComplete:device:info:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1428399-readrssi",
    "html": "Parameters\nsender\n\nController object that sent this delegate message.\n\nDiscussion\n\nThis delegate gets invoked when an RSSI command complete event occurs. This could occur because you invoked it by issuing an -readRSSIForDevice: command, or someone else did from another app on the same controller.\n\nSee Also\nMiscellaneous\nfunc readLinkQuality(forDeviceComplete: Any!, device: IOBluetoothDevice!, info: UnsafeMutablePointer<BluetoothHCILinkQualityInfo>!, error: IOReturn)"
  },
  {
    "title": "imageVersion() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1504444-imageversion",
    "html": "Return Value\n\nThe version of the item.\n\nDiscussion\n\nThis method is optional. The receiver can return a new version to let the image browser know that it should not use its cache for the item.\n\nSee Also\nProviding Optional Information for an Image\nfunc imageTitle() -> String!\nReturns the display title of the image.\nfunc imageSubtitle() -> String!\nReturns the display subtitle of the image."
  },
  {
    "title": "originalString(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1385400-originalstring",
    "html": "Parameters\nsender\n\nThe client object requesting the original string.\n\nReturn Value\n\nThe original string of precomposed unicode characters. If an input method stores the original input text, it returns that text. The return value is an attributed string so that the input method can restore changes they made to the font, and other attributes, if necessary. The returned object should be an autoreleased object.\n\nSee Also\nGetting Input Strings and Candidates\nfunc composedString(Any!) -> Any!\nReturn the current composed string.\nfunc candidates(Any!) -> [Any]!\nReturns an array of candidates."
  },
  {
    "title": "isGreaterThan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393885-isgreaterthan",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\ntrue if the receiver is greater than object, otherwise false.\n\nDiscussion\n\nDuring the evaluation of an NSWhoseSpecifier object that contains a test whose operator is NSGreaterThanComparison, an isGreaterThan(_:) message may be sent to each potentially specified object, if the potentially specified object does not implement a scriptingIsGreaterThan(_:) method and the object being tested against does not implement a scriptingIsLessThanOrEqual(to:) method.\n\nThe default implementation for this method provided by NSObject returns true if a compare: message sent to the same object would return NSOrderedDescending.\n\nSee Also\nPerforming comparisons\nfunc doesContain(Any) -> Bool\nReturns a Boolean value that indicates whether the receiver contains a given object.\nfunc isCaseInsensitiveLike(String) -> Bool\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\nfunc isEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\nfunc isGreaterThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\nfunc isLessThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than another given object.\nfunc isLessThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\nfunc isLike(String) -> Bool\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\nfunc isNotEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "object_getIndexedIvars(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1441508-object_getindexedivars",
    "html": "Parameters\nobj\n\nAn Objective-C object.\n\nReturn Value\n\nA pointer to any extra bytes allocated with obj. If obj was not allocated with any extra bytes, then dereferencing the returned pointer is undefined.\n\nDiscussion\n\nThis function returns a pointer to any extra bytes allocated with the instance (as specified by class_createInstance(_:_:) with extraBytes>0). This memory follows the object's ordinary ivars, but may not be adjacent to the last ivar.\n\nThe returned pointer is guaranteed to be pointer-size aligned, even if the area following the object's last ivar is less aligned than that. Alignment greater than pointer-size is never guaranteed, even if the area following the object's last ivar is more aligned than that.\n\nIn a garbage-collected environment, the memory is scanned conservatively.\n\nSee Also\nWorking with Instances\nfunc object_getIvar(Any?, Ivar) -> Any?\nReads the value of an instance variable in an object.\nfunc object_setIvar(Any?, Ivar, Any?)\nSets the value of an instance variable in an object.\nfunc object_getClassName(Any?) -> UnsafePointer<CChar>\nReturns the class name of a given object.\nfunc object_getClass(Any?) -> AnyClass?\nReturns the class of an object.\nfunc object_setClass(Any?, AnyClass) -> AnyClass?\nSets the class of an object."
  },
  {
    "title": "object_getIvar(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418960-object_getivar",
    "html": "Parameters\nobject\n\nThe object containing the instance variable whose value you want to read.\n\nivar\n\nThe Ivar describing the instance variable whose value you want to read.\n\nReturn Value\n\nThe value of the instance variable specified by ivar, or nil if object is nil.\n\nDiscussion\n\nobject_getIvar(_:_:) is faster than object_getInstanceVariable if the Ivar for the instance variable is already known.\n\nSee Also\nWorking with Instances\nfunc object_getIndexedIvars(Any?) -> UnsafeMutableRawPointer?\nReturns a pointer to any extra bytes allocated with a instance given object.\nfunc object_setIvar(Any?, Ivar, Any?)\nSets the value of an instance variable in an object.\nfunc object_getClassName(Any?) -> UnsafePointer<CChar>\nReturns the class name of a given object.\nfunc object_getClass(Any?) -> AnyClass?\nReturns the class of an object.\nfunc object_setClass(Any?, AnyClass) -> AnyClass?\nSets the class of an object."
  },
  {
    "title": "objc_registerClassPair(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418603-objc_registerclasspair",
    "html": "Parameters\ncls\n\nThe class you want to register.\n\nSee Also\nAdding Classes\nfunc objc_allocateClassPair(AnyClass?, UnsafePointer<CChar>, Int) -> AnyClass?\nCreates a new class and metaclass.\nfunc objc_disposeClassPair(AnyClass)\nDestroys a class and its associated metaclass.\nfunc objc_duplicateClass(AnyClass, UnsafePointer<CChar>, Int) -> AnyClass\nUsed by Foundation's Key-Value Observing."
  },
  {
    "title": "class_getMethodImplementation_stret(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418771-class_getmethodimplementation_st",
    "html": "Parameters\ncls\n\nThe class you want to inspect.\n\nname\n\nA selector.\n\nReturn Value\n\nThe function pointer that would be called if [object name] were called with an instance of the class, or NULL if cls is Nil.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "objc_allocateClassPair(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418559-objc_allocateclasspair",
    "html": "Parameters\nsuperclass\n\nThe class to use as the new class's superclass, or Nil to create a new root class.\n\nname\n\nThe string to use as the new class's name. The string will be copied.\n\nextraBytes\n\nThe number of bytes to allocate for indexed ivars at the end of the class and metaclass objects. This should usually be 0.\n\nReturn Value\n\nThe new class, or Nil if the class could not be created (for example, the desired name is already in use).\n\nDiscussion\n\nYou can get a pointer to the new metaclass by calling object_getClass(newClass).\n\nTo create a new class, start by calling objc_allocateClassPair(_:_:_:). Then set the class's attributes with functions like class_addMethod(_:_:_:_:) and class_addIvar(_:_:_:_:_:). When you are done building the class, call objc_registerClassPair(_:). The new class is now ready for use.\n\nInstance methods and instance variables should be added to the class itself. Class methods should be added to the metaclass.\n\nSee Also\nAdding Classes\nfunc objc_disposeClassPair(AnyClass)\nDestroys a class and its associated metaclass.\nfunc objc_registerClassPair(AnyClass)\nRegisters a class that was allocated using objc_allocateClassPair(_:_:_:).\nfunc objc_duplicateClass(AnyClass, UnsafePointer<CChar>, Int) -> AnyClass\nUsed by Foundation's Key-Value Observing."
  },
  {
    "title": "class_getVersion(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418537-class_getversion",
    "html": "Parameters\ntheClass\n\nA pointer to an Class data structure. Pass the class definition for which you wish to obtain the version.\n\nReturn Value\n\nAn integer indicating the version number of the class definition.\n\nDiscussion\n\nYou can use the version number of the class definition to provide versioning of the interface that your class represents to other classes. This is especially useful for object serialization (that is, archiving of the object in a flattened form), where it is important to recognize changes to the layout of the instance variables in different class-definition versions.\n\nClasses derived from the Foundation framework NSObject class can obtain the class-definition version number using the getVersion class method, which is implemented using the class_getVersion function.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_addMethod(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418901-class_addmethod",
    "html": "Parameters\ncls\n\nThe class to which to add a method.\n\nname\n\nA selector that specifies the name of the method being added.\n\nimp\n\nA function which is the implementation of the new method. The function must take at least two arguments—self and _cmd.\n\ntypes\n\nAn array of characters that describe the types of the arguments to the method. For possible values, see Objective-C Runtime Programming Guide > Type Encodings. Since the function must take at least two arguments—self and _cmd, the second and third characters must be “@:” (the first character is the return type).\n\nReturn Value\n\ntrue if the method was added successfully, otherwise false (for example, the class already contains a method implementation with that name).\n\nDiscussion\n\nclass_addMethod(_:_:_:_:) will add an override of a superclass's implementation, but will not replace an existing implementation in this class. To change an existing implementation, use method_setImplementation(_:_:).\n\nAn Objective-C method is simply a C function that take at least two arguments—self and _cmd. For example, given the following function:\n\nvoid myMethodIMP(id self, SEL _cmd)\n{\n    // implementation ....\n}\n\n\nyou can dynamically add it to a class as a method (called resolveThisMethodDynamically) like this:\n\nclass_addMethod([self class], @selector(resolveThisMethodDynamically), (IMP) myMethodIMP, \"v@:\");\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_replaceMethod(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418677-class_replacemethod",
    "html": "Parameters\ncls\n\nThe class you want to modify.\n\nname\n\nA selector that identifies the method whose implementation you want to replace.\n\nimp\n\nThe new implementation for the method identified by name for the class identified by cls.\n\ntypes\n\nAn array of characters that describe the types of the arguments to the method. For possible values, see Objective-C Runtime Programming Guide > Type Encodings. Since the function must take at least two arguments—self and _cmd, the second and third characters must be “@:” (the first character is the return type).\n\nReturn Value\n\nThe previous implementation of the method identified by name for the class identified by cls.\n\nDiscussion\n\nThis function behaves in two different ways:\n\nIf the method identified by name does not yet exist, it is added as if class_addMethod(_:_:_:_:) were called. The type encoding specified by types is used as given.\n\nIf the method identified by name does exist, its IMP is replaced as if method_setImplementation(_:_:) were called. The type encoding specified by types is ignored.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_getInstanceMethod(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418530-class_getinstancemethod",
    "html": "Parameters\naClass\n\nThe class you want to inspect.\n\naSelector\n\nThe selector of the method you want to retrieve.\n\nReturn Value\n\nThe method that corresponds to the implementation of the selector specified by aSelector for the class specified by aClass, or NULL if the specified class or its superclasses do not contain an instance method with the specified selector.\n\nDiscussion\n\nNote that this function searches superclasses for implementations, whereas class_copyMethodList(_:_:) does not.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_getClassMethod(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418887-class_getclassmethod",
    "html": "Parameters\naClass\n\nA pointer to a class definition. Pass the class that contains the method you want to retrieve.\n\naSelector\n\nA pointer of type SEL. Pass the selector of the method you want to retrieve.\n\nReturn Value\n\nA pointer to the Method data structure that corresponds to the implementation of the selector specified by aSelector for the class specified by aClass, or NULL if the specified class or its superclasses do not contain a class method with the specified selector.\n\nDiscussion\n\nNote that this function searches superclasses for implementations, whereas class_copyMethodList(_:_:) does not.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_addIvar(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418756-class_addivar",
    "html": "Return Value\n\ntrue if the instance variable was added successfully, otherwise false (for example, the class already contains an instance variable with that name).\n\nDiscussion\n\nThis function may only be called after objc_allocateClassPair(_:_:_:) and before objc_registerClassPair(_:). Adding an instance variable to an existing class is not supported.\n\nThe class must not be a metaclass. Adding an instance variable to a metaclass is not supported.\n\nThe instance variable's minimum alignment in bytes is 1<<align. The minimum alignment of an instance variable depends on the ivar's type and the machine architecture. For variables of any pointer type, pass log2(sizeof(pointer_type)).\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_getProperty(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418597-class_getproperty",
    "html": "Return Value\n\nA pointer of type objc_property_t describing the property, or NULL if the class does not declare a property with that name, or NULL if cls is Nil.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_getClassVariable(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418487-class_getclassvariable",
    "html": "Parameters\ncls\n\nThe class definition whose class variable you wish to obtain.\n\nname\n\nThe name of the class variable definition to obtain.\n\nReturn Value\n\nA pointer to an Ivar data structure containing information about the class variable specified by name.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_getInstanceVariable(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418643-class_getinstancevariable",
    "html": "Parameters\ncls\n\nThe class whose instance variable you wish to obtain.\n\nname\n\nThe name of the instance variable definition to obtain.\n\nReturn Value\n\nA pointer to an Ivar data structure containing information about the instance variable specified by name.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_getInstanceSize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418907-class_getinstancesize",
    "html": "Parameters\ncls\n\nA class object.\n\nReturn Value\n\nThe size in bytes of instances of the class cls, or 0 if cls is Nil.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_setSuperclass(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1441536-class_setsuperclass",
    "html": "Parameters\ncls\n\nThe class whose superclass you want to set.\n\nnewSuper\n\nThe new superclass for cls.\n\nReturn Value\n\nThe old superclass for cls.\n\nDiscussion\n\nYou should not use this function.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_isMetaClass(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418627-class_ismetaclass",
    "html": "Parameters\ncls\n\nA class object.\n\nReturn Value\n\ntrue if cls is a metaclass, false if cls is a non-meta class, false if cls is Nil.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_getSuperclass(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418498-class_getsuperclass",
    "html": "Parameters\ncls\n\nA class object.\n\nReturn Value\n\nThe superclass of the class, or Nil if cls is a root class, or Nil if cls is Nil.\n\nDiscussion\n\nYou should usually use NSObject‘s superclass() method instead of this function.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "title(for:identifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411304-title",
    "html": "Parameters\nperson\n\nThe person on which the action will be taken.\n\nidentifier\n\nThe unique identifier of the value for which the menu item will be displayed.\n\nReturn Value\n\nThe title of the menu item for the action.\n\nDiscussion\n\nIf the property returned by actionProperty() is a multivalue property, identifier contains the unique identifier of the value selected.\n\nSee Also\nQuerying\nfunc actionProperty() -> String!\nSent to the delegate to request the property the action applies to.\nfunc shouldEnableAction(for: ABPerson!, identifier: String!) -> Bool\nSent to the delegate to determine whether the action should be enabled."
  },
  {
    "title": "objc_registerProtocol(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418861-objc_registerprotocol",
    "html": "Parameters\nproto\n\nThe protocol you want to register with the Objective-C runtime.\n\nDiscussion\n\nWhen you create a new protocol using the objc_allocateProtocol(_:), you then register it with the Objective-C runtime by calling this function. After a protocol is successfully registered, it is immutable and ready to use.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "objc_copyProtocolList(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418549-objc_copyprotocollist",
    "html": "Parameters\noutCount\n\nUpon return, contains the number of protocols in the returned array.\n\nReturn Value\n\nA C array of all the protocols known to the runtime. The array contains *outCount pointers followed by a NULL terminator. You must free the list with free().\n\nDiscussion\n\nThis function acquires the runtime lock.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "objc_getProtocol(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418870-objc_getprotocol",
    "html": "Parameters\nname\n\nThe name of a protocol.\n\nReturn Value\n\nThe protocol named name, or NULL if no protocol named name could be found.\n\nDiscussion\n\nThis function acquires the runtime lock.\n\nSee Also\nWorking with Protocols\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "objc_allocateProtocol(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418599-objc_allocateprotocol",
    "html": "Parameters\nname\n\nThe name of the protocol you want to create.\n\nReturn Value\n\nA new protocol instance or nil if a protocol with the same name as name already exists.\n\nDiscussion\n\nYou must register the returned protocol instance with the objc_registerProtocol(_:) function before you can use it.\n\nThere is no dispose method associated with this function.\n\nSee Also\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol."
  },
  {
    "title": "sel_isEqual(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418736-sel_isequal",
    "html": "Parameters\nlhs\n\nThe selector to compare with rhs.\n\nrhs\n\nThe selector to compare with lhs.\n\nReturn Value\n\ntrue if rhs and rhs are equal, otherwise false.\n\nDiscussion\n\nsel_isEqual is equivalent to ==.\n\nSee Also\nWorking with Selectors\nfunc sel_getName(Selector) -> UnsafePointer<CChar>\nReturns the name of the method specified by a given selector.\nfunc sel_registerName(UnsafePointer<CChar>) -> Selector\nRegisters a method with the Objective-C runtime system, maps the method name to a selector, and returns the selector value.\nfunc sel_getUid(UnsafePointer<CChar>) -> Selector\nRegisters a method name with the Objective-C runtime system."
  },
  {
    "title": "sel_getUid(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418625-sel_getuid",
    "html": "Parameters\nstr\n\nA pointer to a C string. Pass the name of the method you wish to register.\n\nReturn Value\n\nA pointer of type SEL specifying the selector for the named method.\n\nDiscussion\n\nThe implementation of this method is identical to the implementation of sel_registerName(_:).\n\nVersion-Notes\n\nPrior to OS X version 10.0, this method tried to find the selector mapped to the given name and returned NULL if the selector was not found. This was changed for safety, because it was observed that many of the callers of this function did not check the return value for NULL.\n\nSee Also\nWorking with Selectors\nfunc sel_getName(Selector) -> UnsafePointer<CChar>\nReturns the name of the method specified by a given selector.\nfunc sel_registerName(UnsafePointer<CChar>) -> Selector\nRegisters a method with the Objective-C runtime system, maps the method name to a selector, and returns the selector value.\nfunc sel_isEqual(Selector, Selector) -> Bool\nReturns a Boolean value that indicates whether two selectors are equal."
  },
  {
    "title": "sel_getName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418571-sel_getname",
    "html": "Parameters\naSelector\n\nA pointer of type SEL. Pass the selector whose name you wish to determine.\n\nReturn Value\n\nA C string indicating the name of the selector.\n\nSee Also\nWorking with Selectors\nfunc sel_registerName(UnsafePointer<CChar>) -> Selector\nRegisters a method with the Objective-C runtime system, maps the method name to a selector, and returns the selector value.\nfunc sel_getUid(UnsafePointer<CChar>) -> Selector\nRegisters a method name with the Objective-C runtime system.\nfunc sel_isEqual(Selector, Selector) -> Bool\nReturns a Boolean value that indicates whether two selectors are equal."
  },
  {
    "title": "sel_registerName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418557-sel_registername",
    "html": "Parameters\nstr\n\nA pointer to a C string. Pass the name of the method you wish to register.\n\nReturn Value\n\nA pointer of type SEL specifying the selector for the named method.\n\nDiscussion\n\nYou must register a method name with the Objective-C runtime system to obtain the method’s selector before you can add the method to a class definition. If the method name has already been registered, this function simply returns the selector.\n\nSee Also\nWorking with Selectors\nfunc sel_getName(Selector) -> UnsafePointer<CChar>\nReturns the name of the method specified by a given selector.\nfunc sel_getUid(UnsafePointer<CChar>) -> Selector\nRegisters a method name with the Objective-C runtime system.\nfunc sel_isEqual(Selector, Selector) -> Bool\nReturns a Boolean value that indicates whether two selectors are equal."
  },
  {
    "title": "method_copyArgumentType(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418832-method_copyargumenttype",
    "html": "Parameters\nmethod\n\nThe method to inspect.\n\nindex\n\nThe index of the parameter to inspect.\n\nReturn Value\n\nA C string describing the type of the parameter at index index, or NULL if method has no parameter index index. You must free the string with free().\n\nSee Also\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods."
  },
  {
    "title": "method_getName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418758-method_getname",
    "html": "Parameters\nmethod\n\nThe method to inspect.\n\nReturn Value\n\nA pointer of type SEL.\n\nDiscussion\n\nTo get the method name as a C string, call sel_getName(method_getName(method)).\n\nSee Also\nWorking with Methods\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods."
  },
  {
    "title": "method_getNumberOfArguments(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418968-method_getnumberofarguments",
    "html": "Parameters\nmethod\n\nA pointer to a Method data structure. Pass the method in question.\n\nReturn Value\n\nAn integer containing the number of arguments accepted by the given method.\n\nSee Also\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods."
  },
  {
    "title": "method_getReturnType(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418591-method_getreturntype",
    "html": "Discussion\n\nThe method's return type string is copied to dst. dst is filled as if strncpy(dst, parameter_type, dst_len) were called.\n\nSee Also\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods."
  },
  {
    "title": "method_getTypeEncoding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418488-method_gettypeencoding",
    "html": "Parameters\nmethod\n\nThe method to inspect.\n\nReturn Value\n\nA C string. The string may be NULL.\n\nSee Also\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods."
  },
  {
    "title": "method_copyReturnType(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418777-method_copyreturntype",
    "html": "Parameters\nmethod\n\nThe method to inspect.\n\nReturn Value\n\nA C string describing the return type. You must free the string with free().\n\nSee Also\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods."
  },
  {
    "title": "objc_removeAssociatedObjects(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418683-objc_removeassociatedobjects",
    "html": "Parameters\nobject\n\nAn object that maintains associated objects.\n\nDiscussion\n\nThe main purpose of this function is to make it easy to return an object to a \"pristine state”. You should not use this function for general removal of associations from objects, since it also removes associations that other clients may have added to the object. Typically you should use objc_setAssociatedObject(_:_:_:_:) with a nil value to clear an association.\n\nSee Also\nAssociative References\nfunc objc_setAssociatedObject(Any, UnsafeRawPointer, Any?, objc_AssociationPolicy)\nSets an associated value for a given object using a given key and association policy.\nfunc objc_getAssociatedObject(Any, UnsafeRawPointer) -> Any?\nReturns the value associated with a given object for a given key."
  },
  {
    "title": "method_getImplementation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418551-method_getimplementation",
    "html": "Parameters\nmethod\n\nThe method to inspect.\n\nReturn Value\n\nA function pointer of type IMP.\n\nSee Also\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods."
  },
  {
    "title": "objc_setAssociatedObject(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418509-objc_setassociatedobject",
    "html": "Parameters\nobject\n\nThe source object for the association.\n\nkey\n\nThe key for the association.\n\nvalue\n\nThe value to associate with the key key for object. Pass nil to clear an existing association.\n\npolicy\n\nThe policy for the association. For possible values, see objc_AssociationPolicy.\n\nSee Also\nAssociative References\nfunc objc_getAssociatedObject(Any, UnsafeRawPointer) -> Any?\nReturns the value associated with a given object for a given key.\nfunc objc_removeAssociatedObjects(Any)\nRemoves all associations for a given object."
  },
  {
    "title": "objc_getAssociatedObject(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418865-objc_getassociatedobject",
    "html": "Parameters\nobject\n\nThe source object for the association.\n\nkey\n\nThe key for the association.\n\nReturn Value\n\nThe value associated with the key key for object.\n\nSee Also\nAssociative References\nfunc objc_setAssociatedObject(Any, UnsafeRawPointer, Any?, objc_AssociationPolicy)\nSets an associated value for a given object using a given key and association policy.\nfunc objc_removeAssociatedObjects(Any)\nRemoves all associations for a given object."
  },
  {
    "title": "ivar_getTypeEncoding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418569-ivar_gettypeencoding",
    "html": "Return Value\n\nA C string containing the instance variable's type encoding.\n\nDiscussion\n\nFor possible values, see Objective-C Runtime Programming Guide > Type Encodings.\n\nSee Also\nWorking with Instance Variables\nfunc ivar_getName(Ivar) -> UnsafePointer<CChar>?\nReturns the name of an instance variable.\nfunc ivar_getOffset(Ivar) -> Int\nReturns the offset of an instance variable."
  },
  {
    "title": "ivar_getOffset(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418976-ivar_getoffset",
    "html": "Discussion\n\nFor instance variables of type id or other object types, call object_getIvar(_:_:) and object_setIvar(_:_:_:) instead of using this offset to access the instance variable data directly.\n\nSee Also\nWorking with Instance Variables\nfunc ivar_getName(Ivar) -> UnsafePointer<CChar>?\nReturns the name of an instance variable.\nfunc ivar_getTypeEncoding(Ivar) -> UnsafePointer<CChar>?\nReturns the type string of an instance variable."
  },
  {
    "title": "ivar_getName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418922-ivar_getname",
    "html": "Return Value\n\nA C string containing the instance variable's name.\n\nSee Also\nWorking with Instance Variables\nfunc ivar_getTypeEncoding(Ivar) -> UnsafePointer<CChar>?\nReturns the type string of an instance variable.\nfunc ivar_getOffset(Ivar) -> Int\nReturns the offset of an instance variable."
  },
  {
    "title": "imageBrowser(_:writeItemsAt:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1504208-imagebrowser",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nitemIndexes\n\nThe indexes of the items that should be dragged.\n\npasteboard\n\nThe pasteboard to copy the items to.\n\nReturn Value\n\nThe number of items written to the pasteboard.\n\nDiscussion\n\nThis method is optional. It is invoked after Image Kit determines that a drag should begin, but before the drag has been started.\n\nSee Also\nSupporting Item Editing (Optional)\nfunc imageBrowser(IKImageBrowserView!, removeItemsAt: IndexSet!)\nSignals that a remove operation should be applied to the specified items.\nfunc imageBrowser(IKImageBrowserView!, moveItemsAt: IndexSet!, to: Int) -> Bool\nSignals that the specified items should be moved to the specified destination."
  },
  {
    "title": "readLinkQuality(forDeviceComplete:device:info:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430075-readlinkquality",
    "html": "Parameters\nsender\n\nController object that sent this delegate message.\n\nDiscussion\n\nThis delegate gets invoked when an read link quality command complete event occurs. This could occur because you invoked it by issuing an -readLinkQualityForDevice: command, or someone else did from another app on the same controller.\n\nSee Also\nMiscellaneous\nfunc readRSSI(forDeviceComplete: Any!, device: IOBluetoothDevice!, info: UnsafeMutablePointer<BluetoothHCIRSSIInfo>!, error: IOReturn)"
  },
  {
    "title": "provideImageData(_:bytesPerRow:origin:_:size:_:userInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1438175-provideimagedata",
    "html": "Parameters\ndata\n\nA pointer to image data. Note that data[0] refers to the first byte of the requested subimage, not the larger image buffer.\n\nrowbytes\n\nThe number of bytes per row.\n\nx\n\nThe x origin of the image data.\n\ny\n\nThe y origin of the image data.\n\nwidth\n\nThe width of the image data.\n\nheight\n\nThe height of the image data.\n\ninfo\n\nUser supplied data, which is optional.\n\nDiscussion\n\nYou can supply the image provider to these methods of the CIImage class:\n\nimageWithImageProvider:size::format:colorSpace:options: to create a CIImage object from image data\n\ninit(imageProvider:size:_:format:colorSpace:options:) to initialize an existing CIImage with data\n\nYou initialize the given bitmap with the subregion specified by the arguments x, y, width, and height. The subregion uses the local coordinate space of the image, with the origin at the upper-left corner of the image. If you change the virtual memory mapping of the buffer specified by the data argument (such as by using vm_copy to modify it), the behavior is undefined.\n\nThat this callback always requests the full image data regardless of what is actually visible. All of the image is loaded or none of it is. The exception is when you create a tiled image by specifying the kCIImageProviderTileSize option. In this case, only the needed tiles are requested.\n\nSee Also\nRelated Documentation\nCore Image Programming Guide"
  },
  {
    "title": "prepareForInterfaceBuilder() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1402908-prepareforinterfacebuilder",
    "html": "Discussion\n\nWhen Interface Builder instantiates a class with the IB_DESIGNABLE attribute, it calls this method to let the resulting object know that it was created at design time. You can implement this method in your designable classes and use it to configure their design-time appearance. For example, you might use the method to configure a custom text control with a default string. The system does not call this method; only Interface Builder calls it.\n\nInterface Builder waits until all objects in a graph have been created and initialized before calling this method. So if your object’s runtime configuration relies on subviews or parent views, those objects should exist by the time this method is called.\n\nYour implementation of this method must call super at some point so that parent classes can perform their own custom setup."
  },
  {
    "title": "performAction(for:identifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411298-performaction",
    "html": "Parameters\nperson\n\nThe person on which the action will be taken.\n\nidentifier\n\nThe unique identifier of the selected value.\n\nDiscussion\n\nIf the property returned by actionProperty() is a multivalue property, identifier contains the unique identifier of the value selected. The person being displayed in the Address Book application’s card view when the rollover menu is accesses is passed as person."
  },
  {
    "title": "isNotEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393843-isnotequal",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\ntrue if the receiver is not equal to object, otherwise false.\n\nDiscussion\n\nCurrently, isNotEqual(to:) messages are never sent to any object from within Cocoa itself.\n\nThe default implementation for this method provided by NSObject method returns true if an isEqual: message sent to the same object would return false.\n\nSee Also\nPerforming comparisons\nfunc doesContain(Any) -> Bool\nReturns a Boolean value that indicates whether the receiver contains a given object.\nfunc isCaseInsensitiveLike(String) -> Bool\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\nfunc isEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\nfunc isGreaterThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\nfunc isGreaterThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\nfunc isLessThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than another given object.\nfunc isLessThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\nfunc isLike(String) -> Bool\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object."
  },
  {
    "title": "isLessThanOrEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393827-islessthanorequal",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\ntrue if the receiver is less than or equal to object, otherwise false.\n\nDiscussion\n\nDuring the evaluation of an NSWhoseSpecifier object that contains a test whose operator is NSLessThanOrEqualToComparison, an isLessThanOrEqual(to:) message may be sent to each potentially specified object, if the potentially specified object does not implement a scriptingIsLessThanOrEqual(to:) method and the object being tested against does not implement a scriptingIsGreaterThan(_:) method.\n\nThe default implementation for this method provided by NSObject method returns true if a compare: message sent to the same object would return NSOrderedAscending or NSOrderedSame.\n\nSee Also\nPerforming comparisons\nfunc doesContain(Any) -> Bool\nReturns a Boolean value that indicates whether the receiver contains a given object.\nfunc isCaseInsensitiveLike(String) -> Bool\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\nfunc isEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\nfunc isGreaterThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\nfunc isGreaterThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\nfunc isLessThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than another given object.\nfunc isLike(String) -> Bool\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\nfunc isNotEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "isEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393823-isequal",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\ntrue if the receiver is equal to object, otherwise false. In effect returns false if receiver is nil.\n\nDiscussion\n\nDuring the evaluation of an NSWhoseSpecifier object that contains a test whose operator is NSEqualToComparison, an isEqual(to:) message may be sent to each potentially specified object, if neither the potentially specified object nor the object being tested against implements a scriptingIsEqual(to:) method.\n\nThe default implementation for this method provided by NSObject returns true if an isEqualTo: message sent to the same object would return true.\n\nSee Also\nPerforming comparisons\nfunc doesContain(Any) -> Bool\nReturns a Boolean value that indicates whether the receiver contains a given object.\nfunc isCaseInsensitiveLike(String) -> Bool\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\nfunc isGreaterThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\nfunc isGreaterThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\nfunc isLessThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than another given object.\nfunc isLessThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\nfunc isLike(String) -> Bool\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\nfunc isNotEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "isCaseInsensitiveLike(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393837-iscaseinsensitivelike",
    "html": "Parameters\naString\n\nThe string with which to compare the receiver.\n\nReturn Value\n\ntrue if the receiver is considered to be “like” aString when the case of characters in the receiver is ignored, otherwise false.\n\nDiscussion\n\nCurrently, isCaseInsensitiveLike(_:) messages are never sent to any object from within Cocoa itself.\n\nThe default implementation for this method provided by NSObject returns false. NSString also provides an implementation of this method, which returns true if the receiver matches a pattern described by aString, ignoring the case of the characters in the receiver.\n\nSee Also\nPerforming comparisons\nfunc doesContain(Any) -> Bool\nReturns a Boolean value that indicates whether the receiver contains a given object.\nfunc isEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\nfunc isGreaterThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\nfunc isGreaterThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\nfunc isLessThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than another given object.\nfunc isLessThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\nfunc isLike(String) -> Bool\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\nfunc isNotEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "inputText(_:key:modifiers:client:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1385436-inputtext",
    "html": "Parameters\nstring\n\nThe text input by the client.\n\nkeyCode\n\nThe key code for the associated Unicode.\n\nflags\n\nThe modifier flags.\n\nsender\n\nThe client object.\n\nReturn Value\n\ntrue if the input is accepted; otherwise false."
  },
  {
    "title": "inputText(_:client:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1385446-inputtext",
    "html": "Parameters\nstring\n\nThe key down event, which is the text input by the client.\n\nsender\n\nThe client object sending the key down events.\n\nReturn Value\n\ntrue if the input is accepted; otherwise false.\n\nDiscussion\n\nAn input method should implement this method when using key binding (that is, it implements didCommand(by:client:)).\n\nSee Also\nSupporting Key Binding\nfunc didCommand(by: Selector!, client: Any!) -> Bool\nProcesses a command generated by user action such as typing certain keys or pressing the mouse button."
  },
  {
    "title": "imageSubtitle() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503725-imagesubtitle",
    "html": "Return Value\n\nThe display subtitle of the image.\n\nDiscussion\n\nThis method is optional.\n\nSee Also\nProviding Optional Information for an Image\nfunc imageVersion() -> Int\nReturns the version of the item.\nfunc imageTitle() -> String!\nReturns the display title of the image."
  },
  {
    "title": "indicesOfObjects(byEvaluatingObjectSpecifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417806-indicesofobjects",
    "html": "Parameters\nspecifier\n\nAn object specifier for the container objects for which to obtain the indices.\n\nReturn Value\n\nA zero-based array of NSNumber objects that identify the zero-based indices of the container objects that match specifier, or nil if no matching objects were found.\n\nDiscussion\n\nContainers that want to evaluate some specifiers on their own should implement this method. If this method returns nil, the object specifier will go on to do its own evaluation, so you should only return nil if that's the behavior you want, or if an error occurs. If this method returns an array, the object specifier will use the NSNumber objects in it as the indices. So, if you evaluate the specifier and there are no objects that match, you should return an empty array, not nil. If you find only one object, you should still return its index in an array. Returning an array with a single index where the index is –1 is interpreted to mean all the objects.\n\nFor an example implementation, see \"Implementing Object Specifiers\" in Object Specifiers in Cocoa Scripting Guide\n\nSee Also\nWorking with object specifiers\nvar objectSpecifier: NSScriptObjectSpecifier?\nReturns an object specifier for the receiver."
  },
  {
    "title": "imageTitle() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1504080-imagetitle",
    "html": "Return Value\n\nThe display title of the image.\n\nDiscussion\n\nThis method is optional.\n\nSee Also\nProviding Optional Information for an Image\nfunc imageVersion() -> Int\nReturns the version of the item.\nfunc imageSubtitle() -> String!\nReturns the display subtitle of the image."
  },
  {
    "title": "imageUID() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503516-imageuid",
    "html": "Return Value\n\nThe string that identifies the data source item\n\nDiscussion\n\nYour data source must implement this method. The image browser view uses this identifier to associate the data source item and its cache.\n\nSee Also\nProviding Required Information for an Image\nfunc imageRepresentationType() -> String!\nReturns the representation type of the image to display.\nfunc imageRepresentation() -> Any!\nReturns the image to display."
  },
  {
    "title": "class_addProperty(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418946-class_addproperty",
    "html": "Parameters\ncls\n\nThe class to modify.\n\nname\n\nThe name of the property.\n\nattributes\n\nAn array of property attributes.\n\nattributeCount\n\nThe number of attributes in attributes.\n\nReturn Value\n\ntrue if the property was added successfully; otherwise false (for example, this function returns false if the class already has that property).\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_replaceProperty(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418891-class_replaceproperty",
    "html": "Parameters\ncls\n\nThe class to modify.\n\nname\n\nThe name of the property.\n\nattributes\n\nAn array of property attributes.\n\nattributeCount\n\nThe number of attributes in attributes.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_respondsToSelector(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418517-class_respondstoselector",
    "html": "Parameters\ncls\n\nThe class you want to inspect.\n\nsel\n\nA selector.\n\nReturn Value\n\ntrue if instances of the class respond to the selector, otherwise false.\n\nDiscussion\n\nYou should usually use NSObject's responds(to:) or instancesRespond(to:) methods instead of this function.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_copyProtocolList(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418883-class_copyprotocollist",
    "html": "Parameters\ncls\n\nThe class you want to inspect.\n\noutCount\n\nOn return, contains the length of the returned array. If outCount is NULL, the length is not returned.\n\nReturn Value\n\nAn array of pointers of type Protocol* describing the protocols adopted by the class. Any protocols adopted by superclasses or other protocols are not included. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().\n\nIf cls adopts no protocols, or cls is Nil, returns NULL and *outCount is 0.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_conformsToProtocol(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418685-class_conformstoprotocol",
    "html": "Parameters\ncls\n\nThe class you want to inspect.\n\nprotocol\n\nA protocol.\n\nReturn Value\n\ntrue if cls conforms to protocol, otherwise false.\n\nDiscussion\n\nYou should usually use NSObject‘s conforms(to:) method instead of this function.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_addProtocol(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418773-class_addprotocol",
    "html": "Parameters\ncls\n\nThe class to modify.\n\noutCount\n\nThe protocol to add to cls.\n\nReturn Value\n\ntrue if the protocol was added successfully, otherwise false (for example, the class already conforms to that protocol).\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_copyPropertyList(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418553-class_copypropertylist",
    "html": "Parameters\ncls\n\nThe class you want to inspect.\n\noutCount\n\nOn return, contains the length of the returned array. If outCount is NULL, the length is not returned.\n\nReturn Value\n\nAn array of pointers of type objc_property_t describing the properties declared by the class. Any properties declared by superclasses are not included. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().\n\nIf cls declares no properties, or cls is Nil, returns NULL and *outCount is 0.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_setIvarLayout(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418749-class_setivarlayout",
    "html": "Parameters\ncls\n\nThe class to modify.\n\nlayout\n\nThe layout of the Ivars for cls.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_copyIvarList(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418910-class_copyivarlist",
    "html": "Parameters\ncls\n\nThe class to inspect.\n\noutCount\n\nOn return, contains the length of the returned array. If outCount is NULL, the length is not returned.\n\nReturn Value\n\nAn array of pointers of type Ivar describing the instance variables declared by the class. Any instance variables declared by superclasses are not included. The array contains *outCount pointers followed by a NULL terminator. You must free the array with free().\n\nIf the class declares no instance variables, or cls is Nil, NULL is returned and *outCount is 0.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_setWeakIvarLayout(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418852-class_setweakivarlayout",
    "html": "Parameters\ncls\n\nThe class to modify.\n\nlayout\n\nThe layout of the weak Ivars for cls.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_getWeakIvarLayout(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418508-class_getweakivarlayout",
    "html": "Parameters\ncls\n\nThe class to inspect.\n\nReturn Value\n\nA description of the layout of the weak Ivars for cls.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "class_getIvarLayout(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/1418918-class_getivarlayout",
    "html": "Parameters\ncls\n\nThe class to inspect.\n\nReturn Value\n\nA description of the Ivar layout for cls.\n\nSee Also\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition."
  },
  {
    "title": "compositionParameterView(_:shouldDisplayParameterWithKey:attributes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503523-compositionparameterview",
    "html": "Parameters\nparameterView\n\nThe composition parameter view in which the selection changed.\n\nportKey\n\nA key for one of the composition parameters, which is provided to you by the Quartz Composer engine.\n\nportAttributes\n\nA dictionary of the attributes that you want to display in the user interface.\n\nReturn Value\n\nReturntrue if the port attributes should be displayed; false otherwise."
  },
  {
    "title": "composedString(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1385416-composedstring",
    "html": "Parameters\nsender\n\nThe client object requesting the string.\n\nReturn Value\n\nThe current composed string, which can be an NSString or NSAttributedString object. The returned object should be an autoreleased object.\n\nDiscussion\n\nA composed string refers to the buffer that an input method typically maintains to mirror the text contained in the active inline area. It is called the composed string to reflect the fact that the input method composed the string by converting the characters input by the user. In addition, using the term composed string makes it easier to differentiate between an input method buffer and the text in the active inline area that the user sees.\n\nSee Also\nGetting Input Strings and Candidates\nfunc originalString(Any!) -> NSAttributedString!\nReturn the string that consists of the precomposed Unicode characters.\nfunc candidates(Any!) -> [Any]!\nReturns an array of candidates."
  },
  {
    "title": "imageRepresentationType() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503547-imagerepresentationtype",
    "html": "Return Value\n\nA string that specifies the image representation type. The string can be any of the constants defined in Image Representation Types.\n\nDiscussion\n\nYour data source must implement this method.\n\nSee Also\nProviding Required Information for an Image\nfunc imageUID() -> String!\nReturns a unique string that identifies the data source item.\nfunc imageRepresentation() -> Any!\nReturns the image to display."
  },
  {
    "title": "imageRepresentation() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1504801-imagerepresentation",
    "html": "Return Value\n\nThe image to display; can return nil if the item has no image to display.\n\nDiscussion\n\nYour data source must implement this method. This method is called frequently, so the receiver should cache the returned instance.\n\nSee Also\nProviding Required Information for an Image\nfunc imageUID() -> String!\nReturns a unique string that identifies the data source item.\nfunc imageRepresentationType() -> String!\nReturns the representation type of the image to display."
  },
  {
    "title": "imageBrowserSelectionDidChange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503765-imagebrowserselectiondidchange",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nDiscussion\n\nThis method signals that the user changes the selection in the image browser view. You can implement this method if you want to perform custom tasks at that time.\n\nSee Also\nPerforming Custom Tasks in Response to User Events\nfunc imageBrowser(IKImageBrowserView!, backgroundWasRightClickedWith: NSEvent!)\nPerforms custom tasks when the user right-clicks the image browser view background.\nfunc imageBrowser(IKImageBrowserView!, cellWasRightClickedAt: Int, with: NSEvent!)\nPerforms custom tasks when the user right-clicks an item in the image browser view.\nfunc imageBrowser(IKImageBrowserView!, cellWasDoubleClickedAt: Int)\nPerforms custom tasks when the user double-clicks an item in the image browser view."
  },
  {
    "title": "takeValue(_:forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430042-takevalue",
    "html": "Deprecated\n\nUse setValue(_:forKey:) instead.\n\nSee Also\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc finalize()\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc storedValue(forKey: String) -> Any?\nReturns the property identified by a given key.\nDeprecated\nfunc textStorageDidProcessEditing(Notification)\nDeprecated\nfunc textStorageWillProcessEditing(Notification)\nDeprecated\nfunc takeStoredValue(Any?, forKey: String)\nSets the value of the property identified by a given key.\nDeprecated\nfunc takeValue(Any?, forKeyPath: String)\nSets the value for the property identified by keyPath to value.\nDeprecated\nfunc takeValues(from: [AnyHashable : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\nfunc unableToSetNil(forKey: String)\nInvoked if key is represented by a scalar attribute.\nDeprecated\nfunc values(forKeys: [Any]) -> [AnyHashable : Any]\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated"
  },
  {
    "title": "imageBrowser(_:removeItemsAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503834-imagebrowser",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nindexes\n\nThe indexes of the items that should be removed.\n\nDiscussion\n\nThis method is optional. It is invoked by the image browser after Image Kit determines that a remove operation should be applied. In response, the data source should update itself by removing the specified items.\n\nSee Also\nSupporting Item Editing (Optional)\nfunc imageBrowser(IKImageBrowserView!, moveItemsAt: IndexSet!, to: Int) -> Bool\nSignals that the specified items should be moved to the specified destination.\nfunc imageBrowser(IKImageBrowserView!, writeItemsAt: IndexSet!, to: NSPasteboard!) -> Int\nSignals that a drag should begin."
  },
  {
    "title": "imageBrowser(_:moveItemsAt:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503616-imagebrowser",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nindexes\n\nThe indexes of the items that should be reordered.\n\ndestinationIndex\n\nThe starting index of the destination the items should be moved to.\n\nReturn Value\n\ntrue if successful; false otherwise.\n\nDiscussion\n\nThis method is optional. It is invoked by the image browser view after Image Kit determines that a reordering operation should be applied. The data source should update itself by reordering its elements.\n\nSee Also\nSupporting Item Editing (Optional)\nfunc imageBrowser(IKImageBrowserView!, removeItemsAt: IndexSet!)\nSignals that a remove operation should be applied to the specified items.\nfunc imageBrowser(IKImageBrowserView!, writeItemsAt: IndexSet!, to: NSPasteboard!) -> Int\nSignals that a drag should begin.\nRelated Documentation\nfunc setAllowsReordering(Bool)\nControls whether the user can reorder items."
  },
  {
    "title": "imageBrowser(_:backgroundWasRightClickedWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503526-imagebrowser",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nevent\n\nThe event that invoked the method.\n\nDiscussion\n\nThis method signals that the user either right-clicked the background or left-clicked it with the Alt key pressed. You can implement this method if you want to perform custom tasks at that time.\n\nSee Also\nPerforming Custom Tasks in Response to User Events\nfunc imageBrowser(IKImageBrowserView!, cellWasRightClickedAt: Int, with: NSEvent!)\nPerforms custom tasks when the user right-clicks an item in the image browser view.\nfunc imageBrowser(IKImageBrowserView!, cellWasDoubleClickedAt: Int)\nPerforms custom tasks when the user double-clicks an item in the image browser view.\nfunc imageBrowserSelectionDidChange(IKImageBrowserView!)\nPerforms custom tasks when the selection changes."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/3026318-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "handleTakeValue(_:forUnboundKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430061-handletakevalue",
    "html": "Deprecated\n\nUse setValue(_:forUndefinedKey:) instead."
  },
  {
    "title": "handle(_:client:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1385363-handle",
    "html": "Parameters\nevent\n\nThe event to handle.\n\nsender\n\nThe client object sending the event.\n\nReturn Value\n\ntrue if the event is handled; otherwise false."
  },
  {
    "title": "handleQuery(withUnboundKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1430066-handlequery",
    "html": "Deprecated\n\nUse value(forUndefinedKey:) instead."
  },
  {
    "title": "value(forKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1412591-value",
    "html": "Parameters\nkey\n\nThe name of one of the receiver's properties.\n\nReturn Value\n\nThe value for the property identified by key.\n\nDiscussion\n\nThe search pattern that valueForKey: uses to find the correct value to return is described in Accessor Search Patterns in Key-Value Coding Programming Guide.\n\nSee Also\nGetting Values\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path.\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array.\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to a given key.\nfunc mutableArrayValue(forKey: String) -> NSMutableArray\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\nfunc mutableArrayValue(forKeyPath: String) -> NSMutableArray\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\nfunc mutableSetValue(forKey: String) -> NSMutableSet\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\nfunc mutableSetValue(forKeyPath: String) -> NSMutableSet\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\nfunc mutableOrderedSetValue(forKey: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\nfunc mutableOrderedSetValue(forKeyPath: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path.\nRelated Documentation\nKey-Value Coding Programming Guide"
  },
  {
    "title": "shouldEnableAction(for:identifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411300-shouldenableaction",
    "html": "Parameters\nperson\n\nThe person on which the action will be taken.\n\nidentifier\n\nThe unique identifier of the selected value.\n\nReturn Value\n\ntrue if the action is applicable; otherwise, false.\n\nDiscussion\n\nIf the property returned by actionProperty() is a multivalue property, identifier contains the unique identifier of the value selected.\n\nSee Also\nQuerying\nfunc actionProperty() -> String!\nSent to the delegate to request the property the action applies to.\nfunc title(for: ABPerson!, identifier: String!) -> String!\nSent to the delegate to request the title of the menu item for the action."
  },
  {
    "title": "isLike(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393866-islike",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\ntrue if the receiver is considered to be “like” object, otherwise false.\n\nDiscussion\n\nCurrently, isLike(_:) messages are never sent to any object from within Cocoa itself.\n\nThe default implementation for this method provided by NSObject method returns false. NSString also provides an implementation of this method, which returns true if the receiver matches a pattern described by object.\n\nSee Also\nPerforming comparisons\nfunc doesContain(Any) -> Bool\nReturns a Boolean value that indicates whether the receiver contains a given object.\nfunc isCaseInsensitiveLike(String) -> Bool\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\nfunc isEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\nfunc isGreaterThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\nfunc isGreaterThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\nfunc isLessThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than another given object.\nfunc isLessThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\nfunc isNotEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "isLessThan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393841-islessthan",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\ntrue if the receiver is less than object, otherwise false.\n\nDiscussion\n\nDuring the evaluation of an NSWhoseSpecifier object that contains a test whose operator is NSLessThanComparison, an isLessThan(_:) message may be sent to each potentially specified object, if the potentially specified object does not implement a scriptingIsLessThan(_:) method and the object being tested against does not implement a scriptingIsGreaterThanOrEqual(to:) method.\n\nThe default implementation for this method provided by NSObject method returns true if a compare: message sent to the same object would return NSOrderedAscending.\n\nSee Also\nPerforming comparisons\nfunc doesContain(Any) -> Bool\nReturns a Boolean value that indicates whether the receiver contains a given object.\nfunc isCaseInsensitiveLike(String) -> Bool\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\nfunc isEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\nfunc isGreaterThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\nfunc isGreaterThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\nfunc isLessThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\nfunc isLike(String) -> Bool\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\nfunc isNotEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "isGreaterThanOrEqual(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393862-isgreaterthanorequal",
    "html": "Parameters\nobject\n\nThe object with which to compare the receiver.\n\nReturn Value\n\ntrue if the receiver is greater than or equal to object, otherwise false.\n\nDiscussion\n\nDuring the evaluation of an NSWhoseSpecifier object that contains a test whose operator is NSGreaterThanOrEqualToComparison, anisGreaterThanOrEqual(to:) message may be sent to each potentially specified object, if the potentially specified object does not implement a scriptingIsGreaterThanOrEqual(to:) method and the object being tested against does not implement a scriptingIsLessThan(_:) method.\n\nThe default implementation for this method provided by NSObject returns true if a compare: message sent to the same object would return NSOrderedSame or NSOrderedDescending.\n\nSee Also\nPerforming comparisons\nfunc doesContain(Any) -> Bool\nReturns a Boolean value that indicates whether the receiver contains a given object.\nfunc isCaseInsensitiveLike(String) -> Bool\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\nfunc isEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\nfunc isGreaterThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\nfunc isLessThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than another given object.\nfunc isLessThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\nfunc isLike(String) -> Bool\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\nfunc isNotEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "numberOfGroups(inImageBrowser:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503514-numberofgroups",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nReturn Value\n\nThe number of groups.\n\nDiscussion\n\nThis method is optional.\n\nSee Also\nProviding Information About Groups (Optional)\nfunc imageBrowser(IKImageBrowserView!, groupAt: Int) -> [AnyHashable : Any]!\nReturns the group at the specified index."
  },
  {
    "title": "numberOfItems(inImageBrowser:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503497-numberofitems",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nReturn Value\n\nThe number of records managed by the image browser view.\n\nDiscussion\n\nYour data source must implement this method. An IKImageView object uses this method to determine how many cells it should create and display.\n\nSee Also\nProviding Information About Items (Required)\nfunc imageBrowser(IKImageBrowserView!, itemAt: Int) -> Any!\nReturns an object for the item in an image browser view that corresponds to the specified index."
  },
  {
    "title": "NSKeyValueObserving | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nskeyvalueobserving",
    "html": "Overview\n\nYou can observe any object properties including simple attributes, to-one relationships, and to-many relationships. Observers of to-many relationships are informed of the type of change made — as well as which objects are involved in the change.\n\nNSObject provides an implementation of the NSKeyValueObserving protocol that provides an automatic observing capability for all objects. You can further refine notifications by disabling automatic observer notifications and implementing manual notifications using the methods in this protocol.\n\nTopics\nChange Notification\nfunc observeValue(forKeyPath: String?, of: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)\nInforms the observing object when the value at the specified key path relative to the observed object has changed.\nRegistering for Observation\nfunc addObserver(NSObject, forKeyPath: String, options: NSKeyValueObservingOptions, context: UnsafeMutableRawPointer?)\nRegisters the observer object to receive KVO notifications for the key path relative to the object receiving this message.\nfunc removeObserver(NSObject, forKeyPath: String)\nStops the observer object from receiving change notifications for the property specified by the key path relative to the object receiving this message.\nfunc removeObserver(NSObject, forKeyPath: String, context: UnsafeMutableRawPointer?)\nStops the observer object from receiving change notifications for the property specified by the key path relative to the object receiving this message, given the context.\nNotifying Observers of Changes\nfunc willChangeValue(forKey: String)\nInforms the observed object that the value of a given property is about to change.\nfunc didChangeValue(forKey: String)\nInforms the observed object that the value of a given property has changed.\nfunc willChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change is about to be executed at given indexes for a specified ordered to-many relationship.\nfunc didChange(NSKeyValueChange, valuesAt: IndexSet, forKey: String)\nInforms the observed object that the specified change has occurred on the indexes for a specified ordered to-many relationship.\nfunc willChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change is about to be made to a specified unordered to-many relationship.\nfunc didChangeValue(forKey: String, withSetMutation: NSKeyValueSetMutationKind, using: Set<AnyHashable>)\nInforms the observed object that the specified change was made to a specified unordered to-many relationship.\nObserving Customization\nclass func automaticallyNotifiesObservers(forKey: String) -> Bool\nReturns a Boolean value that indicates whether the observed object supports automatic key-value observation for the given key.\nclass func keyPathsForValuesAffectingValue(forKey: String) -> Set<String>\nReturns a set of key paths for properties whose values affect the value of the specified key.\nprotocol NSKeyValueObservingCustomization\nvar observationInfo: UnsafeMutableRawPointer?\nReturns a pointer that identifies information about all of the observers that are registered with the observed object.\nConstants\nclass NSKeyValueObservation\nstruct NSKeyValueObservedChange\nenum NSKeyValueChange\nThe kinds of changes that can be observed.\nstruct NSKeyValueObservingOptions\nThe values that can be returned in a change dictionary.\nstruct NSKeyValueChangeKey\nThe keys that can appear in the change dictionary.\nenum NSKeyValueSetMutationKind\nThe kinds of mutation that you can make to an unordered collection.\nSee Also\nRelated Documentation\nKey-Value Observing Programming Guide"
  },
  {
    "title": "scriptingValue(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1409268-scriptingvalue",
    "html": "Parameters\nobjectSpecifier\n\nAn object specifier to be evaluated.\n\nReturn Value\n\nThe specified object or objects in the receiving container.\n\nThis method might successfully return an object, an array of objects, or nil, depending on the kind of object specifier. Because nil is a valid return value, failure is signaled by invoking the object specifier’s setEvaluationError: method before returning.\n\nDiscussion\n\nYou can override this method to customize the evaluation of object specifiers without requiring that the scripting container make up indexes for contained objects that don't naturally have indexes (as can be the case if you implement indicesOfObjects(byEvaluatingObjectSpecifier:) instead).\n\nYour override of this method doesn't need to also invoke any of the NSScriptCommand error signaling methods, though it can, to record very specific information. The NSUnknownKeySpecifierError and NSInvalidIndexSpecifierError numbers are special, in that Cocoa may continue evaluating an outer specifier if they're encountered, for the convenience of scripters.\n\nSee Also\nScripting\nvar classCode: FourCharCode\nThe receiver's Apple event type code, as stored in the NSScriptClassDescription object for the object’s class.\nvar className: String\nA string containing the name of the class.\nfunc copyScriptingValue(Any, forKey: String, withProperties: [String : Any]) -> Any?\nCreates and returns one or more scripting objects to be inserted into the specified relationship by copying the passed-in value and setting the properties in the copied object or objects.\nfunc newScriptingObject(of: AnyClass, forValueForKey: String, withContentsValue: Any?, properties: [String : Any]) -> Any?\nCreates and returns an instance of a scriptable class, setting its contents and properties, for insertion into the relationship identified by the key.\nvar scriptingProperties: [String : Any]?\nAn NSString-keyed dictionary of the receiver's scriptable properties."
  },
  {
    "title": "UIAccessibilityAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/uiaccessibilityaction",
    "html": "Overview\n\nThe UIAccessibilityAction informal protocol provides a way for accessibility elements to support specific actions, such as selecting values in a range or scrolling through information on the screen. For example, to respond to a scrolling gesture, you implement the accessibilityScroll(_:) method and post pageScrolled with the new page status (such as “Page 3 of 9”). Or, to make an element such as a slider or picker view accessible, you first need to characterize it by including the adjustable trait. Then, you must implement the accessibilityIncrement() and accessibilityDecrement() methods. When you do this, assistive technology users can adjust the element using gestures specific to the assistive technology.\n\nTopics\nPerforming an action\nfunc accessibilityActivate() -> Bool\nTells the element to activate itself and report the success or failure of the operation.\nfunc accessibilityIncrement()\nTells the accessibility element to increment the value of its content.\nfunc accessibilityDecrement()\nTells the accessibility element to decrement the value of its content.\nfunc accessibilityScroll(UIAccessibilityScrollDirection) -> Bool\nScrolls screen content in an application-specific way and returns the success or failure of the action.\nfunc accessibilityPerformEscape() -> Bool\nDismisses a modal view and returns the success or failure of the action.\nfunc accessibilityPerformMagicTap() -> Bool\nPerforms a salient action.\nAccessing custom actions\nvar accessibilityCustomActions: [UIAccessibilityCustomAction]?\nAn array of custom actions to display along with the built-in actions.\nConstants\nenum UIAccessibilityScrollDirection\nThe direction of a scrolling action.\nSee Also\nActions\nclass UIAccessibilityCustomAction\nA custom action to perform on an accessible object.\ntypealias UIAccessibilityCustomAction.Handler\nA closure type that defines a handler to perform for an action.\nDelivering an Exceptional Accessibility Experience\nMake improvements to your app’s interaction model to support assistive technologies such as VoiceOver.\nRelated Documentation\nAccessibility Programming Guide for iOS"
  },
  {
    "title": "classForKeyedUnarchiver() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1410547-classforkeyedunarchiver",
    "html": "Return Value\n\nThe class to substitute for the receiver during keyed unarchiving.\n\nDiscussion\n\nDuring keyed unarchiving, instances of the receiver will be decoded as members of the returned class. This method overrides the results of the decoder’s class and instance name to class encoding tables.\n\nSee Also\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func setVersion(Int)\nSets the receiver's version number.\nclass func version() -> Int\nReturns the version number assigned to the class."
  },
  {
    "title": "replacementObject(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1409971-replacementobject",
    "html": "Parameters\nanArchiver\n\nThe archiver creating an archive.\n\nReturn Value\n\nThe object to substitute for the receiver during archiving.\n\nDiscussion\n\nThis method is invoked by NSArchiver. NSObject’s implementation returns the object returned by replacementObject(for:).\n\nSee Also\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func setVersion(Int)\nSets the receiver's version number.\nclass func version() -> Int\nReturns the version number assigned to the class."
  },
  {
    "title": "resolveInstanceMethod(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418500-resolveinstancemethod",
    "html": "Parameters\nname\n\nThe name of a selector to resolve.\n\nReturn Value\n\ntrue if the method was found and added to the receiver, otherwise false.\n\nDiscussion\n\nThis method and resolveClassMethod(_:) allow you to dynamically provide an implementation for a given selector.\n\nAn Objective-C method is simply a C function that take at least two arguments—self and _cmd. Using the class_addMethod(_:_:_:_:) function, you can add a function to a class as a method. Given the following function:\n\nvoid dynamicMethodIMP(id self, SEL _cmd)\n{\n    // implementation ....\n}\n\n\nyou can use resolveInstanceMethod: to dynamically add it to a class as a method (called resolveThisMethodDynamically) like this:\n\n+ (BOOL) resolveInstanceMethod:(SEL)aSEL\n{\n    if (aSEL == @selector(resolveThisMethodDynamically))\n    {\n          class_addMethod([self class], aSEL, (IMP) dynamicMethodIMP, \"v@:\");\n          return YES;\n    }\n    return [super resolveInstanceMethod:aSel];\n}\n\nSpecial Considerations\n\nThis method is called before the Objective-C forwarding mechanism is invoked. If responds(to:) or instancesRespond(to:) is invoked, the dynamic method resolver is given the opportunity to provide an IMP for the given selector first.\n\nSee Also\nDynamically Resolving Methods\nclass func resolveClassMethod(Selector!) -> Bool\nDynamically provides an implementation for a given selector for a class method."
  },
  {
    "title": "awakeAfter(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417074-awakeafter",
    "html": "Parameters\naDecoder\n\nThe decoder used to decode the receiver.\n\nReturn Value\n\nThe receiver, or another object to take the place of the object that was decoded and subsequently received this message.\n\nDiscussion\n\nYou can use this method to eliminate redundant objects created by the coder. For example, if after decoding an object you discover that an equivalent object already exists, you can return the existing object. If a replacement is returned, your overriding method is responsible for releasing the receiver.\n\nThis method is invoked by NSCoder. NSObject’s implementation simply returns self.\n\nSee Also\nArchiving\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func setVersion(Int)\nSets the receiver's version number.\nclass func version() -> Int\nReturns the version number assigned to the class.\nRelated Documentation\ninit?(coder: NSCoder)\nReturns an object initialized from data in a given unarchiver."
  },
  {
    "title": "performSelector(onMainThread:with:waitUntilDone:modes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411637-performselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\narg\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\nwait\n\nA Boolean that specifies whether the current thread blocks until after the specified selector is performed on the receiver on the main thread. Specify true to block this thread; otherwise, specify false to have this method return immediately.\n\nIf the current thread is also the main thread, and you pass true, the message is performed immediately, otherwise the perform is queued to run the next time through the run loop.\n\narray\n\nAn array of strings that identifies the modes in which it is permissible to perform the specified selector. This array must contain at least one string. If you specify nil or an empty array for this parameter, this method returns without performing the specified selector. For information about run loop modes, see Run Loops in Threading Programming Guide.\n\nDiscussion\n\nYou can use this method to deliver messages to the main thread of your application. The main thread encompasses the application’s main run loop, and is where the NSApplication object receives events. The message in this case is a method of the current object that you want to execute on the thread.\n\nThis method queues the message on the run loop of the main thread using the run loop modes specified in the array parameter. As part of its normal run loop processing, the main thread dequeues the message (assuming it is running in one of the specified modes) and invokes the desired method. Multiple calls to this method from the same thread cause the corresponding selectors to be queued and performed in the same same order in which the calls were made, assuming the associated run loop modes for each selector are the same. If you specify different modes for each selector, any selectors whose associated mode does not match the current run loop mode are skipped until the run loop subsequently executes in that mode.\n\nYou cannot cancel messages queued using this method. If you want the option of canceling a message on the current thread, you must use either the perform(_:with:afterDelay:) or perform(_:with:afterDelay:inModes:) method.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after(_:_:_:) and related methods to get the behavior you want.\n\nSee Also\nSending Messages\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval)\nInvokes a method of the receiver on the current thread using the default mode after a delay.\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval, inModes: [RunLoop.Mode])\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the main thread using the default mode.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the specified thread using the default mode.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the specified thread using the specified modes.\nfunc performSelector(inBackground: Selector, with: Any?)\nInvokes a method of the receiver on a new background thread.\nclass func cancelPreviousPerformRequests(withTarget: Any)\nCancels perform requests previously registered with the perform(_:with:afterDelay:) instance method.\nclass func cancelPreviousPerformRequests(withTarget: Any, selector: Selector, object: Any?)\nCancels perform requests previously registered with perform(_:with:afterDelay:)."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418641-init",
    "html": "Return Value\n\nAn initialized object, or nil if an object could not be created for some reason that would not result in an exception.\n\nDiscussion\n\nAn init() message is coupled with an alloc (or allocWithZone:) message in the same line of code:\n\nSomeClass *object = [[SomeClass alloc] init];\n\n\nAn object isn’t ready to be used until it has been initialized.\n\nIn a custom implementation of this method, you must invoke super’s Initialization then initialize and return the new object. If the new object can’t be initialized, the method should return nil. For example, a hypothetical BuiltInCamera class might return nil from its init method if run on a device that has no camera.\n\n- (instancetype)init {\n    if (self = [super init]) {\n        // Initialize self\n    }\n    return self;\n}\n\n\nIn some cases, a custom implementation of the init() method might return a substitute object. You must therefore always use the object returned by init(), and not the one returned by alloc or allocWithZone:, in subsequent code.\n\nThe init() method defined in the NSObject class does no initialization; it simply returns self. In terms of nullability, callers can assume that the NSObject implementation of init() does not return nil.\n\nSee Also\nCreating, Copying, and Deallocating Objects\nfunc copy() -> Any\nReturns the object returned by copy(with:).\nfunc mutableCopy() -> Any\nReturns the object returned by mutableCopy(with:) where the zone is nil."
  },
  {
    "title": "exceptionHandler(_:shouldHandle:mask:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1489854-exceptionhandler",
    "html": "Parameters\nsender\n\nThe NSExceptionHandler object sending the message.\n\nexception\n\nAn NSException object describing the exception to be evaluated.\n\naMask\n\nThe bit mask indicating the types of exceptions handled by the NSExceptionHandler object. See Logging and Handling Constants and System Hang Constants for descriptions of the possible enum constants.\n\nReturn Value\n\ntrue to have the NSExceptionHandler object handle the exception, false otherwise.\n\nSee Also\nLogging and handling exceptions\nfunc exceptionHandler(NSExceptionHandler!, shouldLogException: NSException!, mask: Int) -> Bool\nImplemented by the delegate to evaluate whether the delegating NSExceptionHandler instance should log a given exception."
  },
  {
    "title": "exceptionHandler(_:shouldLogException:mask:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1489856-exceptionhandler",
    "html": "Parameters\nsender\n\nThe NSExceptionHandler object sending the message.\n\nexception\n\nAn NSException object describing the exception to be evaluated.\n\naMask\n\nThe bit mask indicating the types of exceptions logged by the NSExceptionHandler object. See Logging and Handling Constants and System Hang Constants for descriptions of the possible enum constants.\n\nReturn Value\n\ntrue to have the NSExceptionHandler object log the exception, false otherwise.\n\nSee Also\nLogging and handling exceptions\nfunc exceptionHandler(NSExceptionHandler!, shouldHandle: NSException!, mask: Int) -> Bool\nImplemented by the delegate to evaluate whether the delegating NSExceptionHandler instance should handle a given exception."
  },
  {
    "title": "doesContain(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1393848-doescontain",
    "html": "Parameters\nobject\n\nThe object to search for in the receiver.\n\nReturn Value\n\ntrue if the receiver contains object, otherwise false.\n\nDiscussion\n\nCurrently, doesContain(_:) messages are never sent to any object from within Cocoa itself.\n\nThe default implementation for this method provided by NSObject returns true if the receiver is actually an NSArray object and an indexOfObjectIdentical(to:) message sent to the same object would return something other than NSNotFound.\n\nSee Also\nPerforming comparisons\nfunc isCaseInsensitiveLike(String) -> Bool\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\nfunc isEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\nfunc isGreaterThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\nfunc isGreaterThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\nfunc isLessThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than another given object.\nfunc isLessThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\nfunc isLike(String) -> Bool\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\nfunc isNotEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is not equal to another given object."
  },
  {
    "title": "didCommand(by:client:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1385394-didcommand",
    "html": "Parameters\naSelector\n\nThe action associated with the key down event. The selector can be an action specified in the input method dictionary of keys and actions (that is, an action specific to the input method) or one of the NSResponder action methods such as insertNewline: or deleteBackward:. By definition such action methods do not return a value.\n\nsender\n\nThe client object sending the key down event.\n\nReturn Value\n\ntrue if the command is handled; false if the command is not handled. If not handled, the event passes to the client.\n\nDiscussion\n\nThis method is called when the system binds a key down event to an action method. If you implement this method you should test if it is appropriate to call the action method before actually calling it, because calling the action method implies that you agree to handle the command. Suppose you have implemented a version of insertNewline: that terminates the conversion session and sends the fully converted text to the client. However, if you conversion buffer is empty, you want the application to receive the return key that triggered the call to insertNewline:. In that case, when didCommandBySelector:client: is called you should test your buffer before calling your implementation of insertNewline:. If the buffer is empty, return false to indicate that the return key should be passed on to the application. If the buffer is not empty, call insertNewline: and then return true as the result of didCommandBySelector:client:.\n\nSee Also\nSupporting Key Binding\nfunc inputText(String!, client: Any!) -> Bool\nHandles key down events that do not map to an action method."
  },
  {
    "title": "compositionPickerViewWillStopAnimating(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1447348-compositionpickerviewwillstopani",
    "html": "Parameters\npickerView\n\nThe composition picker view in which the composition stopped animating.\n\nDiscussion\n\nQuartz Composer invokes this method whenever the composition picker view stops animating a composition. Implement this method if you want to perform custom tasks at that time.\n\nSee Also\nResponding to Animation State Changes\nfunc compositionPickerViewDidStartAnimating(QCCompositionPickerView!)\nPerforms custom tasks when the composition picker view starts animating a composition.\nDeprecated"
  },
  {
    "title": "compositionPickerViewDidStartAnimating(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1447342-compositionpickerviewdidstartani",
    "html": "Parameters\npickerView\n\nThe composition picker view in which the composition started animating.\n\nDiscussion\n\nQuartz Composer invokes this method when the composition picker view starts animating a composition. Implement this method if you want to perform custom tasks at that time.\n\nSee Also\nResponding to Animation State Changes\nfunc compositionPickerViewWillStopAnimating(QCCompositionPickerView!)\nPerforms custom tasks when the composition picker view stops animating a composition.\nDeprecated"
  },
  {
    "title": "compositionPickerView(_:didSelect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1447352-compositionpickerview",
    "html": "Parameters\npickerView\n\nThe composition picker view in which the selection changed.\n\ncomposition\n\nThe selected composition or nil if the previously selected composition is no longer selected.\n\nDiscussion\n\nQuartz Composer invokes this method when the selected composition in the composition picker view changes. Implement this method if you want to perform custom tasks at that time."
  },
  {
    "title": "compositionParameterView(_:didChangeParameterWithKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1505265-compositionparameterview",
    "html": "Parameters\nparameterView\n\nThe composition parameter view in which the parameter changed.\n\nportKey\n\nA key for one of the composition parameters, which is provided to you by the Quartz Composer engine."
  },
  {
    "title": "chooseIdentityPanelShowHelp(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1514140-chooseidentitypanelshowhelp",
    "html": "Parameters\nsender\n\nThe choose identity panel for which to implement custom help.\n\nDiscussion\n\nYou can use this delegate method to implement custom help if you call the setShowsHelp(_:) method to display a help button in the sheet or panel. If you are not implementing custom help, do not implement this method.\n\nSee Also\nRelated Documentation\nfunc setShowsHelp(Bool)\nDisplays a Help button in the sheet or panel.\nvar delegate: NSWindowDelegate?\nThe window’s delegate."
  },
  {
    "title": "candidates(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1385360-candidates",
    "html": "Parameters\nsender\n\nThe client object requesting the candidates.\n\nReturn Value\n\nAn array of candidates. The returned array should be an autoreleased object.\n\nDiscussion\n\nAn input method should look up its currently composed string and return a list of candidate strings that the composed string might map to.\n\nSee Also\nGetting Input Strings and Candidates\nfunc composedString(Any!) -> Any!\nReturn the current composed string.\nfunc originalString(Any!) -> NSAttributedString!\nReturn the string that consists of the precomposed Unicode characters."
  },
  {
    "title": "certificatePanelShowHelp(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1514145-certificatepanelshowhelp",
    "html": "Parameters\nsender\n\nThe certificate panel for which to implement custom help.\n\nDiscussion\n\nYou can use this delegate method to implement custom help if you call the setShowsHelp(_:) method to display a help button in the sheet or panel. If you are not implementing custom help, do not implement this method.\n\nSee Also\nRelated Documentation\nvar delegate: NSWindowDelegate?\nThe window’s delegate.\nfunc setShowsHelp(Bool)\nDisplays a Help button in the sheet or panel."
  },
  {
    "title": "authorizationViewDidDeauthorize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411017-authorizationviewdiddeauthorize",
    "html": "See Also\nDelegate methods\nfunc authorizationViewShouldDeauthorize(SFAuthorizationView!) -> Bool\nSent to the delegate when a user clicks the open lock icon.\nfunc authorizationViewCreatedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate the authorization object has been created or changed. If you have saved a copy of the authorization object for your own purposes, you should discard it and call authorization() for a new authorization object.\nfunc authorizationViewDidAuthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was authorized and the authorization view was changed to unlocked.\nfunc authorizationViewDidHide(SFAuthorizationView!)\nSent to the delegate to indicate that the view’s visibility has changed.\nfunc authorizationViewReleasedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate that deauthorization is about to occur."
  },
  {
    "title": "authorizationViewShouldDeauthorize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411006-authorizationviewshoulddeauthori",
    "html": "Discussion\n\nThe delegate can react to this before deauthorization happens and avoid it by returning false. This delegate method is not called when you call the deauthorize(_:) method.\n\nSee Also\nDelegate methods\nfunc authorizationViewCreatedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate the authorization object has been created or changed. If you have saved a copy of the authorization object for your own purposes, you should discard it and call authorization() for a new authorization object.\nfunc authorizationViewDidAuthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was authorized and the authorization view was changed to unlocked.\nfunc authorizationViewDidDeauthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was deauthorized and the authorization view was changed to locked.\nfunc authorizationViewDidHide(SFAuthorizationView!)\nSent to the delegate to indicate that the view’s visibility has changed.\nfunc authorizationViewReleasedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate that deauthorization is about to occur.\nRelated Documentation\nfunc deauthorize(Any!) -> Bool\nSets the authorization state to unauthorized and locks the lock icon in the view."
  },
  {
    "title": "authorizationViewReleasedAuthorization(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1410992-authorizationviewreleasedauthori",
    "html": "Discussion\n\nThis method is called after deauthorization has been approved (either you called the deauthorize(_:) method, or the user clicked an open lock icon and the authorizationViewShouldDeauthorize(_:) delegate method did not cancel the operation), and before the user is deauthorized (that is, before the authorizationViewDidDeauthorize(_:) delegate method is called).\n\nSee Also\nDelegate methods\nfunc authorizationViewShouldDeauthorize(SFAuthorizationView!) -> Bool\nSent to the delegate when a user clicks the open lock icon.\nfunc authorizationViewCreatedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate the authorization object has been created or changed. If you have saved a copy of the authorization object for your own purposes, you should discard it and call authorization() for a new authorization object.\nfunc authorizationViewDidAuthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was authorized and the authorization view was changed to unlocked.\nfunc authorizationViewDidDeauthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was deauthorized and the authorization view was changed to locked.\nfunc authorizationViewDidHide(SFAuthorizationView!)\nSent to the delegate to indicate that the view’s visibility has changed.\nRelated Documentation\nfunc deauthorize(Any!) -> Bool\nSets the authorization state to unauthorized and locks the lock icon in the view."
  },
  {
    "title": "authorizationViewDidHide(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411034-authorizationviewdidhide",
    "html": "Discussion\n\nThis delegate method, if present, is called whenever the isHidden method is called to show or hide the view.\n\nSee Also\nDelegate methods\nfunc authorizationViewShouldDeauthorize(SFAuthorizationView!) -> Bool\nSent to the delegate when a user clicks the open lock icon.\nfunc authorizationViewCreatedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate the authorization object has been created or changed. If you have saved a copy of the authorization object for your own purposes, you should discard it and call authorization() for a new authorization object.\nfunc authorizationViewDidAuthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was authorized and the authorization view was changed to unlocked.\nfunc authorizationViewDidDeauthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was deauthorized and the authorization view was changed to locked.\nfunc authorizationViewReleasedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate that deauthorization is about to occur."
  },
  {
    "title": "authorizationViewDidAuthorize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411002-authorizationviewdidauthorize",
    "html": "See Also\nDelegate methods\nfunc authorizationViewShouldDeauthorize(SFAuthorizationView!) -> Bool\nSent to the delegate when a user clicks the open lock icon.\nfunc authorizationViewCreatedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate the authorization object has been created or changed. If you have saved a copy of the authorization object for your own purposes, you should discard it and call authorization() for a new authorization object.\nfunc authorizationViewDidDeauthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was deauthorized and the authorization view was changed to locked.\nfunc authorizationViewDidHide(SFAuthorizationView!)\nSent to the delegate to indicate that the view’s visibility has changed.\nfunc authorizationViewReleasedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate that deauthorization is about to occur."
  },
  {
    "title": "authorizationViewCreatedAuthorization(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411010-authorizationviewcreatedauthoriz",
    "html": "See Also\nDelegate methods\nfunc authorizationViewShouldDeauthorize(SFAuthorizationView!) -> Bool\nSent to the delegate when a user clicks the open lock icon.\nfunc authorizationViewDidAuthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was authorized and the authorization view was changed to unlocked.\nfunc authorizationViewDidDeauthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was deauthorized and the authorization view was changed to locked.\nfunc authorizationViewDidHide(SFAuthorizationView!)\nSent to the delegate to indicate that the view’s visibility has changed.\nfunc authorizationViewReleasedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate that deauthorization is about to occur."
  },
  {
    "title": "attemptRecovery(fromError:optionIndex:delegate:didRecoverSelector:contextInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411071-attemptrecovery",
    "html": "Parameters\nerror\n\nAn NSError object that describes the error, including error recovery options.\n\nrecoveryOptionIndex\n\nThe index of the user selected recovery option in error’s localized recovery array.\n\ndelegate\n\nAn object that is the modal delegate.\n\ndidRecoverSelector\n\nA selector identifying the method implemented by the modal delegate.\n\ncontextInfo\n\nArbitrary data associated with the attempt at error recovery, to be passed to delegate in didRecoverSelector.\n\nDiscussion\n\nInvoked when an error alert is presented to the user in a document-modal sheet, and the user has selected an error recovery option specified by error. After recovery is attempted, your implementation should send delegate the message specified in didRecoverSelector, passing the provided contextInfo.\n\nThe didRecoverSelector should have the following signature:\n\n- (void)didPresentErrorWithRecovery:(BOOL)didRecover contextInfo:(void *)contextInfo;\n\n\nwhere didRecover is true if the error recovery attempt was successful; otherwise it is false.\n\nSee Also\nAttempting Recovery From Errors\nfunc attemptRecovery(fromError: Error, optionIndex: Int) -> Bool\nImplemented to attempt a recovery from an error noted in an application-modal dialog."
  },
  {
    "title": "attemptRecovery(fromError:optionIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416402-attemptrecovery",
    "html": "Parameters\nerror\n\nAn NSError object that describes the error, including error recovery options.\n\nrecoveryOptionIndex\n\nThe index of the user selected recovery option in error's localized recovery array.\n\nReturn Value\n\ntrue if the error recovery was completed successfully, false otherwise.\n\nDiscussion\n\nInvoked when an error alert is been presented to the user in an application-modal dialog, and the user has selected an error recovery option specified by error.\n\nSee Also\nAttempting Recovery From Errors\nfunc attemptRecovery(fromError: Error, optionIndex: Int, delegate: Any?, didRecoverSelector: Selector?, contextInfo: UnsafeMutableRawPointer?)\nImplemented to attempt a recovery from an error noted in a document-modal sheet."
  },
  {
    "title": "accessibilityZoomOut(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/4161995-accessibilityzoomout",
    "html": "Parameters\npoint\n\nThe point where a person performs the zoom out action.\n\nReturn Value\n\ntrue if this method successfully handles zooming; otherwise, false. By default, this method returns false.\n\nDiscussion\n\nIf your element has the supportsZoom trait, you need to implement this method and accessibilityZoomIn(at:). Use this method to zoom out from the specified point. For example, if the element allows a pinch gesture to zoom out from the view’s content, implement this method so that the VoiceOver zoom action receives the same behavior."
  },
  {
    "title": "actionProperty() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411302-actionproperty",
    "html": "Return Value\n\nThe property that the action applies to.\n\nDiscussion\n\nSee Table 1The documentation for property-list constants for the properties for person and group records.\n\nSee Also\nQuerying\nfunc shouldEnableAction(for: ABPerson!, identifier: String!) -> Bool\nSent to the delegate to determine whether the action should be enabled.\nfunc title(for: ABPerson!, identifier: String!) -> String!\nSent to the delegate to request the title of the menu item for the action."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/deprecated_symbols",
    "html": "Topics\nDeprecated Class Methods\nclass func defaultPlaceholder(for: Any?, with: NSBindingName) -> Any?\nReturns an object that will be used as the placeholder for the binding, when a key value coding compliant property of an instance of the receiving class returns the value specified by marker, and no other placeholder has been specified.\nDeprecated\nclass func setDefaultPlaceholder(Any?, for: Any?, with: NSBindingName)\nSets placeholder as the default placeholder for the binding, when a key value coding compliant property of an instance of the receiving class returns the value specified by marker, and no other placeholder has been specified.\nDeprecated\nclass func useStoredAccessor() -> Bool\nReturns true if the stored value methods storedValue(forKey:) and takeStoredValue(_:forKey:) should use private accessor methods in preference to public accessors.\nDeprecated\nDeprecated Methods\nfunc accessibilityAttributeNames() -> [NSAccessibility.Attribute]\nReturns an array of attribute names supported by the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.Attribute) -> Any?\nReturns the value of the specified attribute in the receiver.\nDeprecated\nfunc accessibilityAttributeValue(NSAccessibility.ParameterizedAttribute, forParameter: Any?) -> Any?\nReturns the value of the receiver's parameterized attribute corresponding to the specified attribute name and parameter.\nDeprecated\nfunc accessibilityActionDescription(NSAccessibility.Action) -> String?\nReturns a localized description of the specified action.\nDeprecated\nfunc accessibilityActionNames() -> [NSAccessibility.Action]\nReturns an array of action names supported by the accessibility element.\nDeprecated\nfunc accessibilityArrayAttributeCount(NSAccessibility.Attribute) -> Int\nReturns the count of the specified accessibility array attribute.\nfunc accessibilityArrayAttributeValues(NSAccessibility.Attribute, index: Int, maxCount: Int) -> [Any]\nReturns a subarray of values of an accessibility array attribute.\nfunc accessibilityIndex(ofChild: Any) -> Int\nReturns the index of the specified accessibility child in the parent.\nfunc accessibilityIsAttributeSettable(NSAccessibility.Attribute) -> Bool\nReturns a Boolean value that indicates whether the value for the specified attribute in the receiver can be set.\nDeprecated\nfunc accessibilityIsIgnored() -> Bool\nReturns a Boolean value indicating whether the receiver should be ignored in the parent-child accessibility hierarchy.\nDeprecated\nfunc accessibilityParameterizedAttributeNames() -> [NSAccessibility.ParameterizedAttribute]\nReturns a list of parameterized attribute names supported by the receiver.\nDeprecated\nfunc accessibilityPerformAction(NSAccessibility.Action)\nPerforms the action associated with the specified action.\nDeprecated\nfunc accessibilitySetOverrideValue(Any?, forAttribute: NSAccessibility.Attribute) -> Bool\nOverrides the specified attribute in the receiver or adds it if it does not exist, and sets its value to the specified value.\nDeprecated\nfunc accessibilitySetValue(Any?, forAttribute: NSAccessibility.Attribute)\nSets the value of the specified attribute in the receiver to the specified value.\nDeprecated\nfunc fileManager(FileManager, shouldProceedAfterError: [AnyHashable : Any]) -> Bool\nAn NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories.\nDeprecated\nfunc fileManager(FileManager, willProcessPath: String)\nAn NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.\nDeprecated\nfunc finalize()\nThe garbage collector invokes this method on the receiver before disposing of the memory it uses.\nDeprecated\nfunc fontManager(Any, willIncludeFont: String) -> Bool\nRequests permission from the Font panel delegate to display the given font name in the Font panel.\nDeprecated\nfunc namesOfPromisedFilesDropped(atDestination: URL) -> [String]?\nReturns the names of the files that the receiver promises to create at a specified location.\nDeprecated\nfunc storedValue(forKey: String) -> Any?\nReturns the property identified by a given key.\nDeprecated\nfunc textStorageDidProcessEditing(Notification)\nDeprecated\nfunc textStorageWillProcessEditing(Notification)\nDeprecated\nfunc takeStoredValue(Any?, forKey: String)\nSets the value of the property identified by a given key.\nDeprecated\nfunc takeValue(Any?, forKey: String)\nSets the value for the property identified by key to value.\nDeprecated\nfunc takeValue(Any?, forKeyPath: String)\nSets the value for the property identified by keyPath to value.\nDeprecated\nfunc takeValues(from: [AnyHashable : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties\nDeprecated\nfunc unableToSetNil(forKey: String)\nInvoked if key is represented by a scalar attribute.\nDeprecated\nfunc values(forKeys: [Any]) -> [AnyHashable : Any]\nReturns a dictionary containing as keys the property names in keys, with corresponding values being the corresponding property values.\nDeprecated\nfunc workflowController(AMWorkflowController, didError: Error)\nInvoked when the receiver's workflow encounters an error.\nDeprecated\nfunc workflowController(AMWorkflowController, didRun: AMAction)\nInvoked when an action in the receiver's workflow is finished running.\nDeprecated\nfunc workflowController(AMWorkflowController, willRun: AMAction)\nInvoked when an action in the receiver's workflow is about to run.\nDeprecated\nfunc workflowControllerDidRun(AMWorkflowController)\nTells the delegate that the workflow controller object finished running.\nDeprecated\nfunc workflowControllerDidStop(AMWorkflowController)\nTells the delegate that the workflow controller object has stopped.\nDeprecated\nfunc workflowControllerWillRun(AMWorkflowController)\nTells the delegate that the workflow controller object is about to run.\nDeprecated\nfunc workflowControllerWillStop(AMWorkflowController)\nTells the delegate that the workflow controller object is about to stop.\nDeprecated"
  },
  {
    "title": "accessibilityZoomIn(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/4161994-accessibilityzoomin",
    "html": "Parameters\npoint\n\nThe point where a person performs the zoom in action.\n\nReturn Value\n\ntrue if this method successfully handles zooming; otherwise, false. By default, this method returns false.\n\nDiscussion\n\nIf your element has the supportsZoom trait, you need to implement this method and accessibilityZoomOut(at:). Use this method to zoom in at the specified point. For example, if the element allows an expand gesture to zoom in to the view’s content, implement this method so that the VoiceOver zoom action receives the same behavior."
  },
  {
    "title": "imageBrowser(_:groupAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503488-imagebrowser",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nindex\n\nThe index of the group you want to retrieve.\n\nReturn Value\n\nA dictionary that defines the group. The keys in this dictionary can be any of the following constants: IKImageBrowserGroupStyleKey, IKImageBrowserGroupBackgroundColorKey, IKImageBrowserGroupTitleKey, and IKImageBrowserGroupRangeKey. For more information on these constants, see IKImageBrowserView.\n\nDiscussion\n\nThis method is optional.\n\nSee Also\nProviding Information About Groups (Optional)\nfunc numberOfGroups(inImageBrowser: IKImageBrowserView!) -> Int\nReturns the number of groups in an image browser view."
  },
  {
    "title": "imageBrowser(_:cellWasRightClickedAt:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1503802-imagebrowser",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nindex\n\nThe index of the cell.\n\nevent\n\nThe event that invoked the method.\n\nDiscussion\n\nThis method signals that the user either right-clicked an item in the browser or left-clicked the item with the Alt key pressed. You can implement this method if you want to perform custom tasks at that time.\n\nSee Also\nPerforming Custom Tasks in Response to User Events\nfunc imageBrowser(IKImageBrowserView!, backgroundWasRightClickedWith: NSEvent!)\nPerforms custom tasks when the user right-clicks the image browser view background.\nfunc imageBrowser(IKImageBrowserView!, cellWasDoubleClickedAt: Int)\nPerforms custom tasks when the user double-clicks an item in the image browser view.\nfunc imageBrowserSelectionDidChange(IKImageBrowserView!)\nPerforms custom tasks when the selection changes."
  },
  {
    "title": "imageBrowser(_:cellWasDoubleClickedAt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1504701-imagebrowser",
    "html": "Parameters\naBrowser\n\nAn image browser view.\n\nindex\n\nThe index of the cell.\n\nDiscussion\n\nThis method signals that the user double-clicked an item in the image browser view. You can implement this method if you want to perform custom tasks at that time.\n\nSee Also\nPerforming Custom Tasks in Response to User Events\nfunc imageBrowser(IKImageBrowserView!, backgroundWasRightClickedWith: NSEvent!)\nPerforms custom tasks when the user right-clicks the image browser view background.\nfunc imageBrowser(IKImageBrowserView!, cellWasRightClickedAt: Int, with: NSEvent!)\nPerforms custom tasks when the user right-clicks an item in the image browser view.\nfunc imageBrowserSelectionDidChange(IKImageBrowserView!)\nPerforms custom tasks when the selection changes."
  },
  {
    "title": "WebPlugIn | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/webplugin",
    "html": "Topics\nAccessing the Scripting Environment\nvar objectForWebScript: Any!\nReturns an object that exposes the plug-in’s scripting interface.\nUsing Plug-in State Information\nfunc webPlugInSetIsSelected(Bool)\nControls plug-in behavior based on its selection.\nControlling the Plug-in\nfunc webPlugInDestroy()\nPrepares the plug-in for deallocation.\nfunc webPlugInInitialize()\nInitializes the plug-in.\nfunc webPlugInStart()\nTells the plug-in to start normal operation.\nfunc webPlugInStop()\nTells the plug-in to stop normal operation.\nMain resource messages\nfunc webPlugInMainResourceDidFailWithError(Error!)\nInvoked when an error occurs loading the main resource.\nfunc webPlugInMainResourceDidFinishLoading()\nInvoked when the connection successfully finishes loading data.\nfunc webPlugInMainResourceDidReceive(Data!)\nInvoked when the connection loads data incrementally.\nfunc webPlugInMainResourceDidReceive(URLResponse!)\nInvoked when the connection receives sufficient data to construct the URL response for its request.\nSee Also\nImplementing Plugins (Legacy)\nWebPlugInContainer\nWebPlugInContainer is an informal protocol that enables a plug-in to send messages to the application.\nprotocol WebPlugInViewFactory\nDeprecated"
  },
  {
    "title": "NSObject.KeyValueObservingPublisher | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/keyvalueobservingpublisher",
    "html": "Overview\n\nUse this publisher to integrate a property that’s compliant with key-value observing into a Combine publishing chain. You can create a publisher of this type with the NSObject instance method publisher(for:options:), passing in the key path and a set of NSKeyValueObservingOptions.\n\nTopics\nCreating a KVO Publisher\ninit(object: Subject, keyPath: KeyPath<Subject, Value>, options: NSKeyValueObservingOptions)\nCreates a key-value observing publisher for the given combination of object and key path, using publishing behavior options you provide.\nInspecting KVO Publisher Properties\nlet object: Subject\nThe object that contains the property to publish.\nlet keyPath: KeyPath<Subject, Value>\nThe key path, relative to the object receiving this message, of the property to publish.\nlet options: NSKeyValueObservingOptions\nOptions that determine which elements the publisher produces.\nOperator Functions\nstatic func == (NSObject.KeyValueObservingPublisher<Subject, Value>, NSObject.KeyValueObservingPublisher<Subject, Value>) -> Bool\nSee Also\nRelated Documentation"
  },
  {
    "title": "UIAccessibilityContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/uiaccessibilitycontainer",
    "html": "Topics\nProviding information about accessibility elements\nfunc accessibilityElementCount() -> Int\nReturns the number of accessibility elements in the container.\nfunc accessibilityElement(at: Int) -> Any?\nReturns the accessibility element at the specified index.\nfunc index(ofAccessibilityElement: Any) -> Int\nReturns the index of the specified accessibility element.\nvar accessibilityElements: [Any]?\nAn array of the accessibility elements in the container.\nvar automationElements: [Any]?\nAn array of the automation elements in the container.\nvar accessibilityContainerType: UIAccessibilityContainerType\nThe type of container used for accessibility elements, such as tables or lists.\nenum UIAccessibilityContainerType\nConstants that indicate the type of content in a data-based container.\nUseful links\nAccessibility Design for Mac Catalyst\nImprove navigation in your app by using keyboard shortcuts and accessibility containers.\nSee Also\nEssentials\nUIAccessibility\nA set of methods that provides accessibility information about views and controls in an app’s user interface.\nSupporting VoiceOver in your app\nAdd VoiceOver support to make your iOS app more accessible to users who are blind or have low vision."
  },
  {
    "title": "classDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411858-classdescription",
    "html": "See Also\nWorking with Class Descriptions\nvar attributeKeys: [String]\nAn array of NSString objects containing the names of immutable values that instances of the receiver's class contain.\nfunc inverse(forRelationshipKey: String) -> String?\nFor a given key that defines the name of the relationship from the receiver’s class to another class, returns the name of the relationship from the other class to the receiver’s class.\nvar toManyRelationshipKeys: [String]\nAn array containing the keys for the to-many relationship properties of the receiver.\nvar toOneRelationshipKeys: [String]\nThe keys for the to-one relationship properties of the receiver, if any."
  },
  {
    "title": "replacementObject(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416843-replacementobject",
    "html": "Parameters\naCoder\n\nThe coder encoding the receiver.\n\nReturn Value\n\nThe object encode instead of the receiver (if different).\n\nDiscussion\n\nAn object might encode itself into an archive, but encode a proxy for itself if it’s being encoded for distribution. This method is invoked by NSCoder. NSObject’s implementation returns self.\n\nSee Also\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func setVersion(Int)\nSets the receiver's version number.\nclass func version() -> Int\nReturns the version number assigned to the class."
  },
  {
    "title": "classForKeyedArchiver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1410512-classforkeyedarchiver",
    "html": "Discussion\n\nThe object will be encoded as if it were a member of the class. This property is overridden by the encoder class and instance name to class encoding tables. If this property is nil, the result of this property is ignored.\n\nSee Also\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func setVersion(Int)\nSets the receiver's version number.\nclass func version() -> Int\nReturns the version number assigned to the class."
  },
  {
    "title": "classForCoder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411876-classforcoder",
    "html": "Discussion\n\nThis method is invoked by NSCoder. NSObject’s implementation returns the receiver’s class. The private subclasses of a class cluster substitute the name of their public superclass when being archived.\n\nSee Also\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func setVersion(Int)\nSets the receiver's version number.\nclass func version() -> Int\nReturns the version number assigned to the class."
  },
  {
    "title": "autoContentAccessingProxy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1409224-autocontentaccessingproxy",
    "html": "Discussion\n\nThis property returns a proxy for the receiving object if the receiver adopts the NSDiscardableContent protocol and still has content that has not been discarded.\n\nThe proxy calls beginContentAccess() on the receiver to keep the content available as long as the proxy lives, and calls endContentAccess() when the proxy is deallocated.\n\nThe wrapper object is otherwise a subclass of NSProxy and forwards messages to the original receiver object as an NSProxy does.\n\nThis method can be used to hide an NSDiscardableContent object's content volatility by creating an object that responds to the same messages but holds the contents of the original receiver available as long as the created proxy lives. Thus hidden, the NSDiscardableContent object (by way of the proxy) can be given out to unsuspecting recipients of the object who would otherwise not know they might have to call beginContentAccess() and endContentAccess() around particular usages (specific to each NSDiscardableContent object) of the NSDiscardableContent object."
  },
  {
    "title": "instanceMethod(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418713-instancemethod",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method for which to return the implementation address. The selector must be non-NULL and valid for the receiver. If in doubt, use the responds(to:) method to check before passing the selector to method(for:).\n\nReturn Value\n\nThe address of the implementation of the aSelector instance method.\n\nDiscussion\n\nAn error is generated if instances of the receiver can’t respond to aSelector messages.\n\nUse this method to ask the class object for the implementation of instance methods only. To ask the class for the implementation of a class method, send the method(for:) instance method to the class instead.\n\nSee Also\nObtaining Information About Methods\nfunc method(for: Selector!) -> IMP!\nLocates and returns the address of the receiver’s implementation of a method so it can be called as a function."
  },
  {
    "title": "isSubclass(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418669-issubclass",
    "html": "Parameters\naClass\n\nA class object.\n\nReturn Value\n\ntrue if the receiving class is a subclass of—or identical to—aClass, otherwise false.\n\nSee Also\nIdentifying Classes\nclass func superclass() -> AnyClass?\nReturns the class object for the receiver’s superclass."
  },
  {
    "title": "Selector | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/selector",
    "html": "Topics\nType Aliases\ntypealias Selector.ExtendedGraphemeClusterLiteralType\ntypealias Selector.StringLiteralType\ntypealias Selector.UnicodeScalarLiteralType\nInitializers\ninit(String)\ninit(extendedGraphemeClusterLiteral: String)\nCreates an instance initialized to the given value.\ninit(stringLiteral: String)\ninit(unicodeScalarLiteral: String)\nCreates an instance initialized to the given value.\nInstance Properties\nvar customMirror: Mirror\nvar description: String\nvar hashValue: Int\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func != (Selector, Selector) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nstatic func == (Selector, Selector) -> Bool\nRelationships\nConforms To\nCustomReflectable\nCustomStringConvertible\nExpressibleByStringLiteral\nHashable"
  },
  {
    "title": "objectSpecifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1409884-objectspecifier",
    "html": "Return Value\n\nA fully specified object specifier to the receiver within the application.\n\nSee Also\nWorking with object specifiers\nfunc indicesOfObjects(byEvaluatingObjectSpecifier: NSScriptObjectSpecifier) -> [NSNumber]?\nReturns the indices of the specified container objects."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418615-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "load() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418815-load",
    "html": "Discussion\n\nThe load() message is sent to classes and categories that are both dynamically loaded and statically linked, but only if the newly loaded class or category implements a method that can respond.\n\nThe order of initialization is as follows:\n\nAll initializers in any framework you link to.\n\nAll +load methods in your image.\n\nAll C++ static initializers and C/C++ __attribute__(constructor) functions in your image.\n\nAll initializers in frameworks that link to you.\n\nIn addition:\n\nA class’s +load method is called after all of its superclasses’ +load methods.\n\nA category +load method is called after the class’s own +load method.\n\nIn a custom implementation of load() you can therefore safely message other unrelated classes from the same image, but any load() methods implemented by those classes may not have run yet.\n\nImportant\n\nCustom implementations of the load method for Swift classes bridged to Objective-C are not called automatically.\n\nSee Also\nInitializing a Class\nclass func initialize()\nInitializes the class before it receives its first message."
  },
  {
    "title": "Objective-C Constants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_constants",
    "html": "Topics\nConstants\nvar NSIntegerMax: Int\nThe maximum value for an NSInteger.\nvar NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER: Int32\nvar OBJC_BOOL_IS_BOOL: Int32\nvar OBJC_BOOL_IS_CHAR: Int32\nvar OBJC_NO_GC_API: Int32\nvar OBJC_OLD_DISPATCH_PROTOTYPES: Int32\nOBJC_OLD_DISPATCH_PROTOTYPES == 0 enforces the rule that the dispatch functions must be cast to an appropriate function pointer type.\nvar OBJC_ADDLOADIMAGEFUNC_DEFINED: Int32\nvar OBJC_GETCLASSHOOK_DEFINED: Int32\nvar OBJC_REALIZECLASSFROMSWIFT_DEFINED: Int32\nvar OBJC_SETHOOK_LAZYCLASSNAMER_DEFINED: Int32"
  },
  {
    "title": "commitComposition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1385539-commitcomposition",
    "html": "Parameters\nsender\n\nThe client object requesting the input method to commit the composition.\n\nDiscussion\n\nIf an input method implements this method, it is called when the client wants to end the composition session immediately. A typical response would be to call the insertText method of the client and then clean up any per-session buffers and variables. After receiving this message an input method should consider the given composition session finished."
  },
  {
    "title": "awakeFromNib() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1402907-awakefromnib",
    "html": "Discussion\n\nThe nib-loading infrastructure sends an awakeFromNib message to each object recreated from a nib archive, but only after all the objects in the archive have been loaded and initialized. When an object receives an awakeFromNib message, it is guaranteed to have all its outlet and action connections already established.\n\nYou must call the super implementation of awakeFromNib to give parent classes the opportunity to perform any additional initialization they require. Although the default implementation of this method does nothing, many UIKit classes provide non-empty implementations. You may call the super implementation at any point during your own awakeFromNib method.\n\nNote\n\nDuring Interface Builder’s test mode, this message is also sent to objects instantiated from loaded Interface Builder plug-ins. Because plug-ins link against the framework containing the object definition code, Interface Builder is able to call their awakeFromNib method when present. The same is not true for custom objects that you create for your Xcode projects. Interface Builder knows only about the defined outlets and actions of those objects; it does not have access to the actual code for them.\n\nDuring the instantiation process, each object in the archive is unarchived and then initialized with the method befitting its type. Objects that conform to the NSCoding protocol (including all subclasses of UIView and UIViewController) are initialized using their initWithCoder: method. All objects that do not conform to the NSCoding protocol are initialized using their init method. After all objects have been instantiated and initialized, the nib-loading code reestablishes the outlet and action connections for all of those objects. It then calls the awakeFromNib method of the objects. For more detailed information about the steps followed during the nib-loading process, see Nib Files in Resource Programming Guide.\n\nImportant\n\nBecause the order in which objects are instantiated from an archive is not guaranteed, your initialization methods should not send messages to other objects in the hierarchy. Messages to other objects can be sent safely from within an awakeFromNib method.\n\nTypically, you implement awakeFromNib for objects that require additional set up that cannot be done at design time. For example, you might use this method to customize the default configuration of any controls to match user preferences or the values in other controls. You might also use it to restore individual controls to some previous state of your application.\n\nSee Also\nRelated Documentation\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nclass func initialize()\nInitializes the class before it receives its first message.\ninit?(coder: NSCoder)\nReturns an object initialized from data in a given unarchiver."
  },
  {
    "title": "NSScriptingComparisonMethods | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nsscriptingcomparisonmethods",
    "html": "Overview\n\nOften the correct way to compare two objects for scripting is different from the correct way to compare objects programmatically. This informal protocol defines a set of methods that can be implemented to perform a comparison appropriate for scripting that is independent of other methods for doing comparisons.\n\nCocoa scripting uses these scripting comparison methods, if available, in the process of evaluating specifier tests. If the first object being tested implements the appropriate method for the comparison operation, it will be used. If the first object doesn’t implement the appropriate method but the second object implements the inverse, the inverted comparison is performed. For example, instead of determining whether object one is less than object two, Cocoa determines whether object two is greater than object one (but only for the operations is equal, is less than or equal, is less than, is greater than or equal, or is greater than). If neither of the objects implements the appropriate method, Cocoa falls back on similar comparison operators in the protocol NSComparisonMethods (but again, only for the operations is equal, is less than or equal, is less than, is greater than or equal, or is greater than).\n\nCocoa provides default implementations of these scripting comparison methods for NSString and NSAttributedString. You should define implementations of these methods for any of your scriptable objects that need to perform comparisons for scripting purposes that are different than the comparisons provided by NSComparisonMethods. If none require different comparison methods, you can implement only the methods you need from NSScriptingComparisonMethods.\n\nTopics\nPerforming comparisons\nfunc scriptingBegins(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the beginning of object.\nfunc scriptingContains(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object contains object.\nfunc scriptingEnds(with: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object matches the end of object.\nfunc scriptingIsEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is equal to object.\nfunc scriptingIsGreaterThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than object.\nfunc scriptingIsGreaterThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is greater than or equal to object.\nfunc scriptingIsLessThan(Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than object.\nfunc scriptingIsLessThanOrEqual(to: Any) -> Bool\nReturns true if, in a scripting comparison, the compared object is less than or equal to object.\nSee Also\nNSObject Script Support\nNSComparisonMethods\nA collection of default comparison methods useful for performing specifier tests.\nNSScriptKeyValueCoding\nA collection of methods that provide additional capabilities for working with key-value coding.\nNSScriptObjectSpecifiers\nA collection of methods providing additional object specifier functionality.\nclass NSScriptCoercionHandler\nA mechanism for converting one kind of scripting data to another.\nclass NSScriptExecutionContext\nThe context in which the current script command is executed.\nRelated Documentation\nCocoa Scripting Guide"
  },
  {
    "title": "NSScriptKeyValueCoding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nsscriptkeyvaluecoding",
    "html": "Overview\n\nCocoa scripting takes advantage of key-value coding to get and set information in scriptable objects. The methods in this category provide additional capabilities for working with key-value coding, including getting and setting key values by index in multi-value keys and coercing (or converting) a key value. Additional methods allow the implementer of a scriptable container class to provide fast access to elements that are being referenced by name and unique ID.\n\nBecause Cocoa scripting invokes setValue(_:forKey:) and mutableArrayValue(forKey:), changes to model objects made by AppleScript scripts are observable using automatic key-value observing.\n\nNote\n\nIn OS X 10.3 and earlier, Cocoa scripting did not invoke setValue(_:forKey:) or mutableArrayValue(forKey:), so automatic key-value observing notification was not always done for model object changes caused by scripts. Starting in macOS 10.4, for backward binary compatibility, if it is overridden, Cocoa invokes the now-deprecated method takeValue(_:forKey:) instead of setValue(_:forKey:).\n\nTopics\nIndexed access\nfunc insertValue(Any, at: Int, inPropertyWithKey: String)\nInserts an object at the specified index in the collection specified by the passed key.\nfunc removeValue(at: Int, fromPropertyWithKey: String)\nRemoves the object at the specified index from the collection specified by the passed key.\nfunc replaceValue(at: Int, inPropertyWithKey: String, withValue: Any)\nReplaces the object at the specified index in the collection specified by the passed key.\nfunc value(at: Int, inPropertyWithKey: String) -> Any?\nRetrieves an indexed object from the collection specified by the passed key.\nAccess by name, key, or ID\nfunc insertValue(Any, inPropertyWithKey: String)\nInserts an object in the collection specified by the passed key.\nfunc value(withName: String, inPropertyWithKey: String) -> Any?\nRetrieves a named object from the collection specified by the passed key.\nfunc value(withUniqueID: Any, inPropertyWithKey: String) -> Any?\nRetrieves an object by ID from the collection specified by the passed key.\nCoercion\nfunc coerceValue(Any?, forKey: String) -> Any?\nUses type info from the class description and NSScriptCoercionHandler to attempt to convert value for key to the proper type, if necessary.\nConstants\nNSScriptKeyValueCoding Exception Names\nExceptions raised by key-value coding methods.\nSee Also\nNSObject Script Support\nNSComparisonMethods\nA collection of default comparison methods useful for performing specifier tests.\nNSScriptingComparisonMethods\nA collection of methods useful for comparing script objects.\nNSScriptObjectSpecifiers\nA collection of methods providing additional object specifier functionality.\nclass NSScriptCoercionHandler\nA mechanism for converting one kind of scripting data to another.\nclass NSScriptExecutionContext\nThe context in which the current script command is executed.\nRelated Documentation\nCocoa Scripting Guide\nKey-Value Coding Programming Guide"
  },
  {
    "title": "NSKeyValueCoding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nskeyvaluecoding",
    "html": "Overview\n\nThe basic methods for accessing an object’s values are setValue(_:forKey:), which sets the value for the property identified by the specified key, and value(forKey:), which returns the value for the property identified by the specified key. Thus, all of an object’s properties can be accessed in a consistent manner.\n\nThe default implementation relies on the accessor methods normally implemented by objects (or to access instance variables directly if need be).\n\nTopics\nGetting Values\nfunc value(forKey: String) -> Any?\nReturns the value for the property identified by a given key.\nfunc value(forKeyPath: String) -> Any?\nReturns the value for the derived property identified by a given key path.\nfunc dictionaryWithValues(forKeys: [String]) -> [String : Any]\nReturns a dictionary containing the property values identified by each of the keys in a given array.\nfunc value(forUndefinedKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to a given key.\nfunc mutableArrayValue(forKey: String) -> NSMutableArray\nReturns a mutable array proxy that provides read-write access to an ordered to-many relationship specified by a given key.\nfunc mutableArrayValue(forKeyPath: String) -> NSMutableArray\nReturns a mutable array that provides read-write access to the ordered to-many relationship specified by a given key path.\nfunc mutableSetValue(forKey: String) -> NSMutableSet\nReturns a mutable set proxy that provides read-write access to the unordered to-many relationship specified by a given key.\nfunc mutableSetValue(forKeyPath: String) -> NSMutableSet\nReturns a mutable set that provides read-write access to the unordered to-many relationship specified by a given key path.\nfunc mutableOrderedSetValue(forKey: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key.\nfunc mutableOrderedSetValue(forKeyPath: String) -> NSMutableOrderedSet\nReturns a mutable ordered set that provides read-write access to the uniquing ordered to-many relationship specified by a given key path.\nSetting Values\nfunc setValue(Any?, forKeyPath: String)\nSets the value for the property identified by a given key path to a given value.\nfunc setValuesForKeys([String : Any])\nSets properties of the receiver with values from a given dictionary, using its keys to identify the properties.\nfunc setNilValueForKey(String)\nInvoked by setValue(_:forKey:) when it’s given a nil value for a scalar value (such as an int or float).\nfunc setValue(Any?, forKey: String)\nSets the property of the receiver specified by a given key to a given value.\nfunc setValue(Any?, forUndefinedKey: String)\nInvoked by setValue(_:forKey:) when it finds no property for a given key.\nValidation\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: String)\nThrows an error when the value specified by a given pointer is not valid or can't be made valid for the property identified by a given key.\nfunc validateValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKeyPath: String)\nThrows an error when the value specified by a given pointer is not valid for a given key path relative to the receiver.\nConstants\nKey Value Coding Exception Names\nThis constant defines the name of an exception raised when a key value coding operation fails.\nstruct NSKeyValueOperator\nThese constants define the available array operators. See Using Collection Operators for more information.\nvar NSKeyValueValidationError: Int\nA key-value coding validation error.\nSee Also\nObject Basics\nclass NSObject\nThe root class of most Objective-C class hierarchies, from which subclasses inherit a basic interface to the runtime system and the ability to behave as Objective-C objects.\nprotocol NSObjectProtocol\nThe group of methods that are fundamental to all Objective-C objects.\nRelated Documentation\nKey-Value Coding Programming Guide"
  },
  {
    "title": "NSScriptKeyValueCoding Exception Names | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nsscriptkeyvaluecoding_exception_names",
    "html": "Topics\nConstants\nlet NSOperationNotSupportedForKeyException: String\nCan be raised by key-value coding methods that want to explicitly disallow certain manipulations or accesses.\nSee Also\nKey-Value Coding\nNSKeyValueBindingCreation\nA set of methods that you can use to create and remove bindings between view objects and controllers, or between controllers and model objects.\nNSKeyValueCoding\nA mechanism by which you can access the properties of an object indirectly by name or key.\nNSScriptKeyValueCoding\nA collection of methods that provide additional capabilities for working with key-value coding."
  },
  {
    "title": "WebPlugInContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/webplugincontainer",
    "html": "Topics\nPerforming actions on the enclosing container\nfunc webPlugInContainerLoad(URLRequest!, inFrame: String!)\nLoads a URL into a web frame.\nfunc webPlugInContainerShowStatus(String!)\nTells the container to show a status message.\nObtaining information about the container\nvar webFrame: WebFrame!\nReturns the WebFrame that contains the plug-in.\nvar webPlugInContainerSelectionColor: NSColor!\nReturns the plug-in selection color.\nSee Also\nImplementing Plugins (Legacy)\nWebPlugIn\nThe WebPlugIn informal protocol defines methods that enable interaction between an application using the WebKit framework and any WebKit-based plug-ins it may use.\nprotocol WebPlugInViewFactory\nDeprecated\nRelated Documentation\nWebKit Objective-C Programming Guide"
  },
  {
    "title": "NSKeyValueBindingCreation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/nskeyvaluebindingcreation",
    "html": "Overview\n\nThe NSKeyValueBindingCreation informal protocol also provides a means for a view subclass to advertise the bindings that it exposes. The protocol is implemented by NSObject and its methods can be overridden by view and controller subclasses.\n\nWhen a new binding is created it relates the receiver’s binding (for example, a property of the view object) to a property of the observable object specified by a key path. When the value of the specified property of the observable object changes, the receiver is notified using the key-value observing mechanism. A binding also specifies binding options that can further customize how the observing and the observed objects interact.\n\nBindings are considered to be a property of the object which is bound, and all information related to bindings should be owned by the object. All standard bindings on AppKit objects (views, cells, table columns, controllers) unbind their bindings automatically when they are deallocated, but if you create key-value bindings for other kind of objects, you need to make sure that you remove those bindings before deallocation (observed objects have weak references to their observers, so controllers/model objects might continue referencing and messaging the objects that were bound to them).\n\nBindings between objects are typically established in Interface Builder using the Bindings inspector. However, there are times it must be done programmatically, such as when establishing a binding between objects in different nib files.\n\nNSView subclasses can expose additional key-value-coding/key-value-observing compliant properties as bindings by calling the class method exposeBinding(_:) for each of the properties. This is typically done in the class’s initialize method. By exposing the bindings that an object supports and creating an Interface Builder palette, you can make instances of your own classes bindable in Interface Builder.\n\nTopics\nExposing bindings\nclass func exposeBinding(NSBindingName)\nExposes the specified binding, advertising its availability.\nvar exposedBindings: [NSBindingName]\nReturns an array containing the bindings exposed by the receiver.\nManaging bindings\nfunc valueClassForBinding(NSBindingName) -> AnyClass?\nReturns the class of the value that will be returned for the specified binding.\nfunc bind(NSBindingName, to: Any, withKeyPath: String, options: [NSBindingOption : Any]?)\nEstablishes a binding between a given property of the receiver and the property of a given object specified by a given key path.\nfunc optionDescriptionsForBinding(NSBindingName) -> [NSAttributeDescription]\nReturns an array describing the options for the specified binding.\nfunc infoForBinding(NSBindingName) -> [NSBindingInfoKey : Any]?\nReturns a dictionary describing the receiver’s binding.\nstruct NSBindingInfoKey\nfunc unbind(NSBindingName)\nRemoves a given binding between the receiver and a controller.\nfunc NSIsControllerMarker(Any?) -> Bool\nTests whether a given object is special marker object used for indicating the state of a selection in relation to a key.\nConstants\nstruct NSBindingName\nValues that specify a binding for certain methods.\nstruct NSBindingOption\nValues that are used as keys in the options dictionary passed to the bind(_:to:withKeyPath:options:) method.\nBinding Dictionary Keys\nThe following values are used as keys in the dictionary returned by infoForBinding(_:)\nSee Also\nKey-Value Data\nclass NSDictionaryController\nA bindings-compatible controller that manages the display and editing of a dictionary of key-value pairs.\nclass NSDictionaryControllerKeyValuePair\nA set of methods implemented by arranged objects to give access to information about those objects.\nRelated Documentation\nCocoa Bindings Reference\nCocoa Bindings Programming Topics"
  },
  {
    "title": "scriptingProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417254-scriptingproperties",
    "html": "Discussion\n\nAn NSString-keyed dictionary of the receiver's scriptable properties, including all of those that are declared as Attributes and ToOneRelationships in the .scriptSuite property list entries for the class and its scripting superclasses, with the exception of ones keyed by \"scriptingProperties.\" Each key in the dictionary must be identical to the key for an Attribute or ToOneRelationship. The values of the dictionary must be Objective-C objects that are convertible to NSAppleEventDescriptor objects.\n\nSee Also\nScripting\nvar classCode: FourCharCode\nThe receiver's Apple event type code, as stored in the NSScriptClassDescription object for the object’s class.\nvar className: String\nA string containing the name of the class.\nfunc copyScriptingValue(Any, forKey: String, withProperties: [String : Any]) -> Any?\nCreates and returns one or more scripting objects to be inserted into the specified relationship by copying the passed-in value and setting the properties in the copied object or objects.\nfunc newScriptingObject(of: AnyClass, forValueForKey: String, withContentsValue: Any?, properties: [String : Any]) -> Any?\nCreates and returns an instance of a scriptable class, setting its contents and properties, for insertion into the relationship identified by the key.\nfunc scriptingValue(for: NSScriptObjectSpecifier) -> Any?\nGiven an object specifier, returns the specified object or objects in the receiving container."
  },
  {
    "title": "classCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1413991-classcode",
    "html": "Discussion\n\nThis property is used by Cocoa’s scripting support classes.\n\nSee Also\nScripting\nvar className: String\nA string containing the name of the class.\nfunc copyScriptingValue(Any, forKey: String, withProperties: [String : Any]) -> Any?\nCreates and returns one or more scripting objects to be inserted into the specified relationship by copying the passed-in value and setting the properties in the copied object or objects.\nfunc newScriptingObject(of: AnyClass, forValueForKey: String, withContentsValue: Any?, properties: [String : Any]) -> Any?\nCreates and returns an instance of a scriptable class, setting its contents and properties, for insertion into the relationship identified by the key.\nvar scriptingProperties: [String : Any]?\nAn NSString-keyed dictionary of the receiver's scriptable properties.\nfunc scriptingValue(for: NSScriptObjectSpecifier) -> Any?\nGiven an object specifier, returns the specified object or objects in the receiving container."
  },
  {
    "title": "UIAccessibility | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/uiaccessibility",
    "html": "Overview\n\nThe UIAccessibility informal protocol provides accessibility information about an app’s user interface elements. Assistive apps, such as VoiceOver, convey this information to users with disabilities to help them use the app.\n\nStandard UIKit controls and views implement the UIAccessibility methods and are accessible to assistive apps by default. This means that if your app uses only standard controls and views, such as UIButton, UISegmentedControl, and UITableView, you need only supply app-specific details when the default values are incomplete. You can do this by setting these values in Interface Builder or by setting the properties in this informal protocol.\n\nThe UIAccessibilityElement class, which represents custom user interface objects, also implements the UIAccessibility informal protocol. If you create a completely custom UIView subclass, you might need to create an instance of UIAccessibilityElement to represent it. In this case, you’d support all the UIAccessibility properties to correctly set and return the accessibility element’s properties.\n\nTopics\nSupporting basic accessibility\nvar isAccessibilityElement: Bool\nA Boolean value that indicates whether the element is an accessibility element that an assistive app can access.\nvar accessibilityLabel: String?\nA succinct label in a localized string that identifies the accessibility element.\nvar accessibilityValue: String?\nA localized string that contains the value of the accessibility element.\nvar accessibilityHint: String?\nA localized string that contains a brief description of the result of performing an action on the accessibility element.\nvar accessibilityTraits: UIAccessibilityTraits\nThe combination of accessibility traits that best characterizes the accessibility element.\nstruct UIAccessibilityTraits\nConstants that describe how an accessibility element behaves.\nDefining accessibility text and language\nSpeech attributes for attributed strings\nApply attributes to text in an attributed string to modify the pronunciation of that text.\nText attributes for attributed strings\nApply attributes to text in an attributed string to convey extra information about the text.\nvar accessibilityHeaderElements: [Any]?\nAn array of elements that serves as the headers for the accessibility element.\nvar accessibilityAttributedHint: NSAttributedString?\nThe underlying attributed version of the accessibility hint.\nvar accessibilityAttributedLabel: NSAttributedString?\nThe underlying attributed version of the accessibility label.\nvar accessibilityLanguage: String?\nThe language to use when speaking the accessibility element's label, value, and hint.\nvar accessibilityTextualContext: UIAccessibilityTextualContext?\nA named context that helps identify and classify the type of text inside an element.\nvar accessibilityUserInputLabels: [String]!\nAn array of localized labels the user provides to refer to the accessibility element.\nvar accessibilityAttributedUserInputLabels: [NSAttributedString]!\nThe underlying attributed versions of the accessibility user input labels.\nvar accessibilityAttributedValue: NSAttributedString?\nThe underlying attributed version of the accessibility value.\nConfiguring behavior\nvar accessibilityCustomRotors: [UIAccessibilityCustomRotor]?\nAn array of custom rotors for the current accessibility element.\nvar accessibilityElementsHidden: Bool\nA Boolean value that indicates whether to hide the accessibility elements.\nvar accessibilityRespondsToUserInteraction: Bool\nA Boolean value that indicates whether the accessibility element performs an action due to user interaction.\nvar accessibilityViewIsModal: Bool\nA Boolean value that indicates whether VoiceOver ignores the accessibility elements within views that are siblings of the element.\nvar shouldGroupAccessibilityChildren: Bool\nA Boolean value that indicates whether VoiceOver groups the accessibility elements that are children of the element, regardless of their positions on the screen.\nvar accessibilityDirectTouchOptions: UIAccessibility.DirectTouchOptions\nA value that configures how VoiceOver produces audio for direct touch areas.\nstruct UIAccessibility.DirectTouchOptions\nConstants that configure how VoiceOver produces audio for direct touch areas.\nHandling notifications\nNotification names\nThe names of notifications that the accessibility system generates.\nNotification dictionary keys\nHandle notifications with keys in the user info dictionary.\nstruct UIAccessibility.Notification\nAn accessibility notification that an app can send.\nstatic func post(notification: UIAccessibility.Notification, argument: Any?)\nPosts a notification to assistive apps.\nNavigating elements\nUIAccessibilityContainer\nProvide a set of methods that view subclasses use to make subcomponents accessible as separate elements.\nvar accessibilityActivationPoint: CGPoint\nThe activation point for the accessibility element in screen coordinates.\nvar accessibilityFocusedUIElement: Any?\nThe deepest descendant of the accessibility hierarchy that has the focus.\nvar accessibilityFrame: CGRect\nThe frame of the accessibility element in screen coordinates.\nfunc accessibilityHitTest(NSPoint) -> Any?\nReturns the deepest descendant of the accessibility hierarchy that contains the specified point.\nvar accessibilityNavigationStyle: UIAccessibilityNavigationStyle\nThe navigation style to apply to the object and its elements.\nenum UIAccessibilityNavigationStyle\nConstants that describe how to navigate an object’s elements with an assistive app.\nvar accessibilityPath: UIBezierPath?\nThe path of the element in screen coordinates.\nstatic func zoomFocusChanged(zoomType: UIAccessibility.ZoomType, toFrame: CGRect, in: UIView)\nNotifies the system when the app’s focus changes to a new location.\nenum UIAccessibility.ZoomType\nThe types of system Zoom that can be in effect.\nstatic var assistiveTouch: UIGuidedAccessAccessibilityFeature\nThe AssistiveTouch accessibility feature.\nSupporting types\ntypealias AXArrayReturnBlock\ntypealias AXAttributedStringArrayReturnBlock\ntypealias AXAttributedStringReturnBlock\ntypealias AXBoolReturnBlock\ntypealias AXContainerTypeReturnBlock\ntypealias AXCustomActionsReturnBlock\ntypealias AXCustomRotorsReturnBlock\ntypealias AXNavigationStyleReturnBlock\ntypealias AXObjectReturnBlock\ntypealias AXPathReturnBlock\ntypealias AXPointReturnBlock\ntypealias AXRectReturnBlock\ntypealias AXStringArrayReturnBlock\ntypealias AXStringReturnBlock\ntypealias AXTextualContextReturnBlock\ntypealias AXTraitsReturnBlock\ntypealias AXVoidReturnBlock\nstruct UIAccessibility\nA namespace for accessibility symbols for UIKit apps.\nSee Also\nEssentials\nUIAccessibilityContainer\nProvide a set of methods that view subclasses use to make subcomponents accessible as separate elements.\nSupporting VoiceOver in your app\nAdd VoiceOver support to make your iOS app more accessible to users who are blind or have low vision.\nRelated Documentation\nAccessibility\nMake your apps accessible to everyone who uses Apple devices.\nAccessibility for UIKit\nMake your UIKit apps accessible to everyone who uses iOS and tvOS."
  },
  {
    "title": "UIAccessibilityDragging | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/uiaccessibilitydragging",
    "html": "Overview\n\nBy default, if an accessible view or its subtree has drag and/or drop interactions, they will be automatically exposed by assistive technologies. However, if there is more than one such interaction, each drag or drop should have a name to disambiguate it and give a good user experience. Also, there may be situations in which you want to expose drags or drops from an element, and those interactions are installed on views that are not part of that element's view hierarchy subtree.\n\nThis is trivially the case when the element is not a view at all, but an instance of UIAccessibilityElement.\n\nAnother example is when a container view maintains interactions that are logically associated with subviews.\n\nFor instance, UITableView has associated drag interactions that allow for dragging its rows; to make the rows draggable by assistive technologies, UITableViewCell has drag descriptors that describe where in the table view to start a drag to activate dragging of the cell.\n\nNote\n\nThis implementation detail is noted here for expository purposes only and may change at any time without warning.\n\nProperties defined here allow you to fine-tune how drags and drops are exposed to assistive technologies. Both of their getter methods can be overridden to provide information on-demand.\n\nFor each location descriptor, the associated view should be the UIView with the appropriate UIInteraction object for that drag or drop.\n\nTopics\nFine-Tuning Drag and Drop\nvar accessibilityDragSourceDescriptors: [UIAccessibilityLocationDescriptor]?\nAn array of location descriptor objects that you use to define what drags are possible from this element.\nvar accessibilityDropPointDescriptors: [UIAccessibilityLocationDescriptor]?\nAn array of location descriptor objects that you use to define where drops are possible on this element.\nSee Also\nImproving Accessibility\nUIAccessibility\nA set of methods that provides accessibility information about views and controls in an app’s user interface.\nUIAccessibilityContainer\nProvide a set of methods that view subclasses use to make subcomponents accessible as separate elements.\nUIAccessibilityAction\nA set of methods that accessibility elements can use to support specific actions.\nUIAccessibilityFocus\nAn informal protocol that provides a way to determine whether an assistive app, such as VoiceOver, has focus on an accessible element.\nRelated Documentation\nAccessibility Programming Guide for iOS"
  },
  {
    "title": "UIAccessibilityFocus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/uiaccessibilityfocus",
    "html": "Overview\n\nVoiceOver and other assistive technologies place a virtual focus on elements, which allows users to inspect an element without activating it. If you know the current location of the virtual focus, you can optimize the user experience for assistive technology users. For example, if your application expects people to tap once to select an object and then double-tap to activate it, VoiceOver users must make an extra tap to focus VoiceOver on the object before tapping to select it. To improve the VoiceOver user’s experience, you can move selection to an element at the same time VoiceOver focuses on the element. In this way, the user can activate the element without having to tap again to select the element.\n\nTopics\nGetting focus information\nfunc accessibilityElementDidBecomeFocused()\nSent after an assistive technology has set its virtual focus on the accessibility element.\nfunc accessibilityElementDidLoseFocus()\nSent after an assistive technology has removed its virtual focus from an accessibility element.\nfunc accessibilityElementIsFocused() -> Bool\nReturns a Boolean value indicating whether an assistive technology is focused on the accessibility element.\nfunc accessibilityAssistiveTechnologyFocusedIdentifiers() -> Set<UIAccessibility.AssistiveTechnologyIdentifier>?\nReturns a set of identifier keys indicating which assistive app has focus on the accessibility element.\nSee Also\nBehaviors\nprotocol UIAccessibilityIdentification\nMethods that associate a unique identifier with elements in your user interface.\nprotocol UIAccessibilityReadingContent\nMethods to implement for an object that represents content that users read, such as a book or an article.\nprotocol UIAccessibilityContentSizeCategoryImageAdjusting\nMethods to determine when to adjust images for different content size categories.\nstruct UIAccessibilityTextualContext\nConstants that describe a named context that helps identify and classify the type of text inside an element.\nRelated Documentation\nAccessibility Programming Guide for iOS"
  },
  {
    "title": "toOneRelationshipKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1414814-toonerelationshipkeys",
    "html": "See Also\nWorking with Class Descriptions\nvar attributeKeys: [String]\nAn array of NSString objects containing the names of immutable values that instances of the receiver's class contain.\nvar classDescription: NSClassDescription\nAn object containing information about the attributes and relationships of the receiver’s class.\nfunc inverse(forRelationshipKey: String) -> String?\nFor a given key that defines the name of the relationship from the receiver’s class to another class, returns the name of the relationship from the other class to the receiver’s class.\nvar toManyRelationshipKeys: [String]\nAn array containing the keys for the to-many relationship properties of the receiver."
  },
  {
    "title": "toManyRelationshipKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415662-tomanyrelationshipkeys",
    "html": "See Also\nWorking with Class Descriptions\nvar attributeKeys: [String]\nAn array of NSString objects containing the names of immutable values that instances of the receiver's class contain.\nvar classDescription: NSClassDescription\nAn object containing information about the attributes and relationships of the receiver’s class.\nfunc inverse(forRelationshipKey: String) -> String?\nFor a given key that defines the name of the relationship from the receiver’s class to another class, returns the name of the relationship from the other class to the receiver’s class.\nvar toOneRelationshipKeys: [String]\nThe keys for the to-one relationship properties of the receiver, if any."
  },
  {
    "title": "version() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415151-version",
    "html": "Return Value\n\nThe version number assigned to the class.\n\nDiscussion\n\nIf no version has been set, the default is 0.\n\nVersion numbers are needed for decoding or unarchiving, so older versions of an object can be detected and decoded correctly.\n\nCaution should be taken when obtaining the version from within an NSCoding protocol or other methods. Use the class name explicitly when getting a class version number:\n\nversion = [MyClass version];\n\n\nDon’t simply send version to the return value of class—a subclass version number may be returned instead.\n\nSpecial Considerations\n\nThe version number applies to NSArchiver/NSUnarchiver, but not to NSKeyedArchiver/NSKeyedUnarchiver. A keyed archiver does not encode class version numbers.\n\nSee Also\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func setVersion(Int)\nSets the receiver's version number.\nRelated Documentation\nfunc version(forClassName: String) -> Int\nThis method is present for historical reasons and is not used with keyed archivers."
  },
  {
    "title": "inverse(forRelationshipKey:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411046-inverse",
    "html": "Parameters\nrelationshipKey\n\nThe name of the relationship from the receiver’s class to another class.\n\nReturn Value\n\nThe name of the relationship that is the inverse of the receiver's relationship named relationshipKey.\n\nDiscussion\n\nNSObject’s implementation of inverseForRelationshipKey: simply invokes [[self classDescription] inverseForRelationshipKey:relationshipKey]. To make use of the default implementation, you must therefore implement and register a suitable class description—see NSClassDescription.\n\nFor example, suppose an Employee class has a relationship named department to a Department class, and that Department has a relationship called employees to Employee. The statement:\n\nemployee inverseForRelationshipKey:@\"department\"];\n\n\nreturns the string employees.\n\nSee Also\nWorking with Class Descriptions\nvar attributeKeys: [String]\nAn array of NSString objects containing the names of immutable values that instances of the receiver's class contain.\nvar classDescription: NSClassDescription\nAn object containing information about the attributes and relationships of the receiver’s class.\nvar toManyRelationshipKeys: [String]\nAn array containing the keys for the to-many relationship properties of the receiver.\nvar toOneRelationshipKeys: [String]\nThe keys for the to-one relationship properties of the receiver, if any."
  },
  {
    "title": "attributeKeys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415656-attributekeys",
    "html": "Discussion\n\nNSObject’s implementation of attributeKeys simply calls [[self classDescription] attributeKeys]. To make use of the default implementation, you must therefore implement and register a suitable class description—see NSClassDescription.\n\nSee Also\nWorking with Class Descriptions\nvar classDescription: NSClassDescription\nAn object containing information about the attributes and relationships of the receiver’s class.\nfunc inverse(forRelationshipKey: String) -> String?\nFor a given key that defines the name of the relationship from the receiver’s class to another class, returns the name of the relationship from the other class to the receiver’s class.\nvar toManyRelationshipKeys: [String]\nAn array containing the keys for the to-many relationship properties of the receiver.\nvar toOneRelationshipKeys: [String]\nThe keys for the to-one relationship properties of the receiver, if any."
  },
  {
    "title": "setVersion(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416538-setversion",
    "html": "Parameters\naVersion\n\nThe version number for the receiver.\n\nDiscussion\n\nThe version number is helpful when instances of the class are to be archived and reused later. The default version is 0.\n\nSpecial Considerations\n\nThe version number applies to NSArchiver/NSUnarchiver, but not to NSKeyedArchiver/NSKeyedUnarchiver. A keyed archiver does not encode class version numbers.\n\nSee Also\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func version() -> Int\nReturns the version number assigned to the class."
  },
  {
    "title": "replacementObject(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417663-replacementobject",
    "html": "Parameters\narchiver\n\nA keyed archiver creating an archive.\n\nReturn Value\n\nThe object encode instead of the receiver (if different).\n\nDiscussion\n\nThis method is called only if no replacement mapping for the object has been set up in the encoder (for example, due to a previous call of replacementObject(for:) to that object).\n\nSee Also\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nclass func setVersion(Int)\nSets the receiver's version number.\nclass func version() -> Int\nReturns the version number assigned to the class."
  },
  {
    "title": "classFallbacksForKeyedArchiver() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411048-classfallbacksforkeyedarchiver",
    "html": "Return Value\n\nAn array of string objects that specify the names of classes in preferred order for unarchiving\n\nDiscussion\n\nNSKeyedArchiver calls this method and stores the result inside the archive. If the actual class of an object doesn’t exist at the time of unarchiving, NSKeyedUnarchiver goes through the stored list of classes and uses the first one that does exists as a substitute class for decoding the object. The default implementation of this method returns an empty array.\n\nYou can use this method if you introduce a new class into your application to provide some backwards compatibility in case the archive will be read on a system that does not have that class. Sometimes there may be another class which may work nearly as well as a substitute for the new class, and the archive keys and archived state for the new class can be carefully chosen (or compatibility written out) so that the object can be unarchived as the substitute class if necessary.\n\nSee Also\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func setVersion(Int)\nSets the receiver's version number.\nclass func version() -> Int\nReturns the version number assigned to the class."
  },
  {
    "title": "classForArchiver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411359-classforarchiver",
    "html": "See Also\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func setVersion(Int)\nSets the receiver's version number.\nclass func version() -> Int\nReturns the version number assigned to the class."
  },
  {
    "title": "doesNotRecognizeSelector(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418637-doesnotrecognizeselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies a method not implemented or recognized by the receiver.\n\nDiscussion\n\nThe runtime system invokes this method whenever an object receives an aSelector message it can’t respond to or forward. This method, in turn, raises an NSInvalidArgumentException, and generates an error message.\n\nAny doesNotRecognizeSelector(_:) messages are generally sent only by the runtime system. However, they can be used in program code to prevent a method from being inherited. For example, an NSObject subclass might renounce the copy() or init() method by re-implementing it to include a doesNotRecognizeSelector(_:) message as follows:\n\n- (id)copy\n{\n    [self doesNotRecognizeSelector:_cmd];\n}\n\n\nThe _cmd variable is a hidden argument passed to every method that is the current selector; in this example, it identifies the selector for the copy method. This code prevents instances of the subclass from responding to copy messages or superclasses from forwarding copy messages—although responds(to:) will still report that the receiver has access to a copy method.\n\nIf you override this method, you must call super or raise an invalidArgumentException exception at the end of your implementation. In other words, this method must not return normally; it must always result in an exception being thrown.\n\nSee Also\nRelated Documentation\n- forwardInvocation:\nOverridden by subclasses to forward messages to other objects."
  },
  {
    "title": "resolveClassMethod(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418889-resolveclassmethod",
    "html": "Parameters\nname\n\nThe name of a selector to resolve.\n\nReturn Value\n\ntrue if the method was found and added to the receiver, otherwise false.\n\nDiscussion\n\nThis method allows you to dynamically provide an implementation for a given selector. See resolveInstanceMethod(_:) for further discussion.\n\nSee Also\nDynamically Resolving Methods\nclass func resolveInstanceMethod(Selector!) -> Bool\nDynamically provides an implementation for a given selector for an instance method."
  },
  {
    "title": "perform(_:on:with:waitUntilDone:modes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417922-perform",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. It should not have a significant return value and should take a single argument of type id, or no arguments.\n\nthread\n\nThe thread on which to execute aSelector. This thread represents the target thread.\n\narg\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\nwait\n\nA Boolean that specifies whether the current thread blocks until after the specified selector is performed on the receiver on the specified thread. Specify true to block this thread; otherwise, specify false to have this method return immediately.\n\nIf the current thread and target thread are the same, and you specify true for this parameter, the selector is performed immediately. If you specify false, this method queues the message and returns immediately, regardless of whether the threads are the same or different.\n\narray\n\nAn array of strings that identifies the modes in which it is permissible to perform the specified selector. This array must contain at least one string. If you specify nil or an empty array for this parameter, this method returns without performing the specified selector. For information about run loop modes, see Run Loops in Threading Programming Guide.\n\nDiscussion\n\nYou can use this method to deliver messages to other threads in your application. The message in this case is a method of the current object that you want to execute on the target thread.\n\nThis method queues the message on the run loop of the target thread using the run loop modes specified in the array parameter. As part of its normal run loop processing, the target thread dequeues the message (assuming it is running in one of the specified modes) and invokes the desired method.\n\nYou cannot cancel messages queued using this method. If you want the option of canceling a message on the current thread, you must use either the perform(_:with:afterDelay:) or perform(_:with:afterDelay:inModes:) method instead.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after(_:_:_:) and related methods to get the behavior you want.\n\nSee Also\nSending Messages\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval)\nInvokes a method of the receiver on the current thread using the default mode after a delay.\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval, inModes: [RunLoop.Mode])\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the main thread using the default mode.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the main thread using the specified modes.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the specified thread using the default mode.\nfunc performSelector(inBackground: Selector, with: Any?)\nInvokes a method of the receiver on a new background thread.\nclass func cancelPreviousPerformRequests(withTarget: Any)\nCancels perform requests previously registered with the perform(_:with:afterDelay:) instance method.\nclass func cancelPreviousPerformRequests(withTarget: Any, selector: Selector, object: Any?)\nCancels perform requests previously registered with perform(_:with:afterDelay:)."
  },
  {
    "title": "performSelector(inBackground:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1412390-performselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\narg\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\nDiscussion\n\nThis method creates a new thread in your application, putting your application into multithreaded mode if it was not already. The method represented by aSelector must set up the thread environment just as you would for any other new thread in your program. For more information about how to configure and run threads, see Threading Programming Guide.\n\nSee Also\nSending Messages\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval)\nInvokes a method of the receiver on the current thread using the default mode after a delay.\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval, inModes: [RunLoop.Mode])\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the main thread using the default mode.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the main thread using the specified modes.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the specified thread using the default mode.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the specified thread using the specified modes.\nclass func cancelPreviousPerformRequests(withTarget: Any)\nCancels perform requests previously registered with the perform(_:with:afterDelay:) instance method.\nclass func cancelPreviousPerformRequests(withTarget: Any, selector: Selector, object: Any?)\nCancels perform requests previously registered with perform(_:with:afterDelay:)."
  },
  {
    "title": "perform(_:with:afterDelay:inModes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415652-perform",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\nanArgument\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\ndelay\n\nThe minimum time before which the message is sent. Specifying a delay of 0 does not necessarily cause the selector to be performed immediately. The selector is still queued on the thread’s run loop and performed as soon as possible.\n\nmodes\n\nAn array of strings that identify the modes to associate with the timer that performs the selector. This array must contain at least one string. If you specify nil or an empty array for this parameter, this method returns without performing the specified selector. For information about run loop modes, see Run Loops in Threading Programming Guide.\n\nDiscussion\n\nThis method sets up a timer to perform the aSelector message on the current thread’s run loop. The timer is configured to run in the modes specified by the modes parameter. When the timer fires, the thread attempts to dequeue the message from the run loop and perform the selector. It succeeds if the run loop is running and in one of the specified modes; otherwise, the timer waits until the run loop is in one of those modes.\n\nIf you want the message to be dequeued when the run loop is in a mode other than the default mode, use the perform(_:with:afterDelay:inModes:) method instead. If you are not sure whether the current thread is the main thread, you can use the performSelector(onMainThread:with:waitUntilDone:) or performSelector(onMainThread:with:waitUntilDone:modes:) method to guarantee that your selector executes on the main thread. To cancel a queued message, use the cancelPreviousPerformRequests(withTarget:) or cancelPreviousPerformRequests(withTarget:selector:object:) method.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after(_:_:_:) and related methods to get the behavior you want.\n\nSee Also\nSending Messages\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval)\nInvokes a method of the receiver on the current thread using the default mode after a delay.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the main thread using the default mode.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the main thread using the specified modes.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the specified thread using the default mode.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the specified thread using the specified modes.\nfunc performSelector(inBackground: Selector, with: Any?)\nInvokes a method of the receiver on a new background thread.\nclass func cancelPreviousPerformRequests(withTarget: Any)\nCancels perform requests previously registered with the perform(_:with:afterDelay:) instance method.\nclass func cancelPreviousPerformRequests(withTarget: Any, selector: Selector, object: Any?)\nCancels perform requests previously registered with perform(_:with:afterDelay:).\nRelated Documentation\nfunc invalidate()\nStops the timer from ever firing again and requests its removal from its run loop.\nfunc add(Timer, forMode: RunLoop.Mode)\nRegisters a given timer with a given input mode."
  },
  {
    "title": "perform(_:on:with:waitUntilDone:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1414476-perform",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\nthread\n\nThe thread on which to execute aSelector.\n\narg\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\nwait\n\nA Boolean that specifies whether the current thread blocks until after the specified selector is performed on the receiver on the specified thread. Specify true to block this thread; otherwise, specify false to have this method return immediately.\n\nIf the current thread and target thread are the same, and you specify true for this parameter, the selector is performed immediately on the current thread. If you specify false, this method queues the message on the thread’s run loop and returns, just like it does for other threads. The current thread must then dequeue and process the message when it has an opportunity to do so.\n\nDiscussion\n\nYou can use this method to deliver messages to other threads in your application. The message in this case is a method of the current object that you want to execute on the target thread.\n\nThis method queues the message on the run loop of the target thread using the default run loop modes—that is, the modes associated with the common constant. As part of its normal run loop processing, the target thread dequeues the message (assuming it is running in one of the default run loop modes) and invokes the desired method.\n\nYou cannot cancel messages queued using this method. If you want the option of canceling a message on the current thread, you must use either the perform(_:with:afterDelay:) or perform(_:with:afterDelay:inModes:) method.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after(_:_:_:) and related methods to get the behavior you want.\n\nSee Also\nSending Messages\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval)\nInvokes a method of the receiver on the current thread using the default mode after a delay.\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval, inModes: [RunLoop.Mode])\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the main thread using the default mode.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the main thread using the specified modes.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the specified thread using the specified modes.\nfunc performSelector(inBackground: Selector, with: Any?)\nInvokes a method of the receiver on a new background thread.\nclass func cancelPreviousPerformRequests(withTarget: Any)\nCancels perform requests previously registered with the perform(_:with:afterDelay:) instance method.\nclass func cancelPreviousPerformRequests(withTarget: Any, selector: Selector, object: Any?)\nCancels perform requests previously registered with perform(_:with:afterDelay:)."
  },
  {
    "title": "performSelector(onMainThread:with:waitUntilDone:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1414900-performselector",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\narg\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\nwait\n\nA Boolean that specifies whether the current thread blocks until after the specified selector is performed on the receiver on the main thread. Specify true to block this thread; otherwise, specify false to have this method return immediately.\n\nIf the current thread is also the main thread, and you specify true for this parameter, the message is delivered and processed immediately.\n\nDiscussion\n\nYou can use this method to deliver messages to the main thread of your application. The main thread encompasses the application’s main run loop, and is where the NSApplication object receives events. The message in this case is a method of the current object that you want to execute on the thread.\n\nThis method queues the message on the run loop of the main thread using the common run loop modes—that is, the modes associated with the common constant. As part of its normal run loop processing, the main thread dequeues the message (assuming it is running in one of the common run loop modes) and invokes the desired method. Multiple calls to this method from the same thread cause the corresponding selectors to be queued and performed in the same order in which the calls were made.\n\nYou cannot cancel messages queued using this method. If you want the option of canceling a message on the current thread, you must use either the perform(_:with:afterDelay:) or perform(_:with:afterDelay:inModes:) method.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after(_:_:_:) and related methods to get the behavior you want.\n\nSee Also\nSending Messages\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval)\nInvokes a method of the receiver on the current thread using the default mode after a delay.\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval, inModes: [RunLoop.Mode])\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the main thread using the specified modes.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the specified thread using the default mode.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the specified thread using the specified modes.\nfunc performSelector(inBackground: Selector, with: Any?)\nInvokes a method of the receiver on a new background thread.\nclass func cancelPreviousPerformRequests(withTarget: Any)\nCancels perform requests previously registered with the perform(_:with:afterDelay:) instance method.\nclass func cancelPreviousPerformRequests(withTarget: Any, selector: Selector, object: Any?)\nCancels perform requests previously registered with perform(_:with:afterDelay:)."
  },
  {
    "title": "perform(_:with:afterDelay:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1416176-perform",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method to invoke. The method should not have a significant return value and should take a single argument of type id, or no arguments.\n\nanArgument\n\nThe argument to pass to the method when it is invoked. Pass nil if the method does not take an argument.\n\ndelay\n\nThe minimum time before which the message is sent. Specifying a delay of 0 does not necessarily cause the selector to be performed immediately. The selector is still queued on the thread’s run loop and performed as soon as possible.\n\nDiscussion\n\nThis method sets up a timer to perform the aSelector message on the current thread’s run loop. The timer is configured to run in the default mode (NSDefaultRunLoopMode). When the timer fires, the thread attempts to dequeue the message from the run loop and perform the selector. It succeeds if the run loop is running and in the default mode; otherwise, the timer waits until the run loop is in the default mode.\n\nIf you want the message to be dequeued when the run loop is in a mode other than the default mode, use the perform(_:with:afterDelay:inModes:) method instead. If you are not sure whether the current thread is the main thread, you can use the performSelector(onMainThread:with:waitUntilDone:) or performSelector(onMainThread:with:waitUntilDone:modes:) method to guarantee that your selector executes on the main thread. To cancel a queued message, use the cancelPreviousPerformRequests(withTarget:) or cancelPreviousPerformRequests(withTarget:selector:object:) method.\n\nSpecial Considerations\n\nThis method registers with the runloop of its current context, and depends on that runloop being run on a regular basis to perform correctly. One common context where you might call this method and end up registering with a runloop that is not automatically run on a regular basis is when being invoked by a dispatch queue. If you need this type of functionality when running on a dispatch queue, you should use dispatch_after(_:_:_:) and related methods to get the behavior you want.\n\nSee Also\nSending Messages\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval, inModes: [RunLoop.Mode])\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the main thread using the default mode.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the main thread using the specified modes.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the specified thread using the default mode.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the specified thread using the specified modes.\nfunc performSelector(inBackground: Selector, with: Any?)\nInvokes a method of the receiver on a new background thread.\nclass func cancelPreviousPerformRequests(withTarget: Any)\nCancels perform requests previously registered with the perform(_:with:afterDelay:) instance method.\nclass func cancelPreviousPerformRequests(withTarget: Any, selector: Selector, object: Any?)\nCancels perform requests previously registered with perform(_:with:afterDelay:)."
  },
  {
    "title": "description() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418799-description",
    "html": "Return Value\n\nA string that represents the contents of the receiving class.\n\nDiscussion\n\nThe debugger’s print-object command invokes this method to produce a textual description of an object.\n\nNSObject's implementation of this method simply prints the name of the class.\n\nSee Also\nRelated Documentation\nvar description: String\nA textual representation of the receiver."
  },
  {
    "title": "method(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418863-method",
    "html": "Parameters\naSelector\n\nA Selector that identifies the method for which to return the implementation address. The selector must be a valid and non-NULL. If in doubt, use the responds(to:) method to check before passing the selector to method(for:).\n\nReturn Value\n\nThe address of the receiver’s implementation of the aSelector.\n\nDiscussion\n\nIf the receiver is an instance, aSelector should refer to an instance method; if the receiver is a class, it should refer to a class method.\n\nSee Also\nObtaining Information About Methods\nclass func instanceMethod(for: Selector!) -> IMP!\nLocates and returns the address of the implementation of the instance method identified by a given selector."
  },
  {
    "title": "conforms(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418893-conforms",
    "html": "Parameters\nprotocol\n\nA protocol.\n\nReturn Value\n\ntrue if the target conforms to protocol, otherwise false.\n\nDiscussion\n\nA class “conforms to” a protocol if it adopts the protocol or inherits from another class that adopts it. Classes adopt protocols by listing them within angle brackets after the interface declaration. For example, here MyClass adopts the (fictitious) AffiliationRequests and Normalization protocols:\n\n@interface MyClass : NSObject <AffiliationRequests, Normalization>\n\n\nA class also conforms to any protocols included in the protocols it adopts or inherits. Protocols incorporate other protocols in the same way classes adopt them. For example, here the AffiliationRequests protocol incorporates the Joining protocol:\n\n@protocol AffiliationRequests <Joining>\n\n\nIf a class adopts a protocol that incorporates another protocol, it must also implement all the methods in the incorporated protocol or inherit those methods from a class that adopts it.\n\nThis method determines conformance solely on the basis of the formal declarations in header files, as illustrated above. It doesn’t check to see whether the methods declared in the protocol are actually implemented—that’s the programmer’s responsibility.\n\nTo specify the protocol required as this method’s argument, use the @protocol() directive:\n\nBOOL canJoin = [MyClass conformsToProtocol:@protocol(Joining)];\n\n\nPerformance Considerations\n\nCalling this method in performance sensitive code can cause unwanted performance problems. conforms(to:) requires taking the Objective-C runtime lock and traversing the target’s class hierarchy to check for protocol conformance, which can take significant time.\n\nConsider the following alternatives in your code:\n\nUse responds(to:) to check for methods in the protocol instead, especially if you only need to check some of the protocol’s methods.\n\nIf you do need to use conforms(to:), cache the result whenever possible, rather than calling this method repeatedly."
  },
  {
    "title": "accessInstanceVariablesDirectly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1415307-accessinstancevariablesdirectly",
    "html": "Return Value\n\ntrue if the key-value coding methods should access the corresponding instance variable directly on finding no accessor method for a property, otherwise false.\n\nDiscussion\n\nThe default returns true. Subclasses can override it to return false, in which case the key-value coding methods won’t access instance variables."
  },
  {
    "title": "instancesRespond(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418555-instancesrespond",
    "html": "Parameters\naSelector\n\nA Selector.\n\nReturn Value\n\ntrue if instances of the receiver are capable of responding to aSelector messages, otherwise false.\n\nDiscussion\n\nIf aSelector messages are forwarded to other objects, instances of the class are able to receive those messages without error even though this method returns false.\n\nTo ask the class whether it, rather than its instances, can respond to a particular message, send to the class instead the NSObject protocol instance method responds(to:).\n\nSee Also\nRelated Documentation\n- forwardInvocation:\nOverridden by subclasses to forward messages to other objects."
  },
  {
    "title": "superclass() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418803-superclass",
    "html": "Return Value\n\nThe class object for the receiver’s superclass.\n\nSee Also\nIdentifying Classes\nclass func isSubclass(of: AnyClass) -> Bool\nReturns a Boolean value that indicates whether the receiving class is a subclass of, or identical to, a given class.\nRelated Documentation\n+ class\nReturns the class object.\nvar superclass: AnyClass?\nReturns the class object for the receiver’s superclass."
  },
  {
    "title": "mutableCopy() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418978-mutablecopy",
    "html": "Return Value\n\nThe object returned by the NSMutableCopying protocol method mutableCopy(with:), where the zone is nil.\n\nDiscussion\n\nThis is a convenience method for classes that adopt the NSMutableCopying protocol. An exception is raised if there is no implementation for mutableCopy(with:).\n\nSee Also\nCreating, Copying, and Deallocating Objects\ninit()\nImplemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.\nfunc copy() -> Any\nReturns the object returned by copy(with:)."
  },
  {
    "title": "copy() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418807-copy",
    "html": "Return Value\n\nThe object returned by the NSCopying protocol method copy(with:),.\n\nDiscussion\n\nThis is a convenience method for classes that adopt the NSCopying protocol. An exception is raised if there is no implementation for copy(with:).\n\nNSObject does not itself support the NSCopying protocol. Subclasses must support the protocol and implement the copy(with:) method. A subclass version of the copy(with:) method should send the message to super first, to incorporate its implementation, unless the subclass descends directly from NSObject.\n\nSee Also\nCreating, Copying, and Deallocating Objects\ninit()\nImplemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.\nfunc mutableCopy() -> Any\nReturns the object returned by mutableCopy(with:) where the zone is nil."
  },
  {
    "title": "initialize() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418639-initialize",
    "html": "Discussion\n\nThe runtime sends initialize() to each class in a program just before the class, or any class that inherits from it, is sent its first message from within the program. Superclasses receive this message before their subclasses.\n\nThe runtime sends the initialize() message to classes in a thread-safe manner. That is, initialize() is run by the first thread to send a message to a class, and any other thread that tries to send a message to that class will block until initialize() completes.\n\nThe superclass implementation may be called multiple times if subclasses do not implement initialize()—the runtime will call the inherited implementation—or if subclasses explicitly call [super initialize]. If you want to protect yourself from being run multiple times, you can structure your implementation along these lines:\n\n+ (void)initialize {\n  if (self == [ClassName self]) {\n    // ... do the initialization ...\n  }\n}\n\n\nBecause initialize() is called in a blocking manner, it’s important to limit method implementations to the minimum amount of work necessary possible. Specifically, any code that takes locks that might be required by other classes in their initialize() methods is liable to lead to deadlocks. Therefore, you should not rely on initialize() for complex initialization, and should instead limit it to straightforward, class local initialization.\n\nSpecial Considerations\n\ninitialize() is invoked only once per class. If you want to perform independent initialization for the class and for categories of the class, you should implement load() methods.\n\nSee Also\nInitializing a Class\nclass func load()\nInvoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading.\nRelated Documentation\n- class\nReturns the class object for the receiver’s class.\ninit()\nImplemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated."
  },
  {
    "title": "ObjCBool | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcbool",
    "html": "Topics\nType Aliases\ntypealias ObjCBool.BooleanLiteralType\nInitializers\ninit(Bool)\ninit(booleanLiteral: Bool)\nInstance Properties\nvar boolValue: Bool\nvar customMirror: Mirror\nvar description: String\nRelationships\nConforms To\nCustomReflectable\nCustomStringConvertible\nExpressibleByBooleanLiteral"
  },
  {
    "title": "accessibilityNotifiesWhenDestroyed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1534050-accessibilitynotifieswhendestroy",
    "html": "Discussion\n\nIn macOS 10.9 and later, a custom accessibility object that is an NSObject subclass can post accessibility notifications if it meets the following criteria:\n\nThe lifetime of the custom accessibility object must match the lifetime of the corresponding element in the app's UI.\n\nTypically, a custom accessibility object that acts as a proxy for an onscreen UI element gets autoreleased and deallocated immediately after the app responds to an accessibility request. Such an object can’t post accessibility notifications, because all registered observers get removed as soon as the object is deallocated. To correct this, an app must guarantee that a custom accessibility object remains allocated for as long as its corresponding UI element remains visible.\n\nThe object must post the uiElementDestroyed notification at the appropriate time. The appropriate time is most likely to be when the corresponding UI element is removed from the screen, but it can also be when the object itself is deallocated.\n\nThe object must implement accessibilityNotifiesWhenDestroyed and return true.\n\nSee Also\nAvailable Methods and Properties\nvar accessibilityFocusedUIElement: Any?\nThe deepest descendant of the accessibility hierarchy that has the focus.\nfunc accessibilityHitTest(NSPoint) -> Any?\nReturns the deepest descendant of the accessibility hierarchy that contains the specified point."
  },
  {
    "title": "WebScripting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/webscripting",
    "html": "Overview\n\nNot all properties and methods are exported to JavaScript by default. The object needs to implement the class methods described below to specify the properties and methods to export. Furthermore, a method is not exported if its return type and all its parameters are not Objective-C objects or scalars.\n\nMethod argument and return types that are Objective-C objects will be converted to appropriate types for the scripting environment. For example:\n\nnil is converted to undefined.\n\nNSNumber objects will be converted to JavaScript numbers.\n\nNSString objects will be converted to JavaScript strings.\n\nNSArray objects will be mapped to special read-only arrays.\n\nNSNull will be converted to JavaScript’s null.\n\nWebUndefined will be converted to undefined.\n\nWebScriptObject instances will be unwrapped for the scripting environment.\n\nInstances of all other classes will be wrapped before being passed to the script, and unwrapped as they return to Objective-C. Primitive types such as int and char are cast to a numeric in JavaScript.\n\nAccess to an object’s attributes, such as instance variables, is managed by key-value coding (KVC). The KVC methods setValue:forKey: and valueForKey: are used to access the attributes of an object from the scripting environment. Additionally, the scripting environment can attempt any number of attribute requests or method invocations that are not exported by your class. You can manage these requests by overriding the setValue:forUndefinedKey: and valueForUndefinedKey: methods from the key-value coding protocol.\n\nExceptions can be raised from the scripting environment by sending a throwException(_:) message to the relevant WebScriptObject instance. The method raising the exception must be within the scope of the script invocation.\n\nTopics\nGetting attributes\nclass func webScriptName(forKey: UnsafePointer<CChar>!) -> String!\nReturns the scripting environment name for an attribute specified by a key.\nclass func webScriptName(for: Selector!) -> String!\nReturns the scripting environment name for a selector.\nclass func isSelectorExcluded(fromWebScript: Selector!) -> Bool\nReturns whether a selector should be hidden from the scripting environment.\nclass func isKeyExcluded(fromWebScript: UnsafePointer<CChar>!) -> Bool\nReturns whether a key should be hidden from the scripting environment.\nInvoking methods\nfunc invokeDefaultMethod(withArguments: [Any]!) -> Any!\nExecutes when a script attempts to invoke a method on an exposed object directly.\nfunc invokeUndefinedMethod(fromWebScript: String!, withArguments: [Any]!) -> Any!\nHandles undefined method invocation from the scripting environment.\nFinalizing\nfunc finalizeForWebScript()\nPerforms cleanup when the scripting environment is reset.\nSee Also\nIncorporating Scripts (Legacy)\nclass WebScriptObject\nA WebScriptObject object is an Objective-C wrapper for a scripting object passed to your application from the scripting environment.\nDeprecated\nclass WebUndefined\nWebUndefined objects are simply used to represent the JavaScript “undefined” value in methods when bridging between JavaScript and Objective-C. For example, if you invoke a JavaScript function that returns the JavaScript “undefined” value, then a WebUndefined object is returned to the Objective-C calling context.\nDeprecated\nRelated Documentation\nWebKit Objective-C Programming Guide"
  },
  {
    "title": "newScriptingObject(of:forValueForKey:withContentsValue:properties:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418458-newscriptingobject",
    "html": "Parameters\nclass\n\nThe class of the scriptable object to be created.\n\nkey\n\nA key that identifies the relationship into which the new class object will be inserted.\n\ncontentsValue\n\nSpecifies the contents of the object to be created. This may be nil. (See also the Discussion section.)\n\nproperties\n\nThe properties to be set in the new object. (See also the Discussion section.)\n\nReturn Value\n\nThe new object. Returns nil if an error occurs.\n\nDiscussion\n\nYou can override the newScriptingObjectOfClass method to take more control when your application is sent a make command. This method is invoked on the prospective container of the new object. The contentsValue and properties are derived from the with contents and with properties parameters of the make command. The returned objects or objects are then inserted into the container using key-value coding.\n\nWhen this method is invoked by Cocoa, neither the contents value nor the properties will have yet been coerced using the NSScriptKeyValueCoding method coerceValue(_:forKey:). For sdef-declared scriptability, however, the types of the passed-in objects reliably match the relevant sdef declarations.\n\nThe default implementation of this method creates new scripting objects by sending alloc to a class and init to the resulting object. You override this method for situations where this is not sufficient, such as in Core Data applications, in which new objects must be initialized with [NSManagedObject initWithEntity:insertIntoManagedObjectContext:].\n\nSee Also\nScripting\nvar classCode: FourCharCode\nThe receiver's Apple event type code, as stored in the NSScriptClassDescription object for the object’s class.\nvar className: String\nA string containing the name of the class.\nfunc copyScriptingValue(Any, forKey: String, withProperties: [String : Any]) -> Any?\nCreates and returns one or more scripting objects to be inserted into the specified relationship by copying the passed-in value and setting the properties in the copied object or objects.\nvar scriptingProperties: [String : Any]?\nAn NSString-keyed dictionary of the receiver's scriptable properties.\nfunc scriptingValue(for: NSScriptObjectSpecifier) -> Any?\nGiven an object specifier, returns the specified object or objects in the receiving container."
  },
  {
    "title": "copyScriptingValue(_:forKey:withProperties:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1410291-copyscriptingvalue",
    "html": "Parameters\nvalue\n\nAn object or objects to be copied. The type must match the type of the property identified by key. (See also the Discussion section.)\n\nFor example, if the property is a to-many relationship, value will always be an array of objects to be copied, and this method must therefore return an array of objects.\n\nkey\n\nA key that identifies the relationship into which to insert the copied object or objects.\n\nproperties\n\nThe properties to be set in the copied object or objects. Derived from the \"with properties\" parameter of a duplicate command. (See also the Discussion section.)\n\nReturn Value\n\nThe copied object or objects. Returns nil if an error occurs.\n\nDiscussion\n\nYou can override the copyScriptingValue method to take more control when your application is sent a duplicate command. This method is invoked on the prospective container of the copied object or objects. The properties are derived from the with properties parameter of the duplicate command. The returned objects or objects are then inserted into the container using key-value coding.\n\nWhen this method is invoked by Cocoa, neither the value nor the properties will have yet been coerced using the NSScriptKeyValueCoding method coerceValue(_:forKey:). For sdef-declared scriptability, however, the types of the passed-in objects reliably match the relevant sdef declarations.\n\nThe default implementation of this method copies scripting objects by sending copyWithZone: to the object or objects specified by value. You override this method for situations where this is not sufficient, such as in Core Data applications, in which new objects must be initialized with [NSManagedObject initWithEntity:insertIntoManagedObjectContext:].\n\nSee Also\nScripting\nvar classCode: FourCharCode\nThe receiver's Apple event type code, as stored in the NSScriptClassDescription object for the object’s class.\nvar className: String\nA string containing the name of the class.\nfunc newScriptingObject(of: AnyClass, forValueForKey: String, withContentsValue: Any?, properties: [String : Any]) -> Any?\nCreates and returns an instance of a scriptable class, setting its contents and properties, for insertion into the relationship identified by the key.\nvar scriptingProperties: [String : Any]?\nAn NSString-keyed dictionary of the receiver's scriptable properties.\nfunc scriptingValue(for: NSScriptObjectSpecifier) -> Any?\nGiven an object specifier, returns the specified object or objects in the receiving container."
  },
  {
    "title": "className | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1411337-classname",
    "html": "See Also\nScripting\nvar classCode: FourCharCode\nThe receiver's Apple event type code, as stored in the NSScriptClassDescription object for the object’s class.\nfunc copyScriptingValue(Any, forKey: String, withProperties: [String : Any]) -> Any?\nCreates and returns one or more scripting objects to be inserted into the specified relationship by copying the passed-in value and setting the properties in the copied object or objects.\nfunc newScriptingObject(of: AnyClass, forValueForKey: String, withContentsValue: Any?, properties: [String : Any]) -> Any?\nCreates and returns an instance of a scriptable class, setting its contents and properties, for insertion into the relationship identified by the key.\nvar scriptingProperties: [String : Any]?\nAn NSString-keyed dictionary of the receiver's scriptable properties.\nfunc scriptingValue(for: NSScriptObjectSpecifier) -> Any?\nGiven an object specifier, returns the specified object or objects in the receiving container."
  },
  {
    "title": "cancelPreviousPerformRequests(withTarget:selector:object:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1410849-cancelpreviousperformrequests",
    "html": "Parameters\naTarget\n\nThe target for requests previously registered with the perform(_:with:afterDelay:) instance method\n\naSelector\n\nThe Selector for requests previously registered with the perform(_:with:afterDelay:) instance method.\n\nanArgument\n\nThe argument for requests previously registered with the perform(_:with:afterDelay:) instance method. Argument equality is determined using isEqual(_:), so the value need not be the same object that was passed originally. Pass nil to match a request for nil that was originally passed as the argument.\n\nDiscussion\n\nAll perform requests are canceled that have the same target as aTarget, argument as anArgument, and selector as aSelector. This method removes perform requests only in the current run loop, not all run loops.\n\nSee Also\nSending Messages\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval)\nInvokes a method of the receiver on the current thread using the default mode after a delay.\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval, inModes: [RunLoop.Mode])\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the main thread using the default mode.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the main thread using the specified modes.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the specified thread using the default mode.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the specified thread using the specified modes.\nfunc performSelector(inBackground: Selector, with: Any?)\nInvokes a method of the receiver on a new background thread.\nclass func cancelPreviousPerformRequests(withTarget: Any)\nCancels perform requests previously registered with the perform(_:with:afterDelay:) instance method."
  },
  {
    "title": "cancelPreviousPerformRequests(withTarget:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1417611-cancelpreviousperformrequests",
    "html": "Parameters\naTarget\n\nThe target for requests previously registered with the perform(_:with:afterDelay:) instance method.\n\nDiscussion\n\nAll perform requests having the same target aTarget are canceled. This method removes perform requests only in the current run loop, not all run loops.\n\nSee Also\nSending Messages\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval)\nInvokes a method of the receiver on the current thread using the default mode after a delay.\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval, inModes: [RunLoop.Mode])\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the main thread using the default mode.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the main thread using the specified modes.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the specified thread using the default mode.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the specified thread using the specified modes.\nfunc performSelector(inBackground: Selector, with: Any?)\nInvokes a method of the receiver on a new background thread.\nclass func cancelPreviousPerformRequests(withTarget: Any, selector: Selector, object: Any?)\nCancels perform requests previously registered with perform(_:with:afterDelay:)."
  },
  {
    "title": "forwardingTarget(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject/1418855-forwardingtarget",
    "html": "Parameters\naSelector\n\nA Selector for a method that the receiver does not implement.\n\nReturn Value\n\nThe object to which unrecognized messages should first be directed.\n\nDiscussion\n\nIf an object implements (or inherits) this method, and returns a non-nil (and non-self) result, that returned object is used as the new receiver object and the message dispatch resumes to that new object. (Obviously if you return self from this method, the code would just fall into an infinite loop.)\n\nIf you implement this method in a non-root class, if your class has nothing to return for the given selector then you should return the result of invoking super’s implementation.\n\nThis method gives an object a chance to redirect an unknown message sent to it before the much more expensive forwardInvocation: machinery takes over. This is useful when you simply want to redirect messages to another object and can be an order of magnitude faster than regular forwarding. It is not useful where the goal of the forwarding is to capture the NSInvocation, or manipulate the arguments or return value during the forwarding."
  },
  {
    "title": "ObjCClassList | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcclasslist",
    "html": "Topics\nType Aliases\ntypealias ObjCClassList.Element\nInstance Properties\nvar lazy: LazySequence<ObjCClassList>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((AnyClass) -> Bool) -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((AnyClass) -> ElementOfResult?) -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc contains(where: (AnyClass) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (AnyClass) -> Bool) -> DropWhileSequence<ObjCClassList>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<ObjCClassList>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [AnyClass]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (AnyClass, OtherSequence.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<ObjCClassList>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter((AnyClass) -> Bool) -> [AnyClass]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (AnyClass) -> Bool) -> AnyClass?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((AnyClass) -> SegmentOfResult) -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc flatMap<ElementOfResult>((AnyClass) -> ElementOfResult?) -> [ElementOfResult]\nDeprecated\nfunc forEach((AnyClass) -> Void)\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (AnyClass, AnyClass) -> Bool) -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc makeIterator() -> ObjCClassList.Iterator\nfunc map<T>((AnyClass) -> T) -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max(by: (AnyClass, AnyClass) -> Bool) -> AnyClass?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min(by: (AnyClass, AnyClass) -> Bool) -> AnyClass?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<ObjCClassList>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (AnyClass) -> Bool) -> [AnyClass]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, AnyClass) -> Result) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, AnyClass) -> ()) -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [AnyClass]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [AnyClass]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [AnyClass]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted(by: (AnyClass, AnyClass) -> Bool) -> [AnyClass]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (AnyClass) -> Bool) -> [ArraySlice<AnyClass>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (AnyClass, PossiblePrefix.Element) -> Bool) -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [AnyClass]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<AnyClass>) -> R) -> R?\nExecutes a closure on the sequence’s contiguous storage.\nClasses\nclass ObjCClassList.Iterator\nRelationships\nConforms To\nSequence"
  },
  {
    "title": "objc_AssociationPolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objc_associationpolicy",
    "html": "Topics\nEnumeration Cases\ncase OBJC_ASSOCIATION_ASSIGN\nSpecifies an unsafe unretained reference to the associated object.\ncase OBJC_ASSOCIATION_COPY\nSpecifies that the associated object is copied, and that the association is made atomically.\ncase OBJC_ASSOCIATION_COPY_NONATOMIC\nSpecifies that the associated object is copied, and that the association is not made atomically.\ncase OBJC_ASSOCIATION_RETAIN\nSpecifies a strong reference to the associated object, and that the association is made atomically.\ncase OBJC_ASSOCIATION_RETAIN_NONATOMIC\nSpecifies a strong reference to the associated object, and that the association is not made atomically."
  },
  {
    "title": "ObjCEnumerationImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objcenumerationimage",
    "html": "Topics\nEnumeration Cases\ncase dynamicClasses\ncase image(UnsafeRawPointer)\ncase machHeader(UnsafeRawPointer)"
  },
  {
    "title": "Objective-C Functions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_functions",
    "html": "Topics\nFunctions\nfunc autoreleasepool<Result>(invoking: () -> Result) -> Result\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_getImageName(AnyClass?) -> UnsafePointer<CChar>?\nReturns the name of the dynamic library a class originated from.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc imp_getBlock(IMP) -> Any?\nReturns the block associated with an IMP that was created using imp_implementationWithBlock(_:).\nfunc imp_implementationWithBlock(Any) -> IMP\nCreates a pointer to a function that calls the specified block when the method is called.\nfunc imp_removeBlock(IMP) -> Bool\nDisassociates a block from an IMP that was created using imp_implementationWithBlock(_:), and releases the copy of the block that was created.\nfunc ivar_getName(Ivar) -> UnsafePointer<CChar>?\nReturns the name of an instance variable.\nfunc ivar_getOffset(Ivar) -> Int\nReturns the offset of an instance variable.\nfunc ivar_getTypeEncoding(Ivar) -> UnsafePointer<CChar>?\nReturns the type string of an instance variable.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc objc_addExceptionHandler(objc_exception_handler, UnsafeMutableRawPointer?) -> UInt\nfunc objc_allocateClassPair(AnyClass?, UnsafePointer<CChar>, Int) -> AnyClass?\nCreates a new class and metaclass.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_collectableZone() -> objc_zone_t!\nDeprecated\nfunc objc_copyClassList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<AnyClass>?\nCreates and returns a list of pointers to all registered class definitions.\nfunc objc_copyClassNamesForImage(UnsafePointer<CChar>, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<UnsafePointer<CChar>>?\nReturns the names of all the classes within a specified library or framework.\nfunc objc_copyImageNames(UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<UnsafePointer<CChar>>\nReturns the names of all the loaded Objective-C frameworks and dynamic libraries.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_disposeClassPair(AnyClass)\nDestroys a class and its associated metaclass.\nfunc objc_duplicateClass(AnyClass, UnsafePointer<CChar>, Int) -> AnyClass\nUsed by Foundation's Key-Value Observing.\nfunc objc_enumerationMutation(Any)\nInserted by the compiler when a mutation is detected during a foreach iteration.\nfunc objc_getAssociatedObject(Any, UnsafeRawPointer) -> Any?\nReturns the value associated with a given object for a given key.\nfunc objc_getClass(UnsafePointer<CChar>) -> Any!\nReturns the class definition of a specified class.\nfunc objc_getClassList(AutoreleasingUnsafeMutablePointer<AnyClass>?, Int32) -> Int32\nObtains the list of registered class definitions.\nfunc objc_getMetaClass(UnsafePointer<CChar>) -> Any!\nReturns the metaclass definition of a specified class.\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_getRequiredClass(UnsafePointer<CChar>) -> AnyClass\nReturns the class definition of a specified class.\nfunc objc_loadWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>) -> Any?\nLoads the object referenced by a weak pointer and returns it.\nfunc objc_lookUpClass(UnsafePointer<CChar>) -> AnyClass?\nReturns the class definition of a specified class.\nfunc objc_registerClassPair(AnyClass)\nRegisters a class that was allocated using objc_allocateClassPair(_:_:_:).\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc objc_removeAssociatedObjects(Any)\nRemoves all associations for a given object.\nfunc objc_removeExceptionHandler(UInt)\nfunc objc_setAssociatedObject(Any, UnsafeRawPointer, Any?, objc_AssociationPolicy)\nSets an associated value for a given object using a given key and association policy.\nfunc objc_setEnumerationMutationHandler(((Any) -> Void)?)\nSets the current mutation handler.\nfunc objc_storeWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>, Any?) -> Any?\nStores a new value in a __weak variable.\nfunc object_getClass(Any?) -> AnyClass?\nReturns the class of an object.\nfunc object_getClassName(Any?) -> UnsafePointer<CChar>\nReturns the class name of a given object.\nfunc object_getIvar(Any?, Ivar) -> Any?\nReads the value of an instance variable in an object.\nfunc object_isClass(Any?) -> Bool\nfunc object_setClass(Any?, AnyClass) -> AnyClass?\nSets the class of an object.\nfunc object_setIvar(Any?, Ivar, Any?)\nSets the value of an instance variable in an object.\nfunc object_setIvarWithStrongDefault(Any?, Ivar, Any?)\nfunc property_copyAttributeList(objc_property_t, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_attribute_t>?\nReturns an array of property attributes for a given property.\nfunc property_copyAttributeValue(objc_property_t, UnsafePointer<CChar>) -> UnsafeMutablePointer<CChar>?\nReturns the value of a property attribute given the attribute name.\nfunc property_getAttributes(objc_property_t) -> UnsafePointer<CChar>?\nReturns the attribute string of a property.\nfunc property_getName(objc_property_t) -> UnsafePointer<CChar>\nReturns the name of a property.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_copyPropertyList2(Protocol, UnsafeMutablePointer<UInt32>?, Bool, Bool) -> UnsafeMutablePointer<objc_property_t>?\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc sel_getName(Selector) -> UnsafePointer<CChar>\nReturns the name of the method specified by a given selector.\nfunc sel_getUid(UnsafePointer<CChar>) -> Selector\nRegisters a method name with the Objective-C runtime system.\nfunc sel_isEqual(Selector, Selector) -> Bool\nReturns a Boolean value that indicates whether two selectors are equal.\nfunc sel_registerName(UnsafePointer<CChar>) -> Selector\nRegisters a method with the Objective-C runtime system, maps the method name to a selector, and returns the selector value.\nfunc class_createInstance(AnyClass?, Int) -> Any?\nCreates an instance of a class, allocating memory for the class in the default malloc memory zone.\nfunc objc_addLoadImageFunc(objc_func_loadImage)\nfunc objc_enumerateClasses(fromImage: ObjCEnumerationImage, matchingNamePrefix: String?, conformingTo: Protocol?, subclassing: AnyClass?) -> ObjCClassList\nfunc objc_setHook_getClass(objc_hook_getClass, UnsafeMutablePointer<objc_hook_getClass?>)\nfunc objc_setHook_getImageName(objc_hook_getImageName, UnsafeMutablePointer<objc_hook_getImageName?>)\nfunc objc_setHook_lazyClassNamer(objc_hook_lazyClassNamer, UnsafeMutablePointer<objc_hook_lazyClassNamer>)"
  },
  {
    "title": "Objective-C Structures | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_structures",
    "html": "Topics\nStructures\nstruct NSZone\nstruct NXHashTablePrototype\nstruct ObjCBool\nstruct Selector\nstruct objc_method_description\nDefines an Objective-C method.\nstruct objc_object\nA pointer to an instance of a class.\nstruct objc_property_attribute_t\nDefines a property attribute.\nstruct objc_super\nSpecifies the superclass of an instance."
  },
  {
    "title": "Objective-C Data Types | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_data_types",
    "html": "Topics\nData Types\ntypealias Category\nAn opaque type that represents a category.\ntypealias Ivar\nAn opaque type that represents an instance variable.\ntypealias Method\nAn opaque type that represents a method in a class definition.\ntypealias NSInteger\nDescribes an integer.\nstruct objc_method_description\nDefines an Objective-C method.\ntypealias objc_property_t\nAn opaque type that represents an Objective-C declared property.\nstruct objc_super\nSpecifies the superclass of an instance.\ntypealias objc_func_loadImage\ntypealias objc_hook_getClass\ntypealias objc_hook_getImageName\ntypealias objc_hook_lazyClassNamer\ntypealias objc_zone_t"
  },
  {
    "title": "Objective-C Runtime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/objective-c_runtime",
    "html": "Overview\n\nThe Objective-C runtime is a runtime library that provides support for the dynamic properties of the Objective-C language, and as such is linked to by all Objective-C apps. Objective-C runtime library support functions are implemented in the shared library found at /usr/lib/libobjc.A.dylib.\n\nYou typically don't need to use the Objective-C runtime library directly when programming in Objective-C. This API is useful primarily for developing bridge layers between Objective-C and other languages, or for low-level debugging.\n\nThe macOS implementation of the Objective-C runtime library is unique to the Mac. For other platforms, the GNU Compiler Collection provides a different implementation with a similar API. This document covers only the macOS implementation.\n\nThe low-level Objective-C runtime API is significantly updated in OS X version 10.5. Many functions and all existing data structures are replaced with new functions. The old functions and structures are deprecated in 32-bit and absent in 64-bit mode. The API constrains several values to 32-bit ints even in 64-bit mode—class count, protocol count, methods per class, ivars per class, arguments per method, sizeof(all arguments) per method, and class version number. In addition, the new Objective-C ABI (not described here) further constrains sizeof(anInstance) to 32 bits, and three other values to 24 bits—methods per class, ivars per class, and sizeof(a single ivar). Finally, the obsolete NXHashTable and NXMapTable are limited to 4 billion items.\n\nString encoding\n\nAll char * in the runtime API should be considered to have UTF-8 encoding.\n\n“Deprecated” below means “deprecated in OS X version 10.5 for 32-bit code, and disallowed for 64-bit code.”\n\nWho Should Read This Document\n\nThe document is intended for readers who might be interested in learning about the Objective-C runtime.\n\nBecause this isn’t a document about C, it assumes some prior acquaintance with that language. However, it doesn’t have to be an extensive acquaintance.\n\nTopics\nWorking with Classes\nfunc class_getName(AnyClass?) -> UnsafePointer<CChar>\nReturns the name of a class.\nfunc class_getSuperclass(AnyClass?) -> AnyClass?\nReturns the superclass of a class.\nfunc class_setSuperclass(AnyClass, AnyClass) -> AnyClass\nSets the superclass of a given class.\nDeprecated\nfunc class_isMetaClass(AnyClass?) -> Bool\nReturns a Boolean value that indicates whether a class object is a metaclass.\nfunc class_getInstanceSize(AnyClass?) -> Int\nReturns the size of instances of a class.\nfunc class_getInstanceVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified instance variable of a given class.\nfunc class_getClassVariable(AnyClass?, UnsafePointer<CChar>) -> Ivar?\nReturns the Ivar for a specified class variable of a given class.\nfunc class_addIvar(AnyClass?, UnsafePointer<CChar>, Int, UInt8, UnsafePointer<CChar>?) -> Bool\nAdds a new instance variable to a class.\nfunc class_copyIvarList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Ivar>?\nDescribes the instance variables declared by a class.\nfunc class_getIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the Ivar layout for a given class.\nfunc class_setIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the Ivar layout for a given class.\nfunc class_getWeakIvarLayout(AnyClass?) -> UnsafePointer<UInt8>?\nReturns a description of the layout of weak Ivars for a given class.\nfunc class_setWeakIvarLayout(AnyClass?, UnsafePointer<UInt8>?)\nSets the layout for weak Ivars for a given class.\nfunc class_getProperty(AnyClass?, UnsafePointer<CChar>) -> objc_property_t?\nReturns a property with a given name of a given class.\nfunc class_copyPropertyList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nDescribes the properties declared by a class.\nfunc class_addMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> Bool\nAdds a new method to a class with a given name and implementation.\nfunc class_getInstanceMethod(AnyClass?, Selector) -> Method?\nReturns a specified instance method for a given class.\nfunc class_getClassMethod(AnyClass?, Selector) -> Method?\nReturns a pointer to the data structure describing a given class method for a given class.\nfunc class_copyMethodList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<Method>?\nDescribes the instance methods implemented by a class.\nfunc class_replaceMethod(AnyClass?, Selector, IMP, UnsafePointer<CChar>?) -> IMP?\nReplaces the implementation of a method for a given class.\nfunc class_getMethodImplementation(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_getMethodImplementation_stret(AnyClass?, Selector) -> IMP?\nReturns the function pointer that would be called if a particular message were sent to an instance of a class.\nfunc class_respondsToSelector(AnyClass?, Selector) -> Bool\nReturns a Boolean value that indicates whether instances of a class respond to a particular selector.\nfunc class_addProtocol(AnyClass?, Protocol) -> Bool\nAdds a protocol to a class.\nfunc class_addProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32) -> Bool\nAdds a property to a class.\nfunc class_replaceProperty(AnyClass?, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32)\nReplace a property of a class.\nfunc class_conformsToProtocol(AnyClass?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether a class conforms to a given protocol.\nfunc class_copyProtocolList(AnyClass?, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nDescribes the protocols adopted by a class.\nfunc class_getVersion(AnyClass?) -> Int32\nReturns the version number of a class definition.\nfunc class_setVersion(AnyClass?, Int32)\nSets the version number of a class definition.\nAdding Classes\nfunc objc_allocateClassPair(AnyClass?, UnsafePointer<CChar>, Int) -> AnyClass?\nCreates a new class and metaclass.\nfunc objc_disposeClassPair(AnyClass)\nDestroys a class and its associated metaclass.\nfunc objc_registerClassPair(AnyClass)\nRegisters a class that was allocated using objc_allocateClassPair(_:_:_:).\nfunc objc_duplicateClass(AnyClass, UnsafePointer<CChar>, Int) -> AnyClass\nUsed by Foundation's Key-Value Observing.\nWorking with Instances\nfunc object_getIndexedIvars(Any?) -> UnsafeMutableRawPointer?\nReturns a pointer to any extra bytes allocated with a instance given object.\nfunc object_getIvar(Any?, Ivar) -> Any?\nReads the value of an instance variable in an object.\nfunc object_setIvar(Any?, Ivar, Any?)\nSets the value of an instance variable in an object.\nfunc object_getClassName(Any?) -> UnsafePointer<CChar>\nReturns the class name of a given object.\nfunc object_getClass(Any?) -> AnyClass?\nReturns the class of an object.\nfunc object_setClass(Any?, AnyClass) -> AnyClass?\nSets the class of an object.\nObtaining Class Definitions\nfunc objc_getClassList(AutoreleasingUnsafeMutablePointer<AnyClass>?, Int32) -> Int32\nObtains the list of registered class definitions.\nfunc objc_copyClassList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<AnyClass>?\nCreates and returns a list of pointers to all registered class definitions.\nfunc objc_lookUpClass(UnsafePointer<CChar>) -> AnyClass?\nReturns the class definition of a specified class.\nfunc objc_getClass(UnsafePointer<CChar>) -> Any!\nReturns the class definition of a specified class.\nfunc objc_getRequiredClass(UnsafePointer<CChar>) -> AnyClass\nReturns the class definition of a specified class.\nfunc objc_getMetaClass(UnsafePointer<CChar>) -> Any!\nReturns the metaclass definition of a specified class.\nWorking with Instance Variables\nfunc ivar_getName(Ivar) -> UnsafePointer<CChar>?\nReturns the name of an instance variable.\nfunc ivar_getTypeEncoding(Ivar) -> UnsafePointer<CChar>?\nReturns the type string of an instance variable.\nfunc ivar_getOffset(Ivar) -> Int\nReturns the offset of an instance variable.\nAssociative References\nfunc objc_setAssociatedObject(Any, UnsafeRawPointer, Any?, objc_AssociationPolicy)\nSets an associated value for a given object using a given key and association policy.\nfunc objc_getAssociatedObject(Any, UnsafeRawPointer) -> Any?\nReturns the value associated with a given object for a given key.\nfunc objc_removeAssociatedObjects(Any)\nRemoves all associations for a given object.\nWorking with Methods\nfunc method_getName(Method) -> Selector\nReturns the name of a method.\nfunc method_getImplementation(Method) -> IMP\nReturns the implementation of a method.\nfunc method_getTypeEncoding(Method) -> UnsafePointer<CChar>?\nReturns a string describing a method's parameter and return types.\nfunc method_copyReturnType(Method) -> UnsafeMutablePointer<CChar>\nReturns a string describing a method's return type.\nfunc method_copyArgumentType(Method, UInt32) -> UnsafeMutablePointer<CChar>?\nReturns a string describing a single parameter type of a method.\nfunc method_getReturnType(Method, UnsafeMutablePointer<CChar>, Int)\nReturns by reference a string describing a method's return type.\nfunc method_getNumberOfArguments(Method) -> UInt32\nReturns the number of arguments accepted by a method.\nfunc method_getArgumentType(Method, UInt32, UnsafeMutablePointer<CChar>?, Int)\nReturns by reference a string describing a single parameter type of a method.\nfunc method_getDescription(Method) -> UnsafeMutablePointer<objc_method_description>\nReturns a method description structure for a specified method.\nfunc method_setImplementation(Method, IMP) -> IMP\nSets the implementation of a method.\nfunc method_exchangeImplementations(Method, Method)\nExchanges the implementations of two methods.\nWorking with Libraries\nfunc objc_copyImageNames(UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<UnsafePointer<CChar>>\nReturns the names of all the loaded Objective-C frameworks and dynamic libraries.\nfunc class_getImageName(AnyClass?) -> UnsafePointer<CChar>?\nReturns the name of the dynamic library a class originated from.\nfunc objc_copyClassNamesForImage(UnsafePointer<CChar>, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<UnsafePointer<CChar>>?\nReturns the names of all the classes within a specified library or framework.\nWorking with Selectors\nfunc sel_getName(Selector) -> UnsafePointer<CChar>\nReturns the name of the method specified by a given selector.\nfunc sel_registerName(UnsafePointer<CChar>) -> Selector\nRegisters a method with the Objective-C runtime system, maps the method name to a selector, and returns the selector value.\nfunc sel_getUid(UnsafePointer<CChar>) -> Selector\nRegisters a method name with the Objective-C runtime system.\nfunc sel_isEqual(Selector, Selector) -> Bool\nReturns a Boolean value that indicates whether two selectors are equal.\nWorking with Protocols\nfunc objc_getProtocol(UnsafePointer<CChar>) -> Protocol?\nReturns a specified protocol.\nfunc objc_copyProtocolList(UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of all the protocols known to the runtime.\nfunc objc_allocateProtocol(UnsafePointer<CChar>) -> Protocol?\nCreates a new protocol instance.\nfunc objc_registerProtocol(Protocol)\nRegisters a newly created protocol with the Objective-C runtime.\nfunc protocol_addMethodDescription(Protocol, Selector, UnsafePointer<CChar>?, Bool, Bool)\nAdds a method to a protocol.\nfunc protocol_addProtocol(Protocol, Protocol)\nAdds a registered protocol to another protocol that is under construction.\nfunc protocol_addProperty(Protocol, UnsafePointer<CChar>, UnsafePointer<objc_property_attribute_t>?, UInt32, Bool, Bool)\nAdds a property to a protocol that is under construction.\nfunc protocol_getName(Protocol) -> UnsafePointer<CChar>\nReturns a the name of a protocol.\nfunc protocol_isEqual(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether two protocols are equal.\nfunc protocol_copyMethodDescriptionList(Protocol, Bool, Bool, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_method_description>?\nReturns an array of method descriptions of methods meeting a given specification for a given protocol.\nfunc protocol_getMethodDescription(Protocol, Selector, Bool, Bool) -> objc_method_description\nReturns a method description structure for a specified method of a given protocol.\nfunc protocol_copyPropertyList(Protocol, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_t>?\nReturns an array of the properties declared by a protocol.\nfunc protocol_getProperty(Protocol, UnsafePointer<CChar>, Bool, Bool) -> objc_property_t?\nReturns the specified property of a given protocol.\nfunc protocol_copyProtocolList(Protocol, UnsafeMutablePointer<UInt32>?) -> AutoreleasingUnsafeMutablePointer<Protocol>?\nReturns an array of the protocols adopted by a protocol.\nfunc protocol_conformsToProtocol(Protocol?, Protocol?) -> Bool\nReturns a Boolean value that indicates whether one protocol conforms to another protocol.\nWorking with Properties\nfunc property_getName(objc_property_t) -> UnsafePointer<CChar>\nReturns the name of a property.\nfunc property_getAttributes(objc_property_t) -> UnsafePointer<CChar>?\nReturns the attribute string of a property.\nfunc property_copyAttributeValue(objc_property_t, UnsafePointer<CChar>) -> UnsafeMutablePointer<CChar>?\nReturns the value of a property attribute given the attribute name.\nfunc property_copyAttributeList(objc_property_t, UnsafeMutablePointer<UInt32>?) -> UnsafeMutablePointer<objc_property_attribute_t>?\nReturns an array of property attributes for a given property.\nUsing Objective-C Language Features\nfunc objc_enumerationMutation(Any)\nInserted by the compiler when a mutation is detected during a foreach iteration.\nfunc objc_setEnumerationMutationHandler(((Any) -> Void)?)\nSets the current mutation handler.\nfunc imp_implementationWithBlock(Any) -> IMP\nCreates a pointer to a function that calls the specified block when the method is called.\nfunc imp_getBlock(IMP) -> Any?\nReturns the block associated with an IMP that was created using imp_implementationWithBlock(_:).\nfunc imp_removeBlock(IMP) -> Bool\nDisassociates a block from an IMP that was created using imp_implementationWithBlock(_:), and releases the copy of the block that was created.\nfunc objc_loadWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>) -> Any?\nLoads the object referenced by a weak pointer and returns it.\nfunc objc_storeWeak(AutoreleasingUnsafeMutablePointer<AnyObject?>, Any?) -> Any?\nStores a new value in a __weak variable.\nClass-Definition Data Structures\ntypealias Method\nAn opaque type that represents a method in a class definition.\ntypealias Ivar\nAn opaque type that represents an instance variable.\ntypealias Category\nAn opaque type that represents a category.\ntypealias objc_property_t\nAn opaque type that represents an Objective-C declared property.\nstruct objc_method_description\nDefines an Objective-C method.\nstruct objc_property_attribute_t\nDefines a property attribute.\nInstance Data Types\n\nThese are the data types that represent objects, classes, and superclasses.\n\nobjc_object pointer to an instance of a class.\n\nobjc_object represents an instance of a class.\n\nobjc_super specifies the superclass of an instance.\n\nstruct objc_object\nA pointer to an instance of a class.\nstruct objc_super\nSpecifies the superclass of an instance.\nConstants\nDispatch Function Prototypes\nThis macro indicates whether dispatch functions must be cast to an appropriate function pointer type.\nSee Also\nRelated Documentation\nObjective-C Runtime Programming Guide"
  },
  {
    "title": "NSObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec/nsobject",
    "html": "Topics\nInitializing a Class\nclass func initialize()\nInitializes the class before it receives its first message.\nclass func load()\nInvoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading.\nCreating, Copying, and Deallocating Objects\ninit()\nImplemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.\nfunc copy() -> Any\nReturns the object returned by copy(with:).\nfunc mutableCopy() -> Any\nReturns the object returned by mutableCopy(with:) where the zone is nil.\nIdentifying Classes\nclass func superclass() -> AnyClass?\nReturns the class object for the receiver’s superclass.\nclass func isSubclass(of: AnyClass) -> Bool\nReturns a Boolean value that indicates whether the receiving class is a subclass of, or identical to, a given class.\nTesting Class Functionality\nclass func instancesRespond(to: Selector!) -> Bool\nReturns a Boolean value that indicates whether instances of the receiver are capable of responding to a given selector.\nTesting Protocol Conformance\nclass func conforms(to: Protocol) -> Bool\nReturns a Boolean value that indicates whether the target conforms to a given protocol.\nObtaining Information About Methods\nfunc method(for: Selector!) -> IMP!\nLocates and returns the address of the receiver’s implementation of a method so it can be called as a function.\nclass func instanceMethod(for: Selector!) -> IMP!\nLocates and returns the address of the implementation of the instance method identified by a given selector.\nDescribing Objects\nclass func description() -> String\nReturns a string that represents the contents of the receiving class.\nSupporting Discardable Content\nvar autoContentAccessingProxy: Any\nA proxy for the receiving object\nSending Messages\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval)\nInvokes a method of the receiver on the current thread using the default mode after a delay.\nfunc perform(Selector, with: Any?, afterDelay: TimeInterval, inModes: [RunLoop.Mode])\nInvokes a method of the receiver on the current thread using the specified modes after a delay.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the main thread using the default mode.\nfunc performSelector(onMainThread: Selector, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the main thread using the specified modes.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool)\nInvokes a method of the receiver on the specified thread using the default mode.\nfunc perform(Selector, on: Thread, with: Any?, waitUntilDone: Bool, modes: [String]?)\nInvokes a method of the receiver on the specified thread using the specified modes.\nfunc performSelector(inBackground: Selector, with: Any?)\nInvokes a method of the receiver on a new background thread.\nclass func cancelPreviousPerformRequests(withTarget: Any)\nCancels perform requests previously registered with the perform(_:with:afterDelay:) instance method.\nclass func cancelPreviousPerformRequests(withTarget: Any, selector: Selector, object: Any?)\nCancels perform requests previously registered with perform(_:with:afterDelay:).\nForwarding Messages\nfunc forwardingTarget(for: Selector!) -> Any?\nReturns the object to which unrecognized messages should first be directed.\nDynamically Resolving Methods\nclass func resolveClassMethod(Selector!) -> Bool\nDynamically provides an implementation for a given selector for a class method.\nclass func resolveInstanceMethod(Selector!) -> Bool\nDynamically provides an implementation for a given selector for an instance method.\nHandling Errors\nfunc doesNotRecognizeSelector(Selector!)\nHandles messages the receiver doesn’t recognize.\nArchiving\nfunc awakeAfter(using: NSCoder) -> Any?\nOverridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.\nvar classForArchiver: AnyClass?\nThe class to substitute for the receiver's own class during archiving.\nvar classForCoder: AnyClass\nOverridden by subclasses to substitute a class other than its own during coding.\nvar classForKeyedArchiver: AnyClass?\nSubclasses to substitute a new class for instances during keyed archiving.\nclass func classFallbacksForKeyedArchiver() -> [String]\nOverridden to return the names of classes that can be used to decode objects if their class is unavailable.\nclass func classForKeyedUnarchiver() -> AnyClass\nOverridden by subclasses to substitute a new class during keyed unarchiving.\nfunc replacementObject(for: NSArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during archiving.\nDeprecated\nfunc replacementObject(for: NSCoder) -> Any?\nOverridden by subclasses to substitute another object for itself during encoding.\nfunc replacementObject(for: NSKeyedArchiver) -> Any?\nOverridden by subclasses to substitute another object for itself during keyed archiving.\nclass func setVersion(Int)\nSets the receiver's version number.\nclass func version() -> Int\nReturns the version number assigned to the class.\nWorking with Class Descriptions\nvar attributeKeys: [String]\nAn array of NSString objects containing the names of immutable values that instances of the receiver's class contain.\nvar classDescription: NSClassDescription\nAn object containing information about the attributes and relationships of the receiver’s class.\nfunc inverse(forRelationshipKey: String) -> String?\nFor a given key that defines the name of the relationship from the receiver’s class to another class, returns the name of the relationship from the other class to the receiver’s class.\nvar toManyRelationshipKeys: [String]\nAn array containing the keys for the to-many relationship properties of the receiver.\nvar toOneRelationshipKeys: [String]\nThe keys for the to-one relationship properties of the receiver, if any.\nImproving Accessibility\nUIAccessibility\nA set of methods that provides accessibility information about views and controls in an app’s user interface.\nUIAccessibilityContainer\nProvide a set of methods that view subclasses use to make subcomponents accessible as separate elements.\nUIAccessibilityAction\nA set of methods that accessibility elements can use to support specific actions.\nUIAccessibilityFocus\nAn informal protocol that provides a way to determine whether an assistive app, such as VoiceOver, has focus on an accessible element.\nUIAccessibilityDragging\nA pair of properties to allow you to fine-tune how drags and drops are exposed to assistive technologies.\nScripting\nvar classCode: FourCharCode\nThe receiver's Apple event type code, as stored in the NSScriptClassDescription object for the object’s class.\nvar className: String\nA string containing the name of the class.\nfunc copyScriptingValue(Any, forKey: String, withProperties: [String : Any]) -> Any?\nCreates and returns one or more scripting objects to be inserted into the specified relationship by copying the passed-in value and setting the properties in the copied object or objects.\nfunc newScriptingObject(of: AnyClass, forValueForKey: String, withContentsValue: Any?, properties: [String : Any]) -> Any?\nCreates and returns an instance of a scriptable class, setting its contents and properties, for insertion into the relationship identified by the key.\nvar scriptingProperties: [String : Any]?\nAn NSString-keyed dictionary of the receiver's scriptable properties.\nfunc scriptingValue(for: NSScriptObjectSpecifier) -> Any?\nGiven an object specifier, returns the specified object or objects in the receiving container.\nIntegrating with Combine\nstruct NSObject.KeyValueObservingPublisher\nA Combine publisher that produces a new element whenever the observed value changes.\nKey-Value Observing\nNSKeyValueObserving\nAn informal protocol that objects adopt to be notified of changes to the specified properties of other objects.\nKey-Value Coding\nNSKeyValueBindingCreation\nA set of methods that you can use to create and remove bindings between view objects and controllers, or between controllers and model objects.\nNSKeyValueCoding\nA mechanism by which you can access the properties of an object indirectly by name or key.\nNSScriptKeyValueCoding\nA collection of methods that provide additional capabilities for working with key-value coding.\nNSScriptKeyValueCoding Exception Names\nExceptions raised by key-value coding methods.\nInteracting with Web Plug-ins\nWebPlugInContainer\nWebPlugInContainer is an informal protocol that enables a plug-in to send messages to the application.\nWebPlugIn\nThe WebPlugIn informal protocol defines methods that enable interaction between an application using the WebKit framework and any WebKit-based plug-ins it may use.\nImplementing Web Scripting\nWebScripting\nWebScripting is an informal protocol that defines methods that classes can implement to export their interfaces to a WebScript environment such as JavaScript.\nSupporting Cocoa Scripting\nNSScriptingComparisonMethods\nA collection of methods useful for comparing script objects.\nDeprecated\nAvoid using deprecated classes and protocols in your apps.\nDeprecated Symbols\nReview symbols that are no longer supported and find the replacements to use instead.\nInstance Properties\nvar accessibilityActivateBlock: AXBoolReturnBlock?\nvar accessibilityActivationPointBlock: AXPointReturnBlock?\nvar accessibilityAttributedHintBlock: AXAttributedStringReturnBlock?\nvar accessibilityAttributedLabelBlock: AXAttributedStringReturnBlock?\nvar accessibilityAttributedUserInputLabelsBlock: AXAttributedStringArrayReturnBlock?\nvar accessibilityAttributedValueBlock: AXAttributedStringReturnBlock?\nvar accessibilityContainerTypeBlock: AXContainerTypeReturnBlock?\nvar accessibilityCustomActionsBlock: AXCustomActionsReturnBlock?\nvar accessibilityCustomRotorsBlock: AXCustomRotorsReturnBlock?\nvar accessibilityDecrementBlock: AXVoidReturnBlock?\nvar accessibilityElementsBlock: AXArrayReturnBlock?\nvar accessibilityElementsHiddenBlock: AXBoolReturnBlock?\nvar accessibilityFrameBlock: AXRectReturnBlock?\nvar accessibilityHeaderElementsBlock: AXArrayReturnBlock?\nvar accessibilityHintBlock: AXStringReturnBlock?\nvar accessibilityIdentifierBlock: AXStringReturnBlock?\nvar accessibilityIncrementBlock: AXVoidReturnBlock?\nvar accessibilityLabelBlock: AXStringReturnBlock?\nvar accessibilityLanguageBlock: AXStringReturnBlock?\nvar accessibilityMagicTapBlock: AXBoolReturnBlock?\nvar accessibilityNavigationStyleBlock: AXNavigationStyleReturnBlock?\nvar accessibilityNotifiesWhenDestroyed: Bool\nA Boolean value that indicates whether a custom accessibility object sends a notification when its corresponding UI element is destroyed.\nvar accessibilityPathBlock: AXPathReturnBlock?\nvar accessibilityPerformEscapeBlock: AXBoolReturnBlock?\nvar accessibilityRespondsToUserInteractionBlock: AXBoolReturnBlock?\nvar accessibilityShouldGroupAccessibilityChildrenBlock: AXBoolReturnBlock?\nvar accessibilityTextualContextBlock: AXTextualContextReturnBlock?\nvar accessibilityTraitsBlock: AXTraitsReturnBlock?\nvar accessibilityUserInputLabelsBlock: AXStringArrayReturnBlock?\nvar accessibilityValueBlock: AXStringReturnBlock?\nvar accessibilityViewIsModalBlock: AXBoolReturnBlock?\nvar automationElementsBlock: AXArrayReturnBlock?\nvar hashValue: Int\nvar isAccessibilityElementBlock: AXBoolReturnBlock?\nvar isSelectable: Bool\nvar objectSpecifier: NSScriptObjectSpecifier?\nReturns an object specifier for the receiver.\nType Properties\nclass var accessInstanceVariablesDirectly: Bool\nReturns a Boolean value that indicates whether the key-value coding methods should access the corresponding instance variable directly on finding no accessor method for a property.\nInstance Methods\nfunc acceptsPreviewPanelControl(QLPreviewPanel!) -> Bool\nfunc accessibilityZoomIn(at: CGPoint) -> Bool\nZooms in on the content at the specified point.\nfunc accessibilityZoomOut(at: CGPoint) -> Bool\nZooms out from the content at the specified point.\nfunc actionProperty() -> String!\nSent to the delegate to request the property the action applies to.\nfunc attemptRecovery(fromError: Error, optionIndex: Int) -> Bool\nImplemented to attempt a recovery from an error noted in an application-modal dialog.\nfunc attemptRecovery(fromError: Error, optionIndex: Int, delegate: Any?, didRecoverSelector: Selector?, contextInfo: UnsafeMutableRawPointer?)\nImplemented to attempt a recovery from an error noted in a document-modal sheet.\nfunc authorizationViewCreatedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate the authorization object has been created or changed. If you have saved a copy of the authorization object for your own purposes, you should discard it and call authorization() for a new authorization object.\nfunc authorizationViewDidAuthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was authorized and the authorization view was changed to unlocked.\nfunc authorizationViewDidDeauthorize(SFAuthorizationView!)\nSent to the delegate to indicate the user was deauthorized and the authorization view was changed to locked.\nfunc authorizationViewDidHide(SFAuthorizationView!)\nSent to the delegate to indicate that the view’s visibility has changed.\nfunc authorizationViewReleasedAuthorization(SFAuthorizationView!)\nSent to the delegate to indicate that deauthorization is about to occur.\nfunc authorizationViewShouldDeauthorize(SFAuthorizationView!) -> Bool\nSent to the delegate when a user clicks the open lock icon.\nfunc awakeFromNib()\nPrepares the receiver for service after it has been loaded from an Interface Builder archive, or nib file.\nfunc beginPreviewPanelControl(QLPreviewPanel!)\nfunc candidates(Any!) -> [Any]!\nReturns an array of candidates.\nfunc certificatePanelShowHelp(SFCertificatePanel!) -> Bool\nImplements custom help behavior for the modal panel.\nfunc chooseIdentityPanelShowHelp(SFChooseIdentityPanel!) -> Bool\nImplements custom help behavior for the modal panel.\nfunc commitComposition(Any!)\nInforms the controller that the composition should be committed.\nfunc composedString(Any!) -> Any!\nReturn the current composed string.\nfunc compositionParameterView(QCCompositionParameterView!, didChangeParameterWithKey: String!)\nCalled after an input parameter in the composition parameter view has been edited.\nDeprecated\nfunc compositionParameterView(QCCompositionParameterView!, shouldDisplayParameterWithKey: String!, attributes: [AnyHashable : Any]!) -> Bool\nAllows you to define which composition parameters are visible in the user interface when the composition parameter view refreshes.\nDeprecated\nfunc compositionPickerView(QCCompositionPickerView!, didSelect: QCComposition!)\nPerforms custom tasks when the selected composition in the composition picker view changes.\nDeprecated\nfunc compositionPickerViewDidStartAnimating(QCCompositionPickerView!)\nPerforms custom tasks when the composition picker view starts animating a composition.\nDeprecated\nfunc compositionPickerViewWillStopAnimating(QCCompositionPickerView!)\nPerforms custom tasks when the composition picker view stops animating a composition.\nDeprecated\nfunc didCommand(by: Selector!, client: Any!) -> Bool\nProcesses a command generated by user action such as typing certain keys or pressing the mouse button.\nfunc doesContain(Any) -> Bool\nReturns a Boolean value that indicates whether the receiver contains a given object.\nfunc endPreviewPanelControl(QLPreviewPanel!)\nfunc exceptionHandler(NSExceptionHandler!, shouldHandle: NSException!, mask: Int) -> Bool\nImplemented by the delegate to evaluate whether the delegating NSExceptionHandler instance should handle a given exception.\nfunc exceptionHandler(NSExceptionHandler!, shouldLogException: NSException!, mask: Int) -> Bool\nImplemented by the delegate to evaluate whether the delegating NSExceptionHandler instance should log a given exception.\nfunc fileTransferServicesAbortComplete(OBEXFileTransferServices!, error: OBEXError)\nfunc fileTransferServicesConnectionComplete(OBEXFileTransferServices!, error: OBEXError)\nfunc fileTransferServicesCopyRemoteFileComplete(OBEXFileTransferServices!, error: OBEXError)\nfunc fileTransferServicesCopyRemoteFileProgress(OBEXFileTransferServices!, transferProgress: [AnyHashable : Any]!)\nfunc fileTransferServicesCreateFolderComplete(OBEXFileTransferServices!, error: OBEXError, folder: String!)\nfunc fileTransferServicesDisconnectionComplete(OBEXFileTransferServices!, error: OBEXError)\nfunc fileTransferServicesFilePreparationComplete(OBEXFileTransferServices!, error: OBEXError)\nfunc fileTransferServicesPathChangeComplete(OBEXFileTransferServices!, error: OBEXError, finalPath: String!)\nfunc fileTransferServicesRemoveItemComplete(OBEXFileTransferServices!, error: OBEXError, removedItem: String!)\nfunc fileTransferServicesRetrieveFolderListingComplete(OBEXFileTransferServices!, error: OBEXError, listing: [Any]!)\nfunc fileTransferServicesSendFileComplete(OBEXFileTransferServices!, error: OBEXError)\nfunc fileTransferServicesSendFileProgress(OBEXFileTransferServices!, transferProgress: [AnyHashable : Any]!)\nfunc handle(NSEvent!, client: Any!) -> Bool\nHandles key down and mouse events.\nfunc handleQuery(withUnboundKey: String) -> Any?\nInvoked by value(forKey:) when it finds no property corresponding to key.\nDeprecated\nfunc handleTakeValue(Any?, forUnboundKey: String)\nInvoked by takeValue(_:forKey:) when it finds no property binding for key.\nDeprecated\nfunc hash(into: inout Hasher)\nfunc imageBrowser(IKImageBrowserView!, backgroundWasRightClickedWith: NSEvent!)\nPerforms custom tasks when the user right-clicks the image browser view background.\nfunc imageBrowser(IKImageBrowserView!, cellWasDoubleClickedAt: Int)\nPerforms custom tasks when the user double-clicks an item in the image browser view.\nfunc imageBrowser(IKImageBrowserView!, cellWasRightClickedAt: Int, with: NSEvent!)\nPerforms custom tasks when the user right-clicks an item in the image browser view.\nfunc imageBrowser(IKImageBrowserView!, groupAt: Int) -> [AnyHashable : Any]!\nReturns the group at the specified index.\nfunc imageBrowser(IKImageBrowserView!, itemAt: Int) -> Any!\nReturns an object for the item in an image browser view that corresponds to the specified index.\nfunc imageBrowser(IKImageBrowserView!, moveItemsAt: IndexSet!, to: Int) -> Bool\nSignals that the specified items should be moved to the specified destination.\nfunc imageBrowser(IKImageBrowserView!, removeItemsAt: IndexSet!)\nSignals that a remove operation should be applied to the specified items.\nfunc imageBrowser(IKImageBrowserView!, writeItemsAt: IndexSet!, to: NSPasteboard!) -> Int\nSignals that a drag should begin.\nfunc imageBrowserSelectionDidChange(IKImageBrowserView!)\nPerforms custom tasks when the selection changes.\nfunc imageRepresentation() -> Any!\nReturns the image to display.\nfunc imageRepresentationType() -> String!\nReturns the representation type of the image to display.\nfunc imageSubtitle() -> String!\nReturns the display subtitle of the image.\nfunc imageTitle() -> String!\nReturns the display title of the image.\nfunc imageUID() -> String!\nReturns a unique string that identifies the data source item.\nfunc imageVersion() -> Int\nReturns the version of the item.\nfunc indicesOfObjects(byEvaluatingObjectSpecifier: NSScriptObjectSpecifier) -> [NSNumber]?\nReturns the indices of the specified container objects.\nfunc inputText(String!, client: Any!) -> Bool\nHandles key down events that do not map to an action method.\nfunc inputText(String!, key: Int, modifiers: Int, client: Any!) -> Bool\nReceives Unicode, the key code that generated it, and any modifier flags.\nfunc isCaseInsensitiveLike(String) -> Bool\nReturns a Boolean value that indicates whether receiver is considered to be “like” a given string when the case of characters in the receiver is ignored.\nfunc isEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is equal to another given object.\nfunc isGreaterThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than another given object.\nfunc isGreaterThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is greater than or equal to another given object.\nfunc isLessThan(Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than another given object.\nfunc isLessThanOrEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is less than or equal to another given object.\nfunc isLike(String) -> Bool\nReturns a Boolean value that indicates whether the receiver is \"like\" another given object.\nfunc isNotEqual(to: Any?) -> Bool\nReturns a Boolean value that indicates whether the receiver is not equal to another given object.\nfunc numberOfGroups(inImageBrowser: IKImageBrowserView!) -> Int\nReturns the number of groups in an image browser view.\nfunc numberOfItems(inImageBrowser: IKImageBrowserView!) -> Int\nReturns the number of records managed by the data source object.\nfunc originalString(Any!) -> NSAttributedString!\nReturn the string that consists of the precomposed Unicode characters.\nfunc performAction(for: ABPerson!, identifier: String!)\nSent to the delegate to perform the action.\nfunc prepareForInterfaceBuilder()\nCalled when a designable object is created in Interface Builder.\nfunc provideImageData(UnsafeMutableRawPointer, bytesPerRow: Int, origin: Int, Int, size: Int, Int, userInfo: Any?)\nSupplies data to a CIImage object.\nfunc quartzFilterManager(QuartzFilterManager!, didAdd: QuartzFilter!)\nfunc quartzFilterManager(QuartzFilterManager!, didModifyFilter: QuartzFilter!)\nfunc quartzFilterManager(QuartzFilterManager!, didRemove: QuartzFilter!)\nfunc quartzFilterManager(QuartzFilterManager!, didSelect: QuartzFilter!)\nfunc readLinkQuality(forDeviceComplete: Any!, device: IOBluetoothDevice!, info: UnsafeMutablePointer<BluetoothHCILinkQualityInfo>!, error: IOReturn)\nfunc readRSSI(forDeviceComplete: Any!, device: IOBluetoothDevice!, info: UnsafeMutablePointer<BluetoothHCIRSSIInfo>!, error: IOReturn)\nfunc saveOptions(IKSaveOptions!, shouldShowUTType: String!) -> Bool\nCalled to determine if the specified uniform type identifier should be shown in the save panel.\nfunc shouldEnableAction(for: ABPerson!, identifier: String!) -> Bool\nSent to the delegate to determine whether the action should be enabled.\nfunc title(for: ABPerson!, identifier: String!) -> String!\nSent to the delegate to request the title of the menu item for the action.\nType Methods\nclass func debugDescription() -> String\nclass func hash() -> Int\nOperator Functions\nstatic func == (NSObject, NSObject) -> Bool\nRelationships\nConforms To\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nHashable\nNSObjectProtocol\nSee Also\nObject Basics\nprotocol NSObjectProtocol\nThe group of methods that are fundamental to all Objective-C objects.\nNSKeyValueCoding\nA mechanism by which you can access the properties of an object indirectly by name or key."
  },
  {
    "title": "Objective-C Runtime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/objectivec",
    "html": "Overview\n\nThe Objective-C Runtime module APIs define the base of the Objective-C language. These APIs include:\n\nTypes such as the NSObject class and the NSObjectProtocol protocol that provide the root functionality of most Objective-C classes\n\nFunctions and data structures that comprise the Objective-C runtime, which provides support for the dynamic properties of the Objective-C language\n\nYou typically don't need to use this module directly.\n\nTopics\nClasses\nclass NSObject\nThe root class of most Objective-C class hierarchies, from which subclasses inherit a basic interface to the runtime system and the ability to behave as Objective-C objects.\nclass Protocol\nProtocols\nprotocol NSObjectProtocol\nThe group of methods that are fundamental to all Objective-C objects.\nReference\nObjective-C Runtime\nDescribes the macOS Objective-C runtime library support functions and data structures.\nObjective-C Structures\nObjective-C Constants\nObjective-C Functions\nObjective-C Data Types\nStructures\nstruct NSZone\nstruct ObjCBool\nstruct Selector\nstruct ObjCClassList\nEnumerations\nenum ObjCEnumerationImage\nenum objc_AssociationPolicy\nType to specify the behavior of an association."
  }
]