[
  {
    "title": "selectionSummaryVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cproutechoice/3014029-selectionsummaryvariants",
    "html": "Discussion\n\nWhen creating a CPRouteChoice object, localize each variant for display to the user. The system displays the first variant that fits in the available screen space, so arrange the variants from most to least preferred display order. The array contains at least one variant.\n\nSee Also\nGetting Variants\nvar summaryVariants: [String]\nAn array of summary variants.\nvar additionalInformationVariants: [String]?\nAn array of variants providing additional information about the route choice."
  },
  {
    "title": "CPMessageTrailingItem.mute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagetrailingitem/mute",
    "html": "See Also\nTrailing Items\ncase none\nDon’t show a trailing item."
  },
  {
    "title": "summaryVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cproutechoice/2977586-summaryvariants",
    "html": "Discussion\n\nWhen creating the CPRouteChoice object, localize each variant for display to the user. The system displays the first variant that fits into the available screen space, so arrange the variants from most to least preferred display order. The array contains at least one variant.\n\nAn example variant summary is Via I-280 South.\n\nSee Also\nGetting Variants\nvar additionalInformationVariants: [String]?\nAn array of variants providing additional information about the route choice.\nvar selectionSummaryVariants: [String]?\nAn array of selection summary variants."
  },
  {
    "title": "CPMessageLeadingItem.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessageleadingitem/none",
    "html": "See Also\nLeading Items\ncase pin\nShow a pin icon.\ncase star\nShow a star icon."
  },
  {
    "title": "CPMessageLeadingItem.pin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessageleadingitem/pin",
    "html": "See Also\nLeading Items\ncase none\nDon’t show a leading item.\ncase star\nShow a star icon."
  },
  {
    "title": "CPMessageLeadingItem.star | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessageleadingitem/star",
    "html": "See Also\nLeading Items\ncase none\nDon’t show a leading item.\ncase pin\nShow a pin icon."
  },
  {
    "title": "CPListItemAccessoryType.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitemaccessorytype/none",
    "html": "See Also\nAccessory Types\ncase disclosureIndicator\nShow a chevron icon.\ncase cloud\nShow a cloud icon."
  },
  {
    "title": "init(summaryVariants:additionalInformationVariants:selectionSummaryVariants:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cproutechoice/3014028-init",
    "html": "Parameters\nsummaryVariants\n\nAn array of summary variants. The system displays the first variant that fits in the available screen space, so arrange the variants from most to least preferred display order. You should localize each variant for display to the user. You must provide at least one variant; for example, Via I-280 South.\n\nadditionalInformationVariants\n\nAn array of variants providing additional information about the route choice. The system displays the first variant that fits in the available screen space, so arrange the variants from most to least preferred display order. You should localize each variant for display to the user. You must provide at least one variant; for example, Fastest Route or Avoids Tolls.\n\nselectionSummaryVariants\n\nAn array of selection summary variants. The system displays the first variant that fits in the available screen space, so arrange the variants from most to least preferred display order. You should localize each variant for display to the user. You must provide at least one variant.\n\nReturn Value\n\nA newly initialized route choice."
  },
  {
    "title": "CPMessageTrailingItem.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagetrailingitem/none",
    "html": "See Also\nTrailing Items\ncase mute\nShow a muted speaker icon."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplimitableuserinterface/2991140-init",
    "html": "Parameters\nrawValue\n\nThe raw limitable user interface element value."
  },
  {
    "title": "additionalInformationVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cproutechoice/2977584-additionalinformationvariants",
    "html": "Discussion\n\nWhen creating a CPRouteChoice object, localize each variant for display to the user. The system displays the first variant that fits into the available screen space, so arrange the variants from most to least preferred display order. The array contains at least one variant.\n\nExamples of additional information variants include Fastest Route and Avoids Tolls.\n\nSee Also\nGetting Variants\nvar summaryVariants: [String]\nAn array of summary variants.\nvar selectionSummaryVariants: [String]?\nAn array of selection summary variants."
  },
  {
    "title": "CPListItem.AssistantCellVisibility.always | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/assistantcellvisibility/always",
    "html": "See Also\nControlling the Assistant Cell Visibility\ncase off\nThe assistant cell isn’t visible.\ncase whileLimitedUIActive\nThe assistant cell is visible only while Limited UI mode is active."
  },
  {
    "title": "subtitleVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpdashboardbutton/3516943-subtitlevariants",
    "html": "Discussion\n\nAn array of subtitle variants for this button in an arrangement from most- to least-preferred. The system selects a subtitle from this array that best fits the available space. You provide the subtitle variants to init(titleVariants:subtitleVariants:image:handler:) as localized, displayable content.\n\nSee Also\nAccessing the Button Configuration\nvar titleVariants: [String]\nThe array of title variants for the button.\nvar image: UIImage\nThe image the button displays."
  },
  {
    "title": "isUnread | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitemleadingconfiguration/3551810-isunread",
    "html": "Discussion\n\nConfigurations are immutable. To toggle the message list item’s unread indicator, create a new configuration and update the list item’s leadingConfiguration property.\n\nSee Also\nGetting the Configuration’s State\nvar leadingImage: UIImage?\nThe configuration’s image."
  },
  {
    "title": "CPBarButton.Type.text | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/type/text",
    "html": "See Also\nButton Types\ncase image\nAn image style bar button."
  },
  {
    "title": "CPAssistantCellActionType.startCall | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpassistantcellactiontype/startcall",
    "html": "Discussion\n\nNote\n\nThis action is only available in communication apps that include an Intents Extension capable of handling INStartCallIntent. For more information, see Creating an Intents App Extension.\n\nThe system provides the user’s response to your app’s Intents Extension. Your app must respond by identifying the requested person, group, or business and start a voice call with them.\n\nSee Also\nSiri Actions\ncase playMedia\nProvides an action that uses Siri to prompt the user for media playback."
  },
  {
    "title": "destination | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptrip/2968453-destination",
    "html": "See Also\nGetting the Trip's Origin and Destination\nvar origin: MKMapItem\nThe trip's origin."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cproutechoice/2968451-userinfo",
    "html": "Discussion\n\nYour app determines what information to include in userInfo."
  },
  {
    "title": "init(origin:destination:routeChoices:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptrip/2968454-init",
    "html": "Parameters\norigin\n\nThe trip's origin.\n\ndestination\n\nThe trip's destination.\n\nrouteChoices\n\nUp to three route choices available for the trip.\n\nReturn Value\n\nA newly initialized trip.\n\nSee Also\nCreating a Trip\nclass CPRouteChoice\nA possible route for a trip."
  },
  {
    "title": "sessionConfiguration(_:contentStyleChanged:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsessionconfigurationdelegate/3368178-sessionconfiguration",
    "html": "Parameters\nsessionConfiguration\n\nThe current session configuration.\n\ncontentStyle\n\nThe vehicle’s selected content style.\n\nDiscussion\n\nThe vehicle selects the content style according to the ambient light level, which can change periodically. Use this method to make sure your navigation app is always drawing the most appropriate style of map content in its base view."
  },
  {
    "title": "light | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontentstyle/3368176-light",
    "html": "See Also\nContent Styles\nstatic var dark: CPContentStyle\nThe indication from the vehicle to draw the content in a dark style."
  },
  {
    "title": "origin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptrip/2968455-origin",
    "html": "See Also\nGetting the Trip's Origin and Destination\nvar destination: MKMapItem\nThe trip's destination."
  },
  {
    "title": "CPListItem.AssistantCellVisibility.off | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/assistantcellvisibility/off",
    "html": "See Also\nControlling the Assistant Cell Visibility\ncase always\nThe assistant cell is always visible.\ncase whileLimitedUIActive\nThe assistant cell is visible only while Limited UI mode is active."
  },
  {
    "title": "CPListItem.AssistantCellPosition.bottom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/assistantcellposition/bottom",
    "html": "See Also\nControlling the Assistant Cell Position\ncase top\nPositions the assistant cell at the top of all visible cells."
  },
  {
    "title": "init(text:detailText:image:showsDisclosureIndicator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/2977571-init",
    "html": "Deprecated\n\nUse init(text:detailText:image:accessoryImage:accessoryType:) instead.\n\nParameters\ntext\n\nThe primary text to show in the list item cell.\n\ndetailText\n\nAdditional text to display below the primary text in the list item cell.\n\nimage\n\nThe image to display on the leading edge of the list item cell. If the image is larger than CPMaximumListItemImageSize, the list item scales down the image to maximum size. If you provide an animated image, the list item uses the first image in the animation sequence.\n\nshowsDisclosureIndicator\n\nA Boolean value that indicates whether the list item cell displays a disclosure indicator. Set to true to display the indicator on the trailing edge of the list item cell.\n\nReturn Value\n\nA newly initialized list item."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontentstyle/3368181-init",
    "html": "Parameters\nrawValue\n\nThe raw value of the content style to create."
  },
  {
    "title": "titleVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpgridbutton/2977565-titlevariants",
    "html": "Discussion\n\nWhen the system displays the button, it selects the title that best fits the available screen space, so arrange the titles from most to least preferred when creating a grid button. Also, localize each title for display to the user, and be sure to include at least one title in the array.\n\nSee Also\nObtaining Grid Button Information\nvar image: UIImage\nThe image displayed on the button."
  },
  {
    "title": "CPBarButtonStyle.none | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbuttonstyle/none",
    "html": "See Also\nButton Styles\ncase rounded\nA style that provides a rounded background."
  },
  {
    "title": "CPMessageTrailingItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagetrailingitem",
    "html": "Overview\n\nUse these constants when creating instances of CPMessageListItemTrailingConfiguration. A trailing item can provide additional context for a list item’s contents, or help communicate its behavior.\n\nTopics\nTrailing Items\ncase none\nDon’t show a trailing item.\ncase mute\nShow a muted speaker icon.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Trailing Item\nvar trailingItem: CPMessageTrailingItem\nThe configuration’s item."
  },
  {
    "title": "CPMessageLeadingItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessageleadingitem",
    "html": "Overview\n\nUse these constants when creating instances of CPMessageListItemLeadingConfiguration. A leading item can provide additional context for a list item’s contents, or help communicate its behavior.\n\nTopics\nLeading Items\ncase none\nDon’t show a leading item.\ncase pin\nShow a pin icon.\ncase star\nShow a star icon.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Leading Item\nvar leadingItem: CPMessageLeadingItem\nThe configuration’s item."
  },
  {
    "title": "CPListItemAccessoryType.cloud | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitemaccessorytype/cloud",
    "html": "See Also\nAccessory Types\ncase none\nDon’t show an accessory.\ncase disclosureIndicator\nShow a chevron icon."
  },
  {
    "title": "CPListItemAccessoryType.disclosureIndicator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitemaccessorytype/disclosureindicator",
    "html": "See Also\nAccessory Types\ncase none\nDon’t show an accessory.\ncase cloud\nShow a cloud icon."
  },
  {
    "title": "templateWillDisappear(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontrollerdelegate/2968305-templatewilldisappear",
    "html": "Parameters\ntemplate\n\nThe template that will disappear from the screen.\n\nanimated\n\nA Boolean value indicating whether the system animates the disappearance of the template.\n\nSee Also\nHandling Display Events\nfunc templateWillAppear(CPTemplate, animated: Bool)\nTells the delegate that the template will appear onscreen.\nfunc templateDidAppear(CPTemplate, animated: Bool)\nTells the delegate that the template did appear onscreen.\nfunc templateDidDisappear(CPTemplate, animated: Bool)\nTells the delegate that the template did disappear from the screen."
  },
  {
    "title": "init(conversationIdentifier:text:leadingConfiguration:trailingConfiguration:detailText:trailingText:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3551802-init",
    "html": "Parameters\nconversationIdentifier\n\nYour app’s unique identifier for the conversation. Siri passes this value to your app when the user selects the list item.\n\ntext\n\nThe conversation’s content. Siri speaks this when the user selects the list item.\n\nleadingConfiguration\n\nThe configuration that describes the visual elements of the list item’s leading region.\n\ntrailingConfiguration\n\nThe configuration that describes the visual elements of the list item’s trailing region.\n\ndetailText\n\nThe list item’s secondary text.\n\ntrailingText\n\nSupplementary text that the list item’s trailing region displays.\n\nSee Also\nCreating a Message List Item\ninit(fullName: String, phoneOrEmailAddress: String, leadingConfiguration: CPMessageListItemLeadingConfiguration, trailingConfiguration: CPMessageListItemTrailingConfiguration?, detailText: String?, trailingText: String?)\nCreates a list item that represents a contact."
  },
  {
    "title": "CPAlertAction.Style.cancel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalertaction/style/cancel",
    "html": "Discussion\n\nUse this style when providing a cancel action on the alert.\n\nSee Also\nStyles\ncase `default`\nThe default display style for an action button.\ncase destructive\nThe style indicating that the action changes or deletes data."
  },
  {
    "title": "lists | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplimitableuserinterface/2968424-lists",
    "html": "See Also\nUser Interface Limits\nstatic var keyboard: CPLimitableUserInterface\nIndicates that the car is limiting the keyboard display."
  },
  {
    "title": "init(items:header:headerSubtitle:headerImage:headerButton:sectionIndexTitle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/3778539-init",
    "html": "Parameters\nitems\n\nA list of items to include in the section.\n\nheader\n\nThe section header text.\n\nsectionIndexTitle\n\nA section index title. The system displays only the first character of the title, so choose a single-character section index title.\n\nsectionHeaderImage\n\nAn image that the header displays. The maximum size of the section header image is CPMaximumListSectionImageSize.\n\nsectionHeaderSubtitle\n\nA string that the header displays as a subtitle.\n\nsectionHeaderButton\n\nA button that the header displays.\n\nReturn Value\n\nA newly initialized list section.\n\nSee Also\nCreating a Section\ninit(items: [CPListTemplateItem])\nCreates a section with list items.\ninit(items: [CPListTemplateItem], header: String?, sectionIndexTitle: String?)\nCreates a section with list items, a header, and a section index title.\nprotocol CPListTemplateItem\nA description of the common properties of all list item types.\nprotocol CPSelectableListItem\nA description of a selectable list item.\nclass CPListItem\nA selectable row in a list template.\nclass CPListImageRowItem\nA list template row that displays a series of images.\nclass CPMessageListItem\nA list template row that represents a conversation or contact."
  },
  {
    "title": "init(items:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/2977575-init",
    "html": "Parameters\nitems\n\nA list of items to include in the section.\n\nReturn Value\n\nA newly initialized list section.\n\nSee Also\nCreating a Section\ninit(items: [CPListTemplateItem], header: String?, sectionIndexTitle: String?)\nCreates a section with list items, a header, and a section index title.\ninit(items: [CPListTemplateItem], header: String, headerSubtitle: String?, headerImage: UIImage?, headerButton: CPButton?, sectionIndexTitle: String?)\nCreates a section with list items, a header, a section index title, and section header details.\nprotocol CPListTemplateItem\nA description of the common properties of all list item types.\nprotocol CPSelectableListItem\nA description of a selectable list item.\nclass CPListItem\nA selectable row in a list template.\nclass CPListImageRowItem\nA list template row that displays a series of images.\nclass CPMessageListItem\nA list template row that represents a conversation or contact."
  },
  {
    "title": "keyboard | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplimitableuserinterface/2968423-keyboard",
    "html": "See Also\nUser Interface Limits\nstatic var lists: CPLimitableUserInterface\nIndicates that the car is limiting the display of lists."
  },
  {
    "title": "dark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontentstyle/3368175-dark",
    "html": "See Also\nContent Styles\nstatic var light: CPContentStyle\nThe indication from the vehicle to draw the content in a light style."
  },
  {
    "title": "left | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/pandirection/2968375-left",
    "html": "See Also\nPan Directions\nstatic var down: CPMapTemplate.PanDirection\nThe user panned the map downward.\nstatic var right: CPMapTemplate.PanDirection\nThe user panned the map to the right.\nstatic var up: CPMapTemplate.PanDirection\nThe user panned the map upward."
  },
  {
    "title": "down | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/pandirection/2968374-down",
    "html": "See Also\nPan Directions\nstatic var left: CPMapTemplate.PanDirection\nThe user panned the map to the left.\nstatic var right: CPMapTemplate.PanDirection\nThe user panned the map to the right.\nstatic var up: CPMapTemplate.PanDirection\nThe user panned the map upward."
  },
  {
    "title": "up | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/pandirection/2968378-up",
    "html": "See Also\nPan Directions\nstatic var down: CPMapTemplate.PanDirection\nThe user panned the map downward.\nstatic var left: CPMapTemplate.PanDirection\nThe user panned the map to the left.\nstatic var right: CPMapTemplate.PanDirection\nThe user panned the map to the right."
  },
  {
    "title": "right | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/pandirection/2968377-right",
    "html": "See Also\nPan Directions\nstatic var down: CPMapTemplate.PanDirection\nThe user panned the map downward.\nstatic var left: CPMapTemplate.PanDirection\nThe user panned the map to the left.\nstatic var up: CPMapTemplate.PanDirection\nThe user panned the map upward."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/pandirection/3014049-init",
    "html": "Parameters\nrawValue\n\nThe raw pan direction value."
  },
  {
    "title": "CPListItem.AssistantCellPosition.top | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/assistantcellposition/top",
    "html": "See Also\nControlling the Assistant Cell Position\ncase bottom\nPositions the assistant cell at the bottom of all visible cells."
  },
  {
    "title": "init(titleVariants:image:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpgridbutton/2977564-init",
    "html": "Parameters\ntitleVariants\n\nAn array of title variants for the button. Each title should be localized and ready for display to the user. When the system displays the button, it selects the title that best fits the available screen space, so arrange the variants from most to least preferred. Always include at least one title in the array.\n\nimage\n\nThe image to display on the button. If you provide an animated image, the button uses the first image in the animation sequence.\n\nhandler\n\nThe block invoked after the user taps the button. The default is nil.\n\nReturn Value\n\nA newly initialized grid button."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptrip/2968457-userinfo",
    "html": "Discussion\n\nUse this property to store any arbitrary data related to the trip that you may need at a later date, or by another part of your app that consumes trips."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpgridbutton/2968277-isenabled",
    "html": "Discussion\n\nThe default value is true."
  },
  {
    "title": "CPRouteChoice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cproutechoice",
    "html": "Topics\nCreating a Route Choice\ninit(summaryVariants: [String], additionalInformationVariants: [String], selectionSummaryVariants: [String])\nCreates a route choice.\nGetting Variants\nvar summaryVariants: [String]\nAn array of summary variants.\nvar additionalInformationVariants: [String]?\nAn array of variants providing additional information about the route choice.\nvar selectionSummaryVariants: [String]?\nAn array of selection summary variants.\nProviding Additional Information\nvar userInfo: Any?\nAn object containing custom information associated with the route choice.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nCreating a Trip\ninit(origin: MKMapItem, destination: MKMapItem, routeChoices: [CPRouteChoice])\nCreates a trip with an origin, destination, and route choices."
  },
  {
    "title": "trailingSymbol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuverdisplaystyle/3014002-trailingsymbol",
    "html": "See Also\nDIsplay Styles\nstatic var leadingSymbol: CPManeuverDisplayStyle\nThe symbol appears before the instructions for the maneuver.\nstatic var instructionOnly: CPManeuverDisplayStyle\nOnly the instructions appear for the maneuver.\nstatic var symbolOnly: CPManeuverDisplayStyle\nOnly the symbol appears for the maneuver."
  },
  {
    "title": "leadingSymbol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuverdisplaystyle/3014000-leadingsymbol",
    "html": "See Also\nDIsplay Styles\nstatic var trailingSymbol: CPManeuverDisplayStyle\nThe symbol appears after the instructions for the maneuver.\nstatic var instructionOnly: CPManeuverDisplayStyle\nOnly the instructions appear for the maneuver.\nstatic var symbolOnly: CPManeuverDisplayStyle\nOnly the symbol appears for the maneuver."
  },
  {
    "title": "symbolOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuverdisplaystyle/3014001-symbolonly",
    "html": "Discussion\n\nIf your app provides lane guidance, include a second maneuver to the navigation session’s upcomingManeuvers array that provides the lane guidance information. The second maneuver should have:\n\nA symbolSet containing dark and light images that fill the full width of the guidance panel with a maximum image size of 120 pt x 18 pt.\n\nAn empty array of instructionVariants.\n\nThe map template should include a mapDelegate object that conforms to CPMapTemplateDelegate and implements the mapTemplate(_:displayStyleFor:) method, which returns the symbolOnly display style for the maneuver.\n\nSee Also\nDIsplay Styles\nstatic var leadingSymbol: CPManeuverDisplayStyle\nThe symbol appears before the instructions for the maneuver.\nstatic var trailingSymbol: CPManeuverDisplayStyle\nThe symbol appears after the instructions for the maneuver.\nstatic var instructionOnly: CPManeuverDisplayStyle\nOnly the instructions appear for the maneuver."
  },
  {
    "title": "CPBarButton.Type.image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/type/image",
    "html": "See Also\nButton Types\ncase text\nA text style bar button."
  },
  {
    "title": "init(titleVariants:subtitleVariants:image:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpdashboardbutton/3516942-init",
    "html": "Parameters\ntitleVariants\n\nAn array of string variants to use for the button’s title.\n\nsubtitleVariants\n\nAn array of string variants to use for the button’s subtitle.\n\nimage\n\nThe image to display on the button.\n\nhandler\n\nThe block that CarPlay invokes when the user taps the button.\n\nReturn Value\n\nA button that displays the provided title, subtitle, and image.\n\nDiscussion\n\nYou must provide at least one, nonzero length title variant, and an image for the button to display. CarPlay displays the first variant that fits into the available screen space, so arrange your title and subtitle variant arrays from most- to least-preferred. Provide the variant strings as localized, displayable content.\n\nThe maximum supported image size is 30 x 30 points."
  },
  {
    "title": "titleVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpdashboardbutton/3516944-titlevariants",
    "html": "Discussion\n\nAn array of title variants for this button in an arrangement from most- to least-preferred. The system selects a title from this array that best fits the available space. You provide the title variants to init(titleVariants:subtitleVariants:image:handler:) as localized, displayable content.\n\nSee Also\nAccessing the Button Configuration\nvar subtitleVariants: [String]\nThe array of subtitle variants for the button.\nvar image: UIImage\nThe image the button displays."
  },
  {
    "title": "showsDisclosureIndicator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/2977572-showsdisclosureindicator",
    "html": "Deprecated\n\nUse accessoryType instead.\n\nSee Also\nDeprecated Properties\nvar showsExplicitLabel: Bool\nA Boolean value that determines whether the list item displays its explicit content indicator.\nDeprecated"
  },
  {
    "title": "showsExplicitLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3551781-showsexplicitlabel",
    "html": "Deprecated\n\nUse isExplicitContent instead.\n\nSee Also\nDeprecated Properties\nvar showsDisclosureIndicator: Bool\nA Boolean value that indicates whether the list item cell shows a disclosure indicator on its trailing edge.\nDeprecated"
  },
  {
    "title": "trailingItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitemtrailingconfiguration/3551814-trailingitem",
    "html": "Discussion\n\nConfigurations are immutable. To change or remove the item that the message list item’s trailing region shows, create a new configuration and update the list item’s trailingConfiguration property.\n\nSee Also\nGetting the Trailing Item\nenum CPMessageTrailingItem\nThe accessories that a message list item can display in its trailing region."
  },
  {
    "title": "leadingImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitemleadingconfiguration/3551808-leadingimage",
    "html": "Discussion\n\nConfigurations are immutable. To change or remove the image that the message list item’s leading region shows, create a new configuration and update the list item’s leadingConfiguration property.\n\nA configuration’s image can’t be larger than CPMaximumMessageItemImageSize. If you use an animated image, this property returns the first image in the animation sequence.\n\nSee Also\nGetting the Configuration’s State\nvar isUnread: Bool\nA Boolean value that determines whether the message list item displays an unread indicator."
  },
  {
    "title": "trailingImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitemtrailingconfiguration/3551813-trailingimage",
    "html": "Discussion\n\nConfigurations are immutable. To change or remove the image that the message list item’s trailing region shows, create a new configuration and update the list item’s trailingConfiguration property.\n\nA configuration’s image can’t be larger than CPMaximumMessageItemImageSize. If you use an animated image, this property returns the first image in the animation sequence."
  },
  {
    "title": "templateDidDisappear(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontrollerdelegate/2968303-templatediddisappear",
    "html": "Parameters\ntemplate\n\nThe template that disappeared from the screen.\n\nanimated\n\nA Boolean value indicating whether the system animated the disappearance of the template.\n\nSee Also\nHandling Display Events\nfunc templateWillAppear(CPTemplate, animated: Bool)\nTells the delegate that the template will appear onscreen.\nfunc templateDidAppear(CPTemplate, animated: Bool)\nTells the delegate that the template did appear onscreen.\nfunc templateWillDisappear(CPTemplate, animated: Bool)\nTells the delegate that the template will disappear from the screen."
  },
  {
    "title": "init(trailingItem:trailingImage:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitemtrailingconfiguration/3551812-init",
    "html": "Parameters\ntrailingItem\n\nThe item to show in the trailing region of the message list item. See CPMessageTrailingItem for the available options.\n\ntrailingImage\n\nThe image to show in the trailing region of the message list item.\n\nDiscussion\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property. Make sure that the image isn’t larger than CPMaximumMessageItemImageSize.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nSee Also\nCreating a Configuration\nlet CPMaximumMessageItemImageSize: CGSize\nThe maximum size of a message list item’s image."
  },
  {
    "title": "init(leadingItem:leadingImage:unread:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitemleadingconfiguration/3551807-init",
    "html": "Parameters\nleadingItem\n\nThe item to show in the leading region of the message list item. See CPMessageLeadingItem for the available options.\n\nleadingImage\n\nThe image to show in the leading region of the message list item.\n\nunread\n\nIf true, the message list item displays an indicator that shows the message is in an unread state.\n\nDiscussion\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property. Make sure that the image isn’t larger than CPMaximumMessageItemImageSize.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nSee Also\nCreating a Configuration\nlet CPMaximumMessageItemImageSize: CGSize\nThe maximum size of a message list item’s image."
  },
  {
    "title": "leadingItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitemleadingconfiguration/3551809-leadingitem",
    "html": "Discussion\n\nConfigurations are immutable. To change or remove the item that the message list item’s leading region shows, create a new configuration and update the list item’s leadingConfiguration property.\n\nSee Also\nGetting the Leading Item\nenum CPMessageLeadingItem\nThe accessories that a message list item can display in its leading region."
  },
  {
    "title": "CPMaximumMessageItemImageSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaximummessageitemimagesize",
    "html": "Discussion\n\nAt runtime, use this value to determine the maximum size of an image that a message list item can display in its leading and trailing regions.\n\nSee Also\nCreating a Configuration\ninit(leadingItem: CPMessageLeadingItem, leadingImage: UIImage?, unread: Bool)\nCreates a leading configuration that contains an item and an image."
  },
  {
    "title": "CPAssistantCellActionType.playMedia | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpassistantcellactiontype/playmedia",
    "html": "Discussion\n\nNote\n\nThis action is only available in audio apps that include an Intents Extension capable of handling INPlayMediaIntent. For more information, see Creating an Intents App Extension.\n\nThe system provides the user’s response to your app’s Intents Extension. Your app must respond by searching for the requested media and, if it’s available, start its playback and display a CPNowPlayingTemplate.\n\nSee Also\nSiri Actions\ncase startCall\nProvides an action that uses Siri to prompt the user for a person, group, or business to call."
  },
  {
    "title": "templateWillAppear(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontrollerdelegate/2968304-templatewillappear",
    "html": "Parameters\ntemplate\n\nThe template to show.\n\nanimated\n\nA Boolean value indicating whether the system animates the presentation of the template.\n\nSee Also\nHandling Display Events\nfunc templateDidAppear(CPTemplate, animated: Bool)\nTells the delegate that the template did appear onscreen.\nfunc templateWillDisappear(CPTemplate, animated: Bool)\nTells the delegate that the template will disappear from the screen.\nfunc templateDidDisappear(CPTemplate, animated: Bool)\nTells the delegate that the template did disappear from the screen."
  },
  {
    "title": "templateDidAppear(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontrollerdelegate/2968302-templatedidappear",
    "html": "Parameters\ntemplate\n\nThe template shown onscreen.\n\nanimated\n\nA Boolean value indicating whether the system animated the presentation of the template.\n\nSee Also\nHandling Display Events\nfunc templateWillAppear(CPTemplate, animated: Bool)\nTells the delegate that the template will appear onscreen.\nfunc templateWillDisappear(CPTemplate, animated: Bool)\nTells the delegate that the template will disappear from the screen.\nfunc templateDidDisappear(CPTemplate, animated: Bool)\nTells the delegate that the template did disappear from the screen."
  },
  {
    "title": "CPNavigationSession.PauseReason.loading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/pausereason/loading",
    "html": "See Also\nReasons\ncase arrived\nThe user arrived at the destination.\ncase locating\nThe system is locating the destination.\ncase proceedToRoute\nThe system is waiting for the user to proceed to the route.\ncase rerouting\nThe system is rerouting the trip."
  },
  {
    "title": "trip | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/2968404-trip",
    "html": "See Also\nGetting the Trip\nclass CPTrip\nAn object that represents a journey between an origin and a destination."
  },
  {
    "title": "text | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3667723-text",
    "html": "Discussion\n\nSiri speaks this text when the user selects the list item.\n\nSee Also\nManaging Content\nvar detailText: String?\nThe list item’s secondary text.\nvar trailingText: String?\nThe list item’s supplementary text."
  },
  {
    "title": "phoneOrEmailAddress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3601123-phoneoremailaddress",
    "html": "Discussion\n\nWhen the user selects the list item, Siri launches the message compose flow and uses this property’s value as the recipient’s contact information.\n\nSee Also\nManaging the Message Context\nvar conversationIdentifier: String?\nThe conversation’s unique identifier."
  },
  {
    "title": "init(fullName:phoneOrEmailAddress:leadingConfiguration:trailingConfiguration:detailText:trailingText:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3601122-init",
    "html": "Parameters\nfullName\n\nThe contact’s full name. The list item displays this value as its primary content. Siri speaks this when the user selects the list item.\n\nphoneOrEmailAddress\n\nThe phone number or email address that Siri uses when launching the compose message flow.\n\nleadingConfiguration\n\nThe configuration that describes the visual elements of the list item’s leading region.\n\ntrailingConfiguration\n\nThe configuration that describes the visual elements of the list item’s trailing region.\n\ndetailText\n\nThe list item’s secondary text.\n\ntrailingText\n\nSupplementary text that the list item’s trailing region displays.\n\nSee Also\nCreating a Message List Item\ninit(conversationIdentifier: String, text: String, leadingConfiguration: CPMessageListItemLeadingConfiguration, trailingConfiguration: CPMessageListItemTrailingConfiguration?, detailText: String?, trailingText: String?)\nCreates a list item that represents an existing conversation."
  },
  {
    "title": "conversationIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3551800-conversationidentifier",
    "html": "Discussion\n\nProvide the value that your app uses to identify the conversation. Siri passes this value to your app when the user selects the list item so that you can take any necessary action, such as, updating your message store to mark the conversation as read.\n\nCarPlay doesn’t display this value to the user.\n\nSee Also\nManaging the Message Context\nvar phoneOrEmailAddress: String?\nThe contact’s phone number or email address."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistimagerowitem/3751894-isenabled",
    "html": "Discussion\n\nThe default value is true."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistimagerowitem/3667715-userinfo",
    "html": "Discussion\n\nUse this property to attach a value that provides additional context to the list item. For example, you can attach a model object and reference it in the list item’s handler or listImageRowHandler when processing either selection."
  },
  {
    "title": "handler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistimagerowitem/3667713-handler",
    "html": "Discussion\n\nThis property is a closure that has two parameters:\n\nAn object that conforms to CPSelectableListItem, which is the list item that the user selects.\n\nThe completion closure you call to notify CarPlay when you finish processing the selection.\n\nCarPlay executes your handler on the main queue. You must call the completion closure after you finish processing the selection. If you need to perform asynchronous tasks, dispatch them to a background queue and call the completion closure when they complete. CarPlay displays an asynchronous progress indicator until you call the completion closure.\n\nSee Also\nManaging Selection\nvar listImageRowHandler: ((CPListImageRowItem, Int, () -> Void) -> Void)?\nAn optional closure that CarPlay invokes when the user selects an image."
  },
  {
    "title": "CPTimeRemainingColor.default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptimeremainingcolor/default",
    "html": "Discussion\n\nThe color is white when the map template's tripEstimateStyle is CPTripEstimateStyle.dark, and black when the style is CPTripEstimateStyle.light.\n\nSee Also\nColors\ncase green\nA shade of green.\ncase orange\nA shade of orange.\ncase red\nA shade of red."
  },
  {
    "title": "listImageRowHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistimagerowitem/3551773-listimagerowhandler",
    "html": "Discussion\n\nThis property is a closure that has three parameters:\n\nThe list item that contains the image.\n\nThe selected image’s index in the list item’s image row.\n\nThe completion closure you call to notify CarPlay when you finish processing the selection.\n\nCarPlay executes your handler on the main queue. You must call the completion closure after you finish processing the selection. If you need to perform asynchronous tasks, dispatch them to a background queue and call the completion closure when they complete. CarPlay displays an asynchronous progress indicator until you call the completion closure.\n\nSee Also\nManaging Selection\nvar handler: ((CPSelectableListItem, () -> Void) -> Void)?\nAn optional closure that CarPlay invokes when the user selects the list item."
  },
  {
    "title": "CPTimeRemainingColor.green | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptimeremainingcolor/green",
    "html": "See Also\nColors\ncase `default`\nThe system default color.\ncase orange\nA shade of orange.\ncase red\nA shade of red."
  },
  {
    "title": "CPTimeRemainingColor.orange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptimeremainingcolor/orange",
    "html": "See Also\nColors\ncase `default`\nThe system default color.\ncase green\nA shade of green.\ncase red\nA shade of red."
  },
  {
    "title": "CPMaximumNumberOfGridImages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaximumnumberofgridimages",
    "html": "Discussion\n\nAt runtime, use this value to determine the total number of images that CarPlay allows in an image row. The list item may display fewer images, depending on the width of the vehicle’s primary screen.\n\nSee Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nvar gridImages: [UIImage]\nThe images that appear in the list item’s image row.\nfunc update([UIImage])\nAdds, removes, reorders, or updates the images in the list item’s image row.\nclass var maximumImageSize: CGSize\nThe maximum size of an image that an image row can display."
  },
  {
    "title": "maximumImageSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistimagerowitem/3571353-maximumimagesize",
    "html": "Discussion\n\nAt runtime, use this value to determine the maximum size that CarPlay allows for a single image in an image row.\n\nSee Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nvar gridImages: [UIImage]\nThe images that appear in the list item’s image row.\nfunc update([UIImage])\nAdds, removes, reorders, or updates the images in the list item’s image row.\nlet CPMaximumNumberOfGridImages: Int\nThe maximum number of images that an image row can contain."
  },
  {
    "title": "CPTimeRemainingColor.red | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptimeremainingcolor/red",
    "html": "See Also\nColors\ncase `default`\nThe system default color.\ncase green\nA shade of green.\ncase orange\nA shade of orange."
  },
  {
    "title": "update(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistimagerowitem/3650362-update",
    "html": "Parameters\ngridImages\n\nAn array of images to display in the list item’s image row.\n\nDiscussion\n\nThis method is multipurpose. Use it to add new images to the image row, and to remove or reorder existing images.\n\nProvide images that are display-ready. If necessary, provide light and dark variants of each image using an asset catalog, or use instances of UIImageAsset and register an image for each interface style.\n\nTo properly size your images, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property. At runtime, use maximumImageSize to determine the maximum size that CarPlay allows for an image, and CPMaximumNumberOfGridImages to establish the total number of images that an image row can display. The list item may display fewer images, depending on the width of the vehicle’s primary screen.\n\nCarPlay doesn’t support animated images. If you provide animated images, CarPlay uses only the first image in each animation sequence.\n\nSee Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nvar gridImages: [UIImage]\nThe images that appear in the list item’s image row.\nclass var maximumImageSize: CGSize\nThe maximum size of an image that an image row can display.\nlet CPMaximumNumberOfGridImages: Int\nThe maximum number of images that an image row can contain."
  },
  {
    "title": "CPTripEstimateStyle.light | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptripestimatestyle/light",
    "html": "See Also\nStyles\ncase dark\nThe dark trip estimate display style."
  },
  {
    "title": "CPNavigationSession.PauseReason.rerouting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/pausereason/rerouting",
    "html": "See Also\nReasons\ncase arrived\nThe user arrived at the destination.\ncase loading\nThe system is loading the route.\ncase locating\nThe system is locating the destination.\ncase proceedToRoute\nThe system is waiting for the user to proceed to the route."
  },
  {
    "title": "CPNavigationSession.PauseReason.locating | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/pausereason/locating",
    "html": "See Also\nReasons\ncase arrived\nThe user arrived at the destination.\ncase loading\nThe system is loading the route.\ncase proceedToRoute\nThe system is waiting for the user to proceed to the route.\ncase rerouting\nThe system is rerouting the trip."
  },
  {
    "title": "CPNavigationSession.PauseReason.arrived | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/pausereason/arrived",
    "html": "See Also\nReasons\ncase loading\nThe system is loading the route.\ncase locating\nThe system is locating the destination.\ncase proceedToRoute\nThe system is waiting for the user to proceed to the route.\ncase rerouting\nThe system is rerouting the trip."
  },
  {
    "title": "CPNavigationSession.PauseReason.proceedToRoute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/pausereason/proceedtoroute",
    "html": "See Also\nReasons\ncase arrived\nThe user arrived at the destination.\ncase loading\nThe system is loading the route.\ncase locating\nThe system is locating the destination.\ncase rerouting\nThe system is rerouting the trip."
  },
  {
    "title": "gridImages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistimagerowitem/3551771-gridimages",
    "html": "See Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nfunc update([UIImage])\nAdds, removes, reorders, or updates the images in the list item’s image row.\nclass var maximumImageSize: CGSize\nThe maximum size of an image that an image row can display.\nlet CPMaximumNumberOfGridImages: Int\nThe maximum number of images that an image row can contain."
  },
  {
    "title": "text | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistimagerowitem/3667714-text",
    "html": "See Also\nManaging Content\nvar gridImages: [UIImage]\nThe images that appear in the list item’s image row.\nfunc update([UIImage])\nAdds, removes, reorders, or updates the images in the list item’s image row.\nclass var maximumImageSize: CGSize\nThe maximum size of an image that an image row can display.\nlet CPMaximumNumberOfGridImages: Int\nThe maximum number of images that an image row can contain."
  },
  {
    "title": "timeRemaining | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptravelestimates/2968410-timeremaining",
    "html": "See Also\nGetting Travel Estimates\nvar distanceRemaining: Measurement<UnitLength>\nThe remaining distance for the travel estimate."
  },
  {
    "title": "init(distanceRemaining:timeRemaining:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptravelestimates/2968409-init",
    "html": "Parameters\ndistance\n\nThe remaining distance for the travel estimate.\n\ntime\n\nThe remaining time for the travel estimate.\n\nReturn Value\n\nA newly initialized travel estimates object."
  },
  {
    "title": "distanceRemaining | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptravelestimates/2968408-distanceremaining",
    "html": "See Also\nGetting Travel Estimates\nvar timeRemaining: TimeInterval\nThe remaining time for the travel estimate."
  },
  {
    "title": "CPListItem.AssistantCellVisibility.whileLimitedUIActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/assistantcellvisibility/whilelimiteduiactive",
    "html": "See Also\nControlling the Assistant Cell Visibility\ncase off\nThe assistant cell isn’t visible.\ncase always\nThe assistant cell is always visible."
  },
  {
    "title": "sessionConfiguration(_:limitedUserInterfacesChanged:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsessionconfigurationdelegate/2968430-sessionconfiguration",
    "html": "Parameters\nsessionConfiguration\n\nThe current session configuration.\n\nlimitedUserInterfaces\n\nA bit mask value indicating the user interface limits that changed."
  },
  {
    "title": "CPListItemPlayingIndicatorLocation.trailing | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitemplayingindicatorlocation/trailing",
    "html": "See Also\nNow Playing Indicator Locations\ncase leading\nAlign the Now Playing indicator with the leading edge of the list item."
  },
  {
    "title": "CPListItemPlayingIndicatorLocation.leading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitemplayingindicatorlocation/leading",
    "html": "See Also\nNow Playing Indicator Locations\ncase trailing\nAlign the Now Playing indicator with the trailing edge of the list item."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpgridbutton/2968278-image",
    "html": "Discussion\n\nWhen creating a grid button, don't provide an animated image. If you do, the button uses the first image in the animation sequence.\n\nSee Also\nObtaining Grid Button Information\nvar titleVariants: [String]\nAn array of title variants for the button."
  },
  {
    "title": "CPBarButtonStyle.rounded | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbuttonstyle/rounded",
    "html": "See Also\nButton Styles\ncase none\nA style that provides no additional styling."
  },
  {
    "title": "instructionOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuverdisplaystyle/3013999-instructiononly",
    "html": "See Also\nDIsplay Styles\nstatic var leadingSymbol: CPManeuverDisplayStyle\nThe symbol appears before the instructions for the maneuver.\nstatic var trailingSymbol: CPManeuverDisplayStyle\nThe symbol appears after the instructions for the maneuver.\nstatic var symbolOnly: CPManeuverDisplayStyle\nOnly the symbol appears for the maneuver."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuverdisplaystyle/3014048-init",
    "html": "Parameters\nrawValue\n\nThe raw maneuver display style value."
  },
  {
    "title": "init(handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontactdirectionsbutton/3664494-init",
    "html": "Parameters\nhandler\n\nThe closure that the button invokes when the user taps it.\n\nReturn Value\n\nA new contact directions button that invokes its handler when the user taps it.\n\nDiscussion\n\nThe button displays a system image that communicates its function."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpdashboardbutton/3516941-image",
    "html": "Discussion\n\nCarPlays doesn’t support animated images. If you provide an animated image, the button displays only the first image in the animation sequence. The maximum supported image size is 30 x 30 points.\n\nSee Also\nAccessing the Button Configuration\nvar titleVariants: [String]\nThe array of title variants for the button.\nvar subtitleVariants: [String]\nThe array of subtitle variants for the button."
  },
  {
    "title": "handler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3667716-handler",
    "html": "Discussion\n\nThe handler is a closure that has two parameters:\n\nAn object that conforms to CPSelectableListItem, which is the list item that the user selects.\n\nThe completion closure you call to notify CarPlay when you finish processing the selection.\n\nCarPlay executes your handler on the main queue. You must call the completion closure after you finish processing the selection. If you need to perform asynchronous tasks, dispatch them to a background queue and call the completion closure when they complete. CarPlay displays an asynchronous progress indicator until you call the completion closure.\n\nSee Also\nManaging Configuration\nvar isEnabled: Bool\nA Boolean value that indicates if the item is enabled.\nvar userInfo: Any?\nAn opaque value for the list item."
  },
  {
    "title": "dashboardSymbolImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3621840-dashboardsymbolimage",
    "html": "Discussion\n\nYou use a named image asset to supply variants for both dark and light interface styles, and initialize the image using init(named:). CarPlay then selects the correct image for the current interface style.\n\nIf you don’t provide a dashboard symbol image, CarPlay uses symbolImage.\n\nSee Also\nProviding Symbol Images\nvar symbolImage: UIImage?\nAn image that represents the maneuver.\nvar notificationSymbolImage: UIImage?\nAn image for notification banners that represents the maneuver.\nvar symbolSet: CPImageSet?\nAn image set that represents the maneuver.\nDeprecated"
  },
  {
    "title": "CPTripEstimateStyle.dark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptripestimatestyle/dark",
    "html": "See Also\nStyles\ncase light\nThe light trip estimate display style."
  },
  {
    "title": "CPNavigationAlert.DismissalContext.systemDismissed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/dismissalcontext/systemdismissed",
    "html": "See Also\nDismissal Reasons\ncase timeout\nThe system dismissed the navigation alert due to a timeout.\ncase userDismissed\nThe user dismissed the navigation alert."
  },
  {
    "title": "repeats | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpvoicecontrolstate/3014039-repeats",
    "html": "Discussion\n\nThe animation repeats when this property is true; otherwise, animation occurs only once.\n\nSee Also\nGetting State Information\nvar identifier: String\nThe string that your app uses to identify the voice control state.\nvar titleVariants: [String]?\nThe array of title variants for the voice control state.\nvar image: UIImage?\nThe image displayed while the voice control template is in this state."
  },
  {
    "title": "pushTemplate(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/2968296-pushtemplate",
    "html": "Deprecated\n\nUse pushTemplate(_:animated:completion:) instead.\n\nParameters\ntemplateToPush\n\nThe template to push onto the navigation stack.\n\nanimated\n\nSet to true to animate the presentation of the template.\n\nSee Also\nDeprecated Methods\nfunc setRootTemplate(CPTemplate, animated: Bool)\nSets the root template, starting a new stack for the template navigation hierarchy.\nDeprecated\nfunc popTemplate(animated: Bool)\nPops the top template from the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popToRootTemplate(animated: Bool)\nPops all templates on the stack—except the root template—and updates the CarPlay display.\nDeprecated\nfunc pop(to: CPTemplate, animated: Bool)\nPops templates until the specified template is at the top of the navigation stack.\nDeprecated\nfunc presentTemplate(CPTemplate, animated: Bool)\nPresents a template modally.\nDeprecated\nfunc dismissTemplate(animated: Bool)\nDismisses the template that the interface controller is displaying modally.\nDeprecated"
  },
  {
    "title": "CPNavigationAlert.DismissalContext.timeout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/dismissalcontext/timeout",
    "html": "See Also\nDismissal Reasons\ncase systemDismissed\nThe system dismissed the navigation alert.\ncase userDismissed\nThe user dismissed the navigation alert."
  },
  {
    "title": "application(_:didConnectCarInterfaceController:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpapplicationdelegate/2968287-application",
    "html": "Required\n\nParameters\napplication\n\nYour singleton app object.\n\ninterfaceController\n\nThe interface controller provided by CarPlay. Your app should maintain a reference to this controller.\n\nwindow\n\nThe CarPlay window. Your app should create its view controller and assign the controller to the rootViewController property of this window.\n\nSee Also\nConnecting to the CarPlay Interface\nfunc application(UIApplication, didDisconnectCarInterfaceController: CPInterfaceController, from: CPWindow)\nTells the app delegate that the app disconnected from the CarPlay interface.\n\nRequired\n\nDeprecated"
  },
  {
    "title": "application(_:didDisconnectCarInterfaceController:from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpapplicationdelegate/2968288-application",
    "html": "Required\n\nParameters\napplication\n\nYour singleton app object.\n\ninterfaceController\n\nThe interface controller provided by CarPlay. Your app should release its reference to this controller.\n\nwindow\n\nThe CarPlay window.\n\nSee Also\nConnecting to the CarPlay Interface\nfunc application(UIApplication, didConnectCarInterfaceController: CPInterfaceController, to: CPWindow)\nTells the app delegate that the app connected to the CarPlay interface.\n\nRequired\n\nDeprecated"
  },
  {
    "title": "isHidden | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmapbutton/2968337-ishidden",
    "html": "Discussion\n\nThe default value is false.\n\nSee Also\nControlling the Button\nvar isEnabled: Bool\nA Boolean value that enables and disables the map button."
  },
  {
    "title": "presentTemplate(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3019562-presenttemplate",
    "html": "Deprecated\n\nUse presentTemplate(_:animated:completion:) instead.\n\nParameters\ntemplateToPresent\n\nA template to display over currently displayed content on the CarPlay screen. The template must be one of the following types:\n\nCPActionSheetTemplate\n\nCPAlertTemplate\n\nCPVoiceControlTemplate\n\nanimated\n\nA Boolean value that indicates whether the system animates the display of transitioning templates. Set to true to animate the transition.\n\nDiscussion\n\nYou can present only one template at a time.\n\nSee Also\nDeprecated Methods\nfunc setRootTemplate(CPTemplate, animated: Bool)\nSets the root template, starting a new stack for the template navigation hierarchy.\nDeprecated\nfunc pushTemplate(CPTemplate, animated: Bool)\nPushes a template onto the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popTemplate(animated: Bool)\nPops the top template from the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popToRootTemplate(animated: Bool)\nPops all templates on the stack—except the root template—and updates the CarPlay display.\nDeprecated\nfunc pop(to: CPTemplate, animated: Bool)\nPops templates until the specified template is at the top of the navigation stack.\nDeprecated\nfunc dismissTemplate(animated: Bool)\nDismisses the template that the interface controller is displaying modally.\nDeprecated"
  },
  {
    "title": "popToRootTemplate(animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/2968293-poptoroottemplate",
    "html": "Deprecated\n\nUse popToRootTemplate(animated:completion:) instead.\n\nParameters\nanimated\n\nA Boolean value that indicates whether the system animates the display of transitioning templates. Set to true to animate the transition.\n\nSee Also\nDeprecated Methods\nfunc setRootTemplate(CPTemplate, animated: Bool)\nSets the root template, starting a new stack for the template navigation hierarchy.\nDeprecated\nfunc pushTemplate(CPTemplate, animated: Bool)\nPushes a template onto the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popTemplate(animated: Bool)\nPops the top template from the navigation stack and updates the CarPlay display.\nDeprecated\nfunc pop(to: CPTemplate, animated: Bool)\nPops templates until the specified template is at the top of the navigation stack.\nDeprecated\nfunc presentTemplate(CPTemplate, animated: Bool)\nPresents a template modally.\nDeprecated\nfunc dismissTemplate(animated: Bool)\nDismisses the template that the interface controller is displaying modally.\nDeprecated"
  },
  {
    "title": "popTemplate(animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/2968292-poptemplate",
    "html": "Deprecated\n\nUse popTemplate(animated:completion:) instead.\n\nParameters\nanimated\n\nA Boolean value that indicates whether the system animates the display of transitioning templates. Set to true to animate the transition.\n\nSee Also\nDeprecated Methods\nfunc setRootTemplate(CPTemplate, animated: Bool)\nSets the root template, starting a new stack for the template navigation hierarchy.\nDeprecated\nfunc pushTemplate(CPTemplate, animated: Bool)\nPushes a template onto the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popToRootTemplate(animated: Bool)\nPops all templates on the stack—except the root template—and updates the CarPlay display.\nDeprecated\nfunc pop(to: CPTemplate, animated: Bool)\nPops templates until the specified template is at the top of the navigation stack.\nDeprecated\nfunc presentTemplate(CPTemplate, animated: Bool)\nPresents a template modally.\nDeprecated\nfunc dismissTemplate(animated: Bool)\nDismisses the template that the interface controller is displaying modally.\nDeprecated"
  },
  {
    "title": "dismissTemplate(animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3019561-dismisstemplate",
    "html": "Deprecated\n\nUse dismissTemplate(animated:completion:) instead.\n\nParameters\nanimated\n\nA Boolean value that indicates whether the system animates the dismissal of the template. Set to true to animate the transition.\n\nDiscussion\n\nCalling this method when there’s no modal template displayed has no effect.\n\nSee Also\nDeprecated Methods\nfunc setRootTemplate(CPTemplate, animated: Bool)\nSets the root template, starting a new stack for the template navigation hierarchy.\nDeprecated\nfunc pushTemplate(CPTemplate, animated: Bool)\nPushes a template onto the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popTemplate(animated: Bool)\nPops the top template from the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popToRootTemplate(animated: Bool)\nPops all templates on the stack—except the root template—and updates the CarPlay display.\nDeprecated\nfunc pop(to: CPTemplate, animated: Bool)\nPops templates until the specified template is at the top of the navigation stack.\nDeprecated\nfunc presentTemplate(CPTemplate, animated: Bool)\nPresents a template modally.\nDeprecated"
  },
  {
    "title": "position | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpassistantcellconfiguration/3867012-position",
    "html": "See Also\nGetting the Configuration Attributes\nvar visibility: CPListItem.AssistantCellVisibility\nThe visibility of the assistant cell in the list template.\nvar assistantAction: CPAssistantCellActionType\nThe action that Siri performs when the user selects the assistant cell.\nenum CPAssistantCellActionType\nThe supported Siri actions of the assistant cell."
  },
  {
    "title": "CPAssistantCellActionType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpassistantcellactiontype",
    "html": "Topics\nSiri Actions\ncase playMedia\nProvides an action that uses Siri to prompt the user for media playback.\ncase startCall\nProvides an action that uses Siri to prompt the user for a person, group, or business to call.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Configuration Attributes\nvar position: CPListItem.AssistantCellPosition\nThe position of the assistant cell in the list template.\nvar visibility: CPListItem.AssistantCellVisibility\nThe visibility of the assistant cell in the list template.\nvar assistantAction: CPAssistantCellActionType\nThe action that Siri performs when the user selects the assistant cell."
  },
  {
    "title": "visibility | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpassistantcellconfiguration/3867013-visibility",
    "html": "See Also\nGetting the Configuration Attributes\nvar position: CPListItem.AssistantCellPosition\nThe position of the assistant cell in the list template.\nvar assistantAction: CPAssistantCellActionType\nThe action that Siri performs when the user selects the assistant cell.\nenum CPAssistantCellActionType\nThe supported Siri actions of the assistant cell."
  },
  {
    "title": "CPAlertAction.Style.default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalertaction/style/default",
    "html": "See Also\nStyles\ncase cancel\nThe display style indicating that the action leaves data unchanged.\ncase destructive\nThe style indicating that the action changes or deletes data."
  },
  {
    "title": "assistantAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpassistantcellconfiguration/3867010-assistantaction",
    "html": "See Also\nGetting the Configuration Attributes\nvar position: CPListItem.AssistantCellPosition\nThe position of the assistant cell in the list template.\nvar visibility: CPListItem.AssistantCellVisibility\nThe visibility of the assistant cell in the list template.\nenum CPAssistantCellActionType\nThe supported Siri actions of the assistant cell."
  },
  {
    "title": "init(position:visibility:assistantAction:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpassistantcellconfiguration/3867011-init",
    "html": "Parameters\nposition\n\nThe position of the assistant cell in the list template. For possible values, see CPListItem.AssistantCellPosition.\n\nvisibility\n\nThe visibility of the assistant cell. For possible values, see CPListItem.AssistantCellVisibility.\n\nassistantAction\n\nThe action that Siri performs when the user selects the assistant cell. For possible values, see CPAssistantCellActionType.\n\nDiscussion\n\nYour app doesn’t receive a callback when the user selects the assistant cell. Instead, you configure an Intents Extension to handle the type of intent you specify in assistantAction; audio apps must support INPlayMediaIntent and communication apps must support INStartCallIntent. The assistant cell is unavailable in all other app categories."
  },
  {
    "title": "CPAlertAction.Style.destructive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalertaction/style/destructive",
    "html": "Discussion\n\nUse this style when the action does something destructive, such as deleting data.\n\nSee Also\nStyles\ncase `default`\nThe default display style for an action button.\ncase cancel\nThe display style indicating that the action leaves data unchanged."
  },
  {
    "title": "pointOfInterestTemplate(_:didSelectPointOfInterest:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinteresttemplatedelegate/3678729-pointofinteresttemplate",
    "html": "Parameters\npointOfInterestTemplate\n\nThe template that displays the map that contains the points of interest.\n\npointOfInterest\n\nThe point of interest that the user selects.\n\nDiscussion\n\nCarPlay calls this method whenever the user selects a point of interest from the template’s map. The template displays a detail card for the selection, which contains secondary information and optional actions the user can perform.\n\nUse the userInfo property to attach a value that provides additional context for the point of interest. You can then reference that value in your implementation of this method."
  },
  {
    "title": "init(rating:maximumRating:title:detail:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationratingitem/3667710-init",
    "html": "Parameters\nrating\n\nA number in the range of 0 to maximumRating. The number must be an increment of 0.5.\n\nmaximumRating\n\nA whole number in the range of 1 to 5 that specifies the maximum rating that the item allows.\n\ntitle\n\nThe text that the template displays as the item’s title.\n\ndetail\n\nThe text that the template displays below or beside the title, depending on the template’s layout. See CPInformationTemplateLayout for more information."
  },
  {
    "title": "detail | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationitem/3664499-detail",
    "html": "See Also\nAccessing the Item's Attributes\nvar title: String?\nThe text that the template displays as the item’s title."
  },
  {
    "title": "rating | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationratingitem/3667712-rating",
    "html": "Discussion\n\nThis property is an NSNumber that contains a value in the range of 0 to maximumRating. The value is an increment of 0.5.\n\nSee Also\nAccessing the Item's Attributes\nvar maximumRating: NSNumber?\nThe maximum rating that the template displays."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationitem/3664501-title",
    "html": "See Also\nAccessing the Item's Attributes\nvar detail: String?\nThe text that the template displays below or beside the item’s title."
  },
  {
    "title": "init(text:detailText:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/2977569-init",
    "html": "Parameters\ntext\n\nThe primary text to show in the list item cell.\n\ndetailText\n\nAdditional text to display below the primary text in the list item cell.\n\nReturn Value\n\nA newly initialized list item.\n\nSee Also\nCreating a List Item\ninit(text: String?, detailText: String?, image: UIImage?)\nCreates a list item with primary text, secondary text, and an image.\ninit(text: String?, detailText: String?, image: UIImage?, accessoryImage: UIImage?, accessoryType: CPListItemAccessoryType)\nCreates a list item that displays an accessory beside its content."
  },
  {
    "title": "CPInformationTemplateLayout.leading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationtemplatelayout/leading",
    "html": "Discussion\n\nYou use this layout when you want to align an item’s title and detail text on the template’s leading edge. In this configuration, the template displays an item’s detail text below its title.\n\nSee Also\nTemplate Layout Styles\ncase twoColumn\nA layout that displays a template’s items in two columns."
  },
  {
    "title": "CPInformationTemplateLayout.twoColumn | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationtemplatelayout/twocolumn",
    "html": "Discussion\n\nYou use this layout when you want the template to display an item’s detail text beside its title. The template aligns text in the left column to its leading edge, and text in the right column to its trailing edge.\n\nSee Also\nTemplate Layout Styles\ncase leading\nA layout that displays a template’s items aligned to its leading edge."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/deprecated_symbols",
    "html": "Topics\nDeprecated Methods\ninit(text: String?, detailText: String?, image: UIImage?, showsDisclosureIndicator: Bool)\nCreates a list item with primary text, secondary text, an image, and a disclosure indicator.\nDeprecated\nDeprecated Properties\nvar showsDisclosureIndicator: Bool\nA Boolean value that indicates whether the list item cell shows a disclosure indicator on its trailing edge.\nDeprecated\nvar showsExplicitLabel: Bool\nA Boolean value that determines whether the list item displays its explicit content indicator.\nDeprecated"
  },
  {
    "title": "CPTextButtonStyle.confirm | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptextbuttonstyle/confirm",
    "html": "See Also\nButton Text Styles\ncase normal\nA style that indicates the button performs an action other than to confirm or cancel.\ncase cancel\nA style that indicates the button cancels an action and doesn’t change data."
  },
  {
    "title": "CPTextButtonStyle.cancel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptextbuttonstyle/cancel",
    "html": "See Also\nButton Text Styles\ncase normal\nA style that indicates the button performs an action other than to confirm or cancel.\ncase confirm\nA style that indicates the button confirms an action and changes data."
  },
  {
    "title": "init(text:detailText:image:accessoryImage:accessoryType:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3551777-init",
    "html": "Parameters\ntext\n\nThe list item’s primary text.\n\ndetailText\n\nThe list item’s secondary text.\n\nimage\n\nThe image that the list item displays in its leading region.\n\naccessoryImage\n\nThe image that the list item displays in its trailing region.\n\naccessoryType\n\nThe accessory that the list item displays in its trailing region.\n\nDiscussion\n\nIf you specify an image, CarPlay sets accessoryType to CPListItemAccessoryType.none.\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property. At runtime, use maximumImageSize to determine the maximum size for a list item’s image and accessory image.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nSee Also\nCreating a List Item\ninit(text: String?, detailText: String?)\nCreates a list item with primary and secondary text.\ninit(text: String?, detailText: String?, image: UIImage?)\nCreates a list item with primary text, secondary text, and an image."
  },
  {
    "title": "init(text:detailText:image:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/2977570-init",
    "html": "Parameters\ntext\n\nThe primary text to show in the list item cell.\n\ndetailText\n\nAdditional text to display below the primary text in the list item cell.\n\nimage\n\nThe image to display on the leading edge of the list item cell. If the image is larger than CPMaximumListItemImageSize, the list item scales down the image to maximum size. If you provide an animated image, the list item uses the first image in the animation sequence.\n\nReturn Value\n\nA newly initialized list item.\n\nSee Also\nCreating a List Item\ninit(text: String?, detailText: String?)\nCreates a list item with primary and secondary text.\ninit(text: String?, detailText: String?, image: UIImage?, accessoryImage: UIImage?, accessoryType: CPListItemAccessoryType)\nCreates a list item that displays an accessory beside its content."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3751895-isenabled",
    "html": "Discussion\n\nThe default value is true.\n\nSee Also\nManaging Configuration\nvar handler: ((CPSelectableListItem, () -> Void) -> Void)?\nAn optional closure that CarPlay invokes when the user selects the list item.\nvar userInfo: Any?\nAn opaque value for the list item."
  },
  {
    "title": "init(items:header:sectionIndexTitle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/2977576-init",
    "html": "Parameters\nitems\n\nA list of items to include in the section.\n\nheader\n\nThe section header text.\n\nsectionIndexTitle\n\nA section index title. The system displays only the first character of the title, so choose a single-character section index title.\n\nReturn Value\n\nA newly initialized list section.\n\nSee Also\nCreating a Section\ninit(items: [CPListTemplateItem])\nCreates a section with list items.\ninit(items: [CPListTemplateItem], header: String, headerSubtitle: String?, headerImage: UIImage?, headerButton: CPButton?, sectionIndexTitle: String?)\nCreates a section with list items, a header, a section index title, and section header details.\nprotocol CPListTemplateItem\nA description of the common properties of all list item types.\nprotocol CPSelectableListItem\nA description of a selectable list item.\nclass CPListItem\nA selectable row in a list template.\nclass CPListImageRowItem\nA list template row that displays a series of images.\nclass CPMessageListItem\nA list template row that represents a conversation or contact."
  },
  {
    "title": "overviewButtonTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptrippreviewtextconfiguration/3014033-overviewbuttontitle",
    "html": "Discussion\n\nWhen the title is nil, the button displays a system-provided title.\n\nSee Also\nSetting Button Titles\nvar startButtonTitle: String?\nThe title displayed on the start button.\nvar additionalRoutesButtonTitle: String?\nThe title displayed on the routes button."
  },
  {
    "title": "CPMessageListItemTrailingConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitemtrailingconfiguration",
    "html": "Overview\n\nUse a trailing configuration to describe the visual elements that a message list item’s trailing region contains. The region can show a CPMessageTrailingItem and an image.\n\nConfigurations are immutable. To modify the list item’s trailing configuration, update its trailingConfiguration property with a new configuration. CarPlay detects the change and redraws the message list item.\n\nTopics\nCreating a Configuration\ninit(trailingItem: CPMessageTrailingItem, trailingImage: UIImage?)\nCreates a trailing configuration that contains an item and an image.\nlet CPMaximumMessageItemImageSize: CGSize\nThe maximum size of a message list item’s image.\nGetting the Trailing Item\nvar trailingItem: CPMessageTrailingItem\nThe configuration’s item.\nenum CPMessageTrailingItem\nThe accessories that a message list item can display in its trailing region.\nGetting the Trailing Image\nvar trailingImage: UIImage?\nThe configuration’s image.\nRelationships\nInherits From\nNSObject\nSee Also\nManaging Leading and Trailing Configurations\nvar leadingConfiguration: CPMessageListItemLeadingConfiguration\nThe configuration of the list item’s leading region.\nclass CPMessageListItemLeadingConfiguration\nAn object that describes the appearance of a message list item’s leading region.\nvar trailingConfiguration: CPMessageListItemTrailingConfiguration?\nThe configuration of the list item’s trailing region."
  },
  {
    "title": "startButtonTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptrippreviewtextconfiguration/3014034-startbuttontitle",
    "html": "Discussion\n\nWhen the title is nil, the button displays a system-provided title.\n\nSee Also\nSetting Button Titles\nvar additionalRoutesButtonTitle: String?\nThe title displayed on the routes button.\nvar overviewButtonTitle: String?\nThe title displayed on the overview button."
  },
  {
    "title": "additionalRoutesButtonTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptrippreviewtextconfiguration/3014031-additionalroutesbuttontitle",
    "html": "Discussion\n\nWhen the title is nil, the button displays a system-provided title.\n\nSee Also\nSetting Button Titles\nvar startButtonTitle: String?\nThe title displayed on the start button.\nvar overviewButtonTitle: String?\nThe title displayed on the overview button."
  },
  {
    "title": "CPMessageListItemLeadingConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitemleadingconfiguration",
    "html": "Overview\n\nUse a leading configuration to describe the visual elements that a message list item’s leading region contains. The region can show a CPMessageLeadingItem, an image, and an unread indicator.\n\nConfigurations are immutable. To modify the list item’s leading configuration, update its leadingConfiguration property with a new configuration. CarPlay detects the change and redraws the message list item.\n\nTopics\nCreating a Configuration\ninit(leadingItem: CPMessageLeadingItem, leadingImage: UIImage?, unread: Bool)\nCreates a leading configuration that contains an item and an image.\nlet CPMaximumMessageItemImageSize: CGSize\nThe maximum size of a message list item’s image.\nGetting the Leading Item\nvar leadingItem: CPMessageLeadingItem\nThe configuration’s item.\nenum CPMessageLeadingItem\nThe accessories that a message list item can display in its leading region.\nGetting the Configuration’s State\nvar leadingImage: UIImage?\nThe configuration’s image.\nvar isUnread: Bool\nA Boolean value that determines whether the message list item displays an unread indicator.\nRelationships\nInherits From\nNSObject\nSee Also\nManaging Leading and Trailing Configurations\nvar leadingConfiguration: CPMessageListItemLeadingConfiguration\nThe configuration of the list item’s leading region.\nvar trailingConfiguration: CPMessageListItemTrailingConfiguration?\nThe configuration of the list item’s trailing region.\nclass CPMessageListItemTrailingConfiguration\nAn object that describes the appearance of a message list item’s trailing region."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagecomposebarbutton/3551792-init",
    "html": "Return Value\n\nA message compose button with a system-provided image.\n\nDiscussion\n\nNote\n\nThis button type does not use a handler. Instead, tapping this button activates Siri and initiates the compose message flow.\n\nSee Also\nCreating a Message Compose Bar Button\ninit(image: UIImage)\nCreates a message compose button that displays a custom image."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3751973-isenabled",
    "html": "Discussion\n\nThe default value is true."
  },
  {
    "title": "trailingConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3551804-trailingconfiguration",
    "html": "Discussion\n\nAn instance of CPMessageListItemTrailingConfiguration that describes the visual elements of the list item’s trailing region. The region can show a CPMessageTrailingItem and an image.\n\nSee Also\nManaging Leading and Trailing Configurations\nvar leadingConfiguration: CPMessageListItemLeadingConfiguration\nThe configuration of the list item’s leading region.\nclass CPMessageListItemLeadingConfiguration\nAn object that describes the appearance of a message list item’s leading region.\nclass CPMessageListItemTrailingConfiguration\nAn object that describes the appearance of a message list item’s trailing region."
  },
  {
    "title": "init(startButtonTitle:additionalRoutesButtonTitle:overviewButtonTitle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptrippreviewtextconfiguration/3014032-init",
    "html": "Parameters\nstartButtonTitle\n\nThe title to display on the start button. Set to nil to display the system-provided title.\n\nadditionalRoutesButtonTitle\n\nThe title to display on the routes button. Set to nil to display the system-provided title.\n\noverviewButtonTitle\n\nThe title to display on the overview button. Set to nil to display the system-provided title.\n\nReturn Value\n\nA newly initialized trip preview text configuration."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3667724-userinfo",
    "html": "Discussion\n\nUse this property to attach a value that provides additional context to the list item."
  },
  {
    "title": "trailingText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3551805-trailingtext",
    "html": "Discussion\n\nThe list item displays any supplementaty text in its trailing region.\n\nSee Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nvar detailText: String?\nThe list item’s secondary text."
  },
  {
    "title": "listTemplate(_:didSelect:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplatedelegate/2977578-listtemplate",
    "html": "Required\n\nParameters\nlistTemplate\n\nThe list template that contains the selected item.\n\nitem\n\nThe item that the user selects.\n\ncompletionHandler\n\nThe block that your app must call after handling the selected item.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc listTemplate(_ listTemplate: CPListTemplate, didSelect item: CPListItem) async\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nWhen implementing this method, perform any necessary operations to prepare for completing the item selection, including updating your user interface. You must call completionHandler after handling the selected item to tell the system that it can continue. The list template displays an activity indicator—after a short delay—while it waits for your implementation to call the completion handler."
  },
  {
    "title": "detailText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3551801-detailtext",
    "html": "Discussion\n\nThe list item displays any secondary text below its primary text.\n\nSee Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nvar trailingText: String?\nThe list item’s supplementary text."
  },
  {
    "title": "handler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpselectablelistitem/3667722-handler",
    "html": "Required"
  },
  {
    "title": "leadingConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem/3551803-leadingconfiguration",
    "html": "Discussion\n\nAn instance of CPMessageListItemLeadingConfiguration that describes the visual elements of the list item’s leading region. The region can show a CPMessageLeadingItem, an image, and an unread indicator.\n\nSee Also\nManaging Leading and Trailing Configurations\nclass CPMessageListItemLeadingConfiguration\nAn object that describes the appearance of a message list item’s leading region.\nvar trailingConfiguration: CPMessageListItemTrailingConfiguration?\nThe configuration of the list item’s trailing region.\nclass CPMessageListItemTrailingConfiguration\nAn object that describes the appearance of a message list item’s trailing region."
  },
  {
    "title": "headerSubtitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/3778538-headersubtitle",
    "html": "See Also\nConfiguring Section Headers\nvar headerButton: CPButton?\nA button that the section header displays.\nvar headerImage: UIImage?\nAn image that the section header displays."
  },
  {
    "title": "text | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplateitem/3667719-text",
    "html": "Required\n\nSee Also\nManaging Content\nvar userInfo: Any?\nAn opaque value for the list item.\n\nRequired"
  },
  {
    "title": "headerButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/3778536-headerbutton",
    "html": "See Also\nConfiguring Section Headers\nvar headerImage: UIImage?\nAn image that the section header displays.\nvar headerSubtitle: String?\nA string that the header displays as a subtitle."
  },
  {
    "title": "headerImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/3778537-headerimage",
    "html": "Discussion\n\nThe maximum size of the section header image is CPMaximumListSectionImageSize.\n\nProvide a UIImage that is display-ready. To provide an image that includes light and dark styles, use an asset from your asset catalog that includes both styles, or use a UIImageAsset to combine two UIImage instances into a single image with both styles.\n\nTo size your header image properly, consider the display scale of the car screen. Use UIImageAsset to combine multiple images with different trait collections into a single image. For more information about trait collections for CarPlay, see carTraitCollection.\n\nSee Also\nConfiguring Section Headers\nvar headerButton: CPButton?\nA button that the section header displays.\nvar headerSubtitle: String?\nA string that the header displays as a subtitle."
  },
  {
    "title": "sectionIndexTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/2968320-sectionindextitle",
    "html": "Discussion\n\nThe system displays only the first character of the section index title.\n\nSee Also\nGetting Supplementary Information\nvar header: String?\nThe section’s header text."
  },
  {
    "title": "init(text:images:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistimagerowitem/3650361-init",
    "html": "Parameters\ntext\n\nThe list item’s primary text.\n\nimages\n\nAn array of images to display in the list item’s image row.\n\nDiscussion\n\nProvide images that are display-ready. If necessary, provide light and dark variants of each image using an asset catalog, or use instances of UIImageAsset and register an image for each interface style.\n\nTo properly size your images, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property. At runtime, use maximumImageSize to determine the maximum size that CarPlay allows for an image, and CPMaximumNumberOfGridImages to establish the total number of images that an image row can display. The list item may display fewer images, depending on the width of the vehicle’s primary screen.\n\nCarPlay doesn’t support animated images. If you provide animated images, CarPlay uses only the first image in each animation sequence."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplateitem/3751896-isenabled",
    "html": "Required"
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplateitem/3667720-userinfo",
    "html": "Required\n\nSee Also\nManaging Content\nvar text: String?\nThe item’s primary text.\n\nRequired"
  },
  {
    "title": "item(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/3601120-item",
    "html": "Parameters\nindex\n\nThe item’s index in the section.\n\nDiscussion\n\nThe index must be within the bounds of the items array, otherwise, your app throws an exception.\n\nSee Also\nGetting Items\nvar items: [CPListTemplateItem]\nThe list of items for the section.\nfunc index(of: CPListTemplateItem) -> Int\nReturns the index of the specified item."
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/2977577-items",
    "html": "See Also\nGetting Items\nfunc index(of: CPListTemplateItem) -> Int\nReturns the index of the specified item.\nfunc item(at: Int) -> CPListTemplateItem\nReturns the item at the specified index."
  },
  {
    "title": "index(of:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/3601119-index",
    "html": "Parameters\nitem\n\nThe item to find in the section.\n\nReturn Value\n\nThe item’s index in the section, or NSNotFound if the section doesn’t contain the item.\n\nSee Also\nGetting Items\nvar items: [CPListTemplateItem]\nThe list of items for the section.\nfunc item(at: Int) -> CPListTemplateItem\nReturns the item at the specified index."
  },
  {
    "title": "header | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection/2968316-header",
    "html": "See Also\nGetting Supplementary Information\nvar sectionIndexTitle: String?\nThe section’s index title."
  },
  {
    "title": "mapTemplate(_:didDismiss:dismissalContext:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990962-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nnavigationAlert\n\nThe dismissed navigation alert.\n\ndismissalContext\n\nThe reason for dismissing the navigation alert.\n\nSee Also\nHandling Navigation Alerts\nfunc mapTemplate(CPMapTemplate, willShow: CPNavigationAlert)\nTells the delegate that the system will show the navigation alert.\nfunc mapTemplate(CPMapTemplate, didShow: CPNavigationAlert)\nTells the delegate that the system showed the navigation alert.\nfunc mapTemplate(CPMapTemplate, willDismiss: CPNavigationAlert, dismissalContext: CPNavigationAlert.DismissalContext)\nTells the delegate that the system is preparing to dismiss the navigation alert.\nenum CPNavigationAlert.DismissalContext\nA set of reasons for dismissing a navigation alert."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/2977574-userinfo",
    "html": "Discussion\n\nUse this property to attach a value that provides additional context to the list item. For example, you can attach a model object and reference it in the list item’s handler when processing the selection.\n\nSee Also\nManaging Configuration\nvar isEnabled: Bool\nA Boolean value that indicates if the item is enabled.\nvar handler: ((CPSelectableListItem, () -> Void) -> Void)?\nAn optional closure that CarPlay invokes when the user selects the list item."
  },
  {
    "title": "accessoryType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3551776-accessorytype",
    "html": "Discussion\n\nIf you update the list item to display an accessory image using the setAccessoryImage(_:) method, CarPlay sets this property’s value to CPListItemAccessoryType.none.\n\nSee Also\nManaging Accessories\nenum CPListItemAccessoryType\nThe accessory types that a list item can display.\nvar accessoryImage: UIImage?\nThe image that the list item displays in its trailing region.\nfunc setAccessoryImage(UIImage?)\nUpdates the list item’s accessory image."
  },
  {
    "title": "CPListItemAccessoryType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitemaccessorytype",
    "html": "Overview\n\nUse these constants to set the value of a list item’s accessoryType property. An accessory can provide additional context for a list item’s contents, or help communicate its behavior.\n\nTopics\nAccessory Types\ncase none\nDon’t show an accessory.\ncase disclosureIndicator\nShow a chevron icon.\ncase cloud\nShow a cloud icon.\nRelationships\nConforms To\nSendable\nSee Also\nManaging Accessories\nvar accessoryType: CPListItemAccessoryType\nThe accessory that the list item displays in its trailing region.\nvar accessoryImage: UIImage?\nThe image that the list item displays in its trailing region.\nfunc setAccessoryImage(UIImage?)\nUpdates the list item’s accessory image."
  },
  {
    "title": "accessoryImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3551775-accessoryimage",
    "html": "See Also\nManaging Accessories\nvar accessoryType: CPListItemAccessoryType\nThe accessory that the list item displays in its trailing region.\nenum CPListItemAccessoryType\nThe accessory types that a list item can display.\nfunc setAccessoryImage(UIImage?)\nUpdates the list item’s accessory image."
  },
  {
    "title": "setAccessoryImage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3626470-setaccessoryimage",
    "html": "Parameters\naccessoryImage\n\nThe image to display in the item’s trailing region.\n\nDiscussion\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property. At runtime, use maximumImageSize to determine the maximum size for a list item’s accessory image.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nCarPlay sets the accessoryType property’s value to CPListItemAccessoryType.none when you call this method.\n\nSee Also\nManaging Accessories\nvar accessoryType: CPListItemAccessoryType\nThe accessory that the list item displays in its trailing region.\nenum CPListItemAccessoryType\nThe accessory types that a list item can display.\nvar accessoryImage: UIImage?\nThe image that the list item displays in its trailing region."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpvoicecontrolstate/3014036-identifier",
    "html": "Discussion\n\nUse identifier when calling the activateVoiceControlState(withIdentifier:) method to activate the voice control state.\n\nSee Also\nGetting State Information\nvar titleVariants: [String]?\nThe array of title variants for the voice control state.\nvar image: UIImage?\nThe image displayed while the voice control template is in this state.\nvar repeats: Bool\nA Boolean value that indicates whether the display of an animated image repeats the animation sequence indefinitely."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpvoicecontrolstate/3014037-image",
    "html": "Discussion\n\nFor the animated images, the system enforces a minimum cycle duration of 0.3 seconds, and a maximum cycle duration of 5 seconds.\n\nSee Also\nGetting State Information\nvar identifier: String\nThe string that your app uses to identify the voice control state.\nvar titleVariants: [String]?\nThe array of title variants for the voice control state.\nvar repeats: Bool\nA Boolean value that indicates whether the display of an animated image repeats the animation sequence indefinitely."
  },
  {
    "title": "titleVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpvoicecontrolstate/3014040-titlevariants",
    "html": "Discussion\n\nWhen creating a voice control state, arrange the titles from most to least preferred. The system displays the first title found in the array that best fits the available screen space. Also, localize each title for display to the user, and be sure to include at least one title in the array.\n\nSee Also\nGetting State Information\nvar identifier: String\nThe string that your app uses to identify the voice control state.\nvar image: UIImage?\nThe image displayed while the voice control template is in this state.\nvar repeats: Bool\nA Boolean value that indicates whether the display of an animated image repeats the animation sequence indefinitely."
  },
  {
    "title": "searchTemplateSearchButtonPressed(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsearchtemplatedelegate/2984233-searchtemplatesearchbuttonpresse",
    "html": "Parameters\nsearchTemplate\n\nThe current search template.\n\nDiscussion\n\nYour implementation of this method should retrieve the search result, and display a CPListTemplate containing the search result items by calling pushTemplate(_:animated:completion:)."
  },
  {
    "title": "cancelTrip() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/2968400-canceltrip",
    "html": "See Also\nManaging Trip Navigation\nfunc finishTrip()\nTells the navigation session to finish the trip.\nfunc pauseTrip(for: CPNavigationSession.PauseReason, description: String?)\nTells the navigation session to pause the trip for the specified reason.\nenum CPNavigationSession.PauseReason\nA set of reasons for pausing a trip."
  },
  {
    "title": "CPLimitableUserInterface | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplimitableuserinterface",
    "html": "Topics\nUser Interface Limits\nstatic var keyboard: CPLimitableUserInterface\nIndicates that the car is limiting the keyboard display.\nstatic var lists: CPLimitableUserInterface\nIndicates that the car is limiting the display of lists.\nInitializers\ninit(rawValue: UInt)\nInitializes a limitable user interface element using the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nGetting the Limits\nvar limitedUserInterfaces: CPLimitableUserInterface\nA bit mask value that indicates the user interface limits."
  },
  {
    "title": "CPContentStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontentstyle",
    "html": "Overview\n\nThe vehicle selects the content style according to the ambient light level. Your navigation app can use this value to determine the most appropriate style of map content to draw in its base view. The content style is independent of the user interface style, which controls light and dark mode.\n\nYou don’t create instances of CPContentStyle. Instead, the session configuration provides the current content style, and it notifies its delegate of any changes. See CPSessionConfiguration for more information.\n\nTopics\nCreating a Content Style\ninit(rawValue: UInt)\nCreates a content style from a raw value.\nContent Styles\nstatic var dark: CPContentStyle\nThe indication from the vehicle to draw the content in a dark style.\nstatic var light: CPContentStyle\nThe indication from the vehicle to draw the content in a light style.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nGetting the Content Style\nvar contentStyle: CPContentStyle\nThe content style that the vehicle selects."
  },
  {
    "title": "pauseTrip(for:description:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/3014027-pausetrip",
    "html": "Parameters\nreason\n\nThe reason for pausing the trip.\n\ndescription\n\nAn optional description of the pause reason. To use a system-provided value, set this parameter to nil.\n\nSee Also\nManaging Trip Navigation\nfunc cancelTrip()\nTells the navigation session to cancel the trip.\nfunc finishTrip()\nTells the navigation session to finish the trip.\nenum CPNavigationSession.PauseReason\nA set of reasons for pausing a trip."
  },
  {
    "title": "contentStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsessionconfiguration/3368177-contentstyle",
    "html": "Discussion\n\nThe vehicle selects the content style according to the ambient light level. Your navigation app can use this value to determine the most appropriate style of map content to draw in its base view. The content style is independent of the user interface style, which controls light and dark mode.\n\nSee Also\nGetting the Content Style\nstruct CPContentStyle\nThe types of content style that the vehicle allows."
  },
  {
    "title": "finishTrip() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/2968401-finishtrip",
    "html": "See Also\nManaging Trip Navigation\nfunc cancelTrip()\nTells the navigation session to cancel the trip.\nfunc pauseTrip(for: CPNavigationSession.PauseReason, description: String?)\nTells the navigation session to pause the trip for the specified reason.\nenum CPNavigationSession.PauseReason\nA set of reasons for pausing a trip."
  },
  {
    "title": "CPNavigationSession.PauseReason | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/pausereason",
    "html": "Topics\nReasons\ncase arrived\nThe user arrived at the destination.\ncase loading\nThe system is loading the route.\ncase locating\nThe system is locating the destination.\ncase proceedToRoute\nThe system is waiting for the user to proceed to the route.\ncase rerouting\nThe system is rerouting the trip.\nRelationships\nConforms To\nSendable\nSee Also\nManaging Trip Navigation\nfunc cancelTrip()\nTells the navigation session to cancel the trip.\nfunc finishTrip()\nTells the navigation session to finish the trip.\nfunc pauseTrip(for: CPNavigationSession.PauseReason, description: String?)\nTells the navigation session to pause the trip for the specified reason."
  },
  {
    "title": "CPSessionConfigurationDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsessionconfigurationdelegate",
    "html": "Topics\nHandling Content Style Changes\nfunc sessionConfiguration(CPSessionConfiguration, contentStyleChanged: CPContentStyle)\nTells the delegate that the vehicle changed its selected content style.\nHandling Limit Changes\nfunc sessionConfiguration(CPSessionConfiguration, limitedUserInterfacesChanged: CPLimitableUserInterface)\nTells the delegate that the system changed keyboard or list limits on the user interface.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nCreating a Session Configuration\ninit(delegate: CPSessionConfigurationDelegate)\nCreates a session configuration with a delegate."
  },
  {
    "title": "updateEstimates(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/2968406-updateestimates",
    "html": "Parameters\nestimates\n\nThe updated travel estimates.\n\nmaneuver\n\nThe maneuver to update.\n\nSee Also\nUpdating Travel Estimates\nclass CPTravelEstimates\nAn object that describes the time and distance remaining for a maneuver in a navigation session."
  },
  {
    "title": "upcomingManeuvers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession/2984232-upcomingmaneuvers",
    "html": "Discussion\n\nThe system displays multiple maneuvers at the same time. However, the system may limit the number of visible maneuvers.\n\nSee Also\nManaging Upcoming Maneuvers\nclass CPManeuver\nAn object that describes a single navigation instruction."
  },
  {
    "title": "instructionVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/2977579-instructionvariants",
    "html": "Discussion\n\nLocalize each variant for display to the user, and make sure the array contains at least one variant. The system displays the first variant that fits into the available screen space, so arrange the variants in order from most- to least-preferred.\n\nNote\n\nIf you provide both instructionVariants and attributedInstructionVariants, the system displays instructions from the attributed instruction variants array.\n\nSee Also\nProviding Instructions\nvar dashboardInstructionVariants: [String]\nAn array of instruction variants for the CarPlay dashboard.\nvar notificationInstructionVariants: [String]\nAn array of instruction variants for notification banners."
  },
  {
    "title": "init(delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsessionconfiguration/2968427-init",
    "html": "Parameters\ndelegate\n\nThe delegate object.\n\nReturn Value\n\nA newly initialized session configuration.\n\nSee Also\nCreating a Session Configuration\nprotocol CPSessionConfigurationDelegate\nA protocol for receiving notifications about changes to vehicle properties and configuration."
  },
  {
    "title": "CPNavigationAlert.DismissalContext.userDismissed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/dismissalcontext/userdismissed",
    "html": "See Also\nDismissal Reasons\ncase timeout\nThe system dismissed the navigation alert due to a timeout.\ncase systemDismissed\nThe system dismissed the navigation alert."
  },
  {
    "title": "setRootTemplate(_:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/2968298-setroottemplate",
    "html": "Deprecated\n\nUse setRootTemplate(_:animated:completion:) instead.\n\nParameters\nrootTemplate\n\nThe root template. Replaces the current rootTemplate, if one exists.\n\nanimated\n\nSet to true to animate the presentation of the root template; ignored if there isn't a current rootTemplate.\n\nSee Also\nDeprecated Methods\nfunc pushTemplate(CPTemplate, animated: Bool)\nPushes a template onto the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popTemplate(animated: Bool)\nPops the top template from the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popToRootTemplate(animated: Bool)\nPops all templates on the stack—except the root template—and updates the CarPlay display.\nDeprecated\nfunc pop(to: CPTemplate, animated: Bool)\nPops templates until the specified template is at the top of the navigation stack.\nDeprecated\nfunc presentTemplate(CPTemplate, animated: Bool)\nPresents a template modally.\nDeprecated\nfunc dismissTemplate(animated: Bool)\nDismisses the template that the interface controller is displaying modally.\nDeprecated"
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmapbutton/2968335-isenabled",
    "html": "Discussion\n\nThe default value is true.\n\nSee Also\nControlling the Button\nvar isHidden: Bool\nA Boolean value that hides and shows the map button."
  },
  {
    "title": "focusedImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmapbutton/2968336-focusedimage",
    "html": "Discussion\n\nIf focusedImage is nil, the button uses image as the default, creating a focused image using the alpha values from the image.\n\nSee Also\nProviding Button Images\nvar image: UIImage?\nThe image to display on the button."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmapbutton/2968338-image",
    "html": "Discussion\n\nThis property doesn't support animated images. If it's set with an animated image, the button displays the first image in the animated sequence.\n\nSee Also\nProviding Button Images\nvar focusedImage: UIImage?\nThe image to display when focus is on the button."
  },
  {
    "title": "init(handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmapbutton/2968339-init",
    "html": "Parameters\nhandler\n\nThe block invoked after the user taps the map button.\n\nReturn Value\n\nA newly initialized map button."
  },
  {
    "title": "application(_:didSelect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpapplicationdelegate/2984229-application",
    "html": "Parameters\napplication\n\nYour singleton app object.\n\nmaneuver\n\nThe maneuver selected by the user.\n\nDiscussion\n\nWhen your app posts a maneuver while running in the background, CarPlay may display a notification banner. If the user taps the banner, the system displays your app on the CarPlay screen, then calls this method."
  },
  {
    "title": "application(_:didSelect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpapplicationdelegate/2984230-application",
    "html": "Parameters\napplication\n\nYour singleton app object.\n\nnavigationAlert\n\nThe alert tapped by the user.\n\nDiscussion\n\nWhen your app posts a navigation alert while running in the background, CarPlay may display a notification banner. If the user taps the banner, the system displays your app on the CarPlay screen, then calls this method."
  },
  {
    "title": "pop(to:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/2968294-pop",
    "html": "Deprecated\n\nUse pop(to:animated:completion:) instead.\n\nParameters\ntargetTemplate\n\nThe template that you want at the top of the stack. The template must be on the navigation stack before you call this method.\n\nanimated\n\nA Boolean value that indicates whether the system animates the display of transitioning templates. Set to true to animate the transition.\n\nSee Also\nDeprecated Methods\nfunc setRootTemplate(CPTemplate, animated: Bool)\nSets the root template, starting a new stack for the template navigation hierarchy.\nDeprecated\nfunc pushTemplate(CPTemplate, animated: Bool)\nPushes a template onto the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popTemplate(animated: Bool)\nPops the top template from the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popToRootTemplate(animated: Bool)\nPops all templates on the stack—except the root template—and updates the CarPlay display.\nDeprecated\nfunc presentTemplate(CPTemplate, animated: Bool)\nPresents a template modally.\nDeprecated\nfunc dismissTemplate(animated: Bool)\nDismisses the template that the interface controller is displaying modally.\nDeprecated"
  },
  {
    "title": "maximumRating | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationratingitem/3667711-maximumrating",
    "html": "Discussion\n\nThis property is an NSNumber that contains a value in the range of 1 to 5. The value is a whole number.\n\nSee Also\nAccessing the Item's Attributes\nvar rating: NSNumber?\nThe current rating that the template displays."
  },
  {
    "title": "init(title:detail:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationitem/3664500-init",
    "html": "Parameters\ntitle\n\nThe text that the template displays as the item’s title.\n\ndetail\n\nThe text that the template displays below or beside the title, depending on the template’s layout. See CPInformationTemplateLayout for more information."
  },
  {
    "title": "CPTextButtonStyle.normal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptextbuttonstyle/normal",
    "html": "See Also\nButton Text Styles\ncase confirm\nA style that indicates the button confirms an action and changes data.\ncase cancel\nA style that indicates the button cancels an action and doesn’t change data."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/2968269-title",
    "html": "Discussion\n\nSetting this property has an effect only when the button type is CPBarButton.Type.text.\n\nSee Also\nConfiguring the Button\nvar isEnabled: Bool\nA Boolean value that enables and disables the bar button.\nvar image: UIImage?\nThe image displayed on the bar button."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/2968267-image",
    "html": "Discussion\n\nIf you provide an animated image, the button displays only the first image in the animation sequence.\n\nSetting this property has an effect only when the button type is CPBarButton.Type.image.\n\nSee Also\nConfiguring the Button\nvar isEnabled: Bool\nA Boolean value that enables and disables the bar button.\nvar title: String?\nThe title displayed on the bar button."
  },
  {
    "title": "CPGridButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpgridbutton",
    "html": "Topics\nCreating a Grid Button\ninit(titleVariants: [String], image: UIImage, handler: ((CPGridButton) -> Void)?)\nCreates a grid button with the specified title variants, image, and action handler.\nControlling the Grid Button\nvar isEnabled: Bool\nA Boolean value that enables and disables the grid button.\nObtaining Grid Button Information\nvar titleVariants: [String]\nAn array of title variants for the button.\nvar image: UIImage\nThe image displayed on the button.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nCreating a Grid Template\ninit(title: String?, gridButtons: [CPGridButton])\nCreates a grid template with a title and a set of buttons."
  },
  {
    "title": "init(image:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagecomposebarbutton/3551793-init",
    "html": "Parameters\nimage\n\nThe image to display on the button.\n\nReturn Value\n\nA message compose button with the custom image.\n\nDiscussion\n\nNote\n\nThis button type does not use a handler. Instead, tapping this button activates Siri and initiates the compose message flow.\n\nSee Also\nCreating a Message Compose Bar Button\ninit()\nCreates a message compose button with a system-provided image."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/2968290-delegate",
    "html": "See Also\nConfiguring the Interface Controller\nprotocol CPInterfaceControllerDelegate\nThe interface that an object implements to serve as a delegate to an interface controller.\nvar prefersDarkUserInterfaceStyle: Bool\nA Boolean value that determines whether the system draws the user interface in Dark Mode.\nfunc setRootTemplate(CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nSets the root template of the navigation hierarchy."
  },
  {
    "title": "CPTravelEstimates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptravelestimates",
    "html": "Topics\nCreating a Travel Estimates Object\ninit(distanceRemaining: Measurement<UnitLength>, timeRemaining: TimeInterval)\nCreates travel estimates with remaining distance and time.\nGetting Travel Estimates\nvar distanceRemaining: Measurement<UnitLength>\nThe remaining distance for the travel estimate.\nvar timeRemaining: TimeInterval\nThe remaining time for the travel estimate.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nUpdating Travel Estimates\nfunc updateEstimates(CPTravelEstimates, for: CPManeuver)\nUpdates the travel estimates for the specified maneuver."
  },
  {
    "title": "CPMapTemplate.PanDirection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/pandirection",
    "html": "Topics\nPan Directions\nstatic var down: CPMapTemplate.PanDirection\nThe user panned the map downward.\nstatic var left: CPMapTemplate.PanDirection\nThe user panned the map to the left.\nstatic var right: CPMapTemplate.PanDirection\nThe user panned the map to the right.\nstatic var up: CPMapTemplate.PanDirection\nThe user panned the map upward.\nInitializers\ninit(rawValue: Int)\nInitializes a pan direction using the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nPanning the Map\nfunc mapTemplateDidShowPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is visible on the map.\nfunc mapTemplateWillDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface will disappear from the map.\nfunc mapTemplateDidDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is no longer visible on the map.\nfunc mapTemplateDidBeginPanGesture(CPMapTemplate)\nTells the delegate that the pan gesture has started.\nfunc mapTemplate(CPMapTemplate, panBeganWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is starting to pan the map.\nfunc mapTemplate(CPMapTemplate, panWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is panning in a certain direction on the map.\nfunc mapTemplate(CPMapTemplate, panEndedWith: CPMapTemplate.PanDirection)\nTells the delegate that the user stopped panning the map.\nfunc mapTemplate(CPMapTemplate, didEndPanGestureWithVelocity: CGPoint)\nTells the delegate that the pan gesture ended with the specified velocity.\nfunc mapTemplate(CPMapTemplate, didUpdatePanGestureWithTranslation: CGPoint, velocity: CGPoint)\nTells the delegate that the pan gesture changed."
  },
  {
    "title": "CPTrip | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptrip",
    "html": "Overview\n\nA trip represents a journey consisting of an origin, a destination, and up to three route choices. Use CPRouteChoice to define each possible route choice.\n\nYou create trips after the user has selected a destination, and present up to twelve trip previews by calling showTripPreviews(_:textConfiguration:) on the map template.\n\nYou provide estimates for each trip using the map template’s updateEstimates(_:for:) method, and must update these estimates if the remaining time or distance changes.\n\nTopics\nCreating a Trip\ninit(origin: MKMapItem, destination: MKMapItem, routeChoices: [CPRouteChoice])\nCreates a trip with an origin, destination, and route choices.\nclass CPRouteChoice\nA possible route for a trip.\nGetting the Trip's Origin and Destination\nvar origin: MKMapItem\nThe trip's origin.\nvar destination: MKMapItem\nThe trip's destination.\nGetting Route Choices\nvar routeChoices: [CPRouteChoice]\nThe list of route choices for the trip.\nProviding Additional Information\nvar userInfo: Any?\nA custom object associated with the trip.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nGetting the Trip\nvar trip: CPTrip\nThe trip associated with the navigation session."
  },
  {
    "title": "mapTemplate(_:panWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990966-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\ndirection\n\nThe direction to move on the map.\n\nSee Also\nPanning the Map\nfunc mapTemplateDidShowPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is visible on the map.\nfunc mapTemplateWillDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface will disappear from the map.\nfunc mapTemplateDidDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is no longer visible on the map.\nfunc mapTemplateDidBeginPanGesture(CPMapTemplate)\nTells the delegate that the pan gesture has started.\nfunc mapTemplate(CPMapTemplate, panBeganWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is starting to pan the map.\nfunc mapTemplate(CPMapTemplate, panEndedWith: CPMapTemplate.PanDirection)\nTells the delegate that the user stopped panning the map.\nstruct CPMapTemplate.PanDirection\nThe directions a user can pan (or move) a map displayed on the CarPlay screen.\nfunc mapTemplate(CPMapTemplate, didEndPanGestureWithVelocity: CGPoint)\nTells the delegate that the pan gesture ended with the specified velocity.\nfunc mapTemplate(CPMapTemplate, didUpdatePanGestureWithTranslation: CGPoint, velocity: CGPoint)\nTells the delegate that the pan gesture changed."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontact/3650347-image",
    "html": "Discussion\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nSee Also\nConfiguring the Contact’s Attributes\nvar name: String\nThe contact’s name.\nvar subtitle: String?\nA subtitle that the template displays in addition to the contact’s name.\nvar informativeText: String?\nAdditional text that the template displays."
  },
  {
    "title": "mapTemplate(_:didUpdatePanGestureWithTranslation:velocity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/3019567-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\ntranslation\n\nThe updated translation point.\n\nvelocity\n\nThe velocity of the pan gesture.\n\nDiscussion\n\nCarPlay doesn’t call this method when connected to some CarPlay systems.\n\nSee Also\nPanning the Map\nfunc mapTemplateDidShowPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is visible on the map.\nfunc mapTemplateWillDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface will disappear from the map.\nfunc mapTemplateDidDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is no longer visible on the map.\nfunc mapTemplateDidBeginPanGesture(CPMapTemplate)\nTells the delegate that the pan gesture has started.\nfunc mapTemplate(CPMapTemplate, panBeganWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is starting to pan the map.\nfunc mapTemplate(CPMapTemplate, panWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is panning in a certain direction on the map.\nfunc mapTemplate(CPMapTemplate, panEndedWith: CPMapTemplate.PanDirection)\nTells the delegate that the user stopped panning the map.\nstruct CPMapTemplate.PanDirection\nThe directions a user can pan (or move) a map displayed on the CarPlay screen.\nfunc mapTemplate(CPMapTemplate, didEndPanGestureWithVelocity: CGPoint)\nTells the delegate that the pan gesture ended with the specified velocity."
  },
  {
    "title": "mapTemplate(_:panEndedWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990965-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\ndirection\n\nThe direction of the last move on the map.\n\nSee Also\nPanning the Map\nfunc mapTemplateDidShowPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is visible on the map.\nfunc mapTemplateWillDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface will disappear from the map.\nfunc mapTemplateDidDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is no longer visible on the map.\nfunc mapTemplateDidBeginPanGesture(CPMapTemplate)\nTells the delegate that the pan gesture has started.\nfunc mapTemplate(CPMapTemplate, panBeganWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is starting to pan the map.\nfunc mapTemplate(CPMapTemplate, panWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is panning in a certain direction on the map.\nstruct CPMapTemplate.PanDirection\nThe directions a user can pan (or move) a map displayed on the CarPlay screen.\nfunc mapTemplate(CPMapTemplate, didEndPanGestureWithVelocity: CGPoint)\nTells the delegate that the pan gesture ended with the specified velocity.\nfunc mapTemplate(CPMapTemplate, didUpdatePanGestureWithTranslation: CGPoint, velocity: CGPoint)\nTells the delegate that the pan gesture changed."
  },
  {
    "title": "mapTemplate(_:didEndPanGestureWithVelocity:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/3014008-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nvelocity\n\nThe velocity of the pan gesture.\n\nDiscussion\n\nCarPlay doesn’t call this method when connected to some CarPlay systems.\n\nSee Also\nPanning the Map\nfunc mapTemplateDidShowPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is visible on the map.\nfunc mapTemplateWillDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface will disappear from the map.\nfunc mapTemplateDidDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is no longer visible on the map.\nfunc mapTemplateDidBeginPanGesture(CPMapTemplate)\nTells the delegate that the pan gesture has started.\nfunc mapTemplate(CPMapTemplate, panBeganWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is starting to pan the map.\nfunc mapTemplate(CPMapTemplate, panWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is panning in a certain direction on the map.\nfunc mapTemplate(CPMapTemplate, panEndedWith: CPMapTemplate.PanDirection)\nTells the delegate that the user stopped panning the map.\nstruct CPMapTemplate.PanDirection\nThe directions a user can pan (or move) a map displayed on the CarPlay screen.\nfunc mapTemplate(CPMapTemplate, didUpdatePanGestureWithTranslation: CGPoint, velocity: CGPoint)\nTells the delegate that the pan gesture changed."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingimagebutton/3674210-image",
    "html": "Discussion\n\nThe button displays images no larger than CPNowPlayingButtonMaximumImageSize. If you use an animated image, this property returns the first image in the animation sequence."
  },
  {
    "title": "init(image:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingimagebutton/3650367-init",
    "html": "Parameters\nimage\n\nAn image to display on the button.\n\nhandler\n\nA closure that the button invokes when the user taps it.\n\nDiscussion\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen—see your interface controller’s carTraitCollection property—and make sure it is no larger than CPNowPlayingButtonMaximumImageSize.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nSee Also\nCreating a Button\nlet CPNowPlayingButtonMaximumImageSize: CGSize\nThe maximum size CarPlay supports for a button’s image."
  },
  {
    "title": "actions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalerttemplate/3019558-actions",
    "html": "Discussion\n\nThe array must include at least one action.\n\nSee Also\nGetting the Alert Information\nvar titleVariants: [String]\nThe array of title variants."
  },
  {
    "title": "CPNowPlayingButtonMaximumImageSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingbuttonmaximumimagesize",
    "html": "See Also\nCreating a Button\ninit(image: UIImage, handler: ((CPNowPlayingButton) -> Void)?)\nCreates a Now Playing button that displays a custom image and invokes a handler."
  },
  {
    "title": "mapTemplateDidBeginPanGesture(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/3014011-maptemplatedidbeginpangesture",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nDiscussion\n\nCarPlay doesn’t call this method when connected to some CarPlay systems.\n\nSee Also\nPanning the Map\nfunc mapTemplateDidShowPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is visible on the map.\nfunc mapTemplateWillDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface will disappear from the map.\nfunc mapTemplateDidDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is no longer visible on the map.\nfunc mapTemplate(CPMapTemplate, panBeganWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is starting to pan the map.\nfunc mapTemplate(CPMapTemplate, panWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is panning in a certain direction on the map.\nfunc mapTemplate(CPMapTemplate, panEndedWith: CPMapTemplate.PanDirection)\nTells the delegate that the user stopped panning the map.\nstruct CPMapTemplate.PanDirection\nThe directions a user can pan (or move) a map displayed on the CarPlay screen.\nfunc mapTemplate(CPMapTemplate, didEndPanGestureWithVelocity: CGPoint)\nTells the delegate that the pan gesture ended with the specified velocity.\nfunc mapTemplate(CPMapTemplate, didUpdatePanGestureWithTranslation: CGPoint, velocity: CGPoint)\nTells the delegate that the pan gesture changed."
  },
  {
    "title": "mapTemplateWillDismissPanningInterface(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990977-maptemplatewilldismisspanningint",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nSee Also\nPanning the Map\nfunc mapTemplateDidShowPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is visible on the map.\nfunc mapTemplateDidDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is no longer visible on the map.\nfunc mapTemplateDidBeginPanGesture(CPMapTemplate)\nTells the delegate that the pan gesture has started.\nfunc mapTemplate(CPMapTemplate, panBeganWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is starting to pan the map.\nfunc mapTemplate(CPMapTemplate, panWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is panning in a certain direction on the map.\nfunc mapTemplate(CPMapTemplate, panEndedWith: CPMapTemplate.PanDirection)\nTells the delegate that the user stopped panning the map.\nstruct CPMapTemplate.PanDirection\nThe directions a user can pan (or move) a map displayed on the CarPlay screen.\nfunc mapTemplate(CPMapTemplate, didEndPanGestureWithVelocity: CGPoint)\nTells the delegate that the pan gesture ended with the specified velocity.\nfunc mapTemplate(CPMapTemplate, didUpdatePanGestureWithTranslation: CGPoint, velocity: CGPoint)\nTells the delegate that the pan gesture changed."
  },
  {
    "title": "mapTemplate(_:willDismiss:dismissalContext:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990972-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nnavigationAlert\n\nThe navigation alert to dismiss.\n\ndismissalContext\n\nThe reason for dismissing the navigation alert.\n\nSee Also\nHandling Navigation Alerts\nfunc mapTemplate(CPMapTemplate, willShow: CPNavigationAlert)\nTells the delegate that the system will show the navigation alert.\nfunc mapTemplate(CPMapTemplate, didShow: CPNavigationAlert)\nTells the delegate that the system showed the navigation alert.\nfunc mapTemplate(CPMapTemplate, didDismiss: CPNavigationAlert, dismissalContext: CPNavigationAlert.DismissalContext)\nTells the delegate that the system dismissed the navigation alert.\nenum CPNavigationAlert.DismissalContext\nA set of reasons for dismissing a navigation alert."
  },
  {
    "title": "mapTemplate(_:shouldShowNotificationFor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990969-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nnavigationAlert\n\nThe navigation alert to display as a notification.\n\nReturn Value\n\ntrue if the system should display the navigation alert as a notification; otherwise, false.\n\nSee Also\nDisplaying Notifications\nfunc mapTemplate(CPMapTemplate, shouldShowNotificationFor: CPManeuver) -> Bool\nAsks the delegate whether the system should display the maneuver as a notification when the app is in the background.\nfunc mapTemplate(CPMapTemplate, shouldUpdateNotificationFor: CPManeuver, with: CPTravelEstimates) -> Bool\nAsks the delegate whether the system should display the maneuver with updated travel estimates as a notification when the app is in the background."
  },
  {
    "title": "mapTemplate(_:willShow:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990973-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nnavigationAlert\n\nThe navigation alert to display.\n\nSee Also\nHandling Navigation Alerts\nfunc mapTemplate(CPMapTemplate, didShow: CPNavigationAlert)\nTells the delegate that the system showed the navigation alert.\nfunc mapTemplate(CPMapTemplate, willDismiss: CPNavigationAlert, dismissalContext: CPNavigationAlert.DismissalContext)\nTells the delegate that the system is preparing to dismiss the navigation alert.\nfunc mapTemplate(CPMapTemplate, didDismiss: CPNavigationAlert, dismissalContext: CPNavigationAlert.DismissalContext)\nTells the delegate that the system dismissed the navigation alert.\nenum CPNavigationAlert.DismissalContext\nA set of reasons for dismissing a navigation alert."
  },
  {
    "title": "mapTemplate(_:shouldUpdateNotificationFor:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990970-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nmaneuver\n\nThe current maneuver.\n\ntravelEstimates\n\nThe updated travel estimates.\n\nReturn Value\n\ntrue if the system should display the maneuver as a notification; otherwise, false.\n\nSee Also\nDisplaying Notifications\nfunc mapTemplate(CPMapTemplate, shouldShowNotificationFor: CPManeuver) -> Bool\nAsks the delegate whether the system should display the maneuver as a notification when the app is in the background.\nfunc mapTemplate(CPMapTemplate, shouldShowNotificationFor: CPNavigationAlert) -> Bool\nAsks the delegate whether the system should display the navigation alert as a notification when the app is in the background."
  },
  {
    "title": "mapTemplate(_:displayStyleFor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/3014010-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nmaneuver\n\nThe maneuver that the system applies the display style to.\n\nReturn Value\n\nA display style that determines the visual layout for the maneuver.\n\nDiscussion\n\nThe display style only applies to the second maneuver that you provide in the navigation session’s upcomingManeuvers array.\n\nSee Also\nSetting the Display Style\nstruct CPManeuverDisplayStyle\nA display style that determines the visual layout for a maneuver."
  },
  {
    "title": "mapTemplate(_:startedTrip:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990971-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\ntrip\n\nThe selected trip.\n\nrouteChoice\n\nThe selected route choice.\n\nSee Also\nHandling Navigation Events\nfunc mapTemplate(CPMapTemplate, selectedPreviewFor: CPTrip, using: CPRouteChoice)\nTells the delegate that the user selected a trip and route choice to preview.\nfunc mapTemplateDidCancelNavigation(CPMapTemplate)\nTells the delegate that the system canceled the navigation."
  },
  {
    "title": "CPManeuverDisplayStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuverdisplaystyle",
    "html": "Topics\nDIsplay Styles\nstatic var leadingSymbol: CPManeuverDisplayStyle\nThe symbol appears before the instructions for the maneuver.\nstatic var trailingSymbol: CPManeuverDisplayStyle\nThe symbol appears after the instructions for the maneuver.\nstatic var instructionOnly: CPManeuverDisplayStyle\nOnly the instructions appear for the maneuver.\nstatic var symbolOnly: CPManeuverDisplayStyle\nOnly the symbol appears for the maneuver.\nInitializers\ninit(rawValue: Int)\nInitializes a maneuver display style using the specified raw value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nSetting the Display Style\nfunc mapTemplate(CPMapTemplate, displayStyleFor: CPManeuver) -> CPManeuverDisplayStyle\nAsks the delegate for the maneuver’s display style."
  },
  {
    "title": "mapTemplateDidCancelNavigation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990974-maptemplatedidcancelnavigation",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nSee Also\nHandling Navigation Events\nfunc mapTemplate(CPMapTemplate, selectedPreviewFor: CPTrip, using: CPRouteChoice)\nTells the delegate that the user selected a trip and route choice to preview.\nfunc mapTemplate(CPMapTemplate, startedTrip: CPTrip, using: CPRouteChoice)\nTells the delegate that the user selected a trip and route choice to navigate."
  },
  {
    "title": "mapTemplate(_:selectedPreviewFor:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990967-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\ntrip\n\nThe selected trip.\n\nrouteChoice\n\nThe route chosen by the user.\n\nSee Also\nHandling Navigation Events\nfunc mapTemplate(CPMapTemplate, startedTrip: CPTrip, using: CPRouteChoice)\nTells the delegate that the user selected a trip and route choice to navigate.\nfunc mapTemplateDidCancelNavigation(CPMapTemplate)\nTells the delegate that the system canceled the navigation."
  },
  {
    "title": "mapTemplate(_:shouldShowNotificationFor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990968-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nmaneuver\n\nThe current maneuver.\n\nReturn Value\n\ntrue if the system should display the maneuver as a notification; otherwise, false.\n\nSee Also\nDisplaying Notifications\nfunc mapTemplate(CPMapTemplate, shouldUpdateNotificationFor: CPManeuver, with: CPTravelEstimates) -> Bool\nAsks the delegate whether the system should display the maneuver with updated travel estimates as a notification when the app is in the background.\nfunc mapTemplate(CPMapTemplate, shouldShowNotificationFor: CPNavigationAlert) -> Bool\nAsks the delegate whether the system should display the navigation alert as a notification when the app is in the background."
  },
  {
    "title": "isExplicitContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3650363-isexplicitcontent",
    "html": "Discussion\n\nIf true, the list item displays an explicit content indicator beside its primary text. The default value is false.\n\nSee Also\nManaging Playback Information\nvar isPlaying: Bool\nA Boolean value that determines whether the list item displays its Now Playing indicator.\nvar playingIndicatorLocation: CPListItemPlayingIndicatorLocation\nThe location where the list item displays its Now Playing indicator.\nenum CPListItemPlayingIndicatorLocation\nThe locations where a list item can display the Now Playing indicator.\nvar playbackProgress: CGFloat\nThe playback progress status for the content that the list item represents."
  },
  {
    "title": "maximumImageSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3551778-maximumimagesize",
    "html": "Discussion\n\nAt runtime, use this value to determine the maximum size for a list item’s image and accessory image.\n\nSee Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nfunc setText(String)\nUpdates the list item’s primary text.\nvar detailText: String?\nThe list item’s secondary text.\nfunc setDetailText(String?)\nUpdates the list item’s secondary text.\nvar image: UIImage?\nThe image that the list item displays in its leading region.\nfunc setImage(UIImage?)\nUpdates the list item’s image."
  },
  {
    "title": "CPListItem.AssistantCellVisibility | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/assistantcellvisibility",
    "html": "Topics\nControlling the Assistant Cell Visibility\ncase off\nThe assistant cell isn’t visible.\ncase always\nThe assistant cell is always visible.\ncase whileLimitedUIActive\nThe assistant cell is visible only while Limited UI mode is active.\nRelationships\nConforms To\nSendable\nSee Also\nManaging the Assistant Cell\nenum CPListItem.AssistantCellPosition\nConstants to specify the position of the assistant cell."
  },
  {
    "title": "isPlaying | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3551780-isplaying",
    "html": "Discussion\n\nIf true, the list item displays its Now Playing indicator and positions it using the location that the playingIndicatorLocation property specifies. The default value is false.\n\nSee Also\nManaging Playback Information\nvar isExplicitContent: Bool\nA Boolean value that determines whether the list item displays its explicit content indicator.\nvar playingIndicatorLocation: CPListItemPlayingIndicatorLocation\nThe location where the list item displays its Now Playing indicator.\nenum CPListItemPlayingIndicatorLocation\nThe locations where a list item can display the Now Playing indicator.\nvar playbackProgress: CGFloat\nThe playback progress status for the content that the list item represents."
  },
  {
    "title": "CPListItemPlayingIndicatorLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitemplayingindicatorlocation",
    "html": "Overview\n\nUse these constants to set the value of a list item’s playingIndicatorLocation property. When you set a list item’s isPlaying property to true, it uses the specified location to position the Now Playing indicator.\n\nTopics\nNow Playing Indicator Locations\ncase leading\nAlign the Now Playing indicator with the leading edge of the list item.\ncase trailing\nAlign the Now Playing indicator with the trailing edge of the list item.\nRelationships\nConforms To\nSendable\nSee Also\nManaging Playback Information\nvar isExplicitContent: Bool\nA Boolean value that determines whether the list item displays its explicit content indicator.\nvar isPlaying: Bool\nA Boolean value that determines whether the list item displays its Now Playing indicator.\nvar playingIndicatorLocation: CPListItemPlayingIndicatorLocation\nThe location where the list item displays its Now Playing indicator.\nvar playbackProgress: CGFloat\nThe playback progress status for the content that the list item represents."
  },
  {
    "title": "playingIndicatorLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3566414-playingindicatorlocation",
    "html": "Discussion\n\nIf the list item’s isPlaying property is set to true, it uses the value of this property to position its Now Playing indicator. The default value is CPListItemPlayingIndicatorLocation.leading.\n\nSee Also\nManaging Playback Information\nvar isExplicitContent: Bool\nA Boolean value that determines whether the list item displays its explicit content indicator.\nvar isPlaying: Bool\nA Boolean value that determines whether the list item displays its Now Playing indicator.\nenum CPListItemPlayingIndicatorLocation\nThe locations where a list item can display the Now Playing indicator.\nvar playbackProgress: CGFloat\nThe playback progress status for the content that the list item represents."
  },
  {
    "title": "playbackProgress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3551779-playbackprogress",
    "html": "Discussion\n\nIf the list item represents media content that is playable, set this property’s value to a fractional number between 0 and 1 to indicate its playback progress. The list item displays a progress bar that derives its value from this property.\n\nSee Also\nManaging Playback Information\nvar isExplicitContent: Bool\nA Boolean value that determines whether the list item displays its explicit content indicator.\nvar isPlaying: Bool\nA Boolean value that determines whether the list item displays its Now Playing indicator.\nvar playingIndicatorLocation: CPListItemPlayingIndicatorLocation\nThe location where the list item displays its Now Playing indicator.\nenum CPListItemPlayingIndicatorLocation\nThe locations where a list item can display the Now Playing indicator."
  },
  {
    "title": "CPListItem.AssistantCellPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/assistantcellposition",
    "html": "Topics\nControlling the Assistant Cell Position\ncase bottom\nPositions the assistant cell at the bottom of all visible cells.\ncase top\nPositions the assistant cell at the top of all visible cells.\nRelationships\nConforms To\nSendable\nSee Also\nManaging the Assistant Cell\nenum CPListItem.AssistantCellVisibility\nConstants to specify the visibility of the assistant cell."
  },
  {
    "title": "setImage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3626472-setimage",
    "html": "Parameters\nimage\n\nThe image to display in the item’s leading region.\n\nDiscussion\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property. At runtime, use maximumImageSize to determine the maximum size for a list item’s image.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nSee Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nfunc setText(String)\nUpdates the list item’s primary text.\nvar detailText: String?\nThe list item’s secondary text.\nfunc setDetailText(String?)\nUpdates the list item’s secondary text.\nvar image: UIImage?\nThe image that the list item displays in its leading region.\nclass var maximumImageSize: CGSize\nThe maximum size of a list item’s image and accessory image."
  },
  {
    "title": "setDetailText(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3626471-setdetailtext",
    "html": "Parameters\ndetailText\n\nThe list item’s secondary text.\n\nSee Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nfunc setText(String)\nUpdates the list item’s primary text.\nvar detailText: String?\nThe list item’s secondary text.\nvar image: UIImage?\nThe image that the list item displays in its leading region.\nfunc setImage(UIImage?)\nUpdates the list item’s image.\nclass var maximumImageSize: CGSize\nThe maximum size of a list item’s image and accessory image."
  },
  {
    "title": "init(identifier:titleVariants:image:repeats:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpvoicecontrolstate/3014038-init",
    "html": "Parameters\nidentifier\n\nA string that your app uses to identify the state. You can activate the state by calling activateVoiceControlState(withIdentifier:), passing in the identifier.\n\ntitleVariants\n\nAn array of title variants for the voice control state. When the system displays the title, it selects the title that best fits the available screen space, so arrange the titles from most to least preferred. Also, localize each title for display to the user, and be sure to include at least one title in the array.\n\nimage\n\nAn image, no bigger than 150 pt x 150 pt, that the voice control template displays when it's in this state. For an animated image, the system enforces a minimum cycle duration of 0.3 seconds, and a maximum cycle duration of 5 seconds.\n\nrepeats\n\nA Boolean value that indicates whether animation for image repeats indefinitely. Set to true to repeat the animation, or false to show the animation only once.\n\nReturn Value\n\nA newly initialized voice control state."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/2977568-image",
    "html": "See Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nfunc setText(String)\nUpdates the list item’s primary text.\nvar detailText: String?\nThe list item’s secondary text.\nfunc setDetailText(String?)\nUpdates the list item’s secondary text.\nfunc setImage(UIImage?)\nUpdates the list item’s image.\nclass var maximumImageSize: CGSize\nThe maximum size of a list item’s image and accessory image."
  },
  {
    "title": "text | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/2977573-text",
    "html": "See Also\nManaging Content\nfunc setText(String)\nUpdates the list item’s primary text.\nvar detailText: String?\nThe list item’s secondary text.\nfunc setDetailText(String?)\nUpdates the list item’s secondary text.\nvar image: UIImage?\nThe image that the list item displays in its leading region.\nfunc setImage(UIImage?)\nUpdates the list item’s image.\nclass var maximumImageSize: CGSize\nThe maximum size of a list item’s image and accessory image."
  },
  {
    "title": "detailText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/2977567-detailtext",
    "html": "See Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nfunc setText(String)\nUpdates the list item’s primary text.\nfunc setDetailText(String?)\nUpdates the list item’s secondary text.\nvar image: UIImage?\nThe image that the list item displays in its leading region.\nfunc setImage(UIImage?)\nUpdates the list item’s image.\nclass var maximumImageSize: CGSize\nThe maximum size of a list item’s image and accessory image."
  },
  {
    "title": "setText(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem/3667717-settext",
    "html": "Parameters\ntext\n\nThe list item’s primary text.\n\nSee Also\nManaging Content\nvar text: String?\nThe list item’s primary text.\nvar detailText: String?\nThe list item’s secondary text.\nfunc setDetailText(String?)\nUpdates the list item’s secondary text.\nvar image: UIImage?\nThe image that the list item displays in its leading region.\nfunc setImage(UIImage?)\nUpdates the list item’s image.\nclass var maximumImageSize: CGSize\nThe maximum size of a list item’s image and accessory image."
  },
  {
    "title": "dashboardInstructionVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3621838-dashboardinstructionvariants",
    "html": "Discussion\n\nLocalize each variant for display to the user, and make sure the array contains at least one variant. The system displays the first variant that fits into the available screen space, so arrange the variants in order from most- to least-preferred.\n\nNote\n\nIf you provide both dashboardInstructionVariants and dashboardAttributedInstructionVariants, the system displays instructions from the attributed instruction variants array. If you don’t provide dashboard variants, the system checks for attributedInstructionVariants, and then instructionVariants.\n\nSee Also\nProviding Instructions\nvar instructionVariants: [String]\nAn array of instruction variants for the maneuver.\nvar notificationInstructionVariants: [String]\nAn array of instruction variants for notification banners."
  },
  {
    "title": "attributedInstructionVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3013992-attributedinstructionvariants",
    "html": "Discussion\n\nLocalize each variant for display to the user, and make sure the array has at least one variant. The system displays the first variant that fits into the available screen space, so arrange the variants in order from most- to least-preferred.\n\nNote\n\nIf you provide both instructionVariants and attributedInstructionVariants, the system displays instructions from the attributed instruction variants array.\n\nThe attributed strings in the array can have only a single attribute—an NSTextAttachment. CarPlay removes all other attributes.\n\nUsing a text attachment attribute, you can add an image to a maneuver instruction as the example below shows. The maximum text attachment image size is 64 x 16 points.\n\nlet instruction = NSMutableAttributedString(string: \"Turn right on Apple Park Way\")\n\n\n// Attach an image.\nlet image = UIImage(systemName: \"arrow.turn.up.right\")!\nlet attachment = NSTextAttachment(image: image)\nlet container = NSAttributedString(attachment: attachment)\n\n\ninstruction.append(container)\n\n\nSee Also\nProviding Attributed Instructions\nvar dashboardAttributedInstructionVariants: [NSAttributedString]\nAn array of attributed instruction variants for the CarPlay dashboard.\nvar notificationAttributedInstructionVariants: [NSAttributedString]\nAn array of attributed instruction variants for notification banners."
  },
  {
    "title": "dashboardJunctionImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3621839-dashboardjunctionimage",
    "html": "Discussion\n\nProvide a junction image to show more visual details about the maneuver, such as the lane a driver should be in when making a turn.\n\nYou use a named image asset to supply variants for both dark and light interface styles, and initialize the image using init(named:). CarPlay then selects the correct image for the current interface style.\n\nNote\n\nThe maximum image size is 140 x 100 points. CarPlay scales a larger image to fit while maintaining its aspect ratio.\n\nIf you don’t provide a dashboard junction image, CarPlay uses junctionImage.\n\nSee Also\nProviding Junction Images\nvar junctionImage: UIImage?\nAn image that represents an upcoming junction."
  },
  {
    "title": "notificationInstructionVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3621842-notificationinstructionvariants",
    "html": "Discussion\n\nLocalize each variant for display to the user, and make sure the array contains at least one variant. The system displays the first variant that fits into the available screen space, so arrange the variants in order from most- to least-preferred.\n\nNote\n\nIf you provide both notificationInstructionVariants and notificationAttributedInstructionVariants, the system displays instructions from the attributed instruction variants array. If you don’t provide notification variants, the system checks for attributedInstructionVariants, and then instructionVariants.\n\nSee Also\nProviding Instructions\nvar instructionVariants: [String]\nAn array of instruction variants for the maneuver.\nvar dashboardInstructionVariants: [String]\nAn array of instruction variants for the CarPlay dashboard."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/2968333-userinfo",
    "html": "Discussion\n\nUse this property to store any arbitrary data related to the maneuver that you, or a part of your app that consumes maneuvers, may need later."
  },
  {
    "title": "notificationSymbolImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3621843-notificationsymbolimage",
    "html": "Discussion\n\nYou use a named image asset to supply variants for both dark and light interface styles, and initialize the image using init(named:). CarPlay then selects the correct image for the current interface style.\n\nIf you don’t provide a notification symbol image, CarPlay uses symbolImage.\n\nSee Also\nProviding Symbol Images\nvar symbolImage: UIImage?\nAn image that represents the maneuver.\nvar dashboardSymbolImage: UIImage?\nAn image for the CarPlay dashboard that represents the maneuver.\nvar symbolSet: CPImageSet?\nAn image set that represents the maneuver.\nDeprecated"
  },
  {
    "title": "notificationAttributedInstructionVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3621841-notificationattributedinstructio",
    "html": "Discussion\n\nLocalize each variant for display to the user, and make sure the array has at least one variant. The system displays the first variant that fits into the available screen space, so arrange the variants in order from most- to least-preferred.\n\nNote\n\nIf you provide both notificationInstructionVariants and notificationAttributedInstructionVariants, the system displays instructions from the attributed instruction variants array.\n\nThe attributed strings in the array can have only a single attribute—an NSTextAttachment. CarPlay removes all other attributes.\n\nUsing a text attachment attribute, you can add an image to a maneuver instruction as the example below shows. The maximum text attachment image size is 64 x 16 points.\n\nlet instruction = NSMutableAttributedString(string: \"Turn right on Apple Park Way\")\n\n\n// Attach an image.\nlet image = UIImage(systemName: \"arrow.turn.up.right\")!\nlet attachment = NSTextAttachment(image: image)\nlet container = NSAttributedString(attachment: attachment)\n\n\ninstruction.append(container)\n\n\nSee Also\nProviding Attributed Instructions\nvar attributedInstructionVariants: [NSAttributedString]\nAn array of attributed instruction variants for the maneuver.\nvar dashboardAttributedInstructionVariants: [NSAttributedString]\nAn array of attributed instruction variants for the CarPlay dashboard."
  },
  {
    "title": "dashboardAttributedInstructionVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3621837-dashboardattributedinstructionva",
    "html": "Discussion\n\nLocalize each variant for display to the user, and make sure the array has at least one variant. The system displays the first variant that fits into the available screen space, so arrange the variants in order from most- to least-preferred.\n\nNote\n\nIf you provide both dashboardInstructionVariants and dashboardAttributedInstructionVariants, the system displays instructions from the attributed instruction variants array.\n\nThe attributed strings in the array can have only a single attribute—an NSTextAttachment. CarPlay removes all other attributes.\n\nUsing a text attachment attribute, you can add an image to a maneuver instruction as the example below shows. The maximum text attachment image size is 64 x 16 points.\n\nlet instruction = NSMutableAttributedString(string: \"Turn right on Apple Park Way\")\n\n\n// Attach an image.\nlet image = UIImage(systemName: \"arrow.turn.up.right\")!\nlet attachment = NSTextAttachment(image: image)\nlet container = NSAttributedString(attachment: attachment)\n\n\ninstruction.append(container)\n\n\nSee Also\nProviding Attributed Instructions\nvar attributedInstructionVariants: [NSAttributedString]\nAn array of attributed instruction variants for the maneuver.\nvar notificationAttributedInstructionVariants: [NSAttributedString]\nAn array of attributed instruction variants for notification banners."
  },
  {
    "title": "symbolImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3183006-symbolimage",
    "html": "Discussion\n\nYou use a named image asset to supply variants for both dark and light interface styles, and initialize the image using init(named:). CarPlay then selects the correct image for the current interface style.\n\nSee Also\nProviding Symbol Images\nvar dashboardSymbolImage: UIImage?\nAn image for the CarPlay dashboard that represents the maneuver.\nvar notificationSymbolImage: UIImage?\nAn image for notification banners that represents the maneuver.\nvar symbolSet: CPImageSet?\nAn image set that represents the maneuver.\nDeprecated"
  },
  {
    "title": "symbolSet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3013994-symbolset",
    "html": "See Also\nProviding Symbol Images\nvar symbolImage: UIImage?\nAn image that represents the maneuver.\nvar dashboardSymbolImage: UIImage?\nAn image for the CarPlay dashboard that represents the maneuver.\nvar notificationSymbolImage: UIImage?\nAn image for notification banners that represents the maneuver."
  },
  {
    "title": "junctionImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver/3081779-junctionimage",
    "html": "Discussion\n\nProvide a junction image to show more visual details about the maneuver, such as the lane a driver should be in when making a turn.\n\nYou use a named image asset to supply variants for both dark and light interface styles, and initialize the image using init(named:). CarPlay then selects the correct image for the current interface style.\n\nNote\n\nThe maximum image size is 140 x 100 points. CarPlay scales a larger image to fit while maintaining its aspect ratio.\n\nSee Also\nProviding Junction Images\nvar dashboardJunctionImage: UIImage?\nAn image for the CarPlay dashboard that represents an upcoming junction."
  },
  {
    "title": "templateApplicationDashboardScene(_:didDisconnect:from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationdashboardscenedelegate/3516954-templateapplicationdashboardscen",
    "html": "Parameters\ntemplateApplicationDashboardScene\n\nThe scene disconnecting from the app.\n\ndashboardController\n\nThe controller that was managing this scene’s dashboard shortcut buttons.\n\nwindow\n\nThe window where your app was drawing its map content.\n\nDiscussion\n\nCarPlay calls this method after it disconnects your dashboard scene. You can use it to perform any cleanup.\n\nSee Also\nResponding to the Scene Life Cycle\nfunc templateApplicationDashboardScene(CPTemplateApplicationDashboardScene, didConnect: CPDashboardController, to: UIWindow)\nTells the delegate about the addition of a CarPlay Dashboard scene to your navigation app."
  },
  {
    "title": "init(title:gridButtons:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpgridtemplate/2968283-init",
    "html": "Parameters\ntitle\n\nThe title shown in the grid template's navigation bar.\n\ngridButtons\n\nAn array of grid buttons to display on the template.\n\nReturn Value\n\nA newly initialized grid template.\n\nSee Also\nCreating a Grid Template\nclass CPGridButton\nA menu item button displayed on a grid template."
  },
  {
    "title": "CPBarButtonStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbuttonstyle",
    "html": "Topics\nButton Styles\ncase none\nA style that provides no additional styling.\ncase rounded\nA style that provides a rounded background.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Button Style\nvar buttonType: CPBarButton.`Type`\nThe display type for the bar button.\nDeprecated\nvar buttonStyle: CPBarButtonStyle\nThe style to use when displaying the button."
  },
  {
    "title": "buttonType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/2968265-buttontype",
    "html": "See Also\nGetting the Button Style\nvar buttonStyle: CPBarButtonStyle\nThe style to use when displaying the button.\nenum CPBarButtonStyle\nThe display style of a bar button."
  },
  {
    "title": "buttonStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/3551729-buttonstyle",
    "html": "See Also\nGetting the Button Style\nvar buttonType: CPBarButton.`Type`\nThe display type for the bar button.\nDeprecated\nenum CPBarButtonStyle\nThe display style of a bar button."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/2968266-isenabled",
    "html": "Discussion\n\nThe default value is true.\n\nSee Also\nConfiguring the Button\nvar image: UIImage?\nThe image displayed on the bar button.\nvar title: String?\nThe title displayed on the bar button."
  },
  {
    "title": "CPBarButton.Type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/type",
    "html": "Topics\nButton Types\ncase text\nA text style bar button.\ncase image\nAn image style bar button.\nRelationships\nConforms To\nSendable\nSee Also\nCreating a CarPlay Bar Button\ninit(type: CPBarButton.`Type`, handler: CPBarButtonHandler?)\nCreates a bar button with a type and handler.\nDeprecated\ninit(image: UIImage, handler: CPBarButtonHandler?)\nCreates a bar button that displays an image.\ninit(title: String, handler: CPBarButtonHandler?)\nCreates a bar button that displays a text label.\ntypealias CPBarButtonHandler\nA block that CarPlay calls when the user taps a bar button."
  },
  {
    "title": "mapTemplate(_:panBeganWith:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990964-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\ndirection\n\nThe direction to move on the map.\n\nSee Also\nPanning the Map\nfunc mapTemplateDidShowPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is visible on the map.\nfunc mapTemplateWillDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface will disappear from the map.\nfunc mapTemplateDidDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is no longer visible on the map.\nfunc mapTemplateDidBeginPanGesture(CPMapTemplate)\nTells the delegate that the pan gesture has started.\nfunc mapTemplate(CPMapTemplate, panWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is panning in a certain direction on the map.\nfunc mapTemplate(CPMapTemplate, panEndedWith: CPMapTemplate.PanDirection)\nTells the delegate that the user stopped panning the map.\nstruct CPMapTemplate.PanDirection\nThe directions a user can pan (or move) a map displayed on the CarPlay screen.\nfunc mapTemplate(CPMapTemplate, didEndPanGestureWithVelocity: CGPoint)\nTells the delegate that the pan gesture ended with the specified velocity.\nfunc mapTemplate(CPMapTemplate, didUpdatePanGestureWithTranslation: CGPoint, velocity: CGPoint)\nTells the delegate that the pan gesture changed."
  },
  {
    "title": "CPDashboardButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpdashboardbutton",
    "html": "Topics\nCreating a Dashboard Button\ninit(titleVariants: [String], subtitleVariants: [String], image: UIImage, handler: ((CPDashboardButton) -> Void)?)\nCreates a dashboard button that displays a title, an optional subtitle, and an image.\nAccessing the Button Configuration\nvar titleVariants: [String]\nThe array of title variants for the button.\nvar subtitleVariants: [String]\nThe array of subtitle variants for the button.\nvar image: UIImage\nThe image the button displays.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nProviding Dashboard Buttons\nvar shortcutButtons: [CPDashboardButton]\nAn array of shortcut buttons to display on the CarPlay Dashboard."
  },
  {
    "title": "CPInstrumentClusterSetting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinstrumentclustersetting",
    "html": "Topics\nEnumeration Cases\ncase disabled\ncase enabled\ncase unspecified\ncase userPreference\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "CPContactDirectionsButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontactdirectionsbutton",
    "html": "Overview\n\nUse this button to get directions to the location of the template’s contact.\n\nIf your app doesn’t provide turn-by-turn navigation, use the maps URL scheme to launch the most recent navigation app. Call your template application scene’s open(_:options:completionHandler:) method and pass a URL that embeds the contact’s location. CarPlay provides this scene to your CPTemplateApplicationSceneDelegate when the scene connects.\n\nTopics\nCreating a Contact Directions Button\ninit(handler: ((CPButton) -> Void)?)\nCreates a button that invokes a handler when the user taps it.\nRelationships\nInherits From\nCPButton\nSee Also\nManaging Interactions with the Contact\nvar actions: [CPButton]?\nThe actions that the template displays for this contact.\nclass CPContactCallButton\nA button for calling the contact.\nclass CPContactMessageButton\nA button that activates Siri and initiates the compose message flow."
  },
  {
    "title": "init(phoneOrEmail:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontactmessagebutton/3664496-init",
    "html": "Parameters\nphoneOrEmail\n\nA valid phone number or email address to use in Siri’s compose message flow.\n\nReturn Value\n\nA new contact message button.\n\nDiscussion\n\nThe button displays a system image that communicates its function. CarPlay never displays the contact information you provide. Tapping the button activates Siri and launches the compose message flow using the phone number or email address you provide."
  },
  {
    "title": "init(title:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/3551731-init",
    "html": "Parameters\ntitle\n\nThe text to display on the button.\n\nhandler\n\nThe block that CarPlay invokes when the user taps the button.\n\nReturn Value\n\nA bar button that displays the provided text.\n\nSee Also\nCreating a CarPlay Bar Button\ninit(type: CPBarButton.`Type`, handler: CPBarButtonHandler?)\nCreates a bar button with a type and handler.\nDeprecated\ninit(image: UIImage, handler: CPBarButtonHandler?)\nCreates a bar button that displays an image.\nenum CPBarButton.Type\nTypes of bar buttons.\ntypealias CPBarButtonHandler\nA block that CarPlay calls when the user taps a bar button."
  },
  {
    "title": "phoneOrEmail | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontactmessagebutton/3664497-phoneoremail",
    "html": "Discussion\n\nWhen a user taps a contact message button, Siri launches the compose message flow and uses this property’s value as the recipient’s contact information."
  },
  {
    "title": "init(image:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/3551730-init",
    "html": "Parameters\nimage\n\nThe image to display on the button.\n\nhandler\n\nThe block that CarPlay invokes when the user taps the button.\n\nReturn Value\n\nA bar button that displays the provided image.\n\nSee Also\nCreating a CarPlay Bar Button\ninit(type: CPBarButton.`Type`, handler: CPBarButtonHandler?)\nCreates a bar button with a type and handler.\nDeprecated\ninit(title: String, handler: CPBarButtonHandler?)\nCreates a bar button that displays a text label.\nenum CPBarButton.Type\nTypes of bar buttons.\ntypealias CPBarButtonHandler\nA block that CarPlay calls when the user taps a bar button."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontact/3650350-name",
    "html": "See Also\nConfiguring the Contact’s Attributes\nvar image: UIImage\nThe contact’s image.\nvar subtitle: String?\nA subtitle that the template displays in addition to the contact’s name.\nvar informativeText: String?\nAdditional text that the template displays."
  },
  {
    "title": "init(type:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton/2968268-init",
    "html": "Parameters\ntype\n\nThe button type.\n\nhandler\n\nThe block that CarPlay invokes when the user taps the button.\n\nReturn Value\n\nA bar button of the specified type.\n\nSee Also\nCreating a CarPlay Bar Button\ninit(image: UIImage, handler: CPBarButtonHandler?)\nCreates a bar button that displays an image.\ninit(title: String, handler: CPBarButtonHandler?)\nCreates a bar button that displays a text label.\nenum CPBarButton.Type\nTypes of bar buttons.\ntypealias CPBarButtonHandler\nA block that CarPlay calls when the user taps a bar button."
  },
  {
    "title": "CPInterfaceControllerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontrollerdelegate",
    "html": "Topics\nHandling Display Events\nfunc templateWillAppear(CPTemplate, animated: Bool)\nTells the delegate that the template will appear onscreen.\nfunc templateDidAppear(CPTemplate, animated: Bool)\nTells the delegate that the template did appear onscreen.\nfunc templateWillDisappear(CPTemplate, animated: Bool)\nTells the delegate that the template will disappear from the screen.\nfunc templateDidDisappear(CPTemplate, animated: Bool)\nTells the delegate that the template did disappear from the screen.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nConfiguring the Interface Controller\nvar delegate: CPInterfaceControllerDelegate?\nAn object that serves as the delegate to the interface controller.\nvar prefersDarkUserInterfaceStyle: Bool\nA Boolean value that determines whether the system draws the user interface in Dark Mode.\nfunc setRootTemplate(CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nSets the root template of the navigation hierarchy."
  },
  {
    "title": "init(contact:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontacttemplate/3585041-init",
    "html": "Parameters\ncontact\n\nThe contact that the template displays.\n\nReturn Value\n\nA new contact template that displays the provided contact."
  },
  {
    "title": "CPContact | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontact",
    "html": "Overview\n\nCPContact is an object that represents information about a person or a business, and can include a set of contextually relevant actions that a user can perform when CarPlay displays the contact, such as getting directions to its location.\n\nYou display a contact using CPContactTemplate. The template manages the appearance of the contact, and can display up to four action buttons. After displaying it, you can update the buttons for the template by assigning a new array to the contact’s actions property.\n\nThe framework provides specialized buttons for common actions, such as CPContactCallButton or CPContactMessageButton.\n\nTopics\nCreating a Contact\ninit(name: String, image: UIImage)\nCreates a contact with a name and an image.\nConfiguring the Contact’s Attributes\nvar image: UIImage\nThe contact’s image.\nvar name: String\nThe contact’s name.\nvar subtitle: String?\nA subtitle that the template displays in addition to the contact’s name.\nvar informativeText: String?\nAdditional text that the template displays.\nManaging Interactions with the Contact\nvar actions: [CPButton]?\nThe actions that the template displays for this contact.\nclass CPContactCallButton\nA button for calling the contact.\nclass CPContactDirectionsButton\nA button for getting directions to the contact’s location.\nclass CPContactMessageButton\nA button that activates Siri and initiates the compose message flow.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nConfiguring the Contact\nvar contact: CPContact\nThe contact that the template displays."
  },
  {
    "title": "contact | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontacttemplate/3585040-contact",
    "html": "Discussion\n\nAssigning a new instance of CPContact updates the template.\n\nSee Also\nConfiguring the Contact\nclass CPContact\nA data object that contains information about a contact."
  },
  {
    "title": "maximumActionCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalerttemplate/3566381-maximumactioncount",
    "html": "See Also\nCreating an Alert Template\ninit(titleVariants: [String], actions: [CPAlertAction])\nCreates an alert template."
  },
  {
    "title": "CPNavigationAlertMinimumDuration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalertminimumduration",
    "html": "Discussion\n\nThe minimum duration is in effect when duration is not zero.\n\nSee Also\nGetting the Alert Duration\nvar duration: TimeInterval\nThe amount of time, in seconds, that the alert is visible."
  },
  {
    "title": "init(titleVariants:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalerttemplate/3019559-init",
    "html": "Parameters\ntitleVariants\n\nAn array of title variants. Each title should be localized and ready for display to the user. When the system displays the alert, it selects the title that best fits the available screen space, so arrange the variants from most to least preferred. Always include at least one title in the array.\n\nactions\n\nAn array of actions available on the alert. The array must contain at least one action.\n\nReturn Value\n\nA newly initialized alert template.\n\nSee Also\nCreating an Alert Template\nclass var maximumActionCount: Int\nThe maximum number of actions allowed in an alert template."
  },
  {
    "title": "subtitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3566428-subtitle",
    "html": "See Also\nManaging the Picker Item’s Data\nvar title: String\nThe title that the picker’s item displays.\nvar summary: String?\nThe summary that the picker’s item displays."
  },
  {
    "title": "location | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3566424-location",
    "html": "See Also\nManaging the Map Annotation\nvar pinImage: UIImage?\nA custom image that the map annotation displays."
  },
  {
    "title": "pinImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3650382-pinimage",
    "html": "Discussion\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen from your interface controller’s carTraitCollection property.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nSee Also\nManaging the Map Annotation\nvar location: MKMapItem\nThe map item that contains the point of interest’s geographical information."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3566429-title",
    "html": "See Also\nManaging the Picker Item’s Data\nvar subtitle: String?\nThe subtitle that the picker’s item displays.\nvar summary: String?\nThe summary that the picker’s item displays."
  },
  {
    "title": "summary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3650383-summary",
    "html": "See Also\nManaging the Picker Item’s Data\nvar title: String\nThe title that the picker’s item displays.\nvar subtitle: String?\nThe subtitle that the picker’s item displays."
  },
  {
    "title": "titleVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalerttemplate/3019560-titlevariants",
    "html": "Discussion\n\nWhen the system displays the alert, it selects the title that best fits the available screen space, so arrange the titles from most to least preferred when creating an alert template. Also, localize each title for display to the user, and be sure to include at least one title in the array.\n\nSee Also\nGetting the Alert Information\nvar actions: [CPAlertAction]\nThe array of actions available on the alert."
  },
  {
    "title": "mapTemplateDidDismissPanningInterface(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990975-maptemplatediddismisspanninginte",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nSee Also\nPanning the Map\nfunc mapTemplateDidShowPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is visible on the map.\nfunc mapTemplateWillDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface will disappear from the map.\nfunc mapTemplateDidBeginPanGesture(CPMapTemplate)\nTells the delegate that the pan gesture has started.\nfunc mapTemplate(CPMapTemplate, panBeganWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is starting to pan the map.\nfunc mapTemplate(CPMapTemplate, panWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is panning in a certain direction on the map.\nfunc mapTemplate(CPMapTemplate, panEndedWith: CPMapTemplate.PanDirection)\nTells the delegate that the user stopped panning the map.\nstruct CPMapTemplate.PanDirection\nThe directions a user can pan (or move) a map displayed on the CarPlay screen.\nfunc mapTemplate(CPMapTemplate, didEndPanGestureWithVelocity: CGPoint)\nTells the delegate that the pan gesture ended with the specified velocity.\nfunc mapTemplate(CPMapTemplate, didUpdatePanGestureWithTranslation: CGPoint, velocity: CGPoint)\nTells the delegate that the pan gesture changed."
  },
  {
    "title": "mapTemplate(_:didShow:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990963-maptemplate",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nnavigationAlert\n\nThe navigation alert presented by the system.\n\nSee Also\nHandling Navigation Alerts\nfunc mapTemplate(CPMapTemplate, willShow: CPNavigationAlert)\nTells the delegate that the system will show the navigation alert.\nfunc mapTemplate(CPMapTemplate, willDismiss: CPNavigationAlert, dismissalContext: CPNavigationAlert.DismissalContext)\nTells the delegate that the system is preparing to dismiss the navigation alert.\nfunc mapTemplate(CPMapTemplate, didDismiss: CPNavigationAlert, dismissalContext: CPNavigationAlert.DismissalContext)\nTells the delegate that the system dismissed the navigation alert.\nenum CPNavigationAlert.DismissalContext\nA set of reasons for dismissing a navigation alert."
  },
  {
    "title": "mapTemplateDidShowPanningInterface(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate/2990976-maptemplatedidshowpanninginterfa",
    "html": "Parameters\nmapTemplate\n\nThe current map template.\n\nSee Also\nPanning the Map\nfunc mapTemplateWillDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface will disappear from the map.\nfunc mapTemplateDidDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is no longer visible on the map.\nfunc mapTemplateDidBeginPanGesture(CPMapTemplate)\nTells the delegate that the pan gesture has started.\nfunc mapTemplate(CPMapTemplate, panBeganWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is starting to pan the map.\nfunc mapTemplate(CPMapTemplate, panWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is panning in a certain direction on the map.\nfunc mapTemplate(CPMapTemplate, panEndedWith: CPMapTemplate.PanDirection)\nTells the delegate that the user stopped panning the map.\nstruct CPMapTemplate.PanDirection\nThe directions a user can pan (or move) a map displayed on the CarPlay screen.\nfunc mapTemplate(CPMapTemplate, didEndPanGestureWithVelocity: CGPoint)\nTells the delegate that the pan gesture ended with the specified velocity.\nfunc mapTemplate(CPMapTemplate, didUpdatePanGestureWithTranslation: CGPoint, velocity: CGPoint)\nTells the delegate that the pan gesture changed."
  },
  {
    "title": "init(titleVariants:subtitleVariants:image:primaryAction:secondaryAction:duration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/3183007-init",
    "html": "Parameters\ntitleVariants\n\nAn array of localized, displayable titles in order of preference. CarPlay displays the title that fits in the available screen space.\n\nsubtitleVariants\n\nAn array of localized, displayable subtitles in order of preference. CarPlay displays the subtitle that fits in the available screen space.\n\nimage\n\nThe image the alert displays.\n\nprimaryAction\n\nThe alert’s primary action.\n\nsecondaryAction\n\nThe alert’s secondary action.\n\nduration\n\nThe amount of time, in seconds, that the alert remains visible. If you provide a duration of 0, CarPlay displays the alert until the user dismisses it.\n\nDiscussion\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nSee Also\nCreating a Navigation Alert\ninit(titleVariants: [String], subtitleVariants: [String]?, imageSet: CPImageSet?, primaryAction: CPAlertAction, secondaryAction: CPAlertAction?, duration: TimeInterval)\nCreates a navigation alert.\nDeprecated"
  },
  {
    "title": "dismissNavigationAlert(animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2968354-dismissnavigationalert",
    "html": "Parameters\nanimated\n\nDetermines whether the system should animate the dismissal of the navigation alert. Set to true to animate the dismissal.\n\ncompletion\n\nThe block invoked after dismissing the navigation alert. The Bool argument in the block indicates whether the template dismissed an alert.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc dismissNavigationAlert(animated: Bool) async -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nSee Also\nDisplaying a Navigation Alert\nfunc present(navigationAlert: CPNavigationAlert, animated: Bool)\nDisplays a navigation alert on the map template.\nvar currentNavigationAlert: CPNavigationAlert?\nThe visible navigation alert.\nclass CPNavigationAlert\nAn alert that displays map- or navigation-related information to the user."
  },
  {
    "title": "emptyViewTitleVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/3585051-emptyviewtitlevariants",
    "html": "Discussion\n\nWhen the list contains zero items, the template displays an empty view with a title and a subtitle. The template removes the empty view if you update the list and provide items.\n\nProvide at least one nonzero length title variant. The view displays the first title variant that fits into the available screen space, so arrange your variants array from most- to least-preferred. Provide the strings as localized displayable content.\n\nSee Also\nManaging an Empty List\nvar emptyViewSubtitleVariants: [String]\nAn array of subtitle variants for the template’s empty view."
  },
  {
    "title": "sectionCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/3551789-sectioncount",
    "html": "Discussion\n\nThis value never exceeds maximumSectionCount. If you initialize a list, or call the updateSections(_:) method, with an array larger than maximumSectionCount, CarPlay trims the array to an appropriate size.\n\nSee Also\nManaging Sections\nclass var maximumSectionCount: Int\nThe maximum number of sections that the template can display.\nvar sections: [CPListSection]\nThe sections that the list displays.\nfunc updateSections([CPListSection])\nAdds, removes, reorders, or updates the list’s sections.\nclass CPListSection\nA container that groups your list items into sections."
  },
  {
    "title": "detailSubtitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3650378-detailsubtitle",
    "html": "Discussion\n\nThe template only displays a detail card when the user selects a point of interest. If this property is nil, the card displays the point of interest’s subtitle instead.\n\nSee Also\nManaging the Detail Card’s Data\nvar detailTitle: String?\nThe detail card’s title.\nvar detailSummary: String?\nThe detail card’s summary."
  },
  {
    "title": "detailSummary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3650379-detailsummary",
    "html": "Discussion\n\nThe template only displays a detail card when the user selects a point of interest. If this property is nil, the card displays the point of interest’s summary instead.\n\nSee Also\nManaging the Detail Card’s Data\nvar detailTitle: String?\nThe detail card’s title.\nvar detailSubtitle: String?\nThe detail card’s subtitle."
  },
  {
    "title": "detailTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3650380-detailtitle",
    "html": "Discussion\n\nThe template only displays the detail card when a user selects a point of interest. If this property is nil, the card displays the point of interest’s title instead.\n\nSee Also\nManaging the Detail Card’s Data\nvar detailSubtitle: String?\nThe detail card’s subtitle.\nvar detailSummary: String?\nThe detail card’s summary."
  },
  {
    "title": "init(title:pointsOfInterest:selectedIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinteresttemplate/3589348-init",
    "html": "Parameters\ntitle\n\nThe scrollable picker’s title.\n\npointsOfInterest\n\nAn array that contains the points of interest the template displays.\n\nselectedIndex\n\nThe initial selection’s index. This is the array’s index for the specific point of interest you want to select. Use NSNotFound to indicate no initial selection.\n\nDiscussion\n\npointsOfInterest can contain a maximum of twelve points of interest because that is the most the template displays.\n\nSee Also\nCreating a Point of Interest Template\nclass CPPointOfInterest\nAn object that describes a point of interest on the template’s map and in its scrollable picker."
  },
  {
    "title": "pointOfInterestDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinteresttemplate/3585054-pointofinterestdelegate",
    "html": "See Also\nHandling Template Events\nprotocol CPPointOfInterestTemplateDelegate\nThe methods to handle a Point of Interest template’s events."
  },
  {
    "title": "CPPointOfInterestTemplateDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinteresttemplatedelegate",
    "html": "Overview\n\nYou use the CPPointOfInterestTemplateDelegate protocol to respond to a Point of Interest template’s events. The protocol defines methods that CarPlay calls in response to these events, and your implementation provides the appropriate behavior for when the events occur. For example, when the user pans the template’s map and the visible region changes, update the points of interest that the template displays to only those relevant to the new region.\n\nTopics\nResponding to Map Region Changes\nfunc pointOfInterestTemplate(CPPointOfInterestTemplate, didChangeMapRegion: MKCoordinateRegion)\nTells the delegate about changes to the visible region of the template’s map.\n\nRequired\n\nResponding to Point of Interest Selection\nfunc pointOfInterestTemplate(CPPointOfInterestTemplate, didSelectPointOfInterest: CPPointOfInterest)\nTells the delegate when the user selects a point of interest.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nHandling Template Events\nvar pointOfInterestDelegate: CPPointOfInterestTemplateDelegate?\nThe object that serves as the template’s delegate."
  },
  {
    "title": "CPNavigationSession | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationsession",
    "html": "Overview\n\nTo start a navigation session, you call startNavigationSession(for:) on the map template, passing the trip the user selected. The map template’s delegate receives the selected trip via mapTemplate(_:startedTrip:using:).\n\nWhen calculating the initial set of maneuvers, you set pauseTrip(for:description:) to CPNavigationSession.PauseReason.loading so that CarPlay displays the correct state to the user.\n\nDuring turn-by-turn guidance, you create CPManeuver objects that contain information about upcoming turns, and then update upcomingManeuvers. Maintain at least one maneuver in the array at all times. You should call updateEstimates(_:for:) regularly to update the remaining time and distance for each maneuver.\n\nWhen CarPlay pauses, finishes, or cancels route guidance, you must call the corresponding method on the active navigation session.\n\nTopics\nGetting the Trip\nvar trip: CPTrip\nThe trip associated with the navigation session.\nclass CPTrip\nAn object that represents a journey between an origin and a destination.\nManaging Trip Navigation\nfunc cancelTrip()\nTells the navigation session to cancel the trip.\nfunc finishTrip()\nTells the navigation session to finish the trip.\nfunc pauseTrip(for: CPNavigationSession.PauseReason, description: String?)\nTells the navigation session to pause the trip for the specified reason.\nenum CPNavigationSession.PauseReason\nA set of reasons for pausing a trip.\nManaging Upcoming Maneuvers\nvar upcomingManeuvers: [CPManeuver]\nThe next set of maneuvers the user should perform while following the current route.\nclass CPManeuver\nAn object that describes a single navigation instruction.\nUpdating Travel Estimates\nfunc updateEstimates(CPTravelEstimates, for: CPManeuver)\nUpdates the travel estimates for the specified maneuver.\nclass CPTravelEstimates\nAn object that describes the time and distance remaining for a maneuver in a navigation session.\nInstance Methods\nfunc pauseTrip(for: CPNavigationSession.PauseReason, description: String?, turnCardColor: UIColor?)\nRelationships\nInherits From\nNSObject\nSee Also\nNavigating a Trip\nfunc startNavigationSession(for: CPTrip) -> CPNavigationSession\nBegins navigational guidance for a trip."
  },
  {
    "title": "pointsOfInterest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinteresttemplate/3585055-pointsofinterest",
    "html": "Discussion\n\nYou must call the setPointsOfInterest(_:selectedIndex:) method to update the points of interest the template displays.\n\nSee Also\nManaging the Points of Interest\nfunc setPointsOfInterest([CPPointOfInterest], selectedIndex: Int)\nUpdates the points of interest and the current selection.\nvar selectedIndex: Int\nThe current selection’s index."
  },
  {
    "title": "setPointsOfInterest(_:selectedIndex:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinteresttemplate/3589350-setpointsofinterest",
    "html": "Parameters\npointsOfInterest\n\nAn array that contains the points of interest the template displays.\n\nselectedIndex\n\nThe selection’s index. This is the array’s index for the specific point of interest you want to select. Use NSNotFound to indicate no initial selection.\n\nDiscussion\n\npointsOfInterest can contain a maximum of twelve points of interest because that is the most the template displays.\n\nSee Also\nManaging the Points of Interest\nvar pointsOfInterest: [CPPointOfInterest]\nThe points of interest the template displays on the map and in the scrollable picker.\nvar selectedIndex: Int\nThe current selection’s index."
  },
  {
    "title": "updateEstimates(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2968367-updateestimates",
    "html": "Parameters\nestimates\n\nThe updated travel estimates.\n\ntrip\n\nA trip preview or the active trip.\n\nDiscussion\n\nThe updated trip uses the default time-remaining color. To change the color, use the update(_:for:with:) method instead of calling this method.\n\nSee Also\nProviding Trip Estimates\nfunc update(CPTravelEstimates, for: CPTrip, with: CPTimeRemainingColor)\nUpdates travel estimates, such as arrival time and the remaining time and distance for a trip, with the specified time-remaining color.\nenum CPTimeRemainingColor\nThe color the system uses when displaying the time remaining for a trip.\nvar tripEstimateStyle: CPTripEstimateStyle\nThe style that the map template uses when displaying trip estimates during active nagivation.\nenum CPTripEstimateStyle\nThe set of display styles for trip estimates."
  },
  {
    "title": "dashboardController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationdashboardscene/3516949-dashboardcontroller",
    "html": "Discussion\n\nUse this property to access the controller CarPlay creates when it connects your navigation app’s dashboard scene. You use this controller to manage the shortcut buttons CarPlay displays in the dashboard when there’s no active navigation session.\n\nSee Also\nAccessing the Dashboard Controller\nclass CPDashboardController\nA controller that provides shortcut buttons for the CarPlay Dashboard."
  },
  {
    "title": "CPDashboardController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpdashboardcontroller",
    "html": "Overview\n\nA dashboard controller manages up to two shortcut buttons that CarPlay displays in the dashboard when there’s no active navigation session. You don’t create the dashboard controller. Instead, CarPlay creates one for you and passes it to the delegate of CPTemplateApplicationDashboardScene when it connects the dashboard scene.\n\nAfter receiving the controller, set shortcutButtons to an array that contains a maximum of two shortcut buttons. CarPlay manages hiding or showing the buttons on the dashboard at the appropriate times.\n\nTopics\nProviding Dashboard Buttons\nvar shortcutButtons: [CPDashboardButton]\nAn array of shortcut buttons to display on the CarPlay Dashboard.\nclass CPDashboardButton\nA shortcut button for placement on the CarPlay Dashboard.\nRelationships\nInherits From\nNSObject\nSee Also\nAccessing the Dashboard Controller\nvar dashboardController: CPDashboardController\nThe controller that manages the dashboard scene’s shortcut buttons."
  },
  {
    "title": "startNavigationSession(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2968364-startnavigationsession",
    "html": "Parameters\ntrip\n\nThe trip to provide guidance for.\n\nReturn Value\n\nA navigation session for the specified trip.\n\nDiscussion\n\nKeep a reference to the navigation session to perform guidance updates.\n\nSee Also\nNavigating a Trip\nclass CPNavigationSession\nAn object that represents an active route guidance session."
  },
  {
    "title": "dashboardWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationdashboardscene/3516950-dashboardwindow",
    "html": "Discussion\n\nUse this property to access the window CarPlay creates for your dashboard scene. You draw your navigation app’s map content into this window for display in the dashboard."
  },
  {
    "title": "subtitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontact/3650351-subtitle",
    "html": "Discussion\n\nUse this property to display secondary information about the contact. For example, their job title or email address.\n\nThe default value is nil.\n\nSee Also\nConfiguring the Contact’s Attributes\nvar image: UIImage\nThe contact’s image.\nvar name: String\nThe contact’s name.\nvar informativeText: String?\nAdditional text that the template displays."
  },
  {
    "title": "informativeText | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontact/3650348-informativetext",
    "html": "Discussion\n\nUse this property to display additional information about the contact. For example, their address or a short bio.\n\nThe default value is nil.\n\nSee Also\nConfiguring the Contact’s Attributes\nvar image: UIImage\nThe contact’s image.\nvar name: String\nThe contact’s name.\nvar subtitle: String?\nA subtitle that the template displays in addition to the contact’s name."
  },
  {
    "title": "init(handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontactcallbutton/3664492-init",
    "html": "Parameters\nhandler\n\nThe closure that the button invokes when the user taps it.\n\nReturn Value\n\nA new contact directions button that invokes its handler when the user taps it.\n\nDiscussion\n\nThe button displays a system image that communicates its function."
  },
  {
    "title": "CPBarButtonHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbuttonhandler",
    "html": "See Also\nCreating a CarPlay Bar Button\ninit(type: CPBarButton.`Type`, handler: CPBarButtonHandler?)\nCreates a bar button with a type and handler.\nDeprecated\ninit(image: UIImage, handler: CPBarButtonHandler?)\nCreates a bar button that displays an image.\ninit(title: String, handler: CPBarButtonHandler?)\nCreates a bar button that displays a text label.\nenum CPBarButton.Type\nTypes of bar buttons."
  },
  {
    "title": "actions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontact/3664490-actions",
    "html": "Discussion\n\nAssign an array of CPButton objects to this property to update the action buttons that the template displays for this contact. The template can display four buttons maximum. If the array contains more buttons, the template uses only the first four.\n\nContact actions are optional, and the default value is nil.\n\nSee Also\nManaging Interactions with the Contact\nclass CPContactCallButton\nA button for calling the contact.\nclass CPContactDirectionsButton\nA button for getting directions to the contact’s location.\nclass CPContactMessageButton\nA button that activates Siri and initiates the compose message flow."
  },
  {
    "title": "prefersDarkUserInterfaceStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3183005-prefersdarkuserinterfacestyle",
    "html": "Discussion\n\nTo adopt the dark user interface style, set this value to true before you provide the root template or push any templates. The default value is false, which allows templates to change between light and dark styles.\n\nSee Also\nConfiguring the Interface Controller\nvar delegate: CPInterfaceControllerDelegate?\nAn object that serves as the delegate to the interface controller.\nprotocol CPInterfaceControllerDelegate\nThe interface that an object implements to serve as a delegate to an interface controller.\nfunc setRootTemplate(CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nSets the root template of the navigation hierarchy."
  },
  {
    "title": "init(name:image:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontact/3650349-init",
    "html": "Parameters\nname\n\nThe name that the template displays.\n\nimage\n\nThe image that the template displays beside the contact’s name.\n\nReturn Value\n\nA new contact with the provided name and image.\n\nDiscussion\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence."
  },
  {
    "title": "duration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/2968385-duration",
    "html": "Discussion\n\nSet duration to zero to display the alert until dismissed by the user. When duration is not zero, CPNavigationAlertMinimumDuration determines the minimum amount of time the alert is visible.\n\nSee Also\nGetting the Alert Duration\nlet CPNavigationAlertMinimumDuration: TimeInterval\nA constant that defines the minimum amount of time that an alert is visible."
  },
  {
    "title": "init(location:title:subtitle:summary:detailTitle:detailSubtitle:detailSummary:pinImage:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3650381-init",
    "html": "Parameters\nlocation\n\nThe map item that contains the point of interest’s geographical information.\n\ntitle\n\nThe title that the picker displays for the item.\n\nsubtitle\n\nThe subtitle that the picker displays for the item.\n\nsummary\n\nA brief summary that the picker displays for the item.\n\ndetailTitle\n\nThe detail card’s title.\n\ndetailSubtitle\n\nThe detail card’s subtitle.\n\ndetailSummary\n\nA brief summary that the detail card displays.\n\npinImage\n\nA custom image that the map annotation displays.\n\nDiscussion\n\nCPPointOfInterestTemplate displays selectable instances of CPPointOfInterest as annotations on the template’s map, and as items in a scrollable picker that the template overlays on the map. When the user selects a point of interest, the template displays a detail card that contains secondary information and optional actions the user can perform.\n\nIf you use a custom pinImage, provide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen from your interface controller’s carTraitCollection property.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence."
  },
  {
    "title": "CPTripPreviewTextConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptrippreviewtextconfiguration",
    "html": "Topics\nCreating a Text Configuration Object\ninit(startButtonTitle: String?, additionalRoutesButtonTitle: String?, overviewButtonTitle: String?)\nCreates a trip preview text configuration object.\nSetting Button Titles\nvar startButtonTitle: String?\nThe title displayed on the start button.\nvar additionalRoutesButtonTitle: String?\nThe title displayed on the routes button.\nvar overviewButtonTitle: String?\nThe title displayed on the overview button.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nDisplaying Trip Previews\nfunc showTripPreviews([CPTrip], textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the preview for one or more trips, and allows route selection.\nfunc showTripPreviews([CPTrip], selectedTrip: CPTrip?, textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the previews for a collection of trips, with a single selected trip.\nfunc hideTripPreviews()\nHides the display of trip previews.\nfunc showRouteChoicesPreview(for: CPTrip, textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the route choices for a single trip."
  },
  {
    "title": "carTraitCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3578118-cartraitcollection",
    "html": "Discussion\n\nUse this trait collection to derive metrics, such as display scale, for your CarPlay templates. For example, images you display in a CPListTemplate can use this trait collection’s display scale rather than the scale of the user’s iPhone screen."
  },
  {
    "title": "templates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/2968299-templates",
    "html": "See Also\nAccessing Templates\nvar rootTemplate: CPTemplate\nThe root template in the navigation hierarchy.\nvar topTemplate: CPTemplate?\nThe top-most template in the navigation hierarchy."
  },
  {
    "title": "topTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/2968300-toptemplate",
    "html": "See Also\nAccessing Templates\nvar rootTemplate: CPTemplate\nThe root template in the navigation hierarchy.\nvar templates: [CPTemplate]\nThe contents of the navigation hierarchy."
  },
  {
    "title": "popTemplate(animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3650354-poptemplate",
    "html": "Parameters\nanimated\n\nIf true, CarPlay animates the transition between templates.\n\ncompletion\n\nThe closure CarPlay calls after it removes the template.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc popTemplate(animated: Bool) async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCarPlay calls completion after it removes the top-most template from the navigation hierarchy. The Boolean parameter is true if CarPlay removes the template successfully; otherwise, it’s false and CarPlay provides an error that describes the failure.\n\nCarPlay throws an exception if it can’t remove the template and you don’t provide a closure.\n\nSee Also\nAdding and Removing Templates\nfunc pushTemplate(CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nAdds the specified template to the navigation hierarchy and displays it.\nfunc popToRootTemplate(animated: Bool, completion: ((Bool, Error?) -> Void)?)\nRemoves all of the templates from the navigation hierarchy except the root template.\nfunc pop(to: CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nRemoves each template from the navigation hierarchy until the specified template becomes visible."
  },
  {
    "title": "pop(to:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3650356-pop",
    "html": "Parameters\ntargetTemplate\n\nThe template to make visible.\n\nanimated\n\nIf true, CarPlay animates the transition between templates.\n\ncompletion\n\nThe closure CarPlay calls after it removes the required templates.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc pop(to targetTemplate: CPTemplate, animated: Bool) async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\ntargetTemplate must exist in the navigation hierarchy. You can use templates to access its contents.\n\nCarPlay calls completion after it removes the required templates. The Boolean parameter is true if the specified template exists in the navigation hierarchy and CarPlay removes the required templates successfully; otherwise, it’s false and CarPlay provides an error that describes the failure.\n\nCarPlay throws an exception if it can’t remove the required templates and you don’t provide a closure.\n\nSee Also\nAdding and Removing Templates\nfunc pushTemplate(CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nAdds the specified template to the navigation hierarchy and displays it.\nfunc popTemplate(animated: Bool, completion: ((Bool, Error?) -> Void)?)\nRemoves the top-most template from the navigation hierarchy.\nfunc popToRootTemplate(animated: Bool, completion: ((Bool, Error?) -> Void)?)\nRemoves all of the templates from the navigation hierarchy except the root template."
  },
  {
    "title": "CPListTemplateDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplatedelegate",
    "html": "Topics\nGetting the Selected Item\nfunc listTemplate(CPListTemplate, didSelect: CPListItem, completionHandler: () -> Void)\nTells the delegate when the user selects a list item.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nResponding to List Events\nvar delegate: CPListTemplateDelegate?\nThe object that serves as the delegate to the list template.\nDeprecated"
  },
  {
    "title": "isSelected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingbutton/3551826-isselected",
    "html": "Discussion\n\nWhen this property is set to true, CarPlay draws the button with a selected appearance to indicate its selected state. You can only update this property manually on instances of CPNowPlayingImageButton. All system-provided buttons—for example, CPNowPlayingShuffleButton or CPNowPlayingRepeatButton—manage their own selected states internally.\n\nThe default value is false.\n\nSee Also\nManaging the Button State\nvar isEnabled: Bool\nA Boolean value that indicates whether the button is in an enabled state."
  },
  {
    "title": "popToRootTemplate(animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3650355-poptoroottemplate",
    "html": "Parameters\nanimated\n\nIf true, CarPlay animates the transition between templates.\n\ncompletion\n\nThe closure CarPlay calls after it removes the required templates.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc popToRootTemplate(animated: Bool) async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCarPlay calls completion after it removes all of the required templates. The Boolean parameter is true if CarPlay removes all of the templates successfully; otherwise, it’s false and CarPlay provides an error that describes the failure.\n\nCarPlay throws an exception if it can’t remove the templates and you don’t provide a closure.\n\nSee Also\nAdding and Removing Templates\nfunc pushTemplate(CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nAdds the specified template to the navigation hierarchy and displays it.\nfunc popTemplate(animated: Bool, completion: ((Bool, Error?) -> Void)?)\nRemoves the top-most template from the navigation hierarchy.\nfunc pop(to: CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nRemoves each template from the navigation hierarchy until the specified template becomes visible."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/2968322-delegate",
    "html": "Deprecated\n\nFor selection, use the handler on CPSelectableListItem instead.\n\nSee Also\nResponding to List Events\nprotocol CPListTemplateDelegate\nThe interface an object implements to serve as the delegate for a list template.\nDeprecated"
  },
  {
    "title": "CPSelectableListItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpselectablelistitem",
    "html": "Overview\n\nImportant\n\nYou don’t create custom classes that conform to CPSelectableListItem. Instead, you use one of the prebuilt list item types that adopt this protocol, such as CPListItem or CPListImageRowItem.\n\nTopics\nManaging Selection\nvar handler: ((CPSelectableListItem, () -> Void) -> Void)?\nAn optional closure that CarPlay invokes when the user selects the list item.\n\nRequired\n\nRelationships\nInherits From\nCPListTemplateItem\nConforming Types\nCPListImageRowItem\nCPListItem\nSee Also\nCreating a Section\ninit(items: [CPListTemplateItem])\nCreates a section with list items.\ninit(items: [CPListTemplateItem], header: String?, sectionIndexTitle: String?)\nCreates a section with list items, a header, and a section index title.\ninit(items: [CPListTemplateItem], header: String, headerSubtitle: String?, headerImage: UIImage?, headerButton: CPButton?, sectionIndexTitle: String?)\nCreates a section with list items, a header, a section index title, and section header details.\nprotocol CPListTemplateItem\nA description of the common properties of all list item types.\nclass CPListItem\nA selectable row in a list template.\nclass CPListImageRowItem\nA list template row that displays a series of images.\nclass CPMessageListItem\nA list template row that represents a conversation or contact."
  },
  {
    "title": "init(handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingbutton/3650365-init",
    "html": "Parameters\nhandler\n\nA closure that the button invokes when the user taps it."
  },
  {
    "title": "tabSystemItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplate/3551888-tabsystemitem",
    "html": "Discussion\n\nYou should specify either a system item, or a tab title and tab image. The tab image has precedence over the system item if both properties are set.\n\nCarPlay only uses this value when the template is a root-template of a tab bar.\n\nSee Also\nAccessing Tab Information\nvar tabTitle: String?\nA short title that describes the content of the tab.\nvar tabImage: UIImage?\nAn image that represents the content of the tab.\nvar showsTabBadge: Bool\nAn indicator you use to call attention to the tab."
  },
  {
    "title": "CPMessageListItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagelistitem",
    "html": "Overview\n\nUse CPMessageListItem to display information about a conversation or a contact in a list template. Unlike CPListItem, you don’t provide a selection handler. Instead, when the user selects the row, CarPlay invokes Siri using the parameters you provide and begins a message compose, read, or reply flow.\n\nThe behavior of the list item when the user selects it depends on how you initialize or configure it. If the item has a phone number or email address, Siri launches the message compose flow. If the list item has an unread indicator, Siri launches the message read flow. Otherwise, Siri launches the message reply flow.\n\nCPMessageListItem can display various auxiliary items in its leading and trailing regions. You describe these using a configuration object for each region. See leadingConfiguration and trailingConfiguration for more information.\n\nCarPlay doesn’t support custom list item types. Instead, use the userInfo property to attach a value to the list item that provides additional context, such as specifying a model object that corresponds to the item.\n\nNote\n\nCPMessageListItem is available only in apps that have the communication entitlement.\n\nTopics\nCreating a Message List Item\ninit(conversationIdentifier: String, text: String, leadingConfiguration: CPMessageListItemLeadingConfiguration, trailingConfiguration: CPMessageListItemTrailingConfiguration?, detailText: String?, trailingText: String?)\nCreates a list item that represents an existing conversation.\ninit(fullName: String, phoneOrEmailAddress: String, leadingConfiguration: CPMessageListItemLeadingConfiguration, trailingConfiguration: CPMessageListItemTrailingConfiguration?, detailText: String?, trailingText: String?)\nCreates a list item that represents a contact.\nManaging the Message Context\nvar conversationIdentifier: String?\nThe conversation’s unique identifier.\nvar phoneOrEmailAddress: String?\nThe contact’s phone number or email address.\nManaging Content\nvar text: String?\nThe list item’s primary text.\nvar detailText: String?\nThe list item’s secondary text.\nvar trailingText: String?\nThe list item’s supplementary text.\nManaging Leading and Trailing Configurations\nvar leadingConfiguration: CPMessageListItemLeadingConfiguration\nThe configuration of the list item’s leading region.\nclass CPMessageListItemLeadingConfiguration\nAn object that describes the appearance of a message list item’s leading region.\nvar trailingConfiguration: CPMessageListItemTrailingConfiguration?\nThe configuration of the list item’s trailing region.\nclass CPMessageListItemTrailingConfiguration\nAn object that describes the appearance of a message list item’s trailing region.\nManaging Supplementary Information\nvar userInfo: Any?\nAn opaque value for the list item.\nEnabling Items\nvar isEnabled: Bool\nA Boolean value that indicates if the item is enabled.\nRelationships\nInherits From\nNSObject\nConforms To\nCPListTemplateItem\nSee Also\nCreating a Section\ninit(items: [CPListTemplateItem])\nCreates a section with list items.\ninit(items: [CPListTemplateItem], header: String?, sectionIndexTitle: String?)\nCreates a section with list items, a header, and a section index title.\ninit(items: [CPListTemplateItem], header: String, headerSubtitle: String?, headerImage: UIImage?, headerButton: CPButton?, sectionIndexTitle: String?)\nCreates a section with list items, a header, a section index title, and section header details.\nprotocol CPListTemplateItem\nA description of the common properties of all list item types.\nprotocol CPSelectableListItem\nA description of a selectable list item.\nclass CPListItem\nA selectable row in a list template.\nclass CPListImageRowItem\nA list template row that displays a series of images."
  },
  {
    "title": "indexPath(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/3601121-indexpath",
    "html": "Parameters\nitem\n\nThe item to find in the list.\n\nReturn Value\n\nThe item’s index path in the list, or nil if the list doesn’t contain the item.\n\nSee Also\nGetting Supplementary Information\nclass var maximumItemCount: Int\nThe maximum number of items, across all sections, that the template can display.\nvar itemCount: Int\nThe total number of items, across all sections, in the list.\nvar title: String?\nThe title that the navigation bar displays when the template is visible."
  },
  {
    "title": "CPListImageRowItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistimagerowitem",
    "html": "Overview\n\nUse CPListImageRowItem to display a series of images as a row in a list template. At runtime, use CPMaximumNumberOfGridImages to determine the maximum number of images that the row displays. CarPlay may display fewer images, depending on the width of the vehicle’s primary screen. Provide images that are display-ready, and include light and dark variants of each. See init(text:images:) for more information.\n\nYou assign a handler to the list item that CarPlay executes when the user selects the item. You can assign a second handler, listImageRowHandler, which CarPlay calls when the user selects an individual image.\n\nCarPlay doesn’t support custom list item types. Instead, use the userInfo property to attach a value to the list item that provides additional context, such as specifying a model object that corresponds to the item.\n\nTopics\nCreating a List Image Row Item\ninit(text: String, images: [UIImage])\nCreates a list item that displays a row of images.\nManaging Content\nvar text: String?\nThe list item’s primary text.\nvar gridImages: [UIImage]\nThe images that appear in the list item’s image row.\nfunc update([UIImage])\nAdds, removes, reorders, or updates the images in the list item’s image row.\nclass var maximumImageSize: CGSize\nThe maximum size of an image that an image row can display.\nlet CPMaximumNumberOfGridImages: Int\nThe maximum number of images that an image row can contain.\nManaging Selection\nvar listImageRowHandler: ((CPListImageRowItem, Int, () -> Void) -> Void)?\nAn optional closure that CarPlay invokes when the user selects an image.\nvar handler: ((CPSelectableListItem, () -> Void) -> Void)?\nAn optional closure that CarPlay invokes when the user selects the list item.\nManaging Supplementary Information\nvar userInfo: Any?\nAn opaque value for the list item.\nEnabling Items\nvar isEnabled: Bool\nA Boolean value that indicates if the item is enabled.\nRelationships\nInherits From\nNSObject\nConforms To\nCPSelectableListItem\nSee Also\nCreating a Section\ninit(items: [CPListTemplateItem])\nCreates a section with list items.\ninit(items: [CPListTemplateItem], header: String?, sectionIndexTitle: String?)\nCreates a section with list items, a header, and a section index title.\ninit(items: [CPListTemplateItem], header: String, headerSubtitle: String?, headerImage: UIImage?, headerButton: CPButton?, sectionIndexTitle: String?)\nCreates a section with list items, a header, a section index title, and section header details.\nprotocol CPListTemplateItem\nA description of the common properties of all list item types.\nprotocol CPSelectableListItem\nA description of a selectable list item.\nclass CPListItem\nA selectable row in a list template.\nclass CPMessageListItem\nA list template row that represents a conversation or contact."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/2968325-title",
    "html": "See Also\nGetting Supplementary Information\nclass var maximumItemCount: Int\nThe maximum number of items, across all sections, that the template can display.\nvar itemCount: Int\nThe total number of items, across all sections, in the list.\nfunc indexPath(for: CPListTemplateItem) -> IndexPath?\nReturns the index path for the specified item."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplate/3024508-userinfo",
    "html": "Discussion\n\nUse userInfo to store additional information on the template that is useful in other areas of your app."
  },
  {
    "title": "CPListTemplateItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplateitem",
    "html": "Overview\n\nImportant\n\nYou don’t create custom classes that conform to CPListItemTemplate. Instead, you use one of the prebuilt list item types that adopt this protocol, such as CPMessageListItem.\n\nTopics\nManaging Content\nvar text: String?\nThe item’s primary text.\n\nRequired\n\nvar userInfo: Any?\nAn opaque value for the list item.\n\nRequired\n\nEnabling Items\nvar isEnabled: Bool\nA Boolean value that indicates if the item is enabled.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nInherited By\nCPSelectableListItem\nConforming Types\nCPMessageListItem\nSee Also\nCreating a Section\ninit(items: [CPListTemplateItem])\nCreates a section with list items.\ninit(items: [CPListTemplateItem], header: String?, sectionIndexTitle: String?)\nCreates a section with list items, a header, and a section index title.\ninit(items: [CPListTemplateItem], header: String, headerSubtitle: String?, headerImage: UIImage?, headerButton: CPButton?, sectionIndexTitle: String?)\nCreates a section with list items, a header, a section index title, and section header details.\nprotocol CPSelectableListItem\nA description of a selectable list item.\nclass CPListItem\nA selectable row in a list template.\nclass CPListImageRowItem\nA list template row that displays a series of images.\nclass CPMessageListItem\nA list template row that represents a conversation or contact."
  },
  {
    "title": "itemCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/3551786-itemcount",
    "html": "Discussion\n\nThis value never exceeds maximumItemCount. If you initialize a list where the total number of items, across all sections, is greater than maximumItemCount, CarPlay only displays items up to this limit and discards the rest.\n\nSee Also\nGetting Supplementary Information\nclass var maximumItemCount: Int\nThe maximum number of items, across all sections, that the template can display.\nfunc indexPath(for: CPListTemplateItem) -> IndexPath?\nReturns the index path for the specified item.\nvar title: String?\nThe title that the navigation bar displays when the template is visible."
  },
  {
    "title": "CPListSection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistsection",
    "html": "Overview\n\nA section contains zero or more list items. You can configure a section to display a header and a section index title, which CarPlay displays on the trailing edge of the screen. The section header and the section index title are optional.\n\nTo create a section, call the init(items:) method and provide an array of list items. Alternatively, use init(items:header:sectionIndexTitle:) if you want to display a header and a section index title. CarPlay doesn’t support custom list items, so you must use one of the types that the framework provides, such as CPListItem or CPListImageRowItem.\n\nAt runtime, use maximumSectionCount to determine the maximum number of sections that your list can display. When creating items for your sections, use maximumItemCount to establish the maximum number of items across all sections that can appear in your list.\n\nTopics\nCreating a Section\ninit(items: [CPListTemplateItem])\nCreates a section with list items.\ninit(items: [CPListTemplateItem], header: String?, sectionIndexTitle: String?)\nCreates a section with list items, a header, and a section index title.\ninit(items: [CPListTemplateItem], header: String, headerSubtitle: String?, headerImage: UIImage?, headerButton: CPButton?, sectionIndexTitle: String?)\nCreates a section with list items, a header, a section index title, and section header details.\nprotocol CPListTemplateItem\nA description of the common properties of all list item types.\nprotocol CPSelectableListItem\nA description of a selectable list item.\nclass CPListItem\nA selectable row in a list template.\nclass CPListImageRowItem\nA list template row that displays a series of images.\nclass CPMessageListItem\nA list template row that represents a conversation or contact.\nGetting Supplementary Information\nvar header: String?\nThe section’s header text.\nvar sectionIndexTitle: String?\nThe section’s index title.\nGetting Items\nvar items: [CPListTemplateItem]\nThe list of items for the section.\nfunc index(of: CPListTemplateItem) -> Int\nReturns the index of the specified item.\nfunc item(at: Int) -> CPListTemplateItem\nReturns the item at the specified index.\nConfiguring Section Headers\nvar headerButton: CPButton?\nA button that the section header displays.\nvar headerImage: UIImage?\nAn image that the section header displays.\nvar headerSubtitle: String?\nA string that the header displays as a subtitle.\nInitializers\ninit(items: [CPListItem])\ninit(items: [CPListItem], header: String?, sectionIndexTitle: String?)\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nManaging Sections\nclass var maximumSectionCount: Int\nThe maximum number of sections that the template can display.\nvar sectionCount: Int\nThe number of sections in the list.\nvar sections: [CPListSection]\nThe sections that the list displays.\nfunc updateSections([CPListSection])\nAdds, removes, reorders, or updates the list’s sections."
  },
  {
    "title": "update(_:for:with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/3014007-update",
    "html": "Parameters\nestimates\n\nThe updated travel estimates.\n\ntrip\n\nA trip preview or the active trip.\n\ntimeRemainingColor\n\nThe time-remaining color.\n\nSee Also\nProviding Trip Estimates\nfunc updateEstimates(CPTravelEstimates, for: CPTrip)\nUpdates travel estimates, such as arrival time and the remaining time and distance for a trip.\nenum CPTimeRemainingColor\nThe color the system uses when displaying the time remaining for a trip.\nvar tripEstimateStyle: CPTripEstimateStyle\nThe style that the map template uses when displaying trip estimates during active nagivation.\nenum CPTripEstimateStyle\nThe set of display styles for trip estimates."
  },
  {
    "title": "maximumItemCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/3551787-maximumitemcount",
    "html": "Discussion\n\nThis property’s value is dependent on any user interface limits that the vehicle imposes. See CPSessionConfiguration for more information. At runtime, use this value to determine the maximum number of items, across all sections, that your list can display.\n\nSee Also\nGetting Supplementary Information\nvar itemCount: Int\nThe total number of items, across all sections, in the list.\nfunc indexPath(for: CPListTemplateItem) -> IndexPath?\nReturns the index path for the specified item.\nvar title: String?\nThe title that the navigation bar displays when the template is visible."
  },
  {
    "title": "assistantCellConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/3867014-assistantcellconfiguration",
    "html": "Discussion\n\nNote\n\nThe Siri assistant cell is only available in audio and communication apps.\n\nYour app doesn’t receive a callback when the user selects the assistant cell. Instead, you configure an Intents Extension to handle the type of intent you specify in the cell’s configuration; audio apps must support INPlayMediaIntent and communication apps must support INStartCallIntent.\n\nIf you update this property’s value, CarPlay automatically refreshes your app’s interface to reflect the changes.\n\nSee Also\nManaging the Assistant Cell\nclass CPAssistantCellConfiguration\nAn object that provides the configuration attributes for the assistant cell."
  },
  {
    "title": "emptyViewSubtitleVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/3585050-emptyviewsubtitlevariants",
    "html": "Discussion\n\nWhen the list contains zero items, the template displays an empty view with a title and a subtitle. The template removes the empty view if you update the list and provide items.\n\nProvide at least one nonzero length subtitle variant. The view displays the first subtitle variant that fits into the available screen space, so arrange your variants array from most- to least-preferred. Provide the strings as localized displayable content.\n\nSee Also\nManaging an Empty List\nvar emptyViewTitleVariants: [String]\nAn array of title variants for the template’s empty view."
  },
  {
    "title": "updateSections(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/2968326-updatesections",
    "html": "Parameters\nsections\n\nAn array of sections to display.\n\nDiscussion\n\nThis method is multipurpose. Use it to add new sections to the list, to remove or reorder existing sections, and to update a section’s appearance. At runtime, use maximumSectionCount to determine the maximum number of sections the list can display. CarPlay trims the array if its size exceeds this limit.\n\nSee Also\nManaging Sections\nclass var maximumSectionCount: Int\nThe maximum number of sections that the template can display.\nvar sectionCount: Int\nThe number of sections in the list.\nvar sections: [CPListSection]\nThe sections that the list displays.\nclass CPListSection\nA container that groups your list items into sections."
  },
  {
    "title": "sections | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/2968324-sections",
    "html": "Discussion\n\nTo add new sections to the list, to remove or reorder existing sections, or to update a section’s appearance, use the updateSections(_:) method.\n\nSee Also\nManaging Sections\nclass var maximumSectionCount: Int\nThe maximum number of sections that the template can display.\nvar sectionCount: Int\nThe number of sections in the list.\nfunc updateSections([CPListSection])\nAdds, removes, reorders, or updates the list’s sections.\nclass CPListSection\nA container that groups your list items into sections."
  },
  {
    "title": "CPTimeRemainingColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptimeremainingcolor",
    "html": "Overview\n\nThe system determines the shade of each color based on the tripEstimateStyle for the map template.\n\nTopics\nColors\ncase `default`\nThe system default color.\ncase green\nA shade of green.\ncase orange\nA shade of orange.\ncase red\nA shade of red.\nRelationships\nConforms To\nSendable\nSee Also\nProviding Trip Estimates\nfunc updateEstimates(CPTravelEstimates, for: CPTrip)\nUpdates travel estimates, such as arrival time and the remaining time and distance for a trip.\nfunc update(CPTravelEstimates, for: CPTrip, with: CPTimeRemainingColor)\nUpdates travel estimates, such as arrival time and the remaining time and distance for a trip, with the specified time-remaining color.\nvar tripEstimateStyle: CPTripEstimateStyle\nThe style that the map template uses when displaying trip estimates during active nagivation.\nenum CPTripEstimateStyle\nThe set of display styles for trip estimates."
  },
  {
    "title": "CPTripEstimateStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptripestimatestyle",
    "html": "Topics\nStyles\ncase light\nThe light trip estimate display style.\ncase dark\nThe dark trip estimate display style.\nRelationships\nConforms To\nSendable\nSee Also\nProviding Trip Estimates\nfunc updateEstimates(CPTravelEstimates, for: CPTrip)\nUpdates travel estimates, such as arrival time and the remaining time and distance for a trip.\nfunc update(CPTravelEstimates, for: CPTrip, with: CPTimeRemainingColor)\nUpdates travel estimates, such as arrival time and the remaining time and distance for a trip, with the specified time-remaining color.\nenum CPTimeRemainingColor\nThe color the system uses when displaying the time remaining for a trip.\nvar tripEstimateStyle: CPTripEstimateStyle\nThe style that the map template uses when displaying trip estimates during active nagivation."
  },
  {
    "title": "tripEstimateStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/3019566-tripestimatestyle",
    "html": "Discussion\n\nThe default value is CPTripEstimateStyle.dark.\n\nSee Also\nProviding Trip Estimates\nfunc updateEstimates(CPTravelEstimates, for: CPTrip)\nUpdates travel estimates, such as arrival time and the remaining time and distance for a trip.\nfunc update(CPTravelEstimates, for: CPTrip, with: CPTimeRemainingColor)\nUpdates travel estimates, such as arrival time and the remaining time and distance for a trip, with the specified time-remaining color.\nenum CPTimeRemainingColor\nThe color the system uses when displaying the time remaining for a trip.\nenum CPTripEstimateStyle\nThe set of display styles for trip estimates."
  },
  {
    "title": "present(navigationAlert:animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2968361-present",
    "html": "Parameters\nnavigationAlert\n\nThe navigation alert to display.\n\nanimated\n\nTo animate the display of the alert, set to true; otherwise, set to false to immediately display the alert.\n\nDiscussion\n\nThis method has no effect when the map template is already displaying a navigation alert. Dismiss the current alert before presenting a new one.\n\nSee Also\nDisplaying a Navigation Alert\nfunc dismissNavigationAlert(animated: Bool, completion: (Bool) -> Void)\nTells the map template to dismiss the visable navigation alert.\nvar currentNavigationAlert: CPNavigationAlert?\nThe visible navigation alert.\nclass CPNavigationAlert\nAn alert that displays map- or navigation-related information to the user."
  },
  {
    "title": "init(titleVariants:subtitleVariants:imageSet:primaryAction:secondaryAction:duration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/3014025-init",
    "html": "Parameters\ntitleVariants\n\nAn array of localized, displayable titles. The system selects the title that fits in the available display space.\n\nsubtitleVariants\n\nAn array of localized, displayable subtitles. The system selects the title that fits in the available display space.\n\nimageSet\n\nAn image set displayed in the navigation alert. The navigation alert doesn't support animated images. If you provide an animated image, the alert uses the first image in the animation sequence.\n\nprimaryAction\n\nThe primary action and its button.\n\nsecondaryAction\n\nAn optional, secondary action with its button.\n\nduration\n\nThe amount of time, in seconds, that the alert is visible. Setting the duration to 0 displays the alert until dismissed by the user.\n\nReturn Value\n\nA newly initialized navigation alert.\n\nSee Also\nCreating a Navigation Alert\ninit(titleVariants: [String], subtitleVariants: [String]?, image: UIImage?, primaryAction: CPAlertAction, secondaryAction: CPAlertAction?, duration: TimeInterval)\nCreates a navigation alert."
  },
  {
    "title": "currentNavigationAlert | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2968353-currentnavigationalert",
    "html": "Discussion\n\nIf a navigation alert isn't visible, the property returns nil.\n\nSee Also\nDisplaying a Navigation Alert\nfunc present(navigationAlert: CPNavigationAlert, animated: Bool)\nDisplays a navigation alert on the map template.\nfunc dismissNavigationAlert(animated: Bool, completion: (Bool) -> Void)\nTells the map template to dismiss the visable navigation alert.\nclass CPNavigationAlert\nAn alert that displays map- or navigation-related information to the user."
  },
  {
    "title": "titleVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/2977582-titlevariants",
    "html": "Discussion\n\nEach title should be localized and ready for display to the user. The system selects the title to display based on the available screen space.\n\nSee Also\nGetting Titles\nvar subtitleVariants: [String]\nAn array of subtitle strings.\nfunc updateTitleVariants([String], subtitleVariants: [String])\nUpdates title and subtitle variants."
  },
  {
    "title": "subtitleVariants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/2977581-subtitlevariants",
    "html": "Discussion\n\nEach subtitle should be localized and ready for display to the user. The system selects the subtitle to display based on the available screen space.\n\nSee Also\nGetting Titles\nvar titleVariants: [String]\nAn array of title strings.\nfunc updateTitleVariants([String], subtitleVariants: [String])\nUpdates title and subtitle variants."
  },
  {
    "title": "updateTitleVariants(_:subtitleVariants:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/3014026-updatetitlevariants",
    "html": "Parameters\nnewTitleVariants\n\nAn array of localized, displayable titles. The system selects the title that fits in the available display space.\n\nnewSubtitleVariants\n\nAn array of localized, displayable subtitles. The system selects the title that fits in the available display space.\n\nDiscussion\n\nYou can update the navigation alert with new title and subtitle variants before presenting the alert or after displaying it. Updating a dismissed alert has no effect.\n\nSee Also\nGetting Titles\nvar titleVariants: [String]\nAn array of title strings.\nvar subtitleVariants: [String]\nAn array of subtitle strings."
  },
  {
    "title": "CPApplicationDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpapplicationdelegate",
    "html": "Overview\n\nYou must implement CPApplicationDelegate on the same object that serves as the delegate to your app.\n\nTopics\nConnecting to the CarPlay Interface\nfunc application(UIApplication, didConnectCarInterfaceController: CPInterfaceController, to: CPWindow)\nTells the app delegate that the app connected to the CarPlay interface.\n\nRequired\n\nfunc application(UIApplication, didDisconnectCarInterfaceController: CPInterfaceController, from: CPWindow)\nTells the app delegate that the app disconnected from the CarPlay interface.\n\nRequired\n\nReceiving the Selected Maneuver\nfunc application(UIApplication, didSelect: CPManeuver)\nTells the app delegate that the user selected a maneuver.\nHandling Navigation Alert Actions\nfunc application(UIApplication, didSelect: CPNavigationAlert)\nTells the app delegate that the user selected an action from a navigation alert.\nRelationships\nInherits From\nUIApplicationDelegate\nSee Also\nRelated Documentation\nIntegrating CarPlay with Your Navigation App\nConfigure your navigation app to work with CarPlay by displaying your custom map and directions."
  },
  {
    "title": "primaryButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3566426-primarybutton",
    "html": "See Also\nManaging the Detail Card's Buttons\nvar secondaryButton: CPTextButton?\nThe detail card’s secondary action button."
  },
  {
    "title": "secondaryButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3566427-secondarybutton",
    "html": "See Also\nManaging the Detail Card's Buttons\nvar primaryButton: CPTextButton?\nThe detail card’s primary action button."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest/3678728-userinfo",
    "html": "Discussion\n\nUse this property to attach a value that provides additional context for the point of interest. For example, you can attach a model object and reference it in your delegate’s pointOfInterestTemplate(_:didSelectPointOfInterest:) method when the user selects the point of interest."
  },
  {
    "title": "lightContentImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpimageset/3013991-lightcontentimage",
    "html": "See Also\nGetting Content Images\nvar darkContentImage: UIImage\nThe image the system displays when the user interface style is dark."
  },
  {
    "title": "selectedIndex | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinteresttemplate/3589349-selectedindex",
    "html": "Discussion\n\nThe value of the property must be within the bounds of the pointsOfInterest array, or NSNotFound to indicate no selection.\n\nSee Also\nManaging the Points of Interest\nvar pointsOfInterest: [CPPointOfInterest]\nThe points of interest the template displays on the map and in the scrollable picker.\nfunc setPointsOfInterest([CPPointOfInterest], selectedIndex: Int)\nUpdates the points of interest and the current selection."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationdashboardscene/3516951-delegate",
    "html": "Discussion\n\nUse this property to access the delegate object CarPlay creates from the class name you provide in the scene manifest of your app’s Info.plist file. You can update this property at runtime to provide an alternate delegate object.\n\nSee Also\nResponding to the Dashboard Scene Life Cycle\nprotocol CPTemplateApplicationDashboardSceneDelegate\nThe methods for responding to the life-cycle events of your navigation app’s dashboard scene."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbutton/3664486-image",
    "html": "Discussion\n\nThis property returns the custom image you provide at initialization, or a system image when using a concrete subclass like CPContactCallButton.\n\nCarPlay doesn’t support animated images. If you provide an animated image, this property returns the first image in the animation sequence."
  },
  {
    "title": "CPButtonMaximumImageSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbuttonmaximumimagesize",
    "html": "See Also\nCreating a Button\ninit(image: UIImage, handler: ((CPButton) -> Void)?)\nCreates a button that displays an image and invokes a handler when the user taps it."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/2968386-image",
    "html": "Discussion\n\nThe navigation alert doesn't support animated images. If image references an animated image, the alert displays first image in the animation sequence.\n\nSee Also\nGetting the Alert Image\nvar imageSet: CPImageSet?\nAn image set displayed in the navigation alert."
  },
  {
    "title": "primaryAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/2968388-primaryaction",
    "html": "Discussion\n\nEach navigation alert must have a primary action.\n\nSee Also\nGetting the Actions\nvar secondaryAction: CPAlertAction?\nAn optional secondary action, and button, for the navigation alert."
  },
  {
    "title": "imageSet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/3014024-imageset",
    "html": "Discussion\n\nThe navigation alert doesn't support animated images. If imageSet references an animated image, the alert displays the first image in the animation sequence.\n\nSee Also\nGetting the Alert Image\nvar image: UIImage?\nAn image displayed in the navigation alert."
  },
  {
    "title": "CPNavigationAlert.DismissalContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/dismissalcontext",
    "html": "Topics\nDismissal Reasons\ncase timeout\nThe system dismissed the navigation alert due to a timeout.\ncase systemDismissed\nThe system dismissed the navigation alert.\ncase userDismissed\nThe user dismissed the navigation alert.\nRelationships\nConforms To\nSendable\nSee Also\nHandling Navigation Alerts\nfunc mapTemplate(CPMapTemplate, willShow: CPNavigationAlert)\nTells the delegate that the system will show the navigation alert.\nfunc mapTemplate(CPMapTemplate, didShow: CPNavigationAlert)\nTells the delegate that the system showed the navigation alert.\nfunc mapTemplate(CPMapTemplate, willDismiss: CPNavigationAlert, dismissalContext: CPNavigationAlert.DismissalContext)\nTells the delegate that the system is preparing to dismiss the navigation alert.\nfunc mapTemplate(CPMapTemplate, didDismiss: CPNavigationAlert, dismissalContext: CPNavigationAlert.DismissalContext)\nTells the delegate that the system dismissed the navigation alert."
  },
  {
    "title": "secondaryAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert/2968389-secondaryaction",
    "html": "Discussion\n\nThe alert displays the button for a secondary action on the trailing edge of the alert.\n\nSee Also\nGetting the Actions\nvar primaryAction: CPAlertAction\nThe primary action, and button, for the navigation alert."
  },
  {
    "title": "showPanningInterface(animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2990960-showpanninginterface",
    "html": "Parameters\nanimated\n\nA Boolean value that determines whether to animate the panning interface.\n\nDiscussion\n\nCalling this method while displaying the panning interface has no effect.\n\nWhile showing the panning interface, the system hides all map buttons. The system doesn't provide a button to dismiss the panning interface. Instead, you must provide a map button in the navigation bar that the user taps to dismiss the panning interface.\n\nSee Also\nPanning the Map\nfunc dismissPanningInterface(animated: Bool)\nDismisses the panning interface.\nvar isPanningInterfaceVisible: Bool\nA Boolean value that indicates whether the map template is displaying the panning interface."
  },
  {
    "title": "isPanningInterfaceVisible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/3014005-ispanninginterfacevisible",
    "html": "See Also\nPanning the Map\nfunc showPanningInterface(animated: Bool)\nShows the panning interface on the map.\nfunc dismissPanningInterface(animated: Bool)\nDismisses the panning interface."
  },
  {
    "title": "automaticallyHidesNavigationBar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2968352-automaticallyhidesnavigationbar",
    "html": "Discussion\n\nThe default is true.\n\nSee Also\nConfiguring Map Templates\nvar hidesButtonsWithNavigationBar: Bool\nA Boolean value that tells the system to hide the map buttons when hiding the navigation bar.\nvar guidanceBackgroundColor: UIColor\nThe background color the map template uses when displaying guidance."
  },
  {
    "title": "dismissPanningInterface(animated:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2990958-dismisspanninginterface",
    "html": "Parameters\nanimated\n\nA Boolean value that determines whether to animate the dismissal of the panning interface. Set to true to animate the dismissal.\n\nDiscussion\n\nWhen dismissing the panning interface, the system shows the previously hidden map buttons.\n\nSee Also\nPanning the Map\nfunc showPanningInterface(animated: Bool)\nShows the panning interface on the map.\nvar isPanningInterfaceVisible: Bool\nA Boolean value that indicates whether the map template is displaying the panning interface."
  },
  {
    "title": "CPMapButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmapbutton",
    "html": "Topics\nCreating a Map Button\ninit(handler: ((CPMapButton) -> Void)?)\nCreates a new map button.\nProviding Button Images\nvar image: UIImage?\nThe image to display on the button.\nvar focusedImage: UIImage?\nThe image to display when focus is on the button.\nControlling the Button\nvar isEnabled: Bool\nA Boolean value that enables and disables the map button.\nvar isHidden: Bool\nA Boolean value that hides and shows the map button.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nManaging Map Buttons\nvar mapButtons: [CPMapButton]\nAn array of map buttons on the trailing bottom corner of the map template."
  },
  {
    "title": "showTripPreviews(_:textConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/3014006-showtrippreviews",
    "html": "Parameters\ntripPreviews\n\nA list of trips to preview, limited to 12 trips.\n\ntextConfiguration\n\nA text configuration object containing the titles to display on trip preview buttons.\n\nDiscussion\n\nUse this method to display upcoming trips or multiple trip options, such as for search results. Trip previews can appear over the active navigation session.\n\nSee Also\nDisplaying Trip Previews\nfunc showTripPreviews([CPTrip], selectedTrip: CPTrip?, textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the previews for a collection of trips, with a single selected trip.\nfunc hideTripPreviews()\nHides the display of trip previews.\nfunc showRouteChoicesPreview(for: CPTrip, textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the route choices for a single trip.\nclass CPTripPreviewTextConfiguration\nA configuration object for changing the button titles on a trip preview."
  },
  {
    "title": "mapButtons | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2968358-mapbuttons",
    "html": "Discussion\n\nWhen the array contains more than three buttons, the map template displays only the first three, ignoring the remaining buttons.\n\nSee Also\nManaging Map Buttons\nclass CPMapButton\nA button that represents an action that a map template displays on the CarPlay screen."
  },
  {
    "title": "mapDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2990959-mapdelegate",
    "html": "See Also\nHandling Map Template Events\nprotocol CPMapTemplateDelegate\nThe protocol an object implements to handle events from a map template."
  },
  {
    "title": "guidanceBackgroundColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/3019564-guidancebackgroundcolor",
    "html": "Discussion\n\nThe system determines whether guidanceBackgroundColor meets contrast requirements, and uses the default color when the provided color doesn’t meet those requirements. The system adjusts font color to correspond with the guidance background color.\n\nNote\n\nThe system ignores alpha values.\n\nSee Also\nConfiguring Map Templates\nvar automaticallyHidesNavigationBar: Bool\nA Boolean value that indicates whether the template should automatically hide the navigation bar.\nvar hidesButtonsWithNavigationBar: Bool\nA Boolean value that tells the system to hide the map buttons when hiding the navigation bar."
  },
  {
    "title": "instrumentClusterControllerDidDisconnectWindow(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinstrumentclustercontrollerdelegate/3751886-instrumentclustercontrollerdiddi",
    "html": "Required"
  },
  {
    "title": "instrumentClusterControllerDidConnect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinstrumentclustercontrollerdelegate/3751885-instrumentclustercontrollerdidco",
    "html": "Required"
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingbutton/3551821-isenabled",
    "html": "Discussion\n\nThe default value is true.\n\nSee Also\nManaging the Button State\nvar isSelected: Bool\nA Boolean value that indicates whether the button is in a selected state."
  },
  {
    "title": "nowPlayingTemplateAlbumArtistButtonTapped(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplateobserver/3650376-nowplayingtemplatealbumartistbut",
    "html": "Parameters\nnowPlayingTemplate\n\nThe template that contains the button that the user tapped.\n\nDiscussion\n\nWhen CarPlay calls this method on your observer, you should present or push a new template that displays the content of the current album, playlist or podcast.\n\nSee Also\nResponding to User Interactions\nfunc nowPlayingTemplateUpNextButtonTapped(CPNowPlayingTemplate)\nTells the observer that the user tapped the Up Next button."
  },
  {
    "title": "nowPlayingTemplateUpNextButtonTapped(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplateobserver/3650377-nowplayingtemplateupnextbuttonta",
    "html": "Parameters\nnowPlayingTemplate\n\nThe template that contains the button that the user tapped.\n\nDiscussion\n\nWhen CarPlay calls this method on your observer, you should push an instance of CPListTemplate—other template types are not supported when Now Playing is the visible template—on to your navigation stack that displays a list of upcoming or queued content.\n\nSee Also\nResponding to User Interactions\nfunc nowPlayingTemplateAlbumArtistButtonTapped(CPNowPlayingTemplate)\nTells the observer that the user tapped the Album-Artist button."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/deprecated_symbols",
    "html": "Topics\nDeprecated Methods\nfunc setRootTemplate(CPTemplate, animated: Bool)\nSets the root template, starting a new stack for the template navigation hierarchy.\nDeprecated\nfunc pushTemplate(CPTemplate, animated: Bool)\nPushes a template onto the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popTemplate(animated: Bool)\nPops the top template from the navigation stack and updates the CarPlay display.\nDeprecated\nfunc popToRootTemplate(animated: Bool)\nPops all templates on the stack—except the root template—and updates the CarPlay display.\nDeprecated\nfunc pop(to: CPTemplate, animated: Bool)\nPops templates until the specified template is at the top of the navigation stack.\nDeprecated\nfunc presentTemplate(CPTemplate, animated: Bool)\nPresents a template modally.\nDeprecated\nfunc dismissTemplate(animated: Bool)\nDismisses the template that the interface controller is displaying modally.\nDeprecated"
  },
  {
    "title": "presentedTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3019563-presentedtemplate",
    "html": "See Also\nDisplaying Templates Modally\nfunc presentTemplate(CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nPresents a template modally.\nfunc dismissTemplate(animated: Bool, completion: ((Bool, Error?) -> Void)?)\nDismisses a modal template."
  },
  {
    "title": "CPAssistantCellConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpassistantcellconfiguration",
    "html": "Overview\n\nAn audio or communication CarPlay app can choose to display an assistant cell in a list template that allows the user to interact with the app using Siri. You create an instance of this configuration object that describes the position, visibility, and supported Siri intent, and provide that to your app’s list template using the init(title:sections:assistantCellConfiguration:) initializer or the assistantCellConfiguration property.\n\nYour app must include an Intents Extension that handles the intent corresponding to the action you specify in the assistantAction property; audio apps must support INPlayMediaIntent and communication apps must support INStartCallIntent. For more information, see Creating an Intents App Extension.\n\nTopics\nCreating an Assistant Cell Configuration\ninit(position: CPListItem.AssistantCellPosition, visibility: CPListItem.AssistantCellVisibility, assistantAction: CPAssistantCellActionType)\nCreates a configuration object with the specified position, visibility, and action.\nGetting the Configuration Attributes\nvar position: CPListItem.AssistantCellPosition\nThe position of the assistant cell in the list template.\nvar visibility: CPListItem.AssistantCellVisibility\nThe visibility of the assistant cell in the list template.\nvar assistantAction: CPAssistantCellActionType\nThe action that Siri performs when the user selects the assistant cell.\nenum CPAssistantCellActionType\nThe supported Siri actions of the assistant cell.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nManaging the Assistant Cell\nvar assistantCellConfiguration: CPAssistantCellConfiguration?\nThe object that provides the configuration attributes for the assistant cell."
  },
  {
    "title": "init(title:sections:assistantCellConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/3867015-init",
    "html": "Parameters\ntitle\n\nThe title that the navigation bar displays while the template is visible.\n\nsections\n\nAn array of sections, each with zero or more list items. For more information, see CPListSection.\n\nassistantCellConfiguration\n\nThe object that provides the configuration attributes for the assistant cell, such as position and visibility. For more information, see CPAssistantCellConfiguration.\n\nDiscussion\n\nThe system provides the text and accessory image for the assistant cell and you can’t change these. Use the assistantCellConfiguration property to update the cell’s configuration after you initialize the template. CarPlay observes this property and automatically updates your app’s interface in response to any changes.\n\nYour app doesn’t receive a callback when the user selects the assistant cell. Instead, you configure an Intents Extension to handle the type of intent you specify in the cell’s configuration; audio apps must support INPlayMediaIntent and communication apps must support INStartCallIntent.\n\nSee Also\nCreating a List Template\ninit(title: String?, sections: [CPListSection])\nCreates a list template with an array of list sections and optional title."
  },
  {
    "title": "init(title:sections:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/3020709-init",
    "html": "Parameters\ntitle\n\nA title that appears in the navigation bar while the template is visible.\n\nsections\n\nAn array of list sections, each with zero or more list items.\n\nReturn Value\n\nA newly initialized list template.\n\nSee Also\nCreating a List Template\ninit(title: String?, sections: [CPListSection], assistantCellConfiguration: CPAssistantCellConfiguration?)\nCreates a sectioned list template that optionally displays the assistant cell."
  },
  {
    "title": "maximumSectionCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate/3551788-maximumsectioncount",
    "html": "Discussion\n\nThis property’s value is dependent on any user interface limits that the vehicle imposes. See CPSessionConfiguration for more information. At runtime, use this value to determine the maximum number of sections that your list can display.\n\nSee Also\nManaging Sections\nvar sectionCount: Int\nThe number of sections in the list.\nvar sections: [CPListSection]\nThe sections that the list displays.\nfunc updateSections([CPListSection])\nAdds, removes, reorders, or updates the list’s sections.\nclass CPListSection\nA container that groups your list items into sections."
  },
  {
    "title": "darkContentImage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpimageset/3013989-darkcontentimage",
    "html": "See Also\nGetting Content Images\nvar lightContentImage: UIImage\nThe image the system displays when the user interface style is light."
  },
  {
    "title": "init(image:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbutton/3664487-init",
    "html": "Parameters\nimage\n\nThe image that the button displays.\n\nhandler\n\nThe closure that the button invokes when the user taps it.\n\nReturn Value\n\nA new button that displays an image and invokes its handler when the user taps it.\n\nDiscussion\n\nProvide an image that is display-ready. If necessary, provide light and dark variants using an asset catalog, or use an instance of UIImageAsset and register an image for each interface style. To properly size your image, use the display scale of the vehicle’s primary screen, which you access from your interface controller’s carTraitCollection property, and ensure it is no larger than CPButtonMaximumImageSize.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nSee Also\nCreating a Button\nlet CPButtonMaximumImageSize: CGSize\nThe maximum size of a button’s image that CarPlay supports."
  },
  {
    "title": "CPAlertActionHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalertactionhandler",
    "html": "Parameters\naction\n\nThe alert action that invoked the block.\n\nSee Also\nGetting the Action Handler\nvar handler: CPAlertActionHandler\nThe closure that CarPlay invokes after the user taps the action button."
  },
  {
    "title": "handler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalertaction/2968255-handler",
    "html": "See Also\nGetting the Action Handler\ntypealias CPAlertActionHandler\nThe declaration for an alert action handler."
  },
  {
    "title": "CPAlertAction.Style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalertaction/style",
    "html": "Topics\nStyles\ncase `default`\nThe default display style for an action button.\ncase cancel\nThe display style indicating that the action leaves data unchanged.\ncase destructive\nThe style indicating that the action changes or deletes data.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Action Style\nvar style: CPAlertAction.Style\nThe display style for the action button."
  },
  {
    "title": "dismissTemplate(animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3650353-dismisstemplate",
    "html": "Parameters\nanimated\n\nIf true, CarPlay animates the dismissal of the template.\n\ncompletion\n\nThe closure CarPlay calls after it dismisses the template.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc dismissTemplate(animated: Bool) async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCarPlay calls completion after it dismisses the template. The Boolean parameter is true when the dismissal succeeds; otherwise, it’s false and CarPlay provides an error that describes the failure. CarPlay throws an exception if the dismissal fails and you don’t provide a closure.\n\nSee Also\nDisplaying Templates Modally\nfunc presentTemplate(CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nPresents a template modally.\nvar presentedTemplate: CPTemplate?\nThe interface controller’s current modal template."
  },
  {
    "title": "actions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpactionsheettemplate/3019553-actions",
    "html": "Discussion\n\nThe array must include at least one action.\n\nSee Also\nGetting Action Sheet Template Information\nvar title: String?\nThe title of the action sheet.\nvar message: String?\nThe descriptive message providing details about the reason for displaying the action sheet."
  },
  {
    "title": "message | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpactionsheettemplate/3019555-message",
    "html": "See Also\nGetting Action Sheet Template Information\nvar title: String?\nThe title of the action sheet.\nvar actions: [CPAlertAction]\nThe list of actions available on the action sheet."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpactionsheettemplate/3019556-title",
    "html": "See Also\nGetting Action Sheet Template Information\nvar message: String?\nThe descriptive message providing details about the reason for displaying the action sheet.\nvar actions: [CPAlertAction]\nThe list of actions available on the action sheet."
  },
  {
    "title": "pointOfInterestTemplate(_:didChangeMapRegion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinteresttemplatedelegate/3626473-pointofinteresttemplate",
    "html": "Required\n\nParameters\naTemplate\n\nThe Point of Interest template that displays the map.\n\nregion\n\nThe map’s new visible region.\n\nDiscussion\n\nCarPlay calls this method whenever the user pans the template’s map and its visible region changes. In response, re-evaluate which points of interest are relevant to the new region and, if necessary, call setPointsOfInterest(_:selectedIndex:) to update the template."
  },
  {
    "title": "init(title:layout:items:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationtemplate/3664503-init",
    "html": "Parameters\ntitle\n\nThe title that the template displays.\n\nlayout\n\nThe layout that the template uses to arrange its items. See CPInformationTemplateLayout for more information.\n\nitems\n\nAn array of information items that the template displays.\n\nactions\n\nAn array of text buttons that provides the actions that the user can perform.\n\nDiscussion\n\nThe template can display up to 10 information items. If items contains more objects, the template uses only the first 10. Likewise, the template displays three actions maximum. If actions contains more than that, the template uses only the first three."
  },
  {
    "title": "init(title:message:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpactionsheettemplate/3019554-init",
    "html": "Parameters\ntitle\n\nThe title of the action sheet.\n\nmessage\n\nA descriptive message providing details about the reason for displaying the action sheet.\n\nactions\n\nA list of actions available on the action sheet. The array must contain at least one action.\n\nReturn Value\n\nA newly initialized action sheet template."
  },
  {
    "title": "CPInformationRatingItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationratingitem",
    "html": "Overview\n\nCPInformationRatingItem provides the ability to display rated content in the rows of an information template. Depending on the template’s layout, the item’s attributes stack vertically or horizontally in the rows. The title property describes the content, and the detail property provides the content. Use the rating and maximumRating properties to display a rating for the content. For example, you could show a service rating when displaying information about a restaurant or café.\n\nThe template manages the visual styling of the rating and maximum rating.\n\nTopics\nCreating a Rating Item\ninit(rating: NSNumber?, maximumRating: NSNumber?, title: String?, detail: String?)\nCreates a rating item with a current and a maximum rating.\nAccessing the Item's Attributes\nvar rating: NSNumber?\nThe current rating that the template displays.\nvar maximumRating: NSNumber?\nThe maximum rating that the template displays.\nRelationships\nInherits From\nCPInformationItem\nSee Also\nManaging the Items\nvar items: [CPInformationItem]\nThe items that the template displays.\nclass CPInformationItem\nA data object that provides content for an information template."
  },
  {
    "title": "CPInformationItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationitem",
    "html": "Overview\n\nCPInformationTemplate uses information items to populate the rows of its list. Depending on the template’s layout, the item’s title and detail values stack vertically or horizontally in the row. Use the title property to describe the content, and the detail property to provide the content. For example, when using CPInformationTemplate to present a food order summary, you could provide an item that displays the number of minutes until the order is ready.\n\nTopics\nCreating an Information Item\ninit(title: String?, detail: String?)\nCreates an information item with a title and detail text.\nAccessing the Item's Attributes\nvar title: String?\nThe text that the template displays as the item’s title.\nvar detail: String?\nThe text that the template displays below or beside the item’s title.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nManaging the Items\nvar items: [CPInformationItem]\nThe items that the template displays.\nclass CPInformationRatingItem\nA data object that provides rated content for an information template."
  },
  {
    "title": "presentTemplate(_:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3650357-presenttemplate",
    "html": "Parameters\ntemplateToPresent\n\nThe template to present modally.\n\nanimated\n\nIf true, CarPlay animates the presentation of the template.\n\ncompletion\n\nThe closure CarPlay calls after it presents the template.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc presentTemplate(_ templateToPresent: CPTemplate, animated: Bool) async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nCarPlay can only present one modal template at a time. templateToPresent must be one of CPActionSheetTemplate, CPAlertTemplate, or CPVoiceControlTemplate.\n\nCarPlay calls completion after it presents the template. The Boolean parameter is true when the presentation succeeds; otherwise, it’s false and CarPlay provides an error that describes the failure. CarPlay throws an exception if the presentation fails and you don’t provide a closure.\n\nSee Also\nDisplaying Templates Modally\nfunc dismissTemplate(animated: Bool, completion: ((Bool, Error?) -> Void)?)\nDismisses a modal template.\nvar presentedTemplate: CPTemplate?\nThe interface controller’s current modal template."
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationtemplate/3664504-items",
    "html": "Discussion\n\nAssign a new array to this property to update the items that the template displays. The template can display 10 items maximum. If the array contains more items, the template uses only the first 10.\n\nSee Also\nManaging the Items\nclass CPInformationItem\nA data object that provides content for an information template.\nclass CPInformationRatingItem\nA data object that provides rated content for an information template."
  },
  {
    "title": "layout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationtemplate/3664505-layout",
    "html": "See Also\nAccessing the Layout\nenum CPInformationTemplateLayout\nThe layout that an information template uses to arrange its items."
  },
  {
    "title": "init(title:textStyle:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptextbutton/3664511-init",
    "html": "Parameters\ntitle\n\nThe text that the button displays.\n\ntextStyle\n\nThe style that the button applies to its title.\n\nhandler\n\nA closure that CarPlay invokes when the user taps the button."
  },
  {
    "title": "CPInformationTemplateLayout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationtemplatelayout",
    "html": "Topics\nTemplate Layout Styles\ncase leading\nA layout that displays a template’s items aligned to its leading edge.\ncase twoColumn\nA layout that displays a template’s items in two columns.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the Layout\nvar layout: CPInformationTemplateLayout\nThe layout that the template uses to arrange its items."
  },
  {
    "title": "CPTextButtonStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptextbuttonstyle",
    "html": "Topics\nButton Text Styles\ncase normal\nA style that indicates the button performs an action other than to confirm or cancel.\ncase confirm\nA style that indicates the button confirms an action and changes data.\ncase cancel\nA style that indicates the button cancels an action and doesn’t change data.\nRelationships\nConforms To\nSendable\nSee Also\nManaging the Button Style\nvar textStyle: CPTextButtonStyle\nThe text style the button applies to its title."
  },
  {
    "title": "textStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptextbutton/3664512-textstyle",
    "html": "See Also\nManaging the Button Style\nenum CPTextButtonStyle\nThe styles a button can apply to its title to communicate its action."
  },
  {
    "title": "activeStateIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpvoicecontroltemplate/3014042-activestateidentifier",
    "html": "See Also\nActivating a State\nfunc activateVoiceControlState(withIdentifier: String)\nChanges the template’s state to the one matching the specified identifier."
  },
  {
    "title": "activateVoiceControlState(withIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpvoicecontroltemplate/3014041-activatevoicecontrolstate",
    "html": "Parameters\nidentifier\n\nAn identifier corresponding to one of the voiceControlStates associated with the template.\n\nDiscussion\n\nYour app must present the voice control template using its CPInterfaceController object before the app can activate a new state. Calling this method before presenting the template has no effect on the active state.\n\nNote\n\nThe voice control template applies a rate limit for voice control states, ignoring state changes occurring too rapidly or frequently in a short period of time.\n\nSee Also\nActivating a State\nvar activeStateIdentifier: String?\nThe identifier of the template’s current voice control state."
  },
  {
    "title": "CPListItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplistitem",
    "html": "Overview\n\nA list item manages the content of a single row in a list template. CarPlay manages the layout of a list item and may adjust its layout to allow for the display of auxiliary content, such as an accessory or a Now Playing indicator. A list item can display primary and secondary text and an image. It can also show an accessory or custom accessory image, and one of several indicators that the system provides.\n\nYou assign a handler to a list item that CarPlay executes when the user selects the item. The handler receives the item and a closure that you must call after you finish processing the selection.\n\nCarPlay doesn’t support custom list item types. Instead, use the userInfo property to attach a value to the list item that provides additional context, such as specifying a model object that corresponds to the item.\n\nTopics\nCreating a List Item\ninit(text: String?, detailText: String?)\nCreates a list item with primary and secondary text.\ninit(text: String?, detailText: String?, image: UIImage?)\nCreates a list item with primary text, secondary text, and an image.\ninit(text: String?, detailText: String?, image: UIImage?, accessoryImage: UIImage?, accessoryType: CPListItemAccessoryType)\nCreates a list item that displays an accessory beside its content.\nManaging Configuration\nvar isEnabled: Bool\nA Boolean value that indicates if the item is enabled.\nvar handler: ((CPSelectableListItem, () -> Void) -> Void)?\nAn optional closure that CarPlay invokes when the user selects the list item.\nvar userInfo: Any?\nAn opaque value for the list item.\nManaging Accessories\nvar accessoryType: CPListItemAccessoryType\nThe accessory that the list item displays in its trailing region.\nenum CPListItemAccessoryType\nThe accessory types that a list item can display.\nvar accessoryImage: UIImage?\nThe image that the list item displays in its trailing region.\nfunc setAccessoryImage(UIImage?)\nUpdates the list item’s accessory image.\nManaging Content\nvar text: String?\nThe list item’s primary text.\nfunc setText(String)\nUpdates the list item’s primary text.\nvar detailText: String?\nThe list item’s secondary text.\nfunc setDetailText(String?)\nUpdates the list item’s secondary text.\nvar image: UIImage?\nThe image that the list item displays in its leading region.\nfunc setImage(UIImage?)\nUpdates the list item’s image.\nclass var maximumImageSize: CGSize\nThe maximum size of a list item’s image and accessory image.\nManaging Playback Information\nvar isExplicitContent: Bool\nA Boolean value that determines whether the list item displays its explicit content indicator.\nvar isPlaying: Bool\nA Boolean value that determines whether the list item displays its Now Playing indicator.\nvar playingIndicatorLocation: CPListItemPlayingIndicatorLocation\nThe location where the list item displays its Now Playing indicator.\nenum CPListItemPlayingIndicatorLocation\nThe locations where a list item can display the Now Playing indicator.\nvar playbackProgress: CGFloat\nThe playback progress status for the content that the list item represents.\nManaging the Assistant Cell\nenum CPListItem.AssistantCellPosition\nConstants to specify the position of the assistant cell.\nenum CPListItem.AssistantCellVisibility\nConstants to specify the visibility of the assistant cell.\nDeprecated\nDeprecated Symbols\nReview unsupported symbols and their replacements.\nRelationships\nInherits From\nNSObject\nConforms To\nCPSelectableListItem\nSee Also\nCreating a Section\ninit(items: [CPListTemplateItem])\nCreates a section with list items.\ninit(items: [CPListTemplateItem], header: String?, sectionIndexTitle: String?)\nCreates a section with list items, a header, and a section index title.\ninit(items: [CPListTemplateItem], header: String, headerSubtitle: String?, headerImage: UIImage?, headerButton: CPButton?, sectionIndexTitle: String?)\nCreates a section with list items, a header, a section index title, and section header details.\nprotocol CPListTemplateItem\nA description of the common properties of all list item types.\nprotocol CPSelectableListItem\nA description of a selectable list item.\nclass CPListImageRowItem\nA list template row that displays a series of images.\nclass CPMessageListItem\nA list template row that represents a conversation or contact."
  },
  {
    "title": "CPVoiceControlState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpvoicecontrolstate",
    "html": "Topics\nCreating a Voice Control State\ninit(identifier: String, titleVariants: [String]?, image: UIImage?, repeats: Bool)\nCreates a voice control state.\nGetting State Information\nvar identifier: String\nThe string that your app uses to identify the voice control state.\nvar titleVariants: [String]?\nThe array of title variants for the voice control state.\nvar image: UIImage?\nThe image displayed while the voice control template is in this state.\nvar repeats: Bool\nA Boolean value that indicates whether the display of an animated image repeats the animation sequence indefinitely.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nCreating a Voice Control Template\ninit(voiceControlStates: [CPVoiceControlState])\nCreates a voice control template with a list of voice control states."
  },
  {
    "title": "init(voiceControlStates:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpvoicecontroltemplate/3014043-init",
    "html": "Parameters\nvoiceControlStates\n\nAn array of voice control states associated with the template. You can provide up to five states. If you provide more, the template ignores any states after the first five in the array.\n\nReturn Value\n\nA newly initialized voice control template.\n\nDiscussion\n\nWhen presenting the voice control template for the first time, the template defaults to the first state in the voiceControlStates array. You can change the state after presenting the template by calling the activateVoiceControlState(withIdentifier:) method.\n\nSee Also\nCreating a Voice Control Template\nclass CPVoiceControlState\nA voice control state containing title variants and images for use by a voice control template."
  },
  {
    "title": "CPSearchTemplateDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsearchtemplatedelegate",
    "html": "Topics\nUpdating Search Text\nfunc searchTemplate(CPSearchTemplate, updatedSearchText: String, completionHandler: ([CPListItem]) -> Void)\nTells the delegate that the user updated the search criteria text.\n\nRequired\n\nSelecting a Search Result Item\nfunc searchTemplate(CPSearchTemplate, selectedResult: CPListItem, completionHandler: () -> Void)\nTells the delegate that the user selected an item from the search result.\n\nRequired\n\nPressing the Search Button\nfunc searchTemplateSearchButtonPressed(CPSearchTemplate)\nTells the delegate that the user tapped the keyboard’s search button.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nProviding a Search Template Delegate\nvar delegate: CPSearchTemplateDelegate?\nThe object that serves as the search template's delegate."
  },
  {
    "title": "searchTemplate(_:updatedSearchText:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsearchtemplatedelegate/2968421-searchtemplate",
    "html": "Required\n\nParameters\nsearchTemplate\n\nThe current search template.\n\nsearchText\n\nThe search criteria text entered by the user.\n\ncompletionHandler\n\nThe block your implementation calls after retrieving the search result.\n\nsearchResults\n\nAn array of CPListItem objects—one list item for each search result item.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc searchTemplate(_ searchTemplate: CPSearchTemplate, updatedSearchText searchText: String) async -> [CPListItem]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nAfter the method retrieves the search result, the method must call completionHandler for the system to display the result to the user."
  },
  {
    "title": "searchTemplate(_:selectedResult:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsearchtemplatedelegate/2977583-searchtemplate",
    "html": "Required\n\nParameters\nsearchTemplate\n\nThe current search template.\n\nitem\n\nThe search result item selected by the user.\n\ncompletionHandler\n\nThe block that you must call after processing the selected result item.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc searchTemplate(_ searchTemplate: CPSearchTemplate, selectedResult item: CPListItem) async\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nYour implementation must call the completion handler after processing the selected result item."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsearchtemplate/2968418-delegate",
    "html": "See Also\nProviding a Search Template Delegate\nprotocol CPSearchTemplateDelegate\nThe interface for an object that serves as the search template’s delegate."
  },
  {
    "title": "remove(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplate/3650373-remove",
    "html": "Parameters\nobserver\n\nAn object that implements the CPNowPlayingTemplateObserver protocol.\n\nDiscussion\n\nYou must register an observer using the add(_:) method before calling this method.\n\nSee Also\nObserving Now Playing Events\nfunc add(CPNowPlayingTemplateObserver)\nRegisters an observer that receives Now Playing template events.\nprotocol CPNowPlayingTemplateObserver\nThe methods for responding to the user interacting with the Now Playing template."
  },
  {
    "title": "add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplate/3650372-add",
    "html": "Parameters\nobserver\n\nAn object that implements the CPNowPlayingTemplateObserver protocol.\n\nSee Also\nObserving Now Playing Events\nfunc remove(CPNowPlayingTemplateObserver)\nRemoves an observer from receiving Now Playing template events.\nprotocol CPNowPlayingTemplateObserver\nThe methods for responding to the user interacting with the Now Playing template."
  },
  {
    "title": "CPTemplateApplicationDashboardScene | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationdashboardscene",
    "html": "Overview\n\nA dashboard scene manages the display of your navigation app’s dashboard window on the CarPlay Dashboard, and notifies its delegate—an object that conforms to CPTemplateApplicationDashboardSceneDelegate—about scene life-cycle events. Use the dashboard controller the scene provides to supply shortcut buttons to display when there’s no active navigation session, further customizing you app’s presence on the CarPlay Dashboard.\n\nYou don’t create an instance of the dashboard scene directly. Instead, you specify the name of the class as part of the CarPlay Dashboard scene configuration that you add to your Info.plist file—see the example below—or that you return from your app delegate’s application(_:configurationForConnecting:options:) method.\n\n<key>CPTemplateApplicationDashboardSceneSessionRoleApplication</key>\n<array> \n    <dict>\n        <!-- Specify the name of the CarPlay Dashboard scene class. -->\n        <key>UISceneClassName</key>\n        <string>CPTemplateApplicationDashboardScene</string>\n        <key>UISceneConfigurationName</key>\n        <string>MyCarPlayDashboardSceneConfiguration</string> \n        <key>UISceneDelegateClassName</key>\n        <string>MyCarPlayDashboardSceneDelegate</string> \n    </dict>\n</array>\n\n\nTopics\nResponding to the Dashboard Scene Life Cycle\nvar delegate: CPTemplateApplicationDashboardSceneDelegate?\nThe object that receives the dashboard scene’s life-cycle events.\nprotocol CPTemplateApplicationDashboardSceneDelegate\nThe methods for responding to the life-cycle events of your navigation app’s dashboard scene.\nAccessing the Dashboard Controller\nvar dashboardController: CPDashboardController\nThe controller that manages the dashboard scene’s shortcut buttons.\nclass CPDashboardController\nA controller that provides shortcut buttons for the CarPlay Dashboard.\nAccessing the Dashboard Window\nvar dashboardWindow: UIWindow\nThe window that belongs to the dashboard scene.\nRelationships\nInherits From\nUIScene\nSee Also\nNavigation\nIntegrating CarPlay with Your Navigation App\nConfigure your navigation app to work with CarPlay by displaying your custom map and directions.\nprotocol CPTemplateApplicationDashboardSceneDelegate\nThe methods for responding to the life-cycle events of your navigation app’s dashboard scene.\nclass CPMapTemplate\nA template that displays a navigation overlay that your app draws on the map.\nclass CPSearchTemplate\nA template that provides the ability to search for a destination and see a list of search results.\nclass CPVoiceControlTemplate\nA template that displays a voice control indicator during audio input."
  },
  {
    "title": "upNextTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplate/3551842-upnexttitle",
    "html": "Discussion\n\nIf you display the Up Next button in your app by setting isUpNextButtonEnabled to true, use this property to set the button’s title. If you don’t specify a title, CarPlay uses the system default title.\n\nSee Also\nManaging Albums, Artists, and Up Next\nvar isAlbumArtistButtonEnabled: Bool\nA Boolean value that indicates whether the album and artist string is a button.\nvar isUpNextButtonEnabled: Bool\nA Boolean value that manages the display of the Up Next button."
  },
  {
    "title": "limitedUserInterfaces | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsessionconfiguration/2968428-limiteduserinterfaces",
    "html": "See Also\nGetting the Limits\nstruct CPLimitableUserInterface\nThe types of limitable user interface elements."
  },
  {
    "title": "isUpNextButtonEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplate/3551841-isupnextbuttonenabled",
    "html": "Discussion\n\nSet this property to true to have the Now Playing template display an Up Next button in the upper-right corner of the CarPlay screen.\n\nThe default value is false.\n\nSee Also\nManaging Albums, Artists, and Up Next\nvar isAlbumArtistButtonEnabled: Bool\nA Boolean value that indicates whether the album and artist string is a button.\nvar upNextTitle: String\nThe title for the Up Next button."
  },
  {
    "title": "CPManeuver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaneuver",
    "html": "Overview\n\nYou use maneuvers to provide turn-by-turn guidance in navigation apps. Each maneuver represents a single navigation instruction and can include a symbol, an instruction, and estimates for remaining time and distance.\n\nYou supply an instruction as an array of variants, each with a different length. CarPlay chooses the longest variant that best fits the available space on the screen. You can optionally provide attributed variants that embed images using NSTextAttachment. See attributedInstructionVariants for more information.\n\nIn addition to the route guidance panel, you can show maneuvers on the CarPlay dashboard or in notification banners. Use the relevant properties to provide context-specific instructions and images.\n\nTopics\nProviding Instructions\nvar instructionVariants: [String]\nAn array of instruction variants for the maneuver.\nvar dashboardInstructionVariants: [String]\nAn array of instruction variants for the CarPlay dashboard.\nvar notificationInstructionVariants: [String]\nAn array of instruction variants for notification banners.\nProviding Attributed Instructions\nvar attributedInstructionVariants: [NSAttributedString]\nAn array of attributed instruction variants for the maneuver.\nvar dashboardAttributedInstructionVariants: [NSAttributedString]\nAn array of attributed instruction variants for the CarPlay dashboard.\nvar notificationAttributedInstructionVariants: [NSAttributedString]\nAn array of attributed instruction variants for notification banners.\nProviding Travel Estimates\nvar initialTravelEstimates: CPTravelEstimates?\nAn object that describes the distance and time remaining before the maneuver completes.\nProviding Symbol Images\nvar symbolImage: UIImage?\nAn image that represents the maneuver.\nvar dashboardSymbolImage: UIImage?\nAn image for the CarPlay dashboard that represents the maneuver.\nvar notificationSymbolImage: UIImage?\nAn image for notification banners that represents the maneuver.\nvar symbolSet: CPImageSet?\nAn image set that represents the maneuver.\nDeprecated\nProviding Junction Images\nvar junctionImage: UIImage?\nAn image that represents an upcoming junction.\nvar dashboardJunctionImage: UIImage?\nAn image for the CarPlay dashboard that represents an upcoming junction.\nProviding Additional Information\nvar userInfo: Any?\nA custom object associated with the maneuver.\nInstance Properties\nvar cardBackgroundColor: UIColor?\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nManaging Upcoming Maneuvers\nvar upcomingManeuvers: [CPManeuver]\nThe next set of maneuvers the user should perform while following the current route."
  },
  {
    "title": "showTripPreviews(_:selectedTrip:textConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/3551790-showtrippreviews",
    "html": "Parameters\ntripPreviews\n\nAn array of trips to preview.\n\nselectedTrip\n\nThe trip to select when CarPlay presents the list of trip previews.\n\ntextConfiguration\n\nA configuration object that contains the various titles a trip preview button can display.\n\nDiscussion\n\nUse this method to display upcoming trips or multiple trip options, such as search results. Trip previews can appear over an active navigation session. Provide an array of up to twelve CPTrip objects to preview. If the array contains more objects, CarPlay displays only the first twelve.\n\nThe trip you want to select must be a member of the tripPreviews array.\n\nSee Also\nDisplaying Trip Previews\nfunc showTripPreviews([CPTrip], textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the preview for one or more trips, and allows route selection.\nfunc hideTripPreviews()\nHides the display of trip previews.\nfunc showRouteChoicesPreview(for: CPTrip, textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the route choices for a single trip.\nclass CPTripPreviewTextConfiguration\nA configuration object for changing the button titles on a trip preview."
  },
  {
    "title": "showRouteChoicesPreview(for:textConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/3019565-showroutechoicespreview",
    "html": "Parameters\ntripPreview\n\nThe trip to preview.\n\ntextConfiguration\n\nA text configuration object containing the titles to display on trip preview buttons.\n\nDiscussion\n\nThe trip preview can appear over an active navigation session.\n\nSee Also\nDisplaying Trip Previews\nfunc showTripPreviews([CPTrip], textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the preview for one or more trips, and allows route selection.\nfunc showTripPreviews([CPTrip], selectedTrip: CPTrip?, textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the previews for a collection of trips, with a single selected trip.\nfunc hideTripPreviews()\nHides the display of trip previews.\nclass CPTripPreviewTextConfiguration\nA configuration object for changing the button titles on a trip preview."
  },
  {
    "title": "hideTripPreviews() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2968356-hidetrippreviews",
    "html": "See Also\nDisplaying Trip Previews\nfunc showTripPreviews([CPTrip], textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the preview for one or more trips, and allows route selection.\nfunc showTripPreviews([CPTrip], selectedTrip: CPTrip?, textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the previews for a collection of trips, with a single selected trip.\nfunc showRouteChoicesPreview(for: CPTrip, textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the route choices for a single trip.\nclass CPTripPreviewTextConfiguration\nA configuration object for changing the button titles on a trip preview."
  },
  {
    "title": "CPMaximumListSectionImageSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaximumlistsectionimagesize",
    "html": "Discussion\n\nTo properly size your images, use carTraitCollection to determine the display scale of the car screen."
  },
  {
    "title": "hidesButtonsWithNavigationBar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate/2968357-hidesbuttonswithnavigationbar",
    "html": "Discussion\n\nThe default is true.\n\nSee Also\nConfiguring Map Templates\nvar automaticallyHidesNavigationBar: Bool\nA Boolean value that indicates whether the template should automatically hide the navigation bar.\nvar guidanceBackgroundColor: UIColor\nThe background color the map template uses when displaying guidance."
  },
  {
    "title": "isAlbumArtistButtonEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplate/3551836-isalbumartistbuttonenabled",
    "html": "Discussion\n\nThe Now Playing template displays a string above the playback control buttons that contains the album and artist names. Set this property to true to turn the string into a button that you can use to present more information about the current track. To respond to a user tapping the button, create an object that conforms to CPNowPlayingTemplateObserver and register it with the Now Playing template using the template’s add(_:) method.\n\nThe default value is false.\n\nSee Also\nManaging Albums, Artists, and Up Next\nvar isUpNextButtonEnabled: Bool\nA Boolean value that manages the display of the Up Next button.\nvar upNextTitle: String\nThe title for the Up Next button."
  },
  {
    "title": "CPNowPlayingImageButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingimagebutton",
    "html": "Overview\n\nCPNowPlayingImageButton is a concrete subclass of CPNowPlayingButton. Use this class when you want to display a button that contains an image.\n\nIn iOS 17 and later, CarPlay retints the custom now playing image buttons your app provides; you need to provide images as monocolor assets.\n\nCarPlay doesn’t support animated images. If you provide an animated image, CarPlay uses only the first image in the animation sequence.\n\nTo properly size your image, use the display scale of the vehicle’s primary screen—see your interface controller’s carTraitCollection property—and make sure it is no larger than CPNowPlayingButtonMaximumImageSize.\n\nTopics\nCreating a Button\ninit(image: UIImage, handler: ((CPNowPlayingButton) -> Void)?)\nCreates a Now Playing button that displays a custom image and invokes a handler.\nlet CPNowPlayingButtonMaximumImageSize: CGSize\nThe maximum size CarPlay supports for a button’s image.\nGetting the Button's Image\nvar image: UIImage?\nThe image that the button displays.\nRelationships\nInherits From\nCPNowPlayingButton\nSee Also\nManaging the Template's Buttons\nvar nowPlayingButtons: [CPNowPlayingButton]\nThe Now Playing template’s playback control buttons.\nfunc updateNowPlayingButtons([CPNowPlayingButton])\nUpdates the playback control buttons the template displays.\nclass CPNowPlayingButton\nThe abstract base class that Now Playing template buttons use.\nclass CPNowPlayingAddToLibraryButton\nA button for adding the current playing item to a collection.\nclass CPNowPlayingMoreButton\nA button for presenting more options to the user.\nclass CPNowPlayingPlaybackRateButton\nA button for cycling through the available playback rates.\nclass CPNowPlayingRepeatButton\nA button for cycling through the available repeat modes.\nclass CPNowPlayingShuffleButton\nA button for cycling through the available shuffle modes."
  },
  {
    "title": "CPNowPlayingRepeatButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingrepeatbutton",
    "html": "Overview\n\nCPNowPlayingRepeatButton is a concrete subclass of CPNowPlayingButton. Use the button’s handler to invoke your existing functionality for cycling through repeat modes, using the same MPChangeRepeatModeCommand that you provide to MPRemoteCommandCenter.\n\nCarPlay uses MPRemoteCommandCenter to observe changes to the repeat mode and updates the button’s appearance accordingly.\n\nRelationships\nInherits From\nCPNowPlayingButton\nSee Also\nManaging the Template's Buttons\nvar nowPlayingButtons: [CPNowPlayingButton]\nThe Now Playing template’s playback control buttons.\nfunc updateNowPlayingButtons([CPNowPlayingButton])\nUpdates the playback control buttons the template displays.\nclass CPNowPlayingButton\nThe abstract base class that Now Playing template buttons use.\nclass CPNowPlayingImageButton\nA button that displays an image.\nclass CPNowPlayingAddToLibraryButton\nA button for adding the current playing item to a collection.\nclass CPNowPlayingMoreButton\nA button for presenting more options to the user.\nclass CPNowPlayingPlaybackRateButton\nA button for cycling through the available playback rates.\nclass CPNowPlayingShuffleButton\nA button for cycling through the available shuffle modes."
  },
  {
    "title": "nowPlayingButtons | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplate/3551840-nowplayingbuttons",
    "html": "Discussion\n\nYou use the updateNowPlayingButtons(_:) method to provide a maximum of five playback control buttons. The template arranges the buttons using the array’s order, from the leading edge of the CarPlay screen to the trailing edge.\n\nSee Also\nManaging the Template's Buttons\nfunc updateNowPlayingButtons([CPNowPlayingButton])\nUpdates the playback control buttons the template displays.\nclass CPNowPlayingButton\nThe abstract base class that Now Playing template buttons use.\nclass CPNowPlayingImageButton\nA button that displays an image.\nclass CPNowPlayingAddToLibraryButton\nA button for adding the current playing item to a collection.\nclass CPNowPlayingMoreButton\nA button for presenting more options to the user.\nclass CPNowPlayingPlaybackRateButton\nA button for cycling through the available playback rates.\nclass CPNowPlayingRepeatButton\nA button for cycling through the available repeat modes.\nclass CPNowPlayingShuffleButton\nA button for cycling through the available shuffle modes."
  },
  {
    "title": "CPMapTemplateDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplatedelegate",
    "html": "Topics\nSetting the Display Style\nfunc mapTemplate(CPMapTemplate, displayStyleFor: CPManeuver) -> CPManeuverDisplayStyle\nAsks the delegate for the maneuver’s display style.\nstruct CPManeuverDisplayStyle\nA display style that determines the visual layout for a maneuver.\nHandling Navigation Events\nfunc mapTemplate(CPMapTemplate, selectedPreviewFor: CPTrip, using: CPRouteChoice)\nTells the delegate that the user selected a trip and route choice to preview.\nfunc mapTemplate(CPMapTemplate, startedTrip: CPTrip, using: CPRouteChoice)\nTells the delegate that the user selected a trip and route choice to navigate.\nfunc mapTemplateDidCancelNavigation(CPMapTemplate)\nTells the delegate that the system canceled the navigation.\nDisplaying Notifications\nfunc mapTemplate(CPMapTemplate, shouldShowNotificationFor: CPManeuver) -> Bool\nAsks the delegate whether the system should display the maneuver as a notification when the app is in the background.\nfunc mapTemplate(CPMapTemplate, shouldUpdateNotificationFor: CPManeuver, with: CPTravelEstimates) -> Bool\nAsks the delegate whether the system should display the maneuver with updated travel estimates as a notification when the app is in the background.\nfunc mapTemplate(CPMapTemplate, shouldShowNotificationFor: CPNavigationAlert) -> Bool\nAsks the delegate whether the system should display the navigation alert as a notification when the app is in the background.\nHandling Navigation Alerts\nfunc mapTemplate(CPMapTemplate, willShow: CPNavigationAlert)\nTells the delegate that the system will show the navigation alert.\nfunc mapTemplate(CPMapTemplate, didShow: CPNavigationAlert)\nTells the delegate that the system showed the navigation alert.\nfunc mapTemplate(CPMapTemplate, willDismiss: CPNavigationAlert, dismissalContext: CPNavigationAlert.DismissalContext)\nTells the delegate that the system is preparing to dismiss the navigation alert.\nfunc mapTemplate(CPMapTemplate, didDismiss: CPNavigationAlert, dismissalContext: CPNavigationAlert.DismissalContext)\nTells the delegate that the system dismissed the navigation alert.\nenum CPNavigationAlert.DismissalContext\nA set of reasons for dismissing a navigation alert.\nPanning the Map\nfunc mapTemplateDidShowPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is visible on the map.\nfunc mapTemplateWillDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface will disappear from the map.\nfunc mapTemplateDidDismissPanningInterface(CPMapTemplate)\nTells the delegate that the panning interface is no longer visible on the map.\nfunc mapTemplateDidBeginPanGesture(CPMapTemplate)\nTells the delegate that the pan gesture has started.\nfunc mapTemplate(CPMapTemplate, panBeganWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is starting to pan the map.\nfunc mapTemplate(CPMapTemplate, panWith: CPMapTemplate.PanDirection)\nTells the delegate that the user is panning in a certain direction on the map.\nfunc mapTemplate(CPMapTemplate, panEndedWith: CPMapTemplate.PanDirection)\nTells the delegate that the user stopped panning the map.\nstruct CPMapTemplate.PanDirection\nThe directions a user can pan (or move) a map displayed on the CarPlay screen.\nfunc mapTemplate(CPMapTemplate, didEndPanGestureWithVelocity: CGPoint)\nTells the delegate that the pan gesture ended with the specified velocity.\nfunc mapTemplate(CPMapTemplate, didUpdatePanGestureWithTranslation: CGPoint, velocity: CGPoint)\nTells the delegate that the pan gesture changed.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nHandling Map Template Events\nvar mapDelegate: CPMapTemplateDelegate?\nThe object that serves as the delegate of the map template."
  },
  {
    "title": "updateNowPlayingButtons(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplate/3551843-updatenowplayingbuttons",
    "html": "Parameters\nnowPlayingButtons\n\nThe array of buttons to display.\n\nDiscussion\n\nYou can provide a maximum of five playback control buttons. The template arranges the buttons using the array’s order, from the leading edge of the CarPlay screen to the trailing edge.\n\nSee Also\nManaging the Template's Buttons\nvar nowPlayingButtons: [CPNowPlayingButton]\nThe Now Playing template’s playback control buttons.\nclass CPNowPlayingButton\nThe abstract base class that Now Playing template buttons use.\nclass CPNowPlayingImageButton\nA button that displays an image.\nclass CPNowPlayingAddToLibraryButton\nA button for adding the current playing item to a collection.\nclass CPNowPlayingMoreButton\nA button for presenting more options to the user.\nclass CPNowPlayingPlaybackRateButton\nA button for cycling through the available playback rates.\nclass CPNowPlayingRepeatButton\nA button for cycling through the available repeat modes.\nclass CPNowPlayingShuffleButton\nA button for cycling through the available shuffle modes."
  },
  {
    "title": "CPGridTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpgridtemplate",
    "html": "Overview\n\nUse this template to display a grid of items as buttons. When creating the grid template, provide an array of CPGridButton objects. Each button contains a title, an image, and an optional handler that the system invokes after the user taps the button on the CarPlay screen.\n\nWhen there are more than eight buttons in the array, the template displays only the first eight. When there are more than four buttons, the template balances the display of the buttons betweem two rows.\n\nTopics\nCreating a Grid Template\ninit(title: String?, gridButtons: [CPGridButton])\nCreates a grid template with a title and a set of buttons.\nclass CPGridButton\nA menu item button displayed on a grid template.\nGetting the Grid Title\nvar title: String\nThe title shown in the grid template's navigation bar.\nGetting the Grid Buttons\nvar gridButtons: [CPGridButton]\nThe array of grid buttons displayed on the template.\nInstance Methods\nfunc updateGridButtons([CPGridButton])\nfunc updateTitle(String)\nRelationships\nInherits From\nCPTemplate\nConforms To\nCPBarButtonProviding\nSee Also\nGeneral Purpose Templates\nclass CPListTemplate\nA template that displays and manages a list of items.\nclass CPTabBarTemplate\nA container template that displays and manages other templates, presenting them as tabs.\nclass CPTemplate\nAn abstract base class for interface templates.\nprotocol CPBarButtonProviding\nThe methods that templates use to provide buttons for the navigation bar."
  },
  {
    "title": "leadingNavigationBarButtons | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbuttonproviding/2968274-leadingnavigationbarbuttons",
    "html": "Required\n\nDiscussion\n\nThe navigation bar displays up to two buttons in the leading space. When including more than two buttons in the array, the system displays only the first two buttons.\n\nSee Also\nProviding Navigation Bar Buttons\nvar backButton: CPBarButton?\nA button to display as the Back button on the navigation bar.\n\nRequired\n\nvar trailingNavigationBarButtons: [CPBarButton]\nAn array of bar buttons to display on the trailing side of the navigation bar.\n\nRequired\n\nclass CPBarButton\nA button for placement in a navigation bar.\nclass CPMessageComposeBarButton\nA button that activates Siri and initiates the compose message flow."
  },
  {
    "title": "trailingNavigationBarButtons | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbuttonproviding/2968275-trailingnavigationbarbuttons",
    "html": "Required\n\nDiscussion\n\nThe navigation bar displays up to two buttons in the trailing space. When including more than two buttons in the array, the system displays only the first two buttons.\n\nSee Also\nProviding Navigation Bar Buttons\nvar backButton: CPBarButton?\nA button to display as the Back button on the navigation bar.\n\nRequired\n\nvar leadingNavigationBarButtons: [CPBarButton]\nAn array of bar buttons to display on the leading side of the navigation bar.\n\nRequired\n\nclass CPBarButton\nA button for placement in a navigation bar.\nclass CPMessageComposeBarButton\nA button that activates Siri and initiates the compose message flow."
  },
  {
    "title": "CPMessageComposeBarButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmessagecomposebarbutton",
    "html": "Overview\n\nNote\n\nThis button type does not use a handler. Instead, tapping this button activates Siri and initiates the compose message flow.\n\nTopics\nCreating a Message Compose Bar Button\ninit()\nCreates a message compose button with a system-provided image.\ninit(image: UIImage)\nCreates a message compose button that displays a custom image.\nRelationships\nInherits From\nCPBarButton\nSee Also\nProviding Navigation Bar Buttons\nvar backButton: CPBarButton?\nA button to display as the Back button on the navigation bar.\n\nRequired\n\nvar leadingNavigationBarButtons: [CPBarButton]\nAn array of bar buttons to display on the leading side of the navigation bar.\n\nRequired\n\nvar trailingNavigationBarButtons: [CPBarButton]\nAn array of bar buttons to display on the trailing side of the navigation bar.\n\nRequired\n\nclass CPBarButton\nA button for placement in a navigation bar."
  },
  {
    "title": "backButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbuttonproviding/3081778-backbutton",
    "html": "Required\n\nSee Also\nProviding Navigation Bar Buttons\nvar leadingNavigationBarButtons: [CPBarButton]\nAn array of bar buttons to display on the leading side of the navigation bar.\n\nRequired\n\nvar trailingNavigationBarButtons: [CPBarButton]\nAn array of bar buttons to display on the trailing side of the navigation bar.\n\nRequired\n\nclass CPBarButton\nA button for placement in a navigation bar.\nclass CPMessageComposeBarButton\nA button that activates Siri and initiates the compose message flow."
  },
  {
    "title": "CPBarButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbutton",
    "html": "Topics\nCreating a CarPlay Bar Button\ninit(type: CPBarButton.`Type`, handler: CPBarButtonHandler?)\nCreates a bar button with a type and handler.\nDeprecated\ninit(image: UIImage, handler: CPBarButtonHandler?)\nCreates a bar button that displays an image.\ninit(title: String, handler: CPBarButtonHandler?)\nCreates a bar button that displays a text label.\nenum CPBarButton.Type\nTypes of bar buttons.\ntypealias CPBarButtonHandler\nA block that CarPlay calls when the user taps a bar button.\nConfiguring the Button\nvar isEnabled: Bool\nA Boolean value that enables and disables the bar button.\nvar image: UIImage?\nThe image displayed on the bar button.\nvar title: String?\nThe title displayed on the bar button.\nGetting the Button Style\nvar buttonType: CPBarButton.`Type`\nThe display type for the bar button.\nDeprecated\nvar buttonStyle: CPBarButtonStyle\nThe style to use when displaying the button.\nenum CPBarButtonStyle\nThe display style of a bar button.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nProviding Navigation Bar Buttons\nvar backButton: CPBarButton?\nA button to display as the Back button on the navigation bar.\n\nRequired\n\nvar leadingNavigationBarButtons: [CPBarButton]\nAn array of bar buttons to display on the leading side of the navigation bar.\n\nRequired\n\nvar trailingNavigationBarButtons: [CPBarButton]\nAn array of bar buttons to display on the trailing side of the navigation bar.\n\nRequired\n\nclass CPMessageComposeBarButton\nA button that activates Siri and initiates the compose message flow."
  },
  {
    "title": "tabBarTemplate(_:didSelect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptabbartemplatedelegate/3551886-tabbartemplate",
    "html": "Required\n\nParameters\ntabBarTemplate\n\nThe tab bar template that alerts you to the change in selection.\n\nselectedTemplate\n\nThe template that the user selects.\n\nDiscussion\n\nThe tab bar template calls this method each time the user selects a tab. tabBarTemplate is the same template that the tab bar’s selectedTemplate property returns."
  },
  {
    "title": "showsTabBadge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplate/3592864-showstabbadge",
    "html": "Discussion\n\nSet this property to true to display a small red indicator on the tab to show that it requires action from the user, or is displaying ephemeral information.\n\nCarPlay only displays the indicator when the template is a root-template of a tab bar, otherwise setting this property has no effect.\n\nSee Also\nAccessing Tab Information\nvar tabTitle: String?\nA short title that describes the content of the tab.\nvar tabImage: UIImage?\nAn image that represents the content of the tab.\nvar tabSystemItem: UITabBarItem.SystemItem\nA system object that provides a title and image for common tab content, such as contacts or favorites."
  },
  {
    "title": "tabTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplate/3551889-tabtitle",
    "html": "Discussion\n\nCarPlay only uses the title when the template is a root-template of a tab bar, otherwise setting this property has no effect.\n\nSee Also\nAccessing Tab Information\nvar tabImage: UIImage?\nAn image that represents the content of the tab.\nvar tabSystemItem: UITabBarItem.SystemItem\nA system object that provides a title and image for common tab content, such as contacts or favorites.\nvar showsTabBadge: Bool\nAn indicator you use to call attention to the tab."
  },
  {
    "title": "setRootTemplate(_:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3650359-setroottemplate",
    "html": "Parameters\nrootTemplate\n\nThe template to use as the root of a new navigation hierarchy.\n\nanimated\n\nIf true, CarPlay animates the presentation of the template. CarPlay ignores this flag when there isn’t an existing navigation hierarchy to replace.\n\ncompletion\n\nThe closure CarPlay calls after it presents the template.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc setRootTemplate(_ rootTemplate: CPTemplate, animated: Bool) async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nIf you set a root template when a navigation hierarchy already exists, CarPlay replaces the entire hierarchy.\n\nCarPlay calls completion after it presents the template. The Boolean parameter is true when the presentation succeeds; otherwise, it’s false and CarPlay provides an error that describes the failure. CarPlay throws an exception if the presentation fails and you don’t provide a closure.\n\nSee Also\nConfiguring the Interface Controller\nvar delegate: CPInterfaceControllerDelegate?\nAn object that serves as the delegate to the interface controller.\nprotocol CPInterfaceControllerDelegate\nThe interface that an object implements to serve as a delegate to an interface controller.\nvar prefersDarkUserInterfaceStyle: Bool\nA Boolean value that determines whether the system draws the user interface in Dark Mode."
  },
  {
    "title": "rootTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/2968297-roottemplate",
    "html": "See Also\nAccessing Templates\nvar topTemplate: CPTemplate?\nThe top-most template in the navigation hierarchy.\nvar templates: [CPTemplate]\nThe contents of the navigation hierarchy."
  },
  {
    "title": "updateTemplates(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptabbartemplate/3551884-updatetemplates",
    "html": "Parameters\nnewTemplates\n\nAn array of templates to display.\n\nDiscussion\n\nThis method is multipurpose. Use it to add new templates to the tab bar, to remove and reorder existing templates, and to update a template’s tab bar appearance.\n\nAt runtime, use maximumTabCount to determine the maximum number of tabs the template can display. CarPlay throws an exception if the number of items in newTemplates exceeds this value.\n\nUse a transactional approach when making changes to the tab bar. Retrieve the current set of templates using the templates property. Add, remove, reorder, or make appearance changes to one or more of array’s templates. For example, use the tabTitle property to update a template’s tab title, or set showsTabBadge to true to add an indicator to a template’s tab, then call this method with the updated array. CarPlay commits those changes and updates the tab bar.\n\nCarPlay treats the array’s templates as root templates, each with its own navigation hierarchy. When a tab bar template is the rootTemplate of your app’s interface controller, and you use the controller to add and remove templates, CarPlay applies those changes to the selected tab’s navigation hierarchy.\n\nCarPlay restricts the type of template you can use as a tab’s root template according to your app’s entitlements. Audio apps can use List and Grid templates only. All other categories of apps can use List, Grid, and Information templates as a tab’s root template. In addition, EV-charging, parking, and food ordering apps can use the Point of Interest template as a root template. These restrictions apply only to a tab’s root template. You can add other template types, like the Contact and Now Playing templates, on top of a tab’s root template using the methods that CPInterfaceController provides.\n\nSee Also\nManaging the Templates\nvar templates: [CPTemplate]\nThe tab bar’s templates.\nclass var maximumTabCount: Int\nThe maximum number of tabs that the template can display."
  },
  {
    "title": "maximumTabCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptabbartemplate/3589351-maximumtabcount",
    "html": "Discussion\n\nThis property’s value depends on the app’s entitlements. At runtime, use this value to determine the maximum number of tabs that your tab bar can display.\n\nSee Also\nManaging the Templates\nvar templates: [CPTemplate]\nThe tab bar’s templates.\nfunc updateTemplates([CPTemplate])\nAdds, removes, reorders, or updates the tab bar’s templates."
  },
  {
    "title": "templates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptabbartemplate/3551883-templates",
    "html": "Discussion\n\nThe array contains the root template from each of the tab bar’s tabs. To add new templates to the tab bar, to remove or reorder existing templates, or to update a template’s tab bar appearance, use the updateTemplates(_:) method.\n\nSee Also\nManaging the Templates\nfunc updateTemplates([CPTemplate])\nAdds, removes, reorders, or updates the tab bar’s templates.\nclass var maximumTabCount: Int\nThe maximum number of tabs that the template can display."
  },
  {
    "title": "CPTabBarTemplateDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptabbartemplatedelegate",
    "html": "Overview\n\nYou use the CPTabBarTemplateDelegate protocol to respond to a tab bar template’s events. The protocol defines methods that the template calls in response to these events, and your implementation provides the appropriate behavior when the events occur. For example, reloading a tab’s contents when the user selects it to make sure it’s displaying the latest data.\n\nTopics\nManaging the Selected Template\nfunc tabBarTemplate(CPTabBarTemplate, didSelect: CPTemplate)\nTells the delegate when the tab bar selects the specified template.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nManaging Tab Bar Interactions\nvar delegate: CPTabBarTemplateDelegate?\nThe object that acts as the template’s delegate."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptabbartemplate/3551880-delegate",
    "html": "Discussion\n\nThe delegate must conform to the CPTabBarTemplateDelegate protocol.\n\nSee Also\nManaging Tab Bar Interactions\nprotocol CPTabBarTemplateDelegate\nThe methods an object implements to act as the delegate for a tab bar template."
  },
  {
    "title": "init(templates:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptabbartemplate/3551881-init",
    "html": "Parameters\ntemplates\n\nAn array of templates to display.\n\nDiscussion\n\nAt runtime, use maximumTabCount to determine the maximum number of tabs the template can display. CarPlay throws an exception if the number of items in templates exceeds this value.\n\nCarPlay treats the array’s templates as root templates, each with its own navigation hierarchy. When a tab bar template is the rootTemplate of your app’s interface controller, and you use the controller to add and remove templates, CarPlay applies those changes to the selected tab’s navigation hierarchy.\n\nCarPlay restricts the type of template you can use as a tab’s root template according to your app’s entitlements. Audio apps can use List and Grid templates only. All other categories of apps can use List, Grid, and Information templates as a tab’s root template. In addition, EV-charging, parking, and food ordering apps can use the Point of Interest template as a root template. These restrictions apply only to a tab’s root template. You can add other template types, like the Contact or Now Playing templates, on top of a tab’s root template using the methods that CPInterfaceController provides."
  },
  {
    "title": "CarPlay Enumerations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/carplay_enumerations",
    "html": "Topics\nEnumerations\nenum CPInstrumentClusterSetting"
  },
  {
    "title": "shortcutButtons | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpdashboardcontroller/3521395-shortcutbuttons",
    "html": "Discussion\n\nProvide an array of up to two shortcut buttons to display on the CarPlay Dashboard. The system manages hiding and showing these buttons when navigation is active or inactive.\n\nSee Also\nProviding Dashboard Buttons\nclass CPDashboardButton\nA shortcut button for placement on the CarPlay Dashboard."
  },
  {
    "title": "Using the CarPlay Simulator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/using_the_carplay_simulator",
    "html": "Overview\n\nSimulator provides the ability to run your CarPlay-enabled app in a second window. The window behaves as the vehicle’s primary CarPlay display, and you can interact with it like you would a real CarPlay system. Simulator provides additional options for navigation apps that you can enable to check your map content at various screen sizes and resolutions.\n\nDon’t use Simulator as your sole method of testing. Apple recommends that you also test in a vehicle or aftermarket system. If possible, use a device that supports wireless CarPlay. This allows you to use Xcode to debug your app while it’s running in a physical CarPlay environment.\n\nOpen the CarPlay Simulator\n\nSimulator doesn’t open the CarPlay window by default, but does keep it open for the rest of the session after you activate it. Simulator can’t display your CarPlay-enabled app unless it has the necessary entitlements. See Requesting CarPlay Entitlements for more information.\n\nTo open the CarPlay window:\n\nIn Xcode, build and run your project using the iOS simulator.\n\nFrom the Simulator menu bar, choose I/O > External Displays > CarPlay.\n\nThe CarPlay window is 800 x 480 pixels and uses a display scale of @2x, which represents the common configuration of many CarPlay systems.\n\nEnable Additional Options for Navigation Apps\n\nIf you’re developing a CarPlay-enabled navigation app, enable CarPlay’s additional options in Simulator, which allows you to change the window’s width, height, and scale. Use this flexibility to ensure your map content renders in all recommended configurations.\n\nBefore launching Simulator, open Terminal and enter the following command:\n\ndefaults write com.apple.iphonesimulator CarPlayExtraOptions -bool YES\n\n\nApple recommends that you test your CarPlay-enabled app using the following configurations, at a minimum:\n\nConfiguration\n\n\t\n\nWidth x height (pixels)\n\n\t\n\nScale\n\n\n\n\nMinimum\n\n\t\n\n748 x 456\n\n\t\n\n@2x\n\n\n\n\nPortrait\n\n\t\n\n768 x 1024\n\n\t\n\n@2x\n\n\n\n\nStandard\n\n\t\n\n800 x 480\n\n\t\n\n@2x\n\n\n\n\nHigh-resolution\n\n\t\n\n1920 x 720\n\n\t\n\n@3x\n\nGo Beyond Simulator\n\nSimulator is useful during development, but it doesn’t provide certain CarPlay features that Apple recommends you include when testing your CarPlay-enabled app.\n\nFor example, you can’t use Simulator to test:\n\nWhen iOS locks the iPhone. A user often interacts with CarPlay without first unlocking their iPhone. Your CarPlay-enabled app must perform its primary functions when the iPhone is in a locked state.\n\nSiri. Users interact with certain CarPlay features using Siri exclusively. Ensure that your CarPlay-enabled app works as you expect throughout these interactions.\n\nAudio behavior. You CarPlay app must be a good audio citizen. Be mindful that audio may come from other sources when CarPlay is active. If your CarPlay-enabled app isn’t playing audio, deactivate its audio session. For example, an audio navigation prompt should cause the vehicle’s radio volume to lower and then rise again after the prompt finishes.\n\nSee Also\nCarPlay Integration\nRequesting CarPlay Entitlements\nConfigure your CarPlay-enabled app with the entitlements it requires.\nDisplaying Content in CarPlay\nUse scenes to present your app’s content on the vehicle’s built-in screen.\nSupporting Previous Versions of iOS\nMake your CarPlay-enabled apps compatible with older system versions, such as iOS 13 and earlier.\nclass CPTemplateApplicationScene\nA CarPlay scene that controls your app’s user interface.\nprotocol CPTemplateApplicationSceneDelegate\nThe methods for responding to the life cycle events of your app’s scene.\nclass CPSessionConfiguration\nAn object that provides vehicle properties and configuration for the CarPlay environment."
  },
  {
    "title": "CPContactMessageButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontactmessagebutton",
    "html": "Overview\n\nImportant\n\nThis subclass of CPButton doesn’t use a handler. Instead, tapping this button activates Siri and launches the compose message flow using the contact information in the phoneOrEmail property.\n\nTopics\nCreating a Contact Message Button\ninit(phoneOrEmail: String)\nCreates a contact message button with the provided contact information.\nGetting the Contact Information\nvar phoneOrEmail: String\nThe contact’s phone number or email address.\nRelationships\nInherits From\nCPButton\nSee Also\nManaging Interactions with the Contact\nvar actions: [CPButton]?\nThe actions that the template displays for this contact.\nclass CPContactCallButton\nA button for calling the contact.\nclass CPContactDirectionsButton\nA button for getting directions to the contact’s location."
  },
  {
    "title": "templateApplicationDashboardScene(_:didConnect:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationdashboardscenedelegate/3516953-templateapplicationdashboardscen",
    "html": "Parameters\ntemplateApplicationDashboardScene\n\nThe scene connecting to the app.\n\ndashboardController\n\nThe controller that manages the scene’s dashboard shortcut buttons.\n\nwindow\n\nThe window where your app draws its map content.\n\nDiscussion\n\nCarPlay calls this method when it connects a dashboard scene to your navigation app. Create an instance of your map-drawing view controller and assign it as the window’s root view controller. Use the dashboard controller to provide up to two shortcut buttons to display instead of your map content when there’s no active navigation session.\n\nSee Also\nResponding to the Scene Life Cycle\nfunc templateApplicationDashboardScene(CPTemplateApplicationDashboardScene, didDisconnect: CPDashboardController, from: UIWindow)\nTells the delegate when CarPlay removes the dashboard scene from your navigation app."
  },
  {
    "title": "CPTemplateApplicationInstrumentClusterSceneDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationinstrumentclusterscenedelegate",
    "html": "Topics\nInstance Methods\nfunc contentStyleDidChange(UIUserInterfaceStyle)\nfunc templateApplicationInstrumentClusterScene(CPTemplateApplicationInstrumentClusterScene, didConnect: CPInstrumentClusterController)\nfunc templateApplicationInstrumentClusterScene(CPTemplateApplicationInstrumentClusterScene, didDisconnectInstrumentClusterController: CPInstrumentClusterController)\nRelationships\nInherits From\nUISceneDelegate"
  },
  {
    "title": "init(lightContentImage:darkContentImage:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpimageset/3013990-init",
    "html": "Parameters\nlightContentImage\n\nThe image the system displays for an image set when userInterfaceStyle is UIUserInterfaceStyle.light.\n\ndarkContentImage\n\nThe image the system displays for an image set when userInterfaceStyle is UIUserInterfaceStyle.dark.\n\nReturn Value\n\nA newly initialized image set."
  },
  {
    "title": "CPContactCallButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontactcallbutton",
    "html": "Overview\n\nUse this button to call the template’s contact.\n\nIf your app doesn’t provide VoIP functionality, use the tel URL scheme to start a phone call with the contact. Invoke your template application scene’s open(_:options:completionHandler:) method and pass the URL. CarPlay provides this scene to your CPTemplateApplicationSceneDelegate when the scene connects.\n\nTopics\nCreating a Contact Call Button\ninit(handler: ((CPButton) -> Void)?)\nCreates a button that invokes a handler when the user taps it.\nRelationships\nInherits From\nCPButton\nSee Also\nManaging Interactions with the Contact\nvar actions: [CPButton]?\nThe actions that the template displays for this contact.\nclass CPContactDirectionsButton\nA button for getting directions to the contact’s location.\nclass CPContactMessageButton\nA button that activates Siri and initiates the compose message flow."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbutton/3664488-title",
    "html": "See Also\nConfiguring the Button's Attributes\nvar isEnabled: Bool\nA Boolean value that determines whether the button is in an enabled state."
  },
  {
    "title": "isEnabled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbutton/3664485-isenabled",
    "html": "Discussion\n\nWhen false, CarPlay doesn’t call the button’s handler, and it changes the button’s appearance to reflect its disabled state.\n\nThe default value is true.\n\nSee Also\nConfiguring the Button's Attributes\nvar title: String?\nThe button’s title."
  },
  {
    "title": "style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalertaction/2968257-style",
    "html": "Discussion\n\nThe combination of style and the template type, CPActionSheetTemplate or CPAlertTemplate, determines the appearance of the action button.\n\nSee Also\nGetting the Action Style\nenum CPAlertAction.Style\nDisplay styles for an alert’s action button."
  },
  {
    "title": "init(title:style:handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalertaction/2968256-init",
    "html": "Parameters\ntitle\n\nThe title displayed on the action button.\n\nstyle\n\nThe display style for the action button.\n\nhandler\n\nThe block invoked after the user taps the action button.\n\nReturn Value\n\nA newly initialized alert action."
  },
  {
    "title": "CPContactTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpcontacttemplate",
    "html": "Overview\n\nThe contact template can provide up to four contextual actions a user can invoke. For example, you might have an action that provides directions to the contact’s address.\n\nWhen creating a contact template, you provide an instance of CPContact that contains a contact’s name and image, and optional subtitle. The object also contains any actions relevant to the contact. CarPlay provides specialized buttons for common actions, such as CPContactCallButton or CPContactMessageButton.\n\nTo display a contact template, call your interface controller’s pushTemplate(_:animated:completion:) method to push it onto the navigation hierarchy, or presentTemplate(_:animated:completion:) to present it modally.\n\nNote\n\nCPContactTemplate is only available in apps that have the communication or navigation entitlements.\n\nTopics\nCreating a Contact Template\ninit(contact: CPContact)\nCreates a contact template that displays the provided contact.\nConfiguring the Contact\nvar contact: CPContact\nThe contact that the template displays.\nclass CPContact\nA data object that contains information about a contact.\nRelationships\nInherits From\nCPTemplate\nConforms To\nCPBarButtonProviding"
  },
  {
    "title": "CPAlertTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalerttemplate",
    "html": "Overview\n\nYou must present alerts modally by calling the presentTemplate(_:animated:completion:) method available on your app’s instance of CPInterfaceController. The user dismisses the alert by pressing a button, or you can dismiss it by calling the interface controller’s dismissTemplate(animated:completion:) method.\n\nTopics\nCreating an Alert Template\ninit(titleVariants: [String], actions: [CPAlertAction])\nCreates an alert template.\nclass var maximumActionCount: Int\nThe maximum number of actions allowed in an alert template.\nGetting the Alert Information\nvar titleVariants: [String]\nThe array of title variants.\nvar actions: [CPAlertAction]\nThe array of actions available on the alert.\nRelationships\nInherits From\nCPTemplate\nSee Also\nActions and Alerts\nclass CPActionSheetTemplate\nA template that displays a modal action sheet.\nclass CPAlertAction\nAn object that encapsulates an action the user can perform on an action sheet or alert."
  },
  {
    "title": "actions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationtemplate/3664502-actions",
    "html": "Discussion\n\nAssign a new array to this property to update the actions that the template displays. The template can display three actions maximum. If the array contains more actions, the template uses only the first three."
  },
  {
    "title": "CPPointOfInterest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinterest",
    "html": "Overview\n\nA point of interest describes a geographical location on a map. It also provides supplementary information about the location, such as a title and summary that the template displays in a scrollable picker and on a detail card. A point of interest also provides the buttons the detail card presents to the user as contextual actions.\n\nYou provide an array of CPPointOfInterest objects when initializing CPPointOfInterestTemplate, or whenever the visible region of the template’s map changes, by calling the template’s setPointsOfInterest(_:selectedIndex:) method.\n\nCPPointOfInterestTemplate displays a maximum of twelve points of interest.\n\nTopics\nCreating a Point of Interest\ninit(location: MKMapItem, title: String, subtitle: String?, summary: String?, detailTitle: String?, detailSubtitle: String?, detailSummary: String?, pinImage: UIImage?)\nCreates a point of interest for a specific location.\nManaging the Map Annotation\nvar location: MKMapItem\nThe map item that contains the point of interest’s geographical information.\nvar pinImage: UIImage?\nA custom image that the map annotation displays.\nManaging the Picker Item’s Data\nvar title: String\nThe title that the picker’s item displays.\nvar subtitle: String?\nThe subtitle that the picker’s item displays.\nvar summary: String?\nThe summary that the picker’s item displays.\nManaging the Detail Card’s Data\nvar detailTitle: String?\nThe detail card’s title.\nvar detailSubtitle: String?\nThe detail card’s subtitle.\nvar detailSummary: String?\nThe detail card’s summary.\nManaging the Detail Card's Buttons\nvar primaryButton: CPTextButton?\nThe detail card’s primary action button.\nvar secondaryButton: CPTextButton?\nThe detail card’s secondary action button.\nAttaching Additional Context\nvar userInfo: Any?\nAn opaque value for the point of interest.\nInitializers\ninit(location: MKMapItem, title: String, subtitle: String?, summary: String?, detailTitle: String?, detailSubtitle: String?, detailSummary: String?, pinImage: UIImage?, selectedPinImage: UIImage?)\nInstance Properties\nvar selectedPinImage: UIImage?\nType Properties\nclass var pinImageSize: CGSize\nclass var selectedPinImageSize: CGSize\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nCreating a Point of Interest Template\ninit(title: String, pointsOfInterest: [CPPointOfInterest], selectedIndex: Int)\nCreates a Point of Interest template with a title, the points of interest to display, and the initial selection’s index."
  },
  {
    "title": "CPPointOfInterestTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cppointofinteresttemplate",
    "html": "Overview\n\nThe Point of Interest template displays selectable instances of CPPointOfInterest as annotations on the template’s map, and as items in a scrollable picker that the template overlays on the map. When the user selects a point of interest, the template displays a detail card that contains secondary information and optional actions the user can perform. The template manages clustering points of interest, selecting a point of interest, and zooming and panning the map.\n\nTo create a Point of Interest template, you call the init(title:pointsOfInterest:selectedIndex:) method and provide an array of CPPointOfInterest objects to display in the template’s map. Then call your interface controller’s pushTemplate(_:animated:completion:) method to push it onto the navigation hierarchy, or add the template as a tab in your CPTabBarTemplate.\n\nYou must create an object that implements the CPPointOfInterestTemplateDelegate protocol and set it as the template’s delegate using the pointOfInterestDelegate property. The template informs its delegate about changes to the map’s visible region so you can update the points of interest the map displays.\n\nTopics\nCreating a Point of Interest Template\ninit(title: String, pointsOfInterest: [CPPointOfInterest], selectedIndex: Int)\nCreates a Point of Interest template with a title, the points of interest to display, and the initial selection’s index.\nclass CPPointOfInterest\nAn object that describes a point of interest on the template’s map and in its scrollable picker.\nHandling Template Events\nvar pointOfInterestDelegate: CPPointOfInterestTemplateDelegate?\nThe object that serves as the template’s delegate.\nprotocol CPPointOfInterestTemplateDelegate\nThe methods to handle a Point of Interest template’s events.\nManaging the Picker’s Title\nvar title: String\nThe scrollable picker’s title.\nManaging the Points of Interest\nvar pointsOfInterest: [CPPointOfInterest]\nThe points of interest the template displays on the map and in the scrollable picker.\nfunc setPointsOfInterest([CPPointOfInterest], selectedIndex: Int)\nUpdates the points of interest and the current selection.\nvar selectedIndex: Int\nThe current selection’s index.\nRelationships\nInherits From\nCPTemplate\nConforms To\nCPBarButtonProviding\nSee Also\nLocation and Information\nclass CPInformationTemplate\nA template that provides information for a point of interest, food order, parking location, or charging location.\nclass CPTextButton\nA button that displays a stylized title.\nIntegrating CarPlay with Your Quick-Ordering App\nConfigure your food-ordering app to work with CarPlay."
  },
  {
    "title": "CPTemplateApplicationDashboardSceneDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationdashboardscenedelegate",
    "html": "Overview\n\nThis protocol defines methods that CarPlay calls when the scene connects and disconnects, and your implementation provides the appropriate behavior when these events occur. For example, setting the window’s root view controller when CarPlay connects your navigation app’s dashboard scene.\n\nYou don’t create instances of your dashboard scene delegate directly. Instead, you specify the name of the class as part of the CarPlay scene configuration you add to your Info.plist file—see the example below—or that you return from your app delegate’s application(_:configurationForConnecting:options:) method.\n\n<key>CPTemplateApplicationDashboardSceneSessionRoleApplication</key>\n<array> \n    <dict>\n        <key>UISceneClassName</key>\n        <string>CPTemplateApplicationDashboardScene</string>\n        <key>UISceneConfigurationName</key>\n        <string>MyCarPlayDashboardSceneConfiguration</string>\n        <!-- Specify the name of your dashboard scene delegate class. --> \n        <key>UISceneDelegateClassName</key>\n        <string>MyCarPlayDashboardSceneDelegate</string> \n    </dict>\n</array>\n\n\nTopics\nResponding to the Scene Life Cycle\nfunc templateApplicationDashboardScene(CPTemplateApplicationDashboardScene, didConnect: CPDashboardController, to: UIWindow)\nTells the delegate about the addition of a CarPlay Dashboard scene to your navigation app.\nfunc templateApplicationDashboardScene(CPTemplateApplicationDashboardScene, didDisconnect: CPDashboardController, from: UIWindow)\nTells the delegate when CarPlay removes the dashboard scene from your navigation app.\nRelationships\nInherits From\nUISceneDelegate\nSee Also\nNavigation\nIntegrating CarPlay with Your Navigation App\nConfigure your navigation app to work with CarPlay by displaying your custom map and directions.\nclass CPTemplateApplicationDashboardScene\nA CarPlay scene that controls your app’s dashboard navigation window.\nclass CPMapTemplate\nA template that displays a navigation overlay that your app draws on the map.\nclass CPSearchTemplate\nA template that provides the ability to search for a destination and see a list of search results.\nclass CPVoiceControlTemplate\nA template that displays a voice control indicator during audio input."
  },
  {
    "title": "CPMapTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpmaptemplate",
    "html": "Overview\n\nAfter CarPlay calls your scene delegate’s templateApplicationScene(_:didConnect:to:) method, create a map template and set it as the root template by calling setRootTemplate(_:animated:completion:) on the interface controller the method provides.\n\nThe map template appears as an overlay on top of the base view. The template is the control layer, providing a navigation bar and map buttons that users interact with through the CarPlay screen.\n\nNote\n\nThe base view is where your app draws its map. CarPlay doesn’t support direct user interactions in this view. Instead, your app uses templates, which overlay the base view, to allow users to interact with your app through the CarPlay screen.\n\nWhen the user begins to interact with your app through the CarPlay screen, the system displays the navigation bar, hiding it after a brief period of inactivity. You can change this behavior by setting the automaticallyHidesNavigationBar and hidesButtonsWithNavigationBar properties.\n\nThe navigation bar includes up to two leading and two trailing buttons. You can change the buttons, including their titles and icon images, by setting the leadingNavigationBarButtons and trailingNavigationBarButtons properties on your template.\n\nYou can display additional map buttons by providing an array of CPMapButton objects to mapButtons. Use these buttons to provide users access to actions, such as entering panning mode or zooming in and out on the map.\n\nTopics\nConfiguring Map Templates\nvar automaticallyHidesNavigationBar: Bool\nA Boolean value that indicates whether the template should automatically hide the navigation bar.\nvar hidesButtonsWithNavigationBar: Bool\nA Boolean value that tells the system to hide the map buttons when hiding the navigation bar.\nvar guidanceBackgroundColor: UIColor\nThe background color the map template uses when displaying guidance.\nHandling Map Template Events\nvar mapDelegate: CPMapTemplateDelegate?\nThe object that serves as the delegate of the map template.\nprotocol CPMapTemplateDelegate\nThe protocol an object implements to handle events from a map template.\nManaging Map Buttons\nvar mapButtons: [CPMapButton]\nAn array of map buttons on the trailing bottom corner of the map template.\nclass CPMapButton\nA button that represents an action that a map template displays on the CarPlay screen.\nDisplaying Trip Previews\nfunc showTripPreviews([CPTrip], textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the preview for one or more trips, and allows route selection.\nfunc showTripPreviews([CPTrip], selectedTrip: CPTrip?, textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the previews for a collection of trips, with a single selected trip.\nfunc hideTripPreviews()\nHides the display of trip previews.\nfunc showRouteChoicesPreview(for: CPTrip, textConfiguration: CPTripPreviewTextConfiguration?)\nDisplays the route choices for a single trip.\nclass CPTripPreviewTextConfiguration\nA configuration object for changing the button titles on a trip preview.\nNavigating a Trip\nfunc startNavigationSession(for: CPTrip) -> CPNavigationSession\nBegins navigational guidance for a trip.\nclass CPNavigationSession\nAn object that represents an active route guidance session.\nProviding Trip Estimates\nfunc updateEstimates(CPTravelEstimates, for: CPTrip)\nUpdates travel estimates, such as arrival time and the remaining time and distance for a trip.\nfunc update(CPTravelEstimates, for: CPTrip, with: CPTimeRemainingColor)\nUpdates travel estimates, such as arrival time and the remaining time and distance for a trip, with the specified time-remaining color.\nenum CPTimeRemainingColor\nThe color the system uses when displaying the time remaining for a trip.\nvar tripEstimateStyle: CPTripEstimateStyle\nThe style that the map template uses when displaying trip estimates during active nagivation.\nenum CPTripEstimateStyle\nThe set of display styles for trip estimates.\nDisplaying a Navigation Alert\nfunc present(navigationAlert: CPNavigationAlert, animated: Bool)\nDisplays a navigation alert on the map template.\nfunc dismissNavigationAlert(animated: Bool, completion: (Bool) -> Void)\nTells the map template to dismiss the visable navigation alert.\nvar currentNavigationAlert: CPNavigationAlert?\nThe visible navigation alert.\nclass CPNavigationAlert\nAn alert that displays map- or navigation-related information to the user.\nPanning the Map\nfunc showPanningInterface(animated: Bool)\nShows the panning interface on the map.\nfunc dismissPanningInterface(animated: Bool)\nDismisses the panning interface.\nvar isPanningInterfaceVisible: Bool\nA Boolean value that indicates whether the map template is displaying the panning interface.\nRelationships\nInherits From\nCPTemplate\nConforms To\nCPBarButtonProviding\nSee Also\nNavigation\nIntegrating CarPlay with Your Navigation App\nConfigure your navigation app to work with CarPlay by displaying your custom map and directions.\nclass CPTemplateApplicationDashboardScene\nA CarPlay scene that controls your app’s dashboard navigation window.\nprotocol CPTemplateApplicationDashboardSceneDelegate\nThe methods for responding to the life-cycle events of your navigation app’s dashboard scene.\nclass CPSearchTemplate\nA template that provides the ability to search for a destination and see a list of search results.\nclass CPVoiceControlTemplate\nA template that displays a voice control indicator during audio input."
  },
  {
    "title": "pushTemplate(_:animated:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinterfacecontroller/3650358-pushtemplate",
    "html": "Parameters\ntemplateToPush\n\nThe template to add to the navigation hierarchy.\n\nanimated\n\nIf true, CarPlay animates the transition between templates.\n\ncompletion\n\nThe closure CarPlay calls after it adds the template.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc pushTemplate(_ templateToPush: CPTemplate, animated: Bool) async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nThe template you add becomes the topTemplate in the navigation hierarchy.\n\nCarPlay calls completion after it adds the template to the navigation hierarchy. The Boolean parameter is true when CarPlay adds the template successfully; otherwise, it’s false and CarPlay provides an error that describes the failure.\n\nCarPlay throws an exception if it can’t add the template and you don’t provide a closure.\n\nSee Also\nAdding and Removing Templates\nfunc popTemplate(animated: Bool, completion: ((Bool, Error?) -> Void)?)\nRemoves the top-most template from the navigation hierarchy.\nfunc popToRootTemplate(animated: Bool, completion: ((Bool, Error?) -> Void)?)\nRemoves all of the templates from the navigation hierarchy except the root template.\nfunc pop(to: CPTemplate, animated: Bool, completion: ((Bool, Error?) -> Void)?)\nRemoves each template from the navigation hierarchy until the specified template becomes visible."
  },
  {
    "title": "CPNowPlayingTemplateObserver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplateobserver",
    "html": "Overview\n\nYou use a Now Playing template observer to respond when the user interacts with the Album-Artist and Up Next buttons. The protocol defines methods that CarPlay calls when a user taps these buttons. Use your implementation to provide the appropriate behavior when these events occur. For example, when the user taps the Album-Artist button, you can present a new template that displays the content of the current album, playlist, or podcast.\n\nTo register an observer, create an object that implements the CPNowPlayingTemplateObserver protocol and then call the Now Playing template’s add(_:) method, passing your object as the only parameter.\n\nTopics\nResponding to User Interactions\nfunc nowPlayingTemplateAlbumArtistButtonTapped(CPNowPlayingTemplate)\nTells the observer that the user tapped the Album-Artist button.\nfunc nowPlayingTemplateUpNextButtonTapped(CPNowPlayingTemplate)\nTells the observer that the user tapped the Up Next button.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nObserving Now Playing Events\nfunc add(CPNowPlayingTemplateObserver)\nRegisters an observer that receives Now Playing template events.\nfunc remove(CPNowPlayingTemplateObserver)\nRemoves an observer from receiving Now Playing template events."
  },
  {
    "title": "CPNowPlayingAddToLibraryButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingaddtolibrarybutton",
    "html": "Overview\n\nCPNowPlayingAddToLibraryButton is a concrete subclass of CPNowPlayingButton. Use this button to allow a user to add the current playing item to a collection, such as their library. You implement this functionality in the button’s handler, or use the handler to invoke existing code that performs this function.\n\nRelationships\nInherits From\nCPNowPlayingButton\nSee Also\nManaging the Template's Buttons\nvar nowPlayingButtons: [CPNowPlayingButton]\nThe Now Playing template’s playback control buttons.\nfunc updateNowPlayingButtons([CPNowPlayingButton])\nUpdates the playback control buttons the template displays.\nclass CPNowPlayingButton\nThe abstract base class that Now Playing template buttons use.\nclass CPNowPlayingImageButton\nA button that displays an image.\nclass CPNowPlayingMoreButton\nA button for presenting more options to the user.\nclass CPNowPlayingPlaybackRateButton\nA button for cycling through the available playback rates.\nclass CPNowPlayingRepeatButton\nA button for cycling through the available repeat modes.\nclass CPNowPlayingShuffleButton\nA button for cycling through the available shuffle modes."
  },
  {
    "title": "CPNowPlayingMoreButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingmorebutton",
    "html": "Overview\n\nCPNowPlayingMoreButton is a concrete subclass of CPNowPlayingButton. Use this button to present a CPListTemplate, CPAlertTemplate, or another contextual interface for the currently playing item. For example, if the item is a podcast, use the button’s handler to present a template that displays the episode’s show notes.\n\nRelationships\nInherits From\nCPNowPlayingButton\nSee Also\nManaging the Template's Buttons\nvar nowPlayingButtons: [CPNowPlayingButton]\nThe Now Playing template’s playback control buttons.\nfunc updateNowPlayingButtons([CPNowPlayingButton])\nUpdates the playback control buttons the template displays.\nclass CPNowPlayingButton\nThe abstract base class that Now Playing template buttons use.\nclass CPNowPlayingImageButton\nA button that displays an image.\nclass CPNowPlayingAddToLibraryButton\nA button for adding the current playing item to a collection.\nclass CPNowPlayingPlaybackRateButton\nA button for cycling through the available playback rates.\nclass CPNowPlayingRepeatButton\nA button for cycling through the available repeat modes.\nclass CPNowPlayingShuffleButton\nA button for cycling through the available shuffle modes."
  },
  {
    "title": "CPNowPlayingPlaybackRateButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingplaybackratebutton",
    "html": "Overview\n\nCPNowPlayingPlaybackRateButton is a concrete subclass of CPNowPlayingButton. Use the button’s handler to invoke your existing functionality for cycling through playback rates, using the same MPChangePlaybackRateCommand that you provide to MPRemoteCommandCenter.\n\nCarPlay uses MPRemoteCommandCenter to observe changes to the playback rate and updates the button’s appearance accordingly.\n\nRelationships\nInherits From\nCPNowPlayingButton\nSee Also\nManaging the Template's Buttons\nvar nowPlayingButtons: [CPNowPlayingButton]\nThe Now Playing template’s playback control buttons.\nfunc updateNowPlayingButtons([CPNowPlayingButton])\nUpdates the playback control buttons the template displays.\nclass CPNowPlayingButton\nThe abstract base class that Now Playing template buttons use.\nclass CPNowPlayingImageButton\nA button that displays an image.\nclass CPNowPlayingAddToLibraryButton\nA button for adding the current playing item to a collection.\nclass CPNowPlayingMoreButton\nA button for presenting more options to the user.\nclass CPNowPlayingRepeatButton\nA button for cycling through the available repeat modes.\nclass CPNowPlayingShuffleButton\nA button for cycling through the available shuffle modes."
  },
  {
    "title": "CPNowPlayingShuffleButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingshufflebutton",
    "html": "Overview\n\nCPNowPlayingShuffleButton is a concrete subclass of CPNowPlayingButton. Use the button’s handler to invoke your existing functionality for cycling through shuffle modes, using the same MPChangeShuffleModeCommand that you provide to MPRemoteCommandCenter.\n\nCarPlay uses MPRemoteCommandCenter to observe changes to the shuffle mode and updates the button’s appearance accordingly.\n\nRelationships\nInherits From\nCPNowPlayingButton\nSee Also\nManaging the Template's Buttons\nvar nowPlayingButtons: [CPNowPlayingButton]\nThe Now Playing template’s playback control buttons.\nfunc updateNowPlayingButtons([CPNowPlayingButton])\nUpdates the playback control buttons the template displays.\nclass CPNowPlayingButton\nThe abstract base class that Now Playing template buttons use.\nclass CPNowPlayingImageButton\nA button that displays an image.\nclass CPNowPlayingAddToLibraryButton\nA button for adding the current playing item to a collection.\nclass CPNowPlayingMoreButton\nA button for presenting more options to the user.\nclass CPNowPlayingPlaybackRateButton\nA button for cycling through the available playback rates.\nclass CPNowPlayingRepeatButton\nA button for cycling through the available repeat modes."
  },
  {
    "title": "CPNowPlayingButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingbutton",
    "html": "Overview\n\nCPNowPlayingButton is an abstract base class for defining buttons that the Now Playing template displays. It provides the common functionality that’s present in all buttons available to the template.\n\nYou don’t use this class directly, or create your own subclasses. Instead, you must use one of the concrete subclasses that the framework provides, such as CPNowPlayingImageButton or CPNowPlayingShuffleButton.\n\nTopics\nCreating a Button\ninit(handler: ((CPNowPlayingButton) -> Void)?)\nCreates a Now Playing button that invokes a handler.\nManaging the Button State\nvar isEnabled: Bool\nA Boolean value that indicates whether the button is in an enabled state.\nvar isSelected: Bool\nA Boolean value that indicates whether the button is in a selected state.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nManaging the Template's Buttons\nvar nowPlayingButtons: [CPNowPlayingButton]\nThe Now Playing template’s playback control buttons.\nfunc updateNowPlayingButtons([CPNowPlayingButton])\nUpdates the playback control buttons the template displays.\nclass CPNowPlayingImageButton\nA button that displays an image.\nclass CPNowPlayingAddToLibraryButton\nA button for adding the current playing item to a collection.\nclass CPNowPlayingMoreButton\nA button for presenting more options to the user.\nclass CPNowPlayingPlaybackRateButton\nA button for cycling through the available playback rates.\nclass CPNowPlayingRepeatButton\nA button for cycling through the available repeat modes.\nclass CPNowPlayingShuffleButton\nA button for cycling through the available shuffle modes."
  },
  {
    "title": "shared | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplate/3650374-shared",
    "html": "Discussion\n\nYou do not create instances of CPNowPlayingTemplate directly. Instead, use this property to access the shared Now Playing template that CarPlay provides, and then configure its properties accordingly.\n\nYou must present this shared instance when your app needs to display Now Playing information. For example, in response to the user tapping a playable item. When CarPlay displays Now Playing information for your app, it presents this shared instance."
  },
  {
    "title": "CPTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplate",
    "html": "Overview\n\nCPTemplate is an abstract base class for defining CarPlay user interface templates. It provides the common functionality present in all templates.\n\nYou don’t use this class directly, or create your own subclasses. Instead, you must use one of the prebuilt templates, such as CPListTemplate or CPGridTemplate.\n\nTopics\nAccessing Template Information\nvar userInfo: Any?\nAny custom data or object that you want to associate with the template.\nAccessing Tab Information\n\nThese properties are only applicable when the template is a root-template of a tab bar.\n\nvar tabTitle: String?\nA short title that describes the content of the tab.\nvar tabImage: UIImage?\nAn image that represents the content of the tab.\nvar tabSystemItem: UITabBarItem.SystemItem\nA system object that provides a title and image for common tab content, such as contacts or favorites.\nvar showsTabBadge: Bool\nAn indicator you use to call attention to the tab.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nGeneral Purpose Templates\nclass CPListTemplate\nA template that displays and manages a list of items.\nclass CPGridTemplate\nA template that displays and manages a grid of items.\nclass CPTabBarTemplate\nA container template that displays and manages other templates, presenting them as tabs.\nprotocol CPBarButtonProviding\nThe methods that templates use to provide buttons for the navigation bar."
  },
  {
    "title": "CPListTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cplisttemplate",
    "html": "Overview\n\nUse the list template to display a list of items, grouped into one or more sections. When the user selects an item, CarPlay invokes Siri or a custom handler that you provide, depending on the type of list item. If your list displays hierarchical data, use the handler to add templates to the navigation hierarchy.\n\nTo create a list template, call the init(title:sections:) method and provide an array of CPListSection objects. At runtime, use maximumSectionCount to determine the maximum number of sections your list can display. Use maximumItemCount to determine the maximum number of items across all sections that your list can display.\n\nEach section contains an array of list items — objects that conform to either the CPListTemplateItem or the CPSelectableListItem protocol. CarPlay provides three concrete implementations of these protocols:\n\nCPListItem\n\nA generic, selectable list item.\n\nCPListImageRowItem\n\nA list item that displays a series of images.\n\nCPMessageListItem\n\nA list item that represents a conversation or contact.\n\nNote\n\nThe depth of a hierarchical list in CarPlay depends on your app’s entitlements. Food-ordering apps must not exceed two levels. The framework restricts all other categories of apps to five levels. Also, some vehicles limit the number of items that the list displays. See CPSessionConfiguration for more information.\n\nTo display the list, call your interface controller’s pushTemplate(_:animated:completion:) method, passing in the list template to add it to your navigation hierarchy. Alternatively, add the template as a tab in your CPTabBarTemplate.\n\nIntegrating Siri Into Your Template App\n\nFor audio and communication apps, CarPlay provides an assistant cell to let users interact with your app using Siri.\n\nTo enable the assistant cell, your app must support specific Siri intents:\n\nTo play audio, audio apps must support INPlayMediaIntent.\n\nTo make phone calls, communication apps must support INStartCallIntent.\n\nTo enable the assistant cell in your list template, use init(title:sections:assistantCellConfiguration:) and provide the required configuration. For more information, see CPAssistantCellConfiguration. CarPlay automatically updates your app’s interface if you change the template’s assistantCellConfiguration property.\n\nTopics\nCreating a List Template\ninit(title: String?, sections: [CPListSection])\nCreates a list template with an array of list sections and optional title.\ninit(title: String?, sections: [CPListSection], assistantCellConfiguration: CPAssistantCellConfiguration?)\nCreates a sectioned list template that optionally displays the assistant cell.\nManaging Sections\nclass var maximumSectionCount: Int\nThe maximum number of sections that the template can display.\nvar sectionCount: Int\nThe number of sections in the list.\nvar sections: [CPListSection]\nThe sections that the list displays.\nfunc updateSections([CPListSection])\nAdds, removes, reorders, or updates the list’s sections.\nclass CPListSection\nA container that groups your list items into sections.\nManaging the Assistant Cell\nvar assistantCellConfiguration: CPAssistantCellConfiguration?\nThe object that provides the configuration attributes for the assistant cell.\nclass CPAssistantCellConfiguration\nAn object that provides the configuration attributes for the assistant cell.\nManaging an Empty List\nvar emptyViewTitleVariants: [String]\nAn array of title variants for the template’s empty view.\nvar emptyViewSubtitleVariants: [String]\nAn array of subtitle variants for the template’s empty view.\nGetting Supplementary Information\nclass var maximumItemCount: Int\nThe maximum number of items, across all sections, that the template can display.\nvar itemCount: Int\nThe total number of items, across all sections, in the list.\nfunc indexPath(for: CPListTemplateItem) -> IndexPath?\nReturns the index path for the specified item.\nvar title: String?\nThe title that the navigation bar displays when the template is visible.\nResponding to List Events\nvar delegate: CPListTemplateDelegate?\nThe object that serves as the delegate to the list template.\nDeprecated\nprotocol CPListTemplateDelegate\nThe interface an object implements to serve as the delegate for a list template.\nDeprecated\nRelationships\nInherits From\nCPTemplate\nConforms To\nCPBarButtonProviding\nSee Also\nGeneral Purpose Templates\nclass CPGridTemplate\nA template that displays and manages a grid of items.\nclass CPTabBarTemplate\nA container template that displays and manages other templates, presenting them as tabs.\nclass CPTemplate\nAn abstract base class for interface templates.\nprotocol CPBarButtonProviding\nThe methods that templates use to provide buttons for the navigation bar."
  },
  {
    "title": "CPWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpwindow",
    "html": "Overview\n\nNavigation apps use a window to render their maps, and CarPlay provides one via the scene delegate’s templateApplicationScene(_:didConnect:to:) method. For all other categories of apps, you use templates exclusively to draw your user interface, and your scene delegate must implement templateApplicationScene(_:didConnect:) instead.\n\nWhen CarPlay launches your navigation app, instantiate your map-drawing view controller and assign it to the window’s rootViewController property. This becomes the base CarPlay view and is for drawing maps exclusively. You use templates for all other user interface elements.\n\nThe base view of a navigation app does not receive tap or drag events.\n\nTopics\nAccessing the Scene\nvar templateApplicationScene: CPTemplateApplicationScene?\nThe application scene that contains the window.\nLayout\nvar mapButtonSafeAreaLayoutGuide: UILayoutGuide\nThe layout guide that represents the portion of the map template that map buttons don’t obscure.\nRelationships\nInherits From\nUIWindow\nSee Also\nAccessing the Window\nvar carWindow: CPWindow\nThe window that belongs to the scene.\nRelated Documentation\nIntegrating CarPlay with Your Navigation App\nConfigure your navigation app to work with CarPlay by displaying your custom map and directions."
  },
  {
    "title": "carWindow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscene/3340478-carwindow",
    "html": "Discussion\n\nUse this property to access the window CarPlay creates for your scene. Only navigation apps have access to that window, and use it to draw their map content. All other categories of apps must use templates exclusively to draw their user interfaces.\n\nSee Also\nAccessing the Window\nclass CPWindow\nA window that displays its content on the CarPlay screen."
  },
  {
    "title": "CPNavigationAlert | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnavigationalert",
    "html": "Overview\n\nTo display a navigation alert, create an instance of CPNavigationAlert and pass it to the map template’s present(navigationAlert:animated:) method. When creating an alert, you must provide a title, action, and duration. The duration tells the system how long to show the alert before automatically dismissing it. You can also include a subtitle and secondary action when needed.\n\nThe system displays the primary and secondary actions as buttons on the alert. After the user taps the button, the system calls the action’s handler block, which is where your app performs the requested action. The system also dismisses the alert after the user taps the button. However, your app can dismiss the alert without any user interaction by calling dismissNavigationAlert(animated:completion:).\n\nTopics\nCreating a Navigation Alert\ninit(titleVariants: [String], subtitleVariants: [String]?, image: UIImage?, primaryAction: CPAlertAction, secondaryAction: CPAlertAction?, duration: TimeInterval)\nCreates a navigation alert.\ninit(titleVariants: [String], subtitleVariants: [String]?, imageSet: CPImageSet?, primaryAction: CPAlertAction, secondaryAction: CPAlertAction?, duration: TimeInterval)\nCreates a navigation alert.\nDeprecated\nGetting Titles\nvar titleVariants: [String]\nAn array of title strings.\nvar subtitleVariants: [String]\nAn array of subtitle strings.\nfunc updateTitleVariants([String], subtitleVariants: [String])\nUpdates title and subtitle variants.\nGetting the Alert Image\nvar image: UIImage?\nAn image displayed in the navigation alert.\nvar imageSet: CPImageSet?\nAn image set displayed in the navigation alert.\nGetting the Actions\nvar primaryAction: CPAlertAction\nThe primary action, and button, for the navigation alert.\nvar secondaryAction: CPAlertAction?\nAn optional secondary action, and button, for the navigation alert.\nGetting the Alert Duration\nvar duration: TimeInterval\nThe amount of time, in seconds, that the alert is visible.\nlet CPNavigationAlertMinimumDuration: TimeInterval\nA constant that defines the minimum amount of time that an alert is visible.\nEnumerations\nenum CPNavigationAlert.DismissalContext\nA set of reasons for dismissing a navigation alert.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nDisplaying a Navigation Alert\nfunc present(navigationAlert: CPNavigationAlert, animated: Bool)\nDisplays a navigation alert on the map template.\nfunc dismissNavigationAlert(animated: Bool, completion: (Bool) -> Void)\nTells the map template to dismiss the visable navigation alert.\nvar currentNavigationAlert: CPNavigationAlert?\nThe visible navigation alert."
  },
  {
    "title": "interfaceController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscene/3340480-interfacecontroller",
    "html": "Discussion\n\nUse this property to access the interface controller CarPlay creates when the scene connects, which you then use to manage your templates.\n\nSee Also\nAccessing the Interface Controller\nclass CPInterfaceController\nA controller that manages the templates for constructing a scene’s user interface."
  },
  {
    "title": "templateApplicationScene(_:didSelect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscenedelegate/3340484-templateapplicationscene",
    "html": "Parameters\ntemplateApplicationScene\n\nThe active scene.\n\nmaneuver\n\nThe selected maneuver.\n\nDiscussion\n\nIf your navigation app posts a maneuver while in the background, CarPlay displays a notification banner to the user. If the user taps the banner, CarPlay brings your navigation app to the foreground and calls this method.\n\nSee Also\nResponding to User Actions\nfunc templateApplicationScene(CPTemplateApplicationScene, didSelect: CPNavigationAlert)\nTells the delegate when the user selects a navigation alert while the app is in the background."
  },
  {
    "title": "templateApplicationScene(_:didDisconnect:from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscenedelegate/3340483-templateapplicationscene",
    "html": "Parameters\ntemplateApplicationScene\n\nThe scene disconnecting from the app.\n\ninterfaceController\n\nThe interface controller for managing the user interface of this scene.\n\nwindow\n\nThe window where the app draws the map content.\n\nDiscussion\n\nCarPlay calls this method after it disconnects the scene. You can use it to perform any cleanup.\n\nImportant\n\nCarPlay calls this method exclusively for navigation apps. All other categories of apps must implement templateApplicationScene(_:didDisconnectInterfaceController:) instead.\n\nSee Also\nResponding to the Scene Life Cycle\nfunc templateApplicationScene(CPTemplateApplicationScene, didConnect: CPInterfaceController)\nTells the delegate about the addition of a CarPlay scene to the app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didConnect: CPInterfaceController, to: CPWindow)\nTells the delegate about the addition of a CarPlay scene to your navigation app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didDisconnectInterfaceController: CPInterfaceController)\nTells the delegate when CarPlay removes a scene from the app."
  },
  {
    "title": "templateApplicationScene(_:didDisconnectInterfaceController:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscenedelegate/3578120-templateapplicationscene",
    "html": "Parameters\ntemplateApplicationScene\n\nThe scene disconnecting from the app.\n\ninterfaceController\n\nThe interface controller for managing the user interface of this scene.\n\nDiscussion\n\nCarPlay calls this method after it disconnects the scene. You can use it to perform any cleanup.\n\nImportant\n\nCarPlay doesn’t call this method for navigation apps. You must implement templateApplicationScene(_:didDisconnect:from:) instead.\n\nSee Also\nResponding to the Scene Life Cycle\nfunc templateApplicationScene(CPTemplateApplicationScene, didConnect: CPInterfaceController)\nTells the delegate about the addition of a CarPlay scene to the app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didConnect: CPInterfaceController, to: CPWindow)\nTells the delegate about the addition of a CarPlay scene to your navigation app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didDisconnect: CPInterfaceController, from: CPWindow)\nTells the delegate when CarPlay removes a scene from your navigation app."
  },
  {
    "title": "templateApplicationScene(_:didConnect:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscenedelegate/3340482-templateapplicationscene",
    "html": "Parameters\ntemplateApplicationScene\n\nThe scene connecting to the app.\n\ninterfaceController\n\nThe interface controller for managing the user interface of this scene.\n\nwindow\n\nThe window where the app draws the map content.\n\nDiscussion\n\nCarPlay calls this method when it launches your navigation app and connects the scene. Create an instance of your map-drawing view controller and assign it to the window’s root view controller. Use the interface controller to present your user interface templates. You must set both the window’s root view controller and the scene’s root template before returning from this method.\n\nImportant\n\nCarPlay calls this method exclusively for navigation apps. All other categories of apps must implement templateApplicationScene(_:didConnect:) instead.\n\nSee Also\nResponding to the Scene Life Cycle\nfunc templateApplicationScene(CPTemplateApplicationScene, didConnect: CPInterfaceController)\nTells the delegate about the addition of a CarPlay scene to the app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didDisconnectInterfaceController: CPInterfaceController)\nTells the delegate when CarPlay removes a scene from the app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didDisconnect: CPInterfaceController, from: CPWindow)\nTells the delegate when CarPlay removes a scene from your navigation app."
  },
  {
    "title": "templateApplicationScene(_:didConnect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscenedelegate/3578119-templateapplicationscene",
    "html": "Parameters\ntemplateApplicationScene\n\nThe scene connecting to the app.\n\ninterfaceController\n\nThe interface controller for managing the user interface of this scene.\n\nDiscussion\n\nCarPlay calls this method when it launches your app and connects the scene. Use the interface controller to present your user interface templates. You must set the scene’s root template before returning from this method.\n\nImportant\n\nNavigation apps must implement templateApplicationScene(_:didConnect:to:) instead so they can access the window where they draw their map content.\n\nSee Also\nResponding to the Scene Life Cycle\nfunc templateApplicationScene(CPTemplateApplicationScene, didConnect: CPInterfaceController, to: CPWindow)\nTells the delegate about the addition of a CarPlay scene to your navigation app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didDisconnectInterfaceController: CPInterfaceController)\nTells the delegate when CarPlay removes a scene from the app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didDisconnect: CPInterfaceController, from: CPWindow)\nTells the delegate when CarPlay removes a scene from your navigation app."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscene/3340479-delegate",
    "html": "Discussion\n\nUse this property to access the delegate object CarPlay creates from the class name you provide in the scene manifest of your app’s Info.plist file.\n\nSee Also\nResponding to the Scene Life Cycle\nprotocol CPTemplateApplicationSceneDelegate\nThe methods for responding to the life cycle events of your app’s scene."
  },
  {
    "title": "CarPlay Constants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/carplay_constants",
    "html": "Topics\nConstants\nlet CPGridTemplateMaximumItems: Int\nThe maximum number of buttons that a grid template displays.\nlet CPMaximumListSectionImageSize: CGSize\nThe maximum size of an image in a list section."
  },
  {
    "title": "CPInstrumentClusterControllerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinstrumentclustercontrollerdelegate",
    "html": "Topics\nInstance Methods\nfunc instrumentClusterController(CPInstrumentClusterController, didChangeCompassSetting: CPInstrumentClusterSetting)\nfunc instrumentClusterController(CPInstrumentClusterController, didChangeSpeedLimitSetting: CPInstrumentClusterSetting)\nfunc instrumentClusterControllerDidConnect(UIWindow)\n\nRequired\n\nfunc instrumentClusterControllerDidDisconnectWindow(UIWindow)\n\nRequired\n\nfunc instrumentClusterControllerDidZoom(in: CPInstrumentClusterController)\nfunc instrumentClusterControllerDidZoomOut(CPInstrumentClusterController)\nRelationships\nInherits From\nNSObjectProtocol"
  },
  {
    "title": "CPTemplateApplicationInstrumentClusterScene | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationinstrumentclusterscene",
    "html": "Topics\nInstance Properties\nvar contentStyle: UIUserInterfaceStyle\nvar delegate: CPTemplateApplicationInstrumentClusterSceneDelegate?\nvar instrumentClusterController: CPInstrumentClusterController\nRelationships\nInherits From\nUIScene"
  },
  {
    "title": "CPInstrumentClusterController | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinstrumentclustercontroller",
    "html": "Topics\nInstance Properties\nvar attributedInactiveDescriptionVariants: [NSAttributedString]\nvar compassSetting: CPInstrumentClusterSetting\nvar delegate: CPInstrumentClusterControllerDelegate?\nvar inactiveDescriptionVariants: [String]\nvar instrumentClusterWindow: UIWindow?\nvar speedLimitSetting: CPInstrumentClusterSetting\nRelationships\nInherits From\nNSObject"
  },
  {
    "title": "CarPlayErrorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/carplayerrordomain",
    "html": "See Also\nRelated Types\nclass CPButton\nA button that displays an image and invokes a handler when the user taps it.\nclass CPImageSet\nLight and dark representations of an image."
  },
  {
    "title": "Deprecated Symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/deprecated_symbols",
    "html": "Topics\nApplication Life Cycle\nprotocol CPApplicationDelegate\nThe interface for handling CarPlay life-cycle events.\nDeprecated"
  },
  {
    "title": "CPImageSet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpimageset",
    "html": "Overview\n\nCarPlay is set to dark appearance by default in most vehicles, but does provide the option to automatically switch between dark and light appearance. Use an image set to provide images for both appearances, and CarPlay displays the correct one for the current appearance.\n\nTopics\nCreating an Image Set\ninit(lightContentImage: UIImage, darkContentImage: UIImage)\nCreates an image set with light and dark versions of an image.\nGetting Content Images\nvar lightContentImage: UIImage\nThe image the system displays when the user interface style is light.\nvar darkContentImage: UIImage\nThe image the system displays when the user interface style is dark.\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nRelated Types\nclass CPButton\nA button that displays an image and invokes a handler when the user taps it.\nlet CarPlayErrorDomain: String\nThe domain that CarPlay uses for any errors it provides."
  },
  {
    "title": "CPButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbutton",
    "html": "Overview\n\nYou create instances of CPButton to provide a template’s actions. The button displays a custom image that communicates its function. When a user taps the button, CarPlay invokes the handler you provide. The template that contains the button manages its appearance.\n\nThe framework provides specialized subclasses for common actions, such as CPContactCallButton or CPContactMessageButton.\n\nTopics\nCreating a Button\ninit(image: UIImage, handler: ((CPButton) -> Void)?)\nCreates a button that displays an image and invokes a handler when the user taps it.\nlet CPButtonMaximumImageSize: CGSize\nThe maximum size of a button’s image that CarPlay supports.\nGetting the Button's Image\nvar image: UIImage?\nThe button’s image.\nConfiguring the Button's Attributes\nvar title: String?\nThe button’s title.\nvar isEnabled: Bool\nA Boolean value that determines whether the button is in an enabled state.\nRelationships\nInherits From\nNSObject\nSee Also\nRelated Types\nclass CPImageSet\nLight and dark representations of an image.\nlet CarPlayErrorDomain: String\nThe domain that CarPlay uses for any errors it provides."
  },
  {
    "title": "CPAlertAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpalertaction",
    "html": "Overview\n\nUse an alert action to display a button on an alert. The combination of the alert and the action styles determines the appearance of the action button. To perform an action after the user taps the button, provide a block to the action’s handler property.\n\nTopics\nCreating an Alert Action\ninit(title: String, style: CPAlertAction.Style, handler: CPAlertActionHandler)\nCreates an alert action with a title, style, and action handler.\nGetting the Title\nvar title: String\nThe action button's title.\nGetting the Action Style\nvar style: CPAlertAction.Style\nThe display style for the action button.\nenum CPAlertAction.Style\nDisplay styles for an alert’s action button.\nGetting the Action Handler\nvar handler: CPAlertActionHandler\nThe closure that CarPlay invokes after the user taps the action button.\ntypealias CPAlertActionHandler\nThe declaration for an alert action handler.\nInitializers\ninit(title: String, color: UIColor, handler: CPAlertActionHandler)\nInstance Properties\nvar color: UIColor?\nRelationships\nInherits From\nNSObject\nConforms To\nNSSecureCoding\nSee Also\nActions and Alerts\nclass CPActionSheetTemplate\nA template that displays a modal action sheet.\nclass CPAlertTemplate\nA template that displays a modal alert."
  },
  {
    "title": "CPActionSheetTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpactionsheettemplate",
    "html": "Overview\n\nYou must present action sheets modally by calling the presentTemplate(_:animated:completion:) method available on your app’s instance of CPInterfaceController. The user dismisses the action sheet by pressing a button, or you can dismiss it by calling the interface controller’s dismissTemplate(animated:completion:) method.\n\nTopics\nCreating an Action Sheet Template\ninit(title: String?, message: String?, actions: [CPAlertAction])\nCreates an action sheet template.\nGetting Action Sheet Template Information\nvar title: String?\nThe title of the action sheet.\nvar message: String?\nThe descriptive message providing details about the reason for displaying the action sheet.\nvar actions: [CPAlertAction]\nThe list of actions available on the action sheet.\nRelationships\nInherits From\nCPTemplate\nSee Also\nActions and Alerts\nclass CPAlertTemplate\nA template that displays a modal alert.\nclass CPAlertAction\nAn object that encapsulates an action the user can perform on an action sheet or alert."
  },
  {
    "title": "Integrating CarPlay with Your Quick-Ordering App | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/integrating_carplay_with_your_quick-ordering_app",
    "html": "Overview\n\nCarPlay Quick-Ordering is a sample quick-ordering app that demonstrates how to display custom ordering options in a vehicle that has CarPlay enabled. The sample app integrates with the CarPlay framework by implementing CPTemplate subclasses, such as CPPointOfInterestTemplate and CPListTemplate. This sample’s iOS app component provides a logging interface to help you understand the life cycle of a CarPlay app.\n\nConfigure the Sample Code Project\n\nCarPlay quick-ordering apps require a CarPlay quick-ordering entitlement. You can request the entitlement here. After Apple grants the entitlement:\n\nLog in to your account on the Apple Developer website and create a new provisioning profile that includes the CarPlay quick ordering-app entitlement.\n\nImport the newly created provisioning profile into Xcode.\n\nCreate an Entitlements.plist file in the project, if you don’t have one already.\n\nCreate a key for the CarPlay quick-ordering app entitlement as a Boolean. Make sure that the target project setting CODE_SIGN_ENTITLEMENTS is set to the path of the Entitlements.plist file.\n\nHandle Communication with CarPlay\n\nAfter a device connects to CarPlay and the sample app launches, it sets a root template to display content onscreen. The root template is set on the CPInterfaceController when the app connects to CarPlay. In this sample the root template is an instance of CPTabBarTemplate with a CPPointOfInterestTemplate as the template that initially displays.\n\nfunc interfaceControllerDidConnect(_ interfaceController: CPInterfaceController, scene: CPTemplateApplicationScene) {\n    MemoryLogger.shared.appendEvent(\"Connected to CarPlay window.\")\n    carplayInterfaceController = interfaceController\n    carplayScene = scene\n    carplayInterfaceController?.delegate = self\n    sessionConfiguration = CPSessionConfiguration(delegate: self)\n    locationManager.delegate = self\n    requestLocation()\n    setupMap()\n}\n\n\nfunc setupMap() {\n    let pointOfInterestTemplate = CPPointOfInterestTemplate(\n        title: \"Hoagie Options\",\n        pointsOfInterest: [],\n        selectedIndex: NSNotFound)\n    pointOfInterestTemplate.pointOfInterestDelegate = self\n    pointOfInterestTemplate.tabTitle = \"Map\"\n    pointOfInterestTemplate.tabImage = UIImage(systemName: \"car\")!\n    \n    let tabTemplate = CPTabBarTemplate(templates: [pointOfInterestTemplate])\n    \n    carplayInterfaceController?.setRootTemplate(tabTemplate, animated: true, completion: { (done, error) in\n        // Note: Ensure that 12 is the maximum POI locations that appear on the display.\n        self.search(for: \"Hoagies\")\n    })\n}\n\n\nKeep the Map in Focus\n\nThe sample uses pointOfInterestTemplate(_:didChangeMapRegion:) to keep the map in focus. The data CLLocationManager provides for a given location can become outdated as a user is moving. This means the results need to be updated as the map region changes.\n\nextension TemplateManager: CPPointOfInterestTemplateDelegate {\n    func pointOfInterestTemplate(_ aTemplate: CPPointOfInterestTemplate, didChangeMapRegion region: MKCoordinateRegion) {\n        MemoryLogger.shared.appendEvent(\"Region Changed: \\(region).\")\n        // In your app, you need to update your search results when this triggers.\n        boundingRegion = region\n        search(for: \"hoagies\")\n    }\n}\n\n\nOnce a user selects an item, options to place an order and send the user to Maps for directions or call the point of interest show, depending on metadata availability.\n\n// Make ordering the primary button.\nlet button = CPTextButton(title: \"Order\", textStyle: .normal, handler: { (button) in\n    MemoryLogger.shared.appendEvent(\"Order tapped \\(place).\")\n    self.showOrderTemplate(place: place)\n})\nplace.primaryButton = button\n// Try directions or a phone number as the secondary button.\nif let address = place.summary,\n   let encodedAddress = address.addingPercentEncoding(withAllowedCharacters: CharacterSet.alphanumerics),\n   let lon = place.location.placemark.location?.coordinate.longitude,\n   let lat = place.location.placemark.location?.coordinate.latitude,\n   let url = URL(string: \"maps://?q=\\(encodedAddress)&ll=\\(lon),\\(lat)\") {\n    place.secondaryButton = CPTextButton(title: \"Directions\", textStyle: .normal, handler: { (button) in\n        MemoryLogger.shared.appendEvent(\"Opening Maps with \\(address).\")\n        self.carplayScene?.open(url, options: nil, completionHandler: nil)\n    })\n} else if let phoneNumber = place.subtitle, let url = URL(string: \"tel://\" + phoneNumber.replacingOccurrences(of: \" \", with: \"\")) {\n    place.secondaryButton = CPTextButton(title: \"Call\", textStyle: .normal, handler: { (button) in\n        MemoryLogger.shared.appendEvent(\"Calling \\(phoneNumber).\")\n        self.carplayScene?.open(url, options: nil, completionHandler: nil)\n    })\n}\n\n\nBecause the sample relies on the user’s location to provide relevant results, handle permission issues gracefully. The sample removes any presented view controllers and presents a message to the user that location is not available.\n\nfunc locationManagerDidChangeAuthorization(_ manager: CLLocationManager) {\n    switch manager.authorizationStatus {\n    case .denied, .restricted, .notDetermined:\n        let alert = CPAlertTemplate(\n            titleVariants: [\"Please enable location services.\"],\n            actions: [\n                CPAlertAction(\n                    title: \"Ok\",\n                    style: .default,\n                    handler: { [weak self] (action) in\n                        MemoryLogger.shared.appendEvent(\"Location unavailable \\(manager.authorizationStatus).\")\n                        self?.carplayInterfaceController?.setRootTemplate(\n                            CPTabBarTemplate(templates: []), animated: false, completion: { (done, error) in\n                                MemoryLogger.shared.appendEvent(\"Error setting root template.\")\n                            }\n                        )\n                    }\n                )\n            ])\n        \n        // Check for a presented template and dismiss it for this important message.\n        if carplayInterfaceController?.presentedTemplate != nil {\n            dismissAlertAndPopToRootTemplate {\n                self.carplayInterfaceController?.presentTemplate(alert, animated: false, completion: { [weak self] (done, error) in\n                    self?.handleError(error, prependedMessage: \"Error presenting \\(alert.classForCoder)\")\n                })\n            }\n        } else {\n            carplayInterfaceController?.presentTemplate(alert, animated: false, completion: { [weak self] (done, error) in\n                self?.handleError(error, prependedMessage: \"Error presenting \\(alert.classForCoder)\")\n            })\n        }\n    default:\n        dismissAlertAndPopToRootTemplate {\n            self.setupMap()\n        }\n        return\n    }\n}\n\n\nSee Also\nLocation and Information\nclass CPPointOfInterestTemplate\nA template that displays a map with selectable points of interest.\nclass CPInformationTemplate\nA template that provides information for a point of interest, food order, parking location, or charging location.\nclass CPTextButton\nA button that displays a stylized title."
  },
  {
    "title": "CPInformationTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpinformationtemplate",
    "html": "Overview\n\nAn information template displays a list of items, and up to three actions the user can perform.\n\nYou use an information template to display informative, actionable content to the user. For example, you might display a summary of the user’s food order, and provide actions to place or cancel the order.\n\nWhen creating an information template, you populate the list with an array of CPInformationItem objects, and provide any contextual actions as an array of CPTextButton objects. The template then arranges the list’s items using your choice of layout — see CPInformationTemplateLayout for more information.\n\nTo display an information template, call your interface controller’s pushTemplate(_:animated:completion:) method to push it onto the navigation hierarchy, or presentTemplate(_:animated:completion:) to present it modally.\n\nNote\n\nYou can’t use CPInformationTemplate in apps with the audio entitlement.\n\nTopics\nCreating an Information Template\ninit(title: String, layout: CPInformationTemplateLayout, items: [CPInformationItem], actions: [CPTextButton])\nCreates an information template that displays the provided items using the chosen layout.\nAccessing the Layout\nvar layout: CPInformationTemplateLayout\nThe layout that the template uses to arrange its items.\nenum CPInformationTemplateLayout\nThe layout that an information template uses to arrange its items.\nManaging the Title\nvar title: String\nThe template’s title.\nManaging the Items\nvar items: [CPInformationItem]\nThe items that the template displays.\nclass CPInformationItem\nA data object that provides content for an information template.\nclass CPInformationRatingItem\nA data object that provides rated content for an information template.\nManaging the Actions\nvar actions: [CPTextButton]\nThe actions that the template displays.\nRelationships\nInherits From\nCPTemplate\nConforms To\nCPBarButtonProviding\nSee Also\nLocation and Information\nclass CPPointOfInterestTemplate\nA template that displays a map with selectable points of interest.\nclass CPTextButton\nA button that displays a stylized title.\nIntegrating CarPlay with Your Quick-Ordering App\nConfigure your food-ordering app to work with CarPlay."
  },
  {
    "title": "CPTextButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptextbutton",
    "html": "Overview\n\nYou use a text button to attach custom actions to an instance of CPPointOfInterest or CPInformationTemplate. When creating a button, you provide a closure that CarPlay invokes when the user taps the button. You communicate the button’s purpose using a title and a text style that the button applies to the title.\n\nTopics\nCreating a Text Button\ninit(title: String, textStyle: CPTextButtonStyle, handler: ((CPTextButton) -> Void)?)\nCreates a button that displays a title in a specific style.\nManaging the Title\nvar title: String\nThe text the button displays.\nManaging the Button Style\nvar textStyle: CPTextButtonStyle\nThe text style the button applies to its title.\nenum CPTextButtonStyle\nThe styles a button can apply to its title to communicate its action.\nRelationships\nInherits From\nNSObject\nSee Also\nLocation and Information\nclass CPPointOfInterestTemplate\nA template that displays a map with selectable points of interest.\nclass CPInformationTemplate\nA template that provides information for a point of interest, food order, parking location, or charging location.\nIntegrating CarPlay with Your Quick-Ordering App\nConfigure your food-ordering app to work with CarPlay."
  },
  {
    "title": "CPVoiceControlTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpvoicecontroltemplate",
    "html": "Overview\n\nCarPlay navigation apps must show a voice control indicator during audio input by presenting a voice control template. When creating the template, provide one or more CPVoiceControlState objects. To switch between states, call the activateVoiceControlState(withIdentifier:) method.\n\nTopics\nCreating a Voice Control Template\ninit(voiceControlStates: [CPVoiceControlState])\nCreates a voice control template with a list of voice control states.\nclass CPVoiceControlState\nA voice control state containing title variants and images for use by a voice control template.\nActivating a State\nfunc activateVoiceControlState(withIdentifier: String)\nChanges the template’s state to the one matching the specified identifier.\nvar activeStateIdentifier: String?\nThe identifier of the template’s current voice control state.\nGetting Available States\nvar voiceControlStates: [CPVoiceControlState]\nThe array of voice control states available to the template.\nRelationships\nInherits From\nCPTemplate\nSee Also\nNavigation\nIntegrating CarPlay with Your Navigation App\nConfigure your navigation app to work with CarPlay by displaying your custom map and directions.\nclass CPTemplateApplicationDashboardScene\nA CarPlay scene that controls your app’s dashboard navigation window.\nprotocol CPTemplateApplicationDashboardSceneDelegate\nThe methods for responding to the life-cycle events of your navigation app’s dashboard scene.\nclass CPMapTemplate\nA template that displays a navigation overlay that your app draws on the map.\nclass CPSearchTemplate\nA template that provides the ability to search for a destination and see a list of search results."
  },
  {
    "title": "CPSearchTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpsearchtemplate",
    "html": "Overview\n\nUse this template to provide the ability to search for a destination. When CarPlay displays the template, the user sees a search field, a Cancel button, and a localized keyboard. The template also shows the list of search results after your app completes the search request.\n\nNote\n\nSome vehicles may limit the display of the keyboard. Check the limitedUserInterfaces property to determine whether there are limits.\n\nTo use a search template, create an instance of CPSearchTemplate and set its delegate to an object that conforms to the CPSearchTemplateDelegate protocol. Push the template onto the navigation hierarchy by calling pushTemplate(_:animated:completion:) on the interface controller. This presents the search template to the user.\n\nAs the user enters text into the search field, the system calls the delegate method searchTemplate(_:updatedSearchText:completionHandler:), indicating that your app should retrieve the search result. After retrieving the results, call completionHandler to return an array of CPListItem objects—one list item for each search result item.\n\nWhen the user selects an item from the search result, the system calls the searchTemplate(_:selectedResult:completionHandler:) method on the delegate object. The delegate performs any necessary operations to process the selected item, then calls the completion handler to let the system know it can continue.\n\nTopics\nProviding a Search Template Delegate\nvar delegate: CPSearchTemplateDelegate?\nThe object that serves as the search template's delegate.\nprotocol CPSearchTemplateDelegate\nThe interface for an object that serves as the search template’s delegate.\nRelationships\nInherits From\nCPTemplate\nSee Also\nNavigation\nIntegrating CarPlay with Your Navigation App\nConfigure your navigation app to work with CarPlay by displaying your custom map and directions.\nclass CPTemplateApplicationDashboardScene\nA CarPlay scene that controls your app’s dashboard navigation window.\nprotocol CPTemplateApplicationDashboardSceneDelegate\nThe methods for responding to the life-cycle events of your navigation app’s dashboard scene.\nclass CPMapTemplate\nA template that displays a navigation overlay that your app draws on the map.\nclass CPVoiceControlTemplate\nA template that displays a voice control indicator during audio input."
  },
  {
    "title": "CPNowPlayingTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpnowplayingtemplate",
    "html": "Overview\n\nThe Now Playing template displays information from MPNowPlayingInfoCenter and MPNowPlayingSession. Instead of instantiating your own Now Playing template, CarPlay provides a shared instance that you configure. The template displays a series of playback control buttons, as well as information about the current album and artist, and what’s coming up next.\n\nWhen enabling your Now Playing template’s Album-Artist and Up Next buttons, you must create an object that implements the CPNowPlayingTemplateObserver protocol and register it as an observer by calling the template’s add(_:) method.\n\nTo display the Now Playing template, call your interface controller’s pushTemplate(_:animated:completion:) method to push it onto your navigation hierarchy. You can’t display the Now Playing template modally.\n\nWhen CarPlay presents Now Playing information for your app, it uses the shared instance of this template.\n\nNote\n\nCPNowPlayingTemplate is only available in apps with the audio entitlement.\n\nTopics\nManaging the Shared Template\nclass var shared: CPNowPlayingTemplate\nThe Now Playing template the system provides.\nManaging the Template's Buttons\nvar nowPlayingButtons: [CPNowPlayingButton]\nThe Now Playing template’s playback control buttons.\nfunc updateNowPlayingButtons([CPNowPlayingButton])\nUpdates the playback control buttons the template displays.\nclass CPNowPlayingButton\nThe abstract base class that Now Playing template buttons use.\nclass CPNowPlayingImageButton\nA button that displays an image.\nclass CPNowPlayingAddToLibraryButton\nA button for adding the current playing item to a collection.\nclass CPNowPlayingMoreButton\nA button for presenting more options to the user.\nclass CPNowPlayingPlaybackRateButton\nA button for cycling through the available playback rates.\nclass CPNowPlayingRepeatButton\nA button for cycling through the available repeat modes.\nclass CPNowPlayingShuffleButton\nA button for cycling through the available shuffle modes.\nManaging Albums, Artists, and Up Next\nvar isAlbumArtistButtonEnabled: Bool\nA Boolean value that indicates whether the album and artist string is a button.\nvar isUpNextButtonEnabled: Bool\nA Boolean value that manages the display of the Up Next button.\nvar upNextTitle: String\nThe title for the Up Next button.\nObserving Now Playing Events\nfunc add(CPNowPlayingTemplateObserver)\nRegisters an observer that receives Now Playing template events.\nfunc remove(CPNowPlayingTemplateObserver)\nRemoves an observer from receiving Now Playing template events.\nprotocol CPNowPlayingTemplateObserver\nThe methods for responding to the user interacting with the Now Playing template.\nRelationships\nInherits From\nCPTemplate\nSee Also\nAudio\nIntegrating CarPlay with Your Music App\nConfigure your music app to work with CarPlay by displaying a custom UI."
  },
  {
    "title": "Integrating CarPlay with Your Navigation App | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/integrating_carplay_with_your_navigation_app",
    "html": "Overview\n\nCoastal Roads is a sample navigation app that demonstrates how to display a custom map and navigation instructions in a CarPlay–enabled vehicle. Coastal Roads integrates with the CarPlay framework by implementing the map and additional CPTemplate subclasses, such as CPGridTemplate and CPListTemplate. This sample’s iOS app component provides a logging interface to help you understand the life cycle of a CarPlay app.\n\nHandle Communication with CarPlay\n\nAfter the app connects to CarPlay, it immediately sets a root template to display content onscreen. The sample sets the root template on the CPInterfaceController when the app connects to CarPlay. In all navigation apps, the root template must be an instance of CPMapTemplate and contain no additional graphics or UI elements.\n\nThe following code shows an example implementation of setting a root template:\n\n// MARK: CPTemplateApplicationSceneDelegate\n\n\nfunc interfaceController(_ interfaceController: CPInterfaceController, didConnectWith window: CPWindow, style: UIUserInterfaceStyle) {\n    MemoryLogger.shared.appendEvent(\"Connected to CarPlay window.\")\n\n\n    carplayInterfaceController = interfaceController\n    carplayInterfaceController!.delegate = self\n    \n    window.rootViewController = mainMapViewController\n    carWindow = window\n    \n    let mapTemplate = CPMapTemplate.coastalRoadsMapTemplate(compatibleWith: mainMapViewController.traitCollection, zoomInAction: {\n        MemoryLogger.shared.appendEvent(\"Map zoom in.\")\n        self.mainMapViewController.zoomIn()\n    }, zoomOutAction: {\n        MemoryLogger.shared.appendEvent(\"Map zoom out.\")\n        self.mainMapViewController.zoomOut()\n    })\n\n\n    mapTemplate.mapDelegate = self\n\n\n    baseMapTemplate = mapTemplate\n\n\n    installBarButtons()\n\n\n    interfaceController.setRootTemplate(mapTemplate, animated: true) { (success, _) in\n        if success {\n            MemoryLogger.shared.appendEvent(\"Root MapTemplate set successfully\")\n        }\n    }\n}\n\n\nRender a Map as the Base Template\n\nCoastal Roads demonstrates various templates in CarPlay. The sample includes an image to serve as the map. All overlays must be a type of template that CarPlay provides. The map must cover the entire screen, which the sample accomplishes using constraints. The CPMapTemplate also provides native support for zooming and panning. Additional functionality, such as customizing default button behavior, is available.\n\nThe following code shows an example implementation of customizing the default behavior of the panning, preview, and trip start actions on CPMapTemplate:\n\nextension TemplateManager: CPMapTemplateDelegate {\n\n\n    func mapTemplate(_ mapTemplate: CPMapTemplate, panWith direction: CPMapTemplate.PanDirection) {\n        mainMapViewController.panInDirection(direction)\n    }\n\n\n    func mapTemplate(_ mapTemplate: CPMapTemplate, selectedPreviewFor trip: CPTrip, using routeChoice: CPRouteChoice) {\n        mainMapViewController.setPolylineVisible(true)\n    }\n\n\n    func mapTemplate(_ mapTemplate: CPMapTemplate, startedTrip trip: CPTrip, using routeChoice: CPRouteChoice) {\n\n\n        MemoryLogger.shared.appendEvent(\"Beginning navigation guidance.\")\n\n\n        let navSession = mapTemplate.simulateCoastalRoadsNavigation(\n            trip: trip,\n            routeChoice: routeChoice,\n            traitCollection: mainMapViewController.traitCollection)\n        navigationSession = navSession\n\n\n        simulateNavigation(for: navSession, maneuvers: mapTemplate.coastalRoadsManeuvers(compatibleWith: mainMapViewController.traitCollection))\n    }\n\n\nSee CPMapTemplateDelegate for more information.\n\nSee Also\nNavigation\nclass CPTemplateApplicationDashboardScene\nA CarPlay scene that controls your app’s dashboard navigation window.\nprotocol CPTemplateApplicationDashboardSceneDelegate\nThe methods for responding to the life-cycle events of your navigation app’s dashboard scene.\nclass CPMapTemplate\nA template that displays a navigation overlay that your app draws on the map.\nclass CPSearchTemplate\nA template that provides the ability to search for a destination and see a list of search results.\nclass CPVoiceControlTemplate\nA template that displays a voice control indicator during audio input."
  },
  {
    "title": "CPBarButtonProviding | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cpbarbuttonproviding",
    "html": "Overview\n\nCPBarButtonProviding is a protocol that templates use to provide a Back button and leading and trailing buttons for the navigation bar.\n\nYou don’t adopt this protocol in your own types. If you want to add buttons to the navigation bar, you must use one of the prebuilt templates that already conforms to the protocol, such as CPMapTemplate or CPContactTemplate.\n\nNote\n\nThe root templates of a tab bar don’t show leading or trailing bar buttons, and the system throws an exception if you attempt to assign bar buttons to the Now Playing template.\n\nTopics\nProviding Navigation Bar Buttons\nvar backButton: CPBarButton?\nA button to display as the Back button on the navigation bar.\n\nRequired\n\nvar leadingNavigationBarButtons: [CPBarButton]\nAn array of bar buttons to display on the leading side of the navigation bar.\n\nRequired\n\nvar trailingNavigationBarButtons: [CPBarButton]\nAn array of bar buttons to display on the trailing side of the navigation bar.\n\nRequired\n\nclass CPBarButton\nA button for placement in a navigation bar.\nclass CPMessageComposeBarButton\nA button that activates Siri and initiates the compose message flow.\nRelationships\nInherits From\nNSObjectProtocol\nConforming Types\nCPContactTemplate\nCPGridTemplate\nCPInformationTemplate\nCPListTemplate\nCPMapTemplate\nCPPointOfInterestTemplate\nSee Also\nGeneral Purpose Templates\nclass CPListTemplate\nA template that displays and manages a list of items.\nclass CPGridTemplate\nA template that displays and manages a grid of items.\nclass CPTabBarTemplate\nA container template that displays and manages other templates, presenting them as tabs.\nclass CPTemplate\nAn abstract base class for interface templates."
  },
  {
    "title": "Integrating CarPlay with Your Music App | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/integrating_carplay_with_your_music_app",
    "html": "Overview\n\nCarPlay Music is a sample music app that demonstrates how to display a custom UI from a CarPlay–enabled vehicle. CarPlay Music integrates with the CarPlay framework by implementing the CPNowPlayingTemplate and CPListTemplate. This sample’s iOS app component provides a logging interface to help you understand the life cycle of a CarPlay app, as well as a music controller.\n\nConfigure the Sample Code Project\n\nTo configure the sample code project, perform the following:\n\nComplete the steps in Requesting CarPlay Entitlements to request the CarPlay audio entitlement and configure the Xcode project.\n\nCreate a key and developer token for the MusicKit service. For more information, see Generating Developer Tokens.\n\nUpdate the developerToken variable in the AppleMusicAPIController.swift file to use the developer token you create.\n\nHandle Communication with CarPlay\n\nThe app is responsible for adding and removing the root view controller of the CarPlay window in response to connections and disconnections.\n\nThe following code shows an example implementation of setting a root template:\n\nvar tabTemplates = [CPTemplate]()\n\n\nif let playlists = MediaPlayerUtilities.searchForPlaylistsInLocalLibrary(withPredicate: nil) {\n    \n    let listItems = playlists.compactMap { (playlist) -> CPListItem? in\n        let listItem = CPListItem(text: playlist.name, detailText: \"\")\n        listItem.handler = { playlistItem, completion in\n            AppleMusicAPIController.playWithItems(items: playlist.items.compactMap({ (item) -> String? in\n                return item.playbackStoreID\n            }))\n            completion()\n        }\n        return listItem\n    }\n    \n    var playlistTemplate: CPListTemplate!\n    \n    if #available(iOS 15.0, *) {\n        let configuration = CPAssistantCellConfiguration(\n                            position: .top,\n                            visibility: .always,\n                            assistantAction: .playMedia)\n        playlistTemplate = CPListTemplate(\n                            title: \"Playlists\",\n                            sections: [CPListSection(items: listItems)],\n                            assistantCellConfiguration: configuration)\n                        \n    } else {\n        playlistTemplate = CPListTemplate(\n                            title: \"Playlists\",\n                            sections: [CPListSection(items: listItems)])\n                        \n    }\n    \n    playlistTemplate.tabImage = UIImage(systemName: \"list.star\")\n    \n    tabTemplates.append(playlistTemplate)\n}\n\n\ntabTemplates.append(genresTemplate())\ntabTemplates.append(settingsTemplate())\n\n\nself.carplayInterfaceController!.delegate = self\nself.carplayInterfaceController!.setRootTemplate(CPTabBarTemplate(templates: tabTemplates), animated: true, completion: nil)\n\n\nPrepare for App Selection\n\nLike other Music apps, CarPlay Music is eligible to participate in App Selection to improve its interactions with Siri. This allows the system to automatically select the app for playing music on the device. See Improving Siri Media Interactions and App Selection.\n\nThe following code demonstrates how to declare an app as eligible for App Selection:\n\nlet context = INMediaUserContext()\ncontext.numberOfLibraryItems = MPMediaQuery.songs().items?.count\nAppleMusicAPIController.sharedController.prepareForRequests { (success) in\n    if success {\n        context.subscriptionStatus = .subscribed\n    } else {\n        context.subscriptionStatus = .notSubscribed\n    }\n    context.becomeCurrent()\n}\n\n\nListen for Changes with the Music Player\n\nA good way to ensure an app UI updates automatically in response to changes is to listen for changes in the Now Playing item, as well as in the playing state. CarPlay Music uses the applicationMusicPlayer, so it subscribes to the MPMusicPlayerControllerPlaybackStateDidChange and MPMusicPlayerControllerNowPlayingItemDidChange notifications.\n\nself.playbackObserver = NotificationCenter.default.addObserver(\n    forName: .MPMusicPlayerControllerPlaybackStateDidChange,\n    object: nil,\n    queue: .main) {\n    notification in\n    MemoryLogger.shared.appendEvent(\n        \"MPMusicPlayerControllerPlaybackStateDidChange: \\(MPMusicPlayerController.applicationQueuePlayer.playbackState)\")\n}\n\n\nself.nowPlayingItemObserver = NotificationCenter.default.addObserver(\n    forName: .MPMusicPlayerControllerNowPlayingItemDidChange,\n    object: nil,\n    queue: .main) {\n    notification in\n    MemoryLogger.shared.appendEvent(\"MPMusicPlayerControllerNowPlayingItemDidChange\")\n}\n\n\nSee Also\nAudio\nclass CPNowPlayingTemplate\nA shared system template that displays Now Playing information."
  },
  {
    "title": "CPTabBarTemplate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptabbartemplate",
    "html": "Overview\n\nCPTabBarTemplate is a container template that displays a collection of other templates, where each template occupies a single tab in the tab bar. At runtime, use maximumTabCount to determine the maximum number of tabs that your tab bar can display.\n\nWhen creating an instance of CPTabBarTemplate, provide an array of templates for the tab bar to display. CarPlay treats the array’s templates as root templates, each with its own navigation hierarchy. When a tab bar template is the rootTemplate of your app’s interface controller and you use the controller to add and remove templates, CarPlay applies those changes to the selected tab’s navigation hierarchy.\n\nNote\n\nYou can’t add a tab bar template to an existing navigation hierarchy, or present one modally. Instead, use setRootTemplate(_:animated:completion:) to set the tab bar as your app’s root template.\n\nUse a transactional approach when making changes to the tab bar. Retrieve the current set of templates using the templates property. Add, remove, reorder, or make appearance changes to one or more of the array’s templates. For example, use the tabTitle property to update a template’s tab title, or set showsTabBadge to true to add an indicator to a template’s tab. Then call the updateTemplates(_:) method and pass it the updated array. CarPlay commits those changes and updates the tab bar.\n\nWhen the user selects a tab, the template calls the tabBarTemplate(_:didSelect:) method on its delegate, which is an object you provide that conforms to the CPTabBarTemplateDelegate protocol.\n\nTopics\nCreating a Tab Bar Template\ninit(templates: [CPTemplate])\nCreates a tab bar template that displays the provided root templates as tabs.\nManaging Tab Bar Interactions\nvar delegate: CPTabBarTemplateDelegate?\nThe object that acts as the template’s delegate.\nprotocol CPTabBarTemplateDelegate\nThe methods an object implements to act as the delegate for a tab bar template.\nManaging the Templates\nvar templates: [CPTemplate]\nThe tab bar’s templates.\nfunc updateTemplates([CPTemplate])\nAdds, removes, reorders, or updates the tab bar’s templates.\nclass var maximumTabCount: Int\nThe maximum number of tabs that the template can display.\nGetting the Selected Template\nvar selectedTemplate: CPTemplate?\nThe currently selected template in the tab bar.\nInstance Methods\nfunc select(CPTemplate)\nfunc selectTemplate(at: Int)\nRelationships\nInherits From\nCPTemplate\nSee Also\nGeneral Purpose Templates\nclass CPListTemplate\nA template that displays and manages a list of items.\nclass CPGridTemplate\nA template that displays and manages a grid of items.\nclass CPTemplate\nAn abstract base class for interface templates.\nprotocol CPBarButtonProviding\nThe methods that templates use to provide buttons for the navigation bar."
  },
  {
    "title": "templateApplicationScene(_:didSelect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscenedelegate/3340485-templateapplicationscene",
    "html": "Parameters\ntemplateApplicationScene\n\nThe active scene.\n\nnavigationAlert\n\nThe selected navigation alert.\n\nDiscussion\n\nIf your navigation app posts a navigation alert while in the background, CarPlay displays a notification banner to the user. If the user taps the banner, CarPlay brings your navigation app to the foreground and calls this method.\n\nSee Also\nResponding to User Actions\nfunc templateApplicationScene(CPTemplateApplicationScene, didSelect: CPManeuver)\nTells the delegate when the user selects a maneuver while the app is in the background."
  },
  {
    "title": "Supporting Previous Versions of iOS | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/supporting_previous_versions_of_ios",
    "html": "Overview\n\nIn iOS 14 and later, CarPlay adds more app categories and further entitlements to support them. The framework also provides new templates that you can use to build your app’s user interface.\n\nSome of the new app categories supersede existing ones, such as audio and communication. Using the proper combination of frameworks and entitlements, you can ensure that your app is compatible with iOS 13 and earlier, and iOS 14 and later. To learn about requesting entitlements for your CarPlay-enabled app, see Requesting CarPlay Entitlements.\n\nAdd Backward Compatibility to Audio Apps\n\nIn iOS 14 and later, the CarPlay framework includes templates that you can use to build your audio app’s user interface. To use these templates, include the com.apple.developer.carplay-audio entitlement.\n\nBefore iOS 14, you built CarPlay-enabled audio apps using the Media Player framework, and included the com.apple.developer.playable-content entitlement. To support iOS 13 and earlier, use the Media Player framework and this entitlement. Your app will also work in iOS 14 and later.\n\nAudio apps can use the CarPlay framework, the Media Player framework, or both. Include the applicable entitlements that match the frameworks you’re using. To be compatible with iOS 13 and earlier, as well as iOS 14 and later, specify keys for both entitlements in the entitlements file.\n\n<key>com.apple.developer.playable-content</key>\n<true/>\n<key>com.apple.developer.carplay-audio</key>\n<true/>\n\n\nAdd Backward Compatibility to Communication Apps\n\nIn iOS 14 and later, the CarPlay framework includes templates that you can use to build your communication app’s user interface. To use these templates, include the com.apple.developer.carplay-communication entitlement.\n\nYour communication app can use the CarPlay, SiriKit, or CallKit framework, or a combination of the three. Include the entitlements that match the frameworks you’re using. If you use the CarPlay framework, your app can’t present a custom user interface in iOS 13 or earlier. However, users can still interact with your app as they have in previous versions.\n\nThe following example shows what you might add to a messaging app’s entitlements file, providing compatibility with iOS 13 and earlier, as well as iOS 14 and later:\n\n<key>com.apple.developer.carplay-communication</key>\n<true/>\n<key>com.apple.developer.carplay-messaging</key>\n<true/>\n\n\nIf your CarPlay-enabled communication app includes VoIP features, provide support for INStartCallIntent. If the VoIP app targets iOS 14 or earlier, provide support for INStartAudioCallIntent and INSearchCallHistoryIntent in addition to INStartCallIntent.\n\nSee Also\nCarPlay Integration\nRequesting CarPlay Entitlements\nConfigure your CarPlay-enabled app with the entitlements it requires.\nDisplaying Content in CarPlay\nUse scenes to present your app’s content on the vehicle’s built-in screen.\nUsing the CarPlay Simulator\nConfigure Simulator to run and debug your CarPlay-enabled app.\nclass CPTemplateApplicationScene\nA CarPlay scene that controls your app’s user interface.\nprotocol CPTemplateApplicationSceneDelegate\nThe methods for responding to the life cycle events of your app’s scene.\nclass CPSessionConfiguration\nAn object that provides vehicle properties and configuration for the CarPlay environment."
  },
  {
    "title": "Displaying Content in CarPlay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/displaying_content_in_carplay",
    "html": "Overview\n\nA scene manages your CarPlay-enabled app’s user interface, including the window that CarPlay displays on the vehicle’s screen. Navigation apps are the only app category that have access to this window, and use it to draw their map content. All other categories of apps use only the scene’s interface controller to manage their user interface.\n\nAs CarPlay manages your app’s scene, you provide a scene delegate — an object that conforms to the CPTemplateApplicationSceneDelegate protocol — that the system notifies about scene life cycle events. CarPlay creates your app’s scene and scene delegate when the user launches your app.\n\nAdd a CarPlay Scene\n\nTo add a CarPlay scene, provide its configuration in the scene manifest of your Xcode project’s Info.plist file. Specify your scene delegate’s class name as the value of the UISceneDelegateClassName key.\n\n<key>UIApplicationSceneManifest</key>\n<dict>\n    <key>UIApplicationSupportsMultipleScenes</key>\n    <true/>\n    <key>UISceneConfigurations</key>\n    <dict>\n        <key>CPTemplateApplicationSceneSessionRoleApplication</key>\n        <array> \n            <dict>\n                <key>UISceneClassName</key>\n                <string>CPTemplateApplicationScene</string>\n                <key>UISceneConfigurationName</key>\n                <string>MyCarPlaySceneConfiguration</string>\n                <key>UISceneDelegateClassName</key>\n                <string>MyCarPlaySceneDelegate</string> \n            </dict>\n        </array>\n    </dict>\n</dict>     \n\n\nIn your scene delegate, implement the templateApplicationScene(_:didConnect:) method and use the interface controller that it provides to set your root template.\n\nfunc templateApplicationScene(_ templateApplicationScene: CPTemplateApplicationScene, \n    didConnect interfaceController: CPInterfaceController) {\n    \n    // Store a reference to the interface controller so \n    // you can add and remove templates as the user \n    // interacts with your app.\n    self.interfaceController = interfaceController\n    \n    // Create a template and set it as the root.\n    let rootTemplate = self.makeRootTemplate()\n    interfaceController.setRootTemplate(rootTemplate, animated: true, \n        completion: nil)\n}\n\n\nIf your app specifies the navigation entitlement, implement the templateApplicationScene(_:didConnect:to:) method instead because it provides a reference to your app’s window that CarPlay manages. Create an instance of your map-drawing view controller and set it as the window’s root view controller. Make sure that you set your interface controller’s root template.\n\nfunc templateApplicationScene(_ templateApplicationScene: CPTemplateApplicationScene, \n    didConnect interfaceController: CPInterfaceController, to window: CPWindow) {\n    \n    // Retain references to the interface controller and window for\n    // the entire duration of the CarPlay session.\n    self.interfaceController = interfaceController\n    self.carWindow = window\n    \n    // Assign the window's root view controller to the view controller\n    // that draws your map content.\n    window.rootViewController = MapRenderingViewController()\n    \n    // Create a map template and set it as the root.\n    let mapTemplate = self.makeMapTemplate()\n    interfaceController.setRootTemplate(mapTemplate, animated: true, \n        completion: nil)\n}\n\n\nImportant\n\nUse the window’s root view controller to draw only map content. Don’t render alerts, overlays, or any other user interface elements. Use only the templates that the framework provides to create your app’s CarPlay user interface.\n\nAdd a CarPlay Dashboard Scene\n\nNavigation apps can add an additional scene entry to their scene manifest to enable their maps, upcoming maneuvers, and shortcut buttons to appear in the CarPlay Dashboard.\n\nAdd the following key to the UIApplicationSceneManifest dictionary in your Xcode project’s Info.plist file to specify that your app supports the CarPlay Dashboard:\n\n<key>UIApplicationSceneManifest</key>\n<dict>\n    <key>CPSupportsDashboardNavigationScene</key>\n    <true/>\n</dict>\n\n\nIn the same file, add the CarPlay Dashboard scene configuration to the UISceneConfigurations dictionary. Provide your dashboard scene delegate’s class name as the value of the UISceneDelegateClassName key.\n\n<key>CPTemplateApplicationDashboardSceneSessionRoleApplication</key>\n<array> \n    <dict>\n        <key>UISceneClassName</key>\n        <string>CPTemplateApplicationDashboardScene</string>\n        <key>UISceneConfigurationName</key>\n        <string>MyCarPlayDashboardSceneConfiguration</string>\n        <key>UISceneDelegateClassName</key>\n        <string>MyCarPlayDashboardSceneDelegate</string> \n    </dict>\n</array>\n\n\nTip\n\nThe names of the dashboard scene’s session role and scene class are different from the standard CarPlay scene. If the CarPlay Dashboard doesn’t display your navigation app, make sure that you’re using the correct names.\n\nIn your dashboard scene delegate, implement templateApplicationDashboardScene(_:didConnect:to:). Use the window that the method provides to render your map content. Set the dashboard controller’s shortcutButtons property to an array of buttons — up to a maximum of two — that the CarPlay Dashboard displays when your app isn’t actively navigating.\n\nfunc templateApplicationDashboardScene(_ templateApplicationDashboardScene: CPTemplateApplicationDashboardScene,\n    didConnect dashboardController: CPDashboardController, to window: UIWindow) {\n    \n    // Retain references to the dashboard controller and window for\n    // the entire duration of the CarPlay Dashboard session.\n    self.dashboardController = dashboardController\n    self.dashboardWindow = window\n    \n    // Assign the window's root view controller to the view controller\n    // that draws your map content.\n    window.rootViewController = MapRenderingViewController()\n    \n    // Create your shortcut buttons and add them to the dashboard.\n    dashboardController.shortcutButtons = makeShortcutButtons()\n}\n\n\nSee Also\nCarPlay Integration\nRequesting CarPlay Entitlements\nConfigure your CarPlay-enabled app with the entitlements it requires.\nSupporting Previous Versions of iOS\nMake your CarPlay-enabled apps compatible with older system versions, such as iOS 13 and earlier.\nUsing the CarPlay Simulator\nConfigure Simulator to run and debug your CarPlay-enabled app.\nclass CPTemplateApplicationScene\nA CarPlay scene that controls your app’s user interface.\nprotocol CPTemplateApplicationSceneDelegate\nThe methods for responding to the life cycle events of your app’s scene.\nclass CPSessionConfiguration\nAn object that provides vehicle properties and configuration for the CarPlay environment."
  },
  {
    "title": "Requesting CarPlay Entitlements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/requesting_carplay_entitlements",
    "html": "Overview\n\nTo integrate with CarPlay, you must request the appropriate entitlement for your app’s category at CarPlay Contact Us and agree to the CarPlay Entitlement Addendum. Apple reviews each application using predefined criteria. If your request meets the criteria, Apple adds the entitlement to your developer account using managed capabilities. For more information, see Provisioning with managed capabilities.\n\nAfter you receive the entitlement, you need to configure your Xcode project to use it, which involves several steps. You create or update an App ID, generate a provisioning profile, and add an Entitlements.plist file to your target. Your project’s code signing settings also require minor changes.\n\nNote\n\nCarPlay-enabled apps are subject to an additional set of App Store Review guidelines. For more information, see the CarPlay App Programming Guide.\n\nAdd CarPlay Capabilities to Your App ID\n\nUpdate the App ID of your CarPlay-enabled app to include the necessary CarPlay capabilities by following these steps:\n\nComplete the actions in Register an App ID to create an App ID if you don’t already have one.\n\nSign in to your Apple Developer account and select Certificates, Identifiers & Profiles.\n\nSelect Identifiers in the menu on the left.\n\nSelect your app’s App ID.\n\nChoose the Additional Capabilities tab.\n\nEnable the CarPlay capabilities that your app requires.\n\nClick the Save button.\n\nCreate a new provisioning profile for the updated App ID. For more information, see Create a development provisioning profile.\n\nImport the CarPlay Provisioning Profile\n\nConfigure your Xcode project to use the new provisioning profile when it code signs your CarPlay-enabled app by following these steps:\n\nIn Xcode, select your project in the Project navigator.\n\nIn the project editor, choose Signing & Capabilities.\n\nClick All in the scope bar, and then deselect “Automatically manage signing”.\n\nClick the Provisioning Profile pop-up menu and choose Download Profile.\n\nSelect your CarPlay provisioning profile from the left column and click Select Profile.\n\nAdd an Entitlements File\n\nUse an Entitlements.plist file to specify the entitlements that your CarPlay-enabled app requires. They must match the capabilities you add to your App ID. CarPlay uses this file to determine the framework functionality to allow.\n\nTo create the entitlements file:\n\nIn Xcode, select your project in the Project navigator.\n\nChoose File > New > File, select Property List from the Resource section, and click Next.\n\nEnter Entitlements as the filename and click Create.\n\nIn the project editor, choose Build Settings.\n\nClick All and Combined in the scope bar.\n\nUse the search box to find the Code Signing Entitlements setting.\n\nEnter the full path of the Entitlements.plist file as the setting’s value.\n\nOpen the file in Xcode and add the applicable entitlement from the table below as a Boolean.\n\nEntitlement\n\n\t\n\nCategory\n\n\n\n\ncom.apple.developer.carplay-audio\n\n\t\n\nAudio\n\n\n\n\ncom.apple.developer.carplay-communication\n\n\t\n\nCommunication\n\n\n\n\ncom.apple.developer.carplay-charging\n\n\t\n\nEV Charging\n\n\n\n\ncom.apple.developer.carplay-maps\n\n\t\n\nNavigation\n\n\n\n\ncom.apple.developer.carplay-parking\n\n\t\n\nParking\n\n\n\n\ncom.apple.developer.carplay-quick-ordering\n\n\t\n\nQuick Food Ordering\n\nThe following example shows the contents of a CarPlay-enabled app’s Entitlements.plist file with the audio entitlement:\n\n<key>com.apple.developer.carplay-audio</key>\n<true/>\n\n\nTest Your Configuration\n\nIn Xcode, use a simulator to build and run your project. After Simulator launches, choose I/O > External Displays > CarPlay. Your app appears on the CarPlay Home screen.\n\nSee Also\nCarPlay Integration\nDisplaying Content in CarPlay\nUse scenes to present your app’s content on the vehicle’s built-in screen.\nSupporting Previous Versions of iOS\nMake your CarPlay-enabled apps compatible with older system versions, such as iOS 13 and earlier.\nUsing the CarPlay Simulator\nConfigure Simulator to run and debug your CarPlay-enabled app.\nclass CPTemplateApplicationScene\nA CarPlay scene that controls your app’s user interface.\nprotocol CPTemplateApplicationSceneDelegate\nThe methods for responding to the life cycle events of your app’s scene.\nclass CPSessionConfiguration\nAn object that provides vehicle properties and configuration for the CarPlay environment."
  },
  {
    "title": "CPTemplateApplicationScene | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscene",
    "html": "Overview\n\nA scene manages your app’s user interface, including the window that CarPlay displays from that scene. Only navigation apps have access to that window, and use it for drawing map content. All other categories of apps use the scene’s interface controller exclusively for constructing their user interfaces.\n\nThe scene manages the display of the window on the vehicle’s CarPlay screen, and the life cycle of that scene as CarPlay and the user interact with it. The scene notifies its delegate—an object that conforms to CPTemplateApplicationSceneDelegate—about various state changes and user actions.\n\nYou don’t create scenes directly. Instead, you specify the name of the appropriate scene class as part of the CarPlay scene configuration you add to your Info.plist file—see the example below—or that you return from your app delegate’s application(_:configurationForConnecting:options:) method.\n\n<key>CPTemplateApplicationSceneSessionRoleApplication</key>\n<array> \n    <dict>\n        <!-- Specify the name of the scene class. -->\n        <key>UISceneClassName</key>\n        <string>CPTemplateApplicationScene</string>\n        <key>UISceneConfigurationName</key>\n        <string>MyCarPlaySceneConfiguration</string> \n        <key>UISceneDelegateClassName</key>\n        <string>MyCarPlaySceneDelegate</string> \n    </dict>\n</array>\n\n\n\n\nTopics\nResponding to the Scene Life Cycle\nvar delegate: CPTemplateApplicationSceneDelegate?\nThe object that receives the scene’s life-cycle events.\nprotocol CPTemplateApplicationSceneDelegate\nThe methods for responding to the life cycle events of your app’s scene.\nAccessing the Interface Controller\nvar interfaceController: CPInterfaceController\nThe controller that manages the scene’s user interface.\nclass CPInterfaceController\nA controller that manages the templates for constructing a scene’s user interface.\nAccessing the Window\nvar carWindow: CPWindow\nThe window that belongs to the scene.\nclass CPWindow\nA window that displays its content on the CarPlay screen.\nInstance Properties\nvar contentStyle: UIUserInterfaceStyle\nRelationships\nInherits From\nUIScene\nSee Also\nCarPlay Integration\nRequesting CarPlay Entitlements\nConfigure your CarPlay-enabled app with the entitlements it requires.\nDisplaying Content in CarPlay\nUse scenes to present your app’s content on the vehicle’s built-in screen.\nSupporting Previous Versions of iOS\nMake your CarPlay-enabled apps compatible with older system versions, such as iOS 13 and earlier.\nUsing the CarPlay Simulator\nConfigure Simulator to run and debug your CarPlay-enabled app.\nprotocol CPTemplateApplicationSceneDelegate\nThe methods for responding to the life cycle events of your app’s scene.\nclass CPSessionConfiguration\nAn object that provides vehicle properties and configuration for the CarPlay environment."
  },
  {
    "title": "CPTemplateApplicationSceneDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay/cptemplateapplicationscenedelegate",
    "html": "Overview\n\nThis protocol defines methods that CarPlay calls when the scene connects and disconnects, as well as methods for responding to certain user actions. Use your implementation to provide the appropriate behavior for when these events occur. For example, creating and setting your root template when CarPlay launches your app and connects its scene.\n\nYou don’t create instances of your scene delegate directly. Instead, you specify the name of the class as part of the CarPlay scene configuration you add to your Info.plist file—see the example below—or that you return from your app delegate’s application(_:configurationForConnecting:options:) method.\n\n<key>CPTemplateApplicationSceneSessionRoleApplication</key>\n<array> \n    <dict>\n        <key>UISceneClassName</key>\n        <string>CPTemplateApplicationScene</string>\n        <key>UISceneConfigurationName</key>\n        <string>MyCarPlaySceneConfiguration</string>\n        <!-- Specify the name of your scene delegate class. --> \n        <key>UISceneDelegateClassName</key>\n        <string>MyCarPlaySceneDelegate</string> \n    </dict>\n</array>\n\n\nTopics\nResponding to the Scene Life Cycle\nfunc templateApplicationScene(CPTemplateApplicationScene, didConnect: CPInterfaceController)\nTells the delegate about the addition of a CarPlay scene to the app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didConnect: CPInterfaceController, to: CPWindow)\nTells the delegate about the addition of a CarPlay scene to your navigation app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didDisconnectInterfaceController: CPInterfaceController)\nTells the delegate when CarPlay removes a scene from the app.\nfunc templateApplicationScene(CPTemplateApplicationScene, didDisconnect: CPInterfaceController, from: CPWindow)\nTells the delegate when CarPlay removes a scene from your navigation app.\nResponding to User Actions\nfunc templateApplicationScene(CPTemplateApplicationScene, didSelect: CPManeuver)\nTells the delegate when the user selects a maneuver while the app is in the background.\nfunc templateApplicationScene(CPTemplateApplicationScene, didSelect: CPNavigationAlert)\nTells the delegate when the user selects a navigation alert while the app is in the background.\nInstance Methods\nfunc contentStyleDidChange(UIUserInterfaceStyle)\nRelationships\nInherits From\nUISceneDelegate\nSee Also\nCarPlay Integration\nRequesting CarPlay Entitlements\nConfigure your CarPlay-enabled app with the entitlements it requires.\nDisplaying Content in CarPlay\nUse scenes to present your app’s content on the vehicle’s built-in screen.\nSupporting Previous Versions of iOS\nMake your CarPlay-enabled apps compatible with older system versions, such as iOS 13 and earlier.\nUsing the CarPlay Simulator\nConfigure Simulator to run and debug your CarPlay-enabled app.\nclass CPTemplateApplicationScene\nA CarPlay scene that controls your app’s user interface.\nclass CPSessionConfiguration\nAn object that provides vehicle properties and configuration for the CarPlay environment."
  },
  {
    "title": "CarPlay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/carplay",
    "html": "Overview\n\nUse the CarPlay framework to create an in-car experience for your app. The framework provides templates for building a version of your app’s interface suitable for presentation on a vehicle’s displays. Add the templates you want to your app and customize them to suit your content. You control the content of the templates, but the framework controls certain aspects of the template interface elements, such as the touch target size, font size, font color, and highlights.\n\nCarPlay features run when the current device supports CarPlay and when that device is connected to an appropriately equipped vehicle. CarPlay handles variations in vehicle systems, letting you focus on your content. When a person runs your app from their vehicle, the system generates and hosts your app’s interface for you. If the device doesn’t support CarPlay, the system doesn’t try to access your app’s CarPlay features.\n\nYou can use other technologies to drive portions of your app’s CarPlay interface. Messaging apps can include SiriKit support to allow someone to read or send messages. VoIP apps can use CallKit to manage incoming and outgoing calls, often in combination with SiriKit call support. Navigation apps can include MapKit support.\n\nRelated Sessions from WWDC20\n\nSession 10635: Accelerate Your App with CarPlay\n\nTopics\nCarPlay Integration\nRequesting CarPlay Entitlements\nConfigure your CarPlay-enabled app with the entitlements it requires.\nDisplaying Content in CarPlay\nUse scenes to present your app’s content on the vehicle’s built-in screen.\nSupporting Previous Versions of iOS\nMake your CarPlay-enabled apps compatible with older system versions, such as iOS 13 and earlier.\nUsing the CarPlay Simulator\nConfigure Simulator to run and debug your CarPlay-enabled app.\nclass CPTemplateApplicationScene\nA CarPlay scene that controls your app’s user interface.\nprotocol CPTemplateApplicationSceneDelegate\nThe methods for responding to the life cycle events of your app’s scene.\nclass CPSessionConfiguration\nAn object that provides vehicle properties and configuration for the CarPlay environment.\nGeneral Purpose Templates\nDisplay your app’s content using a variety of templates that provide a consistent CarPlay layout and appearance.\nclass CPListTemplate\nA template that displays and manages a list of items.\nclass CPGridTemplate\nA template that displays and manages a grid of items.\nclass CPTabBarTemplate\nA container template that displays and manages other templates, presenting them as tabs.\nclass CPTemplate\nAn abstract base class for interface templates.\nprotocol CPBarButtonProviding\nThe methods that templates use to provide buttons for the navigation bar.\nAudio\nTemplates that are available exclusively to apps with the audio entitlement.\nIntegrating CarPlay with Your Music App\nConfigure your music app to work with CarPlay by displaying a custom UI.\nclass CPNowPlayingTemplate\nA shared system template that displays Now Playing information.\nNavigation\nSymbols that are available exclusively to apps with the navigation entitlement.\nIntegrating CarPlay with Your Navigation App\nConfigure your navigation app to work with CarPlay by displaying your custom map and directions.\nclass CPTemplateApplicationDashboardScene\nA CarPlay scene that controls your app’s dashboard navigation window.\nprotocol CPTemplateApplicationDashboardSceneDelegate\nThe methods for responding to the life-cycle events of your navigation app’s dashboard scene.\nclass CPMapTemplate\nA template that displays a navigation overlay that your app draws on the map.\nclass CPSearchTemplate\nA template that provides the ability to search for a destination and see a list of search results.\nclass CPVoiceControlTemplate\nA template that displays a voice control indicator during audio input.\nLocation and Information\nTemplates that are available exclusively to apps with the parking, EV-charging, or food-ordering entitlements.\nclass CPPointOfInterestTemplate\nA template that displays a map with selectable points of interest.\nclass CPInformationTemplate\nA template that provides information for a point of interest, food order, parking location, or charging location.\nclass CPTextButton\nA button that displays a stylized title.\nIntegrating CarPlay with Your Quick-Ordering App\nConfigure your food-ordering app to work with CarPlay.\nCommunication\nTemplates that are available exclusively to apps with the communication entitlement.\nclass CPContactTemplate\nA template that displays information about a person or a business.\nActions and Alerts\nclass CPActionSheetTemplate\nA template that displays a modal action sheet.\nclass CPAlertTemplate\nA template that displays a modal alert.\nclass CPAlertAction\nAn object that encapsulates an action the user can perform on an action sheet or alert.\nRelated Types\n\nCommon data types available in the CarPlay framework.\n\nclass CPButton\nA button that displays an image and invokes a handler when the user taps it.\nclass CPImageSet\nLight and dark representations of an image.\nlet CarPlayErrorDomain: String\nThe domain that CarPlay uses for any errors it provides.\nDeprecated\nDeprecated Symbols\nSymbols that the CarPlay framework no longer supports.\nClasses\nclass CPInstrumentClusterController\nclass CPTemplateApplicationInstrumentClusterScene\nProtocols\nprotocol CPInstrumentClusterControllerDelegate\nprotocol CPTemplateApplicationInstrumentClusterSceneDelegate\nReference\nCarPlay Enumerations\nCarPlay Constants"
  }
]