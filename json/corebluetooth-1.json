[
  {
    "title": "CBManagerAuthorization.restricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerauthorization/restricted",
    "html": "Discussion\n\nIn this state, the user can’t change the Bluetooth authorization status, possibly due to active restrictions such as parental controls.\n\nSee Also\nAuthorization States\ncase allowedAlways\nA state that indicates the user has authorized Bluetooth at any time.\ncase denied\nA state that indicates the user explicitly denied Bluetooth access for this app.\ncase notDetermined\nA state that indicates the user has yet to authorize Bluetooth for this app."
  },
  {
    "title": "CBCentralManagerScanOptionSolicitedServiceUUIDsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerscanoptionsolicitedserviceuuidskey",
    "html": "Discussion\n\nThe array is an instance of NSArray, and uses CBUUID objects to represent the UUIDs to scan for.\n\nSpecifying this scan option causes the central manager to also scan for peripherals soliciting any of the services contained in the array."
  },
  {
    "title": "CBConnectionEvent.peerDisconnected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectionevent/peerdisconnected",
    "html": "See Also\nEvents\ncase peerConnected\nThe peer has connected to the local device."
  },
  {
    "title": "CBCentralManagerOptionRestoreIdentifierKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanageroptionrestoreidentifierkey",
    "html": "Discussion\n\nThe value for this key is an NSString. The system uses this UID to identify a specific central manager. As a result, the UID must remain the same for subsequent executions of the app to restore the central manager."
  },
  {
    "title": "CBCentralManagerOptionShowPowerAlertKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanageroptionshowpoweralertkey",
    "html": "Discussion\n\nThe value for this key is an NSNumber object. If the key isn’t specified, the default value is true."
  },
  {
    "title": "CBConnectPeripheralOptionEnableAutoReconnect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectperipheraloptionenableautoreconnect",
    "html": "Discussion\n\nAfter a peripheral device connects, this setting enables the system to initiate a connection to the peer device automatically when the link drops. The system uses centralManager(_:didDisconnectPeripheral:timestamp:isReconnecting:error:) to notify the caller about the disconnection.\n\nSee Also\nOptions\nlet CBConnectPeripheralOptionEnableTransportBridgingKey: String\nAn option to bridge classic Bluetooth technology profiles, if already connected over Bluetooth Low Energy.\nlet CBConnectPeripheralOptionNotifyOnConnectionKey: String\nA Boolean value that specifies whether the system should display an alert when connecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnDisconnectionKey: String\nA Boolean value that specifies whether the system should display an alert when disconnecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnNotificationKey: String\nA Boolean value that specifies whether the system should display an alert for any notification sent by a peripheral.\nlet CBConnectPeripheralOptionRequiresANCS: String\nAn option to require Apple Notification Center Service (ANCS) when connecting a device.\nlet CBConnectPeripheralOptionStartDelayKey: String\nAn option that indicates a delay before the system makes a connection."
  },
  {
    "title": "CBManagerAuthorization.allowedAlways | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerauthorization/allowedalways",
    "html": "See Also\nAuthorization States\ncase denied\nA state that indicates the user explicitly denied Bluetooth access for this app.\ncase notDetermined\nA state that indicates the user has yet to authorize Bluetooth for this app.\ncase restricted\nA state that indicates this app isn’t authorized to use Bluetooth."
  },
  {
    "title": "indicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties/1519085-indicate",
    "html": "See Also\nCharacteristic Properties\nstatic var broadcast: CBCharacteristicProperties\nA property that indicates the characteristic can broadcast its value using a characteristic configuration descriptor.\nstatic var read: CBCharacteristicProperties\nA property that indicates a peripheral can read the characteristic’s value.\nstatic var writeWithoutResponse: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, without a response to indicate that the write succeeded.\nstatic var write: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, with a response to indicate that the write succeeded.\nstatic var notify: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, without a response from the central to indicate receipt of the notification.\nstatic var authenticatedSignedWrites: CBCharacteristicProperties\nA property that indicates the perhipheral allows signed writes of the characteristic’s value, without a response to indicate the write succeeded.\nstatic var extendedProperties: CBCharacteristicProperties\nA property that indicates the characteristic defines additional properties in the extended properties descriptor.\nstatic var notifyEncryptionRequired: CBCharacteristicProperties\nA property that indicates that only trusted devices can enable notifications of the characteristic’s value.\nstatic var indicateEncryptionRequired: CBCharacteristicProperties\nA property that indicates only trusted devices can enable indications of the characteristic’s value."
  },
  {
    "title": "CBPeripheralManagerRestoredStateServicesKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerrestoredstateserviceskey",
    "html": "Discussion\n\nThe value associated with this key is an NSArray of CBMutableService objects. It contains all of the services that previously published to the local peripheral’s database when the system quit the app.\n\nRestoration includes all information about a service, including any included services, characteristics, characteristic descriptors, and subscribed centrals.\n\nSee Also\nState Restoration Dictionary Keys\nlet CBPeripheralManagerRestoredStateAdvertisementDataKey: String\nA dictionary of restored advertising data."
  },
  {
    "title": "notifyEncryptionRequired | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties/1518732-notifyencryptionrequired",
    "html": "See Also\nCharacteristic Properties\nstatic var broadcast: CBCharacteristicProperties\nA property that indicates the characteristic can broadcast its value using a characteristic configuration descriptor.\nstatic var read: CBCharacteristicProperties\nA property that indicates a peripheral can read the characteristic’s value.\nstatic var writeWithoutResponse: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, without a response to indicate that the write succeeded.\nstatic var write: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, with a response to indicate that the write succeeded.\nstatic var notify: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, without a response from the central to indicate receipt of the notification.\nstatic var indicate: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, with a response from the central to indicate receipt of the notification.\nstatic var authenticatedSignedWrites: CBCharacteristicProperties\nA property that indicates the perhipheral allows signed writes of the characteristic’s value, without a response to indicate the write succeeded.\nstatic var extendedProperties: CBCharacteristicProperties\nA property that indicates the characteristic defines additional properties in the extended properties descriptor.\nstatic var indicateEncryptionRequired: CBCharacteristicProperties\nA property that indicates only trusted devices can enable indications of the characteristic’s value."
  },
  {
    "title": "CBCentralManagerRestoredStateScanOptionsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerrestoredstatescanoptionskey",
    "html": "Discussion\n\nThe value associated with this key is an NSDictionary. The dictionary contains all of the peripheral scan options in use by the central manager when the system terminated the app.\n\nSee Also\nState Restoration Options\nlet CBCentralManagerRestoredStatePeripheralsKey: String\nAn array of peripherals for use when restoring the state of a central manager.\nlet CBCentralManagerRestoredStateScanServicesKey: String\nAn array of service IDs for use when restoring state."
  },
  {
    "title": "CBCentralManagerScanOptionAllowDuplicatesKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerscanoptionallowduplicateskey",
    "html": "Discussion\n\nThe value for this key is an NSNumber object. If true, the central disables filtering and generates a discovery event each time it receives an advertising packet from the peripheral. If false (the default), the central coalesces multiple discoveries of the same peripheral into a single discovery event.\n\nImportant\n\nDisabling this filtering can have an adverse effect on battery life; use it only if necessary."
  },
  {
    "title": "centralManager(_:didUpdateANCSAuthorizationFor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/3180030-centralmanager",
    "html": "Parameters\ncentral\n\nThe central manager providing this information.\n\nperipheral\n\nThe CBPeripheral that caused the event."
  },
  {
    "title": "CBCentralManagerRestoredStatePeripheralsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerrestoredstateperipheralskey",
    "html": "Discussion\n\nThe value associated with this key is an NSArray of CBPeripheral objects. The array contains all of the peripherals connected to the central manager (or had a pending connection) at the time the system terminated the app.\n\nWhen possible, the system restores all information about a peripheral, including any discovered services, characteristics, characteristic descriptors, and characteristic notification states.\n\nSee Also\nState Restoration Options\nlet CBCentralManagerRestoredStateScanServicesKey: String\nAn array of service IDs for use when restoring state.\nlet CBCentralManagerRestoredStateScanOptionsKey: String\nA dictionary of peripheral scan options for use when restoring state."
  },
  {
    "title": "CBCentralManagerRestoredStateScanServicesKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerrestoredstatescanserviceskey",
    "html": "Discussion\n\nThe value associated with this key is an NSArray of service UUIDs (represented by CBUUID objects) containing all the services the central manager was scanning for at the time the system terminated the app.\n\nSee Also\nState Restoration Options\nlet CBCentralManagerRestoredStatePeripheralsKey: String\nAn array of peripherals for use when restoring the state of a central manager.\nlet CBCentralManagerRestoredStateScanOptionsKey: String\nA dictionary of peripheral scan options for use when restoring state."
  },
  {
    "title": "outputStream | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbl2capchannel/2880161-outputstream",
    "html": "See Also\nAccessing Streams\nvar inputStream: InputStream!\nThe stream used for reading data from the remote peer."
  },
  {
    "title": "descriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutablecharacteristic/1518827-descriptors",
    "html": "Discussion\n\nThe value of this property is an array of CBDescriptor objects that provide more information about a characteristic’s value. For example, they may describe the value in human-readable form and describe how to format the value for presentation purposes. For more information about characteristic descriptors, see CBDescriptor.\n\nSee Also\nManaging a Mutable Characteristic\nvar value: Data?\nThe value of the characteristic.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nvar permissions: CBAttributePermissions\nThe permissions of the characteristic value.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value.\nvar subscribedCentrals: [CBCentral]?\nA list of centrals that are currently subscribed to the characteristic’s value."
  },
  {
    "title": "value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutablecharacteristic/1519121-value",
    "html": "Discussion\n\nThis property contains the value of the characteristic. For example, a temperature measurement characteristic of a health thermometer service may have a value that indicates a temperature in Celsius.\n\nSee Also\nManaging a Mutable Characteristic\nvar descriptors: [CBDescriptor]?\nAn array of the characteristic’s descriptors.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nvar permissions: CBAttributePermissions\nThe permissions of the characteristic value.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value.\nvar subscribedCentrals: [CBCentral]?\nA list of centrals that are currently subscribed to the characteristic’s value."
  },
  {
    "title": "CBConnectPeripheralOptionRequiresANCS | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectperipheraloptionrequiresancs",
    "html": "See Also\nOptions\nlet CBConnectPeripheralOptionEnableAutoReconnect: String\nA Boolean value that specifies whether the system automatically reconnects with a peripheral.\nlet CBConnectPeripheralOptionEnableTransportBridgingKey: String\nAn option to bridge classic Bluetooth technology profiles, if already connected over Bluetooth Low Energy.\nlet CBConnectPeripheralOptionNotifyOnConnectionKey: String\nA Boolean value that specifies whether the system should display an alert when connecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnDisconnectionKey: String\nA Boolean value that specifies whether the system should display an alert when disconnecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnNotificationKey: String\nA Boolean value that specifies whether the system should display an alert for any notification sent by a peripheral.\nlet CBConnectPeripheralOptionStartDelayKey: String\nAn option that indicates a delay before the system makes a connection."
  },
  {
    "title": "serviceUUIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectioneventmatchingoption/3174852-serviceuuids",
    "html": "Discussion\n\nA connected peer with any matching service UUIDs results in a call to centralManager(_:connectionEventDidOccur:for:).\n\nSee Also\nMatching Options\nstatic let peripheralUUIDs: CBConnectionEventMatchingOption\nAn array of UUID objects that represents peripherals to match."
  },
  {
    "title": "peripheralUUIDs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectioneventmatchingoption/3174851-peripheraluuids",
    "html": "Discussion\n\nA connected peer with any matching peripheral UUIDs results in a call to centralManager(_:connectionEventDidOccur:for:).\n\nSee Also\nMatching Options\nstatic let serviceUUIDs: CBConnectionEventMatchingOption\nAn array that represents service identifiers to match."
  },
  {
    "title": "CBConnectPeripheralOptionNotifyOnDisconnectionKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectperipheraloptionnotifyondisconnectionkey",
    "html": "Discussion\n\nThe value for this key is an NSNumber object. This key is useful for apps that haven’t specified the bluetooth-central background mode and can’t display their own alert. If more than one app requests a notification for a given peripheral, the one that was most recently in the foreground receives the alert. If the key isn’t specified, the default value is false.\n\nSee Also\nOptions\nlet CBConnectPeripheralOptionEnableAutoReconnect: String\nA Boolean value that specifies whether the system automatically reconnects with a peripheral.\nlet CBConnectPeripheralOptionEnableTransportBridgingKey: String\nAn option to bridge classic Bluetooth technology profiles, if already connected over Bluetooth Low Energy.\nlet CBConnectPeripheralOptionNotifyOnConnectionKey: String\nA Boolean value that specifies whether the system should display an alert when connecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnNotificationKey: String\nA Boolean value that specifies whether the system should display an alert for any notification sent by a peripheral.\nlet CBConnectPeripheralOptionRequiresANCS: String\nAn option to require Apple Notification Center Service (ANCS) when connecting a device.\nlet CBConnectPeripheralOptionStartDelayKey: String\nAn option that indicates a delay before the system makes a connection."
  },
  {
    "title": "CBConnectionEvent.peerConnected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectionevent/peerconnected",
    "html": "See Also\nEvents\ncase peerDisconnected\nThe peer has disconnected from the local device."
  },
  {
    "title": "CBConnectPeripheralOptionStartDelayKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectperipheraloptionstartdelaykey",
    "html": "Discussion\n\nThe corresponding value is an NSNumber that indicates the duration of the delay in seconds.\n\nSee Also\nOptions\nlet CBConnectPeripheralOptionEnableAutoReconnect: String\nA Boolean value that specifies whether the system automatically reconnects with a peripheral.\nlet CBConnectPeripheralOptionEnableTransportBridgingKey: String\nAn option to bridge classic Bluetooth technology profiles, if already connected over Bluetooth Low Energy.\nlet CBConnectPeripheralOptionNotifyOnConnectionKey: String\nA Boolean value that specifies whether the system should display an alert when connecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnDisconnectionKey: String\nA Boolean value that specifies whether the system should display an alert when disconnecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnNotificationKey: String\nA Boolean value that specifies whether the system should display an alert for any notification sent by a peripheral.\nlet CBConnectPeripheralOptionRequiresANCS: String\nAn option to require Apple Notification Center Service (ANCS) when connecting a device."
  },
  {
    "title": "CBManagerAuthorization.denied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerauthorization/denied",
    "html": "See Also\nAuthorization States\ncase allowedAlways\nA state that indicates the user has authorized Bluetooth at any time.\ncase notDetermined\nA state that indicates the user has yet to authorize Bluetooth for this app.\ncase restricted\nA state that indicates this app isn’t authorized to use Bluetooth."
  },
  {
    "title": "CBConnectPeripheralOptionEnableTransportBridgingKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectperipheraloptionenabletransportbridgingkey",
    "html": "Discussion\n\nThis option tells the system to connect non-GATT profiles on classic Bluetooth devices, if there is a low energy GATT connection to the same device.\n\nThe value associated with this key is an NSNumber as a Boolean value. A true value instructs the system to bring up classic transport profiles when a low energy transport peripheral connects. A false value tells the system not to use the profiles.\n\nSee Also\nOptions\nlet CBConnectPeripheralOptionEnableAutoReconnect: String\nA Boolean value that specifies whether the system automatically reconnects with a peripheral.\nlet CBConnectPeripheralOptionNotifyOnConnectionKey: String\nA Boolean value that specifies whether the system should display an alert when connecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnDisconnectionKey: String\nA Boolean value that specifies whether the system should display an alert when disconnecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnNotificationKey: String\nA Boolean value that specifies whether the system should display an alert for any notification sent by a peripheral.\nlet CBConnectPeripheralOptionRequiresANCS: String\nAn option to require Apple Notification Center Service (ANCS) when connecting a device.\nlet CBConnectPeripheralOptionStartDelayKey: String\nAn option that indicates a delay before the system makes a connection."
  },
  {
    "title": "CBConnectPeripheralOptionNotifyOnConnectionKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectperipheraloptionnotifyonconnectionkey",
    "html": "Discussion\n\nThe value for this key is an NSNumber object. This key is useful for apps that haven’t specified the bluetooth-central background mode and can’t display their own alert. If more than one app requests a notification for a given peripheral, the one that was most recently in the foreground receives the alert. If the key isn’t specified, the default value is false.\n\nSee Also\nOptions\nlet CBConnectPeripheralOptionEnableAutoReconnect: String\nA Boolean value that specifies whether the system automatically reconnects with a peripheral.\nlet CBConnectPeripheralOptionEnableTransportBridgingKey: String\nAn option to bridge classic Bluetooth technology profiles, if already connected over Bluetooth Low Energy.\nlet CBConnectPeripheralOptionNotifyOnDisconnectionKey: String\nA Boolean value that specifies whether the system should display an alert when disconnecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnNotificationKey: String\nA Boolean value that specifies whether the system should display an alert for any notification sent by a peripheral.\nlet CBConnectPeripheralOptionRequiresANCS: String\nAn option to require Apple Notification Center Service (ANCS) when connecting a device.\nlet CBConnectPeripheralOptionStartDelayKey: String\nAn option that indicates a delay before the system makes a connection."
  },
  {
    "title": "CBPeripheralManagerRestoredStateAdvertisementDataKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerrestoredstateadvertisementdatakey",
    "html": "Discussion\n\nThe value associated with this key is an NSDictionary that contains the data advertised by the peripheral manager at the time the system quit the app.\n\nSee Also\nState Restoration Dictionary Keys\nlet CBPeripheralManagerRestoredStateServicesKey: String\nAn array of restored peripheral services."
  },
  {
    "title": "CBManagerAuthorization.notDetermined | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerauthorization/notdetermined",
    "html": "See Also\nAuthorization States\ncase allowedAlways\nA state that indicates the user has authorized Bluetooth at any time.\ncase denied\nA state that indicates the user explicitly denied Bluetooth access for this app.\ncase restricted\nA state that indicates this app isn’t authorized to use Bluetooth."
  },
  {
    "title": "CBManagerState.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerstate/unknown",
    "html": "Discussion\n\nThis is a temporary state. After Core Bluetooth initializes or resets, it updates the state value.\n\nSee Also\nManager States\ncase poweredOff\nA state that indicates Bluetooth is currently powered off.\ncase poweredOn\nA state that indicates Bluetooth is currently powered on and available to use.\ncase resetting\nA state that indicates the connection with the system service was momentarily lost.\ncase unauthorized\nA state that indicates the application isn’t authorized to use the Bluetooth low energy role.\ncase unsupported\nA state that indicates this device doesn’t support the Bluetooth low energy central or client role."
  },
  {
    "title": "CBManagerState.unsupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerstate/unsupported",
    "html": "See Also\nManager States\ncase poweredOff\nA state that indicates Bluetooth is currently powered off.\ncase poweredOn\nA state that indicates Bluetooth is currently powered on and available to use.\ncase resetting\nA state that indicates the connection with the system service was momentarily lost.\ncase unauthorized\nA state that indicates the application isn’t authorized to use the Bluetooth low energy role.\ncase unknown\nThe manager’s state is unknown."
  },
  {
    "title": "indicateEncryptionRequired | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties/1518893-indicateencryptionrequired",
    "html": "See Also\nCharacteristic Properties\nstatic var broadcast: CBCharacteristicProperties\nA property that indicates the characteristic can broadcast its value using a characteristic configuration descriptor.\nstatic var read: CBCharacteristicProperties\nA property that indicates a peripheral can read the characteristic’s value.\nstatic var writeWithoutResponse: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, without a response to indicate that the write succeeded.\nstatic var write: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, with a response to indicate that the write succeeded.\nstatic var notify: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, without a response from the central to indicate receipt of the notification.\nstatic var indicate: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, with a response from the central to indicate receipt of the notification.\nstatic var authenticatedSignedWrites: CBCharacteristicProperties\nA property that indicates the perhipheral allows signed writes of the characteristic’s value, without a response to indicate the write succeeded.\nstatic var extendedProperties: CBCharacteristicProperties\nA property that indicates the characteristic defines additional properties in the extended properties descriptor.\nstatic var notifyEncryptionRequired: CBCharacteristicProperties\nA property that indicates that only trusted devices can enable notifications of the characteristic’s value."
  },
  {
    "title": "extendedProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties/1518699-extendedproperties",
    "html": "Discussion\n\nThis property is only available for a remote peripheral’s service’s characteristic. You can’t use this property with a local characteristic, that is, a CBMutableCharacteristic that you publish using the add(_:) method of the CBPeripheralManager class.\n\nSee Also\nCharacteristic Properties\nstatic var broadcast: CBCharacteristicProperties\nA property that indicates the characteristic can broadcast its value using a characteristic configuration descriptor.\nstatic var read: CBCharacteristicProperties\nA property that indicates a peripheral can read the characteristic’s value.\nstatic var writeWithoutResponse: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, without a response to indicate that the write succeeded.\nstatic var write: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, with a response to indicate that the write succeeded.\nstatic var notify: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, without a response from the central to indicate receipt of the notification.\nstatic var indicate: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, with a response from the central to indicate receipt of the notification.\nstatic var authenticatedSignedWrites: CBCharacteristicProperties\nA property that indicates the perhipheral allows signed writes of the characteristic’s value, without a response to indicate the write succeeded.\nstatic var notifyEncryptionRequired: CBCharacteristicProperties\nA property that indicates that only trusted devices can enable notifications of the characteristic’s value.\nstatic var indicateEncryptionRequired: CBCharacteristicProperties\nA property that indicates only trusted devices can enable indications of the characteristic’s value."
  },
  {
    "title": "CBManagerState.unauthorized | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerstate/unauthorized",
    "html": "See Also\nManager States\ncase poweredOff\nA state that indicates Bluetooth is currently powered off.\ncase poweredOn\nA state that indicates Bluetooth is currently powered on and available to use.\ncase resetting\nA state that indicates the connection with the system service was momentarily lost.\ncase unknown\nThe manager’s state is unknown.\ncase unsupported\nA state that indicates this device doesn’t support the Bluetooth low energy central or client role."
  },
  {
    "title": "CBManagerState.resetting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerstate/resetting",
    "html": "Discussion\n\nThis state indicates that Bluetooth is trying to reconnect. After it reconnects, Core Bluetooth updates the state value.\n\nSee Also\nManager States\ncase poweredOff\nA state that indicates Bluetooth is currently powered off.\ncase poweredOn\nA state that indicates Bluetooth is currently powered on and available to use.\ncase unauthorized\nA state that indicates the application isn’t authorized to use the Bluetooth low energy role.\ncase unknown\nThe manager’s state is unknown.\ncase unsupported\nA state that indicates this device doesn’t support the Bluetooth low energy central or client role."
  },
  {
    "title": "CBManagerState.poweredOn | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerstate/poweredon",
    "html": "See Also\nManager States\ncase poweredOff\nA state that indicates Bluetooth is currently powered off.\ncase resetting\nA state that indicates the connection with the system service was momentarily lost.\ncase unauthorized\nA state that indicates the application isn’t authorized to use the Bluetooth low energy role.\ncase unknown\nThe manager’s state is unknown.\ncase unsupported\nA state that indicates this device doesn’t support the Bluetooth low energy central or client role."
  },
  {
    "title": "CBManagerState.poweredOff | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerstate/poweredoff",
    "html": "See Also\nManager States\ncase poweredOn\nA state that indicates Bluetooth is currently powered on and available to use.\ncase resetting\nA state that indicates the connection with the system service was momentarily lost.\ncase unauthorized\nA state that indicates the application isn’t authorized to use the Bluetooth low energy role.\ncase unknown\nThe manager’s state is unknown.\ncase unsupported\nA state that indicates this device doesn’t support the Bluetooth low energy central or client role."
  },
  {
    "title": "authenticatedSignedWrites | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties/1518980-authenticatedsignedwrites",
    "html": "Discussion\n\nIf a characteristic has this property set, it returns an error to the central when it fails to write the characteristic’s value.\n\nSee Also\nCharacteristic Properties\nstatic var broadcast: CBCharacteristicProperties\nA property that indicates the characteristic can broadcast its value using a characteristic configuration descriptor.\nstatic var read: CBCharacteristicProperties\nA property that indicates a peripheral can read the characteristic’s value.\nstatic var writeWithoutResponse: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, without a response to indicate that the write succeeded.\nstatic var write: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, with a response to indicate that the write succeeded.\nstatic var notify: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, without a response from the central to indicate receipt of the notification.\nstatic var indicate: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, with a response from the central to indicate receipt of the notification.\nstatic var extendedProperties: CBCharacteristicProperties\nA property that indicates the characteristic defines additional properties in the extended properties descriptor.\nstatic var notifyEncryptionRequired: CBCharacteristicProperties\nA property that indicates that only trusted devices can enable notifications of the characteristic’s value.\nstatic var indicateEncryptionRequired: CBCharacteristicProperties\nA property that indicates only trusted devices can enable indications of the characteristic’s value."
  },
  {
    "title": "CBPeripheralManagerConnectionLatency.medium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerconnectionlatency/medium",
    "html": "See Also\nLatency Values\ncase low\nA latency setting indicating that prioritizes rapid communication over battery life.\ncase high\nA latency setting that prioritizes extending battery life over rapid communication."
  },
  {
    "title": "CBPeripheralManagerConnectionLatency.high | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerconnectionlatency/high",
    "html": "See Also\nLatency Values\ncase low\nA latency setting indicating that prioritizes rapid communication over battery life.\ncase medium\nA latency setting that balances communication frequency and battery life."
  },
  {
    "title": "CBAdvertisementDataTxPowerLevelKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbadvertisementdatatxpowerlevelkey",
    "html": "Discussion\n\nThe value associated with this key is an instance of NSNumber.\n\nThis key and value are available if the peripheral provides its transmitting power level in its advertising packet. You can calculate the path loss by comparing the RSSI value with the transmitting power level.\n\nSee Also\nAdvertisement Keys\nlet CBAdvertisementDataLocalNameKey: String\nThe local name of a peripheral.\nlet CBAdvertisementDataManufacturerDataKey: String\nThe manufacturer data of a peripheral.\nlet CBAdvertisementDataServiceDataKey: String\nA dictionary that contains service-specific advertisement data.\nlet CBAdvertisementDataServiceUUIDsKey: String\nAn array of service UUIDs.\nlet CBAdvertisementDataOverflowServiceUUIDsKey: String\nAn array of UUIDs found in the overflow area of the advertisement data.\nlet CBAdvertisementDataIsConnectable: String\nA Boolean value that indicates whether the advertising event type is connectable.\nlet CBAdvertisementDataSolicitedServiceUUIDsKey: String\nAn array of solicited service UUIDs."
  },
  {
    "title": "CBAdvertisementDataIsConnectable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbadvertisementdataisconnectable",
    "html": "Discussion\n\nThe value for this key is an NSNumber object. You can use this value to determine whether your app can currently connect to a peripheral.\n\nSee Also\nAdvertisement Keys\nlet CBAdvertisementDataLocalNameKey: String\nThe local name of a peripheral.\nlet CBAdvertisementDataManufacturerDataKey: String\nThe manufacturer data of a peripheral.\nlet CBAdvertisementDataServiceDataKey: String\nA dictionary that contains service-specific advertisement data.\nlet CBAdvertisementDataServiceUUIDsKey: String\nAn array of service UUIDs.\nlet CBAdvertisementDataOverflowServiceUUIDsKey: String\nAn array of UUIDs found in the overflow area of the advertisement data.\nlet CBAdvertisementDataTxPowerLevelKey: String\nThe transmit power of a peripheral.\nlet CBAdvertisementDataSolicitedServiceUUIDsKey: String\nAn array of solicited service UUIDs."
  },
  {
    "title": "CBAdvertisementDataOverflowServiceUUIDsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbadvertisementdataoverflowserviceuuidskey",
    "html": "Discussion\n\nThe value associated with this key is an array of one or more CBUUID objects, representing CBService UUIDs.\n\nBecause data stored in this area results from not fitting in the main advertisement, UUIDs listed here are “best effort” and may not always be accurate. For details about the overflow area of advertisement data, see the startAdvertising(_:) method in CBPeripheralManager.\n\nSee Also\nAdvertisement Keys\nlet CBAdvertisementDataLocalNameKey: String\nThe local name of a peripheral.\nlet CBAdvertisementDataManufacturerDataKey: String\nThe manufacturer data of a peripheral.\nlet CBAdvertisementDataServiceDataKey: String\nA dictionary that contains service-specific advertisement data.\nlet CBAdvertisementDataServiceUUIDsKey: String\nAn array of service UUIDs.\nlet CBAdvertisementDataTxPowerLevelKey: String\nThe transmit power of a peripheral.\nlet CBAdvertisementDataIsConnectable: String\nA Boolean value that indicates whether the advertising event type is connectable.\nlet CBAdvertisementDataSolicitedServiceUUIDsKey: String\nAn array of solicited service UUIDs."
  },
  {
    "title": "CBAdvertisementDataServiceDataKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbadvertisementdataservicedatakey",
    "html": "Discussion\n\nThe keys (CBUUID objects) represent CBService UUIDs, and the values (NSData objects) represent service-specific data.\n\nSee Also\nAdvertisement Keys\nlet CBAdvertisementDataLocalNameKey: String\nThe local name of a peripheral.\nlet CBAdvertisementDataManufacturerDataKey: String\nThe manufacturer data of a peripheral.\nlet CBAdvertisementDataServiceUUIDsKey: String\nAn array of service UUIDs.\nlet CBAdvertisementDataOverflowServiceUUIDsKey: String\nAn array of UUIDs found in the overflow area of the advertisement data.\nlet CBAdvertisementDataTxPowerLevelKey: String\nThe transmit power of a peripheral.\nlet CBAdvertisementDataIsConnectable: String\nA Boolean value that indicates whether the advertising event type is connectable.\nlet CBAdvertisementDataSolicitedServiceUUIDsKey: String\nAn array of solicited service UUIDs."
  },
  {
    "title": "CBAdvertisementDataSolicitedServiceUUIDsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbadvertisementdatasolicitedserviceuuidskey",
    "html": "Discussion\n\nThe value associated with this key is an array of one or more CBUUID objects, representing CBService UUIDs.\n\nSee Also\nAdvertisement Keys\nlet CBAdvertisementDataLocalNameKey: String\nThe local name of a peripheral.\nlet CBAdvertisementDataManufacturerDataKey: String\nThe manufacturer data of a peripheral.\nlet CBAdvertisementDataServiceDataKey: String\nA dictionary that contains service-specific advertisement data.\nlet CBAdvertisementDataServiceUUIDsKey: String\nAn array of service UUIDs.\nlet CBAdvertisementDataOverflowServiceUUIDsKey: String\nAn array of UUIDs found in the overflow area of the advertisement data.\nlet CBAdvertisementDataTxPowerLevelKey: String\nThe transmit power of a peripheral.\nlet CBAdvertisementDataIsConnectable: String\nA Boolean value that indicates whether the advertising event type is connectable."
  },
  {
    "title": "CBAdvertisementDataManufacturerDataKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbadvertisementdatamanufacturerdatakey",
    "html": "Discussion\n\nThe value associated with this key is an NSData object.\n\nSee Also\nAdvertisement Keys\nlet CBAdvertisementDataLocalNameKey: String\nThe local name of a peripheral.\nlet CBAdvertisementDataServiceDataKey: String\nA dictionary that contains service-specific advertisement data.\nlet CBAdvertisementDataServiceUUIDsKey: String\nAn array of service UUIDs.\nlet CBAdvertisementDataOverflowServiceUUIDsKey: String\nAn array of UUIDs found in the overflow area of the advertisement data.\nlet CBAdvertisementDataTxPowerLevelKey: String\nThe transmit power of a peripheral.\nlet CBAdvertisementDataIsConnectable: String\nA Boolean value that indicates whether the advertising event type is connectable.\nlet CBAdvertisementDataSolicitedServiceUUIDsKey: String\nAn array of solicited service UUIDs."
  },
  {
    "title": "CBAdvertisementDataServiceUUIDsKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbadvertisementdataserviceuuidskey",
    "html": "See Also\nAdvertisement Keys\nlet CBAdvertisementDataLocalNameKey: String\nThe local name of a peripheral.\nlet CBAdvertisementDataManufacturerDataKey: String\nThe manufacturer data of a peripheral.\nlet CBAdvertisementDataServiceDataKey: String\nA dictionary that contains service-specific advertisement data.\nlet CBAdvertisementDataOverflowServiceUUIDsKey: String\nAn array of UUIDs found in the overflow area of the advertisement data.\nlet CBAdvertisementDataTxPowerLevelKey: String\nThe transmit power of a peripheral.\nlet CBAdvertisementDataIsConnectable: String\nA Boolean value that indicates whether the advertising event type is connectable.\nlet CBAdvertisementDataSolicitedServiceUUIDsKey: String\nAn array of solicited service UUIDs."
  },
  {
    "title": "CBCentralManagerState.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerstate/unknown",
    "html": "Discussion\n\nThis is a temporary state. Once Core Bluetooth initializes or resets, it updates the state value."
  },
  {
    "title": "centralManager(_:willRestoreState:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/1518819-centralmanager",
    "html": "Parameters\ncentral\n\nThe central manager that provides this information.\n\ndict\n\nA dictionary that contains information about the central manager preserved by the system when it terminated the app. For the available keys to this dictionary, see Central Manager State Restoration Options.\n\nDiscussion\n\nThis method only applies to apps that opt in to the state preservation and restoration feature of Core Bluetooth. The system invokes this method when relaunching your app into the background to complete some Bluetooth-related task. Use this method to synchronize the state of your app with the state of the Bluetooth system.\n\nSee Also\nMonitoring the Central Manager’s State\nfunc centralManagerDidUpdateState(CBCentralManager)\nTells the delegate the central manager’s state updated.\n\nRequired"
  },
  {
    "title": "centralManager(_:didDisconnectPeripheral:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/1518791-centralmanager",
    "html": "Parameters\ncentral\n\nThe central manager that provides this information.\n\nperipheral\n\nThe now-disconnected peripheral.\n\nerror\n\nThe cause of the failure, or nil if no error occurred.\n\nDiscussion\n\nThe manager invokes this method when disconnecting a peripheral previously connected with the connect(_:options:) method. The error parameter contains the reason for the disconnection, unless the disconnect resulted from a call to cancelPeripheralConnection(_:). After this method executes, the peripheral device’s CBPeripheralDelegate object receives no further method calls.\n\nAll services, characteristics, and characteristic descriptors a peripheral become invalidated after it disconnects.\n\nSee Also\nMonitoring Connections with Peripherals\nfunc centralManager(CBCentralManager, didConnect: CBPeripheral)\nTells the delegate that the central manager connected to a peripheral.\nfunc centralManager(CBCentralManager, didFailToConnect: CBPeripheral, error: Error?)\nTells the delegate the central manager failed to create a connection with a peripheral.\nfunc centralManager(CBCentralManager, connectionEventDidOccur: CBConnectionEvent, for: CBPeripheral)\nTells the delegate that a connection event occurred which matches the registered options."
  },
  {
    "title": "centralManager(_:didFailToConnect:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/1518988-centralmanager",
    "html": "Parameters\ncentral\n\nThe central manager that provides this information.\n\nperipheral\n\nThe peripheral that failed to connect.\n\nerror\n\nThe cause of the failure, or nil if no error occurred.\n\nDiscussion\n\nThe manager invokes this method when a connection initiated with the connect(_:options:) method fails to complete. Because connection attempts don’t time out, a failed connection usually indicates a transient issue, in which case you may attempt connecting to the peripheral again.\n\nSee Also\nMonitoring Connections with Peripherals\nfunc centralManager(CBCentralManager, didConnect: CBPeripheral)\nTells the delegate that the central manager connected to a peripheral.\nfunc centralManager(CBCentralManager, didDisconnectPeripheral: CBPeripheral, error: Error?)\nTells the delegate that the central manager disconnected from a peripheral.\nfunc centralManager(CBCentralManager, connectionEventDidOccur: CBConnectionEvent, for: CBPeripheral)\nTells the delegate that a connection event occurred which matches the registered options."
  },
  {
    "title": "Advertisement Data Retrieval Keys | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/advertisement_data_retrieval_keys",
    "html": "Topics\nAdvertisement Keys\nlet CBAdvertisementDataLocalNameKey: String\nThe local name of a peripheral.\nlet CBAdvertisementDataManufacturerDataKey: String\nThe manufacturer data of a peripheral.\nlet CBAdvertisementDataServiceDataKey: String\nA dictionary that contains service-specific advertisement data.\nlet CBAdvertisementDataServiceUUIDsKey: String\nAn array of service UUIDs.\nlet CBAdvertisementDataOverflowServiceUUIDsKey: String\nAn array of UUIDs found in the overflow area of the advertisement data.\nlet CBAdvertisementDataTxPowerLevelKey: String\nThe transmit power of a peripheral.\nlet CBAdvertisementDataIsConnectable: String\nA Boolean value that indicates whether the advertising event type is connectable.\nlet CBAdvertisementDataSolicitedServiceUUIDsKey: String\nAn array of solicited service UUIDs.\nSee Also\nDiscovering and Retrieving Peripherals\nfunc centralManager(CBCentralManager, didDiscover: CBPeripheral, advertisementData: [String : Any], rssi: NSNumber)\nTells the delegate the central manager discovered a peripheral while scanning for devices."
  },
  {
    "title": "isScanning | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1620640-isscanning",
    "html": "See Also\nScanning or Stopping Scans of Peripherals\nfunc scanForPeripherals(withServices: [CBUUID]?, options: [String : Any]?)\nScans for peripherals that are advertising services.\nPeripheral Scanning Options\nKeys used to pass options when scanning for peripherals.\nfunc stopScan()\nAsks the central manager to stop scanning for peripherals."
  },
  {
    "title": "CBUUIDL2CAPPSMCharacteristicString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuidl2cappsmcharacteristicstring",
    "html": "Discussion\n\nThis PSM is a little-endian UInt16. Servers can publish this characteristic with the UUID ABDD3056-28FA-441D-A470-55A75A52553A.\n\nSee Also\nCharacteristic Descriptors\nlet CBUUIDCharacteristicExtendedPropertiesString: String\nThe UUID for the Extended Properties descriptor, as a string.\nlet CBUUIDCharacteristicUserDescriptionString: String\nThe UUID for the User Description descriptor, as a string.\nlet CBUUIDClientCharacteristicConfigurationString: String\nThe UUID for the Client Configuration descriptor, as a string.\nlet CBUUIDServerCharacteristicConfigurationString: String\nThe UUID for the Server Configuration descriptor, as a string.\nlet CBUUIDCharacteristicFormatString: String\nThe UUID for the Presentation Format descriptor, as a string.\nlet CBUUIDCharacteristicAggregateFormatString: String\nThe UUID for the Aggregate Format descriptor, as a string."
  },
  {
    "title": "CBPeripheralState.disconnected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralstate/disconnected",
    "html": "See Also\nPeripheral States\ncase connecting\nThe peripheral is in the process of connecting to the central manager.\ncase connected\nThe peripheral is connected to the central manager.\ncase disconnecting\nThe peripheral is disconnecting from the central manager."
  },
  {
    "title": "writeWithoutResponse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties/1518734-writewithoutresponse",
    "html": "Discussion\n\nUse the writeValue(_:for:type:) method of the CBPeripheral class to write to a characteristic’s value, using the CBCharacteristicWriteType.withoutResponse constant as the parameter for type. If a characteristic has this property set, it doesn’t return an error to the central when it fails to write the characteristic’s value.\n\nSee Also\nCharacteristic Properties\nstatic var broadcast: CBCharacteristicProperties\nA property that indicates the characteristic can broadcast its value using a characteristic configuration descriptor.\nstatic var read: CBCharacteristicProperties\nA property that indicates a peripheral can read the characteristic’s value.\nstatic var write: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, with a response to indicate that the write succeeded.\nstatic var notify: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, without a response from the central to indicate receipt of the notification.\nstatic var indicate: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, with a response from the central to indicate receipt of the notification.\nstatic var authenticatedSignedWrites: CBCharacteristicProperties\nA property that indicates the perhipheral allows signed writes of the characteristic’s value, without a response to indicate the write succeeded.\nstatic var extendedProperties: CBCharacteristicProperties\nA property that indicates the characteristic defines additional properties in the extended properties descriptor.\nstatic var notifyEncryptionRequired: CBCharacteristicProperties\nA property that indicates that only trusted devices can enable notifications of the characteristic’s value.\nstatic var indicateEncryptionRequired: CBCharacteristicProperties\nA property that indicates only trusted devices can enable indications of the characteristic’s value."
  },
  {
    "title": "CBPeripheralState.disconnecting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralstate/disconnecting",
    "html": "See Also\nPeripheral States\ncase disconnected\nThe peripheral isn’t connected to the central manager.\ncase connecting\nThe peripheral is in the process of connecting to the central manager.\ncase connected\nThe peripheral is connected to the central manager."
  },
  {
    "title": "inputStream | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbl2capchannel/2880157-inputstream",
    "html": "See Also\nAccessing Streams\nvar outputStream: OutputStream!\nThe stream used for writing data to the peer."
  },
  {
    "title": "write | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties/1519089-write",
    "html": "Discussion\n\nIf a characteristic has this property set, it returns an error to the central when it fails to write the characteristic’s value. This property allows writing values characteristic that are longer than those permitted by the writeWithoutResponse constant. Use the writeValue(_:for:type:) method of the CBPeripheral class to write to a characteristic’s value, using the CBCharacteristicWriteType.withResponse constant as the parameter for type.\n\nSee Also\nCharacteristic Properties\nstatic var broadcast: CBCharacteristicProperties\nA property that indicates the characteristic can broadcast its value using a characteristic configuration descriptor.\nstatic var read: CBCharacteristicProperties\nA property that indicates a peripheral can read the characteristic’s value.\nstatic var writeWithoutResponse: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, without a response to indicate that the write succeeded.\nstatic var notify: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, without a response from the central to indicate receipt of the notification.\nstatic var indicate: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, with a response from the central to indicate receipt of the notification.\nstatic var authenticatedSignedWrites: CBCharacteristicProperties\nA property that indicates the perhipheral allows signed writes of the characteristic’s value, without a response to indicate the write succeeded.\nstatic var extendedProperties: CBCharacteristicProperties\nA property that indicates the characteristic defines additional properties in the extended properties descriptor.\nstatic var notifyEncryptionRequired: CBCharacteristicProperties\nA property that indicates that only trusted devices can enable notifications of the characteristic’s value.\nstatic var indicateEncryptionRequired: CBCharacteristicProperties\nA property that indicates only trusted devices can enable indications of the characteristic’s value."
  },
  {
    "title": "CBConnectPeripheralOptionNotifyOnNotificationKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectperipheraloptionnotifyonnotificationkey",
    "html": "Discussion\n\nIf true, the system displays an alert for all notifications received from a given peripheral while the app is suspended.\n\nThe value for this key is an NSNumber object. This key is useful for apps that haven’t specified the bluetooth-central background mode and can’t display their own alert. If more than one app requests a notification for a given peripheral, the one that was most recently in the foreground receives the alert. If the key isn’t specified, the default value is false.\n\nSee Also\nOptions\nlet CBConnectPeripheralOptionEnableAutoReconnect: String\nA Boolean value that specifies whether the system automatically reconnects with a peripheral.\nlet CBConnectPeripheralOptionEnableTransportBridgingKey: String\nAn option to bridge classic Bluetooth technology profiles, if already connected over Bluetooth Low Energy.\nlet CBConnectPeripheralOptionNotifyOnConnectionKey: String\nA Boolean value that specifies whether the system should display an alert when connecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnDisconnectionKey: String\nA Boolean value that specifies whether the system should display an alert when disconnecting a peripheral in the background.\nlet CBConnectPeripheralOptionRequiresANCS: String\nAn option to require Apple Notification Center Service (ANCS) when connecting a device.\nlet CBConnectPeripheralOptionStartDelayKey: String\nAn option that indicates a delay before the system makes a connection."
  },
  {
    "title": "CBCharacteristicWriteType.withoutResponse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicwritetype/withoutresponse",
    "html": "Discussion\n\nYou receive no notification if writing to a characteristic value fails with this write type.\n\nSee Also\nWrite Types\ncase withResponse\nWrite a characteristic value, with a response from the peripheral to indicate whether the write was successful."
  },
  {
    "title": "CBCharacteristicWriteType.withResponse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicwritetype/withresponse",
    "html": "Discussion\n\nIf the write is unsuccessful, the peripheral responds with an error that details the cause of the failure.\n\nSee Also\nWrite Types\ncase withoutResponse\nWrite a characteristic value, without any response from the peripheral to indicate whether the write was successful."
  },
  {
    "title": "properties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutablecharacteristic/1519087-properties",
    "html": "Discussion\n\nThe properties of a characteristic determine the access to and use of the characteristic’s value and descriptors. For a list of the possible values representing the properties of a characteristic, see the CBCharacteristicProperties enumeration in CBCharacteristic. However, you can’t use the broadcast and extendedProperties characteristic properties when creating a mutable characteristic.\n\nSee Also\nManaging a Mutable Characteristic\nvar value: Data?\nThe value of the characteristic.\nvar descriptors: [CBDescriptor]?\nAn array of the characteristic’s descriptors.\nvar permissions: CBAttributePermissions\nThe permissions of the characteristic value.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value.\nvar subscribedCentrals: [CBCentral]?\nA list of centrals that are currently subscribed to the characteristic’s value."
  },
  {
    "title": "subscribedCentrals | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutablecharacteristic/1518926-subscribedcentrals",
    "html": "Discussion\n\nThe value of this property is an array of CBCentral objects that currently subscribe to the characteristic’s value. The array is empty if the characteristic isn’t configured to support notifications or indications. Even if the characteristic’s configuration supports notifications or indications, the array is empty if centrals aren’t subscribing to the characteristic’s value.\n\nSee Also\nManaging a Mutable Characteristic\nvar value: Data?\nThe value of the characteristic.\nvar descriptors: [CBDescriptor]?\nAn array of the characteristic’s descriptors.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nvar permissions: CBAttributePermissions\nThe permissions of the characteristic value.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value.\nRelated Documentation\nfunc updateValue(Data, for: CBMutableCharacteristic, onSubscribedCentrals: [CBCentral]?) -> Bool\nSend an updated characteristic value to one or more subscribed centrals, using a notification or indication."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbpeer/1620687-identifier",
    "html": "Discussion\n\nThe value of this property represents the unique identifier of the peer. The first time a local manager encounters a peer, the system assigns the peer a UUID, represented by a new UUID object. Peers use UUID instances to identify themselves, instead of by the CBUUID objects that identify a peripheral’s services, characteristics, and descriptors.\n\nSee Also\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "init(type:properties:value:permissions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutablecharacteristic/1519073-init",
    "html": "Parameters\nUUID\n\nA 128-bit UUID that identifies the characteristic.\n\nproperties\n\nThe properties of the characteristic.\n\nvalue\n\nThe characteristic value to cache. If nil, the value is dynamic and the peripheral manager fetches it on demand.\n\npermissions\n\nThe permissions of the characteristic value.\n\nReturn Value\n\nA newly initialized mutable characteristic.\n\nDiscussion\n\nIf you specify a value for the characteristic, the characteristic caches the value and sets its properties and permissions to read and readable, respectively. Therefore, if you need the value of a characteristic to be writeable, or if you expect the value to change during the lifetime of the published service to which the characteristic belongs, you must specify the value as nil. This ensures that the characteristic treats the value dynamically. With a dynamic value, the peripheral manager requests the value whenever the peripheral manager receives a read or write request from a central. The peripheral does this by calling the peripheralManager(_:didReceiveRead:) and peripheralManager(_:didReceiveWrite:) methods of its delegate object, respectively.\n\nSee Also\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "CBPeripheralManagerOptionShowPowerAlertKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanageroptionshowpoweralertkey",
    "html": "Discussion\n\nThe value for this key is an NSNumber. If the key isn’t specified, the default value is false.\n\nSee Also\nInitialization Options\nlet CBPeripheralManagerOptionRestoreIdentifierKey: String\nA unique identifier (UID) with which to instantiate the peripheral manager."
  },
  {
    "title": "CBPeripheralManagerOptionRestoreIdentifierKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanageroptionrestoreidentifierkey",
    "html": "Discussion\n\nThe value associated with this key is an NSString.\n\nThe system uses this UID to identify a specific peripheral manager. As a result, the UID must remain the same for subsequent executions of the app for successful restoration of the peripheral manager.\n\nSee Also\nInitialization Options\nlet CBPeripheralManagerOptionShowPowerAlertKey: String\nA Boolean value specifying whether the system should warn if Bluetooth is in the powered-off state when instantiating the peripheral manager."
  },
  {
    "title": "broadcast | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties/1518871-broadcast",
    "html": "Discussion\n\nDon’t use this property for local characteristics published with the add(_:) method of the CBPeripheralManager class. You can’t use this property when you initialize a new CBMutableCharacteristic object with the init(type:properties:value:permissions:) method of the CBMutableCharacteristic class.\n\nSee Also\nCharacteristic Properties\nstatic var read: CBCharacteristicProperties\nA property that indicates a peripheral can read the characteristic’s value.\nstatic var writeWithoutResponse: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, without a response to indicate that the write succeeded.\nstatic var write: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, with a response to indicate that the write succeeded.\nstatic var notify: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, without a response from the central to indicate receipt of the notification.\nstatic var indicate: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, with a response from the central to indicate receipt of the notification.\nstatic var authenticatedSignedWrites: CBCharacteristicProperties\nA property that indicates the perhipheral allows signed writes of the characteristic’s value, without a response to indicate the write succeeded.\nstatic var extendedProperties: CBCharacteristicProperties\nA property that indicates the characteristic defines additional properties in the extended properties descriptor.\nstatic var notifyEncryptionRequired: CBCharacteristicProperties\nA property that indicates that only trusted devices can enable notifications of the characteristic’s value.\nstatic var indicateEncryptionRequired: CBCharacteristicProperties\nA property that indicates only trusted devices can enable indications of the characteristic’s value."
  },
  {
    "title": "CBPeripheralManagerConnectionLatency.low | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerconnectionlatency/low",
    "html": "See Also\nLatency Values\ncase medium\nA latency setting that balances communication frequency and battery life.\ncase high\nA latency setting that prioritizes extending battery life over rapid communication."
  },
  {
    "title": "read | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties/1519104-read",
    "html": "Discussion\n\nUse the readValue(for:) method of the CBPeripheral class to read the value of a characteristic.\n\nSee Also\nCharacteristic Properties\nstatic var broadcast: CBCharacteristicProperties\nA property that indicates the characteristic can broadcast its value using a characteristic configuration descriptor.\nstatic var writeWithoutResponse: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, without a response to indicate that the write succeeded.\nstatic var write: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, with a response to indicate that the write succeeded.\nstatic var notify: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, without a response from the central to indicate receipt of the notification.\nstatic var indicate: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, with a response from the central to indicate receipt of the notification.\nstatic var authenticatedSignedWrites: CBCharacteristicProperties\nA property that indicates the perhipheral allows signed writes of the characteristic’s value, without a response to indicate the write succeeded.\nstatic var extendedProperties: CBCharacteristicProperties\nA property that indicates the characteristic defines additional properties in the extended properties descriptor.\nstatic var notifyEncryptionRequired: CBCharacteristicProperties\nA property that indicates that only trusted devices can enable notifications of the characteristic’s value.\nstatic var indicateEncryptionRequired: CBCharacteristicProperties\nA property that indicates only trusted devices can enable indications of the characteristic’s value."
  },
  {
    "title": "notify | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties/1518976-notify",
    "html": "See Also\nCharacteristic Properties\nstatic var broadcast: CBCharacteristicProperties\nA property that indicates the characteristic can broadcast its value using a characteristic configuration descriptor.\nstatic var read: CBCharacteristicProperties\nA property that indicates a peripheral can read the characteristic’s value.\nstatic var writeWithoutResponse: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, without a response to indicate that the write succeeded.\nstatic var write: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, with a response to indicate that the write succeeded.\nstatic var indicate: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, with a response from the central to indicate receipt of the notification.\nstatic var authenticatedSignedWrites: CBCharacteristicProperties\nA property that indicates the perhipheral allows signed writes of the characteristic’s value, without a response to indicate the write succeeded.\nstatic var extendedProperties: CBCharacteristicProperties\nA property that indicates the characteristic defines additional properties in the extended properties descriptor.\nstatic var notifyEncryptionRequired: CBCharacteristicProperties\nA property that indicates that only trusted devices can enable notifications of the characteristic’s value.\nstatic var indicateEncryptionRequired: CBCharacteristicProperties\nA property that indicates only trusted devices can enable indications of the characteristic’s value."
  },
  {
    "title": "CBError.Code.uuidNotAllowed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/uuidnotallowed",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBATTError.Code.insufficientResources | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/insufficientresources",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification."
  },
  {
    "title": "errorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2882744-errordomain",
    "html": "See Also\nInspecting Error Properties\nvar errorCode: Int\nThe code that identifies the error.\nvar errorUserInfo: [String : Any]\nA dictionary that provides details about the error.\nvar localizedDescription: String\nA string that contains the localized description of the error."
  },
  {
    "title": "prepareQueueFull | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325740-preparequeuefull",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "attributeNotLong | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325742-attributenotlong",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "centralManagerDidUpdateState(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/1518888-centralmanagerdidupdatestate",
    "html": "Required\n\nParameters\ncentral\n\nThe central manager whose state has changed.\n\nDiscussion\n\nYou implement this required method to ensure that the central device supports Bluetooth low energy and that it’s available to use. You should issue commands to the central manager only when the central manager’s state indicates it’s powered on. A state with a value lower than CBManagerState.poweredOn implies that scanning has stopped, which in turn disconnects any previously-connected peripherals. If the state moves below CBManagerState.poweredOff, all CBPeripheral objects obtained from this central manager become invalid; you must retrieve or discover these peripherals again. For a complete list of possible states, see CBManagerState.\n\nSee Also\nMonitoring the Central Manager’s State\nfunc centralManager(CBCentralManager, willRestoreState: [String : Any])\nTells the delegate the system is about to restore the central manager, as part of relaunching the app into the background."
  },
  {
    "title": "centralManager(_:connectionEventDidOccur:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/3174845-centralmanager",
    "html": "Discussion\n\nThe manager calls this method when it observes a connection event that matches the options provided to registerForConnectionEvents(options:).\n\nSee Also\nMonitoring Connections with Peripherals\nfunc centralManager(CBCentralManager, didConnect: CBPeripheral)\nTells the delegate that the central manager connected to a peripheral.\nfunc centralManager(CBCentralManager, didDisconnectPeripheral: CBPeripheral, error: Error?)\nTells the delegate that the central manager disconnected from a peripheral.\nfunc centralManager(CBCentralManager, didFailToConnect: CBPeripheral, error: Error?)\nTells the delegate the central manager failed to create a connection with a peripheral."
  },
  {
    "title": "centralManager(_:didConnect:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/1518969-centralmanager",
    "html": "Parameters\ncentral\n\nThe central manager that provides this information.\n\nperipheral\n\nThe now-connected peripheral.\n\nDiscussion\n\nThe manager invokes this method when a call to connect(_:options:) succeeds. You typically implement this method to set the peripheral’s delegate and discover its services.\n\nSee Also\nMonitoring Connections with Peripherals\nfunc centralManager(CBCentralManager, didDisconnectPeripheral: CBPeripheral, error: Error?)\nTells the delegate that the central manager disconnected from a peripheral.\nfunc centralManager(CBCentralManager, didFailToConnect: CBPeripheral, error: Error?)\nTells the delegate the central manager failed to create a connection with a peripheral.\nfunc centralManager(CBCentralManager, connectionEventDidOccur: CBConnectionEvent, for: CBPeripheral)\nTells the delegate that a connection event occurred which matches the registered options.\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "CBCentralManager.Feature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/feature",
    "html": "Topics\nCreating a Central Manager Feature Instance\ninit(rawValue: UInt)\nCreates a central manager feature instance.\nExtended Scan Features\nstatic var extendedScanAndConnect: CBCentralManager.Feature\nThe hardware supports extended scans and enhanced connection creation.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nInspecting Feature Support\nclass func supports(CBCentralManager.Feature) -> Bool\nReturns a Boolean that indicates whether the device supports a specific set of features."
  },
  {
    "title": "supports(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/3240586-supports",
    "html": "Parameters\nfeatures\n\nOne or more features that you would like to check for support.\n\nSee Also\nInspecting Feature Support\nstruct CBCentralManager.Feature\nAn option set of device-specific features."
  },
  {
    "title": "stopScan() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1518984-stopscan",
    "html": "See Also\nScanning or Stopping Scans of Peripherals\nfunc scanForPeripherals(withServices: [CBUUID]?, options: [String : Any]?)\nScans for peripherals that are advertising services.\nPeripheral Scanning Options\nKeys used to pass options when scanning for peripherals.\nvar isScanning: Bool\nA Boolean value that indicates whether the central is currently scanning."
  },
  {
    "title": "Peripheral Scanning Options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/peripheral_scanning_options",
    "html": "Topics\nConstants\nlet CBCentralManagerScanOptionAllowDuplicatesKey: String\nA Boolean value that specifies whether the scan should run without duplicate filtering.\nlet CBCentralManagerScanOptionSolicitedServiceUUIDsKey: String\nAn array of service UUIDs that you want to scan for.\nSee Also\nScanning or Stopping Scans of Peripherals\nfunc scanForPeripherals(withServices: [CBUUID]?, options: [String : Any]?)\nScans for peripherals that are advertising services.\nfunc stopScan()\nAsks the central manager to stop scanning for peripherals.\nvar isScanning: Bool\nA Boolean value that indicates whether the central is currently scanning."
  },
  {
    "title": "retrievePeripherals(withIdentifiers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1519127-retrieveperipherals",
    "html": "Parameters\nidentifiers\n\nA list of peripheral identifiers (represented by NSUUID objects) from which CBPeripheral objects can be retrieved.\n\nReturn Value\n\nA list of peripherals that the central manager is able to match to the provided identifiers.\n\nSee Also\nRetrieving Lists of Peripherals\nfunc retrieveConnectedPeripherals(withServices: [CBUUID]) -> [CBPeripheral]\nReturns a list of the peripherals connected to the system whose services match a given set of criteria."
  },
  {
    "title": "retrieveConnectedPeripherals(withServices:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1518924-retrieveconnectedperipherals",
    "html": "Parameters\nserviceUUIDs\n\nA list of service UUIDs, represented by CBUUID objects.\n\nReturn Value\n\nA list of the peripherals that are currently connected to the system and that contain any of the services specified in the serviceUUID parameter.\n\nDiscussion\n\nThe list of connected peripherals can include those that other apps have connected. You need to connect these peripherals locally using the connect(_:options:) method before using them.\n\nSee Also\nRetrieving Lists of Peripherals\nfunc retrievePeripherals(withIdentifiers: [UUID]) -> [CBPeripheral]\nReturns a list of known peripherals by their identifiers."
  },
  {
    "title": "CBATTError.Code.success | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/success",
    "html": "See Also\nError Codes\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "cancelPeripheralConnection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1518952-cancelperipheralconnection",
    "html": "Parameters\nperipheral\n\nThe peripheral to which the central manager is either trying to connect or has already connected.\n\nDiscussion\n\nThis method is nonblocking, and any CBPeripheral class commands that are still pending to peripheral may not complete. Because other apps may still have a connection to the peripheral, canceling a local connection doesn’t guarantee that the underlying physical link is immediately disconnected. From the app’s perspective, however, the peripheral is effectively disconnected, and the central manager object calls the centralManager(_:didDisconnectPeripheral:error:) method of its delegate object.\n\nSee Also\nEstablishing or Canceling Connections with Peripherals\nfunc connect(CBPeripheral, options: [String : Any]?)\nEstablishes a local connection to a peripheral.\nPeripheral Connection Options\nKeys used to pass options when connecting to a peripheral."
  },
  {
    "title": "Central Manager State Restoration Options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/central_manager_state_restoration_options",
    "html": "Topics\nState Restoration Options\nlet CBCentralManagerRestoredStatePeripheralsKey: String\nAn array of peripherals for use when restoring the state of a central manager.\nlet CBCentralManagerRestoredStateScanServicesKey: String\nAn array of service IDs for use when restoring state.\nlet CBCentralManagerRestoredStateScanOptionsKey: String\nA dictionary of peripheral scan options for use when restoring state.\nSee Also\nInitializing a Central Manager\ninit()\nInitializes the central manager without a delegate.\ninit(delegate: CBCentralManagerDelegate?, queue: dispatch_queue_t?)\nInitializes the central manager with a specified delegate and dispatch queue.\ninit(delegate: CBCentralManagerDelegate?, queue: dispatch_queue_t?, options: [String : Any]?)\nInitializes the central manager with specified delegate, dispatch queue, and initialization options.\nCentral Manager Initialization Options\nKeys used to pass options when initializing a central manager."
  },
  {
    "title": "CBATTError.Code.readNotPermitted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/readnotpermitted",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.invalidHandle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/invalidhandle",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "init(delegate:queue:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1519001-init",
    "html": "Parameters\ndelegate\n\nThe delegate that receives the central events.\n\nqueue\n\nThe dispatch queue used to dispatch the central role events. If the value is nil, the central manager dispatches central role events using the main queue.\n\noptions\n\nAn optional dictionary that contains initialization options for a central manager. For available options, see Central Manager Initialization Options.\n\nReturn Value\n\nReturns a newly initialized central manager.\n\nDiscussion\n\nThis method is the designated initializer for the CBCentralManager class.\n\nSee Also\nInitializing a Central Manager\ninit()\nInitializes the central manager without a delegate.\ninit(delegate: CBCentralManagerDelegate?, queue: dispatch_queue_t?)\nInitializes the central manager with a specified delegate and dispatch queue.\nCentral Manager Initialization Options\nKeys used to pass options when initializing a central manager.\nCentral Manager State Restoration Options\nKeys used to pass state restoration options to the central manager initializer."
  },
  {
    "title": "Central Manager Initialization Options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/central_manager_initialization_options",
    "html": "Topics\nConstants\nlet CBCentralManagerOptionShowPowerAlertKey: String\nA Boolean value that specifies whether the system warns the user if the app instantiates the central manager when Bluetooth service isn’t available.\nlet CBCentralManagerOptionRestoreIdentifierKey: String\nA string containing a unique identifier (UID) for the central manager to instantiate.\nSee Also\nInitializing a Central Manager\ninit()\nInitializes the central manager without a delegate.\ninit(delegate: CBCentralManagerDelegate?, queue: dispatch_queue_t?)\nInitializes the central manager with a specified delegate and dispatch queue.\ninit(delegate: CBCentralManagerDelegate?, queue: dispatch_queue_t?, options: [String : Any]?)\nInitializes the central manager with specified delegate, dispatch queue, and initialization options.\nCentral Manager State Restoration Options\nKeys used to pass state restoration options to the central manager initializer."
  },
  {
    "title": "CBATTError.Code.insufficientAuthentication | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/insufficientauthentication",
    "html": "Discussion\n\nThis error indicates you must authenticate before reading or writing the attribute’s value.\n\nSee Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBPeripheralManagerState.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerstate/unknown",
    "html": "Discussion\n\nWhen the manager is in this state, an update is imminent."
  },
  {
    "title": "CBATTError.Code.writeNotPermitted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/writenotpermitted",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.invalidPdu | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/invalidpdu",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.requestNotSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/requestnotsupported",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.insufficientAuthorization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/insufficientauthorization",
    "html": "Discussion\n\nThis error indicates you must obtain authorization before reading or writing the attribute’s value.\n\nSee Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.invalidOffset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/invalidoffset",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.insufficientEncryptionKeySize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/insufficientencryptionkeysize",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.attributeNotFound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/attributenotfound",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.prepareQueueFull | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/preparequeuefull",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.attributeNotLong | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/attributenotlong",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBAdvertisementDataLocalNameKey | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbadvertisementdatalocalnamekey",
    "html": "Discussion\n\nThe value associated with this key is an NSString.\n\nSee Also\nAdvertisement Keys\nlet CBAdvertisementDataManufacturerDataKey: String\nThe manufacturer data of a peripheral.\nlet CBAdvertisementDataServiceDataKey: String\nA dictionary that contains service-specific advertisement data.\nlet CBAdvertisementDataServiceUUIDsKey: String\nAn array of service UUIDs.\nlet CBAdvertisementDataOverflowServiceUUIDsKey: String\nAn array of UUIDs found in the overflow area of the advertisement data.\nlet CBAdvertisementDataTxPowerLevelKey: String\nThe transmit power of a peripheral.\nlet CBAdvertisementDataIsConnectable: String\nA Boolean value that indicates whether the advertising event type is connectable.\nlet CBAdvertisementDataSolicitedServiceUUIDsKey: String\nAn array of solicited service UUIDs."
  },
  {
    "title": "CBPeripheralManagerAuthorizationStatus.restricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerauthorizationstatus/restricted",
    "html": "Discussion\n\nThe user can’t change this app’s status, possibly due to active restrictions such as parental controls being in place."
  },
  {
    "title": "CBPeripheralState.connected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralstate/connected",
    "html": "See Also\nPeripheral States\ncase disconnected\nThe peripheral isn’t connected to the central manager.\ncase connecting\nThe peripheral is in the process of connecting to the central manager.\ncase disconnecting\nThe peripheral is disconnecting from the central manager."
  },
  {
    "title": "CBPeripheralState.connecting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralstate/connecting",
    "html": "See Also\nPeripheral States\ncase disconnected\nThe peripheral isn’t connected to the central manager.\ncase connected\nThe peripheral is connected to the central manager.\ncase disconnecting\nThe peripheral is disconnecting from the central manager."
  },
  {
    "title": "permissions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutablecharacteristic/1518891-permissions",
    "html": "Discussion\n\nCharacteristic permissions represent the read, write, and encryption permissions for a characteristic’s value. For a complete list and discussion of the available characteristic permissions, see CBAttributePermissions.\n\nSee Also\nManaging a Mutable Characteristic\nvar value: Data?\nThe value of the characteristic.\nvar descriptors: [CBDescriptor]?\nAn array of the characteristic’s descriptors.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value.\nvar subscribedCentrals: [CBCentral]?\nA list of centrals that are currently subscribed to the characteristic’s value."
  },
  {
    "title": "CBError.Code.invalidParameters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/invalidparameters",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBError.Code.peripheralDisconnected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/peripheraldisconnected",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBError.Code.operationCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/operationcancelled",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "operationCancelled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2325735-operationcancelled",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "notConnected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2325736-notconnected",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBATTError.Code.invalidAttributeValueLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/invalidattributevaluelength",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.unlikelyError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/unlikelyerror",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.insufficientEncryption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/insufficientencryption",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBATTError.Code.unsupportedGroupType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code/unsupportedgrouptype",
    "html": "See Also\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase insufficientResources\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1518944-delegate",
    "html": "Discussion\n\nFor information about how to implement your central manager delegate, see CBCentralManagerDelegate."
  },
  {
    "title": "CBConnectionEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectionevent",
    "html": "Topics\nEvents\ncase peerConnected\nThe peer has connected to the local device.\ncase peerDisconnected\nThe peer has disconnected from the local device.\nRelationships\nConforms To\nSendable\nSee Also\nReceiving Connection Events\nfunc registerForConnectionEvents(options: [CBConnectionEventMatchingOption : Any]?)\nRegister for an event notification when the central manager makes a connection matching the given options.\nPeripheral Connection Options\nKeys used to pass options when connecting to a peripheral.\nstruct CBConnectionEventMatchingOption\nA set of options to use when registering for connection events."
  },
  {
    "title": "CBConnectionEventMatchingOption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbconnectioneventmatchingoption",
    "html": "Topics\nCreating a Matching Option Instance\ninit(rawValue: String)\nCreates a matching option from the provided raw value.\nMatching Options\nstatic let peripheralUUIDs: CBConnectionEventMatchingOption\nAn array of UUID objects that represents peripherals to match.\nstatic let serviceUUIDs: CBConnectionEventMatchingOption\nAn array that represents service identifiers to match.\nRelationships\nConforms To\nHashable\nRawRepresentable\nSendable\nSee Also\nReceiving Connection Events\nfunc registerForConnectionEvents(options: [CBConnectionEventMatchingOption : Any]?)\nRegister for an event notification when the central manager makes a connection matching the given options.\nPeripheral Connection Options\nKeys used to pass options when connecting to a peripheral.\nenum CBConnectionEvent\nA change to the connection state of a peer."
  },
  {
    "title": "Peripheral Connection Options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/peripheral_connection_options",
    "html": "Topics\nOptions\nlet CBConnectPeripheralOptionEnableAutoReconnect: String\nA Boolean value that specifies whether the system automatically reconnects with a peripheral.\nlet CBConnectPeripheralOptionEnableTransportBridgingKey: String\nAn option to bridge classic Bluetooth technology profiles, if already connected over Bluetooth Low Energy.\nlet CBConnectPeripheralOptionNotifyOnConnectionKey: String\nA Boolean value that specifies whether the system should display an alert when connecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnDisconnectionKey: String\nA Boolean value that specifies whether the system should display an alert when disconnecting a peripheral in the background.\nlet CBConnectPeripheralOptionNotifyOnNotificationKey: String\nA Boolean value that specifies whether the system should display an alert for any notification sent by a peripheral.\nlet CBConnectPeripheralOptionRequiresANCS: String\nAn option to require Apple Notification Center Service (ANCS) when connecting a device.\nlet CBConnectPeripheralOptionStartDelayKey: String\nAn option that indicates a delay before the system makes a connection.\nSee Also\nEstablishing or Canceling Connections with Peripherals\nfunc connect(CBPeripheral, options: [String : Any]?)\nEstablishes a local connection to a peripheral.\nfunc cancelPeripheralConnection(CBPeripheral)\nCancels an active or pending local connection to a peripheral."
  },
  {
    "title": "CBCentralManagerState.resetting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerstate/resetting",
    "html": "Discussion\n\nThis state indicates that Bluetooth is trying to reconnect. Once it does, Core Bluetooth updates the state value."
  },
  {
    "title": "invalidHandle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325725-invalidhandle",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "insufficientAuthorization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325726-insufficientauthorization",
    "html": "Discussion\n\nThis error indicates you must obtain authorization before reading or writing the attribute’s value.\n\nSee Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "insufficientAuthentication | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325721-insufficientauthentication",
    "html": "Discussion\n\nThis error indicates you must authenticate before reading or writing the attribute’s value.\n\nSee Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "requestNotSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325737-requestnotsupported",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "invalidOffset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325744-invalidoffset",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2882740-localizeddescription",
    "html": "See Also\nInspecting Error Properties\nstatic var errorDomain: String\nThe domain of Core Bluetooth errors.\nvar errorCode: Int\nThe code that identifies the error.\nvar errorUserInfo: [String : Any]\nA dictionary that provides details about the error."
  },
  {
    "title": "attributeNotFound | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325728-attributenotfound",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "insufficientEncryptionKeySize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325722-insufficientencryptionkeysize",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "init(delegate:queue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1518695-init",
    "html": "Parameters\ndelegate\n\nThe delegate that receives central events.\n\nqueue\n\nThe dispatch queue used to dispatch the central role events. If the value is nil, the central manager dispatches central role events using the main queue.\n\nReturn Value\n\nReturns a newly initialized central manager.\n\nSee Also\nInitializing a Central Manager\ninit()\nInitializes the central manager without a delegate.\ninit(delegate: CBCentralManagerDelegate?, queue: dispatch_queue_t?, options: [String : Any]?)\nInitializes the central manager with specified delegate, dispatch queue, and initialization options.\nCentral Manager Initialization Options\nKeys used to pass options when initializing a central manager.\nCentral Manager State Restoration Options\nKeys used to pass state restoration options to the central manager initializer.\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "CBPeripheralManagerState.resetting | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerstate/resetting",
    "html": "Discussion\n\nWhen the manager is in this state, an update is imminent."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1648596-init",
    "html": "See Also\nInitializing a Central Manager\ninit(delegate: CBCentralManagerDelegate?, queue: dispatch_queue_t?)\nInitializes the central manager with a specified delegate and dispatch queue.\ninit(delegate: CBCentralManagerDelegate?, queue: dispatch_queue_t?, options: [String : Any]?)\nInitializes the central manager with specified delegate, dispatch queue, and initialization options.\nCentral Manager Initialization Options\nKeys used to pass options when initializing a central manager.\nCentral Manager State Restoration Options\nKeys used to pass state restoration options to the central manager initializer."
  },
  {
    "title": "unknownDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2963176-unknowndevice",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "unkownDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2879172-unkowndevice",
    "html": "Deprecated\n\nUse unknownDevice instead.\n\nSee Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown."
  },
  {
    "title": "init(string:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuid/1519025-init",
    "html": "Parameters\ntheString\n\nA string containing a 16-, 32-, or 128-bit UUID.\n\nReturn Value\n\nA new CBUUID object for the specified UUID string.\n\nDiscussion\n\nSpecify 128-bit UUIDs as a string of hexadecimal digits punctuated by hyphens, for example, 68753A44-4D6F-1226-9C60-0050E4C00067. Specify 16- or 32-bit UUIDs as a string of 4 or 8 hexadecimal digits, respectively. For an example of how to use this method, see Services and Characteristics Are Identified by UUIDs and Create Your Own UUIDs for Custom Services and Characteristics.\n\nSee Also\nCreating New CBUUID Objects\ninit(data: Data)\nCreates a Core Bluetooth UUID object from a 16-, 32-, or 128-bit UUID data container.\ninit(cfuuid: CFUUID)\nCreates a Core Bluetooth UUID object from a Core Foundation UUID object.\nDeprecated\ninit(nsuuid: UUID)\nCreates a Core Bluetooth UUID object from a Foundation UUID object.\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "CBUUIDCharacteristicExtendedPropertiesString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuidcharacteristicextendedpropertiesstring",
    "html": "Discussion\n\nThe corresponding value for this descriptor is an NSNumber object.\n\nSee Also\nCharacteristic Descriptors\nlet CBUUIDCharacteristicUserDescriptionString: String\nThe UUID for the User Description descriptor, as a string.\nlet CBUUIDClientCharacteristicConfigurationString: String\nThe UUID for the Client Configuration descriptor, as a string.\nlet CBUUIDServerCharacteristicConfigurationString: String\nThe UUID for the Server Configuration descriptor, as a string.\nlet CBUUIDCharacteristicFormatString: String\nThe UUID for the Presentation Format descriptor, as a string.\nlet CBUUIDCharacteristicAggregateFormatString: String\nThe UUID for the Aggregate Format descriptor, as a string.\nlet CBUUIDL2CAPPSMCharacteristicString: String\nThe PSM of an L2CAP channel associated with the GATT service containing this characteristic."
  },
  {
    "title": "invalidAttributeValueLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325723-invalidattributevaluelength",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "insufficientEncryption | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325743-insufficientencryption",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "CBError.Code.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/unknown",
    "html": "See Also\nError Codes\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBError.Code.invalidHandle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/invalidhandle",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "peripheralManager(_:central:didSubscribeTo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/1393261-peripheralmanager",
    "html": "Parameters\nperipheral\n\nThe peripheral manager connected to the remote central.\n\ncentral\n\nThe remote central device that subscribed to the characteristic’s value.\n\ncharacteristic\n\nThe characteristic subscribed to.\n\nDiscussion\n\nCore Bluetooth invokes this method when a remote central device subscribes to the value of one of the local peripheral’s characteristics, by enabling notifications or indications on the characteristic’s value. When called, start sending the subscribed central updates as the characteristic’s value changes. To send updated characteristic values to subscribed centrals, use the updateValue(_:for:onSubscribedCentrals:) method of the CBPeripheralManager class.\n\nSee Also\nMonitoring Subscriptions to Characteristic Values\nfunc peripheralManager(CBPeripheralManager, central: CBCentral, didUnsubscribeFrom: CBCharacteristic)\nTells the delegate that a remote central device unsubscribed from a characteristic’s value.\nfunc peripheralManagerIsReady(toUpdateSubscribers: CBPeripheralManager)\nTells the delegate that a local peripheral device is ready to send characteristic value updates."
  },
  {
    "title": "Peripheral Manager State Restoration Options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/peripheral_manager_state_restoration_options",
    "html": "Topics\nState Restoration Dictionary Keys\nlet CBPeripheralManagerRestoredStateServicesKey: String\nAn array of restored peripheral services.\nlet CBPeripheralManagerRestoredStateAdvertisementDataKey: String\nA dictionary of restored advertising data.\nSee Also\nMonitoring Changes to the Peripheral Manager’s State\nfunc peripheralManagerDidUpdateState(CBPeripheralManager)\nTells the delegate the peripheral manager’s state updated.\n\nRequired\n\nfunc peripheralManager(CBPeripheralManager, willRestoreState: [String : Any])\nTells the delegate the system is about to restore the peripheral manager."
  },
  {
    "title": "CBError.Code.outOfSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/outofspace",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBError.Code.notConnected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/notconnected",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBError.Code.alreadyAdvertising | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/alreadyadvertising",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBError.Code.connectionFailed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/connectionfailed",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBError.Code.connectionLimitReached | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/connectionlimitreached",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBError.Code.operationNotSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/operationnotsupported",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBError.Code.unkownDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/unkowndevice",
    "html": "Deprecated\n\nUse unknownDevice instead.\n\nSee Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown."
  },
  {
    "title": "unknownDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/2963174-unknowndevice",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "errorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2882745-errorcode",
    "html": "See Also\nInspecting Error Properties\nvar errorUserInfo: [String : Any]\nA dictionary that provides details about the error.\nstatic var errorDomain: String\nvar localizedDescription: String\nA string that contains the localized description of the error."
  },
  {
    "title": "errorUserInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2882738-erroruserinfo",
    "html": "See Also\nInspecting Error Properties\nvar errorCode: Int\nThe code that identifies the error.\nstatic var errorDomain: String\nvar localizedDescription: String\nA string that contains the localized description of the error."
  },
  {
    "title": "errorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2882739-errordomain",
    "html": "See Also\nInspecting Error Properties\nvar errorCode: Int\nThe code that identifies the error.\nvar errorUserInfo: [String : Any]\nA dictionary that provides details about the error.\nvar localizedDescription: String\nA string that contains the localized description of the error."
  },
  {
    "title": "invalidHandle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2325730-invalidhandle",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2325724-unknown",
    "html": "See Also\nError Codes\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2882743-localizeddescription",
    "html": "See Also\nInspecting Error Properties\nvar errorCode: Int\nThe code that identifies the error.\nvar errorUserInfo: [String : Any]\nA dictionary that provides details about the error.\nstatic var errorDomain: String"
  },
  {
    "title": "alreadyAdvertising | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2325748-alreadyadvertising",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "invalidParameters | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2325749-invalidparameters",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "uuidNotAllowed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2325727-uuidnotallowed",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "peripheralDisconnected | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2325738-peripheraldisconnected",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "outOfSpace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2325747-outofspace",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "connectionTimeout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2325746-connectiontimeout",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "peripheralDidUpdateName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1518801-peripheraldidupdatename",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\nDiscussion\n\nCore Bluetooth invokes this method whenever the peripheral’s Generic Access Profile (GAP) device name changes. Since a peripheral device can change its GAP device name, you can implement this method if your app needs to display the current name of the peripheral device.\n\nSee Also\nMonitoring Changes to a Peripheral’s Name or Services\nfunc peripheral(CBPeripheral, didModifyServices: [CBService])\nTells the delegate that a peripheral’s services changed."
  },
  {
    "title": "registerForConnectionEvents(options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/3174844-registerforconnectionevents",
    "html": "Parameters\noptions\n\nA dictionary that specifies options for connection events. See Peripheral Connection Options for a list of possible options.\n\nDiscussion\n\nWhen the central manager makes a connection that matches the options, it calls the delegate’s centralManager(_:connectionEventDidOccur:for:) method.\n\nSee Also\nReceiving Connection Events\nPeripheral Connection Options\nKeys used to pass options when connecting to a peripheral.\nenum CBConnectionEvent\nA change to the connection state of a peer.\nstruct CBConnectionEventMatchingOption\nA set of options to use when registering for connection events."
  },
  {
    "title": "writeNotPermitted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325729-writenotpermitted",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "invalidPdu | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325731-invalidpdu",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "readNotPermitted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325732-readnotpermitted",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "success | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325733-success",
    "html": "See Also\nError Codes\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "errorUserInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2882741-erroruserinfo",
    "html": "See Also\nInspecting Error Properties\nstatic var errorDomain: String\nThe domain of Core Bluetooth errors.\nvar errorCode: Int\nThe code that identifies the error.\nvar localizedDescription: String\nA string that contains the localized description of the error."
  },
  {
    "title": "errorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2882742-errorcode",
    "html": "See Also\nInspecting Error Properties\nstatic var errorDomain: String\nThe domain of Core Bluetooth errors.\nvar errorUserInfo: [String : Any]\nA dictionary that provides details about the error.\nvar localizedDescription: String\nA string that contains the localized description of the error."
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanager/1648600-state",
    "html": "Discussion\n\nThis state is initially set to CBManagerState.unknown. When the state updates, the manager calls its delegate’s centralManagerDidUpdateState(_:) method.\n\nSee Also\nAccessing the Manager’s Properties\nenum CBManagerState\nThe possible states of a Core Bluetooth manager."
  },
  {
    "title": "isNotifying | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristic/1519057-isnotifying",
    "html": "Discussion\n\nThis value is true if you enabled notifications or indications for the characteristic by successfully calling the setNotifyValue(_:for:) method of the CBPeripheral class. In this case, the peripheral updates its connected central that whenever the characteristic’s value changes.\n\nIf the value of the property is false, notifications (or indications) aren’t enabled for the characteristic, and the peripheral doesn’t update its connected central when the characteristic’s value changes.\n\nSee Also\nAccessing Characteristic Data\nvar value: Data?\nThe value of the characteristic.\nvar descriptors: [CBDescriptor]?\nA list of the descriptors discovered in this characteristic.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nstruct CBCharacteristicProperties\nValues that represent the possible properties of a characteristic.\nvar isBroadcasted: Bool\nA Boolean value that indicates whether the characteristic the service broadcasts this characteristic.\nRelated Documentation\nfunc setNotifyValue(Bool, for: CBCharacteristic)\nSets notifications or indications for the value of a specified characteristic."
  },
  {
    "title": "includedServices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbservice/1434324-includedservices",
    "html": "Discussion\n\nThis array contains CBService objects that represent the included services of a service. A service of a peripheral may contain a reference to other services that are available on the peripheral. These other services are the included services of the service. You discover included services using the discoverIncludedServices(_:for:) method of the CBPeripheral class.\n\nSee Also\nAccessing Service Data\nvar characteristics: [CBCharacteristic]?\nA list of characteristics discovered in this service."
  },
  {
    "title": "stopAdvertising() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393275-stopadvertising",
    "html": "Discussion\n\nCall this method when you no longer want to advertise peripheral manager data.\n\nSee Also\nManaging Advertising\nfunc startAdvertising([String : Any]?)\nAdvertises peripheral manager data.\nAdvertising Data\nvar isAdvertising: Bool\nA Boolean value that indicates whether the peripheral is advertising data."
  },
  {
    "title": "isAdvertising | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393291-isadvertising",
    "html": "Discussion\n\nThis value is true if the peripheral is advertising data as a result of successfully calling the startAdvertising(_:) method. The value is false if the peripheral is no longer advertising its data.\n\nSee Also\nManaging Advertising\nfunc startAdvertising([String : Any]?)\nAdvertises peripheral manager data.\nAdvertising Data\nfunc stopAdvertising()\nStops advertising peripheral manager data."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2946938",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393255-add",
    "html": "Parameters\nservice\n\nThe service you want to publish.\n\nDiscussion\n\nWhen you add a service to the database, the peripheral manager calls the peripheralManager(_:didAdd:error:) method of its delegate object. If the service contains any included services, you must first publish them.\n\nSee Also\nAdding and Removing Services\nfunc remove(CBMutableService)\nRemoves a specified published service from the local GATT database.\nfunc removeAllServices()\nRemoves all published services from the local GATT database."
  },
  {
    "title": "uuidString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuid/1518742-uuidstring",
    "html": "See Also\nInspecting CBUUID Properties\nvar data: Data\nThe data of the UUID."
  },
  {
    "title": "data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuid/1519007-data",
    "html": "See Also\nInspecting CBUUID Properties\nvar uuidString: String\nThe UUID represented as a string."
  },
  {
    "title": "init(nsuuid:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuid/1518783-init",
    "html": "Parameters\ntheUUID\n\nA UUID represented by an NSUUID object.\n\nReturn Value\n\nA new CBUUID object for the specified UUID.\n\nSee Also\nCreating New CBUUID Objects\ninit(string: String)\nCreates a Core Bluetooth UUID object from a 16-, 32-, or 128-bit UUID string.\ninit(data: Data)\nCreates a Core Bluetooth UUID object from a 16-, 32-, or 128-bit UUID data container.\ninit(cfuuid: CFUUID)\nCreates a Core Bluetooth UUID object from a Core Foundation UUID object.\nDeprecated"
  },
  {
    "title": "init(cfuuid:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuid/1518861-init",
    "html": "Parameters\ntheUUID\n\nA UUID represented by a CFUUID object.\n\nReturn Value\n\nA new CBUUID object for the specified UUID.\n\nSee Also\nCreating New CBUUID Objects\ninit(string: String)\nCreates a Core Bluetooth UUID object from a 16-, 32-, or 128-bit UUID string.\ninit(data: Data)\nCreates a Core Bluetooth UUID object from a 16-, 32-, or 128-bit UUID data container.\ninit(nsuuid: UUID)\nCreates a Core Bluetooth UUID object from a Foundation UUID object."
  },
  {
    "title": "init(data:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuid/1518799-init",
    "html": "Parameters\ntheData\n\nData containing a 16-, 32-, or 128-bit UUID.\n\nReturn Value\n\nA new CBUUID object for the specified UUID data.\n\nDiscussion\n\nThis method is useful when handling the UUID of a Bluetooth attribute in raw bytes.\n\nSee Also\nCreating New CBUUID Objects\ninit(string: String)\nCreates a Core Bluetooth UUID object from a 16-, 32-, or 128-bit UUID string.\ninit(cfuuid: CFUUID)\nCreates a Core Bluetooth UUID object from a Core Foundation UUID object.\nDeprecated\ninit(nsuuid: UUID)\nCreates a Core Bluetooth UUID object from a Foundation UUID object."
  },
  {
    "title": "central | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattrequest/1518995-central",
    "html": "See Also\nRequesting to Read and Write Characteristic Values\nvar characteristic: CBCharacteristic\nThe characteristic to read or write the value of.\nvar value: Data?\nThe data that the central reads from or writes to the peripheral.\nvar offset: Int\nThe zero-based index of the first byte for the read or write request.\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "CBUUIDCharacteristicAggregateFormatString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuidcharacteristicaggregateformatstring",
    "html": "See Also\nCharacteristic Descriptors\nlet CBUUIDCharacteristicExtendedPropertiesString: String\nThe UUID for the Extended Properties descriptor, as a string.\nlet CBUUIDCharacteristicUserDescriptionString: String\nThe UUID for the User Description descriptor, as a string.\nlet CBUUIDClientCharacteristicConfigurationString: String\nThe UUID for the Client Configuration descriptor, as a string.\nlet CBUUIDServerCharacteristicConfigurationString: String\nThe UUID for the Server Configuration descriptor, as a string.\nlet CBUUIDCharacteristicFormatString: String\nThe UUID for the Presentation Format descriptor, as a string.\nlet CBUUIDL2CAPPSMCharacteristicString: String\nThe PSM of an L2CAP channel associated with the GATT service containing this characteristic."
  },
  {
    "title": "CBUUIDServerCharacteristicConfigurationString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuidservercharacteristicconfigurationstring",
    "html": "Discussion\n\nThe corresponding value for this descriptor is an NSNumber object.\n\nSee Also\nCharacteristic Descriptors\nlet CBUUIDCharacteristicExtendedPropertiesString: String\nThe UUID for the Extended Properties descriptor, as a string.\nlet CBUUIDCharacteristicUserDescriptionString: String\nThe UUID for the User Description descriptor, as a string.\nlet CBUUIDClientCharacteristicConfigurationString: String\nThe UUID for the Client Configuration descriptor, as a string.\nlet CBUUIDCharacteristicFormatString: String\nThe UUID for the Presentation Format descriptor, as a string.\nlet CBUUIDCharacteristicAggregateFormatString: String\nThe UUID for the Aggregate Format descriptor, as a string.\nlet CBUUIDL2CAPPSMCharacteristicString: String\nThe PSM of an L2CAP channel associated with the GATT service containing this characteristic."
  },
  {
    "title": "characteristic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattrequest/1518716-characteristic",
    "html": "See Also\nRequesting to Read and Write Characteristic Values\nvar central: CBCentral\nThe remote central device that originated the request.\nvar value: Data?\nThe data that the central reads from or writes to the peripheral.\nvar offset: Int\nThe zero-based index of the first byte for the read or write request."
  },
  {
    "title": "value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattrequest/1518795-value",
    "html": "Discussion\n\nThe value of this property depends on whether the request type is read or write. For read requests, the property is nil, and you should set it before responding to the remote central through the respond(to:withResult:) method. For write requests, the value is the data to write to the characteristic’s value.\n\nSee Also\nRequesting to Read and Write Characteristic Values\nvar central: CBCentral\nThe remote central device that originated the request.\nvar characteristic: CBCharacteristic\nThe characteristic to read or write the value of.\nvar offset: Int\nThe zero-based index of the first byte for the read or write request."
  },
  {
    "title": "offset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattrequest/1518857-offset",
    "html": "Discussion\n\nYou can use the value of this property to ensure that the ATT request is attempting to read or write within the proper bounds of the characteristic’s value. For an example of how to take a request’s offset property into account when responding to a read or write request, see Responding to Read and Write Requests from a Central.\n\nSee Also\nRequesting to Read and Write Characteristic Values\nvar central: CBCentral\nThe remote central device that originated the request.\nvar characteristic: CBCharacteristic\nThe characteristic to read or write the value of.\nvar value: Data?\nThe data that the central reads from or writes to the peripheral."
  },
  {
    "title": "CBUUIDClientCharacteristicConfigurationString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuidclientcharacteristicconfigurationstring",
    "html": "Discussion\n\nThe corresponding value for this descriptor is an NSNumber object.\n\nSee Also\nCharacteristic Descriptors\nlet CBUUIDCharacteristicExtendedPropertiesString: String\nThe UUID for the Extended Properties descriptor, as a string.\nlet CBUUIDCharacteristicUserDescriptionString: String\nThe UUID for the User Description descriptor, as a string.\nlet CBUUIDServerCharacteristicConfigurationString: String\nThe UUID for the Server Configuration descriptor, as a string.\nlet CBUUIDCharacteristicFormatString: String\nThe UUID for the Presentation Format descriptor, as a string.\nlet CBUUIDCharacteristicAggregateFormatString: String\nThe UUID for the Aggregate Format descriptor, as a string.\nlet CBUUIDL2CAPPSMCharacteristicString: String\nThe PSM of an L2CAP channel associated with the GATT service containing this characteristic."
  },
  {
    "title": "authorization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanager/3180033-authorization",
    "html": "Deprecated\n\nUse the class property authorization instead."
  },
  {
    "title": "value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbdescriptor/1518778-value",
    "html": "Discussion\n\nThe documentation for CBUUID details the value types for the various descriptor types.\n\nYou can read the value of a descriptor by calling the readValue(for:) method of the CBPeripheral class. You can write the value of a descriptor by calling the writeValue(_:for:) method of the CBPeripheral class. You can’t, however, use the writeValue(_:for:) method to write the value of a client configuration descriptor (CBUUIDClientCharacteristicConfigurationString). Instead, you use the setNotifyValue(_:for:) method of the CBPeripheral class to configure client indications or notifications of a characteristic’s value on a server."
  },
  {
    "title": "CBManagerAuthorization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerauthorization",
    "html": "Topics\nAuthorization States\ncase allowedAlways\nA state that indicates the user has authorized Bluetooth at any time.\ncase denied\nA state that indicates the user explicitly denied Bluetooth access for this app.\ncase notDetermined\nA state that indicates the user has yet to authorize Bluetooth for this app.\ncase restricted\nA state that indicates this app isn’t authorized to use Bluetooth.\nRelationships\nConforms To\nSendable\nSee Also\nDetermining Authorization State\nclass var authorization: CBManagerAuthorization\nThe current authorization status for using Bluetooth."
  },
  {
    "title": "authorization | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanager/3377595-authorization",
    "html": "Discussion\n\nCheck this property in your implementation of the delegate methods centralManagerDidUpdateState(_:) and peripheralManagerDidUpdateState(_:) to determine whether your app can use Core Bluetooth. You can also use it to check the app’s authorization status before creating a CBManager instance.\n\nThe initial value of this property is CBManagerAuthorization.notDetermined.\n\nSee Also\nDetermining Authorization State\nenum CBManagerAuthorization\nThe current authorization state of a Core Bluetooth manager."
  },
  {
    "title": "peripheralManager(_:didAdd:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/1393279-peripheralmanager",
    "html": "Parameters\nperipheral\n\nThe peripheral manager adding the service.\n\nservice\n\nThe service added to the local GATT database.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the add(_:) method to publish a service to the local peripheral’s GATT database. If the service published successfully to the local database, the error parameter is nil. If unsuccessful, the error parameter provides the cause of the failure."
  },
  {
    "title": "peripheralManager(_:didReceiveRead:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/1393257-peripheralmanager",
    "html": "Parameters\nperipheral\n\nThe peripheral manager that received the request.\n\nrequest\n\nA CBATTRequest object that represents a request to read a characteristic’s value.\n\nDiscussion\n\nWhen you receive this callback, call the respond(to:withResult:) method of the CBPeripheralManager class exactly once to respond to the read request.\n\nSee Also\nReceiving Read and Write Requests\nfunc peripheralManager(CBPeripheralManager, didReceiveWrite: [CBATTRequest])\nTells the delegate that a local peripheral device received an Attribute Protocol (ATT) write request for a characteristic with a dynamic value."
  },
  {
    "title": "peripheralManager(_:central:didUnsubscribeFrom:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/1393289-peripheralmanager",
    "html": "Parameters\nperipheral\n\nThe peripheral manager connected to the remote central.\n\ncentral\n\nThe remote central device that subscribed to the characteristic’s value.\n\ncharacteristic\n\nThe characteristic unsubscribed from.\n\nDiscussion\n\nCore Bluetooth calls this method when a remote central device unsubscribes from the value of one of the local peripheral’s characteristics, by disabling notifications or indications on the characteristic’s value. When called, stop sending the subscribed central updates of updates to the characteristic’s value.\n\nSee Also\nMonitoring Subscriptions to Characteristic Values\nfunc peripheralManager(CBPeripheralManager, central: CBCentral, didSubscribeTo: CBCharacteristic)\nTells the delegate that a remote central device subscribed to a characteristic’s value.\nfunc peripheralManagerIsReady(toUpdateSubscribers: CBPeripheralManager)\nTells the delegate that a local peripheral device is ready to send characteristic value updates."
  },
  {
    "title": "peripheralManagerIsReady(toUpdateSubscribers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/1393248-peripheralmanagerisready",
    "html": "Parameters\nperipheral\n\nThe peripheral manager that sends characteristic value updates.\n\nDiscussion\n\nWhen a call to the updateValue(_:for:onSubscribedCentrals:) method fails because the underlying queue used to transmit the updated characteristic value is full, Core Bluetooth calls the peripheralManagerIsReady(toUpdateSubscribers:) method when more space in the transmit queue becomes available. You can then implement this delegate method to resend the value.\n\nSee Also\nMonitoring Subscriptions to Characteristic Values\nfunc peripheralManager(CBPeripheralManager, central: CBCentral, didSubscribeTo: CBCharacteristic)\nTells the delegate that a remote central device subscribed to a characteristic’s value.\nfunc peripheralManager(CBPeripheralManager, central: CBCentral, didUnsubscribeFrom: CBCharacteristic)\nTells the delegate that a remote central device unsubscribed from a characteristic’s value."
  },
  {
    "title": "peripheralManagerDidStartAdvertising(_:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/1393321-peripheralmanagerdidstartadverti",
    "html": "Parameters\nperipheral\n\nThe peripheral manager that is starting advertising.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth calls this method when your app calls the startAdvertising(_:) method to advertise the local peripheral device’s data. If successful, the error parameter is nil. If a problem prevents advertising the data, the error parameter returns the cause of the failure."
  },
  {
    "title": "peripheralManagerDidUpdateState(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/1393271-peripheralmanagerdidupdatestate",
    "html": "Required\n\nParameters\nperipheral\n\nThe peripheral manager whose state has changed.\n\nDiscussion\n\nYou implement this required method to ensure that Bluetooth low energy is available to use on the local peripheral device.\n\nIssue commands to the peripheral manager only when the peripheral manager is in the powered-on state, as indicated by the CBPeripheralManagerState.poweredOn constant. A state with a value lower than CBPeripheralManagerState.poweredOn implies that advertising has stopped and that any connected centrals have been disconnected. If the state moves below CBPeripheralManagerState.poweredOff, advertising has stopped you must explicitly restart it. In addition, the powered off state clears the local database; in this case you must explicitly re-add all services. For a complete list and discussion of the possible values representing the state of the peripheral manager, see the CBPeripheralManagerState enumeration in CBPeripheralManager.\n\nSee Also\nMonitoring Changes to the Peripheral Manager’s State\nfunc peripheralManager(CBPeripheralManager, willRestoreState: [String : Any])\nTells the delegate the system is about to restore the peripheral manager.\nPeripheral Manager State Restoration Options\nKeys used to specify options when restoring the state of a peripheral manager.\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "uuid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattribute/1620638-uuid",
    "html": "Discussion\n\nThis property is a 128-bit UUID that identifies the attribute.\n\nSee Also\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "peripheral(_:didModifyServices:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1518865-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\ninvalidatedServices\n\nA list of services invalidated by this change.\n\nDiscussion\n\nCore Bluetooth invokes this method whenever one or more services of a peripheral change. A peripheral’s services have changed if:\n\nThe peripheral removes a service from its database.\n\nThe peripheral adds a new service to its database.\n\nThe peripheral adds back a previously-removed service, but at a different location in the database.\n\nThe invalidatedServices parameter includes any changed services that you previously discovered; you can no longer use these services. You can use the discoverServices(_:) method to discover any new services that the peripheral added to its database. Use this same method to find out whether any of the invalidated services that you were using (and want to continue using) now have a different location in the peripheral’s database.\n\nSee Also\nMonitoring Changes to a Peripheral’s Name or Services\nfunc peripheralDidUpdateName(CBPeripheral)\nTells the delegate that a peripheral’s name changed."
  },
  {
    "title": "peripheral(_:didOpen:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/2880152-peripheral",
    "html": "Discussion\n\nThis method delivers the result of a previous call to openL2CAPChannel(_:)."
  },
  {
    "title": "unlikelyError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325745-unlikelyerror",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "insufficientResources | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325734-insufficientresources",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification."
  },
  {
    "title": "unsupportedGroupType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2325741-unsupportedgrouptype",
    "html": "See Also\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/2946937",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "CBError.Code.connectionTimeout | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code/connectiontimeout",
    "html": "See Also\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "openL2CAPChannel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/2880151-openl2capchannel",
    "html": "Parameters\nPSM\n\nThe PSM of the channel to open.\n\nSee Also\nWorking with L2CAP Channels\nclass CBL2CAPChannel\nA live L2CAP connection to a remote device.\ntypealias CBL2CAPPSM\nThe type of PSM identifiers."
  },
  {
    "title": "canSendWriteWithoutResponse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/2891512-cansendwritewithoutresponse",
    "html": "Discussion\n\nIf this value is false, flushing all current writes sets the value to true. This also results in a call to the delegate’s peripheralIsReady(toSendWriteWithoutResponse:).\n\nSee Also\nMonitoring a Peripheral’s Connection State\nvar state: CBPeripheralState\nThe connection state of the peripheral.\nenum CBPeripheralState\nValues representing the connection state of a peripheral."
  },
  {
    "title": "ancsAuthorized | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/3180040-ancsauthorized",
    "html": "Discussion\n\nIf this value is false, a user authorization sets this value to true, which results in a call to the delegate’s centralManager(_:didUpdateANCSAuthorizationFor:) method."
  },
  {
    "title": "readRSSI() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1519111-readrssi",
    "html": "Discussion\n\nOn macOS, when you call this method to retrieve the Received Signal Strength Indicator (RSSI) of the peripheral while connected to the central manager, the peripheral calls the peripheralDidUpdateRSSI(_:error:) method of its delegate object. If retrieving the RSSI value of the peripheral succeeds, you can access it through the peripheral’s rssi property.\n\nOn iOS and tvOS, when you call this method to retrieve the RSSI of the peripheral while connected to the central manager, the peripheral calls the peripheral(_:didReadRSSI:error:) method of its delegate object, which includes the RSSI value as a parameter.\n\nSee Also\nAccessing a Peripheral’s Signal Strength\nvar rssi: NSNumber?\nThe Received Signal Strength Indicator (RSSI), in decibels, of the peripheral."
  },
  {
    "title": "peripheral(_:didDiscoverDescriptorsFor:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1518785-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\ncharacteristic\n\nThe characteristic to which the characteristic descriptors belong.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the discoverDescriptors(for:) method. If the peripheral successfully discovers the descriptors of the specified characteristic, you can access them through the characteristic’s descriptors property. If successful, the error parameter is nil. If unsuccessful, the error parameter returns the cause of the failure.\n\nSee Also\nDiscovering Characteristics and their Descriptors\nfunc peripheral(CBPeripheral, didDiscoverCharacteristicsFor: CBService, error: Error?)\nTells the delegate that the peripheral found characteristics for a service."
  },
  {
    "title": "rssi | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1518869-rssi",
    "html": "Deprecated\n\nOn iOS and tvOS, when you call the readRSSI() method, the system returns the RSSI as a parameter in a call to the delegate’s peripheral(_:didReadRSSI:error:) method. Use that value instead.\n\nDiscussion\n\nReturns a number, in decibels, that indicates the RSSI of the peripheral while connected to the central manager. You can use a connected peripheral’s RSSI property to determine the peripheral’s proximity. The default value of this property is nil; the first successful call to readRSSI() sets its value.\n\nSee Also\nAccessing a Peripheral’s Signal Strength\nfunc readRSSI()\nRetrieves the current RSSI value for the peripheral while connected to the central manager."
  },
  {
    "title": "peripheral(_:didDiscoverCharacteristicsFor:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1518821-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\nservice\n\nThe service to which the characteristics belong.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the discoverCharacteristics(_:for:) method. If the peripheral successfully discovers the characteristics of the specified service, you can access them through the service’s characteristics property. If successful, the error parameter is nil. If unsuccessful, the error parameter returns the cause of the failure.\n\nSee Also\nDiscovering Characteristics and their Descriptors\nfunc peripheral(CBPeripheral, didDiscoverDescriptorsFor: CBCharacteristic, error: Error?)\nTells the delegate that the peripheral found descriptors for a characteristic."
  },
  {
    "title": "peripheral(_:didUpdateValueFor:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1518929-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\ndescriptor\n\nThe characteristic descriptor containing the value.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the readValue(for:) method. If successful, the error parameter is nil. If unsuccessful, the error parameter returns the cause of the failure.\n\nSee Also\nRetrieving Characteristic and Descriptor Values\nfunc peripheral(CBPeripheral, didUpdateValueFor: CBCharacteristic, error: Error?)\nTells the delegate that retrieving the specified characteristic’s value succeeded, or that the characteristic’s value changed."
  },
  {
    "title": "CBUUIDCharacteristicFormatString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuidcharacteristicformatstring",
    "html": "Discussion\n\nThe corresponding value for this descriptor is an NSData object.\n\nSee Also\nCharacteristic Descriptors\nlet CBUUIDCharacteristicExtendedPropertiesString: String\nThe UUID for the Extended Properties descriptor, as a string.\nlet CBUUIDCharacteristicUserDescriptionString: String\nThe UUID for the User Description descriptor, as a string.\nlet CBUUIDClientCharacteristicConfigurationString: String\nThe UUID for the Client Configuration descriptor, as a string.\nlet CBUUIDServerCharacteristicConfigurationString: String\nThe UUID for the Server Configuration descriptor, as a string.\nlet CBUUIDCharacteristicAggregateFormatString: String\nThe UUID for the Aggregate Format descriptor, as a string.\nlet CBUUIDL2CAPPSMCharacteristicString: String\nThe PSM of an L2CAP channel associated with the GATT service containing this characteristic."
  },
  {
    "title": "CBUUIDCharacteristicUserDescriptionString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuidcharacteristicuserdescriptionstring",
    "html": "Discussion\n\nThe corresponding value for this descriptor is an NSString object.\n\nSee Also\nCharacteristic Descriptors\nlet CBUUIDCharacteristicExtendedPropertiesString: String\nThe UUID for the Extended Properties descriptor, as a string.\nlet CBUUIDClientCharacteristicConfigurationString: String\nThe UUID for the Client Configuration descriptor, as a string.\nlet CBUUIDServerCharacteristicConfigurationString: String\nThe UUID for the Server Configuration descriptor, as a string.\nlet CBUUIDCharacteristicFormatString: String\nThe UUID for the Presentation Format descriptor, as a string.\nlet CBUUIDCharacteristicAggregateFormatString: String\nThe UUID for the Aggregate Format descriptor, as a string.\nlet CBUUIDL2CAPPSMCharacteristicString: String\nThe PSM of an L2CAP channel associated with the GATT service containing this characteristic."
  },
  {
    "title": "CBCharacteristicWriteType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicwritetype",
    "html": "Overview\n\nCharacteristic write types have corresponding restrictions on the length of the data that you can write to a characteristic’s value. For the CBCharacteristicWriteType.withResponse write type’s restrictions, see the Bluetooth 4.0 specification, Volume 3, Part G, Sections 4.9.3–4. For the CBCharacteristicWriteType.withoutResponse write type restrictions, see the Bluetooth 4.0 specification, Volume 3, Part G, Sections 4.9.1–2.\n\nTip\n\nWhen you write with a response, you can write a characteristic value that’s longer than permitted when you write without a response.\n\nTopics\nWrite Types\ncase withResponse\nWrite a characteristic value, with a response from the peripheral to indicate whether the write was successful.\ncase withoutResponse\nWrite a characteristic value, without any response from the peripheral to indicate whether the write was successful.\nRelationships\nConforms To\nSendable\nSee Also\nWriting Characteristic and Descriptor Values\nfunc writeValue(Data, for: CBCharacteristic, type: CBCharacteristicWriteType)\nWrites the value of a characteristic.\nfunc writeValue(Data, for: CBDescriptor)\nWrites the value of a characteristic descriptor.\nfunc maximumWriteValueLength(for: CBCharacteristicWriteType) -> Int\nThe maximum amount of data, in bytes, you can send to a characteristic in a single write type."
  },
  {
    "title": "CBManagerState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanagerstate",
    "html": "Topics\nManager States\ncase poweredOff\nA state that indicates Bluetooth is currently powered off.\ncase poweredOn\nA state that indicates Bluetooth is currently powered on and available to use.\ncase resetting\nA state that indicates the connection with the system service was momentarily lost.\ncase unauthorized\nA state that indicates the application isn’t authorized to use the Bluetooth low energy role.\ncase unknown\nThe manager’s state is unknown.\ncase unsupported\nA state that indicates this device doesn’t support the Bluetooth low energy central or client role.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the Manager’s Properties\nvar state: CBManagerState\nThe current state of the manager."
  },
  {
    "title": "init(type:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutabledescriptor/1518999-init",
    "html": "Parameters\nUUID\n\nA 128-bit UUID that identifies the characteristic. You must use only one of the two currently supported descriptor types: CBUUIDCharacteristicUserDescriptionString or CBUUIDCharacteristicFormatString. For more details about these descriptor types, see CBUUID.\n\nvalue\n\nThe descriptor value to cache. You must provide a non-nil value. Once published, you can’t update the value dynamically.\n\nReturn Value\n\nA newly initialized mutable descriptor.\n\nDiscussion\n\nThe value type of value depends on the type of descriptor:\n\nThe value type of CBUUIDCharacteristicUserDescriptionString is a string you use to provide a human-readable description of the characteristic’s value.\n\nThe value type of a CBUUIDCharacteristicFormatString is an NSData object that you use to specify how to format the characteristic’s value for presentation purposes.\n\nIf you want to create a local characteristic format descriptor, the descriptor’s value must conform to the attribute value of the characteristic format descriptor as defined in the Bluetooth 4.0 specification, Volume 3, Part G, Section 3.3.3.5.\n\nSee Also\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "isBroadcasted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristic/1518920-isbroadcasted",
    "html": "Discussion\n\nDon’t use this deprecated property.\n\nSee Also\nAccessing Characteristic Data\nvar value: Data?\nThe value of the characteristic.\nvar descriptors: [CBDescriptor]?\nA list of the descriptors discovered in this characteristic.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nstruct CBCharacteristicProperties\nValues that represent the possible properties of a characteristic.\nvar isNotifying: Bool\nA Boolean value that indicates whether the characteristic is currently notifying a subscribed central of its value."
  },
  {
    "title": "CBCharacteristicProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties",
    "html": "Overview\n\nSince you can combine characteristic properties, a characteristic may have multiple property values set.\n\nTopics\nCreating a Characteristic Properties Instance\ninit(rawValue: UInt)\nCreates a characteristic properties instance from the given raw value.\nCharacteristic Properties\nstatic var broadcast: CBCharacteristicProperties\nA property that indicates the characteristic can broadcast its value using a characteristic configuration descriptor.\nstatic var read: CBCharacteristicProperties\nA property that indicates a peripheral can read the characteristic’s value.\nstatic var writeWithoutResponse: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, without a response to indicate that the write succeeded.\nstatic var write: CBCharacteristicProperties\nA property that indicates a peripheral can write the characteristic’s value, with a response to indicate that the write succeeded.\nstatic var notify: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, without a response from the central to indicate receipt of the notification.\nstatic var indicate: CBCharacteristicProperties\nA property that indicates the peripheral permits notifications of the characteristic’s value, with a response from the central to indicate receipt of the notification.\nstatic var authenticatedSignedWrites: CBCharacteristicProperties\nA property that indicates the perhipheral allows signed writes of the characteristic’s value, without a response to indicate the write succeeded.\nstatic var extendedProperties: CBCharacteristicProperties\nA property that indicates the characteristic defines additional properties in the extended properties descriptor.\nstatic var notifyEncryptionRequired: CBCharacteristicProperties\nA property that indicates that only trusted devices can enable notifications of the characteristic’s value.\nstatic var indicateEncryptionRequired: CBCharacteristicProperties\nA property that indicates only trusted devices can enable indications of the characteristic’s value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nAccessing Characteristic Data\nvar value: Data?\nThe value of the characteristic.\nvar descriptors: [CBDescriptor]?\nA list of the descriptors discovered in this characteristic.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nvar isNotifying: Bool\nA Boolean value that indicates whether the characteristic is currently notifying a subscribed central of its value.\nvar isBroadcasted: Bool\nA Boolean value that indicates whether the characteristic the service broadcasts this characteristic."
  },
  {
    "title": "properties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristic/1519010-properties",
    "html": "Discussion\n\nThe properties of a characteristic determine the access to and use of the characteristic’s value and descriptors. For a list of the possible values representing the properties of a characteristic, see CBCharacteristicProperties.\n\nSee Also\nAccessing Characteristic Data\nvar value: Data?\nThe value of the characteristic.\nvar descriptors: [CBDescriptor]?\nA list of the descriptors discovered in this characteristic.\nstruct CBCharacteristicProperties\nValues that represent the possible properties of a characteristic.\nvar isNotifying: Bool\nA Boolean value that indicates whether the characteristic is currently notifying a subscribed central of its value.\nvar isBroadcasted: Bool\nA Boolean value that indicates whether the characteristic the service broadcasts this characteristic."
  },
  {
    "title": "descriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristic/1518957-descriptors",
    "html": "Discussion\n\nThe value of this property is an array of CBDescriptor objects that represent a characteristic’s descriptors. Characteristic descriptors provide more information about a characteristic’s value. For example, they may describe the value in human-readable form and describe how to format the value for presentation purposes. For more information about characteristic descriptors, see CBDescriptor.\n\nSee Also\nAccessing Characteristic Data\nvar value: Data?\nThe value of the characteristic.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nstruct CBCharacteristicProperties\nValues that represent the possible properties of a characteristic.\nvar isNotifying: Bool\nA Boolean value that indicates whether the characteristic is currently notifying a subscribed central of its value.\nvar isBroadcasted: Bool\nA Boolean value that indicates whether the characteristic the service broadcasts this characteristic."
  },
  {
    "title": "value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristic/1518878-value",
    "html": "Discussion\n\nThis property contains the value of the characteristic. For example, a temperature measurement characteristic of a health thermometer service may have a value that indicates a temperature in Celsius.\n\nSee Also\nAccessing Characteristic Data\nvar descriptors: [CBDescriptor]?\nA list of the descriptors discovered in this characteristic.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nstruct CBCharacteristicProperties\nValues that represent the possible properties of a characteristic.\nvar isNotifying: Bool\nA Boolean value that indicates whether the characteristic is currently notifying a subscribed central of its value.\nvar isBroadcasted: Bool\nA Boolean value that indicates whether the characteristic the service broadcasts this characteristic."
  },
  {
    "title": "includedServices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutableservice/1434320-includedservices",
    "html": "Discussion\n\nA service of a peripheral may contain a reference to other services that are available on the peripheral. These other services are the included services of the service.\n\nSee Also\nManaging a Mutable Service\nvar characteristics: [CBCharacteristic]?\nA list of characteristics of a service."
  },
  {
    "title": "init(type:primary:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutableservice/1434330-init",
    "html": "Parameters\nUUID\n\nA 128-bit UUID that identifies the service.\n\nisPrimary\n\nA Boolean value that indicates whether the type of service is primary or secondary. If the value is true, the type of service is primary. If the value is false, the type of service is secondary.\n\nReturn Value\n\nA newly initialized mutable service.\n\nSee Also\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "characteristics | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutableservice/1434317-characteristics",
    "html": "Discussion\n\nAn array containing CBCharacteristic objects that represent a service’s characteristics. Characteristics provide further details about a peripheral’s service. For example, a heart rate service may contain one characteristic that describes the intended body location of the device’s heart rate sensor, while another characteristic transmits heart rate measurement data.\n\nSee Also\nManaging a Mutable Service\nvar includedServices: [CBService]?\nA list of included services."
  },
  {
    "title": "centralManager(_:didDiscover:advertisementData:rssi:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/1518937-centralmanager",
    "html": "Parameters\ncentral\n\nThe central manager that provides the update.\n\nperipheral\n\nThe discovered peripheral.\n\nadvertisementData\n\nA dictionary containing any advertisement data.\n\nRSSI\n\nThe current received signal strength indicator (RSSI) of the peripheral, in decibels.\n\nDiscussion\n\nYou can access the advertisement data with the keys listed in Advertisement Data Retrieval Keys. You must retain a local copy of the peripheral if you want to perform commands on it. Use the RSSI data to determine the proximity of a discoverable peripheral device, and whether you want to connect to it automatically.\n\nSee Also\nDiscovering and Retrieving Peripherals\nAdvertisement Data Retrieval Keys\nKeys used to specify items in a dictionary of peripheral advertisement data."
  },
  {
    "title": "connect(_:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1518766-connect",
    "html": "Parameters\nperipheral\n\nThe peripheral to which the central is attempting to connect.\n\noptions\n\nA dictionary to customize the behavior of the connection. For available options, see Peripheral Connection Options.\n\nDiscussion\n\nAfter successfully establishing a local connection to a peripheral, the central manager object calls the centralManager(_:didConnect:) method of its delegate object. If the connection attempt fails, the central manager object calls the centralManager(_:didFailToConnect:error:) method of its delegate object instead. Attempts to connect to a peripheral don’t time out. To explicitly cancel a pending connection to a peripheral, call the cancelPeripheralConnection(_:) method. Deallocating peripheral also implicitly calls cancelPeripheralConnection(_:).\n\nSee Also\nEstablishing or Canceling Connections with Peripherals\nPeripheral Connection Options\nKeys used to pass options when connecting to a peripheral.\nfunc cancelPeripheralConnection(CBPeripheral)\nCancels an active or pending local connection to a peripheral."
  },
  {
    "title": "scanForPeripherals(withServices:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/1518986-scanforperipherals",
    "html": "Parameters\nserviceUUIDs\n\nAn array of CBUUID objects that the app is interested in. Each CBUUID object represents the UUID of a service that a peripheral advertises.\n\noptions\n\nA dictionary of options for customizing the scan. For available options, see Peripheral Scanning Options.\n\nDiscussion\n\nYou can provide an array of CBUUID objects — representing service UUIDs — in the serviceUUIDs parameter. When you do, the central manager returns only peripherals that advertise the services you specify. If the serviceUUIDs parameter is nil, this method returns all discovered peripherals, regardless of their supported services.\n\nNote\n\nThe recommended practice is to populate the serviceUUIDs parameter rather than leaving it nil.\n\nIf the central manager is actively scanning with one set of parameters and it receives another set to scan, the new parameters override the previous set. When the central manager discovers a peripheral, it calls the centralManager(_:didDiscover:advertisementData:rssi:) method of its delegate object.\n\nYour app can scan for Bluetooth devices in the background by specifying the bluetooth-central background mode. To do this, your app must explicitly scan for one or more services by specifying them in the serviceUUIDs parameter. The CBCentralManager scan option has no effect while scanning in the background.\n\nSee Also\nScanning or Stopping Scans of Peripherals\nPeripheral Scanning Options\nKeys used to pass options when scanning for peripherals.\nfunc stopScan()\nAsks the central manager to stop scanning for peripherals.\nvar isScanning: Bool\nA Boolean value that indicates whether the central is currently scanning."
  },
  {
    "title": "CBPeripheralManagerConnectionLatency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerconnectionlatency",
    "html": "Topics\nLatency Values\ncase low\nA latency setting indicating that prioritizes rapid communication over battery life.\ncase medium\nA latency setting that balances communication frequency and battery life.\ncase high\nA latency setting that prioritizes extending battery life over rapid communication.\nRelationships\nConforms To\nSendable\nSee Also\nSetting Connection Latency\nfunc setDesiredConnectionLatency(CBPeripheralManagerConnectionLatency, for: CBCentral)\nSets the desired connection latency for an existing connection to a central device."
  },
  {
    "title": "characteristics | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbservice/1434319-characteristics",
    "html": "Discussion\n\nThis array contains CBCharacteristic objects that represent a service’s characteristics. Characteristics provide further details about a peripheral’s service. For example, a heart rate service may contain one characteristic that describes the intended body location of the device’s heart rate sensor, while another characteristic transmits heart rate measurement data.\n\nSee Also\nAccessing Service Data\nvar includedServices: [CBService]?\nA list of included services discovered in this service."
  },
  {
    "title": "publishL2CAPChannel(withEncryption:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/2880160-publishl2capchannel",
    "html": "Parameters\nencryptionRequired\n\ntrue if the service requires link encryption before a stream can be established. false if the service supports use over an unsecured link.\n\nDiscussion\n\nThe system determines an unused Protocol and Service Multiplexer (PSM) at the time of publishing, and provides it to your app with peripheralManager(_:didPublishL2CAPChannel:error:). L2CAP channels aren’t discoverable by themselves, so it’s the app’s responsibility to handle PSM discovery on the client.\n\nSee Also\nUsing L2CAP Channels\nfunc unpublishL2CAPChannel(CBL2CAPPSM)\nRemoves a published service from the local system."
  },
  {
    "title": "isPrimary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbservice/1434326-isprimary",
    "html": "Discussion\n\nA peripheral’s service is either primary or secondary. A primary service describes the primary function of a device. A secondary service describes a service that’s relevant only in the context of another service that references it. For example, the primary service of a heart rate monitor may be to expose heart rate data from the monitor’s heart rate sensor. In this example, a secondary service may be to expose the sensor’s battery data.\n\nIf the value of this property is true, the type of service is primary. If the value of this property is false, the type of service is secondary.\n\nSee Also\nIdentifying a Service\nvar peripheral: CBPeripheral?\nThe peripheral to which this service belongs."
  },
  {
    "title": "peripheral | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbservice/1434334-peripheral",
    "html": "See Also\nIdentifying a Service\nvar isPrimary: Bool\nA Boolean value that indicates whether the type of service is primary or secondary."
  },
  {
    "title": "writeEncryptionRequired | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattributepermissions/1518738-writeencryptionrequired",
    "html": "See Also\nPermissions\nstatic var readable: CBAttributePermissions\nA permission that indicates a peripheral can read the attribute’s value.\nstatic var writeable: CBAttributePermissions\nA permission that indicates a peripheral can write the attribute’s value.\nstatic var readEncryptionRequired: CBAttributePermissions\nA permission that indicates only trusted devices can read the attribute’s value."
  },
  {
    "title": "writeable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattributepermissions/1519119-writeable",
    "html": "See Also\nPermissions\nstatic var readable: CBAttributePermissions\nA permission that indicates a peripheral can read the attribute’s value.\nstatic var readEncryptionRequired: CBAttributePermissions\nA permission that indicates only trusted devices can read the attribute’s value.\nstatic var writeEncryptionRequired: CBAttributePermissions\nA permission that indicates only trusted devices can write the attribute’s value."
  },
  {
    "title": "setDesiredConnectionLatency(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393277-setdesiredconnectionlatency",
    "html": "Parameters\nlatency\n\nThe desired connection latency. For a list of the possible connection latency values that you may set for the peripheral manager, see CBPeripheralManagerConnectionLatency.\n\ncentral\n\nThe central to which the peripheral manager is currently connected.\n\nDiscussion\n\nThe latency of a peripheral-central connection controls how frequently the peripheral and the peripheral’s connected central can exchange messages. By setting a desired connection latency, you manage the relationship between the frequency of the data exchange and the resulting battery performance of the peripheral device. When you call this method to set the connection latency, note that connection latency changes aren’t guaranteed. As a result, the latency may vary. If you don’t explicitly set a latency, the central device uses the connection latency it chose when establishing the connection. Typically, you don’t need to change the connection latency.\n\nSee Also\nSetting Connection Latency\nenum CBPeripheralManagerConnectionLatency\nValues representing the connection latency of the peripheral manager."
  },
  {
    "title": "respond(to:withResult:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393293-respond",
    "html": "Parameters\nrequest\n\nThe read or write request received from the connected central. For more information about read and write requests, see CBATTRequest.\n\nresult\n\nThe result of attempting to fulfill the request. For a list of possible results, see Deprecated Constants.\n\nDiscussion\n\nWhen the peripheral manager receives a request from a connected central to read or write a characteristic’s value, it calls the peripheralManager(_:didReceiveRead:) or peripheralManager(_:didReceiveWrite:) method of its delegate object. To respond to the corresponding read or write request, you call this method whenever you recevie one of these delegate method callbacks."
  },
  {
    "title": "updateValue(_:for:onSubscribedCentrals:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393281-updatevalue",
    "html": "Parameters\nvalue\n\nThe characteristic value you want to send via a notification or indication.\n\ncharacteristic\n\nThe characteristic whose value has changed.\n\ncentrals\n\nA list of centrals (represented by CBCentral objects) that have subscribed to receive updates of the characteristic’s value. If nil, the manager updates all subscribed centrals. The manager ignores any centrals that haven’t subscribed to the characteristic’s value.\n\nReturn Value\n\nThis value is true if the update is successfully sent to the subscribed central or centrals. false if the update isn’t successfully sent because the underlying transmit queue is full.\n\nDiscussion\n\nYou use this method to send updates of a characteristic’s value—through a notification or indication—to selected centrals that have subscribed to that characteristic’s value. If the method returns false because the underlying transmit queue is full, the peripheral manager calls the peripheralManagerIsReady(toUpdateSubscribers:) method of its delegate object when more space in the transmit queue becomes available. After you receive this delegate method callback, you may resend the update.\n\nIf the length of the value parameter exceeds the length of the maximumUpdateValueLength property of a subscribed CBCentral, the value parameter truncates accordingly."
  },
  {
    "title": "Advertising Data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/advertising_data",
    "html": "Topics\nAdvertising Keys\nlet CBAdvertisementDataIsConnectable: String\nA Boolean value that indicates whether the advertising event type is connectable.\nlet CBAdvertisementDataLocalNameKey: String\nThe local name of a peripheral.\nlet CBAdvertisementDataManufacturerDataKey: String\nThe manufacturer data of a peripheral.\nlet CBAdvertisementDataOverflowServiceUUIDsKey: String\nAn array of UUIDs found in the overflow area of the advertisement data.\nlet CBAdvertisementDataServiceDataKey: String\nA dictionary that contains service-specific advertisement data.\nlet CBAdvertisementDataServiceUUIDsKey: String\nAn array of service UUIDs.\nlet CBAdvertisementDataSolicitedServiceUUIDsKey: String\nAn array of solicited service UUIDs.\nlet CBAdvertisementDataTxPowerLevelKey: String\nThe transmit power of a peripheral.\nSee Also\nManaging Advertising\nfunc startAdvertising([String : Any]?)\nAdvertises peripheral manager data.\nfunc stopAdvertising()\nStops advertising peripheral manager data.\nvar isAdvertising: Bool\nA Boolean value that indicates whether the peripheral is advertising data."
  },
  {
    "title": "startAdvertising(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393252-startadvertising",
    "html": "Parameters\nadvertisementData\n\nAn optional dictionary containing the data you want to advertise. The peripheral manager only supports two keys: CBAdvertisementDataLocalNameKey and CBAdvertisementDataServiceUUIDsKey.\n\nDiscussion\n\nWhen you start advertising peripheral data, the peripheral manager calls the peripheralManagerDidStartAdvertising(_:error:) method of its delegate object.\n\nCore Bluetooth advertises data on a “best effort” basis, due to limited space and because there may be multiple apps advertising simultaneously. While in the foreground, your app can use up to 28 bytes of space in the initial advertisement data for any combination of the supported advertising data keys. If no this space remains, there’s an additional 10 bytes of space in the scan response, usable only for the local name (represented by the value of the CBAdvertisementDataLocalNameKey key). Note that these sizes don’t include the 2 bytes of header information required for each new data type.\n\nAny service UUIDs contained in the value of the CBAdvertisementDataServiceUUIDsKey key that don’t fit in the allotted space go to a special “overflow” area. These services are discoverable only by an iOS device explicitly scanning for them.\n\nWhile your app is in the background, the local name isn’t advertised and all service UUIDs are in the overflow area.\n\nFor details about the format of advertising and response data, see the Bluetooth 4.0 specification, Volume 3, Part C, Section 11.\n\nSee Also\nManaging Advertising\nAdvertising Data\nfunc stopAdvertising()\nStops advertising peripheral manager data.\nvar isAdvertising: Bool\nA Boolean value that indicates whether the peripheral is advertising data.\nRelated Documentation\nlet CBAdvertisementDataOverflowServiceUUIDsKey: String\nAn array of UUIDs found in the overflow area of the advertisement data."
  },
  {
    "title": "remove(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393287-remove",
    "html": "Parameters\nservice\n\nThe service you want to remove.\n\nDiscussion\n\nBecause apps on the local peripheral device share the GATT database, more than one instance of a service may exist in the database. As a result, this method removes only the instance of the service that your app added to the database (using the add(_:) method). If any other services contains this service, you must first remove them.\n\nSee Also\nAdding and Removing Services\nfunc add(CBMutableService)\nPublishes a service and any of its associated characteristics and characteristic descriptors to the local GATT database.\nfunc removeAllServices()\nRemoves all published services from the local GATT database."
  },
  {
    "title": "connectionLimitReached | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2335070-connectionlimitreached",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "connectionFailed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2335069-connectionfailed",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "operationNotSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/2963175-operationnotsupported",
    "html": "See Also\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated"
  },
  {
    "title": "CBPeripheralManagerAuthorizationStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerauthorizationstatus",
    "html": "Topics\nConstants\ncase notDetermined\nAn authorization status that indicates the user hasn’t indicated whether this app can share data using Bluetooth while in the background.\ncase restricted\nAn authorization status that indicates this app isn’t authorized to share data using Bluetooth while in the background.\ncase denied\nAn authorization status that indicates the user explicitly denied this app from sharing data using Bluetooth while in the background.\ncase authorized\nAn authorization status that indicates the user authorized this app to share data using Bluetooth while in the background.\nRelationships\nConforms To\nSendable\nSee Also\nMonitoring the State of a Peripheral Manager\nclass func authorizationStatus() -> CBPeripheralManagerAuthorizationStatus\nReturns the app’s authorization status for sharing data while in the background.\nDeprecated\nenum CBPeripheralManagerState\nValues that represent the current state of the peripheral manager.\nDeprecated"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1648153-init",
    "html": "See Also\nInitializing a Peripheral Manager\ninit(delegate: CBPeripheralManagerDelegate?, queue: dispatch_queue_t?)\nInitializes the peripheral manager with a specified delegate and dispatch queue.\ninit(delegate: CBPeripheralManagerDelegate?, queue: dispatch_queue_t?, options: [String : Any]?)\nInitializes the peripheral manager with a specified delegate, dispatch queue, and initialization options.\nvar delegate: CBPeripheralManagerDelegate?\nThe delegate object specified to receive peripheral events.\nPeripheral Manager Initialization Options\nKeys used to specify options when creating a peripheral manager."
  },
  {
    "title": "Characteristic Descriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuid/characteristic_descriptors",
    "html": "Overview\n\nUse these UUIDs to add well-known descriptors to characteristics you create, or to find specific descriptors from characteristics of remote services.\n\nTopics\nCharacteristic Descriptors\nlet CBUUIDCharacteristicExtendedPropertiesString: String\nThe UUID for the Extended Properties descriptor, as a string.\nlet CBUUIDCharacteristicUserDescriptionString: String\nThe UUID for the User Description descriptor, as a string.\nlet CBUUIDClientCharacteristicConfigurationString: String\nThe UUID for the Client Configuration descriptor, as a string.\nlet CBUUIDServerCharacteristicConfigurationString: String\nThe UUID for the Server Configuration descriptor, as a string.\nlet CBUUIDCharacteristicFormatString: String\nThe UUID for the Presentation Format descriptor, as a string.\nlet CBUUIDCharacteristicAggregateFormatString: String\nThe UUID for the Aggregate Format descriptor, as a string.\nlet CBUUIDL2CAPPSMCharacteristicString: String\nThe PSM of an L2CAP channel associated with the GATT service containing this characteristic."
  },
  {
    "title": "peripheralManager(_:didOpen:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/2880154-peripheralmanager",
    "html": "Parameters\nperipheral\n\nThe peripheral manager that opened the channel.\n\nchannel\n\nThe channel opened by the manager.\n\nerror\n\nThe error that occurred, or nil if no error occurred.\n\nDiscussion\n\nThe peripheral manager calls this method after you call publishL2CAPChannel(withEncryption:).\n\nSee Also\nUsing L2CAP Channels\nfunc peripheralManager(CBPeripheralManager, didPublishL2CAPChannel: CBL2CAPPSM, error: Error?)\nTells the delegate that the peripheral manager created a listener for incoming L2CAP channel connections.\nfunc peripheralManager(CBPeripheralManager, didUnpublishL2CAPChannel: CBL2CAPPSM, error: Error?)\nTells the delegate that the peripheral manager removed a published service from the local system."
  },
  {
    "title": "peripheralManager(_:didUnpublishL2CAPChannel:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/2880155-peripheralmanager",
    "html": "Parameters\nperipheral\n\nThe peripheral manager that stopped publishing.\n\nPSM\n\nThe Protocol/Service Multiplexer (PSM) of the channel that was unpublished.\n\nerror\n\nThe error that occurred, or nil if no error occurred.\n\nDiscussion\n\nThe peripheral manager calls this method after you call unpublishL2CAPChannel(_:).\n\nSee Also\nUsing L2CAP Channels\nfunc peripheralManager(CBPeripheralManager, didPublishL2CAPChannel: CBL2CAPPSM, error: Error?)\nTells the delegate that the peripheral manager created a listener for incoming L2CAP channel connections.\nfunc peripheralManager(CBPeripheralManager, didOpen: CBL2CAPChannel?, error: Error?)\nTells the delegate that the peripheral manager opened an L2CAP channel."
  },
  {
    "title": "peripheralManager(_:didPublishL2CAPChannel:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/2880153-peripheralmanager",
    "html": "Parameters\nperipheral\n\nThe peripheral manager that published the channel.\n\nPSM\n\nThe Protocol/Service Multiplexer (PSM) of the published channel.\n\nerror\n\nThe error that prevented publishing, or nil if no error occurred.\n\nDiscussion\n\nThe peripheral manager calls this method after you call publishL2CAPChannel(withEncryption:). The PSM parameter contains the PSM assigned for the published channel.\n\nSee Also\nUsing L2CAP Channels\nfunc peripheralManager(CBPeripheralManager, didUnpublishL2CAPChannel: CBL2CAPPSM, error: Error?)\nTells the delegate that the peripheral manager removed a published service from the local system.\nfunc peripheralManager(CBPeripheralManager, didOpen: CBL2CAPChannel?, error: Error?)\nTells the delegate that the peripheral manager opened an L2CAP channel."
  },
  {
    "title": "peripheralManager(_:didReceiveWrite:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/1393315-peripheralmanager",
    "html": "Parameters\nperipheral\n\nThe peripheral manager that received the request.\n\nrequests\n\nA list of one or more CBATTRequest objects, each representing a request to write the value of a characteristic.\n\nDiscussion\n\nIn the same way that you respond to a read request, each time you receive this callback, call the respond(to:withResult:) method of the CBPeripheralManager class exactly once. If the requests parameter contains multiple requests, treat them as you would a single request—if you can’t fulfill an individual request, you shouldn’t fulfill any of them. Instead, call the respond(to:withResult:) method immediately, and provide a result that indicates the cause of the failure.\n\nWhen you respond to a write request, note that the first parameter of the respond(to:withResult:) method expects a single CBATTRequest object, even though you received an array of them from the peripheralManager(_:didReceiveWrite:) method. To respond properly, pass in the first request of the requests array.\n\nSee Also\nReceiving Read and Write Requests\nfunc peripheralManager(CBPeripheralManager, didReceiveRead: CBATTRequest)\nTells the delegate that a local peripheral received an Attribute Protocol (ATT) read request for a characteristic with a dynamic value."
  },
  {
    "title": "peripheralManager(_:willRestoreState:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate/1393317-peripheralmanager",
    "html": "Parameters\nperipheral\n\nThe peripheral manager undergoing state restoration.\n\ndict\n\nA dictionary that contains information about the peripheral manager, which the system preserved when the app terminated. For the available keys to this dictionary, see Peripheral Manager State Restoration Options.\n\nDiscussion\n\nFor apps that opt in to the state preservation and restoration feature, Core Bluetooth invokes this method when relaunching your app into the background to complete some Bluetooth-related task. Use this method to synchronize the state of your app with the state of the Bluetooth system.\n\nSee Also\nMonitoring Changes to the Peripheral Manager’s State\nfunc peripheralManagerDidUpdateState(CBPeripheralManager)\nTells the delegate the peripheral manager’s state updated.\n\nRequired\n\nPeripheral Manager State Restoration Options\nKeys used to specify options when restoring the state of a peripheral manager."
  },
  {
    "title": "peripheral(_:didWriteValueFor:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1518823-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\ncharacteristic\n\nThe characteristic containing the value.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method only when your app calls the writeValue(_:for:type:) method with the CBCharacteristicWriteType.withResponse constant specified as the write type. If successful, the error parameter is nil. If unsuccessful, the error parameter returns the cause of the failure.\n\nSee Also\nWriting Characteristic and Descriptor Values\nfunc peripheral(CBPeripheral, didWriteValueFor: CBDescriptor, error: Error?)\nTells the delegate that the peripheral successfully set a value for the descriptor.\nfunc peripheralIsReady(toSendWriteWithoutResponse: CBPeripheral)\nTells the delegate that a peripheral is again ready to send characteristic updates."
  },
  {
    "title": "peripheralDidUpdateRSSI(_:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1519083-peripheraldidupdaterssi",
    "html": "Deprecated\n\nin iOS and tvOS, use the peripheral(_:didReadRSSI:error:) method instead.\n\nParameters\nperipheral\n\nThe peripheral providing this information.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the readRSSI() method, while the peripheral is connected to the central manager. If successful, the error parameter is nil. If unsuccessful, the error parameter returns the cause of the failure.\n\nSee Also\nRetrieving a Peripheral’s RSSI Data\nfunc peripheral(CBPeripheral, didReadRSSI: NSNumber, error: Error?)\nTells the delegate that retrieving the value of the peripheral’s current Received Signal Strength Indicator (RSSI) succeeded."
  },
  {
    "title": "peripheral(_:didReadRSSI:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1620304-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\nRSSI\n\nThe RSSI, in decibels, of the peripheral.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the readRSSI() method, while the peripheral is connected to the central manager. If successful, the error parameter is nil and the parameter RSSI reports the peripheral’s signal strength, in decibels. If unsuccessful, the error parameter returns the cause of the failure.\n\nSee Also\nRetrieving a Peripheral’s RSSI Data\nfunc peripheralDidUpdateRSSI(CBPeripheral, error: Error?)\nTells the delegate that retrieving the value of the peripheral’s current Received Signal Strength Indicator (RSSI) succeeded."
  },
  {
    "title": "peripheral(_:didUpdateNotificationStateFor:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1518768-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\ncharacteristic\n\nThe characteristic for which to configure value notifications.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the setNotifyValue(_:for:) method. If successful, the error parameter is nil. If unsuccessful, the error parameter returns the cause of the failure."
  },
  {
    "title": "peripheralIsReady(toSendWriteWithoutResponse:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/2874034-peripheralisready",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this update.\n\nDiscussion\n\nThe peripheral calls this delegate method after a failed call to writeValue(_:for:type:), once peripheral is ready to send characteristic value updates.\n\nSee Also\nWriting Characteristic and Descriptor Values\nfunc peripheral(CBPeripheral, didWriteValueFor: CBCharacteristic, error: Error?)\nTells the delegate that the peripheral successfully set a value for the characteristic.\nfunc peripheral(CBPeripheral, didWriteValueFor: CBDescriptor, error: Error?)\nTells the delegate that the peripheral successfully set a value for the descriptor."
  },
  {
    "title": "peripheral(_:didWriteValueFor:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1519062-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\ndescriptor\n\nThe characteristic descriptor containing the value.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the writeValue(_:for:) method. If successful, the error parameter is nil. If unsuccessful, the error parameter returns the cause of the failure.\n\nSee Also\nWriting Characteristic and Descriptor Values\nfunc peripheral(CBPeripheral, didWriteValueFor: CBCharacteristic, error: Error?)\nTells the delegate that the peripheral successfully set a value for the characteristic.\nfunc peripheralIsReady(toSendWriteWithoutResponse: CBPeripheral)\nTells the delegate that a peripheral is again ready to send characteristic updates."
  },
  {
    "title": "peripheral(_:didUpdateValueFor:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1518708-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\ncharacteristic\n\nThe characteristic containing the value.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the readValue(for:) method. A peripheral also invokes this method to notify your app of a change to the value of the characteristic for which the app previously enabled notifications by calling setNotifyValue(_:for:). If successful, the error parameter is nil. If unsuccessful, the error parameter returns the cause of the failure.\n\nSee Also\nRetrieving Characteristic and Descriptor Values\nfunc peripheral(CBPeripheral, didUpdateValueFor: CBDescriptor, error: Error?)\nTells the delegate that retrieving a specified characteristic descriptor’s value succeeded."
  },
  {
    "title": "peripheral(_:didDiscoverIncludedServicesFor:error:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1519124-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral providing this information.\n\nservice\n\nThe CBService object containing the included service.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the discoverIncludedServices(_:for:) method. If the peripheral successfully discovers services, you can access them through the service’s includedServices property. If successful, the error parameter is nil. If unsuccessful, the error parameter returns the cause of the failure.\n\nSee Also\nDiscovering Services\nfunc peripheral(CBPeripheral, didDiscoverServices: Error?)\nTells the delegate that peripheral service discovery succeeded."
  },
  {
    "title": "peripheral(_:didDiscoverServices:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate/1518744-peripheral",
    "html": "Parameters\nperipheral\n\nThe peripheral to which the services belong.\n\nerror\n\nThe reason the call failed, or nil if no error occurred.\n\nDiscussion\n\nCore Bluetooth invokes this method when your app calls the discoverServices(_:) method. If the peripheral successfully discovers services, you can access them through the peripheral’s services property. If successful, the error parameter is nil. If unsuccessful, the error parameter returns the cause of the failure.\n\nSee Also\nDiscovering Services\nfunc peripheral(CBPeripheral, didDiscoverIncludedServicesFor: CBService, error: Error?)\nTells the delegate that discovering included services within the indicated service completed.\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "CBL2CAPPSM | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbl2cappsm",
    "html": "See Also\nWorking with L2CAP Channels\nfunc openL2CAPChannel(CBL2CAPPSM)\nAttempts to open an L2CAP channel to the peripheral using the supplied Protocol/Service Multiplexer (PSM).\nclass CBL2CAPChannel\nA live L2CAP connection to a remote device."
  },
  {
    "title": "CBL2CAPChannel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbl2capchannel",
    "html": "Topics\nAccessing Streams\nvar inputStream: InputStream!\nThe stream used for reading data from the remote peer.\nvar outputStream: OutputStream!\nThe stream used for writing data to the peer.\nAccessing the Peer\nvar peer: CBPeer!\nThe peer connected to the channel.\nAccessing the Protocol/Service Multiplexer\nvar psm: CBL2CAPPSM\nThe PSM of the channel.\nRelationships\nInherits From\nNSObject\nSee Also\nWorking with L2CAP Channels\nfunc openL2CAPChannel(CBL2CAPPSM)\nAttempts to open an L2CAP channel to the peripheral using the supplied Protocol/Service Multiplexer (PSM).\ntypealias CBL2CAPPSM\nThe type of PSM identifiers."
  },
  {
    "title": "CBPeripheralState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralstate",
    "html": "Topics\nPeripheral States\ncase disconnected\nThe peripheral isn’t connected to the central manager.\ncase connecting\nThe peripheral is in the process of connecting to the central manager.\ncase connected\nThe peripheral is connected to the central manager.\ncase disconnecting\nThe peripheral is disconnecting from the central manager.\nRelationships\nConforms To\nSendable\nSee Also\nMonitoring a Peripheral’s Connection State\nvar state: CBPeripheralState\nThe connection state of the peripheral.\nvar canSendWriteWithoutResponse: Bool\nA Boolean value that indicates whether the remote device can send a write without a response."
  },
  {
    "title": "setNotifyValue(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1518949-setnotifyvalue",
    "html": "Parameters\nenabled\n\nA Boolean value that indicates whether to receive notifications or indications whenever the characteristic’s value changes. true if you want to enable notifications or indications for the characteristic’s value. false if you don’t want to receive notifications or indications whenever the characteristic’s value changes.\n\ncharacteristic\n\nThe specified characteristic.\n\nDiscussion\n\nWhen you enable notifications for the characteristic’s value, the peripheral calls the peripheral(_:didUpdateNotificationStateFor:error:) method of its delegate object to indicate if the action succeeded. If successful, the peripheral then calls the peripheral(_:didUpdateValueFor:error:) method of its delegate object whenever the characteristic value changes. Because the peripheral chooses when it sends an update, your app should prepare to handle them as long as notifications or indications remain enabled. If the specified characteristic’s configuration allows both notifications and indications, calling this method enables notifications only. You can disable notifications and indications for a characteristic’s value by calling this method with the enabled parameter set to false.\n\nSee Also\nRelated Documentation\nlet CBConnectPeripheralOptionNotifyOnNotificationKey: String\nA Boolean value that specifies whether the system should display an alert for any notification sent by a peripheral."
  },
  {
    "title": "writeValue(_:for:type:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1518747-writevalue",
    "html": "Parameters\ndata\n\nThe value to write.\n\ncharacteristic\n\nThe characteristic containing the value to write.\n\ntype\n\nThe type of write to execute. For a list of the possible types of writes to a characteristic’s value, see CBCharacteristicWriteType.\n\nDiscussion\n\nWhen you call this method to write the value of a characteristic, the peripheral calls the peripheral(_:didWriteValueFor:error:) method of its delegate object only if you specified the write type as CBCharacteristicWriteType.withResponse. The response you receive through the peripheral(_:didWriteValueFor:error:) delegate method indicates whether the write was successful; if the write failed, it details the cause of the failure in an error.\n\nOn the other hand, if you specify the write type as CBCharacteristicWriteType.withoutResponse, Core Bluetooth attempts to write the value but doesn’t guarantee success. If the write doesn’t succeed in this case, you aren’t notified and you don’t receive an error indicating the cause of the failure.\n\nUse the write and writeWithoutResponse members of the characteristic’s properties enumeration to determine which kinds of writes you can perform.\n\nThis method copies the data passed into the data parameter, and you can dispose of it after the method returns.\n\nSee Also\nWriting Characteristic and Descriptor Values\nfunc writeValue(Data, for: CBDescriptor)\nWrites the value of a characteristic descriptor.\nfunc maximumWriteValueLength(for: CBCharacteristicWriteType) -> Int\nThe maximum amount of data, in bytes, you can send to a characteristic in a single write type.\nenum CBCharacteristicWriteType\nValues representing the possible write types to a characteristic’s value."
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1519113-state",
    "html": "Discussion\n\nThis property represents the current connection state of the peripheral. For a list of the possible values, see CBPeripheralState.\n\nSee Also\nMonitoring a Peripheral’s Connection State\nenum CBPeripheralState\nValues representing the connection state of a peripheral.\nvar canSendWriteWithoutResponse: Bool\nA Boolean value that indicates whether the remote device can send a write without a response."
  },
  {
    "title": "readValue(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1518789-readvalue",
    "html": "Parameters\ndescriptor\n\nThe characteristic descriptor whose value you want to read.\n\nDiscussion\n\nWhen you call this method to read the value of a characteristic descriptor, the peripheral calls the peripheral(_:didUpdateValueFor:error:) method of its delegate object. If the peripheral successfully retrieves the value of the characteristic descriptor, you can access it through the characteristic descriptor’s value property.\n\nSee Also\nReading Characteristic and Descriptor Values\nfunc readValue(for: CBCharacteristic)\nRetrieves the value of a specified characteristic."
  },
  {
    "title": "maximumWriteValueLength(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1620312-maximumwritevaluelength",
    "html": "Parameters\ntype\n\nThe characteristic write type to inspect.\n\nSee Also\nWriting Characteristic and Descriptor Values\nfunc writeValue(Data, for: CBCharacteristic, type: CBCharacteristicWriteType)\nWrites the value of a characteristic.\nfunc writeValue(Data, for: CBDescriptor)\nWrites the value of a characteristic descriptor.\nenum CBCharacteristicWriteType\nValues representing the possible write types to a characteristic’s value."
  },
  {
    "title": "writeValue(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1519107-writevalue",
    "html": "Parameters\ndata\n\nThe value to write.\n\ndescriptor\n\nThe descriptor containing the value to write.\n\nDiscussion\n\nWhen you call this method to write the value of a characteristic descriptor, the peripheral calls the peripheral(_:didWriteValueFor:error:) method of its delegate object.\n\nThis method copies the data passed into the data parameter, and you can dispose of it after the method returns.\n\nYou can’t use this method to write the value of a client configuration descriptor (represented by the CBUUIDClientCharacteristicConfigurationString constant), which describes the configuration of notification or indications for a characteristic’s value. If you want to manage notifications or indications for a characteristic’s value, you must use the setNotifyValue(_:for:) method instead.\n\nSee Also\nWriting Characteristic and Descriptor Values\nfunc writeValue(Data, for: CBCharacteristic, type: CBCharacteristicWriteType)\nWrites the value of a characteristic.\nfunc maximumWriteValueLength(for: CBCharacteristicWriteType) -> Int\nThe maximum amount of data, in bytes, you can send to a characteristic in a single write type.\nenum CBCharacteristicWriteType\nValues representing the possible write types to a characteristic’s value."
  },
  {
    "title": "readValue(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1518759-readvalue",
    "html": "Parameters\ncharacteristic\n\nThe characteristic whose value you want to read.\n\nDiscussion\n\nWhen you call this method to read the value of a characteristic, the peripheral calls the peripheral(_:didUpdateValueFor:error:) method of its delegate object. If the peripheral successfully reads the value of the characteristic, you can access it through the characteristic’s value property.\n\nNot all characteristics have a readable value. You can determine whether a characteristic’s value is readable by accessing the relevant properties of the CBCharacteristicProperties enumeration.\n\nSee Also\nReading Characteristic and Descriptor Values\nfunc readValue(for: CBDescriptor)\nRetrieves the value of a specified characteristic descriptor."
  },
  {
    "title": "discoverDescriptors(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1519070-discoverdescriptors",
    "html": "Parameters\ncharacteristic\n\nThe characteristic whose descriptors you want to discover.\n\nDiscussion\n\nWhen the peripheral discovers one or more descriptors of the specified characteristic, it calls the peripheral(_:didDiscoverDescriptorsFor:error:) method of its delegate object. After the peripheral discovers the descriptors of the characteristic, you can access them through the characteristic’s descriptors property.\n\nSee Also\nDiscovering Characteristics and Descriptors\nfunc discoverCharacteristics([CBUUID]?, for: CBService)\nDiscovers the specified characteristics of a service."
  },
  {
    "title": "discoverCharacteristics(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1518797-discovercharacteristics",
    "html": "Parameters\ncharacteristicUUIDs\n\nAn array of CBUUID objects that you are interested in. Each CBUUID object represents a UUID that identifies the type of a characteristic you want to discover.\n\nservice\n\nThe service whose characteristics you want to discover.\n\nDiscussion\n\nYou can provide an array of CBUUID objects—representing characteristic UUIDs— in the characteristicUUIDs parameter. When you do, the peripheral returns only the characteristics of the service that match the provided UUIDs. If the characteristicUUIDs parameter is nil, this method returns all characteristics of the service.\n\nNote\n\nIf the characteristicUUIDs parameter is nil, this method returns all of the service’s characteristics. This is much slower than providing an array of characteristic UUIDs to search for.\n\nWhen the peripheral discovers one or more characteristics of the specified service, it calls the peripheral(_:didDiscoverCharacteristicsFor:error:) method of its delegate object. After the peripheral discovers the service’s characteristics, you can access them through the service’s characteristics property.\n\nSee Also\nDiscovering Characteristics and Descriptors\nfunc discoverDescriptors(for: CBCharacteristic)\nDiscovers the descriptors of a characteristic."
  },
  {
    "title": "services | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1518978-services",
    "html": "Discussion\n\nReturns an array of services (represented by CBService objects) that successful call to the discoverServices(_:) method discovered. If you haven’t yet called the discoverServices(_:) method to discover the services of the peripheral, or if there was an error in doing so, the value of this property is nil.\n\nSee Also\nDiscovering Services\nfunc discoverServices([CBUUID]?)\nDiscovers the specified services of the peripheral.\nfunc discoverIncludedServices([CBUUID]?, for: CBService)\nDiscovers the specified included services of a previously-discovered service."
  },
  {
    "title": "discoverIncludedServices(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1519014-discoverincludedservices",
    "html": "Parameters\nincludedServiceUUIDs\n\nAn array of CBUUID objects that you are interested in. Here, each CBUUID object represents a UUID that identifies the type of included service you want to discover.\n\nservice\n\nThe previously-discovered service whose included services you want to discover.\n\nDiscussion\n\nYou can provide an array of CBUUID objects—representing included service UUIDs—in the includedServiceUUIDs parameter. When you do, the peripheral returns only the services of the peripheral that match the provided UUIDs.\n\nNote\n\nIf the servicesUUIDs parameter is nil, this method returns all of the peripheral’s available services. This is much slower than providing an array of service UUIDs to search for.\n\nWhen the peripheral discovers one or more included services of the specified service, it calls the peripheral(_:didDiscoverIncludedServicesFor:error:) method of its delegate object. After the service discovers its included services, you can access them through the service’s includedServices property.\n\nSee Also\nDiscovering Services\nfunc discoverServices([CBUUID]?)\nDiscovers the specified services of the peripheral.\nvar services: [CBService]?\nA list of a peripheral’s discovered services."
  },
  {
    "title": "discoverServices(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1518706-discoverservices",
    "html": "Parameters\nserviceUUIDs\n\nAn array of CBUUID objects that you are interested in. Each CBUUID object represents a UUID that identifies the type of service you want to discover.\n\nDiscussion\n\nYou can provide an array of CBUUID objects—representing service UUIDs—in the serviceUUIDs parameter. When you do, the peripheral returns only the services of the peripheral that match the provided UUIDs.\n\nNote\n\nIf the servicesUUIDs parameter is nil, this method returns all of the peripheral’s available services. This is much slower than providing an array of service UUIDs to search for.\n\nWhen the peripheral discovers one or more services, it calls the peripheral(_:didDiscoverServices:): method of its delegate object. After a peripheral discovers services, you can access them through the peripheral’s services property.\n\nSee Also\nDiscovering Services\nfunc discoverIncludedServices([CBUUID]?, for: CBService)\nDiscovers the specified included services of a previously-discovered service.\nvar services: [CBService]?\nA list of a peripheral’s discovered services."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1519029-name",
    "html": "Discussion\n\nUse this property to retrieve a human-readable name of the peripheral. A peripheral may have two different name types: one that the device advertises and another that the device publishes in its database as its Bluetooth low energy Generic Access Profile (GAP) device name. If a peripheral has both types of names, this property returns its GAP device name.\n\nSee Also\nIdentifying a Peripheral\nvar delegate: CBPeripheralDelegate?\nThe delegate object specified to receive peripheral events.\nRelated Documentation\nfunc peripheralDidUpdateName(CBPeripheral)\nTells the delegate that a peripheral’s name changed."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral/1518730-delegate",
    "html": "Discussion\n\nFor information about how to implement your peripheral delegate, see CBPeripheralDelegate.\n\nSee Also\nIdentifying a Peripheral\nvar name: String?\nThe name of the peripheral."
  },
  {
    "title": "maximumUpdateValueLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentral/1408800-maximumupdatevaluelength",
    "html": "See Also\nRelated Documentation\nfunc updateValue(Data, for: CBMutableCharacteristic, onSubscribedCentrals: [CBCentral]?) -> Bool\nSend an updated characteristic value to one or more subscribed centrals, using a notification or indication."
  },
  {
    "title": "CBPeer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbpeer",
    "html": "Overview\n\nThe CBPeer class is an abstract base class that defines common behavior for objects representing remote devices. You typically don’t create instances of either CBPeer or its concrete subclasses. Instead, the system creates them for you during the process of peer discovery.\n\nYour app takes the role of either a central (by creating an instance of CBCentralManager) or a peripheral (by creating an instance of CBPeripheralManager), and interacts through the manager with remote devices in the opposite role. During the process of peer discovery, where a central device scans for peripherals advertising services, the system creates objects from the concrete subclasses of CBPeer to represent discovered remote devices. The concrete subclasses of CBPeer are CBPeripheral and CBCentral.\n\nTopics\nIdentifying a Peer\nvar identifier: UUID\nThe UUID associated with the peer.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nSupporting Types\nclass CBManager\nThe abstract base class that manages central and peripheral objects.\nclass CBATTRequest\nA request that uses the Attribute Protocol (ATT).\nclass CBUUID\nA universally unique identifier, as defined by Bluetooth standards."
  },
  {
    "title": "CBMutableCharacteristic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutablecharacteristic",
    "html": "Overview\n\nCBMutableCharacteristic objects represent the characteristics of a local peripheral’s service. This class adds write access to many of the properties in the CBCharacteristic class, which it inherits from.\n\nYou use this class to create a characteristic and to set its properties and permissions as desired. After you create and add a characteristic to a local service, you can publish it (and the service) to the peripheral’s local database with the add(_:) method of the CBPeripheralManager class. After you publish a characteristic, Core Bluetooth caches the characteristic and you can’t make changes to it.\n\nTopics\nCreating a Mutable Characteristic\ninit(type: CBUUID, properties: CBCharacteristicProperties, value: Data?, permissions: CBAttributePermissions)\nCreates a mutable characteristic with specified permissions, properties, and value.\nManaging a Mutable Characteristic\nvar value: Data?\nThe value of the characteristic.\nvar descriptors: [CBDescriptor]?\nAn array of the characteristic’s descriptors.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nvar permissions: CBAttributePermissions\nThe permissions of the characteristic value.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value.\nvar subscribedCentrals: [CBCentral]?\nA list of centrals that are currently subscribed to the characteristic’s value.\nRelationships\nInherits From\nCBCharacteristic\nSee Also\nServices\nclass CBService\nA collection of data and associated behaviors that accomplish a function or feature of a device.\nclass CBMutableService\nA service with writeable property values.\nclass CBCharacteristic\nA characteristic of a remote peripheral’s service.\nclass CBDescriptor\nAn object that provides further information about a remote peripheral’s characteristic.\nclass CBMutableDescriptor\nAn object that provides additional information about a local peripheral’s characteristic."
  },
  {
    "title": "unpublishL2CAPChannel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/2880158-unpublishl2capchannel",
    "html": "Parameters\nPSM\n\nThe Protocol and Service Multiplexer (PSM) to remove from the system.\n\nDiscussion\n\nAfter you make this call, the peripheral manager accepts no new connections for this PSM, and closes any existing L2CAP channels using this PSM.\n\nSee Also\nUsing L2CAP Channels\nfunc publishL2CAPChannel(withEncryption: Bool)\nCreates a listener for incoming L2CAP channel connections."
  },
  {
    "title": "readEncryptionRequired | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattributepermissions/1518779-readencryptionrequired",
    "html": "See Also\nPermissions\nstatic var readable: CBAttributePermissions\nA permission that indicates a peripheral can read the attribute’s value.\nstatic var writeable: CBAttributePermissions\nA permission that indicates a peripheral can write the attribute’s value.\nstatic var writeEncryptionRequired: CBAttributePermissions\nA permission that indicates only trusted devices can write the attribute’s value."
  },
  {
    "title": "readable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattributepermissions/1519075-readable",
    "html": "See Also\nPermissions\nstatic var writeable: CBAttributePermissions\nA permission that indicates a peripheral can write the attribute’s value.\nstatic var readEncryptionRequired: CBAttributePermissions\nA permission that indicates only trusted devices can read the attribute’s value.\nstatic var writeEncryptionRequired: CBAttributePermissions\nA permission that indicates only trusted devices can write the attribute’s value."
  },
  {
    "title": "removeAllServices() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393269-removeallservices",
    "html": "Discussion\n\nUse this when you want to remove all services you’ve previously published, for example, if your app has a toggle button to expose GATT services.\n\nBecause apps on the local peripheral device share the GATT database, this method removes only the services that you added using the add(_:) method. This call doesn’t remove any services published by other apps on the local peripheral device.\n\nSee Also\nAdding and Removing Services\nfunc add(CBMutableService)\nPublishes a service and any of its associated characteristics and characteristic descriptors to the local GATT database.\nfunc remove(CBMutableService)\nRemoves a specified published service from the local GATT database."
  },
  {
    "title": "init(delegate:queue:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393295-init",
    "html": "Parameters\ndelegate\n\nThe delegate to receive the peripheral role events.\n\nqueue\n\nThe dispatch queue for dispatching the peripheral role events. If the value is nil, the peripheral manager dispatches peripheral role events using the main queue.\n\noptions\n\nAn optional dictionary containing initialization options for a peripheral manager. For available options, see Peripheral Manager Initialization Options.\n\nReturn Value\n\nReturns a newly initialized peripheral manager.\n\nDiscussion\n\nThis method is the designated initializer for the CBPeripheralManager class.\n\nSee Also\nInitializing a Peripheral Manager\ninit()\nInitializes the peripheral manager without a delegate.\ninit(delegate: CBPeripheralManagerDelegate?, queue: dispatch_queue_t?)\nInitializes the peripheral manager with a specified delegate and dispatch queue.\nvar delegate: CBPeripheralManagerDelegate?\nThe delegate object specified to receive peripheral events.\nPeripheral Manager Initialization Options\nKeys used to specify options when creating a peripheral manager."
  },
  {
    "title": "init(delegate:queue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393299-init",
    "html": "Parameters\ndelegate\n\nThe delegate to receive the peripheral role events.\n\nqueue\n\nThe dispatch queue for dispatching the peripheral role events. If the value is nil, the peripheral manager dispatches peripheral role events using the main queue.\n\nReturn Value\n\nReturns a newly initialized peripheral manager.\n\nSee Also\nInitializing a Peripheral Manager\ninit()\nInitializes the peripheral manager without a delegate.\ninit(delegate: CBPeripheralManagerDelegate?, queue: dispatch_queue_t?, options: [String : Any]?)\nInitializes the peripheral manager with a specified delegate, dispatch queue, and initialization options.\nvar delegate: CBPeripheralManagerDelegate?\nThe delegate object specified to receive peripheral events.\nPeripheral Manager Initialization Options\nKeys used to specify options when creating a peripheral manager.\nRelated Documentation\nCore Bluetooth Programming Guide"
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393313-delegate",
    "html": "Discussion\n\nFor information about how to implement your peripheral manager delegate, see CBPeripheralManagerDelegate.\n\nSee Also\nInitializing a Peripheral Manager\ninit()\nInitializes the peripheral manager without a delegate.\ninit(delegate: CBPeripheralManagerDelegate?, queue: dispatch_queue_t?)\nInitializes the peripheral manager with a specified delegate and dispatch queue.\ninit(delegate: CBPeripheralManagerDelegate?, queue: dispatch_queue_t?, options: [String : Any]?)\nInitializes the peripheral manager with a specified delegate, dispatch queue, and initialization options.\nPeripheral Manager Initialization Options\nKeys used to specify options when creating a peripheral manager."
  },
  {
    "title": "Peripheral Manager Initialization Options | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/peripheral_manager_initialization_options",
    "html": "Topics\nInitialization Options\nlet CBPeripheralManagerOptionShowPowerAlertKey: String\nA Boolean value specifying whether the system should warn if Bluetooth is in the powered-off state when instantiating the peripheral manager.\nlet CBPeripheralManagerOptionRestoreIdentifierKey: String\nA unique identifier (UID) with which to instantiate the peripheral manager.\nSee Also\nInitializing a Peripheral Manager\ninit()\nInitializes the peripheral manager without a delegate.\ninit(delegate: CBPeripheralManagerDelegate?, queue: dispatch_queue_t?)\nInitializes the peripheral manager with a specified delegate and dispatch queue.\ninit(delegate: CBPeripheralManagerDelegate?, queue: dispatch_queue_t?, options: [String : Any]?)\nInitializes the peripheral manager with a specified delegate, dispatch queue, and initialization options.\nvar delegate: CBPeripheralManagerDelegate?\nThe delegate object specified to receive peripheral events."
  },
  {
    "title": "authorizationStatus() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1616317-authorizationstatus",
    "html": "Return Value\n\nA value that indicates whether the app has authorization to share data using Bluetooth services while in the background. For a list of possible values, see CBPeripheralManagerAuthorizationStatus.\n\nDiscussion\n\nThe system manages the authorization status of a given app, and considers several factors. The user must explicitly authorize apps to share data using Bluetooth services while in the background state. The system automatically displays a request for user authorization when your app first attempts to use Bluetooth services to share data.\n\nCalling this method doesn’t prompt the user for access. Instead, you use this method to detect restricted access and hide any affected UI features from the user.\n\nSee Also\nMonitoring the State of a Peripheral Manager\nenum CBPeripheralManagerAuthorizationStatus\nValues representing the current authorization state of the peripheral manager.\nDeprecated\nenum CBPeripheralManagerState\nValues that represent the current state of the peripheral manager.\nDeprecated"
  },
  {
    "title": "CBCentralManagerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate",
    "html": "Overview\n\nThe CBCentralManagerDelegate protocol defines the methods that a delegate of a CBCentralManager object must adopt. The optional methods of the protocol allow the delegate to monitor the discovery, connectivity, and retrieval of peripheral devices. The only required method is centralManagerDidUpdateState(_:); the central manager calls this when its state updates, thereby indicating the availability of the central manager.\n\nTopics\nMonitoring Connections with Peripherals\nfunc centralManager(CBCentralManager, didConnect: CBPeripheral)\nTells the delegate that the central manager connected to a peripheral.\nfunc centralManager(CBCentralManager, didDisconnectPeripheral: CBPeripheral, error: Error?)\nTells the delegate that the central manager disconnected from a peripheral.\nfunc centralManager(CBCentralManager, didFailToConnect: CBPeripheral, error: Error?)\nTells the delegate the central manager failed to create a connection with a peripheral.\nfunc centralManager(CBCentralManager, connectionEventDidOccur: CBConnectionEvent, for: CBPeripheral)\nTells the delegate that a connection event occurred which matches the registered options.\nDiscovering and Retrieving Peripherals\nfunc centralManager(CBCentralManager, didDiscover: CBPeripheral, advertisementData: [String : Any], rssi: NSNumber)\nTells the delegate the central manager discovered a peripheral while scanning for devices.\nAdvertisement Data Retrieval Keys\nKeys used to specify items in a dictionary of peripheral advertisement data.\nMonitoring the Central Manager’s State\nfunc centralManagerDidUpdateState(CBCentralManager)\nTells the delegate the central manager’s state updated.\n\nRequired\n\nfunc centralManager(CBCentralManager, willRestoreState: [String : Any])\nTells the delegate the system is about to restore the central manager, as part of relaunching the app into the background.\nMonitoring the Central Manager’s Authorization\nfunc centralManager(CBCentralManager, didUpdateANCSAuthorizationFor: CBPeripheral)\nTells the delegate the authorization status changed for a ANCS-requiring connected peripheral.\nInstance Methods\nfunc centralManager(CBCentralManager, didDisconnectPeripheral: CBPeripheral, timestamp: CFAbsoluteTime, isReconnecting: Bool, error: Error?)\nRelationships\nInherits From\nNSObjectProtocol\nConforming Types\nIOBluetoothDevicePair\nSee Also\nCentrals\nclass CBCentral\nA remote device connected to a local app, which is acting as a peripheral.\nclass CBCentralManager\nAn object that scans for, discovers, connects to, and manages peripherals."
  },
  {
    "title": "Deprecated Constants | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/deprecated_constants",
    "html": "Topics\nConstants\nlet CBCentralManagerOptionDeviceAccessForMedia: String\nlet CBUUIDCharacteristicValidRangeString: String\nSee Also\nDeprecated\nenum CBCentralManagerState\nValues that represent the current state of a central manager object.\nDeprecated\nenum CBPeripheralManagerState\nValues that represent the current state of the peripheral manager.\nDeprecated"
  },
  {
    "title": "CBCentralManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanager",
    "html": "Overview\n\nCBCentralManager objects manage discovered or connected remote peripheral devices (represented by CBPeripheral objects), including scanning for, discovering, and connecting to advertising peripherals.\n\nBefore calling the CBCentralManager methods, set the state of the central manager object to powered on, as indicated by the CBCentralManagerState.poweredOn constant. This state indicates that the central device (your iPhone or iPad, for instance) supports Bluetooth low energy and that Bluetooth is on and available for use.\n\nTopics\nInitializing a Central Manager\ninit()\nInitializes the central manager without a delegate.\ninit(delegate: CBCentralManagerDelegate?, queue: dispatch_queue_t?)\nInitializes the central manager with a specified delegate and dispatch queue.\ninit(delegate: CBCentralManagerDelegate?, queue: dispatch_queue_t?, options: [String : Any]?)\nInitializes the central manager with specified delegate, dispatch queue, and initialization options.\nCentral Manager Initialization Options\nKeys used to pass options when initializing a central manager.\nCentral Manager State Restoration Options\nKeys used to pass state restoration options to the central manager initializer.\nEstablishing or Canceling Connections with Peripherals\nfunc connect(CBPeripheral, options: [String : Any]?)\nEstablishes a local connection to a peripheral.\nPeripheral Connection Options\nKeys used to pass options when connecting to a peripheral.\nfunc cancelPeripheralConnection(CBPeripheral)\nCancels an active or pending local connection to a peripheral.\nRetrieving Lists of Peripherals\nfunc retrieveConnectedPeripherals(withServices: [CBUUID]) -> [CBPeripheral]\nReturns a list of the peripherals connected to the system whose services match a given set of criteria.\nfunc retrievePeripherals(withIdentifiers: [UUID]) -> [CBPeripheral]\nReturns a list of known peripherals by their identifiers.\nScanning or Stopping Scans of Peripherals\nfunc scanForPeripherals(withServices: [CBUUID]?, options: [String : Any]?)\nScans for peripherals that are advertising services.\nPeripheral Scanning Options\nKeys used to pass options when scanning for peripherals.\nfunc stopScan()\nAsks the central manager to stop scanning for peripherals.\nvar isScanning: Bool\nA Boolean value that indicates whether the central is currently scanning.\nInspecting Feature Support\nclass func supports(CBCentralManager.Feature) -> Bool\nReturns a Boolean that indicates whether the device supports a specific set of features.\nstruct CBCentralManager.Feature\nAn option set of device-specific features.\nMonitoring Properties\nvar delegate: CBCentralManagerDelegate?\nThe delegate object that you want to receive central manager events.\nReceiving Connection Events\nfunc registerForConnectionEvents(options: [CBConnectionEventMatchingOption : Any]?)\nRegister for an event notification when the central manager makes a connection matching the given options.\nPeripheral Connection Options\nKeys used to pass options when connecting to a peripheral.\nenum CBConnectionEvent\nA change to the connection state of a peer.\nstruct CBConnectionEventMatchingOption\nA set of options to use when registering for connection events.\nDeprecated\nenum CBCentralManagerState\nValues that represent the current state of a central manager object.\nDeprecated\nRelationships\nInherits From\nCBManager\nSee Also\nCentrals\nclass CBCentral\nA remote device connected to a local app, which is acting as a peripheral.\nprotocol CBCentralManagerDelegate\nA protocol that provides updates for the discovery and management of peripheral devices."
  },
  {
    "title": "CBPeripheralManagerState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerstate",
    "html": "Deprecated\n\nUse CBManagerState instead.\n\nTopics\nConstants\ncase unknown\nA manager state that indicates the current state of the peripheral manager is unknown.\ncase resetting\nA manager state that indicates the connection with the system service was momentarily lost.\ncase unsupported\nA manager state that indicates the platform doesn’t support the Bluetooth low energy peripheral/server role.\ncase unauthorized\nA manager state that indicates the app isn’t authorized to use the Bluetooth low energy peripheral/server role.\ncase poweredOff\nA manager state that indicates Bluetooth is currently powered off.\ncase poweredOn\nA manager state that indicates Bluetooth is currently powered on and is available to use.\nRelationships\nConforms To\nSendable\nSee Also\nDeprecated\nenum CBCentralManagerState\nValues that represent the current state of a central manager object.\nDeprecated\nDeprecated Constants\nThis document describes the constants found in the Core Bluetooth framework."
  },
  {
    "title": "CBATTError.Code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror/code",
    "html": "Overview\n\nThese error constants derive from the Bluetooth ATT error codes, defined in the Bluetooth 4.0 specification. For more information, see the Bluetooth 4.0 specification, Volume 3, Part F, Section 3.4.1.1.\n\nTopics\nError Codes\ncase success\nThe ATT command or request successfully completed.\ncase invalidHandle\nThe attribute handle is invalid on this peripheral.\ncase readNotPermitted\nThe permissions prohibit reading the attribute’s value.\ncase writeNotPermitted\nThe permissions prohibit writing the attribute’s value.\ncase invalidPdu\nThe attribute Protocol Data Unit (PDU) is invalid.\ncase insufficientAuthentication\nReading or writing the attribute’s value failed for lack of authentication.\ncase requestNotSupported\nThe attribute server doesn’t support the request received from the client.\ncase invalidOffset\nThe specified offset value was past the end of the attribute’s value.\ncase insufficientAuthorization\nReading or writing the attribute’s value failed for lack of authorization.\ncase prepareQueueFull\nThe prepare queue is full, as a result of there being too many write requests in the queue.\ncase attributeNotFound\nThe attribute wasn’t found within the specified attribute handle range.\ncase attributeNotLong\nThe ATT read blob request can’t read or write the attribute.\ncase insufficientEncryptionKeySize\nThe encryption key size used for encrypting this link is insufficient.\ncase invalidAttributeValueLength\nThe length of the attribute’s value is invalid for the intended operation.\ncase unlikelyError\nThe ATT request encountered an unlikely error and wasn’t completed.\ncase insufficientEncryption\nReading or writing the attribute’s value failed for lack of encryption.\ncase unsupportedGroupType\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\ncase insufficientResources\nResources are insufficient to complete the ATT request.\nRelationships\nConforms To\nSendable\nSee Also\nErrors\nstruct CBError\nAn error that Core Bluetooth returns during Bluetooth transactions.\nlet CBErrorDomain: String\nThe domain for Core Bluetooth errors.\nenum CBError.Code\nThe codes for errors that Core Bluetooth returns during Bluetooth transactions.\nstruct CBATTError\nAn error that Core Bluetooth returns while using Attribute Protocol (ATT).\nlet CBATTErrorDomain: String\nThe domain for Core Bluetooth ATT errors."
  },
  {
    "title": "CBCentralManagerState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerstate",
    "html": "Deprecated\n\nUse CBManagerState instead.\n\nTopics\nConstants\ncase poweredOff\nA state that indicates Bluetooth is currently powered off.\ncase poweredOn\nA state that indicates Bluetooth is currently powered on and available to use.\ncase resetting\nA state that indicates the connection with the system service was momentarily lost.\ncase unauthorized\nA state that indicates the application isn’t authorized to use the Bluetooth low energy role.\ncase unknown\nThe manager’s state is unknown.\ncase unsupported\nA state that indicates this device doesn’t support the Bluetooth low energy central or client role.\nRelationships\nConforms To\nSendable\nSee Also\nDeprecated\nenum CBPeripheralManagerState\nValues that represent the current state of the peripheral manager.\nDeprecated\nDeprecated Constants\nThis document describes the constants found in the Core Bluetooth framework."
  },
  {
    "title": "CBATTErrorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterrordomain",
    "html": "Discussion\n\nThis value identifies Core Bluetooth Attribute Protocol (ATT) errors when used as the domain of an NSError instance.\n\nSee Also\nErrors\nstruct CBError\nAn error that Core Bluetooth returns during Bluetooth transactions.\nlet CBErrorDomain: String\nThe domain for Core Bluetooth errors.\nenum CBError.Code\nThe codes for errors that Core Bluetooth returns during Bluetooth transactions.\nstruct CBATTError\nAn error that Core Bluetooth returns while using Attribute Protocol (ATT).\nenum CBATTError.Code\nThe possible errors returned by a GATT server (a remote peripheral) during Bluetooth low energy ATT transactions."
  },
  {
    "title": "CBATTError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbatterror",
    "html": "Topics\nInspecting Error Properties\nstatic var errorDomain: String\nThe domain of Core Bluetooth errors.\nvar errorCode: Int\nThe code that identifies the error.\nvar errorUserInfo: [String : Any]\nA dictionary that provides details about the error.\nvar localizedDescription: String\nA string that contains the localized description of the error.\nError Codes\nstatic var success: CBATTError.Code\nThe ATT command or request successfully completed.\nstatic var invalidHandle: CBATTError.Code\nThe attribute handle is invalid on this peripheral.\nstatic var readNotPermitted: CBATTError.Code\nThe permissions prohibit reading the attribute’s value.\nstatic var writeNotPermitted: CBATTError.Code\nThe permissions prohibit writing the attribute’s value.\nstatic var invalidPdu: CBATTError.Code\nThe attribute Protocol Data Unit (PDU) is invalid.\nstatic var insufficientAuthentication: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authentication.\nstatic var requestNotSupported: CBATTError.Code\nThe attribute server doesn’t support the request received from the client.\nstatic var invalidOffset: CBATTError.Code\nThe specified offset value was past the end of the attribute’s value.\nstatic var insufficientAuthorization: CBATTError.Code\nReading or writing the attribute’s value failed for lack of authorization.\nstatic var prepareQueueFull: CBATTError.Code\nThe prepare queue is full, as a result of there being too many write requests in the queue.\nstatic var attributeNotFound: CBATTError.Code\nThe attribute wasn’t found within the specified attribute handle range.\nstatic var attributeNotLong: CBATTError.Code\nThe ATT read blob request can’t read or write the attribute.\nstatic var insufficientEncryptionKeySize: CBATTError.Code\nThe encryption key size used for encrypting this link is insufficient.\nstatic var invalidAttributeValueLength: CBATTError.Code\nThe length of the attribute’s value is invalid for the intended operation.\nstatic var unlikelyError: CBATTError.Code\nThe ATT request encountered an unlikely error and wasn’t completed.\nstatic var insufficientEncryption: CBATTError.Code\nReading or writing the attribute’s value failed for lack of encryption.\nstatic var unsupportedGroupType: CBATTError.Code\nThe attribute type isn’t a supported grouping attribute as defined by a higher-layer specification.\nstatic var insufficientResources: CBATTError.Code\nResources are insufficient to complete the ATT request.\nTesting Error Inequality\nstatic func != (CBATTError, CBATTError) -> Bool\nReturns a Boolean value that indicates whether two values are unequal.\nInitializers\ninit(Code, userInfo: [String : Any])\nInstance Properties\nvar code: Code\nvar hashValue: Int\nvar userInfo: [String : Any]\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func == (CBATTError, CBATTError) -> Bool\nEnumerations\nenum CBATTError.Code\nThe possible errors returned by a GATT server (a remote peripheral) during Bluetooth low energy ATT transactions.\nSee Also\nErrors\nstruct CBError\nAn error that Core Bluetooth returns during Bluetooth transactions.\nlet CBErrorDomain: String\nThe domain for Core Bluetooth errors.\nenum CBError.Code\nThe codes for errors that Core Bluetooth returns during Bluetooth transactions.\nlet CBATTErrorDomain: String\nThe domain for Core Bluetooth ATT errors.\nenum CBATTError.Code\nThe possible errors returned by a GATT server (a remote peripheral) during Bluetooth low energy ATT transactions."
  },
  {
    "title": "CBError.Code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror/code",
    "html": "Topics\nError Codes\ncase unknown\nAn unknown error occurred.\ncase invalidParameters\nThe specified parameters are invalid.\ncase invalidHandle\nThe specified attribute handle is invalid.\ncase notConnected\nThe device isn’t currently connected.\ncase outOfSpace\nThe device has run out of space to complete the intended operation.\ncase operationCancelled\nThe error represents a canceled operation.\ncase connectionTimeout\nThe connection timed out.\ncase peripheralDisconnected\nThe peripheral disconnected.\ncase uuidNotAllowed\nThe specified UUID isn’t permitted.\ncase alreadyAdvertising\nThe peripheral is already advertising.\ncase connectionFailed\nThe connection failed.\ncase connectionLimitReached\nThe device already has the maximum number of connections.\ncase operationNotSupported\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\ncase unkownDevice\nA misspelled version of the unknown device error code.\nDeprecated\nEnumeration Cases\ncase encryptionTimedOut\ncase leGattExceededBackgroundNotificationLimit\ncase leGattNearBackgroundNotificationLimit\ncase peerRemovedPairingInformation\ncase tooManyLEPairedDevices\nRelationships\nConforms To\nSendable\nSee Also\nErrors\nstruct CBError\nAn error that Core Bluetooth returns during Bluetooth transactions.\nlet CBErrorDomain: String\nThe domain for Core Bluetooth errors.\nstruct CBATTError\nAn error that Core Bluetooth returns while using Attribute Protocol (ATT).\nlet CBATTErrorDomain: String\nThe domain for Core Bluetooth ATT errors.\nenum CBATTError.Code\nThe possible errors returned by a GATT server (a remote peripheral) during Bluetooth low energy ATT transactions."
  },
  {
    "title": "CBError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberror",
    "html": "Topics\nInspecting Error Properties\nvar errorCode: Int\nThe code that identifies the error.\nvar errorUserInfo: [String : Any]\nA dictionary that provides details about the error.\nstatic var errorDomain: String\nvar localizedDescription: String\nA string that contains the localized description of the error.\nError Codes\nstatic var unknown: CBError.Code\nAn unknown error occurred.\nstatic var invalidParameters: CBError.Code\nThe specified parameters are invalid.\nstatic var invalidHandle: CBError.Code\nThe specified attribute handle is invalid.\nstatic var notConnected: CBError.Code\nThe device isn’t currently connected.\nstatic var outOfSpace: CBError.Code\nThe device has run out of space to complete the intended operation.\nstatic var operationCancelled: CBError.Code\nThe error represents a canceled operation.\nstatic var connectionTimeout: CBError.Code\nThe connection timed out.\nstatic var peripheralDisconnected: CBError.Code\nThe peripheral disconnected.\nstatic var uuidNotAllowed: CBError.Code\nThe specified UUID isn’t permitted.\nstatic var alreadyAdvertising: CBError.Code\nThe peripheral is already advertising.\nstatic var connectionFailed: CBError.Code\nThe connection failed.\nstatic var connectionLimitReached: CBError.Code\nThe device already has the maximum number of connections.\nstatic var operationNotSupported: CBError.Code\nThe operation isn’t supported.\nstatic var unknownDevice: CBError.Code\nThe device is unknown.\nstatic var unkownDevice: CBError.Code\nA misspelled version of the unknown device error code.\nDeprecated\nTesting Error Inequality\nstatic func != (CBError, CBError) -> Bool\nReturns a Boolean value that indicates whether two values are unequal.\nInitializers\ninit(Code, userInfo: [String : Any])\nInstance Properties\nvar code: Code\nvar hashValue: Int\nvar userInfo: [String : Any]\nType Properties\nstatic var encryptionTimedOut: CBError.Code\nstatic var leGattExceededBackgroundNotificationLimit: CBError.Code\nstatic var leGattNearBackgroundNotificationLimit: CBError.Code\nstatic var peerRemovedPairingInformation: CBError.Code\nstatic var tooManyLEPairedDevices: CBError.Code\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func == (CBError, CBError) -> Bool\nEnumerations\nenum CBError.Code\nThe codes for errors that Core Bluetooth returns during Bluetooth transactions.\nSee Also\nErrors\nlet CBErrorDomain: String\nThe domain for Core Bluetooth errors.\nenum CBError.Code\nThe codes for errors that Core Bluetooth returns during Bluetooth transactions.\nstruct CBATTError\nAn error that Core Bluetooth returns while using Attribute Protocol (ATT).\nlet CBATTErrorDomain: String\nThe domain for Core Bluetooth ATT errors.\nenum CBATTError.Code\nThe possible errors returned by a GATT server (a remote peripheral) during Bluetooth low energy ATT transactions."
  },
  {
    "title": "CBErrorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cberrordomain",
    "html": "Discussion\n\nThis value identifies Core Bluetooth errors when used as the domain of an NSError instance.\n\nSee Also\nErrors\nstruct CBError\nAn error that Core Bluetooth returns during Bluetooth transactions.\nenum CBError.Code\nThe codes for errors that Core Bluetooth returns during Bluetooth transactions.\nstruct CBATTError\nAn error that Core Bluetooth returns while using Attribute Protocol (ATT).\nlet CBATTErrorDomain: String\nThe domain for Core Bluetooth ATT errors.\nenum CBATTError.Code\nThe possible errors returned by a GATT server (a remote peripheral) during Bluetooth low energy ATT transactions."
  },
  {
    "title": "Using Core Bluetooth Classic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/using_core_bluetooth_classic",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC 2019 session 901: What’s New in Core Bluetooth."
  },
  {
    "title": "CBUUID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbuuid",
    "html": "Overview\n\nInstances of the CBUUID class represent the 128-bit universally unique identifiers (UUIDs) of attributes used in Bluetooth low energy communication, such as a peripheral’s services, characteristics, and descriptors. This class provides a number of factory methods for dealing with long UUIDs when developing your app. For example, instead of passing around the string representation of a 128-bit Bluetooth low energy attribute in your code, you can create a CBUUID object that represents it, and pass that around instead.\n\nThe Bluetooth Special Interest Group (SIG) publishes a list of commonly-used UUIDs, many of which are 16- or 32-bits for convenience. The CBUUID class provides methods that automatically transform these predefined shorter UUIDs into their 128-bit equivalent UUIDs. When you create a CBUUID object from a predefined 16- or 32-bit UUID, Core Bluetooth pre-fills the rest of the 128-bit UUID with the Bluetooth base UUID, as defined in the Bluetooth 4.0 specification, Volume 3, Part F, Section 3.2.1.\n\nIn addition to providing methods for creating CBUUID objects, this class defines constants that represent the UUIDs of the Bluetooth-defined characteristic descriptors, as defined in the Bluetooth 4.0 specification, Volume 3, Part G, Section 3.3.3.\n\nTopics\nCreating New CBUUID Objects\ninit(string: String)\nCreates a Core Bluetooth UUID object from a 16-, 32-, or 128-bit UUID string.\ninit(data: Data)\nCreates a Core Bluetooth UUID object from a 16-, 32-, or 128-bit UUID data container.\ninit(cfuuid: CFUUID)\nCreates a Core Bluetooth UUID object from a Core Foundation UUID object.\nDeprecated\ninit(nsuuid: UUID)\nCreates a Core Bluetooth UUID object from a Foundation UUID object.\nInspecting CBUUID Properties\nvar data: Data\nThe data of the UUID.\nvar uuidString: String\nThe UUID represented as a string.\nUUID Constants\nCharacteristic Descriptors\nValues that represent the UUIDs of the characteristic descriptors.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nSee Also\nSupporting Types\nclass CBManager\nThe abstract base class that manages central and peripheral objects.\nclass CBATTRequest\nA request that uses the Attribute Protocol (ATT).\nclass CBPeer\nAn object that represents a remote device."
  },
  {
    "title": "CBATTRequest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattrequest",
    "html": "Overview\n\nThe CBATTRequest class represents Attribute Protocol (ATT) read and write requests from remote central devices (represented by CBCentral objects). Remote centrals use these ATT requests to read and write characteristic values on local peripherals (represented by CBPeripheralManager objects). Local peripherals, on the other hand, use the properties of CBATTRequest objects to respond to the read and write requests appropriately, using the respond(to:withResult:) method of the CBPeripheralManager class.\n\nTopics\nRequesting to Read and Write Characteristic Values\nvar central: CBCentral\nThe remote central device that originated the request.\nvar characteristic: CBCharacteristic\nThe characteristic to read or write the value of.\nvar value: Data?\nThe data that the central reads from or writes to the peripheral.\nvar offset: Int\nThe zero-based index of the first byte for the read or write request.\nRelationships\nInherits From\nNSObject\nSee Also\nSupporting Types\nclass CBManager\nThe abstract base class that manages central and peripheral objects.\nclass CBPeer\nAn object that represents a remote device.\nclass CBUUID\nA universally unique identifier, as defined by Bluetooth standards."
  },
  {
    "title": "CBDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbdescriptor",
    "html": "Overview\n\nCBDescriptor and its subclass CBMutableDescriptor represent a descriptor of a peripheral’s characteristic. In partcular, CBDescriptor objects represent the descriptors of a remote peripheral’s characteristic. Descriptors provide further information about a characteristic’s value. For example, they may describe the value in human-readable form and describe how to format the value for presentation purposes. Characteristic descriptors also indicate whether a characteristic’s value indicates or notifies a client (a central) when the value of the characteristic changes.\n\nCBUUID details six predefined descriptors and their corresponding value types. CBDescriptor lists the predefined descriptors and the CBUUID constants that represent them.\n\nTable 1 Predefined descriptors\n\nDescriptor type\n\n\t\n\nDescriptor constant\n\n\n\n\nCharacteristic extended properties\n\n\t\n\nCBUUIDCharacteristicExtendedPropertiesString\n\n\n\n\nCharacteristic user description\n\n\t\n\nCBUUIDCharacteristicUserDescriptionString\n\n\n\n\nClient characteristic configuration\n\n\t\n\nCBUUIDClientCharacteristicConfigurationString\n\n\n\n\nServer characteristic configuration\n\n\t\n\nCBUUIDServerCharacteristicConfigurationString\n\n\n\n\nCharacteristic format\n\n\t\n\nCBUUIDCharacteristicFormatString\n\n\n\n\nCharacteristic aggregate format\n\n\t\n\nCBUUIDCharacteristicAggregateFormatString\n\nTopics\nIdentifying a Descriptor\nvar characteristic: CBCharacteristic?\nThe characteristic to which this descriptor belongs.\nAccessing Descriptor Data\nvar value: Any?\nThe value of the descriptor.\nRelationships\nInherits From\nCBAttribute\nSee Also\nServices\nclass CBService\nA collection of data and associated behaviors that accomplish a function or feature of a device.\nclass CBMutableService\nA service with writeable property values.\nclass CBCharacteristic\nA characteristic of a remote peripheral’s service.\nclass CBMutableCharacteristic\nA characteristic of a local peripheral’s service.\nclass CBMutableDescriptor\nAn object that provides additional information about a local peripheral’s characteristic."
  },
  {
    "title": "CBManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmanager",
    "html": "Topics\nAccessing the Manager’s Properties\nvar state: CBManagerState\nThe current state of the manager.\nenum CBManagerState\nThe possible states of a Core Bluetooth manager.\nDetermining Authorization State\nclass var authorization: CBManagerAuthorization\nThe current authorization status for using Bluetooth.\nenum CBManagerAuthorization\nThe current authorization state of a Core Bluetooth manager.\nDeprecated Properties\nvar authorization: CBManagerAuthorization\nThe current authorization status for using Bluetooth.\nRelationships\nInherits From\nNSObject\nSee Also\nSupporting Types\nclass CBATTRequest\nA request that uses the Attribute Protocol (ATT).\nclass CBPeer\nAn object that represents a remote device.\nclass CBUUID\nA universally unique identifier, as defined by Bluetooth standards."
  },
  {
    "title": "CBMutableDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutabledescriptor",
    "html": "Overview\n\nYou use the CBMutableDescriptor class to create a local characteristic descriptor. After you create a descriptor and associate it with a local characteristic, you can publish it to the peripheral’s local database using the add(_:) method of the CBPeripheralManager class. This also publishes the characteristic and local service to which the descriptor belongs. After you publish a local descriptor, Core Bluetooth caches the descriptor and you can no longer make changes to it.\n\nCBUUID details predefined descriptor types and their corresponding value types. That said, only two of these are currently supported when creating local, mutable descriptors: the characteristic user description descriptor and the characteristic format descriptor. CBUUID declares these as the constants CBUUIDCharacteristicUserDescriptionString and CBUUIDCharacteristicFormatString, respectively. The system automatically creates the extended properties descriptor and the client configuration descriptor, depending on the properties of the characteristic to which the descriptor belongs.\n\nTopics\nCreating a Mutable Descriptor\ninit(type: CBUUID, value: Any?)\nCreates a mutable descriptor with a specified value.\nRelationships\nInherits From\nCBDescriptor\nSee Also\nServices\nclass CBService\nA collection of data and associated behaviors that accomplish a function or feature of a device.\nclass CBMutableService\nA service with writeable property values.\nclass CBCharacteristic\nA characteristic of a remote peripheral’s service.\nclass CBMutableCharacteristic\nA characteristic of a local peripheral’s service.\nclass CBDescriptor\nAn object that provides further information about a remote peripheral’s characteristic."
  },
  {
    "title": "CBCharacteristic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcharacteristic",
    "html": "Overview\n\nCBCharacteristic and its subclass CBMutableCharacteristic represent further information about a peripheral’s service. In particular, CBCharacteristic objects represent the characteristics of a remote peripheral’s service. A characteristic contains a single value and any number of descriptors describing that value. The properties of a characteristic determine how you can use a characteristic’s value, and how you access the descriptors.\n\nTopics\nIdentifying a Characteristic\nvar service: CBService?\nThe service to which this characteristic belongs.\nAccessing Characteristic Data\nvar value: Data?\nThe value of the characteristic.\nvar descriptors: [CBDescriptor]?\nA list of the descriptors discovered in this characteristic.\nvar properties: CBCharacteristicProperties\nThe properties of the characteristic.\nstruct CBCharacteristicProperties\nValues that represent the possible properties of a characteristic.\nvar isNotifying: Bool\nA Boolean value that indicates whether the characteristic is currently notifying a subscribed central of its value.\nvar isBroadcasted: Bool\nA Boolean value that indicates whether the characteristic the service broadcasts this characteristic.\nRelationships\nInherits From\nCBAttribute\nSee Also\nServices\nclass CBService\nA collection of data and associated behaviors that accomplish a function or feature of a device.\nclass CBMutableService\nA service with writeable property values.\nclass CBMutableCharacteristic\nA characteristic of a local peripheral’s service.\nclass CBDescriptor\nAn object that provides further information about a remote peripheral’s characteristic.\nclass CBMutableDescriptor\nAn object that provides additional information about a local peripheral’s characteristic."
  },
  {
    "title": "CBMutableService | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbmutableservice",
    "html": "Overview\n\nThe CBMutableService class adds write access to all of the properties in the CBService class it inherits from. You use this class to create a service or an included service on a local peripheral device (represented by a CBPeripheralManager object). After creating a service, you can add it to the peripheral’s local database using the add(_:) method of the CBPeripheralManager class. After you add a service to the peripheral’s local database, Core Bluetooth caches the service and you can no longer make changes to it.\n\nTopics\nCreating a Mutable Service\ninit(type: CBUUID, primary: Bool)\nCreates a newly initialized mutable service specified by UUID and service type.\nManaging a Mutable Service\nvar characteristics: [CBCharacteristic]?\nA list of characteristics of a service.\nvar includedServices: [CBService]?\nA list of included services.\nRelationships\nInherits From\nCBService\nSee Also\nServices\nclass CBService\nA collection of data and associated behaviors that accomplish a function or feature of a device.\nclass CBCharacteristic\nA characteristic of a remote peripheral’s service.\nclass CBMutableCharacteristic\nA characteristic of a local peripheral’s service.\nclass CBDescriptor\nAn object that provides further information about a remote peripheral’s characteristic.\nclass CBMutableDescriptor\nAn object that provides additional information about a local peripheral’s characteristic."
  },
  {
    "title": "Transferring Data Between Bluetooth Low Energy Devices | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/transferring_data_between_bluetooth_low_energy_devices",
    "html": "Overview\n\nThis sample shows how to transfer data between two iOS devices, with one acting as a Bluetooth central and the other as a peripheral, by using a CBCharacteristic on the peripheral side that changes its value. The value change is automatically picked up on the central side. The sample also shows how the central side can write data to a CBCharacteristic on the peripheral side.\n\nThis sample shows how to handle flow control in this scenario. It also covers a rudimentary way to use the Received Signal Strength Indicator (RSSI) value to determine whether data transfer is feasible.\n\nConfigure the Sample Code Project\n\nRun the sample on two devices that support Bluetooth LE.\n\nOn one device, tap the “Central” button. This device will be the central mode device. The device will begin scanning for a peripheral device that is advertising the Transfer Service.\n\nOn the other device, tap the “Peripheral” button. This device will be the peripheral mode device.\n\nOn the peripheral mode device, tap the advertise on/off switch, to enable peripheral mode advertising of the data in the text field.\n\nBring the two devices close to each other.\n\nDiscover Bluetooth Peripherals and Connect to Them\n\nThe device running in central mode creates a CBCentralManager, assigning the CentralViewController as the manager’s delegate. It calls scanForPeripherals(withServices:options:) to discover other Bluetooth devices, passing in the UUID of the service it’s searching for.\n\ncentralManager.scanForPeripherals(withServices: [TransferService.serviceUUID],\n                                   options: [CBCentralManagerScanOptionAllowDuplicatesKey: true])\n\n\nWhen the central manager discovers a peripheral with a matching service UUID, it calls centralManager(_:didDiscover:advertisementData:rssi:). The sample’s implementation of this method uses the rssi (Received Signal Strength Indicator) parameter to determine whether the signal is strong enough to transfer data. RSSI values are provided as negative numbers, with a theortetical maximum of 0. The sample proceeds with transfer if the rssi is greater than or equal to -50. If the peripheral’s signal is strong enough, the method saves the peripheral as the property discoveredPeripheral and calls connect(_:options:) to connect to it.\n\nfunc centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral,\n                    advertisementData: [String: Any], rssi RSSI: NSNumber) {\n    \n    // Reject if the signal strength is too low to attempt data transfer.\n    // Change the minimum RSSI value depending on your app’s use case.\n    guard RSSI.intValue >= -50\n        else {\n            os_log(\"Discovered perhiperal not in expected range, at %d\", RSSI.intValue)\n            return\n    }\n    \n    os_log(\"Discovered %s at %d\", String(describing: peripheral.name), RSSI.intValue)\n    \n    // Device is in range - have we already seen it?\n    if discoveredPeripheral != peripheral {\n        \n        // Save a local copy of the peripheral, so CoreBluetooth doesn't get rid of it.\n        discoveredPeripheral = peripheral\n        \n        // And finally, connect to the peripheral.\n        os_log(\"Connecting to perhiperal %@\", peripheral)\n        centralManager.connect(peripheral, options: nil)\n    }\n}\n\nWhen the Peripheral Receives a Connection, Send the Data\n\nThe device running in peripheral mode creates a CBPeripheralManager and assigns its PeripheralViewController as the manager’s delegate.\n\nWhen the peripheralManagerDidUpdateState(_:) method indicates that Bluetooth has powered on, the sample calls a private setupPeripheral() method to create a CBMutableCharacteristic called transferCharacteristic. It then creates a CBMutableService from the characteristic and adds the service to the CBPeripheralManager.\n\nprivate func setupPeripheral() {\n    \n    // Build our service.\n    \n    // Start with the CBMutableCharacteristic.\n    let transferCharacteristic = CBMutableCharacteristic(type: TransferService.characteristicUUID,\n                                                     properties: [.notify, .writeWithoutResponse],\n                                                     value: nil,\n                                                     permissions: [.readable, .writeable])\n    \n    // Create a service from the characteristic.\n    let transferService = CBMutableService(type: TransferService.serviceUUID, primary: true)\n    \n    // Add the characteristic to the service.\n    transferService.characteristics = [transferCharacteristic]\n    \n    // And add it to the peripheral manager.\n    peripheralManager.add(transferService)\n    \n    // Save the characteristic for later.\n    self.transferCharacteristic = transferCharacteristic\n\n\n}\n\n\nThe user interface provides a UISwitch that starts or stops advertising of the peripheral’s service UUID.\n\n@IBAction func switchChanged(_ sender: Any) {\n    // All we advertise is our service's UUID.\n    if advertisingSwitch.isOn {\n        peripheralManager.startAdvertising([CBAdvertisementDataServiceUUIDsKey: [TransferService.serviceUUID]])\n    } else {\n        peripheralManager.stopAdvertising()\n    }\n}\n\n\nOnce the central device discovers and connects to the peripheral, the peripheral side sends the data from the text field to the central. PeripheralViewController sends the data in chunks — each sized to the maximum value the central can receive — by setting the value of its transferCharacteristic property to the latest chunk. When finished, it sends the value EOM (for “end of message”).\n\nWhen the Central Receives the Data, Update the User Interface\n\nBack on the central device, a call to the central manager delegate’s peripheral(_:didDiscoverCharacteristicsFor:error:) tells the app that it has discovered the peripheral’s transfer characteristic. The sample’s implementation of this method calls setNotifyValue(_:for:) to start receiving updates to the characteristic’s value.\n\nWhen the value does update — meaning text is available — the central manager calls the delegate method peripheral(_:didUpdateValueFor:error:). The sample looks to see if the data is a chunk or an end-of-message marker. If the data is a chunk, the code appends the chunk to an internal buffer containing the peripheral’s message. If the data is an end-of-message marker, it converts the buffer to a string and sets it as the contents of the text field.\n\nfunc peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {\n    // Deal with errors (if any)\n    if let error = error {\n        os_log(\"Error discovering characteristics: %s\", error.localizedDescription)\n        cleanup()\n        return\n    }\n    \n    guard let characteristicData = characteristic.value,\n        let stringFromData = String(data: characteristicData, encoding: .utf8) else { return }\n    \n    os_log(\"Received %d bytes: %s\", characteristicData.count, stringFromData)\n    \n    // Have we received the end-of-message token?\n    if stringFromData == \"EOM\" {\n        // End-of-message case: show the data.\n        // Dispatch the text view update to the main queue for updating the UI, because\n        // we don't know which thread this method will be called back on.\n        DispatchQueue.main.async() {\n            self.textView.text = String(data: self.data, encoding: .utf8)\n        }\n        \n        // Write test data\n        writeData()\n    } else {\n        // Otherwise, just append the data to what we have previously received.\n        data.append(characteristicData)\n    }\n}\n\n\nOnce the transfer is complete, you can press the “Back” button on each device and reassign the central and peripheral roles, to perform the transfer in the opposite direction."
  },
  {
    "title": "CBService | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbservice",
    "html": "Overview\n\nCBService objects represent services of a remote peripheral. Services are either primary or secondary and may contain multiple characteristics or included services (references to other services).\n\nTopics\nIdentifying a Service\nvar peripheral: CBPeripheral?\nThe peripheral to which this service belongs.\nvar isPrimary: Bool\nA Boolean value that indicates whether the type of service is primary or secondary.\nAccessing Service Data\nvar characteristics: [CBCharacteristic]?\nA list of characteristics discovered in this service.\nvar includedServices: [CBService]?\nA list of included services discovered in this service.\nRelationships\nInherits From\nCBAttribute\nSee Also\nServices\nclass CBMutableService\nA service with writeable property values.\nclass CBCharacteristic\nA characteristic of a remote peripheral’s service.\nclass CBMutableCharacteristic\nA characteristic of a local peripheral’s service.\nclass CBDescriptor\nAn object that provides further information about a remote peripheral’s characteristic.\nclass CBMutableDescriptor\nAn object that provides additional information about a local peripheral’s characteristic."
  },
  {
    "title": "CBAttributePermissions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattributepermissions",
    "html": "Overview\n\nWhen you initialize a new mutable characteristic, you set the read, write, and encryption permissions for the characteristic’s value. Setting the read and write permissions for a characteristic’s value is different from specifying the read and write properties for a characteristic’s value. When you specify the read and write properties, the client (a central) inspects the read and write permissions of the characteristic’s value. When you specify the read and write permissions for a characteristic’s value, you set the permissions for the server (the peripheral) to allow the type of read or write specified by the characteristic’s properties. Therefore, when you initialize a mutable characteristic, you need to specify read or write properties and their corresponding permissions.\n\nIf you want to enforce encryption requirements for reads and writes on a characteristic’s value, you must specify the relevant permission (readEncryptionRequired or writeEncryptionRequired). You may set more than one permission for a characteristic’s value.\n\nTopics\nCreating a Permissions Instance\ninit(rawValue: UInt)\nCreates a permissions instance from the provided raw value.\nPermissions\nstatic var readable: CBAttributePermissions\nA permission that indicates a peripheral can read the attribute’s value.\nstatic var writeable: CBAttributePermissions\nA permission that indicates a peripheral can write the attribute’s value.\nstatic var readEncryptionRequired: CBAttributePermissions\nA permission that indicates only trusted devices can read the attribute’s value.\nstatic var writeEncryptionRequired: CBAttributePermissions\nA permission that indicates only trusted devices can write the attribute’s value.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nPeripherals\nclass CBPeripheral\nA remote peripheral device.\nprotocol CBPeripheralDelegate\nA protocol that provides updates on the use of a peripheral’s services.\nclass CBPeripheralManager\nAn object that manages and advertises peripheral services exposed by this app.\nprotocol CBPeripheralManagerDelegate\nA protocol that provides updates for local peripheral state and interactions with remote central devices.\nclass CBAttribute\nA representation of common aspects of services offered by a peripheral."
  },
  {
    "title": "CBPeripheralManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager",
    "html": "Overview\n\nCore Bluetooth uses CBPeripheralManager objects to manage published services within the local peripheral’s Generic Attribute Profile (GATT) database and to advertise these services to central devices (represented by CBCentral objects). While a service is in the database, any connected central can see and connect to it. That said, if your app hasn’t specified the bluetooth-peripheral background mode, the contents of its services become disabled when it’s in the background or in a suspended state. In this scenario, any remote central trying to access the service’s characteristic value or characteristic descriptors receives an error.\n\nBefore you call CBPeripheralManager methods, the peripheral manager object must be in the powered-on state, as indicated by the CBPeripheralManagerState.poweredOn. This state indicates that the device (your iPhone or iPad, for instance) supports Bluetooth low energy and that its Bluetooth is on and available for use.\n\nIn watchOS, tvOS, and visionOS, you can’t advertise services using a CBPeripheralManager object because support for doing so is unavailable.\n\nTopics\nInitializing a Peripheral Manager\ninit()\nInitializes the peripheral manager without a delegate.\ninit(delegate: CBPeripheralManagerDelegate?, queue: dispatch_queue_t?)\nInitializes the peripheral manager with a specified delegate and dispatch queue.\ninit(delegate: CBPeripheralManagerDelegate?, queue: dispatch_queue_t?, options: [String : Any]?)\nInitializes the peripheral manager with a specified delegate, dispatch queue, and initialization options.\nvar delegate: CBPeripheralManagerDelegate?\nThe delegate object specified to receive peripheral events.\nPeripheral Manager Initialization Options\nKeys used to specify options when creating a peripheral manager.\nMonitoring the State of a Peripheral Manager\nclass func authorizationStatus() -> CBPeripheralManagerAuthorizationStatus\nReturns the app’s authorization status for sharing data while in the background.\nDeprecated\nenum CBPeripheralManagerAuthorizationStatus\nValues representing the current authorization state of the peripheral manager.\nDeprecated\nenum CBPeripheralManagerState\nValues that represent the current state of the peripheral manager.\nDeprecated\nAdding and Removing Services\nfunc add(CBMutableService)\nPublishes a service and any of its associated characteristics and characteristic descriptors to the local GATT database.\nfunc remove(CBMutableService)\nRemoves a specified published service from the local GATT database.\nfunc removeAllServices()\nRemoves all published services from the local GATT database.\nManaging Advertising\nfunc startAdvertising([String : Any]?)\nAdvertises peripheral manager data.\nAdvertising Data\nfunc stopAdvertising()\nStops advertising peripheral manager data.\nvar isAdvertising: Bool\nA Boolean value that indicates whether the peripheral is advertising data.\nSending Updates of a Characteristic’s Value\nfunc updateValue(Data, for: CBMutableCharacteristic, onSubscribedCentrals: [CBCentral]?) -> Bool\nSend an updated characteristic value to one or more subscribed centrals, using a notification or indication.\nResponding to Read and Write Requests\nfunc respond(to: CBATTRequest, withResult: CBATTError.Code)\nResponds to a read or write request from a connected central.\nSetting Connection Latency\nfunc setDesiredConnectionLatency(CBPeripheralManagerConnectionLatency, for: CBCentral)\nSets the desired connection latency for an existing connection to a central device.\nenum CBPeripheralManagerConnectionLatency\nValues representing the connection latency of the peripheral manager.\nUsing L2CAP Channels\nfunc publishL2CAPChannel(withEncryption: Bool)\nCreates a listener for incoming L2CAP channel connections.\nfunc unpublishL2CAPChannel(CBL2CAPPSM)\nRemoves a published service from the local system.\nRelationships\nInherits From\nCBManager\nSee Also\nPeripherals\nclass CBPeripheral\nA remote peripheral device.\nprotocol CBPeripheralDelegate\nA protocol that provides updates on the use of a peripheral’s services.\nprotocol CBPeripheralManagerDelegate\nA protocol that provides updates for local peripheral state and interactions with remote central devices.\nclass CBAttribute\nA representation of common aspects of services offered by a peripheral.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value."
  },
  {
    "title": "CBPeripheralManagerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheralmanagerdelegate",
    "html": "Overview\n\nThe delegate of a CBPeripheralManager object must adopt the CBPeripheralManagerDelegate protocol, which consists of numerous optional methods and one required method. The delegate uses the protocol’s optional methods to verify publishing and advertising, and to monitor read, write, and subscription requests from remote central devices.\n\nThe protocol’s required one method, peripheralManagerDidUpdateState(_:), which Core Bluetooth calls whenever the peripheral manager’s state updates to indicate whether the peripheral manager is available.\n\nTopics\nMonitoring Changes to the Peripheral Manager’s State\nfunc peripheralManagerDidUpdateState(CBPeripheralManager)\nTells the delegate the peripheral manager’s state updated.\n\nRequired\n\nfunc peripheralManager(CBPeripheralManager, willRestoreState: [String : Any])\nTells the delegate the system is about to restore the peripheral manager.\nPeripheral Manager State Restoration Options\nKeys used to specify options when restoring the state of a peripheral manager.\nAdding Services\nfunc peripheralManager(CBPeripheralManager, didAdd: CBService, error: Error?)\nTells the delegate the peripheral manager published a service to the local GATT database.\nAdvertising Peripheral Data\nfunc peripheralManagerDidStartAdvertising(CBPeripheralManager, error: Error?)\nTells the delegate the peripheral manager started advertising the local peripheral device’s data.\nMonitoring Subscriptions to Characteristic Values\nfunc peripheralManager(CBPeripheralManager, central: CBCentral, didSubscribeTo: CBCharacteristic)\nTells the delegate that a remote central device subscribed to a characteristic’s value.\nfunc peripheralManager(CBPeripheralManager, central: CBCentral, didUnsubscribeFrom: CBCharacteristic)\nTells the delegate that a remote central device unsubscribed from a characteristic’s value.\nfunc peripheralManagerIsReady(toUpdateSubscribers: CBPeripheralManager)\nTells the delegate that a local peripheral device is ready to send characteristic value updates.\nReceiving Read and Write Requests\nfunc peripheralManager(CBPeripheralManager, didReceiveRead: CBATTRequest)\nTells the delegate that a local peripheral received an Attribute Protocol (ATT) read request for a characteristic with a dynamic value.\nfunc peripheralManager(CBPeripheralManager, didReceiveWrite: [CBATTRequest])\nTells the delegate that a local peripheral device received an Attribute Protocol (ATT) write request for a characteristic with a dynamic value.\nUsing L2CAP Channels\nfunc peripheralManager(CBPeripheralManager, didPublishL2CAPChannel: CBL2CAPPSM, error: Error?)\nTells the delegate that the peripheral manager created a listener for incoming L2CAP channel connections.\nfunc peripheralManager(CBPeripheralManager, didUnpublishL2CAPChannel: CBL2CAPPSM, error: Error?)\nTells the delegate that the peripheral manager removed a published service from the local system.\nfunc peripheralManager(CBPeripheralManager, didOpen: CBL2CAPChannel?, error: Error?)\nTells the delegate that the peripheral manager opened an L2CAP channel.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nPeripherals\nclass CBPeripheral\nA remote peripheral device.\nprotocol CBPeripheralDelegate\nA protocol that provides updates on the use of a peripheral’s services.\nclass CBPeripheralManager\nAn object that manages and advertises peripheral services exposed by this app.\nclass CBAttribute\nA representation of common aspects of services offered by a peripheral.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value."
  },
  {
    "title": "CBAttribute | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbattribute",
    "html": "Overview\n\nConcrete subclasses of CBAttribute (and their mutable counterparts) represent the services a peripheral offers, the characteristics of those services, and the descriptors attached to those characteristics. The concrete subclasses are:\n\nCBService\n\nCBCharacteristic\n\nCBDescriptor\n\nTopics\nIdentifying an Attribute\nvar uuid: CBUUID\nThe Bluetooth-specific UUID of the attribute.\nRelationships\nInherits From\nNSObject\nSee Also\nPeripherals\nclass CBPeripheral\nA remote peripheral device.\nprotocol CBPeripheralDelegate\nA protocol that provides updates on the use of a peripheral’s services.\nclass CBPeripheralManager\nAn object that manages and advertises peripheral services exposed by this app.\nprotocol CBPeripheralManagerDelegate\nA protocol that provides updates for local peripheral state and interactions with remote central devices.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value."
  },
  {
    "title": "CBPeripheralDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheraldelegate",
    "html": "Overview\n\nThe delegate of a CBPeripheral object must adopt the CBPeripheralDelegate protocol. The delegate uses this protocol’s methods to monitor the discovery, exploration, and interaction of a remote peripheral’s services and properties. This protocol doesn’t have any required methods.\n\nTopics\nDiscovering Services\nfunc peripheral(CBPeripheral, didDiscoverServices: Error?)\nTells the delegate that peripheral service discovery succeeded.\nfunc peripheral(CBPeripheral, didDiscoverIncludedServicesFor: CBService, error: Error?)\nTells the delegate that discovering included services within the indicated service completed.\nDiscovering Characteristics and their Descriptors\nfunc peripheral(CBPeripheral, didDiscoverCharacteristicsFor: CBService, error: Error?)\nTells the delegate that the peripheral found characteristics for a service.\nfunc peripheral(CBPeripheral, didDiscoverDescriptorsFor: CBCharacteristic, error: Error?)\nTells the delegate that the peripheral found descriptors for a characteristic.\nRetrieving Characteristic and Descriptor Values\nfunc peripheral(CBPeripheral, didUpdateValueFor: CBCharacteristic, error: Error?)\nTells the delegate that retrieving the specified characteristic’s value succeeded, or that the characteristic’s value changed.\nfunc peripheral(CBPeripheral, didUpdateValueFor: CBDescriptor, error: Error?)\nTells the delegate that retrieving a specified characteristic descriptor’s value succeeded.\nWriting Characteristic and Descriptor Values\nfunc peripheral(CBPeripheral, didWriteValueFor: CBCharacteristic, error: Error?)\nTells the delegate that the peripheral successfully set a value for the characteristic.\nfunc peripheral(CBPeripheral, didWriteValueFor: CBDescriptor, error: Error?)\nTells the delegate that the peripheral successfully set a value for the descriptor.\nfunc peripheralIsReady(toSendWriteWithoutResponse: CBPeripheral)\nTells the delegate that a peripheral is again ready to send characteristic updates.\nManaging Notifications for a Characteristic’s Value\nfunc peripheral(CBPeripheral, didUpdateNotificationStateFor: CBCharacteristic, error: Error?)\nTells the delegate that the peripheral received a request to start or stop providing notifications for a specified characteristic’s value.\nRetrieving a Peripheral’s RSSI Data\nfunc peripheral(CBPeripheral, didReadRSSI: NSNumber, error: Error?)\nTells the delegate that retrieving the value of the peripheral’s current Received Signal Strength Indicator (RSSI) succeeded.\nfunc peripheralDidUpdateRSSI(CBPeripheral, error: Error?)\nTells the delegate that retrieving the value of the peripheral’s current Received Signal Strength Indicator (RSSI) succeeded.\nMonitoring Changes to a Peripheral’s Name or Services\nfunc peripheralDidUpdateName(CBPeripheral)\nTells the delegate that a peripheral’s name changed.\nfunc peripheral(CBPeripheral, didModifyServices: [CBService])\nTells the delegate that a peripheral’s services changed.\nMonitoring L2CAP Channels\nfunc peripheral(CBPeripheral, didOpen: CBL2CAPChannel?, error: Error?)\nDelivers the result of an attempt to open an L2CAP channel.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nPeripherals\nclass CBPeripheral\nA remote peripheral device.\nclass CBPeripheralManager\nAn object that manages and advertises peripheral services exposed by this app.\nprotocol CBPeripheralManagerDelegate\nA protocol that provides updates for local peripheral state and interactions with remote central devices.\nclass CBAttribute\nA representation of common aspects of services offered by a peripheral.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value."
  },
  {
    "title": "CBPeripheral | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbperipheral",
    "html": "Overview\n\nThe CBPeripheral class represents remote peripheral devices that your app discovers with a central manager (an instance of CBCentralManager). Peripherals use universally unique identifiers (UUIDs), represented by NSUUID objects, to identify themselves. Peripherals may contain one or more services or provide useful information about their connected signal strength.\n\nYou use this class to discover, explore, and interact with the services available on a remote peripheral that supports Bluetooth low energy. A service encapsulates the way part of the device behaves. For example, one service of a heart rate monitor may be to expose heart rate data from a sensor. Services themselves contain of characteristics or included services (references to other services). Characteristics provide further details about a peripheral’s service. For example, the heart rate service may contain multiple characteristics. One characteristic could describe the intended body location of the device’s heart rate sensor, and another characteristic could transmit the heart rate measurement data. Finally, characteristics contain any number of descriptors that provide more information about the characteristic’s value, such as a human-readable description and a way to format the value.\n\nTopics\nIdentifying a Peripheral\nvar name: String?\nThe name of the peripheral.\nvar delegate: CBPeripheralDelegate?\nThe delegate object specified to receive peripheral events.\nDiscovering Services\nfunc discoverServices([CBUUID]?)\nDiscovers the specified services of the peripheral.\nfunc discoverIncludedServices([CBUUID]?, for: CBService)\nDiscovers the specified included services of a previously-discovered service.\nvar services: [CBService]?\nA list of a peripheral’s discovered services.\nDiscovering Characteristics and Descriptors\nfunc discoverCharacteristics([CBUUID]?, for: CBService)\nDiscovers the specified characteristics of a service.\nfunc discoverDescriptors(for: CBCharacteristic)\nDiscovers the descriptors of a characteristic.\nReading Characteristic and Descriptor Values\nfunc readValue(for: CBCharacteristic)\nRetrieves the value of a specified characteristic.\nfunc readValue(for: CBDescriptor)\nRetrieves the value of a specified characteristic descriptor.\nWriting Characteristic and Descriptor Values\nfunc writeValue(Data, for: CBCharacteristic, type: CBCharacteristicWriteType)\nWrites the value of a characteristic.\nfunc writeValue(Data, for: CBDescriptor)\nWrites the value of a characteristic descriptor.\nfunc maximumWriteValueLength(for: CBCharacteristicWriteType) -> Int\nThe maximum amount of data, in bytes, you can send to a characteristic in a single write type.\nenum CBCharacteristicWriteType\nValues representing the possible write types to a characteristic’s value.\nSetting Notifications for a Characteristic’s Value\nfunc setNotifyValue(Bool, for: CBCharacteristic)\nSets notifications or indications for the value of a specified characteristic.\nMonitoring a Peripheral’s Connection State\nvar state: CBPeripheralState\nThe connection state of the peripheral.\nenum CBPeripheralState\nValues representing the connection state of a peripheral.\nvar canSendWriteWithoutResponse: Bool\nA Boolean value that indicates whether the remote device can send a write without a response.\nAccessing a Peripheral’s Signal Strength\nfunc readRSSI()\nRetrieves the current RSSI value for the peripheral while connected to the central manager.\nvar rssi: NSNumber?\nThe Received Signal Strength Indicator (RSSI), in decibels, of the peripheral.\nWorking with L2CAP Channels\nfunc openL2CAPChannel(CBL2CAPPSM)\nAttempts to open an L2CAP channel to the peripheral using the supplied Protocol/Service Multiplexer (PSM).\nclass CBL2CAPChannel\nA live L2CAP connection to a remote device.\ntypealias CBL2CAPPSM\nThe type of PSM identifiers.\nWorking with Apple Notification Center Service (ANCS)\nvar ancsAuthorized: Bool\nA Boolean value that indicates if the remote device has authorization to receive data over ANCS protocol.\nRelationships\nInherits From\nCBPeer\nSee Also\nPeripherals\nprotocol CBPeripheralDelegate\nA protocol that provides updates on the use of a peripheral’s services.\nclass CBPeripheralManager\nAn object that manages and advertises peripheral services exposed by this app.\nprotocol CBPeripheralManagerDelegate\nA protocol that provides updates for local peripheral state and interactions with remote central devices.\nclass CBAttribute\nA representation of common aspects of services offered by a peripheral.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value."
  },
  {
    "title": "CBCentral | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth/cbcentral",
    "html": "Overview\n\nThe CBCentral class represents remote central devices (or centrals) that have connected to an app implementing the peripheral role on a local device. Remote centrals use universally unique identifiers (UUIDs), represented by NSUUID objects, to identify themselves.\n\nTopics\nIdentifying a Remote Central\nvar maximumUpdateValueLength: Int\nThe maximum amount of data, in bytes, that the central can receive in a single notification or indication.\nRelationships\nInherits From\nCBPeer\nSee Also\nCentrals\nclass CBCentralManager\nAn object that scans for, discovers, connects to, and manages peripherals.\nprotocol CBCentralManagerDelegate\nA protocol that provides updates for the discovery and management of peripheral devices."
  },
  {
    "title": "Core Bluetooth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/corebluetooth",
    "html": "Overview\n\nThe Core Bluetooth framework provides the classes needed for your apps to communicate with Bluetooth-equipped low energy (LE) and Basic Rate / Enhanced Data Rate (BR/EDR) wireless technology.\n\nDon’t subclass any of the classes of the Core Bluetooth framework. Overriding these classes isn’t supported and results in undefined behavior.\n\nCore Bluetooth background execution modes aren’t supported in iPad apps running on macOS.\n\nImportant\n\nYour app will crash if its Info.plist doesn’t include usage description keys for the types of data it needs to access. To access Core Bluetooth APIs on apps linked on or after iOS 13, include the NSBluetoothAlwaysUsageDescription key. In iOS 12 and earlier, include NSBluetoothPeripheralUsageDescription to access Bluetooth peripheral data.\n\nTopics\nCentrals\nclass CBCentral\nA remote device connected to a local app, which is acting as a peripheral.\nclass CBCentralManager\nAn object that scans for, discovers, connects to, and manages peripherals.\nprotocol CBCentralManagerDelegate\nA protocol that provides updates for the discovery and management of peripheral devices.\nPeripherals\nclass CBPeripheral\nA remote peripheral device.\nprotocol CBPeripheralDelegate\nA protocol that provides updates on the use of a peripheral’s services.\nclass CBPeripheralManager\nAn object that manages and advertises peripheral services exposed by this app.\nprotocol CBPeripheralManagerDelegate\nA protocol that provides updates for local peripheral state and interactions with remote central devices.\nclass CBAttribute\nA representation of common aspects of services offered by a peripheral.\nstruct CBAttributePermissions\nValues that represent the read, write, and encryption permissions for a characteristic’s value.\nData Transfer\nTransferring Data Between Bluetooth Low Energy Devices\nCreate a Bluetooth low energy central and peripheral device, and allow them to discover each other and exchange data.\nServices\nclass CBService\nA collection of data and associated behaviors that accomplish a function or feature of a device.\nclass CBMutableService\nA service with writeable property values.\nclass CBCharacteristic\nA characteristic of a remote peripheral’s service.\nclass CBMutableCharacteristic\nA characteristic of a local peripheral’s service.\nclass CBDescriptor\nAn object that provides further information about a remote peripheral’s characteristic.\nclass CBMutableDescriptor\nAn object that provides additional information about a local peripheral’s characteristic.\nSupporting Types\nclass CBManager\nThe abstract base class that manages central and peripheral objects.\nclass CBATTRequest\nA request that uses the Attribute Protocol (ATT).\nclass CBPeer\nAn object that represents a remote device.\nclass CBUUID\nA universally unique identifier, as defined by Bluetooth standards.\nBluetooth Classic Support\nUsing Core Bluetooth Classic\nDiscover and communicate with a Bluetooth Classic device by using the Core Bluetooth APIs.\nErrors\nstruct CBError\nAn error that Core Bluetooth returns during Bluetooth transactions.\nlet CBErrorDomain: String\nThe domain for Core Bluetooth errors.\nenum CBError.Code\nThe codes for errors that Core Bluetooth returns during Bluetooth transactions.\nstruct CBATTError\nAn error that Core Bluetooth returns while using Attribute Protocol (ATT).\nlet CBATTErrorDomain: String\nThe domain for Core Bluetooth ATT errors.\nenum CBATTError.Code\nThe possible errors returned by a GATT server (a remote peripheral) during Bluetooth low energy ATT transactions.\nDeprecated\nenum CBCentralManagerState\nValues that represent the current state of a central manager object.\nDeprecated\nenum CBPeripheralManagerState\nValues that represent the current state of the peripheral manager.\nDeprecated\nDeprecated Constants\nThis document describes the constants found in the Core Bluetooth framework.\nSee Also\nRelated Documentation\nCore Bluetooth Programming Guide"
  }
]